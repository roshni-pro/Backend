
using LinqKit;
using NLog;
using System;
using System.Globalization;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web.Http;
//using static AngularJSAuthentication.API.Controllers.CustomersController;
//using static AngularJSAuthentication.API.Controllers.DeliverychargeController;
//using static AngularJSAuthentication.API.Controllers.SalesAppCounterController;
using MongoDB.Bson;
using AngularJSAuthentication.DataContracts.Transaction.Reports;
using AngularJSAuthentication.BusinessLayer.Managers.Masters;
//using AngularJSAuthentication.DataContracts.Masters;
using AngularJSAuthentication.API.Managers;
using AgileObjects.AgileMapper;
using AngularJSAuthentication.Common.Constants;
using AngularJSAuthentication.DataContracts.ElasticSearch;
using AngularJSAuthentication.API.Helper;
using AngularJSAuthentication.DataContracts.PeopleNotification;
using System.Web;
using Dapper;
using System.Text;
using AngularJSAuthentication.DataContracts.CustomerReferralDc;
using AngularJSAuthentication.Common.Enums;
using AngularJSAuthentication.DataContracts.External.SalesAppDc;
//using AngularJSAuthentication.Model;
using System.Data.Common;
using System.Collections.Concurrent;
using AngularJSAuthentication.DataContracts.Mongo;
using AngularJSAuthentication.API.Helpers;
using System.IO;
using AngularJSAuthentication.DataContracts.Shared;
using AngularJSAuthentication.API.Managers.SalesApp;
using AngularJSAuthentication.DataContracts.ForCast;
using AngularJSAuthentication.Common.Helpers;
using AngularJSAuthentication.Model.SalesApp;
using AngularJSAuthentication.API.Controllers.AgentCommission;
//using AngularJSAuthentication.DataContracts.External;
using Nito.AsyncEx;
using AngularJSAuthentication.API.Helper.SalesApp;
//using AngularJSAuthentication.API.Controllers.External.SalesManApp;
using MongoDB.Bson.IO;
using AngularJSAuthentication.DataLayer.Infrastructure;
using AngularJSAuthentication.BusinessLayer.Helpers.ElasticDataHelper;
using AngularJSAuthentication.DataContracts.Transaction.Mongo;
using AngularJSAuthentication.Model.CustomerShoppingCart;
using AngularJSAuthentication.DataContracts.APIParams;
using AngularJSAuthentication.Model.Forecasting;
using AngularJSAuthentication.API.Models;
using Nito.AspNetBackgroundTasks;
using GenricEcommers.Models;
using AngularJSAuthentication.DataContracts.Transaction;
using AngularJSAuthentication.DataContracts.External.MobileExecutiveDC;
using Newtonsoft.Json;
using AngularJSAuthentication.Model;
using AngularJSAuthentication.Model.Agentcommision;
using AngularJSAuthentication.Model.BillDiscount;
using AngularJSAuthentication.API.Managers.CRM;
using AngularJSAuthentication.API.Helper.Elastic;
using AngularJSAuthentication.DataContracts.Masters;
using static AngularJSAuthentication.API.Controllers.BackendOrderController;
using System.Data.Entity.Core.Objects;
using AngularJSAuthentication.BusinessLayer.SalesApp;
using AngularJSAuthentication.DataContracts.Masters.Store;
using AngularJSAuthentication.Model.Store;
using AngularJSAuthentication.API.Helper.Notification;

namespace AngularJSAuthentication.API.Controllers
{
    [RoutePrefix("api/MobileExecutive")]
    public class MobileExecutiveController : ApiController
    {
        public static Logger logger = LogManager.GetCurrentClassLogger();
        private static TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime indianTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);
        public int MemberShipHours = AppConstants.MemberShipHours;
        public double xPointValue = AppConstants.xPoint;
        public bool ElasticSearchEnable = AppConstants.ElasticSearchEnable;
        readonly string platformIdxName = $"skorderdata_{AppConstants.Environment}";
        public bool EnableOtherLanguage = false;


        [Route("")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage Saleslogin(string mob, string password, string FcmId, string DeviceId, string CurrentAPKversion, string PhoneOSversion, string UserDeviceName, string IMEI, string customerTracking = null)
        {

            using (var db = new AuthContext())
            {
                DataContracts.External.MobileExecutiveDC.Peopleresponse res;
                People People = new People();
                People = db.Peoples.Where(x => x.Mobile == mob && x.Active == true && x.Deleted == false).FirstOrDefault();
                #region TODO:SalesAppMarch2023
                var WarehouseDetail = db.Warehouses.Where(x => x.WarehouseId == People.WarehouseId && x.active == true && x.Deleted == false).FirstOrDefault();
                People.WarehouseName = WarehouseDetail != null ? WarehouseDetail.WarehouseName : string.Empty;
                var ClusterExecutiveData = db.ClusterStoreExecutives.Where(x => x.ExecutiveId == People.PeopleID && x.IsActive == true && x.IsDeleted == false).ToList();
                var ClusterIds = ClusterExecutiveData.Select(x => x.ClusterId).Distinct().ToList();
                if (ClusterIds.Count > 0)
                {
                    var ClusterNames = db.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();
                    People.clusterId = string.Join(",", ClusterIds);
                    People.clusterName = string.Join(",", ClusterNames);
                }

                var StoreIds = ClusterExecutiveData.Select(x => x.StoreId).Distinct().ToList();
                if (StoreIds.Count > 0)
                {
                    var StoreNames = db.StoreDB.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).Distinct().ToList();
                    People.StoreId = string.Join(",", StoreIds);
                    People.StoreName = string.Join(",", StoreNames);
                }
                var ChannelId = ClusterExecutiveData.Select(x => x.ChannelMasterId).FirstOrDefault();
                var Channel = db.ChannelMasters.Where(x => x.ChannelMasterId == ChannelId && x.Active == true && x.Deleted == false).Select(x => x.ChannelType).FirstOrDefault();

                #endregion
                if (People != null)
                {
                    if (People.Password == password)
                    {
                        People.ChannelId = ChannelId;
                        People.Channel = Channel != null ? Channel : "";
                        var registeredApk = db.GetAPKUserAndPwd("SalesApp");
                        People.RegisteredApk = registeredApk;
                        if (string.IsNullOrEmpty(customerTracking))
                        {
                            List<string> FCMIds = new List<string>();
                            if (People.FcmId != FcmId)
                                FCMIds.Add(People.FcmId);


                            string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + People.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                            var role = db.Database.SqlQuery<string>(query).ToList();
                            var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                            if (IsRole)
                            {
                                People.Role = "Hub sales lead";
                            }
                            else if (role.Any(x => x.Contains("Digital sales executive")))
                            {
                                People.Role = "Digital sales executive";
                            }
                            else if (role.Any(x => x.Contains("Telecaller")))
                            {
                                People.Role = "Telecaller";
                            }
                            else
                            {
                                People.Role = "";
                            }
                            People.FcmId = FcmId;
                            People.DeviceId = DeviceId;
                            People.CurrentAPKversion = CurrentAPKversion;   //tejas for device info 
                            People.PhoneOSversion = PhoneOSversion;
                            People.UserDeviceName = UserDeviceName;
                            People.IMEI = IMEI;
                            People.UpdatedDate = DateTime.Now;
                            db.Entry(People).State = EntityState.Modified;
                            #region Device History
                            PhoneRecordHistory phonerecord = new PhoneRecordHistory();
                            phonerecord.PeopleID = People.PeopleID;
                            phonerecord.PeopleFirstName = People.PeopleFirstName;
                            phonerecord.Department = People.Department;
                            phonerecord.Mobile = People.Mobile;
                            phonerecord.CurrentAPKversion = People.CurrentAPKversion;
                            phonerecord.IMEI = People.IMEI;
                            phonerecord.PhoneOSversion = People.PhoneOSversion;
                            phonerecord.UserDeviceName = People.UserDeviceName;
                            phonerecord.UpdatedDate = DateTime.Now;
                            db.PhoneRecordHistoryDB.Add(phonerecord);
                            int id = db.Commit();
                            #endregion


                            if (FCMIds.Any())
                            {
                                string Key = ConfigurationManager.AppSettings["SalesFcmApiKey"];
                                //var objNotificationList = FCMIds.Distinct().Select(x => new
                                //{
                                //    to = x,
                                //    PeopleId = People.PeopleID,
                                //    data = new
                                //    {
                                //        title = "",
                                //        body = "",
                                //        icon = "",
                                //        typeId = "",
                                //        notificationCategory = "",
                                //        notificationType = "",
                                //        notificationId = "",
                                //        notify_type = "logout",
                                //        url = "",
                                //    }
                                //}).ToList();

                                var data = new FCMData
                                {
                                    title = "",
                                    body = "",
                                    icon = "",
                                    notificationCategory = "",
                                    notificationType = "",
                                    notify_type = "logout",
                                    url = "",
                                };

                                ConcurrentBag<ManualAutoNotification> AutoNotifications = new ConcurrentBag<ManualAutoNotification>();
                                MongoDbHelper<ManualAutoNotification> AutoNotificationmongoDbHelper = new MongoDbHelper<ManualAutoNotification>();
                                ParallelLoopResult parellelResult = Parallel.ForEach(FCMIds.Distinct(), (x) =>
                                {
                                    var AutoNotification = new ManualAutoNotification
                                    {
                                        CreatedDate = DateTime.Now,
                                        FcmKey = Key,
                                        IsActive = true,
                                        IsSent = false,
                                        NotificationMsg = Newtonsoft.Json.JsonConvert.SerializeObject(data),
                                        ObjectId = People.PeopleID,
                                        ObjectType = "People"
                                    };
                                    try
                                    {
                                        var firebaseService = new FirebaseNotificationServiceHelper(Key);
                                        //var fcmid = "fZGIeP5dTKGd-2JBZttcDj:APA91bGINtqXqKuCcEHd4qXZMN-VtX5KC2g98KkytmGdpc28_-duDu8Ry1P6Kk_Xb9RgRG0iDWrp8DkwE1EPCOPG0OLz2uRjo-HBg-Ysg-mDaMErlYLjJGZE7ScXKIkjmWZ0xNO6UyxN";
                                        var result = firebaseService.SendNotificationForApprovalAsync(x, data);
                                        if (result != null)
                                        {
                                            AutoNotification.IsSent = true;
                                        }
                                        else
                                        {
                                            AutoNotification.IsSent = false;
                                        }
                                        //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                                        //tRequest.Method = "post";
                                        //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(x);
                                        //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                                        //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                                        //tRequest.ContentLength = byteArray.Length;
                                        //tRequest.ContentType = "application/json";
                                        //using (Stream dataStream = tRequest.GetRequestStream())
                                        //{
                                        //    dataStream.Write(byteArray, 0, byteArray.Length);
                                        //    using (WebResponse tResponse = tRequest.GetResponse())
                                        //    {
                                        //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                                        //        {
                                        //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                                        //            {
                                        //                String responseFromFirebaseServer = tReader.ReadToEnd();
                                        //                AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse>(responseFromFirebaseServer);
                                        //                if (response.success == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = true;
                                        //                }
                                        //                else if (response.failure == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = false;
                                        //                }
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                    }
                                    catch (Exception asd)
                                    {
                                        AutoNotification.IsSent = false;
                                        logger.Error(new StringBuilder("Error while sending FCM for type: ").Append(data.notify_type).Append(asd.ToString()).ToString());
                                    }
                                });
                                if (parellelResult.IsCompleted && AutoNotifications != null && AutoNotifications.Any())
                                {
                                    var autoNot = AutoNotifications.ToList();
                                    AutoNotificationmongoDbHelper.InsertMany(autoNot);
                                }
                            }
                        }
                        res = new DataContracts.External.MobileExecutiveDC.Peopleresponse
                        {
                            people = People,
                            Status = true,
                            message = "Success."

                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        res = new DataContracts.External.MobileExecutiveDC.Peopleresponse
                        {
                            people = null,
                            Status = false,
                            message = "Wrong Password."

                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                else
                {
                    res = new DataContracts.External.MobileExecutiveDC.Peopleresponse
                    {
                        people = null,
                        Status = false,
                        message = "Record not found."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }

        [Route("salesdata")]
        [HttpGet]
        public HttpResponseMessage salesdata()
        {
            List<SalesappVersion> salesapp = new List<SalesappVersion>();

            using (AuthContext context = new AuthContext())
            {

                salesapp = context.SalesappVersionDB.Where(x => x.isCompulsory == true).ToList();
            }


            return Request.CreateResponse(HttpStatusCode.OK, salesapp);

        }

        [Route("SalesProfile")]
        [HttpGet]
        [Authorize]
        public HttpResponseMessage SalesProfile(int PeopleId)
        {
            DataContracts.External.MobileExecutiveDC.PeopleLoginDCs res;
            DataContracts.External.MobileExecutiveDC.PeopleLoginDC person = new DataContracts.External.MobileExecutiveDC.PeopleLoginDC();
            if (PeopleId > 0)
            {
                using (var db = new AuthContext())
                {
                    long ChannelID = 0;
                    var Channel = "";
                    var p = db.Peoples.Where(u => u.PeopleID == PeopleId).SingleOrDefault();
                    if (p != null && (!p.Active || p.Deleted))
                    {
                        res = new DataContracts.External.MobileExecutiveDC.PeopleLoginDCs()
                        {
                            people = person,
                            Status = false,
                            message = p.Deleted ? "People not exist." : "Your Account InActive Please Contact Our Team."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }

                    person = Mapper.Map(p).ToANew<DataContracts.External.MobileExecutiveDC.PeopleLoginDC>();
                    #region TODO:SalesAppMarch2023              

                    var ClusterExecutivesData = db.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsActive == true && x.IsDeleted == false).ToList();
                    if (ClusterExecutivesData != null && ClusterExecutivesData.Count > 0)
                    {
                        var ClusterIds = ClusterExecutivesData.Select(x => x.ClusterId).Distinct().ToList();
                        if (ClusterIds.Count > 0)
                        {
                            var ClusterNames = db.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();
                            person.clusterId = string.Join(",", ClusterIds);
                            person.clusterName = string.Join(",", ClusterNames);
                        }

                        var StoreIds = ClusterExecutivesData.Select(x => x.StoreId).Distinct().ToList();
                        if (StoreIds.Count > 0)
                        {
                            var StoreNames = db.StoreDB.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).Distinct().ToList();
                            person.StoreId = string.Join(",", StoreIds);
                            person.StoreName = string.Join(",", StoreNames);
                        }

                        ChannelID = ClusterExecutivesData.Select(x => x.ChannelMasterId).FirstOrDefault();
                        Channel = db.ChannelMasters.Where(x => x.ChannelMasterId == ChannelID).Select(x => x.ChannelType).FirstOrDefault();
                        #endregion
                    }
                    if (person != null)
                    {
                        person.ChannelId = ChannelID;
                        person.Channel = Channel != null ? Channel : "";
                        if (person.IsLocation == null)
                        {
                            person.IsLocation = false;
                        }
                        if (person.IsRecording == null)
                        {
                            person.IsRecording = false;

                        }
                        if (person.LocationTimer == null)
                        {
                            person.LocationTimer = 0;
                        }
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = db.Database.SqlQuery<string>(query).ToList();
                        var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                        if (IsRole)
                        {
                            person.Role = "Hub sales lead";
                        }
                        else if (role.Any(x => x.Contains("Digital sales executive")))
                        {
                            person.Role = "Digital sales executive";
                        }
                        else if (role.Any(x => x.Contains("Telecaller")))
                        {
                            person.Role = "Telecaller";
                        }
                        else
                        {
                            person.Role = "";
                        }

                        var data = db.LocationResumeDetails.Where(z => z.PeopleId == PeopleId).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                        if (data != null)
                        {

                            person.Status = data.Status;
                        }
                        AppVisits appVisit = new AppVisits();
                        var identity = User.Identity as ClaimsIdentity;
                        int userid = 0;
                        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                            userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                        var CurrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                        MongoDbHelper<AppVisits> mongoDbHelper = new MongoDbHelper<AppVisits>();
                        string mobileNoQyery = "select distinct p.Mobile,w.WarehouseName  from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id left join Warehouses w on p.WarehouseId = w.WarehouseId where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var mobileNo = db.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.PersonDetail>(mobileNoQyery).FirstOrDefault();
                        if (mobileNo != null)
                        {
                            person.WarehouseName = mobileNo.WarehouseName;
                        }
                        var salesAppdata = mongoDbHelper.Select(x => x.AppType == "SalesApp" && x.UserId == PeopleId).OrderByDescending(x => x.Id).FirstOrDefault();
                        if (salesAppdata != null && mobileNo != null)
                        {
                            var VisitedDate = salesAppdata.VisitedOn.ToString("dd/MM/yyyy");
                            appVisit.UserName = mobileNo.Mobile;
                            appVisit.UserId = PeopleId;
                            appVisit.AppType = "SalesApp";
                            appVisit.VisitedOn = DateTime.Now;
                            var Status = mongoDbHelper.InsertAsync(appVisit);
                        }
                        else if (salesAppdata == null && mobileNo != null)
                        {
                            appVisit.UserName = mobileNo.Mobile;
                            appVisit.UserId = PeopleId;
                            appVisit.AppType = "SalesApp";
                            appVisit.VisitedOn = DateTime.Now;
                            var Status = mongoDbHelper.InsertAsync(appVisit);
                        }

                        res = new DataContracts.External.MobileExecutiveDC.PeopleLoginDCs()
                        {
                            people = person,
                            Status = true,
                            message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        res = new DataContracts.External.MobileExecutiveDC.PeopleLoginDCs()
                        {
                            people = person,
                            Status = false,
                            message = "People not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
            }
            res = new DataContracts.External.MobileExecutiveDC.PeopleLoginDCs()
            {
                people = person,
                Status = false,
                message = "Something went wrong."
            };
            return Request.CreateResponse(HttpStatusCode.OK, res);
        }

        [Route("GetCustomerAddress")]
        [HttpGet]
        public async Task<CustomerAddressDc> GetCustomerAddress(int CustomerId)
        {
            var result = new CustomerAddressDc();
            using (AuthContext context = new AuthContext())
            {

                result = context.CustomerAddressDB.Where(x => x.CustomerId == CustomerId && x.IsActive == true && x.IsDeleted == false).Select(x => new CustomerAddressDc
                {
                    CityPlaceId = x.CityPlaceId,
                    CustomerId = x.CustomerId,
                    AddressLineOne = x.AddressLineOne,
                    AddressLineTwo = x.AddressLineTwo,
                    AddressLng = x.AddressLng,
                    AddressLat = x.AddressLat,
                    AreaLat = x.AreaLat,
                    AreaLng = x.AreaLng,
                    AddressPlaceId = x.AddressPlaceId,
                    AreaPlaceId = x.AreaPlaceId,
                    ZipCode = x.ZipCode,
                    AddressText = x.AddressText,
                    AreaText = x.AreaText,
                }).FirstOrDefault();
                if (result != null) { result.CityName = context.Customers.FirstOrDefault(z => z.CustomerId == CustomerId).City; }
            }
            return result;
        }

        [Route("GetPeopleCityInfo/{PeopleId}")]
        [HttpGet]
        public async Task<PeopleCityDCs> GetPeopleCityInfo(int PeopleId)
        {
            var result = new PeopleCityDCs();
            if (PeopleId > 0)
            {
                using (AuthContext context = new AuthContext())
                {
                    var param = new SqlParameter("@PeopleId", PeopleId);
                    result = context.Database.SqlQuery<PeopleCityDCs>("exec GetPeopleCityInfo @PeopleId", param).FirstOrDefault();
                }
            }
            return result;
        }

        [Route("GetCompanyDetailsForRetailer")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<companydetails> GetCompanyDetailsForRetailer()
        {
            string FinBoxApiClientKey = ConfigurationManager.AppSettings["FinBoxClientKey"].ToString();
            long LogDboyLoctionMeter = Common.Constants.AppConstants.LogDboyLoctionMeter;
            var loggedInUser = HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null ? HttpContext.Current.User.Identity.Name : "System";
            int customerId = 0, WarehouseId = 0, cityId = 0;
            bool IsKpp = false;
            bool IsSalesMan = false;

            if ((string.IsNullOrEmpty(loggedInUser) || loggedInUser == "RetailerApp")
                && HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Request.Headers.AllKeys.Any(x => x == "username"))
            {
                loggedInUser = Convert.ToString(HttpContext.Current.Request.Headers.GetValues("username").FirstOrDefault());

                customerId = loggedInUser.Split('_').Length > 1 ? Convert.ToInt32(loggedInUser.Split('_')[1]) : 0;
            }
            else
            {
                IsSalesMan = true;
            }
            companydetails res;
            bool IsActive = true;
            using (AuthContext db = new AuthContext())
            {
                if (customerId > 0)
                {
                    var customer = db.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                    IsActive = customer.Active;
                    IsKpp = customer.IsKPP;
                    WarehouseId = customer.Warehouseid.HasValue ? customer.Warehouseid.Value : 0;
                    if (WarehouseId > 0)
                    {
                        cityId = db.Warehouses.FirstOrDefault(x => x.WarehouseId == WarehouseId).Cityid;
                    }
                }
                var companydetails = db.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                if (companydetails != null)
                {
                    var query = "select  Operation.IsNewDeliveryAppOnCluster(" + customerId + ") ";

                    companydetails.ShowOrderTracking = db.Database.SqlQuery<bool>(query).FirstOrDefault();

                    if (WarehouseId > 0)
                    {
                        MongoDbHelper<SalesAppDefaultCustomers> SalesAppmongoDbHelper = new MongoDbHelper<SalesAppDefaultCustomers>();
                        var defaultCustomer = SalesAppmongoDbHelper.Select(x => x.WarehouseId == WarehouseId).FirstOrDefault();
                        if (defaultCustomer != null)
                        {
                            companydetails.DefaultSalesSCcustomerId = defaultCustomer.CustomerId;
                        }

                    }
                    if (cityId > 0)
                    {
                        MongoDbHelper<ExtandedCompanyDetail> mongoDbHelper = new MongoDbHelper<ExtandedCompanyDetail>();
                        var extandedCompanyDetail = mongoDbHelper.Select(x => x.CityId == cityId && x.AppType == "Retailer").FirstOrDefault();

                        if (extandedCompanyDetail != null)
                        {
                            companydetails.IsShowCreditOption = extandedCompanyDetail.IsShowCreditOption;
                            companydetails.IsOnlinePayment = extandedCompanyDetail.IsOnlinePayment;
                            companydetails.ischeckBookShow = extandedCompanyDetail.ischeckBookShow;
                            companydetails.IsRazorpayEnable = extandedCompanyDetail.IsRazorpayEnable;
                            companydetails.IsePayLaterShow = extandedCompanyDetail.IsePayLaterShow;
                            companydetails.IsFinBox = extandedCompanyDetail.IsFinBox;
                            companydetails.IsCreditLineShow = extandedCompanyDetail.IsCreditLineShow;
                        }
                    }

                    companydetails.FinboxclientApikey = FinBoxApiClientKey;

                    MongoDbHelper<VATMCustomers> VATMCustomershelper = new MongoDbHelper<VATMCustomers>();
                    var vATMCustomer = VATMCustomershelper.Select(x => x.CustomerId == customerId && x.IsActive).FirstOrDefault();

                    if (vATMCustomer != null && !string.IsNullOrEmpty(vATMCustomer.Data))
                    {
                        companydetails.IsShowVATM = true;
                    }
                    if (IsKpp)
                    {

                        double IsKPPMaxWalletPointUsed = Convert.ToDouble(ConfigurationManager.AppSettings["IsKPPMaxWalletPointUsed"]);
                        if (IsKPPMaxWalletPointUsed > 0)
                        {
                            companydetails.MaxWalletPointUsed = IsKPPMaxWalletPointUsed;
                        }
                        else
                        {
                            companydetails.MaxWalletPointUsed = 8000;
                        }
                        companydetails.ischeckBookShow = false;
                        companydetails.IsShowCreditOption = false;
                        companydetails.IsePayLaterShow = false;

                    }


                    if (!IsActive)
                    {
                        companydetails.IsShowCreditOption = false;
                        companydetails.IsOnlinePayment = false;
                        companydetails.ischeckBookShow = false;
                        companydetails.IsRazorpayEnable = false;
                        companydetails.IsePayLaterShow = false;
                        companydetails.IsFinBox = false;
                        companydetails.IsCreditLineShow = false;

                    }
                    if (LogDboyLoctionMeter > 0)
                    {
                        companydetails.LogDboyLoctionMeter = LogDboyLoctionMeter;
                    }
                    if (IsSalesMan)
                    {
                        companydetails.MaxWalletPointUsed = 0;
                    }


                    res = new companydetails
                    {
                        CompanyDetails = companydetails,
                        Status = true,
                        Message = "GetCompanyDetailsForRetailer"
                    };
                    return res;
                }
                else
                {
                    res = new companydetails
                    {
                        Status = false,
                        Message = "Something went Wrong"
                    };
                    return res;
                }
            }
        }

        [Route("GetPublishedSection")]
        [HttpGet]
        public IEnumerable<AppHomeSections> GetPublishedSectionSalesApp(string appType, int WarehouseId, string lang, int PeopleId)
        {
            using (var context = new AuthContext())
            {
                CategorySalesAppDc CategorySalesApp = Categories(PeopleId, 0, WarehouseId, lang);
                List<AppHomeSections> sections = new List<AppHomeSections>();

                var datenow = indianTime;

                Caching.ICacheProvider _cacheProvider = new Caching.RedisCacheProvider();
                var publishedData = _cacheProvider.GetOrSet(Caching.CacheKeyHelper.APPHomeCacheKey(appType.Replace(" ", ""), WarehouseId.ToString()), () => GetSalesAppPublisheddata(appType, WarehouseId));

                //var publishedData = GetSalesAppPublisheddata(appType, WarehouseId);

                if (publishedData == null)
                {
                }
                else
                {
                    sections = Newtonsoft.Json.JsonConvert.DeserializeObject<List<AppHomeSections>>(publishedData.ApphomeSection);
                    foreach (var a in sections)
                    {
                        if (a.SectionType == "Banner" || a.SectionSubType == "Flash Deal")
                        {
                            foreach (var ap in a.AppItemsList)
                            {
                                //if (a.SectionSubType == "Base Category")
                                //{
                                //    ap.BaseCategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Category")
                                //{
                                //    ap.CategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Sub Category")
                                //{
                                //    ap.SubCategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Brand")
                                //{
                                //    ap.SubsubCategoryId = ap.RedirectionID;
                                //}

                                if (ap.OfferEndTime < datenow)
                                {
                                    ap.Expired = true;
                                    ap.Deleted = true;
                                    ap.Active = false;
                                }
                            }
                            if (a.AppItemsList.All(x => !x.Active && x.Deleted))
                            {
                                a.Deleted = true;
                                a.Active = false;
                            }
                        }
                    }
                    sections = sections.ToList().Select(o => new AppHomeSections
                    {
                        AppItemsList = o.Deleted == false && (o.SectionType == "Banner" || o.SectionType == "PopUp" || o.SectionSubType == "Flash Deal") ? o.AppItemsList.Where(i => i.Deleted == false && (i.OfferEndTime > datenow || i.OfferEndTime == null) && (i.OfferStartTime < datenow || i.OfferStartTime == null)).ToList() : o.AppItemsList.Where(x => x.Deleted == false).ToList(),
                        SectionID = o.SectionID,
                        AppType = o.AppType,
                        WarehouseID = o.WarehouseID,
                        SectionName = o.SectionName,
                        SectionHindiName = o.SectionHindiName,
                        SectionType = o.SectionType,
                        SectionSubType = o.SectionSubType,
                        CreatedDate = o.CreatedDate,
                        UpdatedDate = indianTime,
                        IsTile = o.IsTile,
                        IsBanner = o.IsBanner,
                        IsPopUp = o.IsPopUp,
                        Sequence = o.Sequence,
                        RowCount = o.RowCount,
                        ColumnCount = o.ColumnCount,
                        HasBackgroundColor = o.HasBackgroundColor,
                        TileBackgroundColor = o.TileBackgroundColor,
                        BannerBackgroundColor = o.BannerBackgroundColor,
                        HasHeaderBackgroundColor = o.HasHeaderBackgroundColor,
                        TileHeaderBackgroundColor = o.TileHeaderBackgroundColor,
                        HasBackgroundImage = o.HasBackgroundImage,
                        TileBackgroundImage = o.TileBackgroundImage,
                        HasHeaderBackgroundImage = o.HasHeaderBackgroundImage,
                        TileHeaderBackgroundImage = o.TileHeaderBackgroundImage,
                        IsTileSlider = o.IsTileSlider,
                        TileAreaHeaderBackgroundImage = o.TileAreaHeaderBackgroundImage,
                        HeaderTextColor = o.HeaderTextColor,
                        sectionBackgroundImage = o.sectionBackgroundImage,
                        Deleted = o.Deleted,
                        ViewType = o.ViewType,
                        WebViewUrl = o.WebViewUrl
                    }).ToList();
                }

                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                #endregion

                if (!string.IsNullOrEmpty(lang) && lang.ToLower() == "hi")
                {
                    sections.ForEach(x =>
                    {
                        string SectionName = !string.IsNullOrEmpty(x.SectionHindiName) ? x.SectionHindiName : x.SectionName;
                        x.SectionName = SectionName;
                        x.AppItemsList.ForEach(y =>
                        {
                            if (x.SectionSubType == "Base Category")
                            {
                                var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                if (basecat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(basecat.HindiName) ? basecat.HindiName : basecat.BaseCategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Category")
                            {
                                var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                if (catdata != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(catdata.HindiName) ? catdata.HindiName : catdata.CategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Sub Category")
                            {
                                var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                if (subcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subcat.HindiName) ? subcat.HindiName : subcat.SubcategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Brand")
                            {
                                var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                if (subsubcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subsubcat.HindiName) ? subsubcat.HindiName : subsubcat.SubSubcategoryName;
                                    y.TileName = tileName;
                                }
                            }

                            if (!string.IsNullOrEmpty(y.BannerImage) && !y.BannerImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.BannerImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileImage) && !y.TileImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileSectionBackgroundImage) && !y.TileSectionBackgroundImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileSectionBackgroundImage);
                            }
                            if (!string.IsNullOrEmpty(x.TileHeaderBackgroundImage) && !x.TileHeaderBackgroundImage.Contains("http"))
                            {
                                x.TileHeaderBackgroundImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , x.TileHeaderBackgroundImage);
                            }
                        });

                        if (x.SectionSubType == "Brand")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        else if (x.SectionSubType == "Item")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.CatId).Contains(t.CategoryId) && blockBarnds.Select(z => z.SubCatId).Contains(t.SubCategoryId) && blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }

                        x.AppItemsList = x.AppItemsList.Where(y => y.Active).ToList();
                        x.Active = x.SectionSubType != "Other" ? x.AppItemsList.Any() : true;
                    });
                }
                else
                {
                    sections.ForEach(x =>
                    {
                        string SectionName = !string.IsNullOrEmpty(x.SectionHindiName) ? x.SectionHindiName : x.SectionName;
                        x.SectionName = SectionName;
                        x.AppItemsList.ForEach(y =>
                        {
                            if (x.SectionSubType == "Base Category")
                            {
                                var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                if (basecat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(basecat.BaseCategoryName) ? basecat.BaseCategoryName : basecat.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Category")
                            {
                                var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                if (catdata != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(catdata.CategoryName) ? catdata.CategoryName : catdata.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Sub Category")
                            {
                                var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                if (subcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subcat.SubcategoryName) ? subcat.SubcategoryName : subcat.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Brand")
                            {
                                var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                if (subsubcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subsubcat.SubSubcategoryName) ? subsubcat.SubSubcategoryName : subsubcat.HindiName;
                                    y.TileName = tileName;
                                }
                            }

                            if (x.SectionType == "Banner")
                            {
                                if (y.RedirectionType == "Base Category")
                                {
                                    var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                    y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                }
                                else if (y.RedirectionType == "Category")
                                {
                                    var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                    y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                }
                                else if (y.RedirectionType == "Sub Category")
                                {
                                    var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                    y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                }
                                else if (y.RedirectionType == "Brand")
                                {
                                    var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                    y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                }
                            }
                            if (!string.IsNullOrEmpty(y.BannerImage) && !y.BannerImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.BannerImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileImage) && !y.TileImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileSectionBackgroundImage) && !y.TileSectionBackgroundImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileSectionBackgroundImage);
                            }
                            if (!string.IsNullOrEmpty(x.TileHeaderBackgroundImage) && !x.TileHeaderBackgroundImage.Contains("http"))
                            {
                                x.TileHeaderBackgroundImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , x.TileHeaderBackgroundImage);
                            }
                        });
                        if (x.SectionSubType == "Brand")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        else if (x.SectionSubType == "Item")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.CatId).Contains(t.CategoryId) && blockBarnds.Select(z => z.SubCatId).Contains(t.SubCategoryId) && blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        x.AppItemsList = x.AppItemsList.Where(y => y.Active).ToList();
                        x.Active = x.SectionSubType != "Other" && x.SectionSubType != "DynamicHtml" ? x.AppItemsList.Any() : true;
                    });

                }
                return sections.Where(x => x.Active).OrderBy(x => x.Sequence).ToList();

            }
        }
        public CategorySalesAppDc Categories(int PeopleId, int baseCatId, int warehouseid, string lang)
        {
            //List<Category> categories = new List<Category>();
            //List<SubCategories> subcategories = new List<SubCategories>();
            //List<SubSubCategories> subsubcategories = new List<SubSubCategories>();
            CategorySalesAppDc ibjtosend = new CategorySalesAppDc();
            ibjtosend.Basecats = new List<BaseCategory>();
            ibjtosend.Categories = new List<Category>();
            ibjtosend.SubCategories = new List<DataContracts.External.MobileExecutiveDC.SubCategories>();
            ibjtosend.SubSubCategories = new List<DataContracts.External.MobileExecutiveDC.SubSubCategories>();
            customeritem ds = new customeritem();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
            List<string> SubCats = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId).Distinct().ToList();
            List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
            List<string> strCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId + "-" + x.BrandId).Distinct().ToList();
            using (var unitOfWork = new UnitOfWork())
            {
                var catSubcatbrands = unitOfWork.KPPAppRepository.GetSalesCatSubCat(warehouseid, baseCatId);
                customeritem CatSubCatBrands = Mapper.Map(catSubcatbrands).ToANew<customeritem>();
                CatSubCatBrands.SubSubCategories = CatSubCatBrands.SubSubCategories.Where(x => strCondition.Contains(x.Categoryid + "-" + x.SubCategoryId + "-" + x.SubSubCategoryId)).ToList();
                SubCats = CatSubCatBrands.SubSubCategories.Select(x => x.Categoryid + "-" + x.SubCategoryId).Distinct().ToList();
                CatSubCatBrands.SubCategories = CatSubCatBrands.SubCategories.Where(x => SubCats.Contains(x.Categoryid + "-" + x.SubCategoryId)).ToList();

                CatIds = CatSubCatBrands.SubCategories.Select(x => x.Categoryid).ToList();
                CatSubCatBrands.Categories = CatSubCatBrands.Categories.Where(x => CatIds.Contains(x.Categoryid)).ToList();
                List<int> BaseCatIds = CatSubCatBrands.Categories.Select(x => x.BaseCategoryId).ToList();
                CatSubCatBrands.Basecats = CatSubCatBrands.Basecats.Where(x => BaseCatIds.Contains(x.BaseCategoryId)).ToList();


                if (lang == "hi")
                {
                    foreach (var kk in CatSubCatBrands.Basecats)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.BaseCategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.Categories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.CategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.SubCategories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.SubcategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.SubSubCategories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.SubSubcategoryName = kk.HindiName;
                        }
                    }
                }
                ibjtosend.Basecats = CatSubCatBrands.Basecats.Select(x => new BaseCategory { BaseCategoryId = x.BaseCategoryId, BaseCategoryName = x.BaseCategoryName, HindiName = x.HindiName, LogoUrl = x.LogoUrl }).ToList();
                ibjtosend.Categories = CatSubCatBrands.Categories.Select(x => new Category { BaseCategoryId = x.BaseCategoryId, HindiName = x.HindiName, Categoryid = x.Categoryid, CategoryName = x.CategoryName, CategoryHindiName = x.HindiName, LogoUrl = x.LogoUrl, CategoryImg = x.CategoryImg }).ToList();
                ibjtosend.SubCategories = CatSubCatBrands.SubCategories.Select(x => new DataContracts.External.MobileExecutiveDC.SubCategories { Categoryid = x.Categoryid, HindiName = x.HindiName, SubCategoryId = x.SubCategoryId, SubcategoryName = x.SubcategoryName, LogoUrl = x.LogoUrl, itemcount = x.itemcount }).ToList();
                ibjtosend.SubSubCategories = CatSubCatBrands.SubSubCategories.Select(x => new DataContracts.External.MobileExecutiveDC.SubSubCategories { SubCategoryId = x.SubCategoryId, Categoryid = x.Categoryid, HindiName = x.HindiName, SubSubCategoryId = x.SubSubCategoryId, SubSubcategoryName = x.SubSubcategoryName, LogoUrl = x.LogoUrl, itemcount = x.itemcount }).ToList();

                if (ibjtosend.SubSubCategories != null && ibjtosend.SubSubCategories.Any())
                {
                    using (var db = new AuthContext())
                    {
                        //var ActiveCustomer = db.Customers.Where(x => x.CustomerId == customerId).Select(x => new { x.IsKPP }).FirstOrDefault();

                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        #region block Barnd

                        var custtype = 4;
                        var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                        if (blockBarnds != null && blockBarnds.Any())
                        {
                            //ibjtosend.SubSubCategories = ibjtosend.SubSubCategories.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubSubCategoryId))).ToList();
                            //ibjtosend.SubCategories = ibjtosend.SubCategories.Where(x => ibjtosend.SubSubCategories.Select(y => y.SubCategoryId).Contains(x.SubCategoryId)).ToList();
                            //ibjtosend.Categories = ibjtosend.Categories.Where(x => ibjtosend.SubCategories.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();

                            ibjtosend.SubSubCategories = ibjtosend.SubSubCategories.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.SubSubCategoryId))).ToList();
                            ibjtosend.SubCategories = ibjtosend.SubCategories.Where(x => ibjtosend.SubSubCategories.Select(y => y.Categoryid + " " + y.SubCategoryId).Contains(x.Categoryid + " " + x.SubCategoryId)).ToList();
                            ibjtosend.Categories = ibjtosend.Categories.Where(x => ibjtosend.SubCategories.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();
                        }
                        #endregion
                    }
                }
            }
            return ibjtosend;
        }
        public PublishAppHome GetSalesAppPublisheddata(string appType, int wId)
        {
            using (var context = new AuthContext())
            {
                var publishedData = context.PublishAppHomeDB.Where(x => x.WarehouseID == wId && x.AppType == appType && x.Deleted == false).FirstOrDefault();
                return publishedData;
            }
        }

        public List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> GetCatSubCatwithStores(int peopleid)
        {
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> results = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            using (var context = new AuthContext())
            {
                var query = string.Format("exec IsSalesAppLead {0}", peopleid);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleid && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();

                    if (context.StoreDB.Any(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal))
                        storeids.AddRange(context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList());

                    storeids = storeids.Distinct().ToList();
                }


                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var storecategoryData = retailerAppManager.GetStoreWithDetail();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = Mapper.Map(storecategoryData).ToANew<List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>>();
                results = StoreCategorySubCategoryBrands.Where(x => storeids.Contains(x.StoreId)).ToList();
            }
            return results;
        }

        [Route("RetailerItemDetail")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.ItemDataDC> RetailerItemDetail(int wareHouseId, int customerId, int itemId, string lang = "en")
        {
            List<ItemMaster> items = new List<ItemMaster>();
            using (var myContext = new AuthContext())
            {
                var ActiveCustomer = myContext.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                items = myContext.itemMasters.Where(x => x.ItemId == itemId && (x.ItemAppType == 0 || x.ItemAppType == 1) && x.active && !x.Deleted && x.WarehouseId == wareHouseId && (x.ItemAppType == 0 || x.ItemAppType == 1)).ToList();

                var retList = items.Select(a => new DataContracts.External.MobileExecutiveDC.ItemDataDC
                {
                    WarehouseId = a.WarehouseId,
                    CompanyId = a.CompanyId,
                    ItemId = a.ItemId,
                    ItemNumber = a.Number,
                    itemname = a.itemname,
                    LogoUrl = a.LogoUrl,
                    MinOrderQty = a.MinOrderQty,
                    price = a.price,
                    TotalTaxPercentage = a.TotalTaxPercentage,
                    UnitPrice = a.UnitPrice,
                    active = a.active,
                    marginPoint = a.marginPoint,
                    NetPurchasePrice = a.NetPurchasePrice,
                    promoPerItems = a.promoPerItems,
                    IsOffer = a.IsOffer,
                    Deleted = a.Deleted,
                    OfferCategory = a.OfferCategory,
                    OfferStartTime = a.OfferStartTime,
                    OfferEndTime = a.OfferEndTime,
                    OfferQtyAvaiable = a.OfferQtyAvaiable,
                    OfferQtyConsumed = a.OfferQtyConsumed,
                    OfferId = a.OfferId,
                    OfferType = a.OfferType,
                    OfferWalletPoint = a.OfferWalletPoint,
                    OfferFreeItemId = a.OfferFreeItemId,
                    OfferPercentage = a.OfferPercentage,
                    OfferFreeItemName = a.OfferFreeItemName,
                    OfferFreeItemImage = a.OfferFreeItemImage,
                    OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                    OfferMinimumQty = a.OfferMinimumQty,
                    FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                    FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                    ItemAppType = a.ItemAppType,
                }).OrderByDescending(x => x.ItemNumber).ToList();

                retList = await ItemValidate(retList, ActiveCustomer, myContext, lang);

                return retList.FirstOrDefault();
            }

        }
        private async Task<List<DataContracts.External.MobileExecutiveDC.ItemDataDC>> ItemValidate(List<DataContracts.External.MobileExecutiveDC.ItemDataDC> newdata, Customer ActiveCustomer, AuthContext db, string lang)
        {
            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> returnItems = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
            if (ActiveCustomer != null && newdata.Any())
            {
                if (newdata != null && newdata.Any(s => !s.active))
                {
                    var InactiveItems = newdata.Where(s => !s.active);
                    InactiveItems = InactiveItems.GroupBy(x => x.ItemMultiMRPId).Select(x => x.FirstOrDefault()).ToList();
                    newdata = newdata.Where(s => s.active).ToList();
                    newdata.AddRange(InactiveItems);
                }
                var IsPrimeCustomer = db.PrimeCustomers.Any(x => x.CustomerId == ActiveCustomer.CustomerId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.StartDate <= indianTime && x.EndDate >= indianTime);

                DateTime CurrentDate = !IsPrimeCustomer ? indianTime.AddHours(-1 * MemberShipHours) : indianTime;
                var inActiveCustomer = ActiveCustomer != null && (ActiveCustomer.Active == false || ActiveCustomer.Deleted == true) ? true : false;
                var warehouseId = ActiveCustomer != null && ActiveCustomer.Warehouseid.HasValue ? ActiveCustomer.Warehouseid.Value : 0;


                string sqlquery = "SELECT a.[FlashDealId] AS [FlashDealId], a.[ItemId] AS [ItemId] FROM [dbo].[FlashDealItemConsumeds] AS a inner join AppHomeSectionItems c on a.FlashDealId = c.sectionItemId inner join dbo.AppHomeSections b on b.SectionID = c.apphomesections_SectionID  and b.Active=1 and b.[Deleted]=0  and b.WarehouseID=" + warehouseId +
                                     " WHERE a.[CustomerId]=" + ActiveCustomer.CustomerId;
                var FlashDealWithItemIds = db.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.FlashDealWithItem>(sqlquery).ToList();



                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = ActiveCustomer.IsKPP ? 1 : 2;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 1, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.OfferOn == "Item" && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Retailer App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                List<DataContracts.External.MobileExecutiveDC.ItemDataDC> freeItems = null;
                if (activeOfferids.Any())
                {
                    var freeItemIds = newdata.Where(x => x.OfferId.HasValue && x.OfferId > 0 && activeOfferids.Contains(x.OfferId.Value)).Select(x => x.OfferFreeItemId).ToList();
                    freeItems = db.itemMasters.Where(x => freeItemIds.Contains(x.ItemId)).Select(x => new DataContracts.External.MobileExecutiveDC.ItemDataDC
                    {
                        ItemId = x.ItemId,
                        itemname = x.itemname,
                        HindiName = x.HindiName,
                        IsSensitive = x.IsSensitive,
                        IsSensitiveMRP = x.IsSensitiveMRP,
                        price = x.price,
                        UnitofQuantity = x.UnitofQuantity,
                        UOM = x.UOM,
                        LogoUrl = x.LogoUrl
                    }).ToList();

                    if (lang.Trim() == "hi")
                    {
                        foreach (var it in freeItems)
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }
                    }
                }

                var itemMultiMRPIds = newdata.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                var PrimeItems = itemMultiMRPIds.Any() ? db.PrimeItemDetails.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId) && x.CityId == ActiveCustomer.Cityid && (x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value))).ToList() : null;

                List<ItemScheme> ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, ActiveCustomer.Warehouseid.Value, db);
                foreach (var it in newdata.Where(x => (x.ItemAppType == 0 || x.ItemAppType == 1)))
                {
                    if (PrimeItems != null && PrimeItems.Any(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.MinOrderQty == it.MinOrderQty))
                    {
                        var primeItem = PrimeItems.FirstOrDefault(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.MinOrderQty == it.MinOrderQty);
                        it.IsPrimeItem = true;
                        it.PrimePrice = primeItem.PrimePercent > 0 ? Convert.ToDecimal(it.UnitPrice - (it.UnitPrice * Convert.ToDouble(primeItem.PrimePercent) / 100)) : primeItem.PrimePrice;
                    }
                    //Condition for offer end.
                    if (!inActiveCustomer)
                    {
                        it.IsFlashDealStart = false;
                        if (it.OfferStartTime.HasValue)
                            it.NoPrimeOfferStartTime = it.OfferStartTime.Value.AddHours(MemberShipHours);
                        it.CurrentStartTime = indianTime;
                        if (IsPrimeCustomer)
                        {
                            it.IsFlashDealStart = it.OfferStartTime.Value <= indianTime;
                        }
                        else
                        {
                            it.IsFlashDealStart = it.NoPrimeOfferStartTime <= indianTime;
                        }

                        if (!(it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime))
                        {
                            if (it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            else if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }
                        else if ((it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime) && it.OfferCategory == 2)
                        {
                            if (FlashDealWithItemIds != null && FlashDealWithItemIds.Any(x => x.ItemId == it.ItemId))
                            {
                                it.IsFlashDealUsed = true;
                            }
                        }

                        if (it.OfferCategory == 1)
                        {
                            if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            {
                                it.IsOffer = true;
                                if (freeItems != null && freeItems.Any(y => y.ItemId == it.OfferFreeItemId))
                                {
                                    it.OfferFreeItemName = freeItems.FirstOrDefault(y => y.ItemId == it.OfferFreeItemId).itemname;
                                    it.OfferFreeItemImage = freeItems.FirstOrDefault(y => y.ItemId == it.OfferFreeItemId).LogoUrl;
                                }
                            }
                            else
                                it.IsOffer = false;
                        }
                    }
                    else
                    {
                        if (it.OfferCategory == 1)
                        {
                            if (!(it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime) || !(activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId)))
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }
                        else
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;

                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        var unitprice = it.UnitPrice;
                        if (it.OfferCategory == 2 && it.IsOffer && it.FlashDealSpecialPrice.HasValue && it.FlashDealSpecialPrice > 0)
                        {
                            unitprice = it.FlashDealSpecialPrice.Value;
                        }
                        if (it.price > unitprice)
                        {
                            it.marginPoint = unitprice > 0 ? (((it.price - unitprice) * 100) / unitprice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == it.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = it.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    it.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }

                        }
                        else
                        {
                            it.marginPoint = 0;
                        }

                    }
                    catch { }

                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }

                    returnItems.Add(it);
                }
            }

            if (returnItems.Any())
            {
                if (EnableOtherLanguage && !string.IsNullOrEmpty(lang) && lang.ToLower() != "hi" && lang.ToLower() != "en")
                {
                    List<DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest> ElasticLanguageDataReqests = new List<DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest>();
                    ElasticLanguageDataReqests = returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.itemBaseName }).ToList();
                    // ElasticLanguageDatas.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageData { englishtext = x.itemname }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.OfferFreeItemName }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.SellingUnitName }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.UOM }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.Scheme }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.UnitofQuantity }).ToList());


                    LanguageConvertHelper LanguageConvertHelper = new LanguageConvertHelper();
                    var ElasticLanguageDatas = LanguageConvertHelper.GetConvertLanguageData(ElasticLanguageDataReqests.Distinct().ToList(), lang.ToLower());
                    returnItems.ForEach(x =>
                    {
                        x.itemBaseName = ElasticLanguageDatas.Any(y => y.englishtext == x.itemBaseName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.itemBaseName).converttext : x.itemBaseName;
                        x.itemname = ElasticLanguageDatas.Any(y => y.englishtext == x.itemBaseName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.itemBaseName).converttext : x.itemBaseName;
                        if (x.IsSensitive == true && x.IsSensitiveMRP == true)
                        {
                            x.itemname += " " + x.price + " MRP " + x.UnitofQuantity + " " + x.UOM;
                        }
                        else if (x.IsSensitive == true && x.IsSensitiveMRP == false)
                        {
                            x.itemname += " " + x.UnitofQuantity + " " + x.UOM; //item display name 
                        }

                        else if (x.IsSensitive == false && x.IsSensitiveMRP == false)
                        {
                            x.itemname = x.itemBaseName; //item display name
                        }
                        else if (x.IsSensitive == false && x.IsSensitiveMRP == true)
                        {
                            x.itemname += " " + x.price + " MRP";//item display name 
                        }

                        x.OfferFreeItemName = ElasticLanguageDatas.Any(y => y.englishtext == x.OfferFreeItemName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.OfferFreeItemName).converttext : x.OfferFreeItemName;
                        x.SellingUnitName = ElasticLanguageDatas.Any(y => y.englishtext == x.SellingUnitName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.SellingUnitName).converttext : x.SellingUnitName;
                        x.UOM = ElasticLanguageDatas.Any(y => y.englishtext == x.UOM) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.UOM).converttext : x.UOM;
                        x.Scheme = ElasticLanguageDatas.Any(y => y.englishtext == x.Scheme) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.Scheme).converttext : x.Scheme;
                        x.UnitofQuantity = ElasticLanguageDatas.Any(y => y.englishtext == x.UnitofQuantity) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.UnitofQuantity).converttext : x.UnitofQuantity;

                    });
                }

            }

            return returnItems;
        }

        [Route("GetItemBySectionForAgent")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage GetItemBySectionForAgent(int PeopleId, int warehouseid, int sectionid, string lang)
        {

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
            List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
            List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

            using (var context = new AuthContext())
            {
                DateTime CurrentDate = DateTime.Now;
                var data = context.AppHomeSectionsDB.Where(x => x.WarehouseID == warehouseid && x.Deleted == false && x.SectionID == sectionid).Include("detail").SelectMany(x => x.AppItemsList.Select(y => new { y.ItemId, y.SectionItemID })).ToList();
                if (data != null)
                {
                    List<int> Itemids = data.Select(x => x.ItemId).ToList();

                    DataContracts.External.MobileExecutiveDC.WRSITEM item = new DataContracts.External.MobileExecutiveDC.WRSITEM();

                    var newdata = (from a in context.itemMasters
                                   where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true && Itemids.Contains(a.ItemId) && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                   && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                   let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new DataContracts.External.MobileExecutiveDC.factoryItemdata
                                   {
                                       WarehouseId = a.WarehouseId,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       CompanyId = a.CompanyId,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       HindiName = a.HindiName,
                                       VATTax = a.VATTax,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       promoPerItems = a.promoPerItems,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       BillLimitQty = a.BillLimitQty,
                                       ItemAppType = a.ItemAppType,
                                       ItemMultiMRPId = a.ItemMultiMRPId
                                   }).ToList();

                    newdata = newdata.OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion
                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                    foreach (var it in newdata)
                    {
                        if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                        {
                            it.IsOffer = false;
                        }
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }


                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<DataContracts.External.MobileExecutiveDC.factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax)  By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;

                            }
                            else
                            {

                                it.dreamPoint = 0;
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                        }
                        catch { }

                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }
                        item.ItemMasters.Add(it);
                    }
                    if (item.ItemMasters != null)
                    {
                        var res = new
                        {
                            ItemMasters = item.ItemMasters,
                            Status = true,
                            Message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        Array[] l = new Array[] { };
                        var res = new
                        {
                            ItemMasters = l,
                            Status = false,
                            Message = "fail"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                else
                {
                    Array[] l = new Array[] { };
                    var res = new
                    {
                        ItemMasters = l,
                        Status = false,
                        Message = "Item Not found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }

            }
        }

        [Route("GetAllSalesStore")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.RetailerStore>> GetAllSalesStore(int PeopleId, int warehouseId, string lang)
        {
            List<DataContracts.External.MobileExecutiveDC.RetailerStore> retailerStore = new List<DataContracts.External.MobileExecutiveDC.RetailerStore>();
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetAllStore]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@lang", lang));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                retailerStore = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<DataContracts.External.MobileExecutiveDC.RetailerStore>(reader).ToList();

                #region Mappedstore
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                if (retailerStore != null && retailerStore.Any())
                {
                    List<int> Subcatids = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                    retailerStore = retailerStore.Where(x => Subcatids.Contains(x.SubCategoryId)).ToList();
                }
                #endregion
                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (retailerStore != null && retailerStore.Any() && blockBarnds != null && blockBarnds.Any())
                {
                    retailerStore = retailerStore.Where(x => !(blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId))).ToList();
                }
                #endregion
            }
            return retailerStore;
        }

        [Route("Category")]
        [HttpGet]
        public CategorySalesAppDc GetCategory(int PeopleId, int warehouseid, string lang)
        {
            CategorySalesAppDc ibjtosend = Categories(PeopleId, 0, warehouseid, lang);
            return ibjtosend;
        }

        #region login ViaOtp
        [Route("ViaOtp")]
        [HttpPost]
        [AllowAnonymous]
        public HttpResponseMessage SalesAppLoginByotpV2(People customer)
        {
            using (AuthContext db = new AuthContext())
            {

                SalesDTO res;
                string error = "";
                People People = new People();
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + customer.Mobile + "' and (r.Name like '%sales executive%' or r.Name like '%sales lead%' or  r.Name like '%Digital sales executive%' or  r.Name like '%Telecaller%') and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                People = db.Database.SqlQuery<People>(query).FirstOrDefault();
                //People = db.Peoples.Where(x => x.Mobile == customer.Mobile && x.Department == "Sales Executive" && x.Deleted == false && x.Active == true).FirstOrDefault();
                query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + People.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = db.Database.SqlQuery<string>(query).ToList();
                var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                if (IsRole)
                {
                    People.Role = "Hub sales lead";
                }
                else if (role.Any(x => x.Contains("Digital sales executive")))
                {
                    People.Role = "Digital sales executive";
                }
                else if (role.Any(x => x.Contains("Telecaller")))
                {
                    People.Role = "Telecaller";
                }
                else
                {
                    People.Role = "";
                }
                try
                {
                    if (People == null)
                    {
                        res = new SalesDTO()
                        {
                            P = null,
                            Status = false,
                            Message = "Not a Registered Sales Executive"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        using (var context = new AuthContext())
                            try
                            {
                                string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
                                string sRandomOTP = GenerateRandomOTP(4, saAllowedCharacters);
                                // string OtpMessage = " is Your login Code. :). ShopKirana";
                                string OtpMessage = ""; //"{#var1#} is Your login Code. {#var2#}. ShopKirana";
                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Login_Code");
                                OtpMessage = dltSMS == null ? "" : dltSMS.Template;
                                OtpMessage = OtpMessage.Replace("{#var1#}", sRandomOTP);
                                OtpMessage = OtpMessage.Replace("{#var2#}", ":)");

                                //string CountryCode = "91";
                                //string Sender = "SHOPKR";
                                //string authkey = Startup.smsauthKey; //"100498AhbWDYbtJT56af33e3";
                                //int route = 4;
                                //string path = "http://bulksms.newrise.in/api/sendhttp.php?authkey=" + authkey + "&mobiles=" + People.Mobile + "&message=" + sRandomOTP + " :" + OtpMessage + " &sender=" + Sender + "&route=" + route + "&country=" + CountryCode;

                                ////string path ="http://bulksms.newrise.in/api/sendhttp.php?authkey=100498AhbWDYbtJT56af33e3&mobiles=9770838685&message= SK OTP is : " + sRandomOTP + " &sender=SHOPKR&route=4&country=91";

                                //var webRequest = (HttpWebRequest)WebRequest.Create(path);
                                //webRequest.Method = "GET";
                                //webRequest.ContentType = "application/json";
                                //webRequest.UserAgent = "Mozilla/5.0 (Windows NT 5.1; rv:28.0) Gecko/20100101 Firefox/28.0";
                                //webRequest.ContentLength = 0; // added per comment 
                                //webRequest.Credentials = CredentialCache.DefaultCredentials;
                                //webRequest.Accept = "*/*";
                                //var webResponse = (HttpWebResponse)webRequest.GetResponse();
                                bool result = dltSMS == null ? false : Common.Helpers.SendSMSHelper.SendSMS(People.Mobile, OtpMessage, ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString(), dltSMS.DLTId);
                                if (!result)
                                {
                                    logger.Info("OTP Genrated: " + sRandomOTP);
                                }
                                else
                                {
                                    logger.Info("OTP Genrated: " + sRandomOTP);

                                    var check = context.CheckPeopleSalesPersonData(customer.Mobile);
                                    check.OTP = sRandomOTP;
                                    if (check != null)
                                    {
                                        res = new SalesDTO
                                        {

                                            P = new People { OTP = sRandomOTP },
                                            Status = true,
                                            Message = "Success."

                                        };
                                        return Request.CreateResponse(HttpStatusCode.OK, res);
                                    }
                                    else
                                    {
                                        res = new SalesDTO
                                        {
                                            P = null,
                                            Status = false,
                                            Message = "Not Success"

                                        };
                                        return Request.CreateResponse(HttpStatusCode.OK, res);
                                    }
                                }
                            }
                            catch (Exception sdf)
                            {
                                res = new SalesDTO
                                {
                                    P = null,
                                    Status = false,
                                    Message = "Not Success"

                                };
                                return Request.CreateResponse(HttpStatusCode.OK, res);
                            }
                    }
                }
                catch (Exception es)
                {
                    error = error + es;
                }
                res = new SalesDTO()
                {
                    P = null,
                    Status = false,
                    Message = ("This is something went wrong Sales Executive : " + error)
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }

        #endregion

        #region Generate Random OTP
        /// <summary>
        /// Created by 29/04/2019 
        /// Create rendom otp//By Sudhir
        /// </summary>
        /// <param name="iOTPLength"></param>
        /// <param name="saAllowedCharacters"></param>
        /// <returns></returns>
        private string GenerateRandomOTP(int iOTPLength, string[] saAllowedCharacters)
        {
            string sOTP = String.Empty;
            string sTempChars = String.Empty;
            Random rand = new Random();

            for (int i = 0; i < iOTPLength; i++)
            {
                int p = rand.Next(0, saAllowedCharacters.Length);
                sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                sOTP += sTempChars;
            }
            return sOTP;
        }
        #endregion

        [Route("GetLogedSalesPerson")]
        [AcceptVerbs("GET")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage GetLogedSalesPerson(string MobileNumber, bool IsOTPverified, string fcmid, string CurrentAPKversion, string PhoneOSversion, string DeviceId, string UserDeviceName, string IMEI = "")
        {
            DataContracts.External.MobileExecutiveDC.SalesDTO res;
            using (var db = new AuthContext())
            {
                try
                {
                    if (IsOTPverified == true)
                    {
                        People People = new People();
                        string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + MobileNumber + "' and r.Name='Sales Executive' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        People = db.Database.SqlQuery<People>(query).FirstOrDefault();
                        //People = db.Peoples.Where(x => x.Mobile == MobileNumber && x.Department == "Sales Executive" && x.Deleted == false && x.Active == true).FirstOrDefault();
                        if (People != null)
                        {
                            var ExecutiveChannelId = db.ClusterStoreExecutives.Where(x => x.ExecutiveId == People.PeopleID && x.IsActive == true && x.IsDeleted == false).Select(x => x.ChannelMasterId).FirstOrDefault();
                            var Channel = db.ChannelMasters.Where(x => x.ChannelMasterId == ExecutiveChannelId).Select(x => x.ChannelType).FirstOrDefault();

                            People.ChannelId = ExecutiveChannelId;
                            People.Channel = Channel != null ? Channel : "";

                            List<string> FCMIds = new List<string>();
                            if (People.FcmId != fcmid)
                                FCMIds.Add(People.FcmId);

                            People.FcmId = fcmid;
                            People.DeviceId = DeviceId;
                            People.CurrentAPKversion = CurrentAPKversion;   //tejas for device info 
                            People.PhoneOSversion = PhoneOSversion;
                            People.UserDeviceName = UserDeviceName;
                            People.IMEI = IMEI;
                            People.UpdatedDate = DateTime.Now;
                            //db.Peoples.Attach(People);
                            db.Entry(People).State = EntityState.Modified;
                            db.Commit();
                            #region Device History
                            var Customerhistory = db.Peoples.Where(x => x.Mobile == People.Mobile).FirstOrDefault();
                            try
                            {
                                PhoneRecordHistory phonerecord = new PhoneRecordHistory();
                                if (Customerhistory != null)
                                {
                                    phonerecord.PeopleID = Customerhistory.PeopleID;
                                    phonerecord.PeopleFirstName = Customerhistory.PeopleFirstName;
                                    phonerecord.Department = Customerhistory.Department;
                                    phonerecord.Mobile = Customerhistory.Mobile;
                                    phonerecord.CurrentAPKversion = Customerhistory.CurrentAPKversion;
                                    phonerecord.PhoneOSversion = Customerhistory.PhoneOSversion;
                                    phonerecord.UserDeviceName = Customerhistory.UserDeviceName;
                                    phonerecord.IMEI = Customerhistory.IMEI;
                                    phonerecord.UpdatedDate = DateTime.Now;
                                    db.PhoneRecordHistoryDB.Add(phonerecord);
                                    int id = db.Commit();
                                }
                            }
                            catch (Exception ex)
                            {
                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                            }
                            #endregion

                            var registeredApk = db.GetAPKUserAndPwd("SalesApp");
                            People.RegisteredApk = registeredApk;
                            string queryrole = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + People.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                            var role = db.Database.SqlQuery<string>(queryrole).ToList();

                            var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                            if (IsRole)
                            {
                                People.Role = "Hub sales lead";
                            }
                            else if (role.Any(x => x.Contains("Digital sales executive")))
                            {
                                People.Role = "Digital sales executive";
                            }
                            else if (role.Any(x => x.Contains("Telecaller")))
                            {
                                People.Role = "Telecaller";
                            }
                            else
                            {

                                People.Role = "";

                            }

                            if (FCMIds.Any())
                            {
                                string Key = ConfigurationManager.AppSettings["SalesFcmApiKey"];
                                //var objNotificationList = FCMIds.Distinct().Select(x => new
                                //{
                                //    to = x,
                                //    PeopleId = People.PeopleID,
                                //    data = new
                                //    {
                                //        title = "",
                                //        body = "",
                                //        icon = "",
                                //        typeId = "",
                                //        notificationCategory = "",
                                //        notificationType = "",
                                //        notificationId = "",
                                //        notify_type = "logout",
                                //        url = "",
                                //    }
                                //}).ToList();
                                var data = new FCMData
                                {
                                    title = "",
                                    body = "",
                                    icon = "",
                                    notificationCategory = "",
                                    notificationType = "",
                                    notify_type = "logout",
                                    url = "",
                                };
                                var firebaseService = new FirebaseNotificationServiceHelper(Key);
                                ConcurrentBag<ManualAutoNotification> AutoNotifications = new ConcurrentBag<ManualAutoNotification>();
                                MongoDbHelper<ManualAutoNotification> AutoNotificationmongoDbHelper = new MongoDbHelper<ManualAutoNotification>();
                                ParallelLoopResult parellelResult = Parallel.ForEach(FCMIds.Distinct(), (x) =>
                                {
                                    var AutoNotification = new ManualAutoNotification
                                    {
                                        CreatedDate = DateTime.Now,
                                        FcmKey = Key,
                                        IsActive = true,
                                        IsSent = false,
                                        NotificationMsg = Newtonsoft.Json.JsonConvert.SerializeObject(data),
                                        ObjectId = People.PeopleID,
                                        ObjectType = "People"
                                    };
                                    try
                                    {
                                        //var fcmid = "fZGIeP5dTKGd-2JBZttcDj:APA91bGINtqXqKuCcEHd4qXZMN-VtX5KC2g98KkytmGdpc28_-duDu8Ry1P6Kk_Xb9RgRG0iDWrp8DkwE1EPCOPG0OLz2uRjo-HBg-Ysg-mDaMErlYLjJGZE7ScXKIkjmWZ0xNO6UyxN";
                                        var result = firebaseService.SendNotificationForApprovalAsync(x, data);
                                        if (result != null)
                                        {
                                            AutoNotification.IsSent = true;
                                        }
                                        else
                                        {
                                            AutoNotification.IsSent = false;
                                        }
                                        //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                                        //tRequest.Method = "post";
                                        //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(x);
                                        //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                                        //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                                        //tRequest.ContentLength = byteArray.Length;
                                        //tRequest.ContentType = "application/json";
                                        //using (Stream dataStream = tRequest.GetRequestStream())
                                        //{
                                        //    dataStream.Write(byteArray, 0, byteArray.Length);
                                        //    using (WebResponse tResponse = tRequest.GetResponse())
                                        //    {
                                        //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                                        //        {
                                        //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                                        //            {
                                        //                String responseFromFirebaseServer = tReader.ReadToEnd();
                                        //                AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse>(responseFromFirebaseServer);
                                        //                if (response.success == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = true;
                                        //                }
                                        //                else if (response.failure == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = false;
                                        //                }
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                    }
                                    catch (Exception asd)
                                    {
                                        AutoNotification.IsSent = false;
                                        logger.Error(new StringBuilder("Error while sending FCM for type: ").Append(data.notify_type).Append(asd.ToString()).ToString());
                                    }
                                });
                                if (parellelResult.IsCompleted && AutoNotifications != null && AutoNotifications.Any())
                                {
                                    var autoNot = AutoNotifications.ToList();
                                    AutoNotificationmongoDbHelper.InsertMany(autoNot);
                                }
                            }
                            res = new DataContracts.External.MobileExecutiveDC.SalesDTO()
                            {
                                P = People,
                                Status = true,
                                Message = "Success."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                        else
                        {
                            res = new DataContracts.External.MobileExecutiveDC.SalesDTO()
                            {
                                P = null,
                                Status = false,
                                Message = "SalesPerson does not exist or Incorect mobile number."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                    }
                    else
                    {

                        res = new DataContracts.External.MobileExecutiveDC.SalesDTO()
                        {
                            P = null,
                            Status = false,
                            Message = "OTP not verified."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                    res = new DataContracts.External.MobileExecutiveDC.SalesDTO()
                    {
                        P = null,
                        Status = false,
                        Message = "Some Error Occurred."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }

        [Route("GetOrder/V2")]
        [HttpGet]
        public List<DataContracts.External.MobileExecutiveDC.SalesOrder> GetOrderV2(int PeopleId, int Skip, int Take, string lang, string type = "", string keyword = null)
        {

            List<DataContracts.External.MobileExecutiveDC.SalesOrder> salesOrders = new List<DataContracts.External.MobileExecutiveDC.SalesOrder>();
            List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail> SalesOrderDetails = new List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>();
            List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc> OrderStatusHistoryDcs = new List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>();

            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetSalesOrderNew]";

                if (string.IsNullOrEmpty(type)) type = "ALL";

                cmd.Parameters.Add(new SqlParameter("@peopleId", PeopleId));
                cmd.Parameters.Add(new SqlParameter("@skip", Skip));
                cmd.Parameters.Add(new SqlParameter("@take", Take));
                cmd.Parameters.Add(new SqlParameter("@status", type));
                cmd.Parameters.Add(new SqlParameter("@keyword", keyword));

                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                salesOrders = ((IObjectContextAdapter)context)
                               .ObjectContext
                               .Translate<DataContracts.External.MobileExecutiveDC.SalesOrder>(reader).ToList();
                reader.NextResult();

                if (reader.HasRows)
                {
                    SalesOrderDetails = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>(reader).ToList();
                    reader.NextResult();
                }
                if (reader.HasRows)
                {
                    OrderStatusHistoryDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>(reader).ToList();
                }

                if (lang.Trim() == "hi")
                {
                    if (salesOrders != null && salesOrders.Any() && SalesOrderDetails != null && SalesOrderDetails.Any())
                    {
                        salesOrders.ForEach(x => x.orderDetails = SalesOrderDetails.Where(
                            y => y.OrderId == x.OrderId).ToList()
                            );
                        salesOrders.ForEach(z => z.orderDetails.ForEach(y =>
                            y.itemname = y.ItemHindiName != null ? y.ItemHindiName : y.itemname
                        ));
                    }
                    if (salesOrders != null && salesOrders.Any() && OrderStatusHistoryDcs != null && OrderStatusHistoryDcs.Any())
                    {
                        salesOrders.ForEach(x => x.OrderStatusHistoryDcs = OrderStatusHistoryDcs.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                }
                else
                {
                    if (salesOrders != null && salesOrders.Any() && SalesOrderDetails != null && SalesOrderDetails.Any())
                    {
                        salesOrders.ForEach(x => x.orderDetails = SalesOrderDetails.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                    if (salesOrders != null && salesOrders.Any() && OrderStatusHistoryDcs != null && OrderStatusHistoryDcs.Any())
                    {
                        salesOrders.ForEach(x => x.OrderStatusHistoryDcs = OrderStatusHistoryDcs.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                }
            }

            return salesOrders;
        }

        [Route("MyOrderStatusCount")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.GetOrderResponseDc MyOrderStatusCount(int PeopleId)
        {
            DataContracts.External.MobileExecutiveDC.GetOrderResponseDc res = new DataContracts.External.MobileExecutiveDC.GetOrderResponseDc();
            List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc> OrderStatusHistoryDcs = new List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>();
            List<DataContracts.External.MobileExecutiveDC.StatusCountDc> StatusLiveCountDcs = new List<DataContracts.External.MobileExecutiveDC.StatusCountDc>();
            List<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc> StatusCompletedCountDcs = new List<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc>();


            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                context.Database.CommandTimeout = 600;
                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetMyOrderStatusCount]";

                cmd.Parameters.Add(new SqlParameter("@peopleId", PeopleId));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                StatusLiveCountDcs = ((IObjectContextAdapter)context)
                               .ObjectContext
                               .Translate<DataContracts.External.MobileExecutiveDC.StatusCountDc>(reader).ToList();
                reader.NextResult();

                if (reader.HasRows)
                {
                    StatusCompletedCountDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc>(reader).ToList();
                }
                res.StatusCompletedCountDcs = StatusCompletedCountDcs.FirstOrDefault();
                res.StatusCountDcs = StatusLiveCountDcs.FirstOrDefault();
            }

            return res;
        }

        [Route("GetMyOrderDetailByOrderId")]
        [HttpGet]
        public MyOrderItemDC GetMyOrderDetailByOrderId(int OrderId)
        {
            MyOrderItemDC res = new MyOrderItemDC();
            List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc> OrderStatusHistoryDcs = new List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>();
            List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail> SalesOrderDetail = new List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>();

            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                context.Database.CommandTimeout = 600;
                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetMyOrderDetail]";

                cmd.Parameters.Add(new SqlParameter("@OrderId", OrderId));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                SalesOrderDetail = ((IObjectContextAdapter)context)
                               .ObjectContext
                               .Translate<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>(reader).ToList();
                reader.NextResult();

                if (reader.HasRows)
                {
                    OrderStatusHistoryDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>(reader).ToList();
                }
                res.OverDueDays = SalesOrderDetail != null && SalesOrderDetail.Count() > 0 ? SalesOrderDetail[0].OverDueDays : 0;
                res.RemainingAmt = SalesOrderDetail != null && SalesOrderDetail.Count() > 0 ? SalesOrderDetail[0].RemainingAmt : 0;
                res.PTROrderAmount = SalesOrderDetail.Sum(x => x.PTROrderAmount);
                res.orderDetails = SalesOrderDetail;
                res.OrderStatusHistoryDcs = OrderStatusHistoryDcs;
                res.IsShowPaylaterAmountButton = SalesOrderDetail != null && SalesOrderDetail.Count() > 0 ? SalesOrderDetail[0].IsShowPaylaterAmountButton : false;
            }

            return res;
        }

        [Route("Genotp")]
        [HttpGet]
        [AllowAnonymous]
        public OTPDc Getotp(string MobileNumber, bool type, string mode = "")
        {
            string Apphash = "";
            bool TestUser = false;
            OTPDc b = new OTPDc();
            List<string> CustomerStatus = new List<string>();
            CustomerStatus.Add("Not Verified");
            CustomerStatus.Add("Pending For Submitted");
            CustomerStatus.Add("Pending For Activation");
            CustomerStatus.Add("Temporary Active");
            using (var context = new AuthContext())
            {
                if (!type)
                {
                    Customer cust = context.Customers.Where(c => c.Mobile.Trim().Equals(MobileNumber.Trim()) && !c.Deleted).FirstOrDefault();
                    if (cust != null)
                    {
                        TestUser = cust.CustomerCategoryId.HasValue && cust.CustomerCategoryId.Value == 0;
                        b = new OTPDc()
                        {
                            Status = false,
                            Message = "This mobile no already registered with " + cust.CustomerVerify + " Status.",
                            CustomerId = cust.CustomerId,
                            SkCode = cust.Skcode,
                            CanUpdateCustomer = (cust.CustomerVerify == "Full Verified" || cust.CustomerVerify == "Pending For Submitted" || cust.CustomerVerify == "Partial Verified") ? false : true
                        };
                        return b;
                    }
                }
            }
            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
            string sRandomOTP = GenerateRandomOTP(4, saAllowedCharacters);
            // string OtpMessage = " is Your login Code. :). ShopKirana";
            string OtpMessage = ""; //"{#var1#} is Your login Code. {#var2#}. ShopKirana";
            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.RetailerApp, "Login_Code");
            OtpMessage = dltSMS == null ? "" : dltSMS.Template;
            OtpMessage = OtpMessage.Replace("{#var1#}", sRandomOTP);
            OtpMessage = OtpMessage.Replace("{#var2#}", ":)");


            if (string.IsNullOrEmpty(Apphash))
            {
                Apphash = ConfigurationManager.AppSettings["Apphash"];
            }

            //string OtpMessage = string.Format("<#> {0} : is Your Shopkirana Verification Code for complete process.{1}{2} Shopkirana", sRandomOTP, Environment.NewLine, Apphash);
            //string message = sRandomOTP + " :" + OtpMessage;
            // string message = OtpMessage;
            var status = dltSMS == null ? false : Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, OtpMessage, ((Int32)Common.Enums.SMSRouteEnum.OTP).ToString(), dltSMS.DLTId);
            //if (status)
            //{
            MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP> mongoDbHelper = new MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP>();
            Model.CustomerOTP.RetailerCustomerOTP CustomerOTP = new Model.CustomerOTP.RetailerCustomerOTP
            {
                CreatedDate = DateTime.Now,
                DeviceId = "",
                IsActive = true,
                Mobile = MobileNumber,
                Otp = sRandomOTP
            };
            mongoDbHelper.Insert(CustomerOTP);
            //}


            OTPDc a = new OTPDc()
            {
                OtpNo = TestUser || (!string.IsNullOrEmpty(mode) && mode == "debug") ? sRandomOTP : "",
                Status = true,
                Message = "Successfully sent OTP."
            };
            return a;
        }

        [Route("CheckCustomer")]
        [HttpGet]
        [AllowAnonymous]
        public CheckCustomerSalesAppDC CheckCustomer(string MobileNumber)
        {
            CheckCustomerSalesAppDC b = new CheckCustomerSalesAppDC();
            List<string> CustomerStatus = new List<string>();
            CustomerStatus.Add("Not Verified");
            CustomerStatus.Add("Pending For Submitted");
            CustomerStatus.Add("Pending For Activation");
            CustomerStatus.Add("Temporary Active");
            using (var context = new AuthContext())
            {
                if (MobileNumber != "")
                {
                    Customer cust = context.Customers.Where(c => c.Mobile.Trim().Equals(MobileNumber.Trim()) && !c.Deleted).FirstOrDefault();
                    if (cust != null)
                    {
                        b = new CheckCustomerSalesAppDC()
                        {
                            Status = true,
                            Message = "This mobile no already registered with " + cust.CustomerVerify + " Status.",
                            CustomerId = cust.CustomerId,
                            SkCode = cust.Skcode,
                            CanUpdateCustomer = (cust.CustomerVerify == "Full Verified" || cust.CustomerVerify == "Pending For Submitted" || cust.CustomerVerify == "Partial Verified") ? false : true
                        };
                        return b;
                    }
                    else
                    {
                        b = new CheckCustomerSalesAppDC()
                        {
                            Status = false,
                            Message = "Customer Not Found",
                            CustomerId = 0,
                            SkCode = "",
                            CanUpdateCustomer = false
                        };
                        return b;
                    }
                }
            }
            return b;
        }

        #region:SalesAppCounter
        [Route("AddSalesAppCounter")]
        [AllowAnonymous]
        [HttpPost]
        public HttpResponseMessage add(DataContracts.External.MobileExecutiveDC.SalesAppCounterDc sale)
        {
            try
            {
                SalesAppCounter sales = new SalesAppCounter
                {
                    Date = indianTime,
                    Deleted = false,
                    lat = sale.lat,
                    Long = sale.Long,
                    SalesPersonId = sale.SalesPersonId
                };
                using (var db = new AuthContext())
                {
                    db.SalesAppCounterDB.Add(sales);
                    db.Commit();
                    SalesAppCounterDTO MUData = new SalesAppCounterDTO()
                    {
                        MUget = sales,
                        Status = true,
                        Message = " Added suscessfully."
                    };
                    //var query = @"select p.peopleId as SalesPersonId, p.Mobile, p.PeopleFirstName, p.PeopleLastName, p.Email, w.WarehouseName, w.WarehouseId from people p inner join Warehouses w on w.WarehouseId = p.WarehouseId where p.peopleId=#salesPersonID#";
                    //query = query.Replace("#salesPersonID#", sale.SalesPersonId.ToString());
                    //InitialPoint initialPoint = new InitialPoint()
                    //{
                    //    lat = sale.lat,
                    //    Long = sale.Long,
                    //    Mobile = sale.Mobile,
                    //    PeopleFirstName = sale.PeopleFirstName,
                    //    PeopleLastName = sale.PeopleLastName,
                    //    WarehouseId = sale.WarehouseId,
                    //    WarehouseName = sale.WarehouseName,
                    //    SalesPersonId = sale.SalesPersonId
                    //};
                    //var client = new SignalRMasterClient(DbConstants.URL + "signalr");
                    //// Send message to server.
                    //string message = JsonConvert.SerializeObject(initialPoint);
                    //client.SayHello(message, initialPoint.WarehouseId.ToString());
                    //client.Stop();
                    //string message = JsonConvert.SerializeObject(initialPoint);
                    //ChatFeed.SendChatMessage(message, initialPoint.WarehouseId.ToString());
                    return Request.CreateResponse(HttpStatusCode.OK, MUData);
                }
            }
            catch (Exception ex)
            {
                SalesAppCounterDTO MUData = new SalesAppCounterDTO()
                {
                    MUget = null,
                    Status = false,
                    Message = "Something Went Wrong."
                };
                logger.Error("Error in Add data salesperson " + ex.Message);
                return Request.CreateResponse(HttpStatusCode.BadRequest, MUData);
            }
        }
        #endregion

        [Route("CheckOTP")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<HttpResponseMessage> CheckOTP(SalesCustomerRegistor otpCheckDc)
        {
            MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP> mongoDbHelper = new MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP>();
            var cartPredicate = PredicateBuilder.New<Model.CustomerOTP.RetailerCustomerOTP>(x => x.Mobile == otpCheckDc.MobileNumber);

            var CustomerOTPs = mongoDbHelper.Select(cartPredicate).ToList();
            if (CustomerOTPs != null && CustomerOTPs.Any(x => x.Otp == otpCheckDc.Otp))
            {
                foreach (var item in CustomerOTPs)
                {
                    await mongoDbHelper.DeleteAsync(item.Id);
                }

                using (var context = new AuthContext())
                {
                    People people = context.Peoples.Where(q => q.PeopleID == otpCheckDc.PeopleId).FirstOrDefault();
                    var cust = context.Customers.Where(x => x.Deleted == false && x.Mobile == otpCheckDc.MobileNumber).FirstOrDefault();
                    Cluster dd = null;
                    if (cust != null)
                    {
                        cust.Skcode = skcode();
                        cust.ShopName = otpCheckDc.ShopName;
                        cust.Shopimage = otpCheckDc.Shopimage;
                        cust.Mobile = otpCheckDc.MobileNumber;
                        cust.Active = false;
                        cust.Deleted = false;
                        cust.CreatedBy = people.DisplayName;
                        cust.CreatedDate = indianTime;
                        cust.lat = otpCheckDc.lat;
                        cust.lg = otpCheckDc.lg;
                        cust.Shoplat = otpCheckDc.lat;
                        cust.Shoplg = otpCheckDc.lg;
                        #region to assign cluster ID and determine if it is in cluster or not.

                        if (cust.lat != 0 && cust.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(cust.lat).Append("', '").Append(cust.lg).Append("')");
                            var clusterId = context.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                cust.InRegion = false;
                            }
                            else
                            {
                                var agent = context.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    cust.AgentCode = Convert.ToString(agent.AgentId);


                                cust.ClusterId = clusterId;
                                dd = context.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                cust.ClusterName = dd.ClusterName;
                                cust.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            cust.Warehouseid = dd.WarehouseId;
                            cust.WarehouseName = dd.WarehouseName;
                            cust.ClusterId = dd.ClusterId;
                            cust.ClusterName = dd.ClusterName;
                            cust.Cityid = dd.CityId;
                            cust.City = dd.CityName;
                            cust.ShippingCity = dd.CityName;
                            cust.IsCityVerified = true;
                        }
                        context.Entry(cust).State = EntityState.Modified;
                        context.Commit();
                    }
                    else
                    {
                        cust = new Customer();
                        cust.Skcode = skcode();
                        cust.ShopName = otpCheckDc.ShopName;
                        cust.Shopimage = otpCheckDc.Shopimage;
                        cust.Mobile = otpCheckDc.MobileNumber;
                        cust.Active = false;
                        cust.Deleted = false;
                        cust.CreatedBy = people.DisplayName;
                        cust.CreatedDate = indianTime;
                        cust.UpdatedDate = indianTime;
                        cust.lat = otpCheckDc.lat;
                        cust.lg = otpCheckDc.lg;
                        cust.Shoplat = otpCheckDc.lat;
                        cust.Shoplg = otpCheckDc.lg;
                        cust.CompanyId = 1;
                        #region to assign cluster ID and determine if it is in cluster or not.

                        if (cust.lat != 0 && cust.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(cust.lat).Append("', '").Append(cust.lg).Append("')");
                            var clusterId = context.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                cust.InRegion = false;
                            }
                            else
                            {
                                var agent = context.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    cust.AgentCode = Convert.ToString(agent.AgentId);


                                cust.ClusterId = clusterId;
                                dd = context.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                cust.ClusterName = dd.ClusterName;
                                cust.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            cust.Warehouseid = dd.WarehouseId;
                            cust.WarehouseName = dd.WarehouseName;
                            cust.ClusterId = dd.ClusterId;
                            cust.ClusterName = dd.ClusterName;

                            cust.Cityid = dd.CityId;
                            cust.City = dd.CityName;
                            cust.ShippingCity = dd.CityName;
                            cust.IsCityVerified = true;
                        }
                        context.Customers.Add(cust);
                    }
                    context.Commit();

                    var res = new
                    {
                        SkCode = cust.Skcode,
                        Status = true,
                        Message = "OTP Verify Successfully."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
            else
            {
                var res = new
                {
                    SkCode = "",
                    Status = false,
                    Message = "Please enter correct OTP."
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }

        public string skcode()
        {
            using (AuthContext db = new AuthContext())
            {
                var query = "select max(cast(replace(skcode,'SK','') as bigint)) from customers ";
                var intSkCode = db.Database.SqlQuery<long>(query).FirstOrDefault();
                var skcode = "SK" + (intSkCode + 1);
                bool flag = false;
                while (flag == false)
                {
                    var check = db.Customers.Any(s => s.Skcode.Trim().ToLower() == skcode.Trim().ToLower());

                    if (!check)
                    {
                        flag = true;
                        return skcode;
                    }
                    else
                    {
                        intSkCode += 1;
                        skcode = "SK" + intSkCode;
                    }
                }

                return skcode;
            }
        }

        [HttpGet]
        [Route("Search")]
        public HttpResponseMessage Search(int PeopleId, string key)
        {
            using (AuthContext db = new AuthContext())
            {
                var customer = db.Customers.Where(c => (c.Skcode.Contains(key) || c.ShopName.Contains(key) || c.Mobile.Contains(key)) && c.Deleted == false).ToList();
                var warehouseIds = customer.Select(x => x.Warehouseid).Distinct().ToList();
                var warehouses = db.Warehouses.Where(x => warehouseIds.Contains(x.WarehouseId)).ToList();
                var customerids = customer.Select(x => x.CustomerId).ToList();
                var custDocs = db.CustomerDocs.Where(x => customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                var gstDocttypeid = db.CustomerDocTypeMasters.FirstOrDefault(x => x.IsActive && x.DocType == "GST")?.Id;
                var clusterIds = customer.Select(x => x.ClusterId).ToList();
                var clusterExecutive = db.ClusterStoreExecutives.Where(x => clusterIds.Contains(x.ClusterId) && x.IsActive && !x.IsDeleted.Value).Select(x => new { x.ClusterId, x.ExecutiveId }).ToList();

                customer.ForEach(x =>
                {
                    x.ExecutiveId = clusterExecutive.Any(y => y.ClusterId == x.ClusterId && y.ExecutiveId == PeopleId) ? clusterExecutive.FirstOrDefault(y => y.ClusterId == x.ClusterId && y.ExecutiveId == PeopleId).ExecutiveId : 0;
                    x.WarehouseName = x.Warehouseid.HasValue ? warehouses.FirstOrDefault(z => z.WarehouseId == x.Warehouseid.Value)?.WarehouseName : "";
                    if (gstDocttypeid.HasValue && custDocs.Any(y => y.CustomerDocTypeMasterId != gstDocttypeid.Value))
                    {
                        x.CustomerDocTypeMasterId = custDocs.FirstOrDefault(y => y.CustomerDocTypeMasterId != gstDocttypeid.Value).CustomerDocTypeMasterId;
                    }
                    if (x.RefNo == "NA" || string.IsNullOrEmpty(x.RefNo))
                        x.RefNo = "";
                });

                return Request.CreateResponse(HttpStatusCode.OK, customer);
            }
        }

        [Route("GetCustomerDocType")]
        [HttpGet]
        public async Task<dynamic> GetCustomerDocType(int warehouseId, int PeopleId)
        {
            using (AuthContext db = new AuthContext())
            {
                var CustomerDocTypes = await db.CustomerDocTypeMasters.Where(x => x.IsActive).ToListAsync();
                return Request.CreateResponse(HttpStatusCode.OK, CustomerDocTypes);
            }

        }

        [Route("UpdateExectiveStartAddress")]
        [HttpGet]
        public HttpResponseMessage UpdateExectiveStartAddress(int peopleId, double lat, double lng)
        {
            if (peopleId > 0)
            {
                using (var db = new AuthContext())
                {
                    var person = db.Peoples.Where(u => u.PeopleID == peopleId).SingleOrDefault();
                    if (person != null)
                    {
                        person.StartLat = lat;
                        person.StartLng = lng;
                        person.UpdatedDate = DateTime.Now;
                        db.Entry(person).State = EntityState.Modified;
                        db.Commit();
                        var res = new DataContracts.External.MobileExecutiveDC.Peopleresponse()
                        {
                            Status = true,
                            message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        var res = new DataContracts.External.MobileExecutiveDC.Peopleresponse()
                        {
                            Status = false,
                            message = "People not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
            }
            else
            {
                var res = new DataContracts.External.MobileExecutiveDC.Peopleresponse()
                {
                    Status = false,
                    message = "People not exist."
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }
        [Route("customer/V3")]
        [AllowAnonymous]
        public HttpResponseMessage GetBeatDataV3(int id, string day, int skip, int take)
        {
            using (var db = new AuthContext())
            {
                GlobalcustomerDetail obj = new GlobalcustomerDetail();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == id && x.AssignmentDate == today);


                if (todayBeats != null && todayBeats.Any())
                {
                    if (!string.IsNullOrEmpty(day) && day != "undefined")
                    {
                        if (day != DateTime.Now.DayOfWeek.ToString())
                        {
                            var executiveBeats = db.Database.SqlQuery<SalespDTO>(string.Format("exec GetExcutiveBeatCustomerexceptToday {0},{1},{2}", id, skip, take)).ToList();
                            var OtherDayPlannedCustomers = executiveBeats.Select(i => new PlannedRoute
                            {
                                CustomerId = i.CustomerId,
                                CompanyId = i.CompanyId,
                                Active = i.Active,
                                CustomerVerify = i.CustomerVerify,
                                City = i.City,
                                WarehouseId = i.WarehouseId,
                                WarehouseName = i.WarehouseName,
                                lat = i.lat,
                                lg = i.lg,
                                ExecutiveId = i.ExecutiveId,
                                BeatNumber = i.BeatNumber,
                                Day = i.Day,
                                Skcode = i.Skcode,
                                Mobile = i.Mobile,
                                ShopName = i.ShopName,
                                BillingAddress = i.BillingAddress,
                                ShippingAddress = i.ShippingAddress,
                                Name = i.Name,
                                Emailid = i.Emailid,
                                RefNo = i.RefNo,
                                Password = i.Password,
                                UploadRegistration = i.UploadRegistration,
                                ResidenceAddressProof = i.ResidenceAddressProof,
                                DOB = i.DOB,
                                MaxOrderCount = i.MaxOrderCount,
                                IsKPP = i.IsKPP,
                                ClusterId = i.ClusterId,
                                ClusterName = i.ClusterName,
                                CustomerType = i.CustomerType
                            }).ToList();
                            todayBeats.ForEach(x =>
                            {
                                x.PlannedRoutes.AddRange(OtherDayPlannedCustomers);
                            });
                        }

                        todayBeats.ForEach(x =>
                        {
                            x.PlannedRoutes = x.PlannedRoutes.Where(s => !string.IsNullOrEmpty(s.Day) && s.Day == day).ToList();
                        });
                    }
                    else
                    {
                        var executiveBeats = db.Database.SqlQuery<SalespDTO>(string.Format("exec GetExcutiveBeatCustomerexceptToday {0},{1},{2}", id, skip, take)).ToList();
                        var OtherDayPlannedCustomers = executiveBeats.Select(i => new PlannedRoute
                        {
                            CustomerId = i.CustomerId,
                            CompanyId = i.CompanyId,
                            Active = i.Active,
                            CustomerVerify = i.CustomerVerify,
                            City = i.City,
                            WarehouseId = i.WarehouseId,
                            WarehouseName = i.WarehouseName,
                            lat = i.lat,
                            lg = i.lg,
                            ExecutiveId = i.ExecutiveId,
                            BeatNumber = i.BeatNumber,
                            Day = i.Day,
                            Skcode = i.Skcode,
                            Mobile = i.Mobile,
                            ShopName = i.ShopName,
                            BillingAddress = i.BillingAddress,
                            ShippingAddress = i.ShippingAddress,
                            Name = i.Name,
                            Emailid = i.Emailid,
                            RefNo = i.RefNo,
                            Password = i.Password,
                            UploadRegistration = i.UploadRegistration,
                            ResidenceAddressProof = i.ResidenceAddressProof,
                            DOB = i.DOB,
                            MaxOrderCount = i.MaxOrderCount,
                            IsKPP = i.IsKPP,
                            ClusterId = i.ClusterId,
                            ClusterName = i.ClusterName,
                            CustomerType = i.CustomerType
                        }).ToList();
                        todayBeats.ForEach(x =>
                        {
                            x.PlannedRoutes.AddRange(OtherDayPlannedCustomers);
                        });
                    }

                }


                if (todayBeats != null && todayBeats.Any())
                {
                    //var existingActualRoute = todayBeats != null
                    //                    ? todayBeats.Where(s => s.ActualRoutes != null && s.ActualRoutes.Any()).SelectMany(z => z.ActualRoutes)
                    //                    : null;

                    //if (existingActualRoute != null && existingActualRoute.Any())
                    //    todayBeats.ForEach(s => s.PlannedRoutes.RemoveAll(x => existingActualRoute.Select(z => z.CustomerId).Contains(x.CustomerId)));

                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        customers = todayBeats,
                        Status = true,
                        Message = "Customer Found"
                    });
                }
                else
                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        customers = todayBeats,
                        Status = false,
                        Message = "No Customer found"
                    });


            }
        }

        #region Global Search for sales app

        [HttpGet]
        [Route("GlobalSearch")]
        [AllowAnonymous]
        public HttpResponseMessage GlobalsearchV1(int PeopleId, int WarehouseId, string Globalkey)
        {
            using (AuthContext db = new AuthContext())
            {

                GlobalcustomerDetail obj = new GlobalcustomerDetail();

                var customer = new List<SalespDTO>();
                if (!string.IsNullOrEmpty(Globalkey) && Globalkey.Length > 2)
                {

                    var Warehouseid = new SqlParameter
                    {
                        ParameterName = "WarehouseId",
                        Value = WarehouseId,

                    };
                    var ParamPeopleId = new SqlParameter
                    {
                        ParameterName = "PeopleId",
                        Value = PeopleId,

                    };
                    var GlobalKey = new SqlParameter
                    {
                        ParameterName = "Globalkey",
                        Value = Globalkey,

                    };
                    customer = db.Database.SqlQuery<SalespDTO>("CustomerGlobalSearch @WarehouseId,@PeopleId,@Globalkey", Warehouseid, ParamPeopleId, GlobalKey).ToList();
                }
                if (customer.Count() > 0)
                {
                    obj = new GlobalcustomerDetail()
                    {
                        customers = customer,
                        Status = true,
                        Message = "Customer Found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, obj);
                }
                else
                {
                    obj = new GlobalcustomerDetail()
                    {
                        customers = customer,
                        Status = false,
                        Message = "No Customer found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, obj);
                }

            }
        }
        #endregion

        [Route("InactiveCustOrderCount/{customerid}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<int> InactiveCustOrderCount(int customerid)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.InactiveCustOrderCount(customerid);
        }

        [Route("IsDayStarted/{peopleId}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<bool> IsDayStarted(int PeopleId)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.IsDayStarted(PeopleId);
        }

        [Route("StartDay")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<bool> StartDay(DayStartParams param)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.InsertBeatInMongo(param.PeopleId, param.lat, param.lng, param.DayStartAddress);
        }

        [Route("UpdateProfileImage")]
        [HttpPost]
        public async Task<bool> UpdateProfileImage(UpdateSalesManProfileImageDC obj)
        {
            bool result = false;
            if (obj != null && obj.PeopleId > 0 && obj.ProfilePic != null)
            {
                using (var db = new AuthContext())
                {
                    var person = await db.Peoples.Where(u => u.PeopleID == obj.PeopleId).FirstOrDefaultAsync();
                    person.ProfilePic = obj.ProfilePic;
                    person.UpdatedDate = DateTime.Now;
                    db.Entry(person).State = EntityState.Modified;
                    result = db.Commit() > 0;
                }
            }
            return result;
        }

        [Route("SalesManAppNew")]
        [HttpGet]
        public HttpResponseMessage MobileAppV1(DateTime? datefrom, DateTime? dateto, int id)
        {
            using (var db = new AuthContext())
            {
                try
                {
                    var orderQuery = string.Format("select distinct sum(totalamt) over(partition by  o.executiveid ) sale ," +
                                                    "sum(totalamt) over(partition by  o.executiveid, o.storeid) Storesale," +
                        " max(isnull(s.name, 'Other'))  over(partition by  o.storeid) StoreName," +
                        " dense_rank() over(partition by  o.executiveid order by od.orderid) + dense_rank() over(partition by  o.executiveid order by od.orderid desc) - 1 OrderCount, " +
                        " dense_rank() over(partition by  o.executiveid order by od.CustomerId) + dense_rank() over(partition by  o.executiveid order by od.CustomerId desc) - 1 OrderCustomerCount, " +
                        "  dense_rank() over(partition by  o.executiveid, o.storeid  order by od.orderid) + dense_rank() over(partition by  o.executiveid, o.storeid  order by od.orderid desc) - 1 StoreOrderCount" +
                        " from OrderDetails o with(nolock)" +
                       " inner join OrderMasters od  with(nolock) on o.OrderId = od.OrderId and o.ExecutiveId = {0}" +
                       " left join stores s with(nolock) on o.StoreId = s.Id", id);

                    int ActiveCustomercount = 0, TotalCustomercount = 0;

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    var clusterStoreExecutiveDc = retailerAppManager.GetStoreClusterExecutiveDetail();
                    List<ClusterStoreExecutiveDC> clusterStoreExecutiveDcs = Mapper.Map(clusterStoreExecutiveDc).ToANew<List<ClusterStoreExecutiveDC>>();
                    var clusterIds = clusterStoreExecutiveDcs.Where(x => x.ExecutiveId == id).Select(x => x.ClusterId).Distinct().ToList();
                    var predicate = PredicateBuilder.New<Customer>();
                    predicate = predicate.And(x => x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false);

                    //var builder = Builders<BsonDocument>.Filter;
                    //var filter = builder.Eq("orderDetails.ExecutiveId", id) & builder.Eq("active", true) & builder.Eq("Deleted", false);
                    if (datefrom != null && dateto != null)
                    {
                        //filter = filter & builder.Gte("CreatedDate", datefrom.Value) & builder.Lte("CreatedDate", dateto.Value);
                        predicate = predicate.And(x => x.CreatedDate >= datefrom && x.CreatedDate <= dateto);
                        orderQuery += string.Format(" where od.CreatedDate between '{0}' and '{1}'", datefrom.Value, dateto.Value);
                    }
                    //MongoDbHelper<MongoOrderMaster> mongoDbHelper = new MongoDbHelper<MongoOrderMaster>();
                    TotalCustomercount = db.Customers.Count(predicate);
                    predicate = predicate.And(x => x.Active);
                    ActiveCustomercount = db.Customers.Count(predicate);
                    ////IMongoDatabase mogodb = mongoDbHelper.dbClient.GetDatabase(ConfigurationManager.AppSettings["mongoDbName"]);
                    //var collection = mongoDbHelper.mongoDatabase.GetCollection<BsonDocument>("OrderMaster");
                    //var aggTotal = collection.Aggregate().Match(filter)
                    //.Group(new BsonDocument
                    //                {
                    //                    {
                    //                      "_id", "$orderDetails.ExecutiveId"
                    //                    },
                    //                    {
                    //                        "total", new BsonDocument
                    //                                     {
                    //                                         {
                    //                                             "$sum", "$orderDetails.TotalAmt"
                    //                                         }
                    //                                     }
                    //                    },
                    //                    {

                    //                         "count", new BsonDocument
                    //                                     {
                    //                                       {
                    //                                           "$sum", 1
                    //                                       }
                    //                                    }
                    //                    }
                    //                }).Project(new BsonDocument
                    //                {
                    //                    {"_id", 0},
                    //                    {"total", 1},
                    //                    {"count", 2},
                    //                });


                    //var doc = aggTotal.FirstOrDefault();

                    var orderData = db.Database.SqlQuery<orderDataDC>(orderQuery).ToList();

                    var res = new
                    {
                        Customercountdata = TotalCustomercount,
                        ActiveCustomer = ActiveCustomercount,
                        OrderCountdata = orderData != null && orderData.Any() ? orderData.FirstOrDefault().OrderCount : 0,
                        TotalOrderAmount = orderData != null && orderData.Any() ? orderData.FirstOrDefault().sale : 0,
                        OrderCustomerCount = orderData != null && orderData.Any() ? orderData.FirstOrDefault().OrderCustomerCount : 0,
                        StoreDetail = orderData != null && orderData.Any() ? orderData.Select(x => new StoreSalesDc { StoreName = x.StoreName, Storesale = x.Storesale, StoreOrderCount = x.StoreOrderCount }).ToList() : new List<StoreSalesDc>()
                    };

                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
                catch (Exception ex)
                {
                    var storedetail = new { StoreName = "", Storesale = 0, StoreOrderCount = 0 };
                    return Request.CreateResponse(HttpStatusCode.OK,

                        new
                        {
                            Customercountdata = 0,
                            ActiveCustomer = 0,
                            OrderCountdata = 0,
                            TotalOrderAmount = 0,
                            OrderCustomerCount = 0,
                            StoreDetail = new List<StoreSalesDc>()
                        });

                }
            }
        }

        #region Api/Wallet
        [Route("GetWalletList")]
        public HttpResponseMessage Get()
        {
            logger.Info("start WalletList: ");
            using (AuthContext context = new AuthContext())
            {
                try
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 0, userid = 0;
                    int Warehouse_id = 0;

                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "Warehouseid")
                        {
                            Warehouse_id = int.Parse(claim.Value);
                        }
                    }
                    var pointList = (from i in context.WalletDb
                                     where i.Deleted == false
                                     join j in context.Customers on i.CustomerId equals j.CustomerId
                                     join k in context.Warehouses on j.Warehouseid equals k.WarehouseId into ts
                                     from k in ts.DefaultIfEmpty()
                                     select new
                                     {
                                         Id = i.Id,
                                         CustomerId = i.CustomerId,
                                         TotalAmount = i.TotalAmount,
                                         CreatedDate = i.CreatedDate,
                                         TransactionDate = i.TransactionDate,
                                         UpdatedDate = i.UpdatedDate,
                                         Skcode = j.Skcode,
                                         ShopName = j.ShopName,
                                         WarehouseName = k.WarehouseName,
                                         WarehouseId = j.Warehouseid,
                                         City = k.CityName
                                     }).ToList();
                    logger.Info("End  wallet: ");
                    return Request.CreateResponse(HttpStatusCode.OK, pointList);


                }
                catch (Exception ex)
                {
                    logger.Error("Error in WalletList " + ex.Message);
                    logger.Info("End  WalletList: ");
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.Message); ;
                }
            }
        }

        [Route("GetCusomerWallet")]
        [AcceptVerbs("Get")]
        public HttpResponseMessage Get(int CustomerId)
        {
            logger.Info("start single  GetcusomerWallets: ");
            using (AuthContext context = new AuthContext())
            {
                WalletRewards Item = new WalletRewards();
                try
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 0, userid = 0;
                    int Warehouse_id = 0;

                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "Warehouseid")
                        {
                            Warehouse_id = int.Parse(claim.Value);
                        }
                    }
                    logger.Info("in Wallets");

                    //if (Warehouse_id==0) {
                    //    Item.wallet = context.GetWalletbyCustomeridWid(CustomerId, Warehouse_id);
                    //   Item.reward = context.GetRewardbyCustomeridWid(CustomerId, Warehouse_id);
                    //    Item.conversion = context.CashConversionDb.Where(x => x.Warehouseid == Warehouse_id).FirstOrDefault();
                    //  //  Item.rewardConversion = context.RPConversionDb.FirstOrDefault();
                    //    return Request.CreateResponse(HttpStatusCode.OK, Item);

                    //}
                    //else {
                    //  Item.wallet = context.GetWalletbyCustomerid(CustomerId,compid);
                    // Item.reward = context.GetRewardbyCustomerid(CustomerId, compid);
                    // Item.conversion = context.CashConversionDb.FirstOrDefault();
                    //Item.rewardConversion = context.RPConversionDb.FirstOrDefault();


                    Item.wallet = context.GetWalletbyCustomerid(CustomerId);
                    Item.reward = context.GetRewardbyCustomerid(CustomerId);

                    Item.conversion = context.CashConversionDb.FirstOrDefault(x => x.IsConsumer == false);
                    //Item.rewardConversion = context.RPConversionDb.FirstOrDefault();
                    return Request.CreateResponse(HttpStatusCode.OK, Item);
                    //  }

                }
                catch (Exception ex)
                {
                    logger.Error("Error in Get single GetcusomerWallets " + ex.Message);
                    logger.Info("End  single GetcusomerWallets: ");
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Got Error"); ;
                }
            }
        }

        #endregion

        #region api/RewardItem
        [Route("GetRewardItem")]
        public IEnumerable<RewardItems> GetMobile()
        {
            logger.Info("start News: ");
            List<RewardItems> List = new List<RewardItems>();
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 1, userid = 0;
                int Warehouse_id = 0;

                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "Warehouseid")
                    {
                        Warehouse_id = int.Parse(claim.Value);
                    }
                }
                using (var context = new AuthContext())
                {
                    if (Warehouse_id > 0)
                    {
                        List = context.RewardItemsDb.Where(r => r.IsActive == true && r.IsDeleted == false && r.WarehouseId == Warehouse_id).OrderByDescending(o => o.rPoint).ToList();
                        logger.Info("End  News: ");
                        return List;
                    }
                    else
                    {
                        List = context.RewardItemsDb.Where(r => r.IsActive == true && r.IsDeleted == false && r.CompanyId == compid).OrderByDescending(o => o.rPoint).ToList();
                        logger.Info("End  News: ");
                        return List;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in News " + ex.Message);
                logger.Info("End  News: ");
                return null;
            }
        }

        #endregion

        [Route("GetCustMyLead")]
        [AllowAnonymous]
        [HttpGet]
        public List<CustomernewDC> GetCustDetailLabel(float currentlat, float currentlng, int skip, int take, string Skcode)
        {

            using (var myContext = new AuthContext())
            {
                if (Skcode == null)
                {
                    Skcode = "";
                }
                var currentlatParam = new SqlParameter("@currentlat", currentlat);
                var currentlngParam = new SqlParameter("@currentlng", currentlng);
                var skipParam = new SqlParameter("@skip", skip);
                var takeParam = new SqlParameter("@take", take);
                var SkcodeParam = new SqlParameter("@Skcode", Skcode);
                var result = myContext.Database.SqlQuery<CustomernewDC>("GetNearestCustomersFromLatLng @currentlat,@currentlng,@skip,@take,@Skcode", currentlatParam, currentlngParam, skipParam, takeParam, SkcodeParam).ToList();
                return result;

            }

        }

        [Route("CustGrabbed")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<CustomerGrabbedDC> CustGrabbed(int CustomerId, int PeopleId)
        {
            CustomerGrabbedDC customerGrabbedDc = new CustomerGrabbedDC();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (AuthContext context = new AuthContext())
            {
                var customers = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false).FirstOrDefault();
                if (customers != null)
                {
                    var Peoplecity = context.Peoples.Where(x => x.PeopleID == PeopleId && x.Deleted == false).Select(x => x.Cityid).FirstOrDefault();
                    if (customers.GrabbedBy == 0 && (customers.CustomerVerify != "Full Verified" || customers.CustomerVerify != "Partial Verified"))
                    {
                        if (customers.Cityid == Peoplecity && customers.Cityid > 0)
                        {
                            customers.GrabbedBy = PeopleId;
                            customers.UpdatedDate = indianTime;
                            customers.CustomerVerify = "Pending For Activation";
                            context.Entry(customers).State = EntityState.Modified;
                            //context.Commit();
                            if (context.Commit() > 0)
                            {
                                customerGrabbedDc.Message = "Customer Grabbed Successfully";
                                customerGrabbedDc.Status = true;
                            }

                            string query = "Select Distinct citywise.Id,citywise.CommissionAmount from CityWiseActivationConfigurations citywise inner join Customers cust on citywise.CityId=cust.Cityid where cust.GrabbedBy>0 and cust.GrabbedBy=" + PeopleId + " and citywise.IsActive=0 ";
                            var commission = await context.Database.SqlQuery<commissionDC>(query).FirstOrDefaultAsync();
                            if (commission != null)
                            {
                                AgentCommissionforCity agentCommissionforCity = new AgentCommissionforCity();
                                agentCommissionforCity.Amount = commission.CommissionAmount;
                                agentCommissionforCity.ConfigurationId = commission.Id;
                                agentCommissionforCity.PeopleId = PeopleId;
                                agentCommissionforCity.CustomerId = CustomerId;
                                agentCommissionforCity.IsActive = true;
                                agentCommissionforCity.IsDeleted = false;
                                agentCommissionforCity.CreatedDate = DateTime.Now;
                                agentCommissionforCity.CreatedBy = userid;
                                context.AgentCommissionforCityDB.Add(agentCommissionforCity);
                                context.Commit();
                            }
                        }
                        else
                        {
                            customerGrabbedDc.Message = "Customer Out Of City";
                            customerGrabbedDc.Status = false;
                        }

                    }
                    else if (customers.GrabbedBy > 0)
                    {
                        customerGrabbedDc.Message = "Customer Is Already Grabbed";
                        customerGrabbedDc.Status = false;
                    }
                    customerGrabbedDc.cust = customers;
                    return customerGrabbedDc;
                }
                else
                {

                    customerGrabbedDc.cust = customers;
                    return customerGrabbedDc;
                }


            }
        }

        [Route("GetCustGrabbed")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.CustomerDC>> CustGrabbed(int PeopleId)
        {
            Message message = new Message();
            using (AuthContext context = new AuthContext())
            {
                if (PeopleId > 0)
                {
                    string query = "select * from Customers where GrabbedBy=" + PeopleId + "and Deleted= 0 ";
                    List<DataContracts.External.MobileExecutiveDC.CustomerDC> cust = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.CustomerDC>(query).ToListAsync();

                    return cust;
                }
                else
                {
                    return null;
                }

            }
        }

        [AllowAnonymous]
        [Route("GetAgentCommission")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.AgentCommissionDc>> GetAgentCommission(int PeopleId)
        {
            using (AuthContext context = new AuthContext())
            {

                string query = "Select cust.CustomerId,cust.SkCode as Skcode,cust.Name,cust.ShopName,cust.City,city.CommissionAmount,Cust.CustomerVerify,cust.UpdatedDate,city.IsDeleted,city.IsActive from AgentCommissionforCities agent with(nolock) inner join Customers cust  with(nolock)  on agent.CustomerId = cust.CustomerId inner join CityWiseActivationConfigurations city  with(nolock)  on city.CityId = cust.Cityid and city.Id = agent.ConfigurationId where city.IsDeleted = 0 and agent.IsDeleted=0 and cust.Deleted=0 and cust.GrabbedBy = " + PeopleId + "";
                List<DataContracts.External.MobileExecutiveDC.AgentCommissionDc> Commission = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AgentCommissionDc>(query).ToListAsync();
                return Commission;


            }
        }

        [Route("GetAllBrand")]
        [HttpGet]
        public dynamic GetBrandWarehouseId(int PeopleId, int WarehouseId, string lang)
        {
            List<SubsubCategoryDTOM> ass = new List<SubsubCategoryDTOM>();
            try
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                // var CatIdstr = String.Join(",", CatIds);
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                // var SubCatsstr = String.Join(",", SubCats);
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                //var SubSubCatsstr = String.Join(",", SubSubCats);
                using (var authContext = new AuthContext())
                {
                    if (authContext.Database.Connection.State != ConnectionState.Open)
                        authContext.Database.Connection.Open();

                    var CatIdDt = new DataTable();
                    CatIdDt.Columns.Add("IntValue");
                    foreach (var item in CatIds)
                    {
                        var dr = CatIdDt.NewRow();
                        dr["IntValue"] = item;
                        CatIdDt.Rows.Add(dr);
                    }
                    var SubCatIdDt = new DataTable();
                    SubCatIdDt.Columns.Add("IntValue");
                    foreach (var item in SubCats)
                    {
                        var dr = SubCatIdDt.NewRow();
                        dr["IntValue"] = item;
                        SubCatIdDt.Rows.Add(dr);
                    }
                    var BrandIdDt = new DataTable();
                    BrandIdDt.Columns.Add("IntValue");
                    foreach (var item in SubSubCats)
                    {
                        var dr = BrandIdDt.NewRow();
                        dr["IntValue"] = item;
                        BrandIdDt.Rows.Add(dr);
                    }

                    var Catparam = new SqlParameter("categoryIds", CatIdDt);
                    Catparam.SqlDbType = SqlDbType.Structured;
                    Catparam.TypeName = "dbo.IntValues";
                    var SubCatparam = new SqlParameter("subCategoryIds", SubCatIdDt);
                    SubCatparam.SqlDbType = SqlDbType.Structured;
                    SubCatparam.TypeName = "dbo.IntValues";
                    var Brandparam = new SqlParameter("brandIds", BrandIdDt);
                    Brandparam.SqlDbType = SqlDbType.Structured;
                    Brandparam.TypeName = "dbo.IntValues";
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetSalesAllBrand]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@warehouseId", WarehouseId));
                    cmd.Parameters.Add(Catparam);
                    cmd.Parameters.Add(SubCatparam);
                    cmd.Parameters.Add(Brandparam);

                    // Run the sproc
                    var reader1 = cmd.ExecuteReader();
                    ass = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<SubsubCategoryDTOM>(reader1).ToList();

                    ass.ForEach(x =>
                    {
                        if (!string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.HindiName))
                        {
                            x.SubsubcategoryName = x.HindiName;
                        }
                    });
                    //string query = "select b.SubsubCategoryid,b.SubsubcategoryName,b.LogoUrl,b.HindiName,b.Categoryid,b.SubCategoryId,b.SubcategoryName SubcategoryName from ItemMasters a with(nolock) inner join SubsubCategories b with(nolock) on a.SubsubCategoryid=b.SubsubCategoryid " +
                    //              "and a.Deleted = 0  and a.active = 1  and a.WarehouseId = " + WarehouseId + "and b.Deleted =0 and b.IsActive =1 and a.SubsubCategoryid in(" + SubSubCatsstr + ") and a.SubCategoryId in(" + SubCatsstr + ")  and a.Categoryid in(" + CatIdstr + ")  group by b.SubsubCategoryid,b.SubsubcategoryName,b.LogoUrl,b.HindiName,b.Categoryid,b.SubCategoryId,b.SubcategoryName ";
                    //ass = db.Database.SqlQuery<SubsubCategoryDTOM>(query).ToList();
                    return ass;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in GetAllBrand " + ex.Message);
                return null;
            }
        }

        [Route("GetActiveWarehouseCity")]
        [HttpGet]
        [AllowAnonymous]
        public List<DataContracts.External.MobileExecutiveDC.WarehousesCityDTO> GetActiveWarehouseCity()
        {
            using (AuthContext db = new AuthContext())
            {
                string Sql = "select distinct a.Cityid,a.CityName from Warehouses a with(nolock) inner join GMWarehouseProgresses b  with(nolock) on a.WarehouseId=b.WarehouseID where active=1 and Deleted=0 and IsKPP=0 and b.IsLaunched=1";
                List<DataContracts.External.MobileExecutiveDC.WarehousesCityDTO> cityData = db.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.WarehousesCityDTO>(Sql).ToList();
                return cityData;
            }
        }

        [HttpGet]
        [Route("GetClusterCityWise")]
        [AllowAnonymous]
        public dynamic GetClusterCityWise(int cityid)
        {
            using (AuthContext db = new AuthContext())
            {
                List<Cluster> c = new List<Cluster>();
                c.Add(new Cluster
                {
                    ClusterId = 0,
                    ClusterName = "Out of Cluster",
                    LtLng = new List<LtLng>()
                });

                c.AddRange(db.Clusters.Include("LtLng").Where(a => a.CityId == cityid).ToList());


                return c.Select(x =>
                  new
                  {
                      x.ClusterId,
                      x.ClusterName,
                      clusterlatlng = x.LtLng.Select(y => new { lat = y.latitude, lng = y.longitude }).ToList()
                  }).ToList();
            }
        }

        [HttpPost]
        [Route("GetClusterCustomers")]
        [AllowAnonymous]
        public async Task<List<CustomerCluster>> GetClusterCustomers(string cityName, List<int> clusterids)
        {
            using (AuthContext db = new AuthContext())
            {
                List<CustomerCluster> CustomerClusters = new List<CustomerCluster>();
                if (clusterids.Any())
                {
                    var cityIdParam = new SqlParameter("cityname", cityName);

                    var clusteridslist = new DataTable();
                    clusteridslist.Columns.Add("IntValue");
                    foreach (var item in clusterids)
                    {
                        var dr = clusteridslist.NewRow();
                        dr["IntValue"] = item;
                        clusteridslist.Rows.Add(dr);
                    }
                    var CIds = new SqlParameter("Clusterids", clusteridslist);
                    CIds.SqlDbType = SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";
                    CustomerClusters = await db.Database.SqlQuery<CustomerCluster>("exec GetByClusteridsCustomers @cityname, @Clusterids", cityIdParam, CIds).ToListAsync();

                    //string Sql = "Select a.customerId,a.Name,a.mobile,a.Skcode,a.ShopName,a.ShippingAddress,a.LandMark,a.lat,a.lg from customers a with(nolock) where a.ClusterId in (" + string.Join(",", clusterids) + ") and a.Active = 1 and not exists(select 1 from CustomerLatLngVerifies b with(nolock) where a.CustomerId = b.CustomerId)";
                    //CustomerClusters = db.Database.SqlQuery<CustomerCluster>(Sql).ToList();
                }
                return CustomerClusters;
            }
        }

        [Route("UploadCustomerShopImage")]
        [HttpPost]
        [AllowAnonymous]
        public string UploadCustomerShopImage()
        {
            string LogoUrl = "";

            if (HttpContext.Current.Request.Files.AllKeys.Any())
            {
                var httpPostedFile = HttpContext.Current.Request.Files["file"];
                if (httpPostedFile != null)
                {
                    if (!Directory.Exists(HttpContext.Current.Server.MapPath("~/CustomerShopImage")))
                        Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/CustomerShopImage"));

                    string extension = Path.GetExtension(httpPostedFile.FileName);

                    string fileName = httpPostedFile.FileName.Substring(0, httpPostedFile.FileName.LastIndexOf('.')) + DateTime.Now.ToString("ddMMyyyyHHmmss") + extension;

                    LogoUrl = Path.Combine(HttpContext.Current.Server.MapPath("~/CustomerShopImage"), fileName);

                    httpPostedFile.SaveAs(LogoUrl);
                    AngularJSAuthentication.Common.Helpers.FileUploadHelper.Upload(fileName, "~/CustomerShopImage", LogoUrl);

                    LogoUrl = "/CustomerShopImage/" + fileName;
                }
            }
            return LogoUrl;
        }

        [HttpPost]
        [Route("UpdateCustomer")]
        [AllowAnonymous]
        public bool UpdateCustomer(CustomerLatLngVerify Customer)
        {
            bool result = false;

            if (!Customer.CreatedBy.HasValue)
                return false;
            using (AuthContext db = new AuthContext())
            {
                var cust = db.Customers.FirstOrDefault(x => x.CustomerId == Customer.CustomerId);
                if (cust != null)
                {
                    var customerLatLngVerify = db.CustomerLatLngVerify.FirstOrDefault(x => x.CustomerId == Customer.CustomerId && x.AppType == (int)AppEnum.SalesApp);
                    Customer.IsActive = true;
                    Customer.IsDeleted = false;
                    if (Customer.IsNotCheckedInYet)
                    {
                        var customerStatus = db.Customers.Where(x => x.Active == true && x.Deleted == false).FirstOrDefault();
                        if (customerStatus != null)
                        {
                            CustomerStatusHistory obj = new CustomerStatusHistory();
                            obj.CustomerVerify = customerStatus.CustomerVerify;
                            obj.CustomerId = customerStatus.CustomerId;
                            obj.SkCode = customerStatus.Skcode;
                            obj.CreatedDate = DateTime.Now;
                            obj.CreatedBy = Convert.ToInt32(Customer.CreatedBy);
                            obj.AppType = (int)AppEnum.SalesApp;
                            db.CustomerStatusHistoryDb.Add(obj);
                        }
                        cust.CustomerVerify = "Not Verified";
                        cust.LastModifiedBy = Convert.ToString(Customer.CreatedBy);
                        cust.LastModifiedBy = Convert.ToString(DateTime.Now);
                        db.Entry(cust).State = EntityState.Modified;
                    }
                    if (customerLatLngVerify == null)
                    {
                        Customer.Status = 1;  // 1 Request
                        Customer.CreatedDate = DateTime.Now;
                        Customer.AppType = (int)AppEnum.SalesApp;
                        db.CustomerLatLngVerify.Add(Customer);
                    }
                    else
                    {
                        customerLatLngVerify.CaptureImagePath = Customer.CaptureImagePath;
                        customerLatLngVerify.NewShippingAddress = Customer.NewShippingAddress;
                        customerLatLngVerify.Newlat = Customer.Newlat;
                        customerLatLngVerify.Newlg = Customer.Newlg;
                        customerLatLngVerify.ShopFound = Customer.ShopFound;
                        customerLatLngVerify.Status = 1;    // 1 Request
                        customerLatLngVerify.Aerialdistance = Customer.Aerialdistance;
                        customerLatLngVerify.ModifiedDate = DateTime.Now;
                        customerLatLngVerify.IsActive = true;
                        customerLatLngVerify.IsDeleted = false;
                        customerLatLngVerify.ModifiedBy = Customer.CreatedBy;
                        //mbd
                        customerLatLngVerify.AreaName = Customer.AreaName;
                        //if (!customerLatLngVerify.CreatedBy.HasValue)
                        customerLatLngVerify.CreatedBy = Customer.CreatedBy;
                        db.Entry(customerLatLngVerify).State = EntityState.Modified;
                    }
                    result = db.Commit() > 0;
                }

                return result;
            }
        }

        [Route("GetProductPerformance")]
        [HttpPost]
        [AllowAnonymous]
        public List<PerformanceDc> GetProductPerformance(ProductPerformanceFilterDC p)
        {
            int Skiplist = (p.Skip - 1) * p.Take;
            using (var context = new AuthContext())
            {
                //ProductPerformanceDC beat = new ProductPerformanceDC();
                List<PerformanceDc> list = new List<PerformanceDc>();

                var param1 = new SqlParameter("@clusterId", p.clusterId);
                var param2 = new SqlParameter("@PeopleId", p.peopleid);
                var param3 = new SqlParameter("@FromDate", p.FromDate);
                var param4 = new SqlParameter("@ToDate", p.Todate);
                var param5 = new SqlParameter("@Flag", p.Flag);
                var param6 = new SqlParameter("@ObjectId", p.ObjectId);
                var param7 = new SqlParameter("@Skip", Skiplist);
                var param8 = new SqlParameter("@Take", p.Take);
                var param9 = new SqlParameter("@WarehouseId", p.WarehouseId);
                var ProductPerformanceData = context.Database.SqlQuery<PerformanceDc>("exec SpProductPerformance @clusterId,@PeopleId,@FromDate,@ToDate,@Flag,@ObjectId,@Skip,@Take,@WarehouseId", param1, param2, param3, param4, param5, param6, param7, param8, param9).ToList();

                return ProductPerformanceData;
            }
        }

        [HttpGet]
        [Route("PerformanceDashboard")]
        [AllowAnonymous]
        public DataTable PerformanceDashboard(int peopleId, int warehouseId, bool flag = false)
        {
            PerformanceDashboardDc data = new PerformanceDashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == peopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
            var MonthBeatCustomerIds = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ?
                             MonthBeat.SelectMany(x => x.PlannedRoutes).Select(x => x.CustomerId).ToList() : new List<int>();

            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                DataTable IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");

                foreach (var id in MonthBeatCustomerIds)
                {
                    int cid = id;
                    var dr = IdDt.NewRow();
                    dr["IntValue"] = cid;
                    IdDt.Rows.Add(dr);
                }
                var param5 = new SqlParameter("CustIdDs", IdDt);
                var param8 = new SqlParameter("Warehouseid", warehouseId);
                var param1 = new SqlParameter("peopleId", peopleId);

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[SpPerformanceDashboard]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param5);

                var reader = cmd.ExecuteReader();
                data = ((IObjectContextAdapter)context).ObjectContext.Translate<PerformanceDashboardDc>(reader).FirstOrDefault();

                // data = context.Database.SqlQuery<PerformanceDashboardDc>("exec SpPerformanceDashboard @peopleId,@Warehouseid,@CustIdDs", param1, param8, param5).FirstOrDefault();

                var param2 = new SqlParameter("@peopleId", peopleId);
                // dt = context.Database.SqlQuery<DataTable>("exec SpPerformanceTarget @peopleId", param2);

                SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString);
                DataTable dt = new DataTable();

                SqlCommand cmd2 = new SqlCommand("SpPerformanceTarget", con);
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Parameters.AddWithValue("@peopleId", peopleId);

                SqlDataAdapter da = new SqlDataAdapter(cmd2);
                dt = new DataTable();
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add("Achivement");
                    if (flag == false)
                        foreach (DataRow row in dt.Rows)
                        {
                            if (row.ItemArray[0].ToString() == "New Customer")
                            {
                                row["Achivement"] = data.NewCustomer;
                            }
                            else if (row.ItemArray[0].ToString() == "Total Verified Retailers")
                            {
                                row["Achivement"] = data.VerifiedRetailer;
                            }
                            else if (row.ItemArray[0].ToString() == "Active Retailers")
                            {
                                row["Achivement"] = data.ActiveRetailers;
                            }
                            else if (row.ItemArray[0].ToString() == "Sales")
                            {
                                row["Achivement"] = data.SalesValue;
                            }
                            else if (row.ItemArray[0].ToString() == "Dispatch")
                            {
                                row["Achivement"] = data.MTDDispatchValue;
                            }
                            else if (row.ItemArray[0].ToString() == "Cancellation")
                            {
                                row["Achivement"] = data.Cancellation;
                            }
                            else if (row.ItemArray[0].ToString() == "QoQ Retention")
                            {
                                row["Achivement"] = data.QoQ;
                            }
                            else if (row.ItemArray[0].ToString() == "Customer Percentage")
                            {
                                row["Achivement"] = data.CustomerPercentage;
                            }
                            else if (row.ItemArray[0].ToString() == "Product Percentage")
                            {
                                row["Achivement"] = data.ProductPercentage;
                            }
                        }
                    else
                    {
                        var SalesPerson = context.Peoples.FirstOrDefault(x => x.PeopleID == peopleId && x.Active == true && x.Deleted == false);
                        if (SalesPerson != null)
                        {
                            MongoDbHelper<PerformanceDashboardMongo> PerformanceMongoDbHelper = new MongoDbHelper<PerformanceDashboardMongo>();
                            PerformanceDashboardMongo obj = new PerformanceDashboardMongo();
                            foreach (DataRow rw in dt.Rows)
                            {

                                if (rw.ItemArray[0].ToString() == "New Customer")
                                {
                                    obj.NewCustomer = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveNewCustomer = data.NewCustomer;
                                }

                                else if (rw.ItemArray[0].ToString() == "Total Verified Retailers")
                                {
                                    obj.VerifiedRetailer = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveVerifiedRetailer = data.VerifiedRetailer;
                                }
                                else if (rw.ItemArray[0].ToString() == "Active Retailers")
                                {
                                    obj.ActiveRetailers = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveActiveRetailers = data.ActiveRetailers;
                                }
                                else if (rw.ItemArray[0].ToString() == "Sales")
                                {
                                    obj.SalesValue = Convert.ToInt64(rw.ItemArray[1]);
                                    obj.AchieveSalesValue = data.SalesValue;
                                }
                                else if (rw.ItemArray[0].ToString() == "Dispatch")
                                {
                                    obj.MTDDispatchValue = Convert.ToInt64(rw.ItemArray[1]);
                                    obj.AchieveMTDDispatchValue = data.MTDDispatchValue;
                                }
                                else if (rw.ItemArray[0].ToString() == "Cancellation")
                                {
                                    obj.Cancellation = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveCancellation = data.Cancellation;
                                }
                                else if (rw.ItemArray[0].ToString() == "QoQ Retention")
                                {
                                    obj.QoQ = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveQoQ = data.QoQ;
                                }
                                else if (rw.ItemArray[0].ToString() == "Customer Percentage")
                                {
                                    obj.CustomerPercentage = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveCustomerPercentage = data.CustomerPercentage;
                                }
                                else if (rw.ItemArray[0].ToString() == "Product Percentage")
                                {
                                    obj.ProductPercentage = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveProductPercentage = data.ProductPercentage;
                                }
                            }

                            long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == peopleId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                            var ClusterIds = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                            var ClusterNames = context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();
                            var StoreName = context.StoreDB.FirstOrDefault(x => x.Id == storeId).Name;
                            var WarehouseName = context.Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseId && x.active == true && x.Deleted == false).WarehouseName;

                            obj.WarehouseId = warehouseId;
                            obj.SalesPersonId = peopleId;
                            obj.StoreId = Convert.ToInt32(storeId);
                            obj.ClusterIds = string.Join(",", ClusterIds);
                            obj.ClusterName = string.Join(",", ClusterNames);
                            obj.StoreId = Convert.ToInt32(storeId);
                            obj.StoreName = StoreName;
                            obj.WarehouseName = WarehouseName;
                            obj.SalesPerson = SalesPerson.DisplayName;
                            obj.CreatedDate = DateTime.Now.Date;
                            obj.ModifiedDate = DateTime.Now.Date;
                            obj.IsActive = true;
                            obj.IsDelete = false;
                            var res = PerformanceMongoDbHelper.Insert(obj);
                        }
                    }
                }

                return dt;
            }
        }

        [HttpGet]
        [Route("ClusterCityWise")]
        [AllowAnonymous]
        public List<ClusterDc> GetClusterCityWises(int cityid)
        {
            using (AuthContext db = new AuthContext())
            {
                List<ClusterDc> cluster = new List<ClusterDc>();
                cluster = db.Clusters.Where(a => a.CityId == cityid && a.Deleted == false && a.Active == true).Select(x => new ClusterDc
                {
                    ClusterId = x.ClusterId,
                    ClusterName = x.ClusterName
                }).ToList();
                return cluster;
            }
        }

        [Route("HomePageGetCategories")]
        [AllowAnonymous]
        [HttpGet]
        public OnBaseSalesAppDc GetCategories(int PeopleId, int BaseCategoryId, int warehouseid, string lang)
        {
            OnBaseSalesAppDc ibjtosend = new OnBaseSalesAppDc();
            ibjtosend.Categorys = new List<Category>();
            ibjtosend.SubCategorys = new List<SubCategory>();
            ibjtosend.SubsubCategorys = new List<SubsubCategory>();
            CategorySalesAppDc CategorySalesApp = Categories(PeopleId, BaseCategoryId, warehouseid, lang);

            ibjtosend.Categorys = CategorySalesApp.Categories.Select(x => new Category
            {
                BaseCategoryId = x.BaseCategoryId,
                HindiName = x.HindiName,
                Categoryid = x.Categoryid,
                CategoryName = x.CategoryName,
                CategoryHindiName = x.HindiName,
                LogoUrl = x.LogoUrl,
                CategoryImg = x.CategoryImg
            }).ToList();
            ibjtosend.SubCategorys = CategorySalesApp.SubCategories.Select(x => new SubCategory
            {
                Categoryid = x.Categoryid,
                HindiName = x.HindiName,
                SubCategoryId = x.SubCategoryId,
                SubcategoryName = x.SubcategoryName,
                LogoUrl = x.LogoUrl,
                itemcount = x.itemcount
            }).ToList();
            ibjtosend.SubsubCategorys = CategorySalesApp.SubSubCategories.Select(x => new SubsubCategory
            {
                SubCategoryId = x.SubCategoryId,
                Categoryid = x.Categoryid,
                HindiName = x.HindiName,
                SubsubCategoryid = x.SubSubCategoryId,
                SubsubcategoryName = x.SubSubcategoryName,
                LogoUrl = x.LogoUrl,
                itemcount = x.itemcount
            }).ToList();

            if (ibjtosend.SubsubCategorys != null && ibjtosend.SubsubCategorys.Any())
            {
                using (var db = new AuthContext())
                {
                    //var ActiveCustomer = db.Customers.Where(x => x.CustomerId == customerId).Select(x => new { x.IsKPP }).FirstOrDefault();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd

                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        //ibjtosend.SubsubCategorys = ibjtosend.SubsubCategorys.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                        //ibjtosend.SubCategorys = ibjtosend.SubCategorys.Where(x => ibjtosend.SubsubCategorys.Select(y => y.SubCategoryId).Contains(x.SubCategoryId)).ToList();
                        //ibjtosend.Categorys = ibjtosend.Categorys.Where(x => ibjtosend.SubCategorys.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();

                        ibjtosend.SubsubCategorys = ibjtosend.SubsubCategorys.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.SubsubCategoryid))).ToList();
                        ibjtosend.SubCategorys = ibjtosend.SubCategorys.Where(x => ibjtosend.SubsubCategorys.Select(y => y.Categoryid + " " + y.SubCategoryId).Contains(x.Categoryid + " " + x.SubCategoryId)).ToList();
                        ibjtosend.Categorys = ibjtosend.Categorys.Where(x => ibjtosend.SubCategorys.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();
                    }
                    #endregion
                }
            }
            return ibjtosend;
        }

        [Route("getItembysscatid")]
        [HttpGet]
        public HttpResponseMessage salesgetbysscatidv3(string lang, int PeopleId, int warehouseid, int catid, int scatid, int sscatid)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();
                //Increase some parameter For offer
                var newdata = (from a in context.itemMasters
                               where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true
                               && ((sscatid > 0 && a.SubsubCategoryid == sscatid) || (sscatid == 0 && a.SubsubCategoryid == a.SubsubCategoryid))
                               && ((scatid > 0 && a.SubCategoryId == scatid) || (scatid == 0 && a.SubCategoryId == a.SubCategoryId))
                               && a.Categoryid == catid && (a.ItemAppType == 0 || a.ItemAppType == 1)
                               && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                               let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                               select new factoryItemdata
                               {
                                   WarehouseId = a.WarehouseId,
                                   IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                   ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                   CompanyId = a.CompanyId,
                                   Categoryid = a.Categoryid,
                                   Discount = a.Discount,
                                   ItemId = a.ItemId,
                                   ItemNumber = a.Number,
                                   itemname = a.itemname,
                                   IsSensitive = a.IsSensitive,
                                   IsSensitiveMRP = a.IsSensitiveMRP,
                                   UnitofQuantity = a.UnitofQuantity,
                                   UOM = a.UOM,
                                   LogoUrl = a.LogoUrl,
                                   MinOrderQty = a.MinOrderQty,
                                   price = a.price,
                                   SubCategoryId = a.SubCategoryId,
                                   SubsubCategoryid = a.SubsubCategoryid,
                                   TotalTaxPercentage = a.TotalTaxPercentage,
                                   SellingUnitName = a.SellingUnitName,
                                   SellingSku = a.SellingSku,
                                   UnitPrice = a.UnitPrice,
                                   HindiName = a.HindiName,
                                   VATTax = a.VATTax,
                                   active = a.active,
                                   NetPurchasePrice = a.NetPurchasePrice,
                                   marginPoint = a.marginPoint,
                                   promoPerItems = a.promoPerItems,
                                   IsOffer = a.IsOffer,
                                   Deleted = a.Deleted,
                                   OfferCategory = a.OfferCategory,
                                   OfferStartTime = a.OfferStartTime,
                                   OfferEndTime = a.OfferEndTime,
                                   OfferQtyAvaiable = a.OfferQtyAvaiable,
                                   OfferQtyConsumed = a.OfferQtyConsumed,
                                   OfferId = a.OfferId,
                                   OfferType = a.OfferType,
                                   OfferWalletPoint = a.OfferWalletPoint,
                                   OfferFreeItemId = a.OfferFreeItemId,
                                   OfferPercentage = a.OfferPercentage,
                                   OfferFreeItemName = a.OfferFreeItemName,
                                   OfferFreeItemImage = a.OfferFreeItemImage,
                                   OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                   OfferMinimumQty = a.OfferMinimumQty,
                                   FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                   FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                   BillLimitQty = a.BillLimitQty,
                                   ItemMultiMRPId = a.ItemMultiMRPId
                               }).OrderByDescending(x => x.ItemNumber).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                foreach (var it in newdata)
                {
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }
                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }

                    if (it.OfferType != "FlashDeal")
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }


                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch (Exception ds) { }
                    //// by sudhir 22-08-2019
                    if (lang.Trim() == "hi")
                    {
                        if (it.IsSensitive == true)
                        {
                            if (it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                            }
                            else
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                            }
                        }
                        else
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                        }
                    }
                    //end
                    item.ItemMasters.Add(it);
                }

                if (item.ItemMasters != null)
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                else
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }

            }
        }

        [Route("SearchV2")]
        [HttpGet]
        public HttpResponseMessage SearchV2(string lang, string itemname, int PeopleId, int warehouseId, int customerId, string IncentiveClassifications)
        {
            using (var db = new AuthContext())
            {
                var ActiveCustomer = db.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();


                if (db.Database.Connection.State != ConnectionState.Open)
                    db.Database.Connection.Open();

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var ic in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = ic;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("Classification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                DataTable brandidDt = new DataTable();
                brandidDt.Columns.Add("IntValue");
                foreach (var ss in SubSubCats)
                {
                    DataRow dr = brandidDt.NewRow();
                    dr[0] = ss;
                    brandidDt.Rows.Add(dr);
                }
                var SubSubCategoryIds = new SqlParameter("SubSubCategoryIds", brandidDt);
                SubSubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubSubCategoryIds.TypeName = "dbo.IntValues";


                //var Subcatids = string.Join(",", SubCats).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable SubCatidDt = new DataTable();
                SubCatidDt.Columns.Add("IntValue");
                foreach (var ss in SubCats)
                {
                    DataRow dr = SubCatidDt.NewRow();
                    dr[0] = ss;
                    SubCatidDt.Rows.Add(dr);
                }
                var SubCategoryIds = new SqlParameter("SubCategoryIds", SubCatidDt);
                SubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubCategoryIds.TypeName = "dbo.IntValues";

                //var Categoryid = string.Join(",", CatIds).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable CatIdDt = new DataTable();
                CatIdDt.Columns.Add("IntValue");
                foreach (var id in CatIds)
                {
                    DataRow dr = CatIdDt.NewRow();
                    dr[0] = id;
                    CatIdDt.Rows.Add(dr);
                }
                var CategoryIds = new SqlParameter("CategoryIds", CatIdDt);
                CategoryIds.SqlDbType = SqlDbType.Structured;
                CategoryIds.TypeName = "dbo.IntValues";

                var cmd = db.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetSearchItemsV2]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@ItemName", itemname));
                cmd.Parameters.Add(SubSubCategoryIds);
                cmd.Parameters.Add(SubCategoryIds);
                cmd.Parameters.Add(CategoryIds);
                cmd.Parameters.Add(param1);

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var newdata = ((IObjectContextAdapter)db)
                .ObjectContext
                .Translate<factoryItemdata>(reader).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (newdata != null && newdata.Any())
                {
                    var itemmultiMrpIds = newdata.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<DataContracts.External.orderMrpData> orderdetails = new List<DataContracts.External.orderMrpData>();
                    ParallelLoopResult parellelResult = Parallel.ForEach(itemmultiMrpIds, (mrpid) =>
                    {
                        //    foreach (var mrpid in itemmultiMrpIds)
                        //{
                        string query = $"SELECT top 1 itemmultimrpid,createddate createddate, ordqty Qty from skorderdata_{AppConstants.Environment} where itemmultimrpid in ({ mrpid })   and whid={warehouseId} and custid={customerId}  order by createddate desc";

                        ElasticSqlHelper<DataContracts.External.orderMrpData> elasticSqlHelper = new ElasticSqlHelper<DataContracts.External.orderMrpData>();
                        var order = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).FirstOrDefault());
                        if (order != null)
                            orderdetails.Add(order);
                    });

                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = AsyncContext.Run(() => itemMasterManager.GetItemIncentiveClassification(warehouseId, newdata.Select(s => s.ItemMultiMRPId).Distinct().ToList()));

                    var itemMultiMRPIds = newdata.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    using (var context = new AuthContext())
                    {
                        ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                    }
                    BackendOrderController backendOrderController = new BackendOrderController();
                    foreach (var itemdata in newdata)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(db, itemdata.ItemMultiMRPId, itemdata.price, itemdata.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        itemdata.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, itemdata.UnitPrice, itemdata.WholeSalePrice ?? 0, itemdata.TradePrice ?? 0, cprice);
                        if (orderdetails != null && orderdetails.Any(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId))
                        {
                            itemdata.LastOrderDate = orderdetails.Where(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().CreatedDate;
                            itemdata.LastOrderQty = orderdetails.Where(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().Qty;
                            itemdata.LastOrderDays = (DateTime.Today - itemdata.LastOrderDate).Value.Days;
                        }

                        if (itemdata.price > itemdata.UnitPrice)
                        {
                            itemdata.marginPoint = itemdata.UnitPrice > 0 ? (((itemdata.price - itemdata.UnitPrice) * 100) / itemdata.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = itemdata.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    itemdata.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }

                        }
                        else
                        {
                            itemdata.marginPoint = 0;
                        }
                    }
                }


                foreach (var it in newdata)
                {
                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;

                    if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                    {
                        it.IsOffer = false;
                    }
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;

                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }
                    }
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }



                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {/// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //Customer (0.02 * 10=0.2)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                        //// by sudhir 22-08-2019
                        if (lang.Trim() == "hi")
                        {
                            if (it.HindiName != null)
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }
                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }
                        //end
                    }
                    catch { }

                    if (it.OfferType != "FlashDeal")
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    item.ItemMasters.Add(it);
                }
                if (itemname != null || itemname != "")
                {
                    BackgroundTaskManager.Run(() =>
                    {
                        MongoDbHelper<ExecutiveProductSearch> mongoDbHelper = new MongoDbHelper<ExecutiveProductSearch>();
                        ExecutiveProductSearch executiveProductSearch = new ExecutiveProductSearch
                        {
                            CreatedDate = indianTime,
                            PeopleId = PeopleId,
                            keyword = itemname,
                            IsDeleted = false
                        };
                        mongoDbHelper.Insert(executiveProductSearch);
                    });
                }
                if (item.ItemMasters != null)
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                else
                {
                    item.Message = false;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }

            }
        }

        [Route("GetItemByBarcode")]
        [HttpGet]
        public HttpResponseMessage GetItemByBarcode(int PeopleId, int WarehouseId, string barcode, string Lang)
        {
            using (var db = new AuthContext())
            {
                DataContracts.External.MobileExecutiveDC.WRSITEM item = new DataContracts.External.MobileExecutiveDC.WRSITEM();
                var barcodeitem = db.ItemBarcodes.FirstOrDefault(i => i.Barcode == barcode && i.IsDeleted == false && i.IsActive);
                if (barcodeitem != null)
                {
                    List<ItemMaster> itemList = new List<ItemMaster>();
                    List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                    List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                    List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                    List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                    var newdata = (from a in db.itemMasters
                                   where a.WarehouseId == WarehouseId && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid)
                                   && a.Deleted == false && a.active == true && a.Number.Trim().ToLower().Equals(barcodeitem.ItemNumber.Trim().ToLower())
                                   let limit = db.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new DataContracts.External.MobileExecutiveDC.factoryItemdata
                                   {
                                       BaseCategoryId = a.BaseCategoryid,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       WarehouseId = a.WarehouseId,
                                       CompanyId = a.CompanyId,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       HindiName = a.HindiName,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UnitofQuantity = a.UnitofQuantity,
                                       UOM = a.UOM,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       VATTax = a.VATTax,
                                       itemBaseName = a.itemBaseName,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       promoPerItems = a.promoPerItems,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       FreeItemId = a.OfferFreeItemId,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       BillLimitQty = a.BillLimitQty
                                   }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && x.OfferAppType == "Retailer App" || x.OfferAppType == "Both" || x.OfferAppType == "Sales App").Select(x => x.OfferId).ToList() : new List<int>();
                    foreach (var it in newdata)
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }

                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<DataContracts.External.MobileExecutiveDC.factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;

                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else { it.dreamPoint = 0; }

                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch { }
                        if (Lang.Trim() == "hi")
                        {
                            if (it.HindiName != null)
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }

                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }
                        item.ItemMasters.Add(it);
                    }
                    if (item.ItemMasters != null)
                    {
                        item.Message = true;
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                    else
                    {
                        item.Message = false;
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                }
                else
                {
                    item.Message = false;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
            }
        }

        [Route("GetMinOrderAmount")]
        [HttpGet]
        public async Task<dynamic> GetRetailerMinOrderAmountSalesAPP(int warehouseId, int PeopleId, int customerId)
        {
            int minOrderValue = Convert.ToInt32(ConfigurationManager.AppSettings["MinOrderValue"]);
            int NoOfLineItemSales = 0;
            List<StoreMinOrder> AllStoreMinOrder = new List<StoreMinOrder>();


            List<long> StoreIds = new List<long>();
            using (var context = new AuthContext())
            {
                NoOfLineItemSales = context.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(x =>
                    x.NoOfLineItemSales
                ).FirstOrDefault();

                var warehouse = await context.Warehouses.FirstOrDefaultAsync(x => x.WarehouseId == warehouseId);

                MongoDbHelper<CustomerShoppingCart> mongoDbHelperCart = new MongoDbHelper<CustomerShoppingCart>();
                var cartPredicate = PredicateBuilder.New<CustomerShoppingCart>(x => x.CustomerId == customerId && x.WarehouseId == warehouseId && x.PeopleId == PeopleId && !x.GeneratedOrderId.HasValue && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));
                if (PeopleId > 0)
                {
                    cartPredicate = cartPredicate.And(x => x.PeopleId == PeopleId);
                }
                else
                {
                    cartPredicate = cartPredicate.And(x => x.PeopleId == 0);
                }
                var customerShoppingCart = mongoDbHelperCart.Select(cartPredicate, x => x.OrderByDescending(y => y.ModifiedDate), null, null, collectionName: "CustomerShoppingCart").FirstOrDefault();



                var itemids = customerShoppingCart != null ? customerShoppingCart.ShoppingCartItems.Where(x => x.IsActive && x.qty > 0).Select(x => x.ItemId).Distinct().ToList() : new List<int>();
                if (itemids != null && itemids.Any())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    var ItemIdDt = new DataTable();
                    ItemIdDt.Columns.Add("IntValue");
                    foreach (var item in itemids)
                    {
                        var dr = ItemIdDt.NewRow();
                        dr["IntValue"] = item;
                        ItemIdDt.Rows.Add(dr);
                    }
                    var param = new SqlParameter("Item", ItemIdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.IntValues";
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetItemStoreId]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param);
                    cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                    // Run the sproc
                    var reader1 = cmd.ExecuteReader();
                    StoreIds = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<long>(reader1).ToList();
                }

                if (warehouse != null && warehouse.Cityid > 0)
                {
                    MongoDbHelper<DataContracts.Mongo.RetailerMinOrder> mongoDbHelper = new MongoDbHelper<DataContracts.Mongo.RetailerMinOrder>();
                    var PredicateCart = PredicateBuilder.New<DataContracts.Mongo.RetailerMinOrder>(x => x.CityId == warehouse.Cityid && x.WarehouseId == warehouse.WarehouseId);
                    var retailerMinOrder = mongoDbHelper.Select(PredicateCart, null, null, null, collectionName: "RetailerMinOrder").FirstOrDefault();
                    if (retailerMinOrder != null)
                    {
                        minOrderValue = retailerMinOrder.MinOrderValue;
                    }
                }

                if (StoreIds != null && StoreIds.Any())
                {
                    MongoDbHelper<StoreMinOrder> mHelperStore = new MongoDbHelper<StoreMinOrder>();
                    var storeMinOrder = mHelperStore.Select(x => x.StoreId > 0 && (x.CityId == 0 || x.CityId == warehouse.Cityid) && x.WarehouseId == warehouseId && StoreIds.Contains(x.StoreId)).ToList();

                    if (storeMinOrder != null)
                    {
                        AllStoreMinOrder = storeMinOrder.GroupBy(x => new { x.CityId, x.StoreId }).Select(x => new StoreMinOrder { CityId = x.Key.CityId, StoreId = x.Key.StoreId, WarehouseId = x.FirstOrDefault().WarehouseId, MinOrderValue = x.FirstOrDefault().MinOrderValue, MinLineItem = x.FirstOrDefault().MinLineItem }).ToList();
                        var MinOrder = storeMinOrder.OrderBy(x => x.MinOrderValue).Select(x => new { MinOrderValue = x.MinOrderValue, MinLineItem = x.MinLineItem }).FirstOrDefault();
                        minOrderValue = 0;
                        NoOfLineItemSales = 0;
                        if (MinOrder != null)  // new change
                        {
                            minOrderValue = MinOrder.MinOrderValue;
                            NoOfLineItemSales = MinOrder.MinLineItem;
                        }
                    }
                }

                return new { minOrderValue = minOrderValue, MinLineItem = NoOfLineItemSales, StoreMinOrder = AllStoreMinOrder };
            }



        }

        [Route("GetCompanyWheelConfig")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.CompnayWheelConfigDc> GetCompanyWheelConfig(int WarehouseId)
        {
            DataContracts.External.MobileExecutiveDC.CompnayWheelConfigDc compnayWheelConfigDc = new DataContracts.External.MobileExecutiveDC.CompnayWheelConfigDc();
            using (var context = new AuthContext())
            {
                var wheelConfig = await context.CompanyWheelConfiguration.FirstOrDefaultAsync();
                if (wheelConfig != null)
                {
                    compnayWheelConfigDc.OrderAmount = wheelConfig.OrderAmount;
                    compnayWheelConfigDc.LineItemCount = wheelConfig.LineItemCount;
                    compnayWheelConfigDc.IsKPPRequiredWheel = wheelConfig.IsKPPRequiredWheel;
                }
            }
            return compnayWheelConfigDc;
        }

        [Route("IsChequeAccepted")]
        [HttpGet]
        [AllowAnonymous]
        public CustomerChequeAccepted IsChequeAccepted(int CustomerId)
        {
            CustomerChequeAccepted CustomerChequeAccepted = new CustomerChequeAccepted();
            using (var db = new AuthContext())
            {
                var cust = db.Customers.Where(x => x.CustomerId == CustomerId).Select(x => new { x.IsChequeAccepted, x.ChequeLimit }).FirstOrDefault();
                CustomerChequeAccepted.ChequeLimit = cust.ChequeLimit;
                CustomerChequeAccepted.IsChequeAccepted = cust.IsChequeAccepted;
                if (cust.IsChequeAccepted)
                {
                    string query = "exec GetCutomerChequLimit " + CustomerChequeAccepted.ChequeLimit + "," + CustomerId;
                    var lstChequeStatus = db.Database.SqlQuery<double>(query).FirstOrDefault();
                    if (lstChequeStatus == 0)
                    {
                        CustomerChequeAccepted.IsChequeAccepted = false;
                        CustomerChequeAccepted.msg = "Your previous cheque was return or cheque limit exceed.";
                    }
                    else
                    {
                        CustomerChequeAccepted.ChequeLimit = lstChequeStatus;
                    }
                }
                else
                {
                    CustomerChequeAccepted.msg = "";
                }
            }
            return CustomerChequeAccepted;
        }

        #region Get all Active Common Discount Offer for Agent App (04-10-2019)
        /// <summary>
        /// Get all Active Common Discount Offer for Agent App
        /// </summary>
        /// <param name="CurrentDate"></param>
        /// <param name="CustomerId"></param>
        ///<param name="PeopleId"></param>
        /// <returns></returns>
        [Route("CommonDiscountOfferForAgent")]
        [HttpGet]
        //[AllowAnonymous]
        public OfferdataDc CommonDiscountOfferForAgent(int CustomerId, int? PeopleId, int WarehouseId)
        {

            List<OfferDc> FinalBillDiscount = new List<OfferDc>();
            OfferdataDc res;
            using (AuthContext context = new AuthContext())
            {
                CustomersManager manager = new CustomersManager();
                var query = string.Format("exec IsSalesAppLead  {0}", PeopleId);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();
                    var universalStoreIds = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList();
                    if (universalStoreIds != null && universalStoreIds.Any())
                        storeids.AddRange(universalStoreIds);
                }
                var billDiscountOffer = manager.GetCustomerBillDiscount(CustomerId, "Sales App");
                List<BillDiscountOfferDc> billDiscountOfferDcs = Mapper.Map(billDiscountOffer).ToANew<List<BillDiscountOfferDc>>();
                if (billDiscountOfferDcs.Any())
                {
                    billDiscountOfferDcs = billDiscountOfferDcs.Where(x => (storeids.Contains(x.StoreId) || x.StoreId == 0) && x.ApplyType != "PrimeCustomer").ToList();

                    var offerIds = billDiscountOfferDcs.Where(x => x.BillDiscountOfferOn == "FreeItem").Select(x => x.OfferId).ToList();
                    List<GenricEcommers.Models.BillDiscountFreeItem> BillDiscountFreeItems = offerIds.Any() ? context.BillDiscountFreeItem.Where(x => offerIds.Contains(x.offerId) && x.RemainingOfferStockQty < x.OfferStockQty).ToList() : new List<GenricEcommers.Models.BillDiscountFreeItem>();
                    //List<BillDiscount> billDiscountfounds = context.BillDiscountDb.Where(x => x.CustomerId == CustomerId && offerIds.Contains(x.OfferId)).ToList();
                    foreach (var billDiscountOfferDc in billDiscountOfferDcs)
                    {

                        var bdcheck = new OfferDc
                        {
                            OfferId = billDiscountOfferDc.OfferId,
                            MaxBillAmount = billDiscountOfferDc.MaxBillAmount,
                            OfferName = billDiscountOfferDc.OfferName,
                            OfferCode = billDiscountOfferDc.OfferCode,
                            OfferCategory = billDiscountOfferDc.OfferCategory,
                            OfferOn = billDiscountOfferDc.OfferOn,
                            start = billDiscountOfferDc.start,
                            end = billDiscountOfferDc.end,
                            DiscountPercentage = billDiscountOfferDc.DiscountPercentage,
                            BillAmount = billDiscountOfferDc.BillAmount,
                            LineItem = billDiscountOfferDc.LineItem,
                            Description = billDiscountOfferDc.Description,
                            BillDiscountOfferOn = billDiscountOfferDc.BillDiscountOfferOn,
                            BillDiscountWallet = billDiscountOfferDc.BillDiscountWallet,
                            IsMultiTimeUse = billDiscountOfferDc.IsMultiTimeUse,
                            IsUseOtherOffer = billDiscountOfferDc.IsUseOtherOffer,
                            IsScratchBDCode = billDiscountOfferDc.IsScratchBDCode,
                            BillDiscountType = billDiscountOfferDc.BillDiscountType,
                            OfferAppType = billDiscountOfferDc.OfferAppType,
                            ApplyOn = billDiscountOfferDc.ApplyOn,
                            WalletType = billDiscountOfferDc.WalletType,
                            MaxDiscount = billDiscountOfferDc.MaxDiscount,
                            IsBillDiscountFreebiesItem = billDiscountOfferDc.IsBillDiscountFreebiesItem,
                            IsBillDiscountFreebiesValue = billDiscountOfferDc.IsBillDiscountFreebiesValue,
                            offerminorderquantity = billDiscountOfferDc.offerminorderquantity,
                            offeritemname = billDiscountOfferDc.offeritemname,
                            OfferBillDiscountItems = billDiscountOfferDc.OfferBillDiscountItems.Select(y => new OfferBillDiscountItemDc
                            {
                                CategoryId = y.CategoryId,
                                Id = y.Id,
                                IsInclude = y.IsInclude,
                                SubCategoryId = y.SubCategoryId
                            }).ToList(),
                            OfferItems = billDiscountOfferDc.OfferItems.Select(y => new OfferItemdc
                            {
                                IsInclude = y.IsInclude,
                                itemId = y.itemId
                            }).ToList(),
                            RetailerBillDiscountFreeItemDcs = BillDiscountFreeItems.Where(x => x.offerId == billDiscountOfferDc.OfferId).Select(x => new RetailerBillDiscountFreeItemDc
                            {
                                ItemId = x.ItemId,
                                ItemName = x.ItemName,
                                Qty = x.Qty
                            }).ToList()
                        };
                        if (billDiscountOfferDc.MaxDiscount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        else if (billDiscountOfferDc.MaxBillAmount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxBillAmount * billDiscountOfferDc.DiscountPercentage / 100;
                        }
                        else
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        if (bdcheck.BillDiscountOfferOn == "FreeItem" && bdcheck.RetailerBillDiscountFreeItemDcs.Any())
                            FinalBillDiscount.Add(bdcheck);
                        else
                            FinalBillDiscount.Add(bdcheck);


                    }
                }
                res = new OfferdataDc()
                {
                    offer = FinalBillDiscount,
                    Status = true,
                    Message = "Success"
                };
                return res;
            }
            //List<OfferBDDTO> BillDiscount = new List<OfferBDDTO>();
            //List<OfferBDDTO> FinalBillDiscount = new List<OfferBDDTO>();
            //ResDTOList res;
            //DateTime CurrentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);
            //try
            //{
            //    using (AuthContext context = new AuthContext())
            //    {
            //        Customer Customer = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false && x.Active == true).FirstOrDefault();
            //        if (Customer != null)
            //        {
            //            BillDiscount = context.OfferDb.Where(o => o.IsDeleted == false && o.WarehouseId == Customer.Warehouseid && o.start <= CurrentDate && o.end >= CurrentDate && o.IsActive == true
            //                            && (o.OfferAppType == "Sales App" || o.OfferAppType == "Both") && (o.OfferOn == "BillDiscount" || o.OfferOn == "ScratchBillDiscount"))
            //                             .Select(o => new OfferBDDTO
            //                             {

            //                                 OfferId = o.OfferId,
            //                                 CustomerId = Customer.CustomerId,
            //                                 WarehouseId = o.WarehouseId,
            //                                 OfferName = o.OfferName,
            //                                 OfferOn = o.OfferOn,
            //                                 OfferCategory = o.OfferCategory,
            //                                 Description = o.Description,
            //                                 start = o.start,
            //                                 end = o.end,
            //                                 DiscountPercentage = o.DiscountPercentage,
            //                                 IsActive = o.IsActive,
            //                                 IsDeleted = o.IsDeleted,
            //                                 CreatedDate = o.CreatedDate,
            //                                 UpdateDate = o.UpdateDate,
            //                                 OfferCode = o.OfferCode,
            //                                 BillDiscountOfferOn = o.BillDiscountOfferOn,
            //                                 BillDiscountWallet = o.BillDiscountWallet,
            //                                 BillAmount = o.BillAmount,
            //                                 LineItem = o.LineItem,
            //                                 MaxBillAmount = o.MaxBillAmount,
            //                                 IsMultiTimeUse = o.IsMultiTimeUse,
            //                                 IsUseOtherOffer = o.IsUseOtherOffer,
            //                                 BillDiscountType = o.BillDiscountType,
            //                                 Category = o.Category,
            //                                 subCategory = o.subCategory,
            //                                 subSubCategory = o.subSubCategory,
            //                                 MaxDiscount = o.MaxDiscount,
            //                                 OfferUseCount = o.OfferUseCount,
            //                                 ApplyOn = o.ApplyOn,
            //                                 WalletType = o.WalletType,
            //                                 OfferItems = o.OfferItemsBillDiscounts.Select(x => new OfferItem
            //                                 {
            //                                     IsInclude = x.IsInclude,
            //                                     itemId = x.itemId
            //                                 }).ToList(),
            //                                 OfferBillDiscountItems = o.BillDiscountOfferSections.Select(x => new OfferBillDiscountItem
            //                                 {
            //                                     IsInclude = x.IsInclude,
            //                                     Id = x.ObjId
            //                                 }).ToList()
            //                             }).ToList();

            //            if (BillDiscount.Count() > 0)
            //            {
            //                //check if offer not used 
            //                foreach (var bdcheck in BillDiscount)
            //                {
            //                    if (bdcheck.OfferOn == "BillDiscount")
            //                    {
            //                        string query = "";
            //                        if (bdcheck.BillDiscountType == "subcategory" && bdcheck.OfferBillDiscountItems.Any())
            //                        {
            //                            var mappingIds = string.Join(",", bdcheck.OfferBillDiscountItems.Select(x => x.Id).ToList());

            //                            query = "select distinct d.Categoryid,a.[SubCategoryId],b.SubCategoryMappingId MappingId from SubCategories a inner join SubcategoryCategoryMappings b on a.SubCategoryid=b.subCategoryid inner join Categories d on b.Categoryid=d.Categoryid and a.IsActive=1 and b.IsActive =1 and a.Deleted=0 and b.Deleted=0 and d.IsActive=1 and d.Deleted=0 and b.SubCategoryMappingId in (" + mappingIds + ")";
            //                            var offerCatSubCats = context.Database.SqlQuery<OfferCatSubCat>(query).ToList();
            //                            foreach (var item in bdcheck.OfferBillDiscountItems)
            //                            {
            //                                if (offerCatSubCats.Any(x => x.MappingId == item.Id))
            //                                {
            //                                    var offerCatSubCat = offerCatSubCats.FirstOrDefault(x => x.MappingId == item.Id);
            //                                    item.Id = offerCatSubCat.SubCategoryId.Value;
            //                                    item.CategoryId = offerCatSubCat.Categoryid.Value;
            //                                }
            //                            }
            //                        }
            //                        else if (bdcheck.BillDiscountType == "brand" && bdcheck.OfferBillDiscountItems.Any())
            //                        {
            //                            var mappingIds = string.Join(",", bdcheck.OfferBillDiscountItems.Select(x => x.Id).ToList());

            //                            query = "select distinct d.SubCategoryId, e.Categoryid,a.[SubsubCategoryid],b.BrandCategoryMappingId MappingId"
            //                                            + " from SubsubCategories a inner"
            //                                            + " join BrandCategoryMappings b on a.SubsubCategoryid = b.SubsubCategoryId"
            //                                            + " inner join SubcategoryCategoryMappings c on c.SubCategoryMappingId = b.SubCategoryMappingId"
            //                                            + " inner join SubCategories d on d.SubCategoryId = c.SubCategoryId"
            //                                            + " inner join Categories e on e.Categoryid = c.Categoryid"
            //                                            + " where a.IsActive = 1 and b.IsActive = 1 and a.Deleted = 0 and b.Deleted = 0 and d.IsActive = 1 and d.Deleted = 0 and c.IsActive = 1 " +
            //                                            " and c.Deleted = 0 and e.IsActive = 1 and e.Deleted = 0 and b.BrandCategoryMappingId in (" + mappingIds + ")";
            //                            var offerCatSubCats = context.Database.SqlQuery<OfferCatSubCat>(query).ToList();
            //                            foreach (var item in bdcheck.OfferBillDiscountItems)
            //                            {
            //                                if (offerCatSubCats.Any(x => x.MappingId == item.Id))
            //                                {
            //                                    var offerCatSubCat = offerCatSubCats.FirstOrDefault(x => x.MappingId == item.Id);
            //                                    item.Id = offerCatSubCat.SubSubCategoryId.Value;
            //                                    item.SubCategoryId = offerCatSubCat.SubCategoryId.Value;
            //                                    item.CategoryId = offerCatSubCat.Categoryid.Value;
            //                                }
            //                            }
            //                        }
            //                    }

            //                    List<BillDiscount> founds = context.BillDiscountDb.Where(x => x.CustomerId == CustomerId && x.OfferId == bdcheck.OfferId).ToList();
            //                    if (founds != null && founds.Any())
            //                    {
            //                        if (bdcheck.OfferOn == "ScratchBillDiscount")
            //                        {
            //                            if (founds.FirstOrDefault().OrderId > 0)
            //                            {
            //                                //BillDiscount.Remove(bdcheck); offer used already
            //                            }
            //                            else if (founds.FirstOrDefault().IsScratchBDCode)
            //                            {
            //                                bdcheck.IsScratchBDCode = true;
            //                                FinalBillDiscount.Add(bdcheck);
            //                            }
            //                            else
            //                            {
            //                                bdcheck.IsScratchBDCode = false;
            //                                FinalBillDiscount.Add(bdcheck);
            //                            }
            //                        }
            //                        else
            //                        {
            //                            if (bdcheck.OfferOn == "BillDiscount" && bdcheck.IsMultiTimeUse)
            //                            {
            //                                if (!bdcheck.OfferUseCount.HasValue)
            //                                    FinalBillDiscount.Add(bdcheck);
            //                                else if (bdcheck.OfferUseCount.Value > founds.Count())
            //                                    FinalBillDiscount.Add(bdcheck);
            //                            }
            //                        }
            //                    }
            //                    else if (bdcheck.OfferOn == "BillDiscount")
            //                    {
            //                        FinalBillDiscount.Add(bdcheck);
            //                    }

            //                }
            //                res = new ResDTOList()
            //                {
            //                    BillDiscount = FinalBillDiscount,
            //                    Status = true,
            //                    Message = "Success"
            //                };
            //                return Request.CreateResponse(HttpStatusCode.OK, res);
            //            }
            //        }
            //    }
            //    res = new ResDTOList()
            //    {
            //        BillDiscount = null,
            //        Status = false,
            //        Message = "fail"
            //    };
            //    return Request.CreateResponse(HttpStatusCode.OK, res);
            //}
            //catch (Exception ee)
            //{

            //    res = new ResDTOList()
            //    {
            //        BillDiscount = null,
            //        Status = false,
            //        Message = ("something isse occurs : " + ee)
            //    };
            //    return Request.CreateResponse(HttpStatusCode.OK, res);
            //}
        }
        #endregion

        #region Agent app Update Scratch Offer(04-10-2019)
        /// <summary>
        /// Check Agent Offer By Id (Offer is used or not or offer available for multi use)
        /// </summary>
        /// <param name="OfferId"></param>
        /// <param name="CustomerId"></param>
        /// <param name="IsScartched"></param>
        /// <param name="PeopleId"></param>
        /// <param name="WarehouseId"></param>
        /// <returns></returns>
        [Route("AgentUpdateScratchOfferById")]
        [HttpPut]
        public HttpResponseMessage AgentUpdateScratchOfferById(int OfferId, int CustomerId, bool IsScartched, int? PeopleId, int WarehouseId)
        {
            OfferBDScratchDTO offer = new OfferBDScratchDTO();
            ResScratchDTO res;
            try
            {
                DateTime CurrentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);
                using (AuthContext context = new AuthContext())
                {

                    Customer Customer = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false && x.Active == true).FirstOrDefault();
                    if (Customer != null)
                    {
                        var dbOffers = context.OfferDb.Where(o => o.IsDeleted == false && o.WarehouseId == Customer.Warehouseid && o.start <= CurrentDate && o.end >= CurrentDate && o.IsActive == true && o.IsDeleted == false && o.OfferOn == "ScratchBillDiscount" && o.OfferId == OfferId).Include(x => x.OfferScratchWeights).ToList();
                        offer = dbOffers.Select(o => new OfferBDScratchDTO
                        {
                            OfferId = o.OfferId,
                            CustomerId = Customer.CustomerId,
                            WarehouseId = o.WarehouseId,
                            OfferName = o.OfferName,
                            OfferOn = o.OfferOn,
                            OfferCategory = o.OfferCategory,
                            Description = o.Description,
                            start = o.start,
                            end = o.end,
                            DiscountPercentage = o.DiscountPercentage,
                            IsActive = o.IsActive,
                            IsDeleted = o.IsDeleted,
                            CreatedDate = o.CreatedDate,
                            UpdateDate = o.UpdateDate,
                            OfferCode = o.OfferCode,
                            BillDiscountOfferOn = o.BillDiscountOfferOn,
                            BillDiscountWallet = o.BillDiscountWallet,
                            BillAmount = o.BillAmount,
                            IsMultiTimeUse = o.IsMultiTimeUse,
                            IsUseOtherOffer = o.IsUseOtherOffer,
                            ApplyType = o.ApplyType
                        }).FirstOrDefault();
                        if (offer != null)
                        {

                            double billAmount = 0;
                            if (offer.BillDiscountOfferOn == "DynamicWalletPoint")
                            {
                                List<int> ScratchPoints = new List<int>();
                                WeightedRandomBag<int> itemDrops = new WeightedRandomBag<int>();
                                foreach (var item in dbOffers.FirstOrDefault().OfferScratchWeights)
                                {
                                    itemDrops.AddEntry(item.WalletPoint, item.Weight);
                                }
                                billAmount = itemDrops.GetRandom();

                            }
                            else if (offer.BillDiscountOfferOn == "WalletPoint")
                            {
                                billAmount = offer.BillDiscountWallet.Value;
                            }
                            else if (offer.BillDiscountOfferOn == "Percentage")
                            {
                                billAmount = dbOffers.FirstOrDefault().MaxDiscount;
                            }
                            //check if IsScratchBDCode used to customer
                            BillDiscount found = context.BillDiscountDb.Where(x => x.CustomerId == CustomerId && x.OfferId == offer.OfferId && x.OrderId == 0).FirstOrDefault();
                            if (found != null)
                            {
                                if (!found.IsScratchBDCode)
                                {
                                    found.IsScratchBDCode = IsScartched;
                                    found.ModifiedDate = CurrentDate;
                                    found.ModifiedBy = Customer.CustomerId;
                                    context.Entry(found).State = EntityState.Modified;
                                    context.Commit();

                                    offer.BillDiscountWallet = found.BillDiscountAmount;
                                    if (offer.OfferOn == "ScratchBillDiscount")
                                    {
                                        offer.BillDiscountWallet = found.BillDiscountTypeValue;
                                    }
                                    offer.IsScratchBDCode = found.IsScratchBDCode;
                                    res = new ResScratchDTO()
                                    {
                                        ScratchBillDiscount = offer,
                                        Status = true,
                                        Message = "Code Scratch Successfully"
                                    };
                                }
                                else
                                {
                                    res = new ResScratchDTO()
                                    {
                                        ScratchBillDiscount = offer,
                                        Status = true,
                                        Message = "Already Scratch."
                                    };
                                }
                                return Request.CreateResponse(HttpStatusCode.OK, res);
                            }
                            else
                            {
                                BillDiscount billDiscount = new BillDiscount();

                                billDiscount.CustomerId = Customer.CustomerId;
                                billDiscount.OrderId = 0;
                                billDiscount.OfferId = offer.OfferId;
                                billDiscount.BillDiscountType = offer.OfferOn;
                                if (offer.OfferOn == "ScratchBillDiscount")
                                {
                                    billDiscount.BillDiscountTypeValue = billAmount;//// scratch amount
                                }
                                else
                                {
                                    billDiscount.BillDiscountAmount = billAmount;
                                }
                                billDiscount.IsMultiTimeUse = offer.IsMultiTimeUse;
                                billDiscount.IsUseOtherOffer = offer.IsUseOtherOffer;
                                billDiscount.CreatedDate = CurrentDate;
                                billDiscount.ModifiedDate = CurrentDate;
                                billDiscount.IsActive = offer.IsActive;
                                billDiscount.IsDeleted = false;
                                billDiscount.CreatedBy = 0;
                                billDiscount.ModifiedBy = 0;
                                billDiscount.IsScratchBDCode = IsScartched;//scratched or not
                                context.BillDiscountDb.Add(billDiscount);
                                context.Commit();

                                offer.BillDiscountWallet = billAmount;

                                res = new ResScratchDTO()
                                {
                                    ScratchBillDiscount = offer,
                                    Status = true,
                                    Message = "Code Scratch Successfully"
                                };
                                return Request.CreateResponse(HttpStatusCode.OK, res);

                            }

                        }
                    }
                    res = new ResScratchDTO()
                    {
                        ScratchBillDiscount = offer,
                        Status = false,
                        Message = "fail : due to offer scratch code expired"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }

            }
            catch (Exception ee)
            {

                res = new ResScratchDTO()
                {
                    ScratchBillDiscount = offer,
                    Status = false,
                    Message = ("something isse occurs : " + ee)
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }
        #endregion

        [Route("CustomerAddressUpdateRequest")]
        [HttpPost]
        public async Task<HttpResponseMessage> CustomerAddressUpdateRequest(CustomerUpdateRequest customerUpdateRequest)
        {
            var Customer = new Customer();
            if (customerUpdateRequest.CustomerId > 0)
            {
                using (var context = new AuthContext())
                {
                    Customer = context.Customers.FirstOrDefault(x => x.CustomerId == customerUpdateRequest.CustomerId);
                }
            }
            MongoDbHelper<CustomerUpdateRequest> mongoDbHelper = new MongoDbHelper<CustomerUpdateRequest>();
            int count = mongoDbHelper.Count(x => x.CustomerId == customerUpdateRequest.CustomerId && x.RequestBy == customerUpdateRequest.RequestBy && x.Status == 0);
            if (count == 0)
            {
                customerUpdateRequest.CreatedDate = DateTime.Now;
                customerUpdateRequest.Status = 0;
                customerUpdateRequest.UpdatedDate = DateTime.Now;
                customerUpdateRequest.WarehouseId = Customer.Warehouseid ?? 0;
                customerUpdateRequest.SkCode = Customer.Skcode;
                customerUpdateRequest.MobileNo = Customer.Mobile;
                bool result = await mongoDbHelper.InsertAsync(customerUpdateRequest);
                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = result,
                    Message = result ? "Updated request save successfully." : "Some issue occurred please try after some time."
                });

            }
            else
            {

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = false,
                    Message = "Already one updated request pending for this customer."
                });
            }
        }

        #region Edit
        [Route("UpdateActualRoute")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<bool> UpdateActualRoute(List<DataContracts.External.MobileExecutiveDC.SalesAppRouteParam> param)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.UpdateActualRoute(param);
        }

        [Route("BeatStart/{peopleId}/{customerId}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DateTime?> BeatStart(int peopleId, int customerId)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.BeatStart(peopleId, customerId);
        }

        #region Get all Active Offer Sales App
        /// <returns></returns>
        [Route("GetAllOfferSalesApp")]
        [HttpGet]
        //[AllowAnonymous]
        public DataContracts.External.OfferdataDc GetAllOfferSalesApp(int PeopleId, int WarehouseId, int CustomerId)
        {

            List<AngularJSAuthentication.DataContracts.External.OfferDc> FinalBillDiscount = new List<AngularJSAuthentication.DataContracts.External.OfferDc>();
            AngularJSAuthentication.DataContracts.External.OfferdataDc res;
            using (AuthContext context = new AuthContext())
            {
                var offertypeConfigs = context.OfferTypeDefaultConfigs.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();

                CustomersManager manager = new CustomersManager();
                var query = string.Format("exec IsSalesAppLead {0}", PeopleId);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();

                    var universalStoreIds = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList();
                    if (universalStoreIds != null && universalStoreIds.Any())
                        storeids.AddRange(universalStoreIds);
                }
                List<AngularJSAuthentication.DataContracts.Masters.BillDiscountOfferDc> billDiscountOfferDcs = manager.GetAllOfferSalesApp(WarehouseId, CustomerId, "Sales App");
                var offerIds = billDiscountOfferDcs.Where(x => x.BillDiscountOfferOn == "FreeItem").Select(x => x.OfferId).ToList();
                List<BillDiscountFreeItem> BillDiscountFreeItems = offerIds.Any() ? context.BillDiscountFreeItem.Where(x => offerIds.Contains(x.offerId) && x.RemainingOfferStockQty < x.OfferStockQty).ToList() : new List<BillDiscountFreeItem>();
                if (billDiscountOfferDcs.Any())
                {
                    billDiscountOfferDcs = billDiscountOfferDcs.Where(x => x.BillDiscountType != "ClearanceStock" && (storeids.Contains(x.StoreId) || x.StoreId == 0) && x.ApplyType != "PrimeCustomer").ToList();

                    foreach (var billDiscountOfferDc in billDiscountOfferDcs)
                    {
                        var OfferDefaultdata = billDiscountOfferDc.OfferOn == "Item" ? offertypeConfigs.Where(x => x.OfferType == billDiscountOfferDc.OfferOn && x.IsActive == true && x.IsDeleted == false).FirstOrDefault()
                            : offertypeConfigs.Where(x => x.OfferType == billDiscountOfferDc.OfferOn && x.DiscountOn == billDiscountOfferDc.BillDiscountOfferOn && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        OfferDefaultdata = OfferDefaultdata != null ? OfferDefaultdata : new Model.SalesApp.OfferTypeDefaultConfig();
                        var bdcheck = new AngularJSAuthentication.DataContracts.External.OfferDc
                        {
                            OfferId = billDiscountOfferDc.OfferId,
                            MaxBillAmount = billDiscountOfferDc.MaxBillAmount,
                            OfferName = billDiscountOfferDc.OfferName,
                            OfferCode = billDiscountOfferDc.OfferCode,
                            OfferCategory = billDiscountOfferDc.OfferCategory,
                            OfferOn = billDiscountOfferDc.OfferOn,
                            start = billDiscountOfferDc.start,
                            end = billDiscountOfferDc.end,
                            DiscountPercentage = billDiscountOfferDc.DiscountPercentage,
                            BillAmount = billDiscountOfferDc.BillAmount,
                            LineItem = billDiscountOfferDc.LineItem,
                            Description = billDiscountOfferDc.Description,
                            BillDiscountOfferOn = billDiscountOfferDc.BillDiscountOfferOn,
                            BillDiscountWallet = billDiscountOfferDc.BillDiscountWallet,
                            IsMultiTimeUse = billDiscountOfferDc.IsMultiTimeUse,
                            IsUseOtherOffer = billDiscountOfferDc.IsUseOtherOffer,
                            IsScratchBDCode = billDiscountOfferDc.IsScratchBDCode,
                            BillDiscountType = billDiscountOfferDc.BillDiscountType,
                            OfferAppType = billDiscountOfferDc.OfferAppType,
                            ApplyOn = billDiscountOfferDc.ApplyOn,
                            WalletType = billDiscountOfferDc.WalletType,
                            MaxDiscount = billDiscountOfferDc.MaxDiscount,
                            ColorCode = !string.IsNullOrEmpty(billDiscountOfferDc.ColorCode) ? billDiscountOfferDc.ColorCode : OfferDefaultdata.ColorCode,
                            ImagePath = !string.IsNullOrEmpty(billDiscountOfferDc.ImagePath) ? billDiscountOfferDc.ImagePath : OfferDefaultdata.ImagePath,
                            IsBillDiscountFreebiesItem = billDiscountOfferDc.IsBillDiscountFreebiesItem,
                            IsBillDiscountFreebiesValue = billDiscountOfferDc.IsBillDiscountFreebiesValue,
                            offerminorderquantity = billDiscountOfferDc.offerminorderquantity,
                            offeritemname = billDiscountOfferDc.offeritemname,
                            OfferBillDiscountItems = billDiscountOfferDc.OfferBillDiscountItems != null && billDiscountOfferDc.OfferBillDiscountItems.Any() ? billDiscountOfferDc.OfferBillDiscountItems.Select(y => new DataContracts.Masters.OfferBillDiscountItemDc
                            {
                                CategoryId = y.CategoryId,
                                Id = y.Id,
                                IsInclude = y.IsInclude,
                                SubCategoryId = y.SubCategoryId
                            }).ToList() : new List<DataContracts.Masters.OfferBillDiscountItemDc>(),
                            OfferItems = billDiscountOfferDc.OfferItems != null && billDiscountOfferDc.OfferItems.Any() ? billDiscountOfferDc.OfferItems.Select(y => new DataContracts.External.OfferItemdc
                            {
                                IsInclude = y.IsInclude,
                                itemId = y.itemId
                            }).ToList() : new List<DataContracts.External.OfferItemdc>(),
                            RetailerBillDiscountFreeItemDcs = BillDiscountFreeItems != null && BillDiscountFreeItems.Any() ? BillDiscountFreeItems.Where(x => x.offerId == billDiscountOfferDc.OfferId).Select(x => new DataContracts.External.RetailerBillDiscountFreeItemDc
                            {
                                ItemId = x.ItemId,
                                ItemName = x.ItemName,
                                Qty = x.Qty
                            }).ToList() : new List<DataContracts.External.RetailerBillDiscountFreeItemDc>(),
                            OfferLineItemValueDcs = billDiscountOfferDc.OfferLineItemValueDcs != null && billDiscountOfferDc.OfferLineItemValueDcs.Any() ? billDiscountOfferDc.OfferLineItemValueDcs.Where(x => x.offerId == billDiscountOfferDc.OfferId).ToList() : new List<DataContracts.Masters.OfferLineItemValueDc>(),
                            BillDiscountRequiredItems = billDiscountOfferDc.BillDiscountRequiredItems != null && billDiscountOfferDc.BillDiscountRequiredItems.Any() ? billDiscountOfferDc.BillDiscountRequiredItems.Where(x => x.offerId == billDiscountOfferDc.OfferId).ToList() : new List<DataContracts.Masters.BillDiscountRequiredItemDc>(),
                        };
                        if (billDiscountOfferDc.MaxDiscount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        else if (billDiscountOfferDc.MaxBillAmount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxBillAmount * billDiscountOfferDc.DiscountPercentage / 100;
                        }
                        else
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        FinalBillDiscount.Add(bdcheck);
                    }
                }
                res = new DataContracts.External.OfferdataDc()
                {
                    offer = FinalBillDiscount,
                    Status = true,
                    Message = "Success"
                };
                return res;
            }

        }
        #endregion

        [Route("GetDefaultCustomerid")]
        [HttpGet]
        public SalesAppDefaultCustomersDC GetDefaultCustomerid(int WarehouseId)
        {
            using (var db = new AuthContext())
            {
                SalesAppDefaultCustomersDC res;
                var companydetails = db.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                if (companydetails != null)
                {
                    if (WarehouseId > 0)
                    {
                        MongoDbHelper<SalesAppDefaultCustomers> SalesAppmongoDbHelper = new MongoDbHelper<SalesAppDefaultCustomers>();
                        var defaultCustomer = SalesAppmongoDbHelper.Select(x => x.WarehouseId == WarehouseId).FirstOrDefault();
                        if (defaultCustomer != null)
                        {
                            companydetails.DefaultSalesSCcustomerId = defaultCustomer.CustomerId;
                            res = new SalesAppDefaultCustomersDC
                            {
                                DefaultSalesSCcustomerId = companydetails.DefaultSalesSCcustomerId,
                                Status = true,
                                Message = "Success!!"
                            };
                            return res;
                        }
                        else
                        {
                            res = new SalesAppDefaultCustomersDC
                            {
                                DefaultSalesSCcustomerId = 0,
                                Status = false,
                                Message = "No Data Found!!"
                            };
                            return res;
                        }
                    }
                    else
                    {
                        res = new SalesAppDefaultCustomersDC
                        {
                            DefaultSalesSCcustomerId = 0,
                            Status = false,
                            Message = "No Data Found!!"
                        };
                        return res;
                    }
                }
                else
                {
                    res = new SalesAppDefaultCustomersDC
                    {
                        DefaultSalesSCcustomerId = 0,
                        Status = false,
                        Message = "No Data Found!!"
                    };
                    return res;
                }
            }

        }

        [Route("GetTargetBeatDashboard")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<MainDashboardDCs> GetTargetBeatDashboard(int PeopleId, int WarehouseId)
        {
            BeatsManager manager = new BeatsManager();
            MainDashboardDCs dash = new MainDashboardDCs();

            using (var Context = new AuthContext())
            {
                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                var today = DateTime.Now.Date;
                var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
                var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == today);
                var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == today.AddDays(-1)).FirstOrDefault();


                SalesAppManager salesAppManager = new SalesAppManager();

                //if (Context.Database.Connection.State != ConnectionState.Open)
                //    Context.Database.Connection.Open();

                //var peopleId = new SqlParameter("@peopleId", PeopleId);
                //List<SalesAllBeatDc> allBeat = Context.Database.SqlQuery<SalesAllBeatDc>("exec GetExecutiveAllBeat @peopleId", peopleId).ToList();

                var customerids = MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => x.CustomerId).ToList();
                var Todaycustomerids = todayBeat != null && todayBeat.PlannedRoutes != null ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                var res = salesAppManager.GetBeatTargetDashboardData(PeopleId, WarehouseId, customerids, Todaycustomerids);


                //-----------------mtd data----
                List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                //MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                //list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);

                MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();

                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = Context.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));


                if (Isdigitalexecutive)
                {
                    //List<DigitalSalesBeatDSR> DigitalSaleslist = new List<DigitalSalesBeatDSR>();
                    //MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
                    var digitallist = DigitalDSRmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                    list = Mapper.Map(digitallist).ToANew<List<SalesDashboardTodayMTDData>>();
                }
                else
                {
                    //List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                    //MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                    list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                }


                var yesterdaydt = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd 23:59:59");
                var yesterdayBeatDashboard = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate >= (today.AddDays(-1)) && x.CreatedDate <= Convert.ToDateTime(yesterdaydt)).FirstOrDefault();

                TodaySaleDC todayObj = new TodaySaleDC();
                todayObj.TodaySales = res.sales.TodaySales == 0 ? 0 : res.sales.TodaySales;
                todayObj.TodayTargetSales = res.TargetSales == null ? 0 : res.TargetSales.TodayTargetSales;
                if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any())
                {
                    todayObj.TodayTotalVisitBeatCustomer = res.sales.TotalProductiveCustomer;// todayBeat.PlannedRoutes.Where(x => x.IsVisited).Count(); 
                    todayObj.TodayTotalBeatCustomer = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                }

                MTDSaleDC MTDObj = new MTDSaleDC();
                MTDObj.MTDSales = res.sales.MTDSales;
                MTDObj.MTDTargetSales = res.TargetSales == null ? 0 : res.TargetSales.MTDTargetSales;
                if (MonthBeat.Count > 0 && MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Any())
                {
                    MTDObj.MTDTotalVisitBeatCustomer = list.Select(x => x.ProductiveCall).Sum() + res.sales.TotalProductiveCustomer;// MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Where(x => x.IsVisited).Select(x => x.CustomerId).Count();
                    MTDObj.MTDTotalBeatCustomer = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count() + list.Select(x => x.VisitPlanned).Sum() : list.Select(x => x.VisitPlanned).Sum();   // MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes.Select(y => y.CustomerId)).Distinct().Count();
                }

                YesterdaySaleDCs Yesobj = new YesterdaySaleDCs();
                Yesobj.YesterdaySales = res.sales.YesterdaySales == 0 ? 0 : res.sales.YesterdaySales;
                Yesobj.YesterdayTargetSales = YesterdayBeat != null && YesterdayBeat.TodayTarget.HasValue ? YesterdayBeat.TodayTarget.Value : 0;
                if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any())
                {
                    Yesobj.YesterdayTotalVisitBeatCustomer = yesterdayBeatDashboard != null ? yesterdayBeatDashboard.ProductiveCall : 0;
                    Yesobj.YesterdayTotalBeatCustomer = YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                }
                dash.TodaySaleDcs = todayObj;
                dash.MTDSaleDcs = MTDObj;
                dash.YesterdaySaleDCs = Yesobj;
            }
            return dash;
        }

        [Route("BeatDashboardDetail")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.DashboardDc> BeatDashboardDetail(int PeopleId, int flag, int WarehouseId, bool IsJobflag = false)
        {
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            DigitalSalesBeatDSR DSR = new DigitalSalesBeatDSR();

            long? storeId = 0;

            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DataContracts.External.MobileExecutiveDC.DashboardDc dash = new DataContracts.External.MobileExecutiveDC.DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date.AddDays(1).AddMilliseconds(-1);
            var currentDate = DateTime.Now.Date;
            //var today = temp;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
            var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == currentDate);
            var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == currentDate.AddDays(-1)).FirstOrDefault();

            //---- get dashboard data from mongo---
            List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
            // MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
            // list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);

            using (var Context = new AuthContext())
            {

                var channeldata = (from cs in Context.ClusterStoreExecutives
                                   join c in Context.ChannelMasters
                                   on cs.ChannelMasterId equals c.ChannelMasterId
                                   where cs.IsActive == true && cs.IsDeleted == false && c.Active == true && c.Deleted == false
                                   && cs.ExecutiveId == PeopleId
                                   select new
                                   {
                                       c.ChannelMasterId,
                                       c.ChannelType
                                   }).FirstOrDefault();

                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = Context.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                if (Isdigitalexecutive && channeldata.ChannelType.ToUpper() == "DIGITAL")
                {
                    //List<DigitalSalesBeatDSR> DigitalSaleslist = new List<DigitalSalesBeatDSR>();
                    MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
                    var digitallist = DigitalDSRmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                    list = Mapper.Map(digitallist).ToANew<List<SalesDashboardTodayMTDData>>();
                }
                else if (!Isdigitalexecutive && channeldata.ChannelType.ToUpper() != "DIGITAL")
                {
                    //List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                    MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                    list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                }

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                //var peopleId = new SqlParameter("@peopleId", PeopleId);
                //List<SalesAllBeatDc> allBeat = Context.Database.SqlQuery<SalesAllBeatDc>("exec GetExecutiveAllBeat @peopleId", peopleId).ToList();
                DataContracts.External.MobileExecutiveDC.BeatCustomerDc Beat = new DataContracts.External.MobileExecutiveDC.BeatCustomerDc();

                Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();
                Beat.YesterdayBeatCustomerIds = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ?
                        YesterdayBeat.PlannedRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                Beat.MonthBeatCustomerIds = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ?
                        MonthBeat.SelectMany(x => x.PlannedRoutes).Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();


                // repeat: //goto statment for job

                DataTable IdDt = new DataTable();
                List<int> ActualCustomerVisited = new List<int>();
                IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");


                DataTable VisitedCustomersdt = new DataTable();
                VisitedCustomersdt = new DataTable();
                VisitedCustomersdt.Columns.Add("IntValue");

                if (flag == 1)
                {
                    if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any() && Beat.TodayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();

                }
                DataContracts.External.MobileExecutiveDC.MTDSaleDc mtdObj = new DataContracts.External.MobileExecutiveDC.MTDSaleDc();
                if (flag == 2)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any() && Beat.TodayBeatCustomerIds.Count > 0)
                    {

                        foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    //ActualCustomerVisited = MonthBeat != null && MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes) != null && MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).Any() ? MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).Select(x => x.CustomerId).ToList() : new List<int>();
                    ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();


                }
                DataContracts.External.MobileExecutiveDC.YesterdaySaleDC YestObj = new DataContracts.External.MobileExecutiveDC.YesterdaySaleDC();
                if (flag == 3)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any() && Beat.YesterdayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    ActualCustomerVisited = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                }

                if (IdDt == null)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                }
                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 1200;
                cmd.CommandText = "[dbo].[SpDashBoardDetailNew]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var param4 = new SqlParameter("PersonId", PeopleId);
                var param5 = new SqlParameter("CustIdDs", IdDt);
                var param6 = new SqlParameter("Flag", flag);
                var param8 = new SqlParameter("WarehouseId", WarehouseId);
                //var param9 = new SqlParameter("Temp", temp);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param8);
                //cmd.Parameters.Add(param9);


                var reader = cmd.ExecuteReader();
                dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                if (dashboardDetail != null && flag == 1)
                {
                    DataContracts.External.MobileExecutiveDC.TodayDashboardDc ToObj = new DataContracts.External.MobileExecutiveDC.TodayDashboardDc();
                    ToObj.TodayBeatSales = dashboardDetail.BeatSales;
                    ToObj.TodayExtraSales = dashboardDetail.ExtraSales;
                    ToObj.TodayBeatOrder = dashboardDetail.BeatOrder;
                    ToObj.TodayTotalSales = dashboardDetail.TotalSales;
                    ToObj.TodayProductiveCall = dashboardDetail.ProductiveCall;
                    int SuccessPhoneOrder = 0;
                    if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                    {
                        SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                        ToObj.TodayVisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                        ToObj.TodayTotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                        ToObj.TodayOutletCoverage = Math.Round((Convert.ToDouble(ToObj.TodayTotalCall) / ToObj.TodayVisitPlanned) * 100, 2);
                        ToObj.PhoneOrder = SuccessPhoneOrder;
                    }
                    else
                    {
                        ToObj.TodayVisitPlanned = 0;
                        ToObj.TodayTotalCall = 0;
                        ToObj.TodayOutletCoverage = 0;
                    }
                    if (ToObj.TodayTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        ToObj.TodayStrikeRate = Math.Round((Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100, 2);
                    }
                    //var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    // ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                    List<int> PlanCustIds = new List<int>();
                    if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = todayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }
                    ToObj.TodayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0;
                    ToObj.TodayExtraCall = dashboardDetail.ExtraCall;
                    ToObj.TodayExtraOrder = dashboardDetail.ExtraOrder;
                    ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                    ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                    ToObj.Eco = dashboardDetail.Eco;
                    ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                    ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;

                    dash.TodayDashboardDcs = ToObj;
                }
                if (dashboardDetail != null && flag == 2)
                {
                    DataContracts.External.MobileExecutiveDC.MTDDashboardDc MTDObj = new DataContracts.External.MobileExecutiveDC.MTDDashboardDc();
                    MTDObj.MTDBeatSales = list.Select(x => x.BeatSales).Sum() + dashboardDetail.BeatSales;
                    MTDObj.MTDBeatOrder = list.Select(x => x.BeatOrder).Sum() + dashboardDetail.BeatOrder;
                    MTDObj.MTDExtraSales = list.Select(x => x.ExtraSales).Sum() + dashboardDetail.ExtraSales;
                    MTDObj.MTDTotalSales = list.Select(x => x.TotalSales).Sum() + dashboardDetail.TotalSales;
                    MTDObj.MTDProductiveCall = list.Select(x => x.ProductiveCall).Sum() + dashboardDetail.ProductiveCall;

                    int SuccessPhoneOrder = 0;
                    if (MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any())
                    {
                        SuccessPhoneOrder = list.Select(x => x.PhoneOrder).Sum();
                        MTDObj.MTDVisitPlanned = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? (list.Select(x => x.VisitPlanned).Sum() + todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count()) : list.Select(x => x.VisitPlanned).Sum();
                        MTDObj.MTDTotalCall = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? (list.Select(x => x.TotalCall).Sum() + todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count()) : list.Select(x => x.TotalCall).Sum();
                        MTDObj.MTDOutletCoverage = Math.Round((Convert.ToDouble(MTDObj.MTDTotalCall) / MTDObj.MTDVisitPlanned) * 100, 2);
                    }
                    else
                    {
                        MTDObj.MTDVisitPlanned = 0;
                        MTDObj.MTDTotalCall = 0;
                        MTDObj.MTDOutletCoverage = 0;
                    }
                    if (MTDObj.MTDTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        MTDObj.MTDStrikeRate = Math.Round(Convert.ToDouble(MTDObj.MTDProductiveCall) / (MTDObj.MTDTotalCall + SuccessPhoneOrder) * 100, 2);
                    }
                    //var planCustomers = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ? MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => new { CustomerId=x.CustomerId }).Distinct().ToList() : new List<int>();
                    //var planCustomers = MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => new { CustomerId=x.CustomerId }).ToList();
                    List<int> PlanCustIds = new List<int>();
                    if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = todayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }

                    MTDObj.MTDExtraVisit = list.Select(x => x.ExtraVisit).Sum() + (ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0); //ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                    MTDObj.MTDExtraCall = list.Select(x => x.ExtraCall).Sum() + dashboardDetail.ExtraCall;
                    MTDObj.MTDExtraOrder = list.Select(x => x.ExtraOrder).Sum() + dashboardDetail.ExtraOrder;
                    MTDObj.MTDAvgOrderValue = dashboardDetail.AvgOrderValue;
                    MTDObj.MTDAvgLineItem = dashboardDetail.AvgLineItem;
                    MTDObj.MTDEco = dashboardDetail.Eco;
                    MTDObj.MTDPerfactOrder = list.Select(x => x.TodayPerfactOrder).Sum() + dashboardDetail.PerfactOrder;
                    MTDObj.MTDSupperOrder = list.Select(x => x.TodaySupperOrder).Sum() + dashboardDetail.SupperOrder;
                    dash.MTDDashboardDcs = MTDObj;
                }
                if (dashboardDetail != null && flag == 3)
                {
                    DataContracts.External.MobileExecutiveDC.YesterdayDashboardDc YesObj = new DataContracts.External.MobileExecutiveDC.YesterdayDashboardDc();
                    YesObj.YesterdayBeatSales = dashboardDetail.BeatSales;
                    YesObj.YesterdayBeatOrder = dashboardDetail.BeatOrder;
                    YesObj.YesterdayExtraSales = dashboardDetail.ExtraSales;
                    YesObj.YesterdayTotalSales = dashboardDetail.TotalSales;
                    YesObj.YesterdayProductiveCall = dashboardDetail.ProductiveCall;
                    int SuccessPhoneOrder = 0;
                    if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes.Count() > 0)
                    {
                        SuccessPhoneOrder = YesterdayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder == true).Count();

                        YesObj.YesterdayVisitPlanned = YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                        YesObj.YesterdayTotalCall = YesterdayBeat.PlannedRoutes.Where(y => y.IsVisited == true).Count();
                        YesObj.YesterdayOutletCoverage = Math.Round((Convert.ToDouble(YesObj.YesterdayTotalCall) / YesObj.YesterdayVisitPlanned) * 100, 2);
                    }
                    else
                    {
                        YesObj.YesterdayVisitPlanned = 0;
                        YesObj.YesterdayTotalCall = 0;
                        YesObj.YesterdayOutletCoverage = 0;
                    }
                    if (YesObj.YesterdayTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        YesObj.YesterdayStrikeRate = Math.Round(Convert.ToDouble(YesObj.YesterdayProductiveCall) / (YesObj.YesterdayTotalCall + SuccessPhoneOrder) * 100, 2);
                    }
                    //var planCustomers = YesterdayBeat != null && YesterdayBeat.PlannedRoutes.Any() ? YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    List<int> PlanCustIds = new List<int>();
                    if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = YesterdayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }

                    YesObj.YesterdayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0;
                    YesObj.YesterdayExtraCall = dashboardDetail.ExtraCall;
                    YesObj.YesterdayExtraOrder = dashboardDetail.ExtraOrder;
                    YesObj.YesterdayPerfactOrder = dashboardDetail.PerfactOrder;
                    YesObj.YesterdaySupperOrder = dashboardDetail.SupperOrder;
                    dash.YesterdayDashboardDcs = YesObj;
                }
                if (IsJobflag)
                {
                    ////------------------job----------------

                    mongoObj.WarehouseId = WarehouseId;
                    mongoObj.SalesPersonId = PeopleId;
                    mongoObj.ChannelMatserId = channeldata.ChannelMasterId;
                    mongoObj.ChannelName = channeldata.ChannelType;
                    mongoObj.StoreId = Convert.ToInt32(storeId);
                    mongoObj.BeatSales = dash.TodayDashboardDcs.TodayBeatSales;
                    mongoObj.VisitPlanned = dash.TodayDashboardDcs.TodayVisitPlanned;
                    mongoObj.TotalCall = dash.TodayDashboardDcs.TodayTotalCall;
                    mongoObj.ProductiveCall = dash.TodayDashboardDcs.TodayProductiveCall;
                    mongoObj.BeatOrder = dash.TodayDashboardDcs.TodayBeatOrder;
                    mongoObj.ExtraVisit = dash.TodayDashboardDcs.TodayExtraVisit;
                    mongoObj.ExtraCall = dash.TodayDashboardDcs.TodayExtraCall;
                    mongoObj.ExtraOrder = dash.TodayDashboardDcs.TodayExtraOrder;
                    mongoObj.ExtraSales = dash.TodayDashboardDcs.TodayExtraSales;
                    mongoObj.OutletCoverage = dash.TodayDashboardDcs.TodayOutletCoverage;
                    mongoObj.StrikeRate = dash.TodayDashboardDcs.TodayStrikeRate;
                    mongoObj.TotalSales = dash.TodayDashboardDcs.TodayTotalSales;
                    mongoObj.TodayTarget = todayBeat != null ? todayBeat.TodayTarget : 0;
                    mongoObj.TodayPerfactOrder = dash.TodayDashboardDcs.TodayPerfactOrder;
                    mongoObj.TodaySupperOrder = dash.TodayDashboardDcs.TodaySupperOrder;
                    mongoObj.PhoneOrder = dash.TodayDashboardDcs.PhoneOrder;
                    mongoObj.ECO = dash.TodayDashboardDcs.Eco;
                    mongoObj.AvgLineItem = dash.TodayDashboardDcs.AvgLineItem;
                    mongoObj.AvgOrderValue = dash.TodayDashboardDcs.AvgOrderValue;
                    mongoObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;
                    var res = InsertDashboardJobinMongo(mongoObj, Context);
                    ////------------------job----------------
                }

            }
            return dash;
        }

        public bool InsertDashboardJobinMongo(SalesDashboardTodayMTDData obj, AuthContext authContext)
        {
            bool flag = false;

            DateTime now = DateTime.Now;
            //var startDate = new DateTime(now.Year, now.Month, 1);
            //var endDate = startDate.AddMonths(1).AddDays(-1);
            try
            {
                var SalesPerson = authContext.Peoples.FirstOrDefault(x => x.PeopleID == obj.SalesPersonId && x.Active == true && x.Deleted == false);
                if (SalesPerson != null)
                {
                    MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();

                    SalesDashboardTodayMTDData data = new SalesDashboardTodayMTDData
                    {
                        WarehouseId = obj.WarehouseId,
                        SalesPersonId = obj.SalesPersonId,
                        StoreId = obj.StoreId,
                        BeatSales = obj.BeatSales,
                        VisitPlanned = obj.VisitPlanned,
                        TotalCall = obj.TotalCall,
                        ProductiveCall = obj.ProductiveCall,
                        BeatOrder = obj.BeatOrder,
                        ExtraVisit = obj.ExtraVisit,
                        ExtraCall = obj.ExtraCall,
                        ExtraOrder = obj.ExtraOrder,
                        ExtraSales = obj.ExtraSales,
                        OutletCoverage = obj.OutletCoverage,
                        StrikeRate = obj.StrikeRate,
                        TodayTarget = obj.TodayTarget,
                        TodayPerfactOrder = obj.TodayPerfactOrder,
                        TodaySupperOrder = obj.TodaySupperOrder,
                        PhoneOrder = obj.PhoneOrder,
                        AvgLineItem = obj.AvgLineItem,
                        AvgOrderValue = obj.AvgOrderValue,
                        ECO = obj.ECO,
                        TotalSales = obj.TotalSales,
                        CheckIn = obj.CheckIn,
                        CheckOut = obj.CheckOut,
                        CreatedDate = DateTime.Now.AddDays(-1),
                        ModifiedDate = DateTime.Now,
                        IsActive = true,
                        IsDelete = false
                    };

                    var param1 = new SqlParameter("PeopleID", obj.SalesPersonId);

                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[SpPerformanceTarget]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);

                    var reader = cmd.ExecuteReader();
                    var dd = ((IObjectContextAdapter)authContext).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.PerformanceTargetDc>(reader).ToList();


                    var WarehouseName = authContext.Warehouses.FirstOrDefault(x => x.WarehouseId == obj.WarehouseId && x.active == true && x.Deleted == false).WarehouseName;
                    long? storeId = authContext.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.SalesPersonId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                    var ClusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.SalesPersonId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                    var ClusterNames = authContext.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                    data.ClusterIds = string.Join(",", ClusterIds);
                    data.ClusterName = string.Join(",", ClusterNames);
                    data.StoreId = Convert.ToInt32(storeId);
                    data.SalesPerson = SalesPerson.DisplayName;
                    data.WarehouseName = WarehouseName;
                    data.MtdMonthlyTarget = dd.Count > 0 ? dd.FirstOrDefault(x => x.Name == "Sales").NumPer : 0;

                    flag = mongoDbHelper.Insert(data);
                }
            }
            catch (Exception ex)
            {
                var res = ex.Message;
            }
            return flag;
        }

        [Route("NotApprovedNotification")]
        [HttpGet]
        public async Task<List<PeopleSentNotificationDc>> NotApprovedNotification(int PeopleId)
        {
            int ApproveTimeLeft = Convert.ToInt32(ConfigurationManager.AppSettings["ApproveNotifyTimeLeftInMinute"]);

            DateTime dt1 = DateTime.Now;
            using (var context = new AuthContext())
            {
                //var param = new SqlParameter("PeopleId", PeopleId);
                //var NotApprovedList = await context.Database.SqlQuery<PeopleSentNotificationDc>("exec Operation.NotApprovedNotification @PeopleId", param).ToListAsync();
                SalesAppManager manager = new SalesAppManager();
                var NotApprovedList = manager.NotApprovedNotificationManager(PeopleId);
                NotApprovedList.ForEach(x =>
                {
                    x.TimeLeft = x.TimeLeft.AddMinutes(ApproveTimeLeft); // from Create date
                    if (!string.IsNullOrEmpty(x.Shopimage) && !x.Shopimage.Contains("http"))
                    {
                        x.Shopimage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , x.Shopimage);
                    }
                });
                //var NotApprovedLists = Mapper.Map(NotApprovedList).ToANew<List<PeopleSentNotificationDC>>();
                return NotApprovedList;
            }
        }

        [Route("GetFocusBrand")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<FocusBrandDCs>> GetFocusBrand(int warehouseid, int PeopleId)
        {
            List<FocusBrandDCs> list = new List<FocusBrandDCs>();
            // List<int> CustomerList = new List<int>();

            using (var authContext = new AuthContext())
            {
                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();


                var param1 = new SqlParameter("warehouseid", warehouseid);
                var param2 = new SqlParameter("peopleid", PeopleId);

                var cmd = authContext.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[SpFocusBrand]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext).ObjectContext.Translate<FocusBrandDCs>(reader).ToList();
            }

            return list;
        }

        [Route("GetTopHighMarginSkuItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<GetTopHighMarginSkuItemListDCs> GetTopHighMarginSkuItemList(int PeopleId, int WarehouseId)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@peopleid", PeopleId);
                var param2 = new SqlParameter("@warehouseid", WarehouseId);
                var GetTopHighMarginSkuItemListData = context.Database.SqlQuery<GetTopHighMarginSkuItemListDCs>("exec GetTopHighMarginSkuItemList  @peopleid,@warehouseid", param1, param2).ToList();

                return GetTopHighMarginSkuItemListData;
            }
        }

        [HttpGet]
        [Route("GetMyBeat")]
        [AllowAnonymous]
        public async Task<List<DataContracts.External.MobileExecutiveDC.MyBeatDC>> GetMyBeat(int peopleId, int WarehouseId, int skip, int take, double lat = 0, double lg = 0)
        {
            int Skiplist = (skip - 1) * take;

            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<int> CustomerList = new List<int>();
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            //var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var todayBeat = (await mongoDbHelper.SelectAsync(x => x.PeopleId == peopleId && x.AssignmentDate == today)).FirstOrDefault();

            var PlannedRoute = todayBeat != null ? todayBeat.PlannedRoutes.ToList() : null;
            var ActualRoutes = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

            bool BeatEdit = false;
            if (todayBeat != null && PlannedRoute != null && PlannedRoute.Any())
            {
                using (var authContext = new AuthContext())
                {
                    var query = string.Format("exec IsSalesAppLead {0}", peopleId);
                    var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                    bool Isdigitalexecutive = isSalesLead > 0;

                    #region Beat edit configuration dynamic
                    var currentday = DateTime.Now.Day;
                    List<long> storeIds = new List<long>();
                    if (Isdigitalexecutive)
                        storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                    else
                        storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                    var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                    if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                    {
                        if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                        {
                            BeatEdit = true;
                        }
                        else
                        {
                            BeatEdit = false;
                        }
                    }
                    else
                    {
                        BeatEdit = true;
                    }
                    #endregion

                    //var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true).FirstOrDefault();
                    //if (Beat != null)
                    //{
                    //    BeatEdit = Beat.IsBeatEdit;
                    //}
                    //else
                    //{
                    //    BeatEdit = false;
                    //}
                    if (authContext.Database.Connection.State != ConnectionState.Open)
                        authContext.Database.Connection.Open();

                    var CustList = PlannedRoute.Select(y => y.CustomerId).Distinct().ToList();

                    DataTable IdDt = new DataTable();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    foreach (var id in CustList)
                    {
                        var dr = IdDt.NewRow();
                        dr["IntValue"] = id;
                        IdDt.Rows.Add(dr);
                    }

                    var param1 = new SqlParameter("CustomerIds", IdDt);
                    var param2 = new SqlParameter("Warehouseid", WarehouseId);
                    var param4 = new SqlParameter("PeopleId", peopleId);
                    var param5 = new SqlParameter("ExecutiveLat", lat);
                    var param6 = new SqlParameter("ExecutiveLg", lg);
                    var param7 = new SqlParameter("skip", Skiplist);
                    var param8 = new SqlParameter("take", take);

                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[SpGetMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandTimeout = 900;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    var reader = cmd.ExecuteReader();
                    var beatCustomerOrders = ((IObjectContextAdapter)authContext)
                    .ObjectContext.Translate<BeatCustomerOrderDCs>(reader).ToList();

                    DataTable IdDt1 = new DataTable();
                    IdDt1 = new DataTable();
                    IdDt1.Columns.Add("IntValue");
                    foreach (var id in CustList)
                    {
                        var dr1 = IdDt1.NewRow();
                        dr1["IntValue"] = id;
                        IdDt1.Rows.Add(dr1);
                    }
                    var CustIdParam = new SqlParameter("CustomerIds", IdDt1);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    var CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                    var SkCodeList = PlannedRoute.Select(y => y.Skcode).Distinct().ToList();
                    var TagData = CRMCustomerTag(SkCodeList);

                    foreach (var item in beatCustomerOrders)
                    {
                        var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                        DataContracts.External.MobileExecutiveDC.MyBeatDC beat = new DataContracts.External.MobileExecutiveDC.MyBeatDC();
                        beat.CustomerId = item.CustomerId;
                        beat.LastOrderDate = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).LastOrderDate : null;
                        beat.LastOrderDaysAgo = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).LastOrderDaysAgo : 0;
                        beat.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                        beat.CustomerVerify = item.CustomerVerify;
                        beat.ShippingAddress = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).ShippingAddress : null;
                        beat.lat = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).lat : 0; //todayBeat.PlannedRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).lat;
                        beat.lg = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).lg : 0;
                        beat.Mobile = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Mobile;
                        beat.Skcode = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Skcode;
                        beat.ShopName = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).ShopName;
                        beat.Day = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Day;
                        beat.CustomerName = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Name;
                        beat.WarehouseId = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).WarehouseId;
                        beat.IsKPP = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsKPP;
                        beat.Active = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Active;
                        beat.IsVisited = PlannedRoute.Where(x => x.CustomerId == item.CustomerId).Select(y => y.IsVisited).FirstOrDefault();
                        beat.ObjectId = todayBeat.Id;
                        beat.IsBeatEdit = BeatEdit;
                        beat.Distance = item.Distance;
                        beat.IsCustomerUpdate = item.IsCustomerUpdate;
                        beat.CheckIn = item.CheckIn;
                        beat.IsVerifyRequestPending = item.IsVerifyRequestPending;
                        beat.IsCustomerProfileEdit = item.IsCustomerProfileEdit;
                        beat.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                        beat.IsBeat = true;
                        beat.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == beat.Skcode)?.CRMTags;
                        beat.CustomerType = item.CustomerType;
                        list.Add(beat);
                    }

                }
            }
            return list.OrderBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
        }


        public async Task<List<CRMCustomerWithTag>> CRMCustomerTag(List<string> SkCoddeList)
        {
            //List<CRMCustomerWithTag> list = new List<CRMCustomerWithTag>();
            string CrmPlatformId = CRMPlatformConstants.SalesApp;
            CRMManager manager = new CRMManager();
            var list = await manager.GetCRMCustomerWithTag(SkCoddeList, CrmPlatformId);
            var data = Mapper.Map(list).ToANew<List<CRMCustomerWithTag>>();
            return data;
        }

        [Route("GetSalesGroup")]
        [HttpGet]
        [AllowAnonymous]
        public List<StoreDCs> GetSalesGroup(int peopleid)
        {
            using (var context = new AuthContext())
            {
                context.Database.CommandTimeout = 120;
                List<GroupList> list = new List<GroupList>();
                var Stores = context.StoreDB.Where(x => x.IsActive && (x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => new { x.Id, x.Name }).ToList();
                var clusterstores = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleid && x.IsDeleted == false && x.IsActive == true);
                List<long> storeIds = clusterstores.Any() ? clusterstores.Select(x => x.StoreId).ToList() : new List<long>();
                List<int> clusterIds = clusterstores.Any() ? clusterstores.Select(x => x.ClusterId).ToList() : new List<int>();
                var clusterCustomerIds = clusterstores.Any() ? context.Customers.Where(x => x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value)).Select(x => x.CustomerId).ToList() : new List<int>();
                var grouplist = (from u in context.SalesGroupDb
                                 where u.CreatedBy == peopleid && u.IsActive == true && u.IsDeleted == false && u.Type == "Yes"
                                 select new { u.GroupName, u.Id, u.StoreId })
                      .Union(from u in context.SalesGroupDb
                             where (storeIds.Contains(u.StoreId) || u.StoreId == 0) && u.IsActive == true && u.IsDeleted == false && u.Type == "Yes"
                             select new { u.GroupName, u.Id, u.StoreId }).ToList();

                foreach (var item in grouplist)
                {
                    GroupList addlist = new GroupList();
                    //var List = context.SalesGroupCustomerDb.Where(x => clusterCustomerIds.Contains(x.CustomerID) && x.GroupId == item.Id && x.IsActive == true && x.IsDeleted == false).ToList();

                    var param1 = new SqlParameter("GroupId", item.Id);
                    var param2 = new SqlParameter("ExecutiveId", peopleid);
                    var List = context.Database.SqlQuery<long>("exec CheckCustomerInSalesGroup  @GroupId, @ExecutiveId", param1, param2).ToList();

                    if (List != null && List.Any())
                    {
                        addlist.GroupName = item.GroupName;
                        addlist.Id = item.Id;
                        addlist.StoreId = item.StoreId;
                        list.Add(addlist);
                    }
                }

                var SalesGroupDatalist = list.GroupBy(x => x.StoreId).Select(x =>
                 new StoreDCs
                 {
                     StoreId = (int)x.Key,
                     GroupDcs = x.Select(y => new GroupDCs
                     {
                         GroupName = y.GroupName,
                         GroupId = y.Id
                     }).ToList()
                 }
               ).ToList();
                foreach (var G in SalesGroupDatalist)
                {
                    if (G.StoreId == 0)
                    {
                        G.StoreName = "SK GROUP";
                    }
                    else if (G.StoreId == -1)
                    {
                        G.StoreName = "MY GROUP";
                    }
                    else
                    {
                        G.StoreName = Stores.FirstOrDefault(a => a.Id == G.StoreId)?.Name;
                    }
                }
                return SalesGroupDatalist;
            }
        }

        [HttpPost]
        [Route("GetMyBeatCustomerDetail")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetMyBeatCustomerDetail(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            int Skiplist = (obj.skip - 1) * obj.take;
            BeatsManager manager = new BeatsManager();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> Beatlist = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<int> CustomerList = new List<int>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                var storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion

                //var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true).FirstOrDefault();
                //if (Beat != null)
                //{
                //    BeatEdit = Beat.IsBeatEdit;
                //}
                //else
                //{
                //    BeatEdit = false;
                //}
                List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();
                List<AllBeatCustomerDc> NotVisitCustList = new List<AllBeatCustomerDc>();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today);
                var ActualRoutes = todayBeats.Count > 0 && todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? todayBeats[0].ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

                res.VisitCount = 0;
                res.NonVisitCount = 0;

                DataTable AllBeatCustomerIdslist = new DataTable();

                if (obj.Day == "All")
                {
                    var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                    var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
                    var MonthBeatCustomerList = MonthBeat.SelectMany(x => x.PlannedRoutes).ToList();

                    if (MonthBeatCustomerList != null && MonthBeatCustomerList.Count > 0 && MonthBeatCustomerList.Any())
                    {
                        var customerids = MonthBeatCustomerList.Select(x => x.CustomerId).Distinct().ToList();
                        NotVisitCustList = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).ToList();
                        res.VisitCount = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == true);
                        res.NonVisitCount = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == false);
                    }
                }
                else
                {
                    if (todayBeats != null && todayBeats.Count > 0 && todayBeats[0].PlannedRoutes.Count > 0 && todayBeats[0].PlannedRoutes.Any())
                    {
                        if (today.ToString("dddd").ToUpper() == obj.Day.ToUpper() && obj.BeatEdit == false)
                        {
                            var customerids = todayBeats[0].PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                            NotVisitCustList = todayBeats[0].PlannedRoutes.Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).Distinct().ToList();
                        }
                        else
                        {
                            var customerids = todayBeats[0].PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                            NotVisitCustList = todayBeats[0].PlannedRoutes.Where(y => customerids.Contains(y.CustomerId)).Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).ToList();
                            res.VisitCount = todayBeats[0].PlannedRoutes.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == true);
                            res.NonVisitCount = todayBeats[0].PlannedRoutes.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == false);
                        }
                    }
                }

                AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("CustomerId");
                AllBeatCustomerIdslist.Columns.Add("IsVisited");
                foreach (var item in NotVisitCustList.Distinct())
                {
                    var dr = AllBeatCustomerIdslist.NewRow();
                    dr["CustomerId"] = item.CustomerId;
                    dr["IsVisited"] = item.IsVisited;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }

                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("GroupId", obj.GroupId);
                var param5 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param6 = new SqlParameter("OrderDays", obj.OrderDays);
                var param7 = new SqlParameter("skip", Skiplist);
                var param8 = new SqlParameter("take", obj.take);
                var param9 = new SqlParameter("KeyValue", obj.KeyValue);
                var param10 = new SqlParameter("IsBeatEdit", obj.BeatEdit);
                var param11 = new SqlParameter("ExecutiveLat", obj.lat);
                var param12 = new SqlParameter("ExecutiveLg", obj.lg);
                var param13 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                var param14 = new SqlParameter("IsPagination", obj.IsPagination);

                //var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandType = System.Data.CommandType.StoredProcedure;

                if (today.ToString("dddd").ToUpper() == obj.Day.ToUpper() && obj.BeatEdit == false)
                {
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetTodayExecutiveBeatWithFilter]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    //cmd.Parameters.Add(param7);
                    //cmd.Parameters.Add(param8);
                    //cmd.Parameters.Add(param9);
                    //cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    cmd.Parameters.Add(param13);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                        res.VisitCount = Convert.ToInt32(reader["Visited"]);
                        res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                        res.Reschedule = Convert.ToInt32(reader["Reschedule"]);
                    }
                }
                else
                {
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetExecutiveBeatWithFilter]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    cmd.Parameters.Add(param13);
                    cmd.Parameters.Add(param14);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                        res.VisitCount = Convert.ToInt32(reader["Visited"]);
                        res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                    }
                }

                List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                var CustomerIdslist = new System.Data.DataTable();
                var CustIds = new System.Data.DataTable();
                CustomerIdslist.Columns.Add("IntValue");
                CustIds.Columns.Add("IntValue");
                foreach (var item in CustomerIds)
                {
                    var dr = CustomerIdslist.NewRow();
                    dr["IntValue"] = item;
                    CustomerIdslist.Rows.Add(dr);

                    var dr1 = CustIds.NewRow();
                    dr1["IntValue"] = item;
                    CustIds.Rows.Add(dr1);
                }
                var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                CIds.SqlDbType = System.Data.SqlDbType.Structured;
                CIds.TypeName = "dbo.IntValues";

                var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                CustIdParam.TypeName = "dbo.IntValues";
                var CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                var CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = x.FirstOrDefault().Day,
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    IsBeat = (today.ToString("dddd").ToUpper() == x.FirstOrDefault().Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                    //var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023

                    item.SalesGroupDcs = (CustSalesGrouplist != null && CustSalesGrouplist.Any(x => x.CustomerId == item.CustomerId)) ? CustSalesGrouplist.Where(x => x.CustomerId == item.CustomerId).ToList() : null;
                    item.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                    item.Day = item.Day != null ? item.Day.ToUpper() : null;
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;

                    if (obj.Day == "All")
                    {
                        if (NotVisitCustList.Count > 0)
                        {
                            item.IsVisited = NotVisitCustList.FirstOrDefault(x => x.CustomerId == item.CustomerId) != null ? NotVisitCustList.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsVisited : false;
                        }
                    }
                    else
                    {
                        if (todayBeats.Count > 0 && todayBeats[0].PlannedRoutes != null && todayBeats[0].PlannedRoutes.Any())
                        {
                            item.IsVisited = todayBeats[0].PlannedRoutes.Any(x => x.CustomerId == item.CustomerId) ? todayBeats[0].PlannedRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsVisited : false;
                        }
                    }
                }
                res.MyBeatDCs = obj.Day == "Search" ? Beatlist.OrderBy(y => y.Day).ToList() : Beatlist.OrderBy(y => y.Day).ThenBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
                res.VisitCount = Beatlist.Count(x => x.IsVisited == true);
                res.NonVisitCount = Beatlist.Count(x => x.IsVisited == false);
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        [HttpPost]
        [Route("GetVisitedBeat")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetVisitedBeat(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc> VisitCustList = new List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> Beatlist = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                #region //TODO:SalesAppMarch2023

                var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                bool Isdigitalexecutive = isSalesLead > 0;


                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                if (Isdigitalexecutive)
                    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion
                #endregion

                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = new ExecutiveBeats();
                if (obj.Day.ToUpper() == "ALL" || obj.Day.ToUpper() == today.DayOfWeek.ToString().ToUpper())
                    todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var PlannedRoute = todayBeat.PlannedRoutes.ToList();
                var ActualRoutes = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";

                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    return res;
                }
                List<int> searchCustomerIds = new List<int>();

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                        //var clusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsActive && (!x.IsDeleted.HasValue || x.IsDeleted.Value == false)).Select(x => x.ClusterId).ToList();
                        //searchCustomerIds.AddRange(authContext.Customers.Where(x => !allcustomers.Contains(x.CustomerId) && x.Active && x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false).Select(x => x.CustomerId).ToList());
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {

                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                }

                var visitedCustomerIds = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                searchCustomerIds = searchCustomerIds.Where(x => visitedCustomerIds.Contains(x)).ToList();

                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("IntValue");
                foreach (var item in searchCustomerIds.Distinct().ToList())
                {
                    DataRow dr = AllBeatCustomerIdslist.NewRow();
                    dr[0] = item;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }
                List<DataContracts.External.MobileExecutiveDC.SalesGroupDc> CustSalesGrouplist = new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>();
                List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC> CustomerRemarkList = new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>();
                DataTable orderdays = new DataTable();
                orderdays.Columns.Add("IntValue");
                foreach (var item in obj.OrderDays)
                {
                    DataRow dr = orderdays.NewRow();
                    dr[0] = item;
                    orderdays.Rows.Add(dr);
                }


                if (searchCustomerIds != null && searchCustomerIds.Any())
                {
                    var param1 = new SqlParameter("peopleid", obj.PeopleId);
                    var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                    var param3 = new SqlParameter("Day", obj.Day);
                    var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                    var param5 = new SqlParameter("GroupId", obj.GroupId);
                    var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                    //var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                    var param7 = new SqlParameter("OrderDays", orderdays);
                    param7.SqlDbType = SqlDbType.Structured;
                    param7.TypeName = "dbo.IntValues";
                    var param8 = new SqlParameter("skip", obj.skip);
                    var param9 = new SqlParameter("take", obj.take);
                    var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                    var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                    var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                    param12.SqlDbType = SqlDbType.Structured;
                    param12.TypeName = "dbo.IntValues";


                    var cmd = authContext.Database.Connection.CreateCommand();
                    //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandText = "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.VisitCount = Convert.ToInt32(reader["Totalcount"]);
                    }

                    List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();
                }
                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>(),
                    CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>(),
                    IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [HttpPost]
        [Route("GetNotVisitedBeat")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetNotVisitedBeat(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc> VisitCustList = new List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> Beatlist = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + obj.PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                //var role = authContext.Database.SqlQuery<string>(query).ToList();
                //bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));


                #region Beat edit configuration dynamic


                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = new ExecutiveBeats();
                if (obj.Day.ToUpper() == "ALL" || obj.Day.ToUpper() == today.DayOfWeek.ToString().ToUpper())
                    todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var ActualRoutes = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";
                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    return res;
                }

                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "SEARCH")
                {
                    res.MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    return res;
                }

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {

                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                }

                var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => !x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                //var visitedCustomerIds = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                searchCustomerIds = searchCustomerIds.Where(x => visitedCustids.Contains(x)).ToList();
                List<DataContracts.External.MobileExecutiveDC.SalesGroupDc> CustSalesGrouplist = new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>();
                List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC> CustomerRemarkList = new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>();
                if (searchCustomerIds != null && searchCustomerIds.Any())
                {
                    DataTable AllBeatCustomerIdslist = new DataTable();
                    AllBeatCustomerIdslist.Columns.Add("IntValue");
                    foreach (var item in searchCustomerIds.Distinct().ToList())
                    {
                        DataRow dr = AllBeatCustomerIdslist.NewRow();
                        dr[0] = item;
                        AllBeatCustomerIdslist.Rows.Add(dr);
                    }
                    DataTable orderdays = new DataTable();
                    orderdays.Columns.Add("IntValue");
                    foreach (var item in obj.OrderDays)
                    {
                        DataRow dr = orderdays.NewRow();
                        dr[0] = item;
                        orderdays.Rows.Add(dr);
                    }

                    var param1 = new SqlParameter("peopleid", obj.PeopleId);
                    var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                    var param3 = new SqlParameter("Day", obj.Day);
                    var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                    var param5 = new SqlParameter("GroupId", obj.GroupId);
                    var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                    //var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                    var param7 = new SqlParameter("OrderDays", orderdays);
                    param7.SqlDbType = SqlDbType.Structured;
                    param7.TypeName = "dbo.IntValues";
                    var param8 = new SqlParameter("skip", obj.skip);
                    var param9 = new SqlParameter("take", obj.take);
                    var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                    var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                    var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                    param12.SqlDbType = SqlDbType.Structured;
                    param12.TypeName = "dbo.IntValues";


                    var cmd = authContext.Database.Connection.CreateCommand();
                    //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandText = "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.NonVisitCount = Convert.ToInt32(reader["Totalcount"]);
                    }

                    List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();
                }
                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>(),
                    CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>(),
                    IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [HttpPost]
        [Route("GetBeatEditList")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetBeatEditList(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc> VisitCustList = new List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> Beatlist = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                bool Isdigitalexecutive = isSalesLead > 0;

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                if (Isdigitalexecutive)
                    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion



                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                var dayIndex = new List<string> { "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "NO BEAT" };

                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";
                VisitCustList = authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).OrderBy(e => dayIndex.IndexOf(e.Day.ToUpper())).ToList();
                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "ALL")
                {
                    searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                }
                else if (obj.Day.ToUpper() == "NO BEAT")
                {
                    var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                    searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    //var clusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsActive && (!x.IsDeleted.HasValue || x.IsDeleted.Value == false)).Select(x => x.ClusterId).ToList();
                    //searchCustomerIds.AddRange(authContext.Customers.Where(x => !allcustomers.Contains(x.CustomerId) && x.Active && x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false).Select(x => x.CustomerId).ToList());
                }
                else if (obj.Day.ToUpper() == "SEARCH")
                {
                    searchCustomerIds = VisitCustList.Select(x => x.CustomerId).ToList();
                }
                else
                {
                    searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                }



                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("IntValue");
                foreach (var item in searchCustomerIds.Distinct().ToList())
                {
                    DataRow dr = AllBeatCustomerIdslist.NewRow();
                    dr[0] = item;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }


                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                var param5 = new SqlParameter("GroupId", obj.GroupId);
                var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                var param8 = new SqlParameter("skip", obj.skip);
                var param9 = new SqlParameter("take", obj.take);
                var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                param12.SqlDbType = SqlDbType.Structured;
                param12.TypeName = "dbo.IntValues";


                var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatEditDigital" : "[dbo].[GetExecutiveMyBeatEdit]";
                cmd.CommandText = "[dbo].[GetExecutiveMyBeatEdit]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param7);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param9);
                cmd.Parameters.Add(param10);
                cmd.Parameters.Add(param11);
                cmd.Parameters.Add(param12);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext)
                .ObjectContext
                .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    res.totalRecord = Convert.ToInt32(reader["Totalcount"]);
                }

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    CustomerType = x.FirstOrDefault().CustomerType,
                    Type = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Type : "",
                    SubType = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).SubType : ""
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);
                Beatlist.ForEach(x =>
                {
                    x.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == x.Skcode)?.CRMTags;
                });
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [Route("GetGroupMetrics")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<SalesGroupMatrixDC> GetGroupMetrics(GroupMetricsDTODC obj)
        {
            using (var myContext = new AuthContext())
            {
                SalesAppManager salesAppManager = new SalesAppManager();
                ElasticSqlHelper<SalesGroupMatrixDCs> elasticSqlGroupMetricsHelper = new ElasticSqlHelper<SalesGroupMatrixDCs>();

                DateTime TodayDate = DateTime.Today;
                DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");

                var data2 = (await elasticSqlGroupMetricsHelper.GetListAsync($"select dispatchqty,price,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}' and custid='{obj.CustomerId}' and whid = '{obj.warehouseid}' ")).ToList();

                var data = salesAppManager.SalesGroupMatrix(obj.CustomerId, obj.PeopleId, obj.flag, obj.warehouseid);

                BeatCustomersCRMDC Customer = new BeatCustomersCRMDC();
                bool IsLevelAdded = false;
                var param1 = new SqlParameter("@customerid", obj.CustomerId);
                var OrdersList = myContext.Database.SqlQuery<CRMLevelBeatCustomerDC>("exec CRMLevelBeatCustomer @customerid", param1).FirstOrDefault();
                Customer = Mapper.Map(OrdersList).ToANew<BeatCustomersCRMDC>();

                if (Customer != null)
                {
                    if (Customer.OrderCount >= 12 && Customer.Volume >= 75000 && Customer.BrandCount >= 40 && Customer.KKvolume >= 15000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 60)
                    {
                        Customer.Level = 5;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 8 && Customer.Volume >= 30000 && Customer.BrandCount >= 20 && Customer.KKvolume >= 8000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 30)
                    {
                        Customer.Level = 4;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 5 && Customer.Volume >= 20000 && Customer.BrandCount >= 10 && Customer.KKvolume >= 2000)
                    {
                        Customer.Level = 3;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 3 && Customer.Volume >= 10000 && Customer.BrandCount >= 5)
                    {
                        Customer.Level = 2;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount > 0)
                    {
                        Customer.Level = 1;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount == 0)
                    {
                        Customer.Level = 0;
                        IsLevelAdded = true;
                    }
                    else
                    {
                        if (!IsLevelAdded)
                        {
                            Customer.Level = -0;
                        }
                    }
                }
                data.Level = Customer.Level;
                return data;
            }
        }

        [Route("GetMySalesGroup")]
        [HttpGet]
        [AllowAnonymous]
        public List<SalesMyGroupDCs> GetMySalesGroup(int peopleid)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@peopleid", peopleid);
                var GetMySalesGroupData = context.Database.SqlQuery<SalesMyGroupDCs>("exec SpGetMySalesGroup @peopleid", param1).ToList();
                return GetMySalesGroupData;
            }
        }

        [Route("AddGroup")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse AddSalesGroup(SalesGroupFilterDC SaleGroup)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            Model.SalesApp.SalesGroup k = new Model.SalesApp.SalesGroup();
            SalesGroupCustomer obj = new SalesGroupCustomer();
            using (AuthContext context = new AuthContext())
            {

                if (SaleGroup.IsNewGroup == 0)
                {
                    if (SaleGroup.GroupName.Trim() == null && SaleGroup.GroupName.Trim() == "")
                    {
                        res.Message = "GroupName Cannot be null";
                        res.Status = false;
                        return res;
                    }
                    var checkduplicateGroup = context.SalesGroupDb.FirstOrDefault(x => x.StoreId == 0 && x.GroupName == SaleGroup.GroupName.Trim() && x.IsActive == true && x.IsDeleted == false);
                    if (checkduplicateGroup != null)
                    {
                        res.Message = "Group already exist";
                        res.Status = false;
                        return res;
                    }
                    var checkPeopleGroup = context.SalesGroupDb.FirstOrDefault(x => x.StoreId == -1 && x.CreatedBy == SaleGroup.PeopleId && x.GroupName == SaleGroup.GroupName.Trim() && x.IsActive == true && x.IsDeleted == false);
                    if (checkPeopleGroup != null)
                    {
                        res.Message = "Group already exist";
                        res.Status = false;
                        return res;
                    }

                    k.GroupName = SaleGroup.GroupName;
                    k.StoreId = -1; // SaleGroup.storeid;//-1 My Group 0 for SK Group
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.CreatedDate = DateTime.Now;
                    k.CreatedBy = SaleGroup.PeopleId;
                    k.ModifiedDate = DateTime.Now;
                    k.ModifiedBy = SaleGroup.PeopleId;
                    k.Type = "Yes";
                    context.SalesGroupDb.Add(k);

                    if (context.Commit() > 0)
                    {

                        obj.CustomerID = SaleGroup.customerid;
                        obj.GroupId = Convert.ToInt32(k.Id);
                        obj.IsActive = true;
                        obj.IsDeleted = false;
                        obj.CreatedDate = DateTime.Now;
                        obj.CreatedBy = SaleGroup.PeopleId;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = SaleGroup.PeopleId;
                        context.SalesGroupCustomerDb.Add(obj);
                        context.Commit();

                        res.Message = "Successfully Created";
                        res.Status = true;
                        res.Data = k.Id;
                    }
                }
                else
                {
                    var checkCustomerInGrp = context.SalesGroupCustomerDb.FirstOrDefault(x => x.CustomerID == SaleGroup.customerid && x.GroupId == SaleGroup.GroupId && x.IsActive == true && x.IsDeleted == false);
                    if (checkCustomerInGrp != null)
                    {
                        res.Message = "Customer already exist";
                        res.Status = false;
                        return res;
                    }

                    obj.CustomerID = SaleGroup.customerid;
                    obj.GroupId = SaleGroup.GroupId;
                    obj.IsActive = true;
                    obj.IsDeleted = false;
                    obj.CreatedDate = DateTime.Now;
                    obj.CreatedBy = SaleGroup.PeopleId;
                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = SaleGroup.PeopleId;
                    context.SalesGroupCustomerDb.Add(obj);
                    context.Commit();

                    res.Message = "Successfully Added";
                    res.Status = true;
                }
                return res;
            }

        }


        [Route("RemoveCustomerFromGroup")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse RemoveCustomerFromGroup(GroupCustRemoveDC obj)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();

            SalesGroupCustomer k = new SalesGroupCustomer();
            using (AuthContext context = new AuthContext())
            {
                if (obj != null)
                {
                    var data = context.SalesGroupCustomerDb.FirstOrDefault(x => x.CustomerID == obj.CustomerID && x.GroupId == obj.GroupId && x.CreatedBy == obj.PeopleId && x.IsActive == true && x.IsDeleted == false);
                    if (data != null)
                    {
                        context.SalesGroupCustomerDb.Remove(data);
                        if (context.Commit() > 0)
                        {
                            res.Message = "Successfully Removed";
                            res.Status = true;
                        };
                    }
                }
            }
            return res;
        }

        [Route("BulkBeatEdit")]
        [HttpPost]
        public bool BulkBeatEdit(List<BeatEditDCs> obj)
        {
            bool result = false;
            //DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsBeatEdit k = new CustomerExecutiveMappingsBeatEdit();
                if (obj != null)
                {
                    var executiveid = obj.FirstOrDefault().ExecutiveId;
                    var query = string.Format("exec IsSalesAppLead {0}", executiveid);
                    var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                    List<long> storeIds = new List<long>();
                    if (isSalesLead == null || isSalesLead == 0)
                    {
                        long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == executiveid && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                        if (!storeId.HasValue)
                        {
                            return false;
                        }
                        storeIds.Add(storeId.Value);
                    }
                    else
                    {
                        storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList();
                    }
                    var Customerids = obj.Select(x => x.CustomerID).ToList();
                    var ExecutiveBeatEdits = context.CustomerExecutiveMappingsBeatEditDb.Where(x => Customerids.Contains(x.CustomerId) && x.ExecutiveId == executiveid && storeIds.Contains(x.StoreId)).ToList();
                    foreach (var item in obj)
                    {
                        DayOfWeek Day = readDayOfWeek(item.Day);
                        var BeatCheck = ExecutiveBeatEdits.Where(x => x.CustomerId == item.CustomerID).FirstOrDefault();
                        if (BeatCheck == null)
                        {
                            k = new CustomerExecutiveMappingsBeatEdit();
                            k.CustomerId = item.CustomerID;
                            k.ExecutiveId = item.ExecutiveId;
                            k.SkipDays = item.Type.ToLower() == "monthly" ? 28 : 0;
                            k.SkipWeeks = 0;
                            k.EvenOrOddWeek = item.Type.ToLower() == "fortnightly" ? item.SubType : "";
                            switch (item.Type.ToLower() == "monthly" ? item.SubType.ToLower() : "")
                            {
                                case "week1": k.MonthWeek = 1; break;
                                case "week2": k.MonthWeek = 2; break;
                                case "week3": k.MonthWeek = 3; break;
                                case "week4": k.MonthWeek = 4; break;
                                default: k.MonthWeek = 0; break;
                            };
                            if (k.SkipDays == 28)
                            {
                                k.StartDate = CalculateDate(Day, DateTime.Now.AddDays((k.MonthWeek > 1 ? k.MonthWeek - 1 : 0) * 7));
                            }
                            else if (!string.IsNullOrEmpty(k.EvenOrOddWeek))
                            {
                                CultureInfo ciCurr = CultureInfo.CurrentCulture;
                                int weekNum = ciCurr.Calendar.GetWeekOfYear(k.StartDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                                if (k.EvenOrOddWeek.Trim().ToLower() == "odd")
                                {
                                    int addDays = weekNum % 2 != 0 ? 0 : 7;
                                    k.SkipDays = 14;
                                    k.SkipWeeks = 0;
                                    k.StartDate = DateTime.Now.AddDays(addDays);
                                    k.StartDate = CalculateDate(Day, k.StartDate);
                                }
                                else if (k.EvenOrOddWeek.Trim().ToLower() == "even")
                                {
                                    int addDays = weekNum % 2 == 0 ? 0 : 7;
                                    k.SkipDays = 14;
                                    k.SkipWeeks = 0;
                                    k.StartDate = DateTime.Now.AddDays(addDays);
                                    k.StartDate = CalculateDate(Day, k.StartDate);
                                }
                            }
                            else
                            {
                                k.StartDate = CalculateDate(Day, DateTime.Now);
                            }
                            k.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                            k.IsBeatEdit = true;
                            k.Day = item.Day.ToUpper() == "NOBEAT" ? "NoBeat" : item.Day;
                            k.IsActive = true;
                            k.IsDeleted = false;
                            k.CreatedDate = DateTime.Now;
                            k.ModifiedDate = DateTime.Now;
                            k.CreatedBy = item.ExecutiveId;
                            k.ModifiedBy = item.ExecutiveId;
                            context.CustomerExecutiveMappingsBeatEditDb.Add(k);
                        }
                        else
                        {
                            BeatCheck.SkipDays = item.Type.ToLower() == "monthly" ? 28 : 0;
                            BeatCheck.SkipWeeks = 0;
                            BeatCheck.EvenOrOddWeek = item.Type.ToLower() == "fortnightly" ? item.SubType : "";
                            switch (item.Type.ToLower() == "monthly" ? item.SubType.ToLower() : "")
                            {
                                case "week1": BeatCheck.MonthWeek = 1; break;
                                case "week2": BeatCheck.MonthWeek = 2; break;
                                case "week3": BeatCheck.MonthWeek = 3; break;
                                case "week4": BeatCheck.MonthWeek = 4; break;
                                default: BeatCheck.MonthWeek = 0; break;
                            };
                            if (BeatCheck.SkipDays == 28)
                            {
                                BeatCheck.StartDate = CalculateDate(Day, DateTime.Now.AddDays((BeatCheck.MonthWeek > 1 ? BeatCheck.MonthWeek - 1 : 0) * 7));
                            }
                            else if (!string.IsNullOrEmpty(k.EvenOrOddWeek))
                            {
                                CultureInfo ciCurr = CultureInfo.CurrentCulture;
                                int weekNum = ciCurr.Calendar.GetWeekOfYear(BeatCheck.StartDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                                if (BeatCheck.EvenOrOddWeek.Trim().ToLower() == "odd")
                                {
                                    int addDays = weekNum % 2 != 0 ? 0 : 7;
                                    BeatCheck.SkipDays = 14;
                                    BeatCheck.SkipWeeks = 0;
                                    BeatCheck.StartDate = DateTime.Now.AddDays(addDays);
                                    BeatCheck.StartDate = CalculateDate(Day, BeatCheck.StartDate);
                                }
                                else if (k.EvenOrOddWeek.Trim().ToLower() == "even")
                                {
                                    int addDays = weekNum % 2 == 0 ? 0 : 7;
                                    BeatCheck.SkipDays = 14;
                                    BeatCheck.SkipWeeks = 0;
                                    BeatCheck.StartDate = DateTime.Now.AddDays(addDays);
                                    BeatCheck.StartDate = CalculateDate(Day, BeatCheck.StartDate);
                                }
                            }
                            else
                            {
                                BeatCheck.StartDate = CalculateDate(Day, DateTime.Now);
                            }
                            BeatCheck.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                            BeatCheck.IsActive = true;
                            BeatCheck.IsDeleted = false;
                            BeatCheck.IsBeatEdit = true;
                            BeatCheck.Day = item.Day.ToUpper() == "NOBEAT" ? "NoBeat" : item.Day; ;
                            BeatCheck.ModifiedDate = DateTime.Now;
                            BeatCheck.ModifiedBy = item.ExecutiveId;
                            context.Entry(BeatCheck).State = EntityState.Modified;
                        }
                        context.Commit();
                    }
                    result = true;
                }
                else
                {
                    result = false;
                }
                return result;
            }
        }

        [Route("UpdateBeat")]
        [HttpPost]
        public bool UpdateBeat(BeatEditDCs obj)
        {
            bool result = false;
            //DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsBeatEdit k = new CustomerExecutiveMappingsBeatEdit();
                if (obj != null)
                {
                    var query = string.Format("exec IsSalesAppLead {0}", obj.ExecutiveId);
                    var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();

                    List<long> storeIds = new List<long>();
                    if (isSalesLead == null || isSalesLead == 0)
                    {
                        long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.ExecutiveId && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                        if (!storeId.HasValue)
                        {
                            return false;
                        }
                        storeIds.Add(storeId.Value);
                    }
                    else
                    {
                        storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList();
                    }
                    var BeatCheck = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerID && x.ExecutiveId == obj.ExecutiveId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    if (BeatCheck == null)
                    {
                        k.CustomerId = obj.CustomerID;
                        k.ExecutiveId = obj.ExecutiveId;
                        k.StartDate = DateTime.Now; //item.StartDate;
                        k.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                        k.IsBeatEdit = true;
                        k.Day = obj.Day;
                        k.IsActive = true;
                        k.IsDeleted = false;
                        k.CreatedDate = DateTime.Now;
                        k.ModifiedDate = DateTime.Now;
                        k.CreatedBy = obj.ExecutiveId;
                        k.ModifiedBy = obj.ExecutiveId;
                        context.CustomerExecutiveMappingsBeatEditDb.Add(k);
                    }
                    else
                    {
                        BeatCheck.StartDate = DateTime.Now; //item.StartDate;
                        BeatCheck.Day = obj.Day;
                        BeatCheck.ModifiedDate = DateTime.Now;
                        BeatCheck.ModifiedBy = obj.ModifiedBy;
                        context.Entry(BeatCheck).State = EntityState.Modified;
                    }
                    context.Commit();
                    result = true;
                }
                else
                {
                    result = false;
                }
                return result;
            }
        }

        [Route("BulkBeatRemove")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse BulkBeatRemove(List<BeatEditDCs> obj)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();

            using (AuthContext context = new AuthContext())
            {
                if (obj != null)
                {
                    var customerids = obj.Select(x => x.CustomerID).ToList().Distinct();
                    var ExecutiveId = obj.FirstOrDefault().ExecutiveId;
                    var query = string.Format("exec IsSalesAppLead {0}", ExecutiveId);
                    var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();

                    List<int> storeIds = new List<int>();
                    if (isSalesLead == null || isSalesLead == 0)
                    {
                        var storeId = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == ExecutiveId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).FirstOrDefault();
                        storeIds.Add(Convert.ToInt32(storeId));
                    }
                    else
                    {
                        storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList().Select(x => Convert.ToInt32(x)).ToList();
                    }
                    //var StoreId = obj.FirstOrDefault().StoreID;
                    var Beatlist = context.CustomerExecutiveMappingsBeatEditDb.Where(x => customerids.Contains(x.CustomerId) && storeIds.Contains(x.StoreId) && ExecutiveId == x.ExecutiveId && x.IsActive == true && x.IsDeleted == false).ToList();
                    Beatlist = Beatlist.Count > 0 ? Beatlist : new List<CustomerExecutiveMappingsBeatEdit>();
                    #region previous process sales app face 1

                    //if (Beatlist.Count > 0)
                    //{
                    //    foreach (var BeatCheck in Beatlist)
                    //    {
                    //        if (BeatCheck != null)
                    //        {
                    //            BeatCheck.IsActive = false;
                    //            BeatCheck.IsDeleted = true;
                    //            BeatCheck.ModifiedDate = DateTime.Now;
                    //            BeatCheck.ModifiedBy = ExecutiveId;
                    //            context.Entry(BeatCheck).State = EntityState.Modified;
                    //        }
                    //    }
                    //    if (context.Commit() > 0)
                    //    {
                    //        res.Status = true;
                    //        res.Message = "Success";
                    //        return res;
                    //    }
                    //}
                    //else if (storeIds != null && storeIds.Any())
                    //{
                    //    var SystemBeatlist = context.CustomerExecutiveMappings.Where(x => storeIds.Contains(x.StoreId) && customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                    //    if (SystemBeatlist != null && SystemBeatlist.Any())
                    //    {
                    //        var insertobj = SystemBeatlist.GroupBy(x => x.CustomerId).Select(x => new CustomerExecutiveMappingsBeatEdit
                    //        {
                    //            Day = "Sunday",
                    //            CreatedBy = ExecutiveId,
                    //            CreatedDate = DateTime.Now,
                    //            CustomerId = x.Key,
                    //            ExecutiveId = ExecutiveId,
                    //            IsActive = true,
                    //            IsBeatEdit = true,
                    //            IsDeleted = false,
                    //            StartDate = DateTime.Now,
                    //            StoreId = Convert.ToInt32(x.FirstOrDefault().StoreId)
                    //        });
                    //        context.CustomerExecutiveMappingsBeatEditDb.AddRange(insertobj);
                    //        if (context.Commit() > 0)
                    //        {
                    //            res.Status = true;
                    //            res.Message = "Success";
                    //            return res;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        res.Status = false;
                    //        res.Message = "Beat Not Found";
                    //        return res;
                    //    }
                    //}
                    #endregion
                    #region sales app face 2


                    /*   if (Beatlist.Count > 0)
                       {
                           foreach (var BeatCheck in Beatlist)
                           {
                               if (BeatCheck != null)
                               {
                                   //BeatCheck.IsActive = false;
                                   //BeatCheck.IsDeleted = true;
                                   BeatCheck.Day = "NoBeat";
                                   BeatCheck.ModifiedDate = DateTime.Now;
                                   BeatCheck.ModifiedBy = ExecutiveId;
                                   context.Entry(BeatCheck).State = EntityState.Modified;
                               }
                           }*/
                    foreach (var beat in obj)
                    {
                        var BeatCheck = Beatlist.Where(x => x.CustomerId == beat.CustomerID && storeIds.Contains(x.StoreId)).FirstOrDefault();
                        if (BeatCheck == null)
                        {
                            CustomerExecutiveMappingsBeatEdit custExecMapBeatEdit = new CustomerExecutiveMappingsBeatEdit();
                            custExecMapBeatEdit.CustomerId = beat.CustomerID;
                            custExecMapBeatEdit.Day = "NoBeat";
                            custExecMapBeatEdit.ExecutiveId = beat.ExecutiveId;
                            custExecMapBeatEdit.StoreId = storeIds.FirstOrDefault();
                            custExecMapBeatEdit.StartDate = DateTime.Now;
                            custExecMapBeatEdit.IsBeatEdit = false;
                            custExecMapBeatEdit.IsActive = true;
                            custExecMapBeatEdit.IsDeleted = false;
                            custExecMapBeatEdit.CreatedBy = beat.ExecutiveId;
                            custExecMapBeatEdit.CreatedDate = DateTime.Now;
                            context.CustomerExecutiveMappingsBeatEditDb.Add(custExecMapBeatEdit);
                        }
                        else if (BeatCheck != null)
                        {
                            //BeatCheck.IsActive = false;
                            //BeatCheck.IsDeleted = true;
                            BeatCheck.Day = "NoBeat";
                            BeatCheck.ModifiedDate = DateTime.Now;
                            BeatCheck.ModifiedBy = ExecutiveId;
                            context.Entry(BeatCheck).State = EntityState.Modified;
                        }
                        context.Commit();
                    }
                    res.Status = true;
                    res.Message = "Success";
                    return res;

                    //}
                    /*else if (storeIds != null && storeIds.Any())
                    {
                        foreach (var sid in storeIds)
                        {
                            *//*var SystemBeatlist = context.CustomerExecutiveMappings.Where(x => x.StoreId == sid && customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                            if (SystemBeatlist != null && SystemBeatlist.Any())
                            {
                                foreach (var item in SystemBeatlist)
                                {
                                    item.Day = "NoBeat";
                                    item.ModifiedDate = DateTime.Now;
                                    item.ModifiedBy = ExecutiveId;
                                    context.Entry(item).State = EntityState.Modified;
                                }

                            }*//*
                            //var re = Beatlist.ForEach();
                        }
                        if (context.Commit() > 0)
                        {
                            res.Status = true;
                            res.Message = "Success";
                            return res;
                        }
                    }*/
                    #endregion
                }
                else
                {
                    res.Status = false;
                    res.Message = "somthing went wrong";
                    return res;
                }
            }
            return res;
        }

        [Route("DayWiseShopCount")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<DayWiseShopCountDC>> DayWiseShopCount(int PeopleId)
        {
            List<DayWiseShopCountDC> DayWiseShop = new List<DayWiseShopCountDC>();
            var dayIndex = new List<string> { "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "NO BEAT" };
            using (var Context = new AuthContext())
            {
                //var query = string.Format("exec IsSalesAppLead {0}", PeopleId);
                //var isSalesLead = Context.Database.SqlQuery<int>(query).FirstOrDefault();
                //string SP = isSalesLead > 0 ? "GetExecutiveAllBeatDigital" : "GetExecutiveAllBeat";
                string SP = "GetExecutiveAllBeat";

                var peopleId = new SqlParameter("@peopleId", PeopleId);
                List<ExecutiveAllBeatDC> allBeat = Context.Database.SqlQuery<ExecutiveAllBeatDC>("exec " + SP + " @peopleId", peopleId).ToList();
                DayWiseShop = allBeat.GroupBy(x => x.day.ToUpper().Trim()).Select(x => new DayWiseShopCountDC { Day = x.Key, ShopCount = x.Count() }).OrderBy(e => dayIndex.IndexOf(e.Day.ToUpper())).ToList();
            }
            return DayWiseShop;
        }

        [HttpPost]
        [Route("InsertUpdateCustomerRemark")]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> InsertUpdateCustomerRemarkAsync(DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC res)
        {
            try
            {
                CustomerRemark customerRemark = new CustomerRemark();
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    var userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    if (res.Id > 0)
                    {
                        customerRemark = context.CustomerRemarks.Where(x => x.Id == res.Id).FirstOrDefault();
                        customerRemark.ExecutiveId = res.ExecutiveId;
                        customerRemark.CustomerId = res.CustomerId;
                        customerRemark.Remark = res.Remark;
                        customerRemark.IsActive = res.IsDelete ? false : true;
                        customerRemark.IsDeleted = res.IsDelete;
                        customerRemark.ModifiedBy = userid;
                        customerRemark.ModifiedDate = DateTime.Now;
                        context.Entry(customerRemark).State = EntityState.Modified;
                    }
                    else
                    {
                        customerRemark.ExecutiveId = res.ExecutiveId;
                        customerRemark.CustomerId = res.CustomerId;
                        customerRemark.Remark = res.Remark;
                        customerRemark.IsActive = true;
                        customerRemark.IsDeleted = false;
                        customerRemark.CreatedBy = userid;
                        customerRemark.CreatedDate = DateTime.Now;
                        context.CustomerRemarks.Add(customerRemark);
                    }
                    if (context.Commit() > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved Successfully", Data = customerRemark.Id };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Save" };
                    }

                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("BeatReSchedule")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse BeatReschedule(RescheduleBeatDCs obj)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsReschedule k = new CustomerExecutiveMappingsReschedule();

                var today = DateTime.Now.Date;
                string DayChk = today.DayOfWeek.ToString();
                if (DayChk == obj.Day)
                {
                    res.Status = false;
                    res.Message = "Please select different day";
                    return res;
                }
                var query = string.Format("exec IsSalesAppLead {0}", obj.ExecutiveId);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                long? storeId = null;
                if (isSalesLead == null || isSalesLead == 0)
                {
                    storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.ExecutiveId && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                    if (!storeId.HasValue)
                    {
                        res.Status = false;
                        res.Message = "Store not assign.";
                        return res;
                    }
                }
                else
                    storeId = 1;

                var BeatCheck = context.CustomerExecutiveMappingsRescheduleDb.FirstOrDefault(x => x.CustomerId == obj.CustomerID && x.StoreId == storeId.Value);
                if (BeatCheck == null)
                {
                    k.CustomerId = obj.CustomerID;
                    k.ExecutiveId = obj.ExecutiveId;
                    k.StartDate = obj.StartDate;
                    k.StoreId = Convert.ToInt32(storeId.Value);
                    k.IsReschedule = true;
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.CreatedDate = DateTime.Now;
                    k.ModifiedDate = DateTime.Now;
                    k.CreatedBy = obj.ExecutiveId;
                    k.ModifiedBy = obj.ExecutiveId;
                    k.Day = obj.StartDate.ToString("dddd");

                    context.CustomerExecutiveMappingsRescheduleDb.Add(k);
                    if (context.Commit() > 0)
                    {
                        res.Status = true;
                        res.Message = "Saved Successfully";
                    }
                }
                else
                {
                    BeatCheck.StartDate = obj.StartDate;
                    BeatCheck.StoreId = Convert.ToInt32(storeId.Value);
                    BeatCheck.IsReschedule = true;
                    BeatCheck.IsActive = true;
                    BeatCheck.IsDeleted = false;
                    BeatCheck.ModifiedDate = DateTime.Now;
                    BeatCheck.ModifiedBy = obj.ExecutiveId;
                    BeatCheck.Day = obj.StartDate.ToString("dddd");
                    context.Entry(BeatCheck).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Status = true;
                        res.Message = "Saved Successfully";
                    }
                }
                return res;
            }
        }

        [HttpGet]
        [Route("GetCheckInStatus")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetCheckInStatus(int peopleId)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            DataContracts.External.MobileExecutiveDC.CheckInStatuDc obj = new DataContracts.External.MobileExecutiveDC.CheckInStatuDc();
            res.Status = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            var todayBeats = mongoDbHelper.Select(x => x.PeopleId == peopleId && x.AssignmentDate == today);

            if (todayBeats != null && todayBeats.Count > 0 && todayBeats.FirstOrDefault().ActualRoutes != null)
            {
                var actualroute = todayBeats.FirstOrDefault().ActualRoutes.FirstOrDefault(x => x.CheckIn.HasValue && !x.CheckOut.HasValue);
                if (actualroute != null)
                {
                    obj.customerId = actualroute.CustomerId;
                    obj.SKCode = actualroute.Skcode;
                    obj.ShopName = actualroute.ShopName;
                    obj.CustomerType = actualroute.CustomerType;
                    res.Data = actualroute;
                    res.Status = true;
                    return res;
                }

            }
            return res;
        }

        [Route("BeatCustomerVisit")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<DateTime> BeatCustomerVisit(DataContracts.External.MobileExecutiveDC.SalesAppRouteParam param)
        {
            BeatsManager manager = new BeatsManager();
            DateTime? CheckIn = await manager.BeatStart(param.PeopleId, param.CustomerId);
            CheckIn = await manager.BeatActualRoute(param);
            return CheckIn.Value;
        }

        [Route("IsPhoneOrder")]
        [HttpGet]
        public bool PhoneOrder(int PeopleId, int CustomerId)
        {
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            {
                var today = DateTime.Now.Date;
                var data = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == today).FirstOrDefault();

                if (data != null && data.PlannedRoutes != null && data.PlannedRoutes.Any(x => x.CustomerId == CustomerId))
                {
                    data.PlannedRoutes.FirstOrDefault(x => x.CustomerId == CustomerId).IsPhoneOrder = true;
                    result = mongoDbHelper.Replace(data.Id, data);

                    //ExecutiveAttendenceMongoHelper attendanceHelper = new ExecutiveAttendenceMongoHelper();
                    //updateAttendanceDc obj = new updateAttendanceDc();
                    //obj.ExecutiveId = PeopleId;
                    //obj.IsBeatShop = true;
                    //obj.IsPhoneOrder = true;
                    //var res = attendanceHelper.UpdateExecutiveAttendance(obj);
                }
            }
            return result;
        }


        [Route("GetHighestSellingItemV2")]
        [HttpGet]
        public async Task<ItemListForAgent> GetHighestSellingItemV2(int PeopleId, int warehouseId, int skip, int take, string lang, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            ItemListForAgent ItemListForAgent = new ItemListForAgent();
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>() };

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId && x.Active == true && x.Deleted == false);
                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                {
                    var IdDt = new DataTable();
                    SqlParameter param = null;

                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }
                    param = new SqlParameter("CatCompanyBrand", IdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.CatCompanyBrand";

                    var IdDt1 = new DataTable();
                    SqlParameter param1 = null;

                    IdDt1 = new DataTable();
                    IdDt1.Columns.Add("stringValue");
                    foreach (var item in IncentiveClassificationList)
                    {
                        var dr = IdDt1.NewRow();
                        dr["stringValue"] = item;
                        IdDt1.Rows.Add(dr);
                    }
                    param1 = new SqlParameter("Classification", IdDt1);
                    param1.SqlDbType = SqlDbType.Structured;
                    param1.TypeName = "dbo.stringValues";


                    //ItemListForAgent item = new ItemListForAgent();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 900;
                    cmd.CommandText = "[dbo].[GetHighestSellingItemNewV2]";
                    cmd.Parameters.Add(new SqlParameter("@WarehouseId", warehouseId));
                    cmd.Parameters.Add(new SqlParameter("@PeopleId", PeopleId));
                    cmd.Parameters.Add(new SqlParameter("@skip", skip));
                    cmd.Parameters.Add(new SqlParameter("@take", take));
                    cmd.Parameters.Add(param);
                    cmd.Parameters.Add(param1);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                    var reader = cmd.ExecuteReader();
                    var newdata = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<Itemdata>(reader).ToList();
                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                    List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                    if (newdata != null && newdata.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, newdata.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    }
                    BackendOrderController backendOrderController = new BackendOrderController();
                    foreach (var it in newdata)
                    {

                        it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                        it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                        if (customerId > 0)
                        {
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                        }


                        if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                        {
                            it.IsOffer = false;
                        }
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }


                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        if (ItemListForAgent.ItemMasters == null)
                        {
                            ItemListForAgent.ItemMasters = new List<Itemdata>();
                        }
                        try
                        {/// Dream Point Logic && Margin Point
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //salesman 0.2=(0.02 * 10=0.2)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }

                        }
                        catch { }
                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }

                        ItemListForAgent.ItemMasters.Add(it);
                    }
                    if (ItemListForAgent.ItemMasters != null && ItemListForAgent.ItemMasters.Any())
                    {
                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        var itemMultiMRPIds = ItemListForAgent.ItemMasters.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                        List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                        ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);

                        foreach (var itm in ItemListForAgent.ItemMasters)
                        {
                            if (itm.price > itm.UnitPrice)
                            {
                                itm.marginPoint = itm.UnitPrice > 0 ? (((itm.price - itm.UnitPrice) * 100) / itm.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                                if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == itm.ItemMultiMRPId && x.PTR > 0))
                                {
                                    var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == itm.ItemMultiMRPId);
                                    var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                    var UPMRPMargin = itm.marginPoint.Value;
                                    if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                        itm.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                                }
                            }
                            else
                            {
                                itm.marginPoint = 0;
                            }
                        }
                        ItemListForAgent.Message = "Success";
                        ItemListForAgent.Status = true;
                        ItemListForAgent.ItemMasters.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                        ItemListForAgent.ItemMasters = ItemListForAgent.ItemMasters.OrderByDescending(x => x.marginPoint).ToList();
                        return ItemListForAgent;
                    }
                    else
                    {
                        ItemListForAgent.Message = "Item Not found";
                        ItemListForAgent.Status = false;
                    }
                }
                return ItemListForAgent;
            }

        }


        [HttpGet]
        [Route("GetSearchHistory")]
        public async Task<PopularRecentSearchDC> GetSearchHistory(int PeopleId, int WarehouseId, int customerId, int skip, int take, string lang)
        {
            PopularRecentSearchDC res = new PopularRecentSearchDC();

            MongoDbHelper<CustomerProductSearch> mongoDbHelper = new MongoDbHelper<CustomerProductSearch>();
            MongoDbHelper<ExecutiveProductSearch> ExecutivemongoDbHelper = new MongoDbHelper<ExecutiveProductSearch>();

            List<string> recentsearch = ExecutivemongoDbHelper.Select(x => x.PeopleId == PeopleId && x.IsDeleted == false, x => x.OrderByDescending(y => y.CreatedDate), skip, take).ToList().Select(x => x.keyword).ToList();
            List<string> popularSearch = mongoDbHelper.Select(x => x.customerId == customerId && x.IsDeleted == false, x => x.OrderByDescending(y => y.CreatedDate), skip, take).ToList().Select(x => x.keyword).ToList();

            recentsearch = recentsearch.Distinct().ToList();
            if (!string.IsNullOrEmpty(lang) && lang != "en")
            {
                Annotate annotate = new Annotate();
                var converttext = string.Join("|", recentsearch);
                var hindiText = await annotate.GetTranslatedText(converttext, lang);
                recentsearch = hindiText.Split('|').ToList();
            }


            popularSearch = popularSearch.Distinct().ToList();
            if (!string.IsNullOrEmpty(lang) && lang != "en")
            {
                Annotate annotate = new Annotate();
                var converttext = string.Join("|", popularSearch);
                var hindiText = await annotate.GetTranslatedText(converttext, lang);
                popularSearch = hindiText.Split('|').ToList();
            }

            res.RecentSearch = recentsearch;
            res.PopularSearch = popularSearch;
            return res;
        }


        [Route("Search")]
        public List<ActionTask> Getdata(int PeopleId)
        {
            logger.Info("start ActionTask: ");
            ActionTask ass = new ActionTask();
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }

                using (AuthContext db = new AuthContext())
                {
                    var asss = db.ActionTaskDb.Where(x => x.PeopleID == PeopleId && x.CompanyId == compid).ToList();

                    return asss;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in ActionTask " + ex.Message);
                logger.Info("End  ActionTask: ");
                return null;
            }
        }

        [Route("BrandWise")]
        [HttpGet]
        public dynamic Getdata(string day, int PeopleId)
        {

            using (var db = new AuthContext())
            {
                var people = db.Peoples.Where(x => x.PeopleID == PeopleId && x.Deleted == false).SingleOrDefault();

                if (day != null && PeopleId > 0)
                {
                    List<Target> item = new List<Target>();
                    //item = db.TargetDb.Where(x => x.WarehouseId == people.WarehouseId).ToList();
                    var date = indianTime;
                    var sDate = indianTime.Date;
                    if (day == "1Month")
                    {
                        sDate = indianTime.AddMonths(-1).Date;
                    }
                    else if (day == "3Month")
                    {
                        sDate = indianTime.AddMonths(-3).Date;
                    }
                    var list = (from i in db.DbOrderDetails
                                where i.CreatedDate > sDate && i.CreatedDate <= date && i.WarehouseId == people.WarehouseId && i.ExecutiveId == PeopleId
                                join k in db.itemMasters on i.ItemId equals k.ItemId
                                join l in db.SubsubCategorys on k.SubsubCategoryid equals l.SubsubCategoryid
                                select new SaleDC
                                {
                                    Sale = i.TotalAmt,
                                    SubsubcategoryName = l.SubsubcategoryName,
                                }).ToList();


                    var result = list.GroupBy(d => d.SubsubcategoryName)
                        .Select(
                            g => new
                            {
                                Sale = g.Sum(s => s.Sale),
                                BrandName = g.First().SubsubcategoryName,
                            });
                    return result;
                }

                else
                {
                    return null;
                }
            }

        }

        #region get executive info
        /// <summary>
        /// Created Date:12/04/2020
        /// Created by Raj
        /// </summary>
        /// <returns></returns>
        [Route("GetSalesLeadExecutive")]
        [HttpGet]
        [AllowAnonymous]
        //[Authorize]
        public List<ExecutiveInfo> GetSalesLeadExecutive(int Id)
        {

            using (var context = new AuthContext())
            {
                var data = context.Peoples.Where(x => x.ReportPersonId == Id).Select(x => new ExecutiveInfo
                {
                    ExecutiveId = x.PeopleID,
                    ExecutiveName = x.DisplayName
                }).ToList();
                return data;

            }
        }
        #endregion
        #region get cheque bounce  info on behalf agent
        /// <summary>
        /// Created Date:04/03/2020
        /// Created by Raj
        /// </summary>
        /// <returns></returns>
        [Route("GetChequeBounceinfo")]
        [HttpPost]
        [Authorize]
        public AgentChequeBounceInfoLists GetChequeBounceinfo(AgentChequeBouncePaginatorDC agentChequeBouncePaginator)
        {

            using (var context = new AuthContext())
            {

                AgentChequeBounceInfoLists agentChequeBounceInfoList = new AgentChequeBounceInfoLists();
                if (agentChequeBouncePaginator.AgentId > 0)
                {
                    var query = "Select od.CustomerName,Cust.Skcode,Cust.ShopName,cheq.ChequeNumber,cheq.ChequeAmt,cheq.ChequeDate,cheq.ChequeBankName,cheq.Orderid  from Customers cust " +
                                "inner join OrderDispatchedMasters od on cust.CustomerId=od.CustomerId " +
                                "inner join ChequeCollections cheq on cheq.Orderid=od.OrderId where cheq.ChequeStatus=4 and od.OrderTakenSalesPersonId=" + agentChequeBouncePaginator.AgentId;

                    agentChequeBounceInfoList.agentChequeBounceInfo = context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Skip(agentChequeBouncePaginator.Skip * agentChequeBouncePaginator.Take).Take(agentChequeBouncePaginator.Take).ToList();
                    agentChequeBounceInfoList.Count = context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Count();
                    agentChequeBounceInfoList.TotalAmount = Convert.ToDouble(context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Sum(x => x.ChequeAmt));
                }
                else if (agentChequeBouncePaginator.WarehouseId > 0)
                {
                    var query = "Select od.CustomerName,Cust.Skcode,Cust.ShopName,cheq.ChequeNumber,cheq.ChequeAmt,cheq.ChequeDate,cheq.ChequeBankName,cheq.Orderid  from Customers cust " +
                                    "inner join OrderDispatchedMasters od on cust.CustomerId=od.CustomerId " +
                                    "inner join ChequeCollections cheq on cheq.Orderid=od.OrderId where cheq.ChequeStatus=4 and Cust.WarehouseId=" + agentChequeBouncePaginator.WarehouseId;

                    agentChequeBounceInfoList.agentChequeBounceInfo = context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Skip(agentChequeBouncePaginator.Skip * agentChequeBouncePaginator.Take).Take(agentChequeBouncePaginator.Take).ToList();
                    agentChequeBounceInfoList.Count = context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Count();
                    agentChequeBounceInfoList.TotalAmount = Convert.ToDouble(context.Database.SqlQuery<AgentChequeBounceInfoDC>(query).Sum(x => x.ChequeAmt));

                }
                return agentChequeBounceInfoList;

            }
        }
        #endregion

        #region api/request
        [Authorize]
        [Route("")]
        [HttpGet]
        [AcceptVerbs("GET")]
        public HttpResponseMessage Get1()
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;     // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (var db = new AuthContext())
                {
                    var item = db.RequestItems.Where(x => x.CompanyId == compid).ToList();
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in add feedBack " + ex.Message);
                logger.Info("End  addCity: ");
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.Message);
            }
        }
        #endregion

        [Route("GetSalesPersonCommission")]
        [HttpGet]
        public async Task<SalesPersonCommission> GetSalesPersonCommission(int peopleId, int warehouseId, int month, int year = 2021)
        {
            SalesPersonCommission salesPersonCommission = new SalesPersonCommission();
            using (var context = new AuthContext())
            {

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                DataTable peopleidDt = new DataTable();
                peopleidDt.Columns.Add("IntValue");
                DataRow dr = peopleidDt.NewRow();
                dr[0] = peopleId;
                peopleidDt.Rows.Add(dr);

                var executiveIds = new SqlParameter("executiveIds", peopleidDt);
                executiveIds.SqlDbType = SqlDbType.Structured;
                executiveIds.TypeName = "dbo.IntValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetSalesCommission]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@Month", month));
                cmd.Parameters.Add(new SqlParameter("@Year", year));
                cmd.Parameters.Add(executiveIds);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 600;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var SalesPersonCommissionData = ((IObjectContextAdapter)context)
                                    .ObjectContext
                                    .Translate<SalesPersonCommissionData>(reader).ToList();

                if (SalesPersonCommissionData != null && SalesPersonCommissionData.Any())
                {
                    salesPersonCommission = SalesPersonCommissionData.GroupBy(x => x.Name).Select(x => new SalesPersonCommission
                    {
                        Name = x.Key,
                        CategoryCommissions = x.GroupBy(y => new { y.CategoryName, y.ShowColumnWithValueField }).Select(z =>
                               new CategoryCommission
                               {
                                   CategoryName = z.Key.CategoryName,
                                   ShowColumnWithValueField = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(z.Key.ShowColumnWithValueField),
                                   EventCommissions = z.Select(p => new EventCommission
                                   {
                                       Id = p.Id,
                                       BookedValue = Convert.ToInt32(Math.Round(p.BookedValue, 0)),
                                       EventCatName = p.EventCatName,
                                       EventName = p.EventName,
                                       IncentiveType = p.IncentiveType,
                                       IncentiveValue = p.IncentiveValue,
                                       ReqBookedValue = Convert.ToInt32(Math.Round(p.ReqBookedValue, 0)),
                                       EarnValue = Convert.ToInt32(Math.Round(p.EarnValue, 0)),
                                       EndDate = p.EndDate,
                                       StartDate = p.StartDate
                                   }
                                  ).ToList()
                               }
                        ).ToList()
                    }).FirstOrDefault();
                }
                else
                {
                    string Name = context.Peoples.FirstOrDefault(x => x.PeopleID == peopleId).DisplayName;
                    salesPersonCommission = new SalesPersonCommission
                    {
                        Name = Name
                    };
                }
            }

            return salesPersonCommission;
        }

        [Route("GetOrder/V3")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.GetOrderResponseDc GetOrderV3(int PeopleId, int Skip, int Take, string lang, string type = "", string keyword = null, string OrderStatus = null)
        {
            DataContracts.External.MobileExecutiveDC.GetOrderResponseDc res = new DataContracts.External.MobileExecutiveDC.GetOrderResponseDc();
            List<DataContracts.External.MobileExecutiveDC.SalesOrder> salesOrders = new List<DataContracts.External.MobileExecutiveDC.SalesOrder>();
            List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail> SalesOrderDetails = new List<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>();
            List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc> OrderStatusHistoryDcs = new List<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>();
            List<DataContracts.External.MobileExecutiveDC.StatusCountDc> StatusLiveCountDcs = new List<DataContracts.External.MobileExecutiveDC.StatusCountDc>();
            List<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc> StatusCompletedCountDcs = new List<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc>();


            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                context.Database.CommandTimeout = 600;
                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetSalesOrderNew]";

                if (string.IsNullOrEmpty(type)) type = "ALL";

                cmd.Parameters.Add(new SqlParameter("@peopleId", PeopleId));
                cmd.Parameters.Add(new SqlParameter("@skip", Skip));
                cmd.Parameters.Add(new SqlParameter("@take", Take));
                cmd.Parameters.Add(new SqlParameter("@status", type));
                cmd.Parameters.Add(new SqlParameter("@keyword", keyword));
                cmd.Parameters.Add(new SqlParameter("@OrderStatus", OrderStatus));

                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                salesOrders = ((IObjectContextAdapter)context)
                               .ObjectContext
                               .Translate<DataContracts.External.MobileExecutiveDC.SalesOrder>(reader).ToList();
                reader.NextResult();

                if (reader.HasRows)
                {
                    SalesOrderDetails = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.SalesOrderDetail>(reader).ToList();
                }
                reader.NextResult();
                if (reader.HasRows)
                {
                    OrderStatusHistoryDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.OrderStatusHistoryDc>(reader).ToList();
                }
                reader.NextResult();
                if (reader.HasRows)
                {
                    StatusLiveCountDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.StatusCountDc>(reader).ToList();
                }
                reader.NextResult();
                if (reader.HasRows)
                {
                    StatusCompletedCountDcs = ((IObjectContextAdapter)context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.StatusCompletedCountDc>(reader).ToList();
                }

                if (lang.Trim() == "hi")
                {
                    if (salesOrders != null && salesOrders.Any() && SalesOrderDetails != null && SalesOrderDetails.Any())
                    {
                        salesOrders.ForEach(x => x.orderDetails = SalesOrderDetails.Where(
                            y => y.OrderId == x.OrderId).ToList()
                            );
                        salesOrders.ForEach(z => z.orderDetails.ForEach(y =>
                            y.itemname = y.ItemHindiName != null ? y.ItemHindiName : y.itemname
                        ));

                        //salesOrders.ForEach(HoldOrder =>
                        //HoldOrder.IsOrderHold = context.ReadyToPickHoldOrders.Where(x => x.OrderId == HoldOrder.OrderId && x.IsActive == true && x.IsDeleted == false).Count() > 0 ? true : false);

                        salesOrders.ForEach(HoldOrder =>
                        {
                            if (HoldOrder.PrioritizedDate == null && HoldOrder.Status == "Pending")
                            {
                                HoldOrder.IsOrderHold = context.ReadyToPickHoldOrders.Where(x => x.OrderId == HoldOrder.OrderId && x.IsActive == true && x.IsDeleted == false).Count() > 0 ? true : false;
                                HoldOrder.IsETAEnable = HoldOrder.IsOrderHold == true ? false : true;
                            }
                            else
                            {
                                HoldOrder.IsOrderHold = false;
                                HoldOrder.IsETAEnable = false;
                            }
                        });
                    }
                    if (salesOrders != null && salesOrders.Any() && OrderStatusHistoryDcs != null && OrderStatusHistoryDcs.Any())
                    {
                        salesOrders.ForEach(x => x.OrderStatusHistoryDcs = OrderStatusHistoryDcs.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                }
                else
                {
                    if (salesOrders != null && salesOrders.Any() && SalesOrderDetails != null && SalesOrderDetails.Any())
                    {
                        salesOrders.ForEach(x => x.orderDetails = SalesOrderDetails.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                    if (salesOrders != null && salesOrders.Any() && OrderStatusHistoryDcs != null && OrderStatusHistoryDcs.Any())
                    {
                        salesOrders.ForEach(x => x.OrderStatusHistoryDcs = OrderStatusHistoryDcs.Where(y => y.OrderId == x.OrderId).ToList());
                    }
                    if (salesOrders != null && salesOrders.Any())
                    {
                        salesOrders.ForEach(HoldOrder =>
                        {
                            if (HoldOrder.PrioritizedDate == null && HoldOrder.Status == "Pending")
                            {
                                HoldOrder.IsOrderHold = context.ReadyToPickHoldOrders.Where(x => x.OrderId == HoldOrder.OrderId && x.IsActive == true && x.IsDeleted == false).Count() > 0 ? true : false;
                                HoldOrder.IsETAEnable = HoldOrder.IsOrderHold == true ? false : true;
                            }
                            else
                            {
                                HoldOrder.IsOrderHold = false;
                                HoldOrder.IsETAEnable = false;
                            }
                        });
                    }
                }
                res.StatusCountDcs = type.ToUpper() == "LIVE" ? StatusLiveCountDcs.FirstOrDefault() : null;
                res.StatusCompletedCountDcs = type.ToUpper() == "COMPLETED" ? StatusCompletedCountDcs.FirstOrDefault() : null;
                res.salesOrders = salesOrders;
            }

            return res;
        }


        [Route("GetCatelog")]
        [HttpGet]
        public CalelogDc GetCatelog(int PeopleId, int warehouseid, string lang)
        {
            CalelogDc objtosend = new CalelogDc();
            objtosend.SalesCategories = new List<SalesCategory>();
            objtosend.SalesCompanies = new List<SalesCompany>();
            objtosend.SalesBrands = new List<SalesBrand>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            #region block Barnd
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            var custtype = 4;
            var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
            if (blockBarnds != null && blockBarnds.Any())
            {
                StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
            }
            #endregion
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                {
                    var IdDt = new DataTable();
                    SqlParameter param = null;

                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }

                    param = new SqlParameter("CatCompanyBrand", IdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.CatCompanyBrand";

                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetCatCompanyBrandforSalesApp]";
                    cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseid));
                    cmd.Parameters.Add(param);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                    // Run the sproc
                    var reader = cmd.ExecuteReader();
                    objtosend.SalesCategories = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<SalesCategory>(reader).ToList();
                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        objtosend.SalesCompanies = ((IObjectContextAdapter)context)
                                                    .ObjectContext
                                                    .Translate<SalesCompany>(reader).ToList();
                    }
                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        objtosend.SalesBrands = ((IObjectContextAdapter)context)
                                                    .ObjectContext
                                                    .Translate<SalesBrand>(reader).ToList();
                    }

                }
            }

            if (lang == "hi")
            {
                foreach (var kk in objtosend.SalesCategories)
                {
                    if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                    {
                        kk.CategoryName = kk.HindiName;
                    }
                }

                foreach (var kk in objtosend.SalesCompanies)
                {
                    if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                    {
                        kk.SubcategoryName = kk.HindiName;
                    }
                }

                foreach (var kk in objtosend.SalesBrands)
                {
                    if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                    {
                        kk.SubsubcategoryName = kk.HindiName;
                    }
                }
            }
            objtosend.SalesCategories = objtosend.SalesCategories.OrderBy(x => x.CategoryName).ToList();
            objtosend.SalesBrands = objtosend.SalesBrands.OrderBy(x => x.SubsubcategoryName).ToList();
            objtosend.BrandCompanies = objtosend.SalesCompanies.Any() ? objtosend.SalesCompanies.GroupBy(x => x.SubCategoryId).Select(x => new SalesCompany
            {
                Categoryid = 0,
                HindiName = x.FirstOrDefault().HindiName,
                itemcount = x.Sum(y => y.itemcount),
                LogoUrl = x.FirstOrDefault().LogoUrl,
                Sequence = x.FirstOrDefault().Sequence,
                SubCategoryId = x.Key,
                SubcategoryName = x.FirstOrDefault().SubcategoryName
            }).OrderBy(x => x.Sequence).OrderBy(x => x.SubcategoryName).ToList() : new List<SalesCompany>();

            objtosend.Brands = objtosend.SalesBrands.Any() ? objtosend.SalesBrands.GroupBy(x => new { x.SubsubCategoryid, x.SubCategoryId }).Select(x => new SalesBrand
            {
                Categoryid = 0,
                HindiName = x.FirstOrDefault().HindiName,
                itemcount = x.Sum(y => y.itemcount),
                LogoUrl = x.FirstOrDefault().LogoUrl,
                SubCategoryId = x.Key.SubCategoryId,
                SubsubCategoryid = x.Key.SubsubCategoryid,
                SubsubcategoryName = x.FirstOrDefault().SubsubcategoryName
            }).OrderBy(x => x.SubsubcategoryName).ToList() : new List<SalesBrand>();



            return objtosend;
        }


        [Route("GetBrandItem")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesItemResponseDc> GetBrandItem(int PeopleId, int customerId, int warehouseId, int companyId, int brandId, int skip, int take, string lang, string IncentiveClassifications)
        {
            List<string> IncentiveClassification = new List<string>();
            IncentiveClassification = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            skip = skip / take;
            Customer ActiveCustomer = new Customer();

            #region variables
            var taskList = new List<Task>();
            int baseskip = 0, basetake = 0, suggestedskip = 0, suggestedTake = 0, promotionalskip = 0, promotionaltake = 0;
            string baseorderby = "ASC", suggestedorderby = "ASC", promotionalorderby = "ASC";
            int basescorefrom = -1, basescoreto = -1, suggestedscorefrom = -1, suggestedscoreto = -1, promotionalscorefrom = -1, promotionalscoreto = -1,
            baseIndex = 1, suggestedIndex = 2, promotionalIndex = 2, basedefaultitem = 0;
            bool isSuggestShow = false, isPromotionalShow = false, promotionalNewLaunch = false, promotionalItem = false, suggestedUnbilled = false;
            #endregion
            var itemResponseDc = new SalesItemResponseDc { TotalItem = 0, ItemDataDCs = new List<SalesAppItemDataDC>() };


            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStoresNewSales(PeopleId);

            #region block Barnd
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            var custtype = 4;
            var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
            if (blockBarnds != null && blockBarnds.Any())
            {
                StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
            }
            #endregion


            var PromotionalStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands;
            var SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands;//.Where(x => x.SubCategoryId == companyId && x.BrandId != brandId).ToList();
            StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.SubCategoryId == companyId && ((brandId > 0 && x.BrandId == brandId) || (brandId == 0 && x.BrandId == x.BrandId))).ToList();
            //var SuggestedStoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            if (brandId == 0)
            {
                PromotionalStoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
                SuggestedStoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            }
            else if (companyId > 0 && brandId == 0)
                SuggestedStoreCategorySubCategoryBrands = SuggestedStoreCategorySubCategoryBrands.Where(x => x.SubCategoryId != companyId).ToList();
            else if (companyId > 0 && brandId > 0)
                SuggestedStoreCategorySubCategoryBrands = SuggestedStoreCategorySubCategoryBrands.Where(x => x.SubCategoryId == companyId && brandId != x.BrandId).ToList();

            using (var context = new AuthContext())
            {
                ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                #region City wise configuration working
                List<CatelogConfig> categlogconfigs = new List<CatelogConfig>();
                var cityId = context.Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseId && x.active && !x.Deleted)?.Cityid;
                var Cityconfigs = context.CatelogConfigs.Where(x => x.IsActive && x.CityId == cityId).ToList();

                if (Cityconfigs != null && Cityconfigs.Any())
                {
                    categlogconfigs = Cityconfigs.ToList();
                }
                else
                {
                    categlogconfigs = context.CatelogConfigs.Where(x => x.IsActive && x.CityId == 0).ToList();
                }
                #endregion
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "BaseListing"))
                {
                    baseIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").Sequence;
                    baseskip = skip;
                    basetake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ItemCount;
                    basedefaultitem = basetake;
                    baseorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").Sort;
                    baseorderby = !string.IsNullOrEmpty(baseorderby) && baseorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    basescorefrom = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ScoreFrom ?? -1);
                    basescoreto = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ScoreTo ?? -1);
                }
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "SuggestedItems" && x.Status == true))
                {
                    suggestedIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Sequence;
                    suggestedskip = skip;
                    suggestedTake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ItemCount;
                    suggestedorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Sort;
                    //suggestedorderby = !string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    suggestedorderby = !string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "random"
                           ? suggestedorderby.ToUpper() : !string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    suggestedscorefrom = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ScoreFrom ?? -1);
                    suggestedscoreto = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ScoreTo ?? -1);
                    suggestedUnbilled = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Unbilled != null ? true : false;
                    isSuggestShow = suggestedTake > 0 ? true : false;
                }
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "PromotionalItems" && x.Status == true))
                {
                    promotionalIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").Sequence;
                    promotionalskip = skip;
                    promotionaltake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").ItemCount;
                    promotionalorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").Sort;
                    promotionalorderby = !string.IsNullOrEmpty(promotionalorderby) && promotionalorderby.ToLower() == "custom" ? "Custom" : "Random";
                    promotionalNewLaunch = (bool)categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").NewLaunch;
                    promotionalItem = (bool)categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").PromotionalItems;
                    isPromotionalShow = promotionaltake > 0 ? true : false;
                }

            }

            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();

            //--Suggested Item
            if (isSuggestShow && suggestedTake > 0)
            {
                //var tasksuggestedItem = Task.Factory.StartNew(() =>
                //{
                if (SuggestedStoreCategorySubCategoryBrands != null && SuggestedStoreCategorySubCategoryBrands.Any())
                {
                    using (var context = new AuthContext())
                    {
                        if (context.Database.Connection.State != ConnectionState.Open)
                            context.Database.Connection.Open();


                        List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                        if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                        {
                            var IdDt = new DataTable();
                            SqlParameter param = null;

                            IdDt = new DataTable();
                            IdDt.Columns.Add("categoryId");
                            IdDt.Columns.Add("companyId");
                            IdDt.Columns.Add("brandId");
                            foreach (var item in SuggestedStoreCategorySubCategoryBrands)
                            {
                                var dr = IdDt.NewRow();
                                dr["categoryId"] = item.Categoryid;
                                dr["companyId"] = item.SubCategoryId;
                                dr["brandId"] = item.BrandId;
                                IdDt.Rows.Add(dr);
                            }

                            param = new SqlParameter("CatCompanyBrand", IdDt);
                            param.SqlDbType = SqlDbType.Structured;
                            param.TypeName = "dbo.CatCompanyBrand";


                            var IcDt = new DataTable();
                            SqlParameter param1 = null;

                            IcDt = new DataTable();
                            IcDt.Columns.Add("stringValue");
                            if (IncentiveClassification.Count > 0)
                            {
                                foreach (var item in IncentiveClassification)
                                {
                                    var dr = IcDt.NewRow();
                                    dr["stringValue"] = item;
                                    IcDt.Rows.Add(dr);
                                }
                            }

                            param1 = new SqlParameter("Classification", IcDt);
                            param1.SqlDbType = SqlDbType.Structured;
                            param1.TypeName = "dbo.stringValues";

                            var cmd = context.Database.Connection.CreateCommand();
                            cmd.CommandText = "[dbo].[GetItemforSalesApp]";
                            cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                            cmd.Parameters.Add(param);
                            cmd.Parameters.Add(param1);
                            cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                            cmd.Parameters.Add(new SqlParameter("@ScoreFrom", suggestedscorefrom));
                            cmd.Parameters.Add(new SqlParameter("@ScoreTo", suggestedscoreto));
                            cmd.Parameters.Add(new SqlParameter("@skip", suggestedskip * suggestedTake));
                            cmd.Parameters.Add(new SqlParameter("@take", suggestedTake));
                            cmd.Parameters.Add(new SqlParameter("@orderby", suggestedorderby));
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;

                            // Run the sproc
                            var reader = cmd.ExecuteReader();
                            ItemData = ((IObjectContextAdapter)context)
                            .ObjectContext
                            .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                            reader.NextResult();
                            //if (reader.Read())
                            //{
                            //    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                            //}
                        }
                        else
                        {
                            ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                            var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesCatelogElasticData(warehouseId, SuggestedStoreCategorySubCategoryBrands, null, "", suggestedscorefrom, suggestedscoreto, (suggestedskip * suggestedTake), suggestedTake, suggestedorderby, true, IncentiveClassification));
                            ItemData = data.ItemMasters;
                            // itemResponseDc.TotalItem = data.TotalItem;

                        }

                        if (ItemData.Any())
                        {
                            basetake = take - suggestedTake;
                        }

                        var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                        BackendOrderController backendOrderController = new BackendOrderController();
                        foreach (var it in ItemData)
                        {
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }

                            it.Itemtype = 2;
                            it.Sequence = suggestedIndex;
                            ItemDataDCs.Add(it);
                        }

                        //itemResponseDc.ItemDataDCs.AddRange(ItemDataDCs);

                    }

                }
                //});
                //taskList.Add(tasksuggestedItem);
            }
            //--promotional Item
            if (isPromotionalShow && promotionaltake > 0)
            {
                //var taskpromotionalItem = Task.Factory.StartNew(() =>
                //{
                if (brandId != 0 && PromotionalStoreCategorySubCategoryBrands != null && PromotionalStoreCategorySubCategoryBrands.Any())
                {
                    using (var context = new AuthContext())
                    {
                        if (context.Database.Connection.State != ConnectionState.Open)
                            context.Database.Connection.Open();

                        if (PromotionalStoreCategorySubCategoryBrands != null && PromotionalStoreCategorySubCategoryBrands.Any())
                        {
                            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                            if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                            {
                                var IdDt = new DataTable();
                                SqlParameter param = null;

                                IdDt = new DataTable();
                                IdDt.Columns.Add("categoryId");
                                IdDt.Columns.Add("companyId");
                                IdDt.Columns.Add("brandId");
                                foreach (var item in PromotionalStoreCategorySubCategoryBrands)
                                {
                                    var dr = IdDt.NewRow();
                                    dr["categoryId"] = item.Categoryid;
                                    dr["companyId"] = item.SubCategoryId;
                                    dr["brandId"] = item.BrandId;
                                    IdDt.Rows.Add(dr);
                                }

                                param = new SqlParameter("CatCompanyBrand", IdDt);
                                param.SqlDbType = SqlDbType.Structured;
                                param.TypeName = "dbo.CatCompanyBrand";

                                var IcDt = new DataTable();
                                SqlParameter param1 = null;

                                IcDt = new DataTable();
                                IcDt.Columns.Add("stringValue");
                                if (IncentiveClassification.Count > 0)
                                {
                                    foreach (var item in IncentiveClassification)
                                    {
                                        var dr = IcDt.NewRow();
                                        dr["stringValue"] = item;
                                        IcDt.Rows.Add(dr);
                                    }
                                }

                                param1 = new SqlParameter("Classification", IcDt);
                                param1.SqlDbType = SqlDbType.Structured;
                                param1.TypeName = "dbo.stringValues";

                                var cmd = context.Database.Connection.CreateCommand();
                                cmd.CommandText = "[dbo].[GetPromotionalItemforSalesApp]";
                                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                                cmd.Parameters.Add(param);
                                cmd.Parameters.Add(param1);
                                cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                                cmd.Parameters.Add(new SqlParameter("@promotionalNewLaunch", promotionalNewLaunch));
                                cmd.Parameters.Add(new SqlParameter("@promotionalItems", promotionalItem));
                                cmd.Parameters.Add(new SqlParameter("@skip", promotionalskip * promotionaltake));
                                cmd.Parameters.Add(new SqlParameter("@take", promotionaltake));
                                cmd.Parameters.Add(new SqlParameter("@orderby", promotionalorderby));
                                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                                // Run the sproc
                                var reader = cmd.ExecuteReader();
                                ItemData = ((IObjectContextAdapter)context)
                                .ObjectContext
                                .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                                reader.NextResult();
                                //if (reader.Read())
                                //{
                                //    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                                //}
                            }
                            else
                            {
                                var ItemNumbersList = new List<string>();
                                if (promotionalNewLaunch)
                                {
                                    string query = "Exec GetNewLaunchItemNumbers";
                                    var NewLaunchItems = context.Database.SqlQuery<string>(query).ToList();
                                    ItemNumbersList.AddRange(NewLaunchItems);
                                }
                                if (promotionalItem || (!promotionalNewLaunch && !promotionalItem))
                                {
                                    string query = "Exec GetPromotionalItemNumber " + PeopleId + "," + warehouseId + ",0";
                                    var promotionalItems = context.Database.SqlQuery<string>(query).ToList();
                                    ItemNumbersList.AddRange(promotionalItems);
                                }
                                ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                                var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesPromotionalCatelogElasticData(warehouseId, PromotionalStoreCategorySubCategoryBrands, ItemNumbersList, "", (promotionalskip * promotionaltake), promotionaltake, promotionalorderby, true, IncentiveClassification));
                                ItemData = data.ItemMasters;
                                // itemResponseDc.TotalItem = data.TotalItem;
                            }
                            if (ItemData.Any() && isSuggestShow && suggestedTake > 0 && ItemDataDCs.Count > 0)
                                basetake = basetake - promotionaltake;
                            else if (ItemData.Any() && ItemData.Count > 0)
                                basetake = take - promotionaltake;


                            var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                            var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                            BackendOrderController backendOrderController = new BackendOrderController();
                            foreach (var it in ItemData)
                            {
                                double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                                it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                                //Condition for offer end
                                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                                {
                                    if (it.OfferCategory == 2)
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                    else if (it.OfferCategory == 1)
                                    {
                                        it.IsOffer = false;
                                        it.OfferCategory = 0;
                                    }

                                }
                                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;

                                }

                                if (it.OfferCategory == 1)
                                {
                                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                        it.IsOffer = true;
                                    else
                                        it.IsOffer = false;
                                }

                                try
                                {
                                    if (!it.IsOffer)
                                    {
                                        /// Dream Point Logic && Margin Point
                                        int? MP, PP;
                                        double xPoint = xPointValue * 10;
                                        //Customer (0.2 * 10=1)
                                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                        {
                                            PP = 0;
                                        }
                                        else
                                        {
                                            PP = it.promoPerItems;
                                        }
                                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                        {
                                            MP = 0;
                                        }
                                        else
                                        {
                                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                        }
                                        if (PP > 0 && MP > 0)
                                        {
                                            int? PP_MP = PP + MP;
                                            it.dreamPoint = PP_MP;
                                        }
                                        else if (MP > 0)
                                        {
                                            it.dreamPoint = MP;
                                        }
                                        else if (PP > 0)
                                        {
                                            it.dreamPoint = PP;
                                        }
                                        else
                                        {
                                            it.dreamPoint = 0;
                                        }
                                    }
                                    else { it.dreamPoint = 0; }

                                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                    if (it.price > it.UnitPrice)
                                    {
                                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                    }
                                    else
                                    {
                                        it.marginPoint = 0;
                                    }
                                }
                                catch { }

                                if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                                {
                                    if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                    }
                                    else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                    }

                                    else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName; //item display name
                                    }
                                    else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                    }
                                }
                                it.Itemtype = 3;
                                it.Sequence = promotionalIndex;
                                ItemDataDCs.Add(it);
                            }

                            // itemResponseDc.ItemDataDCs.AddRange(ItemDataDCs);
                        }

                    }

                }
                //});
                //taskList.Add(taskpromotionalItem);
            }
            //Task.WaitAll(taskList.ToArray());
            //--- Base Item
            //var taskbaseItem = Task.Factory.StartNew(() =>
            //{
            if ((basetake == basedefaultitem) && ItemDataDCs.Count == 0)
            {
                basetake = take;
            }
            /*else
            {
                basetake = basedefaultitem;
            }*/
            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any() && basetake > 0)
            {
                using (var context = new AuthContext())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();


                    List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                    if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                    {
                        var IdDt = new DataTable();
                        SqlParameter param = null;

                        IdDt = new DataTable();
                        IdDt.Columns.Add("categoryId");
                        IdDt.Columns.Add("companyId");
                        IdDt.Columns.Add("brandId");
                        foreach (var item in StoreCategorySubCategoryBrands)
                        {
                            var dr = IdDt.NewRow();
                            dr["categoryId"] = item.Categoryid;
                            dr["companyId"] = item.SubCategoryId;
                            dr["brandId"] = item.BrandId;
                            IdDt.Rows.Add(dr);
                        }

                        param = new SqlParameter("CatCompanyBrand", IdDt);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.CatCompanyBrand";

                        var IcDt = new DataTable();
                        SqlParameter param1 = null;

                        IcDt = new DataTable();
                        IcDt.Columns.Add("stringValue");
                        if (IncentiveClassification.Count > 0)
                        {
                            foreach (var item in IncentiveClassification)
                            {
                                var dr = IcDt.NewRow();
                                dr["stringValue"] = item;
                                IcDt.Rows.Add(dr);
                            }
                        }

                        param1 = new SqlParameter("Classification", IcDt);
                        param1.SqlDbType = SqlDbType.Structured;
                        param1.TypeName = "dbo.stringValues";

                        var cmd = context.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[GetItemforSalesApp]";
                        cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                        cmd.Parameters.Add(param);
                        cmd.Parameters.Add(param1);
                        cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                        cmd.Parameters.Add(new SqlParameter("@ScoreFrom", basescorefrom));
                        cmd.Parameters.Add(new SqlParameter("@ScoreTo", basescoreto));
                        cmd.Parameters.Add(new SqlParameter("@skip", (baseskip * basetake)));
                        cmd.Parameters.Add(new SqlParameter("@take", basetake));
                        cmd.Parameters.Add(new SqlParameter("@orderby", baseorderby));

                        cmd.CommandType = System.Data.CommandType.StoredProcedure;

                        // Run the sproc
                        var reader = cmd.ExecuteReader();
                        ItemData = ((IObjectContextAdapter)context)
                        .ObjectContext
                        .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                        reader.NextResult();
                        if (reader.Read())
                        {
                            itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                        }
                    }
                    else
                    {
                        var StoreCategorySubCategory = Mapper.Map(StoreCategorySubCategoryBrands).ToANew<List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>>();
                        ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                        var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesBaseCatelogElasticData(warehouseId, StoreCategorySubCategory, null, "", (baseskip * basetake), basetake, baseorderby, true, IncentiveClassification));
                        ItemData = Mapper.Map(data.ItemMasters).ToANew<List<DataContracts.External.MobileExecutiveDC.ItemDataDC>>();
                        itemResponseDc.TotalItem = data.TotalItem;
                    }

                    var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                    if (ItemData != null && ItemData.Any())
                    {
                        BackendOrderController backendOrderController = new BackendOrderController();
                        foreach (var it in ItemData)
                        {
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }

                            it.Itemtype = 1;
                            it.Sequence = baseIndex;
                            ItemDataDCs.Add(it);
                        }
                    }
                    /* else
                     {
                         ItemDataDCs = new List<DataContracts.External.ItemDataDC>();
                     }*/

                }

            }

            //});

            //taskList.Add(taskbaseItem);

            if (ItemDataDCs != null && ItemDataDCs.Any())
            {
                var enddate = DateTime.Now.Date.ToString("yyyy-MM-dd");
                var startDate = DateTime.Now.AddMonths(-9).Date.ToString("yyyy-MM-dd");
                var itemmultiMrpIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                List<DataContracts.External.orderMrpData> orderdetails = new List<DataContracts.External.orderMrpData>();
                ParallelLoopResult parellelResult = Parallel.ForEach(itemmultiMrpIds, (mrpid) =>
                {
                    //    foreach (var mrpid in itemmultiMrpIds)
                    //{
                    string query = $"SELECT top 1 itemmultimrpid,createddate createddate, ordqty Qty from skorderdata_{AppConstants.Environment} where itemmultimrpid in ({ mrpid })   and whid={warehouseId} and custid={customerId}  and createddate>='{startDate}' and createddate <= '{enddate}'  order by createddate desc";

                    ElasticSqlHelper<DataContracts.External.orderMrpData> elasticSqlHelper = new ElasticSqlHelper<DataContracts.External.orderMrpData>();
                    var order = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).FirstOrDefault());
                    if (order != null)
                        orderdetails.Add(order);
                });


                /*MongoDbHelper<MongoOrderMaster> mongoDbHelper = new MongoDbHelper<MongoOrderMaster>();
               
                var orderPredicate = PredicateBuilder.New<MongoOrderMaster>(x => x.Status != "Inactive" && x.Status != "Dummy Order Cancelled" && !x.Deleted
                                                    && x.CustomerId == customerId && x.WarehouseId == warehouseId
                                                    // && x.orderDetails.Any(y => itemmultiMrpIds.Contains(y.ItemMultiMRPId)
                                                    // && x.CreatedDate >= startDate && x.CreatedDate <= enddate
                                                    );
                var ordercollection = mongoDbHelper.mongoDatabase.GetCollection<MongoOrderMaster>("MongoOrderMaster").AsQueryable();
                var orderdetails = ordercollection.Where(orderPredicate)
                                    .SelectMany(t => t.orderDetails, (t, a) => new
                                    {
                                        CreatedDate = t.CreatedDate,
                                        ItemMultiMRPId = a.ItemMultiMRPId,
                                        Qty = a.qty
                                    }).Where(x => itemmultiMrpIds.Contains(x.ItemMultiMRPId))
                                    .ToList();
*/
                var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                using (var context = new AuthContext())
                {
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                }
                if (parellelResult.IsCompleted)
                {
                    List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                    if (ItemDataDCs != null && ItemDataDCs.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemDataDCs.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    }

                    foreach (var item in ItemDataDCs)
                    {
                        item.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.Classification;
                        item.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.BackgroundRgbColor;


                        if (orderdetails != null && orderdetails.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId))
                        {
                            item.LastOrderDate = orderdetails.Where(x => x.ItemMultiMRPId == item.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().CreatedDate;
                            item.LastOrderQty = orderdetails.Where(x => x.ItemMultiMRPId == item.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().Qty;
                            item.LastOrderDays = (DateTime.Today - item.LastOrderDate).Value.Days;
                        }

                        if (item.price > item.UnitPrice)
                        {
                            item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = item.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }

                        }
                        else
                        {
                            item.marginPoint = 0;
                        }
                    }
                }
                itemResponseDc.ItemDataDCs = ItemDataDCs.GroupBy(x => new { x.ItemNumber, x.Itemtype }).Select(x => new SalesAppItemDataDC
                {
                    BaseCategoryId = x.FirstOrDefault().BaseCategoryId,
                    BillLimitQty = x.FirstOrDefault().BillLimitQty,
                    Categoryid = x.FirstOrDefault().Categoryid,
                    CompanyId = x.FirstOrDefault().CompanyId,
                    dreamPoint = x.FirstOrDefault().dreamPoint,
                    HindiName = x.FirstOrDefault().HindiName,
                    IsItemLimit = x.FirstOrDefault().IsItemLimit,
                    IsOffer = x.FirstOrDefault().IsOffer,
                    ItemId = x.FirstOrDefault().ItemId,
                    ItemlimitQty = x.FirstOrDefault().ItemlimitQty,
                    ItemMultiMRPId = x.FirstOrDefault().ItemMultiMRPId,
                    itemname = x.FirstOrDefault().itemname,
                    ItemNumber = x.FirstOrDefault().ItemNumber,
                    Itemtype = x.FirstOrDefault().Itemtype,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDays = x.FirstOrDefault().LastOrderDays,
                    LastOrderQty = x.FirstOrDefault().LastOrderQty,
                    LogoUrl = x.FirstOrDefault().LogoUrl,
                    marginPoint = x.FirstOrDefault().marginPoint,
                    MinOrderQty = x.FirstOrDefault().MinOrderQty,
                    OfferCategory = x.FirstOrDefault().OfferCategory,
                    OfferFreeItemId = x.FirstOrDefault().OfferFreeItemId,
                    OfferFreeItemImage = x.FirstOrDefault().OfferFreeItemImage,
                    OfferFreeItemName = x.FirstOrDefault().OfferFreeItemName,
                    OfferFreeItemQuantity = x.FirstOrDefault().OfferFreeItemQuantity,
                    OfferId = x.FirstOrDefault().OfferId,
                    OfferMinimumQty = x.FirstOrDefault().OfferMinimumQty,
                    OfferType = x.FirstOrDefault().OfferType,
                    OfferWalletPoint = x.FirstOrDefault().OfferWalletPoint,
                    price = x.FirstOrDefault().price,
                    Sequence = x.FirstOrDefault().Sequence,
                    SubCategoryId = x.FirstOrDefault().SubCategoryId,
                    SubsubCategoryid = x.FirstOrDefault().SubsubCategoryid,
                    UnitPrice = x.FirstOrDefault().UnitPrice,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Classification = x.FirstOrDefault().Classification,
                    BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                    moqList = x.Count() > 1 ? x.Select(y => new SalesAppItemDataDC
                    {
                        isChecked = (y.ItemMultiMRPId == x.FirstOrDefault().ItemMultiMRPId && y.MinOrderQty == x.FirstOrDefault().MinOrderQty),
                        BaseCategoryId = y.BaseCategoryId,
                        BillLimitQty = y.BillLimitQty,
                        Categoryid = y.Categoryid,
                        CompanyId = y.CompanyId,
                        dreamPoint = y.dreamPoint,
                        HindiName = y.HindiName,
                        IsItemLimit = y.IsItemLimit,
                        IsOffer = y.IsOffer,
                        ItemId = y.ItemId,
                        ItemlimitQty = y.ItemlimitQty,
                        ItemMultiMRPId = y.ItemMultiMRPId,
                        itemname = y.itemname,
                        ItemNumber = y.ItemNumber,
                        Itemtype = y.Itemtype,
                        LastOrderDate = y.LastOrderDate,
                        LastOrderDays = y.LastOrderDays,
                        LastOrderQty = y.LastOrderQty,
                        LogoUrl = y.LogoUrl,
                        marginPoint = y.marginPoint,
                        MinOrderQty = y.MinOrderQty,
                        OfferCategory = y.OfferCategory,
                        OfferFreeItemId = y.OfferFreeItemId,
                        OfferFreeItemImage = y.OfferFreeItemImage,
                        OfferFreeItemName = y.OfferFreeItemName,
                        OfferFreeItemQuantity = y.OfferFreeItemQuantity,
                        OfferId = y.OfferId,
                        OfferMinimumQty = y.OfferMinimumQty,
                        OfferType = y.OfferType,
                        OfferWalletPoint = y.OfferWalletPoint,
                        price = y.price,
                        Sequence = y.Sequence,
                        SubCategoryId = y.SubCategoryId,
                        SubsubCategoryid = y.SubsubCategoryid,
                        UnitPrice = y.UnitPrice,
                        WarehouseId = y.WarehouseId,
                        Classification = x.FirstOrDefault().Classification,
                        BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                    }).ToList() : new List<SalesAppItemDataDC>()
                }).OrderBy(x => x.Sequence).ToList();

            }
            return itemResponseDc;
        }


        public List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> GetCatSubCatwithStoresNewSales(int peopleid)
        {
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> results = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            using (var context = new AuthContext())
            {
                var query = string.Format("exec IsSalesAppLead {0}", peopleid);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleid && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();

                    if (context.StoreDB.Any(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal))
                        storeids.AddRange(context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList());

                    storeids = storeids.Distinct().ToList();
                }


                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var StoreData = retailerAppManager.GetStoreWithDetailNew();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = Mapper.Map(StoreData).ToANew<List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>>();
                results = StoreCategorySubCategoryBrands.Where(x => storeids.Contains(x.StoreId)).ToList();
            }
            return results;
        }

        [Route("GetCategoryItem")]
        [HttpGet]
        public async Task<SalesItemResponseDc> GetCategoryItem(int PeopleId, int customerId, int warehouseId, int categoryId, int companyId, int brandId, int skip, int take, string lang, string IncentiveClassifications)
        {
            List<string> IncentiveClassification = new List<string>();
            IncentiveClassification = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            skip = skip / take;
            Customer ActiveCustomer = new Customer();
            var itemResponseDc = new SalesItemResponseDc { TotalItem = 0, ItemDataDCs = new List<SalesAppItemDataDC>() };


            #region variables
            var taskList = new List<Task>();
            int baseskip = 0, basetake = 0, suggestedskip = 0, suggestedTake = 0, promotionalskip = 0, promotionaltake = 0;
            string baseorderby = "ASC", suggestedorderby = "ASC", promotionalorderby = "ASC";
            int basescorefrom = -1, basescoreto = -1, suggestedscorefrom = -1, suggestedscoreto = -1,
                baseIndex = 1, suggestedIndex = 2, promotionalIndex = 2, basedefaultitem = 0;
            bool isSuggestShow = false, isPromotionalShow = false, suggestedUnbilled = false, basesUnbilled = false
                , promotionalNewLaunch = false, promotionalItem = false;


            #endregion

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStoresNewSales(PeopleId);

            #region block Barnd
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            var custtype = 4;
            var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
            if (blockBarnds != null && blockBarnds.Any())
            {
                StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
            }
            #endregion

            var PromotionalStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands;

            //var SuggestedStoreCategorySubCategoryBrands = companyId==0 && brandId==0 ? null:  StoreCategorySubCategoryBrands.Where(x => x.Categoryid == categoryId
            //                                                                 && (companyId > 0 && brandId==0 && companyId != x.SubCategoryId)
            //                                                                 && (companyId >=0 && brandId >0 && x.BrandId != brandId)).ToList();

            var SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands;
            if (companyId == 0 && brandId == 0)
            {
                int suggestedCategoryId = await GetSuggestedCategoryId(categoryId);
                if (suggestedCategoryId > 0)
                    SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.Categoryid == suggestedCategoryId).ToList();
                else
                    SuggestedStoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
                //PromotionalStoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            }
            else if (companyId > 0 && brandId == 0)
                SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.Categoryid == categoryId
                                                                              && (x.SubCategoryId != companyId)).ToList();
            else if (companyId == 0 && brandId > 0)
                SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.Categoryid == categoryId
                                                                              && (x.BrandId != brandId)).ToList();
            else if (companyId > 0 && brandId > 0)
                SuggestedStoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.Categoryid == categoryId
                                                                              && (x.SubCategoryId == companyId && x.BrandId != brandId)).ToList();

            StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.Categoryid == categoryId
                                                                            && ((brandId > 0 && x.BrandId == brandId) || (brandId == 0 && x.BrandId == x.BrandId))
                                                                            && ((companyId > 0 && x.SubCategoryId == companyId) || (companyId == 0 && x.SubCategoryId == x.SubCategoryId))).ToList();


            using (var context = new AuthContext())
            {
                ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                #region City wise configuration working
                List<CatelogConfig> categlogconfigs = new List<CatelogConfig>();
                var cityId = context.Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseId && x.active && !x.Deleted)?.Cityid;
                var Cityconfigs = context.CatelogConfigs.Where(x => x.IsActive && x.CityId == cityId).ToList();

                if (Cityconfigs != null && Cityconfigs.Any())
                {
                    categlogconfigs = Cityconfigs.ToList();
                }
                else
                {
                    categlogconfigs = context.CatelogConfigs.Where(x => x.IsActive && x.CityId == 0).ToList();
                }
                #endregion
                //var categlogconfigs = context.CatelogConfigs.Where(x => x.IsActive).ToList();
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "BaseListing"))
                {
                    baseIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").Sequence;
                    basetake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ItemCount;
                    baseskip = skip;
                    basedefaultitem = basetake;
                    baseorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").Sort;
                    baseorderby = !string.IsNullOrEmpty(baseorderby) && baseorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    basescorefrom = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ScoreFrom ?? -1);
                    basescoreto = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").ScoreTo ?? -1);
                    basesUnbilled = categlogconfigs.FirstOrDefault(x => x.ConfigName == "BaseListing").Unbilled != null ? true : false;
                }
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "SuggestedItems" && x.Status == true))
                {

                    suggestedIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Sequence;
                    suggestedTake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ItemCount;
                    suggestedskip = skip;
                    suggestedorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Sort;
                    //suggestedorderby=!string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    suggestedorderby = !string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "random"
                           ? suggestedorderby.ToUpper() : !string.IsNullOrEmpty(suggestedorderby) && suggestedorderby.ToLower() == "leastsold" ? "ASC" : "DESC";
                    suggestedscorefrom = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ScoreFrom ?? -1);
                    suggestedscoreto = Convert.ToInt16(categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").ScoreTo ?? -1);
                    suggestedUnbilled = categlogconfigs.FirstOrDefault(x => x.ConfigName == "SuggestedItems").Unbilled != null ? true : false;
                    isSuggestShow = suggestedTake > 0 ? true : false;

                }
                if (categlogconfigs != null && categlogconfigs.Any(x => x.ConfigName == "PromotionalItems" && x.Status == true))
                {

                    promotionalIndex = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").Sequence;
                    promotionaltake = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").ItemCount;
                    promotionalskip = skip;
                    promotionalorderby = categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").Sort;
                    promotionalorderby = !string.IsNullOrEmpty(promotionalorderby) && promotionalorderby.ToLower() == "custom" ? "Custom" : "Random";
                    promotionalNewLaunch = (bool)categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").NewLaunch;
                    promotionalItem = (bool)categlogconfigs.FirstOrDefault(x => x.ConfigName == "PromotionalItems").PromotionalItems;

                    isPromotionalShow = promotionaltake > 0 ? true : false;
                }



            }

            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();

            //--Suggested Item            
            if (isSuggestShow)
            {
                //var tasksuggestedItem = Task.Factory.StartNew(() =>
                //{
                if (SuggestedStoreCategorySubCategoryBrands != null && SuggestedStoreCategorySubCategoryBrands.Any())
                {
                    using (var context = new AuthContext())
                    {
                        List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                        if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                        {
                            if (context.Database.Connection.State != ConnectionState.Open)
                                context.Database.Connection.Open();

                            var IdDt = new DataTable();
                            SqlParameter param = null;

                            IdDt = new DataTable();
                            IdDt.Columns.Add("categoryId");
                            IdDt.Columns.Add("companyId");
                            IdDt.Columns.Add("brandId");
                            foreach (var item in SuggestedStoreCategorySubCategoryBrands)
                            {
                                var dr = IdDt.NewRow();
                                dr["categoryId"] = item.Categoryid;
                                dr["companyId"] = item.SubCategoryId;
                                dr["brandId"] = item.BrandId;
                                IdDt.Rows.Add(dr);
                            }

                            param = new SqlParameter("CatCompanyBrand", IdDt);
                            param.SqlDbType = SqlDbType.Structured;
                            param.TypeName = "dbo.CatCompanyBrand";

                            var IcDt = new DataTable();
                            SqlParameter param1 = null;

                            IcDt = new DataTable();
                            IcDt.Columns.Add("stringValue");
                            if (IncentiveClassification.Count > 0)
                            {
                                foreach (var item in IncentiveClassification)
                                {
                                    var dr = IcDt.NewRow();
                                    dr["stringValue"] = item;
                                    IcDt.Rows.Add(dr);
                                }
                            }

                            param1 = new SqlParameter("Classification", IcDt);
                            param1.SqlDbType = SqlDbType.Structured;
                            param1.TypeName = "dbo.stringValues";

                            var cmd = context.Database.Connection.CreateCommand();
                            cmd.CommandText = "[dbo].[GetItemforSalesApp]";
                            cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                            cmd.Parameters.Add(param);
                            cmd.Parameters.Add(param1);
                            cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                            cmd.Parameters.Add(new SqlParameter("@ScoreFrom", suggestedscorefrom));
                            cmd.Parameters.Add(new SqlParameter("@ScoreTo", suggestedscoreto));
                            cmd.Parameters.Add(new SqlParameter("@skip", (suggestedskip * suggestedTake)));
                            cmd.Parameters.Add(new SqlParameter("@take", suggestedTake));
                            //cmd.Parameters.Add(new SqlParameter("@Unbilled", suggestedUnbilled));
                            cmd.Parameters.Add(new SqlParameter("@orderby", suggestedorderby));

                            cmd.CommandType = System.Data.CommandType.StoredProcedure;

                            // Run the sproc
                            var reader = cmd.ExecuteReader();
                            ItemData = ((IObjectContextAdapter)context)
                            .ObjectContext
                            .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                            reader.NextResult();
                            //if (reader.Read())
                            //{
                            //    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                            //}
                        }
                        else
                        {
                            ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                            var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesSuggestedCatelogElasticData(warehouseId, SuggestedStoreCategorySubCategoryBrands, null, "", suggestedscorefrom, suggestedscoreto, (suggestedskip * suggestedTake), suggestedTake, suggestedorderby, true, IncentiveClassification));
                            ItemData = data.ItemMasters;
                            // itemResponseDc.TotalItem = data.TotalItem;

                        }
                        if (ItemData.Any())
                        {
                            int ItemDataCount = ItemData.GroupBy(x => new { x.ItemNumber, x.WarehouseId, x.Rating }).Count();
                            basetake = take - (ItemDataCount == suggestedTake ? suggestedTake : ItemDataCount);
                        }

                        var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                        List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                        if (ItemData != null && ItemData.Any())
                        {
                            ItemMasterManager itemMasterManager = new ItemMasterManager();
                            itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                        }

                        BackendOrderController backendOrderController = new BackendOrderController();
                        foreach (var it in ItemData)
                        {

                            it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                            it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }

                            it.Itemtype = 2;
                            it.Sequence = suggestedIndex;
                            ItemDataDCs.Add(it);
                        }

                        //itemResponseDc.ItemDataDCs.AddRange(ItemDataDCs);

                    }

                }
                //});
                //taskList.Add(tasksuggestedItem);
            }
            //--promotional Item
            if (isPromotionalShow)
            {
                //var taskpromotionalItem = Task.Factory.StartNew(() =>
                //{
                if (PromotionalStoreCategorySubCategoryBrands != null && PromotionalStoreCategorySubCategoryBrands.Any())
                {
                    using (var context = new AuthContext())
                    {
                        List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                        if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                        {
                            if (context.Database.Connection.State != ConnectionState.Open)
                                context.Database.Connection.Open();

                            var IdDt = new DataTable();
                            SqlParameter param = null;

                            IdDt = new DataTable();
                            IdDt.Columns.Add("categoryId");
                            IdDt.Columns.Add("companyId");
                            IdDt.Columns.Add("brandId");
                            foreach (var item in PromotionalStoreCategorySubCategoryBrands)
                            {
                                var dr = IdDt.NewRow();
                                dr["categoryId"] = item.Categoryid;
                                dr["companyId"] = item.SubCategoryId;
                                dr["brandId"] = item.BrandId;
                                IdDt.Rows.Add(dr);
                            }

                            param = new SqlParameter("CatCompanyBrand", IdDt);
                            param.SqlDbType = SqlDbType.Structured;
                            param.TypeName = "dbo.CatCompanyBrand";

                            var IcDt = new DataTable();
                            SqlParameter param1 = null;

                            IcDt = new DataTable();
                            IcDt.Columns.Add("stringValue");
                            if (IncentiveClassification.Count > 0)
                            {
                                foreach (var item in IncentiveClassification)
                                {
                                    var dr = IcDt.NewRow();
                                    dr["stringValue"] = item;
                                    IcDt.Rows.Add(dr);
                                }
                            }

                            param1 = new SqlParameter("Classification", IcDt);
                            param1.SqlDbType = SqlDbType.Structured;
                            param1.TypeName = "dbo.stringValues";

                            var cmd = context.Database.Connection.CreateCommand();
                            cmd.CommandText = "[dbo].[GetPromotionalItemforSalesApp]";
                            cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                            cmd.Parameters.Add(param);
                            cmd.Parameters.Add(param1);
                            cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                            cmd.Parameters.Add(new SqlParameter("@promotionalNewLaunch", promotionalNewLaunch));
                            cmd.Parameters.Add(new SqlParameter("@promotionalItems", promotionalItem));
                            cmd.Parameters.Add(new SqlParameter("@skip", (promotionalskip * promotionaltake)));
                            cmd.Parameters.Add(new SqlParameter("@take", promotionaltake));
                            cmd.Parameters.Add(new SqlParameter("@orderby", promotionalorderby));
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;

                            // Run the sproc
                            var reader = cmd.ExecuteReader();
                            ItemData = ((IObjectContextAdapter)context)
                            .ObjectContext
                            .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                            reader.NextResult();
                            //if (reader.Read())
                            //{
                            //    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                            //}

                        }
                        else
                        {
                            var ItemNumbersList = new List<string>();
                            if (promotionalNewLaunch)
                            {
                                string query = "Exec GetNewLaunchItemNumbers";
                                var NewLaunchItems = context.Database.SqlQuery<string>(query).ToList();
                                ItemNumbersList.AddRange(NewLaunchItems);
                            }
                            if (promotionalItem || (!promotionalNewLaunch && !promotionalItem))
                            {
                                string query = "Exec GetPromotionalItemNumber " + PeopleId + "," + warehouseId + ",0";
                                var promotionalItems = context.Database.SqlQuery<string>(query).ToList();
                                ItemNumbersList.AddRange(promotionalItems);
                            }
                            ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                            var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesPromotionalCatelogElasticData(warehouseId, PromotionalStoreCategorySubCategoryBrands, ItemNumbersList, "", (promotionalskip * promotionaltake), promotionaltake, promotionalorderby, true, IncentiveClassification));
                            ItemData = data.ItemMasters;
                            // itemResponseDc.TotalItem = data.TotalItem;
                        }

                        if (ItemData.Any() && isSuggestShow && suggestedTake > 0 && ItemDataDCs.Count > 0)
                        {
                            int ItemDataCount = ItemData.GroupBy(x => new { x.ItemNumber, x.WarehouseId, x.Rating }).Count();
                            basetake = basetake - (ItemDataCount == promotionaltake ? promotionaltake : ItemDataCount);
                        }
                        else if (ItemData.Any() && ItemData.Count > 0)
                        {
                            int ItemDataCount = ItemData.GroupBy(x => new { x.ItemNumber, x.WarehouseId, x.Rating }).Count();
                            basetake = take - (ItemDataCount == promotionaltake ? promotionaltake : ItemDataCount);
                        }

                        var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                        List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                        if (ItemData != null && ItemData.Any())
                        {
                            ItemMasterManager itemMasterManager = new ItemMasterManager();
                            itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                        }

                        BackendOrderController backendOrderController = new BackendOrderController();
                        foreach (var it in ItemData)
                        {

                            it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                            it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                            it.Itemtype = 3;
                            it.Sequence = promotionalIndex;
                            ItemDataDCs.Add(it);
                        }

                        // itemResponseDc.ItemDataDCs.AddRange(ItemDataDCs);

                    }

                }
                //});
                //taskList.Add(taskpromotionalItem);
            }

            //Task.WaitAll(taskList.ToArray());
            //--- Base Item
            //var taskbaseItem = Task.Factory.StartNew(() =>
            //{
            if ((basetake == basedefaultitem) && ItemDataDCs.Count == 0)
            {
                basetake = take;
            }
            //else
            //{
            //    basetake = basedefaultitem;
            //}
            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
            {
                using (var context = new AuthContext())
                {
                    List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                    if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                    {
                        if (context.Database.Connection.State != ConnectionState.Open)

                            context.Database.Connection.Open();
                        var IdDt = new DataTable();
                        SqlParameter param = null;

                        IdDt = new DataTable();
                        IdDt.Columns.Add("categoryId");
                        IdDt.Columns.Add("companyId");
                        IdDt.Columns.Add("brandId");
                        foreach (var item in StoreCategorySubCategoryBrands)
                        {
                            var dr = IdDt.NewRow();
                            dr["categoryId"] = item.Categoryid;
                            dr["companyId"] = item.SubCategoryId;
                            dr["brandId"] = item.BrandId;
                            IdDt.Rows.Add(dr);
                        }

                        param = new SqlParameter("CatCompanyBrand", IdDt);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.CatCompanyBrand";

                        var IcDt = new DataTable();
                        SqlParameter param1 = null;

                        IcDt = new DataTable();
                        IcDt.Columns.Add("stringValue");
                        if (IncentiveClassification.Count > 0)
                        {
                            foreach (var item in IncentiveClassification)
                            {
                                var dr = IcDt.NewRow();
                                dr["stringValue"] = item;
                                IcDt.Rows.Add(dr);
                            }
                        }

                        param1 = new SqlParameter("Classification", IcDt);
                        param1.SqlDbType = SqlDbType.Structured;
                        param1.TypeName = "dbo.stringValues";

                        var cmd = context.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[GetItemforSalesApp]";
                        cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                        cmd.Parameters.Add(param);
                        cmd.Parameters.Add(param1);
                        cmd.Parameters.Add(new SqlParameter("@SearchKeyWord", ""));
                        cmd.Parameters.Add(new SqlParameter("@ScoreFrom", basescorefrom));
                        cmd.Parameters.Add(new SqlParameter("@ScoreTo", basescoreto));
                        cmd.Parameters.Add(new SqlParameter("@skip", (baseskip * basetake)));
                        cmd.Parameters.Add(new SqlParameter("@take", basetake));
                        //cmd.Parameters.Add(new SqlParameter("@Unbilled", basesUnbilled));
                        cmd.Parameters.Add(new SqlParameter("@orderby", baseorderby));

                        cmd.CommandType = System.Data.CommandType.StoredProcedure;

                        // Run the sproc
                        var reader = cmd.ExecuteReader();
                        ItemData = ((IObjectContextAdapter)context)
                        .ObjectContext
                        .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                        reader.NextResult();
                        if (reader.Read())
                        {
                            itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                        }
                    }
                    else
                    {
                        ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                        var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesBaseCatelogElasticData(warehouseId, StoreCategorySubCategoryBrands, null, "", (baseskip * basetake), basetake, baseorderby, true, IncentiveClassification));
                        ItemData = data.ItemMasters;
                        itemResponseDc.TotalItem = data.TotalItem;
                    }

                    var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();



                    if (ItemData != null && ItemData.Any())
                    {

                        List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                        BackendOrderController backendOrderController = new BackendOrderController();
                        foreach (var it in ItemData)
                        {
                            it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                            it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }

                            it.Itemtype = 1;
                            it.Sequence = baseIndex;
                            ItemDataDCs.Add(it);
                        }
                    }
                    //--If Base Item is null then remove all suggested and Promotional Item
                    /*else
                    {
                        ItemDataDCs = new List<DataContracts.External.ItemDataDC>();
                    }*/

                }
            }

            //});

            //taskList.Add(taskbaseItem);

            if (ItemDataDCs != null && ItemDataDCs.Any())
            {
                var enddate = DateTime.Now.Date.ToString("yyyy-MM-dd");
                var startDate = DateTime.Now.AddMonths(-9).Date.ToString("yyyy-MM-dd");
                var itemmultiMrpIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();


                string query = $"SELECT  itemmultimrpid,max(createddate) createddate, first(ordqty) Qty from skorderdata_{AppConstants.Environment} where itemmultimrpid in ({ string.Join(",", itemmultiMrpIds) })   and whid={warehouseId} and custid={customerId}  and createddate>='{startDate}' and createddate <= '{enddate}'  group by itemmultimrpid";

                ElasticSqlHelper<orderMrpData> elasticSqlHelper = new ElasticSqlHelper<orderMrpData>();

                var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).ToList());


                /*var itemmultiMrpIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                MongoDbHelper<MongoOrderMaster> mongoDbHelper = new MongoDbHelper<MongoOrderMaster>();
                var enddate = DateTime.Now;
                var startDate = enddate.AddMonths(-9);
                var orderPredicate = PredicateBuilder.New<MongoOrderMaster>(x => x.Status != "Inactive" && x.Status != "Dummy Order Cancelled" && !x.Deleted
                                                    && x.CustomerId == customerId && x.WarehouseId == warehouseId
                                                    // && x.orderDetails.Any(y => itemmultiMrpIds.Contains(y.ItemMultiMRPId)
                                                    // && x.CreatedDate >= startDate && x.CreatedDate <= enddate
                                                    );
                var ordercollection = mongoDbHelper.mongoDatabase.GetCollection<MongoOrderMaster>("MongoOrderMaster").AsQueryable();
                var orderdetails = ordercollection.Where(orderPredicate)
                                    .SelectMany(t => t.orderDetails, (t, a) => new
                                    {
                                        CreatedDate = t.CreatedDate,
                                        ItemMultiMRPId = a.ItemMultiMRPId,
                                        Qty = a.qty
                                    }).Where(x => itemmultiMrpIds.Contains(x.ItemMultiMRPId))
                                    .ToList();
    */
                var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                using (var context = new AuthContext())
                {
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                }
                foreach (var item in ItemDataDCs)
                {
                    if (orderdetails != null && orderdetails.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId))
                    {
                        item.LastOrderDate = orderdetails.Where(x => x.ItemMultiMRPId == item.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().CreatedDate;
                        item.LastOrderQty = orderdetails.Where(x => x.ItemMultiMRPId == item.ItemMultiMRPId).OrderByDescending(x => x.CreatedDate).FirstOrDefault().Qty;
                        item.LastOrderDays = (DateTime.Today - item.LastOrderDate).Value.Days;
                    }
                    if (item.price > item.UnitPrice)
                    {
                        item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                        if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                        {
                            var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                            var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                            var UPMRPMargin = item.marginPoint.Value;
                            if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                        }

                    }
                    else
                    {
                        item.marginPoint = 0;
                    }
                }

                itemResponseDc.ItemDataDCs = ItemDataDCs.GroupBy(x => new { x.ItemNumber, x.Itemtype }).Select(x => new SalesAppItemDataDC
                {
                    BaseCategoryId = x.FirstOrDefault().BaseCategoryId,
                    BillLimitQty = x.FirstOrDefault().BillLimitQty,
                    Categoryid = x.FirstOrDefault().Categoryid,
                    CompanyId = x.FirstOrDefault().CompanyId,
                    dreamPoint = x.FirstOrDefault().dreamPoint,
                    HindiName = x.FirstOrDefault().HindiName,
                    IsItemLimit = x.FirstOrDefault().IsItemLimit,
                    IsOffer = x.FirstOrDefault().IsOffer,
                    ItemId = x.FirstOrDefault().ItemId,
                    ItemlimitQty = x.FirstOrDefault().ItemlimitQty,
                    ItemMultiMRPId = x.FirstOrDefault().ItemMultiMRPId,
                    itemname = x.FirstOrDefault().itemname,
                    ItemNumber = x.FirstOrDefault().ItemNumber,
                    Itemtype = x.FirstOrDefault().Itemtype,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDays = x.FirstOrDefault().LastOrderDays,
                    LastOrderQty = x.FirstOrDefault().LastOrderQty,
                    LogoUrl = x.FirstOrDefault().LogoUrl,
                    marginPoint = x.FirstOrDefault().marginPoint,
                    MinOrderQty = x.FirstOrDefault().MinOrderQty,
                    OfferCategory = x.FirstOrDefault().OfferCategory,
                    OfferFreeItemId = x.FirstOrDefault().OfferFreeItemId,
                    OfferFreeItemImage = x.FirstOrDefault().OfferFreeItemImage,
                    OfferFreeItemName = x.FirstOrDefault().OfferFreeItemName,
                    OfferFreeItemQuantity = x.FirstOrDefault().OfferFreeItemQuantity,
                    OfferId = x.FirstOrDefault().OfferId,
                    OfferMinimumQty = x.FirstOrDefault().OfferMinimumQty,
                    OfferType = x.FirstOrDefault().OfferType,
                    OfferWalletPoint = x.FirstOrDefault().OfferWalletPoint,
                    price = x.FirstOrDefault().price,
                    Sequence = x.FirstOrDefault().Sequence,
                    SubCategoryId = x.FirstOrDefault().SubCategoryId,
                    SubsubCategoryid = x.FirstOrDefault().SubsubCategoryid,
                    UnitPrice = x.FirstOrDefault().UnitPrice,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Scheme = x.FirstOrDefault().Scheme,
                    Classification = x.FirstOrDefault().Classification,
                    BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                    moqList = x.Count() > 1 ? x.Select(y => new SalesAppItemDataDC
                    {
                        isChecked = (y.ItemMultiMRPId == x.FirstOrDefault().ItemMultiMRPId && y.MinOrderQty == x.FirstOrDefault().MinOrderQty),
                        Scheme = y.Scheme,
                        BaseCategoryId = y.BaseCategoryId,
                        BillLimitQty = y.BillLimitQty,
                        Categoryid = y.Categoryid,
                        CompanyId = y.CompanyId,
                        dreamPoint = y.dreamPoint,
                        HindiName = y.HindiName,
                        IsItemLimit = y.IsItemLimit,
                        IsOffer = y.IsOffer,
                        ItemId = y.ItemId,
                        ItemlimitQty = y.ItemlimitQty,
                        ItemMultiMRPId = y.ItemMultiMRPId,
                        itemname = y.itemname,
                        ItemNumber = y.ItemNumber,
                        Itemtype = y.Itemtype,
                        LastOrderDate = y.LastOrderDate,
                        LastOrderDays = y.LastOrderDays,
                        LastOrderQty = y.LastOrderQty,
                        LogoUrl = y.LogoUrl,
                        marginPoint = y.marginPoint,
                        MinOrderQty = y.MinOrderQty,
                        OfferCategory = y.OfferCategory,
                        OfferFreeItemId = y.OfferFreeItemId,
                        OfferFreeItemImage = y.OfferFreeItemImage,
                        OfferFreeItemName = y.OfferFreeItemName,
                        OfferFreeItemQuantity = y.OfferFreeItemQuantity,
                        OfferId = y.OfferId,
                        OfferMinimumQty = y.OfferMinimumQty,
                        OfferType = y.OfferType,
                        OfferWalletPoint = y.OfferWalletPoint,
                        price = y.price,
                        Sequence = y.Sequence,
                        SubCategoryId = y.SubCategoryId,
                        SubsubCategoryid = y.SubsubCategoryid,
                        UnitPrice = y.UnitPrice,
                        WarehouseId = y.WarehouseId,
                        Classification = x.FirstOrDefault().Classification,
                        BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                    }).ToList() : new List<SalesAppItemDataDC>()
                }).OrderBy(x => x.Sequence).ToList();

            }
            return itemResponseDc;
        }


        public async Task<int> GetSuggestedCategoryId(int CategoryId)
        {
            int suggestedCategoryId = 0;
            using (var context = new AuthContext())
            {
                var suggestedCategoryDetail = context.SalesSuggestedCategoryMappings.Where(x => x.CategoryId == CategoryId || x.SuggestedCategoryId == CategoryId).FirstOrDefault();
                if (suggestedCategoryDetail != null && suggestedCategoryDetail.CategoryId > 0 && suggestedCategoryDetail.SuggestedCategoryId > 0)
                {
                    suggestedCategoryId = suggestedCategoryDetail.CategoryId == CategoryId ? suggestedCategoryDetail.SuggestedCategoryId : suggestedCategoryDetail.CategoryId;
                }
            }
            return suggestedCategoryId;
        }

        [Route("GetSectionList")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetSectionList(int PeopleId, int WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                    #region block Barnd
                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                    }
                    #endregion

                    var IdDt = new DataTable();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }

                    //var res = context.ProductCatalogs.Where(x => x.IsActive == true && x.IsDeleted == false && x.WarehouseId == WarehouseId && !x.IsPromotional).Select(x => new GetProductCatalogDC { Id = x.Id, SectionName = x.SectionName, SectionHindiName = x.SectionHindiName, Type = x.Type, URL = x.URL }).ToList();
                    //var res = context.Database.SqlQuery<GetProductCatalogDC>("exec GetProductCatalogByWId " + WarehouseId).ToList();

                    var Warehouseid = new SqlParameter("WarehouseId", WarehouseId);
                    var Peopleid = new SqlParameter("PeopleId", PeopleId);
                    var Brandlist = new SqlParameter("CatCompanyBrand", IdDt);
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetProductCatalogByWId]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(Warehouseid);
                    cmd.Parameters.Add(Peopleid);
                    cmd.Parameters.Add(Brandlist);

                    var reader = cmd.ExecuteReader();
                    List<DataContracts.External.MobileExecutiveDC.GetProductCatalogDC> ItemData = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<DataContracts.External.MobileExecutiveDC.GetProductCatalogDC>(reader).ToList();

                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = ItemData.OrderBy(x => x.Sequence).ToList() };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetProductCatalogItemsV2")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.CatalogItemListDc>> GetProductCatalogItemsV2(int PeopleId, int WarehouseId, int SectionId, string lang, int skip, int take, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            List<DataContracts.External.MobileExecutiveDC.CatalogItemListDc> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.CatalogItemListDc>();
            using (AuthContext context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId && x.Active == true && x.Deleted == false);
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                // int take = 20, skip = 0;

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                var IdDt1 = new DataTable();
                SqlParameter param = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var item in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = item;
                    IdDt1.Rows.Add(dr);
                }
                param = new SqlParameter("IncentiveClassification", IdDt1);
                param.SqlDbType = SqlDbType.Structured;
                param.TypeName = "dbo.stringValues";

                var IdDt = new DataTable();
                IdDt = new DataTable();
                IdDt.Columns.Add("categoryId");
                IdDt.Columns.Add("companyId");
                IdDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = IdDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    IdDt.Rows.Add(dr);
                }
                var param3 = new SqlParameter("CatCompanyBrand", IdDt);
                param3.SqlDbType = SqlDbType.Structured;
                param3.TypeName = "dbo.CatCompanyBrand";

                var param1 = new SqlParameter("WarehouseId", WarehouseId);
                var param2 = new SqlParameter("SectionId", SectionId);
                var param4 = new SqlParameter("skip", skip);
                var param5 = new SqlParameter("take", take);

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetProductCatalogItemsV2]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param);
                var reader = cmd.ExecuteReader();
                List<DataContracts.External.MobileExecutiveDC.CatalogItemListDc> ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<DataContracts.External.MobileExecutiveDC.CatalogItemListDc>(reader).ToList();
                reader.NextResult();
                var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (ItemData != null && ItemData.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(WarehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }

                BackendOrderController backendOrderController = new BackendOrderController();
                foreach (var it in ItemData)
                {
                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                    if (customerId > 0)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                    }

                    //Condition for offer end
                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        else if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }
                    else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;

                    }

                    if (it.OfferCategory == 1)
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }

                    if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                    {
                        if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                        }
                        else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                        }

                        else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName; //item display name
                        }
                        else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                        }
                    }

                    it.Itemtype = 1;
                    ItemDataDCs.Add(it);

                    var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, WarehouseId, context);

                    foreach (var item in ItemDataDCs)
                    {
                        if (item.price > item.UnitPrice)
                        {
                            item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = item.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }
                        }
                        else
                        {
                            item.marginPoint = 0;
                        }
                    }
                }

                return ItemDataDCs.OrderBy(x => x.marginPoint).ToList();
            }
        }


        [Route("GetAllComment")]
        [HttpGet]

        public async Task<UdharOverDueResponse> GetAllCommentAsync(int customerId = 0, int FormType = 0, int ExecutiveId = 0)
        {
            try
            {
                bool IsUdharOverDue = false;

                using (AuthContext context = new AuthContext())
                {

                    MongoDbHelper<UdharOverDueDayValidation> UdharOverDueDay = new MongoDbHelper<UdharOverDueDayValidation>();
                    var duelist = UdharOverDueDay.GetAll();
                    if (customerId > 0 && duelist != null && duelist.Any(x => x.MinOverDueDay > 0))
                    {
                        var minDay = duelist.Min(x => x.MinOverDueDay);
                        var SalesMinDay = duelist.Select(x => x.SalesMinDay).FirstOrDefault();

                        Customer customers = context.Customers.FirstOrDefault(a => a.CustomerId == customerId);
                        if (customers.UdharDueDays > 0)
                        {
                            var param1 = new SqlParameter("@CustomerId", customerId);
                            var UDData = context.Database.SqlQuery<CheckDueAmtDc>("Exec CheckDueAmt @CustomerId ", param1).FirstOrDefault();
                            if (UDData != null && UDData.Amount >= 1)
                            {
                                IsUdharOverDue = UDData.OverDueDays > (minDay - SalesMinDay) ? true : false;
                            }
                        }
                    }
                    var LastPhysicalvisit = context.CheckOutReasons.Where(x => x.CustomerId == customerId && x.ExecutiveId == ExecutiveId).OrderByDescending(x => x.Id).Select(x => x.IsPhysicalVisit).FirstOrDefault();
                    var data = context.CheckOuts.Where(x => x.IsActive == true && x.IsDeleted == false && x.FormType == FormType).ToList();
                    var res = Mapper.Map(data).ToANew<List<DataContracts.External.MobileExecutiveDC.UpdateCheckOutDC>>().OrderBy(y => y.Sequence).ToList();
                    if (data.Count > 0)
                    {
                        return new UdharOverDueResponse { Status = true, Data = res, IsUdharOverDue = IsUdharOverDue, LastPhysicalvisit = LastPhysicalvisit };
                    }
                    else
                    {
                        return new UdharOverDueResponse { Status = false, Message = "Data Not Found", IsUdharOverDue = IsUdharOverDue };
                    }
                }
            }
            catch (Exception ex)
            {
                return new UdharOverDueResponse { Status = false, Message = ex.Message, IsUdharOverDue = false };
            }
        }

        [Route("AddCheckOutReason")]
        [HttpPost]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> AddCheckOutReasonAsync(DataContracts.External.MobileExecutiveDC.AddCheckOutReason obj)
        {

            using (AuthContext context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                CheckOutReason checkOutReason = new CheckOutReason();
                checkOutReason = Mapper.Map(obj).ToANew<CheckOutReason>();
                checkOutReason.IsActive = true;
                checkOutReason.IsDeleted = false;
                checkOutReason.CreatedBy = userid;
                checkOutReason.CreatedDate = DateTime.Now;
                checkOutReason.TimeIn = obj.StartDateTime;
                checkOutReason.TimeOut = obj.EndDateTime;
                context.CheckOutReasons.Add(checkOutReason);
                if (context.Commit() > 0)
                {
                    BeatsManager manager = new BeatsManager();
                    DateTime? CheckIn = await manager.BeatStart(obj.ExecutiveId, obj.CustomerId);
                    DataContracts.External.MobileExecutiveDC.SalesAppRouteParam param = new DataContracts.External.MobileExecutiveDC.SalesAppRouteParam();
                    param.Comment = obj.Comment;
                    param.CurrentAddress = obj.CurrentAddress;
                    param.CurrentLat = obj.CurrentLat;
                    param.CurrentLng = obj.CurrentLng;
                    param.CustomerId = obj.CustomerId;
                    param.Distance = obj.Distance;
                    param.EndDateTime = obj.EndDateTime;
                    param.IsEnd = obj.IsEnd;
                    param.PeopleId = obj.ExecutiveId;
                    param.ShopCloseImage = obj.ShopCloseImage;
                    param.StartDateTime = obj.StartDateTime;
                    CheckIn = await manager.BeatActualRoute(param);


                    if (obj.FormType == 1)
                    {
                        var peopleid = new SqlParameter("@ExecutiveId", obj.ExecutiveId);
                        var peoplelist = context.Database.SqlQuery<int>("EXEC GetDigitalExecutiveId @ExecutiveId", peopleid).ToList();

                        if (obj.IsPhysicalVisit == true)
                        {
                            if (peoplelist != null && peoplelist.Any())
                            {
                                var PeopleData = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerId && peoplelist.Contains(x.ExecutiveId) && x.IsActive == true && x.IsDeleted == false).ToList();

                                peoplelist.ForEach(x =>
                                {
                                    if (!PeopleData.Any(y => y.ExecutiveId == x))
                                    {
                                        context.CustomerExecutiveMappingsBeatEditDb.Add(new CustomerExecutiveMappingsBeatEdit
                                        {
                                            ExecutiveId = x,
                                            StoreId = 1,
                                            CustomerId = (int)obj.CustomerId,
                                            Day = "NoBeat",
                                            StartDate = DateTime.Now,
                                            CreatedDate = DateTime.Now,
                                            IsActive = true,
                                            IsDeleted = false,
                                            CreatedBy = userid,
                                        });
                                    }
                                });
                                context.Commit();
                            }
                        }
                        else
                        {
                            //foreach (var PID in peoplelist)
                            peoplelist.ForEach(y =>
                            {
                                var PeopleData = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerId && x.ExecutiveId == y && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                if (PeopleData != null)
                                {
                                    PeopleData.IsActive = false;
                                    PeopleData.IsDeleted = true;
                                    PeopleData.ModifiedBy = userid;
                                    PeopleData.ModifiedDate = DateTime.Now;
                                    context.Entry(PeopleData).State = EntityState.Modified;
                                    context.Commit();
                                }
                            });
                        }
                    }
                    //return CheckIn.Value;
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved" };
                }
                else
                {
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Save" };
                }
            }

        }

        [Route("GetOfferItemForAgentV2")]
        [HttpGet]
        public HttpResponseMessage GetOfferItemForAgentV2(int PeopleId, int WarehouseId, string lang, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WROFFERTEM item = new WROFFERTEM();
                List<factoryItemdata> itemMasters = new List<factoryItemdata>();

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var ic in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = ic;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("Classification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                DataTable brandidDt = new DataTable();
                brandidDt.Columns.Add("IntValue");
                foreach (var ss in SubSubCats)
                {
                    DataRow dr = brandidDt.NewRow();
                    dr[0] = ss;
                    brandidDt.Rows.Add(dr);
                }
                var SubSubCategoryIds = new SqlParameter("SubSubCategoryIds", brandidDt);
                SubSubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubSubCategoryIds.TypeName = "dbo.IntValues";


                //var Subcatids = string.Join(",", SubCats).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable SubCatidDt = new DataTable();
                SubCatidDt.Columns.Add("IntValue");
                foreach (var ss in SubCats)
                {
                    DataRow dr = SubCatidDt.NewRow();
                    dr[0] = ss;
                    SubCatidDt.Rows.Add(dr);
                }
                var SubCategoryIds = new SqlParameter("SubCategoryIds", SubCatidDt);
                SubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubCategoryIds.TypeName = "dbo.IntValues";

                //var Categoryid = string.Join(",", CatIds).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable CatIdDt = new DataTable();
                CatIdDt.Columns.Add("IntValue");
                foreach (var id in CatIds)
                {
                    DataRow dr = CatIdDt.NewRow();
                    dr[0] = id;
                    CatIdDt.Rows.Add(dr);
                }
                var CategoryIds = new SqlParameter("CategoryIds", CatIdDt);
                CategoryIds.SqlDbType = SqlDbType.Structured;
                CategoryIds.TypeName = "dbo.IntValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetOfferItemForAgentV2]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@warehouseId", WarehouseId));
                cmd.Parameters.Add(SubSubCategoryIds);
                cmd.Parameters.Add(SubCategoryIds);
                cmd.Parameters.Add(CategoryIds);
                cmd.Parameters.Add(param1);

                // Run the sproc
                var reader = cmd.ExecuteReader();
                itemMasters = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<factoryItemdata>(reader).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    itemMasters = itemMasters.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion


                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (itemMasters != null && itemMasters.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = AsyncContext.Run(() => itemMasterManager.GetItemIncentiveClassification(WarehouseId, itemMasters.Select(s => s.ItemMultiMRPId).Distinct().ToList()));

                }


                BackendOrderController backendOrderController = new BackendOrderController();
                foreach (var it in itemMasters)
                {
                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                    if (customerId > 0)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                    }

                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {/// Dream Point Logic && Margin Point
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }
                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                    item.ItemMasters.Add(it);
                }
                if (itemMasters.Count() != 0)
                {
                    var res = new
                    {
                        offerData = itemMasters,
                        Status = true,
                        Message = "Success."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
                else
                {
                    var res = new
                    {
                        offerData = itemMasters,
                        Status = false,
                        Message = "Item Not found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }

            }
        }


        [Route("ItemListForAgentV2")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<ItemListForAgent> ItemListForAgentV2(int WarehouseId, string lang, int PeopleId, int Skip, int Take, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                ItemListForAgent item = new ItemListForAgent();

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var ic in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = ic;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("Classification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetItemForAgentAppV2]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", WarehouseId));
                cmd.Parameters.Add(new SqlParameter("@customerId", customerId));
                cmd.Parameters.Add(new SqlParameter("@Skip", Skip));
                cmd.Parameters.Add(new SqlParameter("@Take", Take));
                cmd.Parameters.Add(param1);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                var reader = cmd.ExecuteReader();
                var newdata = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<Itemdata>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    item.TotalItem = Convert.ToInt32(reader["TotalItem"]);
                }


                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (newdata != null && newdata.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(WarehouseId, newdata.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }
                BackendOrderController backendOrderController = new BackendOrderController();
                foreach (var it in newdata.Where(a => (a.ItemAppType == 0 || a.ItemAppType == 1) && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid)))
                {

                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                    if (customerId > 0)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                    }


                    if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                    {
                        it.IsOffer = false;
                    }
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;

                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }
                    }


                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }
                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<Itemdata>();
                    }
                    try
                    {/// Dream Point Logic && Margin Point
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }

                    }
                    catch { }
                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                    if (it.OfferType != "FlashDeal")
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }
                    item.ItemMasters.Add(it);
                }
                if (item.ItemMasters != null && item.ItemMasters.Any())
                {
                    item.Message = "Success";
                    item.Status = true;
                    item.ItemMasters.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                    item.ItemMasters = item.ItemMasters.OrderByDescending(x => x.marginPoint).ToList();
                    return item;
                }
                else
                {
                    item.Message = "Item Not found";
                    item.Status = false;
                    return item;
                }



            }


        }


        [Route("GetItemPriceDropByWId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetItemPriceDropByWIdAsync(int Warehouseid, int Skip, int Take)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                var date = DateTime.Now.AddDays(-2).Date;
                using (AuthContext context = new AuthContext())
                {
                    var data = (from x in context.ItemPriceDrops
                                join y in context.itemMasters
                                on x.ItemId equals y.ItemId
                                where x.WarehouseId == Warehouseid && x.IsActive == true && x.IsDeleted == false
                                && y.active == true && y.Deleted == false
                                && x.CreatedDate >= date
                                select new
                                {
                                    y.itemname,
                                    y.LogoUrl,
                                    x.UnitPrice,
                                    x.OldUnitPrice,
                                    x.CreatedDate
                                }).OrderByDescending(z => z.CreatedDate).Skip(Skip).Take(Take).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetNewLaunchItems")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetNewLaunchItemsAsync(int Warehouseid, int Skip, int Take)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var warehouseid = new SqlParameter("WarehouseId", Warehouseid);
                    var skip = new SqlParameter("Skip", Skip);
                    var take = new SqlParameter("Take", Take);
                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.NewLaunchesItemNotificationDC>("exec NewLaunchItemNotificationForSalesApp  @WarehouseId,@Skip,@Take", warehouseid, skip, take).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetNotificationByPeopleId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetNotificationByPeopleIdAsync(int WarehouseId, int PeopleId, int Skip, int Take)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var warehouseid = new SqlParameter("WarehouseId", WarehouseId);
                    var peopleid = new SqlParameter("PeopleId", PeopleId);
                    var skip = new SqlParameter("Skip", Skip);
                    var take = new SqlParameter("Take", Take);
                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.GetNotificationByPeopleDc>("exec GetNotificationBypeopleId @PeopleId,@WarehouseId,@Skip,@Take", peopleid, warehouseid, skip, take).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("getSaleIntentItem")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage getSaleIntentItem(string lang, int PeopleId, int warehouseid, int catid, int scatid, int sscatid, int Skip, int Take)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                var newdata = (from a in context.ItemMultiMRPDB
                               join b in context.ItemMasterCentralDB on a.ItemNumber equals b.Number

                               let forcast = context.ItemForecastDetailDb.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && p2.WarehouseId == warehouseid).FirstOrDefault()
                               where a.Deleted == false && b.Deleted == false
                               && ((catid > 0 && b.Categoryid == catid) || (catid == 0 && b.Categoryid == b.Categoryid))
                               && ((scatid > 0 && b.SubCategoryId == scatid) || (scatid == 0 && b.SubCategoryId == b.SubCategoryId))
                               && ((sscatid > 0 && b.SubsubCategoryid == sscatid) || (sscatid == 0 && b.SubsubCategoryid == b.SubsubCategoryid))
                               && CatIds.Contains(b.Categoryid) && SubCats.Contains(b.SubCategoryId) && SubSubCats.Contains(b.SubsubCategoryid)
                               select new
                               {
                                   Number = a.ItemNumber,
                                   itemBaseName = b.itemBaseName,
                                   IsSensitive = b.IsSensitive,
                                   IsSensitiveMRP = b.IsSensitiveMRP,
                                   UnitofQuantity = a.UnitofQuantity,
                                   UOM = a.UOM,
                                   LogoUrl = b.LogoUrl,
                                   MRP = a.MRP,
                                   HindiName = b.HindiName,
                                   ItemMultiMRPId = a.ItemMultiMRPId,
                                   SubCategoryId = b.SubCategoryId,
                                   Categoryid = b.Categoryid,
                                   SubsubCategoryid = b.SubsubCategoryid,
                                   Warehouseid = warehouseid,
                                   SystemSuggestedQty = forcast == null ? 0 : forcast.SystemSuggestedQty,

                               }).Distinct().OrderBy(x => x.itemBaseName).Skip(Skip).Take(Take).ToList();

                var itemnumberlist = newdata.Select(x => x.Number).ToList();

                var res = context.itemMasters.Where(x => itemnumberlist.Contains(x.Number) && x.WarehouseId == warehouseid && x.Deleted == false).Select(y => new { y.PurchaseMinOrderQty, y.Number }).Distinct().ToList();



                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion
                List<DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse> item = new List<DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse>();
                foreach (var si in newdata)
                {
                    DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse it = new DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse();
                    it.IsSensitive = si.IsSensitive;
                    it.IsSensitiveMRP = si.IsSensitiveMRP;
                    it.ItemMultiMRPId = si.ItemMultiMRPId;
                    it.Itemname = si.itemBaseName;
                    it.LogoUrl = si.LogoUrl;
                    it.MRP = si.MRP;
                    it.SystemForecastQty = si.SystemSuggestedQty;
                    it.WarehouseId = si.Warehouseid;
                    it.PurchaseMOQList = res.Any(x => x.Number == si.Number) ? res.Where(x => x.Number == si.Number).Select(x => x.PurchaseMinOrderQty).ToList() : new List<int>();
                    if (it.IsSensitive == true)
                    {
                        if (it.IsSensitiveMRP == false)
                        {
                            it.Itemname = si.itemBaseName + " " + si.UnitofQuantity + " " + si.UOM; //item display name   
                        }
                        else
                        {
                            it.Itemname = si.itemBaseName + " " + si.MRP + " MRP " + si.UnitofQuantity + " " + si.UOM; //item display name                               
                        }
                    }
                    else
                    {
                        it.Itemname = si.itemBaseName + " " + si.MRP + " MRP "; //item display name                               
                    }
                    if (lang.Trim() == "hi")
                    {
                        if (it.IsSensitive == true)
                        {
                            if (it.IsSensitiveMRP == false)
                            {
                                it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemBaseName : si.HindiName) + " " + si.UnitofQuantity + " " + si.UOM; //item display name   
                            }
                            else
                            {
                                it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemBaseName : si.HindiName) + " " + si.MRP + " MRP " + si.UnitofQuantity + " " + si.UOM; //item display name                               
                            }
                        }
                        else
                        {
                            it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemBaseName : si.HindiName) + " " + si.MRP + " MRP "; //item display name                               
                        }
                    }
                    item.Add(it);
                }

                return Request.CreateResponse(HttpStatusCode.OK, item);
            }
        }


        [Route("GetHistorySI")]
        [HttpGet]
        [AllowAnonymous]
        public List<SalesIntentHistoryDC> GetHistorySI(int PeopleId)
        {
            using (var context = new AuthContext())
            {
                List<SalesIntentHistoryDC> item = new List<SalesIntentHistoryDC>();

                var param = new SqlParameter("@PeopleId", PeopleId);
                var data = context.Database.SqlQuery<SalesIntentHistoryDC>("exec[SpSalesIndanteHistory] @PeopleId", param).ToList();


                return data;
            }
        }

        [Route("getSaleIntentItemSearch")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage getSaleIntentItemSearch(string lang, int PeopleId, int warehouseid, string itemName)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                List<DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse> item = new List<DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse>();
                //Increase some parameter For offer
                var newdata = (from a in context.ItemMultiMRPDB
                               join b in context.ItemMasterCentralDB on a.ItemNumber equals b.Number
                               let forcast = context.ItemForecastDetailDb.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && p2.WarehouseId == warehouseid).FirstOrDefault()
                               where a.Deleted == false && b.Deleted == false  // New Add
                                   && a.itemname.Contains(itemName)
                                   && CatIds.Contains(b.Categoryid) && SubCats.Contains(b.SubCategoryId) && SubSubCats.Contains(b.SubsubCategoryid)

                               select new
                               {
                                   ItemNumber = a.ItemNumber,
                                   itemname = b.itemBaseName,
                                   IsSensitive = b.IsSensitive,
                                   IsSensitiveMRP = b.IsSensitiveMRP,
                                   UnitofQuantity = a.UnitofQuantity,
                                   UOM = a.UOM,
                                   LogoUrl = b.LogoUrl,
                                   MRP = a.MRP,
                                   HindiName = b.HindiName,
                                   ItemMultiMRPId = a.ItemMultiMRPId,
                                   SubCategoryId = b.SubCategoryId,
                                   Categoryid = b.Categoryid,
                                   SubsubCategoryid = b.SubsubCategoryid,
                                   WarehouseId = warehouseid,
                                   SystemSuggestedQty = forcast == null ? 0 : forcast.SystemSuggestedQty
                               }).Distinct().ToList();

                var itemnumberlist = newdata.Select(x => x.ItemNumber).ToList();

                var res = context.itemMasters.Where(x => itemnumberlist.Contains(x.Number) && x.WarehouseId == warehouseid && x.Deleted == false).Select(y => new { y.PurchaseMinOrderQty, y.Number }).Distinct().ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                foreach (var si in newdata)
                {
                    DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse it = new DataContracts.External.MobileExecutiveDC.SalesIntentItemResponse();
                    it.IsSensitive = si.IsSensitive;
                    it.IsSensitiveMRP = si.IsSensitiveMRP;
                    it.ItemMultiMRPId = si.ItemMultiMRPId;
                    it.Itemname = si.itemname;
                    it.LogoUrl = si.LogoUrl;
                    it.MRP = si.MRP;
                    it.SystemForecastQty = si.SystemSuggestedQty;
                    it.WarehouseId = si.WarehouseId;
                    it.PurchaseMOQList = res.Any(x => x.Number == si.ItemNumber) ? res.Where(x => x.Number == si.ItemNumber).Select(x => x.PurchaseMinOrderQty).ToList() : new List<int>();  // TO DO new Add
                    if (it.IsSensitive == true)
                    {
                        if (it.IsSensitiveMRP == false)
                        {
                            it.Itemname = si.itemname + " " + si.UnitofQuantity + " " + si.UOM; //item display name   
                        }
                        else
                        {
                            it.Itemname = si.itemname + " " + si.MRP + " MRP " + si.UnitofQuantity + " " + si.UOM; //item display name                               
                        }
                    }
                    else
                    {
                        it.Itemname = si.itemname + " " + si.MRP + " MRP "; //item display name                               
                    }
                    if (lang.Trim() == "hi")
                    {
                        if (it.IsSensitive == true)
                        {
                            if (it.IsSensitiveMRP == false)
                            {
                                it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemname : si.HindiName) + " " + si.UnitofQuantity + " " + si.UOM; //item display name   
                            }
                            else
                            {
                                it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemname : si.HindiName) + " " + si.MRP + " MRP " + si.UnitofQuantity + " " + si.UOM; //item display name                               
                            }
                        }
                        else
                        {
                            it.Itemname = (string.IsNullOrEmpty(si.HindiName) ? si.itemname : si.HindiName) + " " + si.MRP + " MRP "; //item display name                               
                        }
                    }
                    item.Add(it);
                }

                return Request.CreateResponse(HttpStatusCode.OK, item);
            }

        }

        [Route("AddSalesIntent")]
        [HttpPost]
        public bool AddSalesIR(DataContracts.External.MobileExecutiveDC.SalesIntentRequestDC SForecast)
        {
            bool status = false;
            try
            {
                //  bool status = false;
                using (AuthContext context = new AuthContext())
                {
                    var Rdata = context.SalesIntentRequestDb.Where(x => x.Warehouseid == SForecast.Warehouseid && x.ItemMultiMRPId == SForecast.ItemMultiMRPId).FirstOrDefault();
                    // if (Rdata == null)
                    //{
                    SalesIntentRequest k = new SalesIntentRequest();
                    k.PeopleId = SForecast.PeopleId;
                    k.CreatedBy = SForecast.PeopleId;
                    k.ItemMultiMRPId = SForecast.ItemMultiMRPId;
                    k.RequestQty = SForecast.RequestQty;
                    k.RequestPrice = SForecast.RequestPrice;
                    k.BuyerApproveID = SForecast.BuyerApproveID;
                    k.SalesLeadApproveID = SForecast.SalesLeadApproveID;
                    k.Status = SForecast.Status;
                    k.Warehouseid = SForecast.Warehouseid;
                    k.SalesApprovedDate = SForecast.SalesApprovedDate;
                    k.BuyerApprovedDate = SForecast.BuyerApprovedDate;
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.isReject = 0;
                    k.CreatedDate = DateTime.Now;
                    k.ModifiedDate = DateTime.Now;
                    k.ETADate = Convert.ToDateTime(SForecast.ETADate);// new add
                    k.NoOfSet = SForecast.NoOfSet;//new add
                    k.MinOrderQty = SForecast.MinOrderQty;//new add
                    context.SalesIntentRequestDb.Add(k);
                    status = context.Commit() > 0;

                    //}                 
                }
                return status;
            }
            catch (Exception ex)
            {
                return status;
            }
        }

        [Route("GetItemClassificationIncentiveForExec")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.SalesIncentiveItemClassification>> GetItemClassificationIncentiveForExec(int peopleId, int warehouseId, int month, int year)
        {
            ItemMasterManager manager = new ItemMasterManager();
            var SalesIncentiveItemClassification = await manager.GetItemClassificationIncentiveForExec(peopleId, warehouseId, month, year);
            return SalesIncentiveItemClassification;
        }

        [Route("ExecuteSalesTarget")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesTargetResponse> ExecuteSalesTarget(int peopleId, int CustomerId, int skip, int take, string itemName = null)
        {
            SalesTargetResponse response = new SalesTargetResponse();
            List<SalesTargetCustomerItem> result = new List<SalesTargetCustomerItem>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;
                itemName = itemName == null ? "" : itemName;
                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                var subcatid = 0;
                //DateTime date = indianTime.AddMonths(Month);
                List<Object> parameters = new List<object>();
                string sqlquery = "exec Seller.SalesTargetByCustomerId";
                parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                parameters.Add(new SqlParameter("@PeopleId", peopleId));
                parameters.Add(new SqlParameter("@SubCategoryId", subcatid));
                parameters.Add(new SqlParameter("@itemName", itemName));
                //parameters.Add(new SqlParameter("@StartDate", startDate));
                //parameters.Add(new SqlParameter("@EndDate", endDate));
                parameters.Add(new SqlParameter("@skip", skip));
                parameters.Add(new SqlParameter("@take", take));
                sqlquery = sqlquery + " @CustomerId, @PeopleId,@SubCategoryId,@itemName, @skip,@take";
                result = await context.Database.SqlQuery<SalesTargetCustomerItem>(sqlquery, parameters.ToArray()).ToListAsync();

                if (skip == 0)
                {
                    response.AchivePercent = await context.Database.SqlQuery<double>("exec GetAchiveSalesTargetByPeopleId " + peopleId).FirstOrDefaultAsync();
                }
                response.SalesTargetCustomerItems = result;

            }
            return response;
        }


        [Route("CustomerSalesTargetbyBrand")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<SalesTargetCustomerItem>> CustomerSalesTargetbyBrand(int peopleId, int CustomerId, int subCategoryId)
        {
            List<SalesTargetCustomerItem> result = new List<SalesTargetCustomerItem>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;
                string itemName = "";
                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                if (CustomerId > 0)
                {
                    int skip = 0; int take = 100;
                    //  DateTime date = indianTime.AddMonths(Month);
                    List<Object> parameters = new List<object>();
                    string sqlquery = "exec Seller.SalesTargetByCustomerId";
                    parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                    parameters.Add(new SqlParameter("@PeopleId", peopleId));
                    parameters.Add(new SqlParameter("@SubCategoryId", subCategoryId));
                    parameters.Add(new SqlParameter("@itemName", itemName));
                    //parameters.Add(new SqlParameter("@StartDate", startDate));
                    //parameters.Add(new SqlParameter("@EndDate", endDate));
                    parameters.Add(new SqlParameter("@skip", skip));
                    parameters.Add(new SqlParameter("@take", take));
                    sqlquery = sqlquery + " @CustomerId, @PeopleId, @SubCategoryId,@itemName, @skip, @take";
                    result = await context.Database.SqlQuery<SalesTargetCustomerItem>(sqlquery, parameters.ToArray()).ToListAsync();
                }
            }
            return result;
        }

        [Route("BrandWiseCustomerSalesTarget")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<CompanySalesTargetCustomer>> BrandWiseCustomerSalesTarget(int peopleId, int CustomerId, int skip, int take)
        {
            List<CompanySalesTargetCustomer> result = new List<CompanySalesTargetCustomer>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;

                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                if (CustomerId > 0)
                {
                    //DateTime date = indianTime.AddMonths(Month);
                    List<Object> parameters = new List<object>();
                    string sqlquery = "exec Seller.SalesTargetByCustomerBrand";
                    parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                    parameters.Add(new SqlParameter("@PeopleId", peopleId));
                    //parameters.Add(new SqlParameter("@StartDate", startDate));
                    //parameters.Add(new SqlParameter("@EndDate", endDate));
                    parameters.Add(new SqlParameter("@skip", skip));
                    parameters.Add(new SqlParameter("@take", take));
                    sqlquery = sqlquery + " @CustomerId, @PeopleId,  @skip,@take";
                    result = await context.Database.SqlQuery<CompanySalesTargetCustomer>(sqlquery, parameters.ToArray()).ToListAsync();
                }
            }
            return result;
        }



        [Route("GetallNotification")]

        [HttpGet]
        public PaggingDatas GetallNotification(int skip, int take, int PeopleId)
        {
            int ApproveTimeLeft = Convert.ToInt32(ConfigurationManager.AppSettings["ApproveNotifyTimeLeftInMinute"]);

            using (var context = new AuthContext())
            {
                DateTime dt1 = DateTime.Now;
                PaggingDatas data = new PaggingDatas();
                context.Database.CommandTimeout = 600;
                SalesAppManager manager = new SalesAppManager();
                skip = (take - 1) * skip;
                var PeopleSentNotificationDc = manager.GetPeopleSentNotificationDetail(skip, take, PeopleId);
                //    var query = "[Operation].[GetPeopleNotification] " + PeopleId.ToString() + "," + ((take - 1) * skip).ToString() + "," + take;
                //    var PeopleSentNotificationDc = context.Database.SqlQuery<PeopleSentNotificationDc>(query).ToList();
                PeopleSentNotificationDc.ForEach(x =>
                {
                    x.TimeLeft = x.TimeLeft.AddMinutes(ApproveTimeLeft); // from Create date

                    if (!string.IsNullOrEmpty(x.Shopimage) && !x.Shopimage.Contains("http"))
                    {
                        x.Shopimage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , x.Shopimage);
                    }
                });
                data.notificationmaster = PeopleSentNotificationDc;
                data.total_count = PeopleSentNotificationDc != null && PeopleSentNotificationDc.Any() ? PeopleSentNotificationDc.FirstOrDefault().TotalCount : 0;
                return data;
            }
        }

        [Route("GetPeopleReferralConfigurations")]
        [HttpGet]
        public List<DataContracts.External.MobileExecutiveDC.GetCustReferralConfigDc> GetPeopleReferralConfigurations(int CityId)
        {
            List<DataContracts.External.MobileExecutiveDC.GetCustReferralConfigDc> custReferralConfigList = new List<DataContracts.External.MobileExecutiveDC.GetCustReferralConfigDc>();
            using (var db = new AuthContext())
            {
                custReferralConfigList = db.CustomerReferralConfigurationDb.Where(x => x.CityId == CityId && x.ReferralType == 2 && x.IsActive == true && x.IsDeleted == false)
                     .Select(x => new DataContracts.External.MobileExecutiveDC.GetCustReferralConfigDc
                     {
                         OnOrder = x.OnOrder,
                         ReferralWalletPoint = x.ReferralWalletPoint,
                         CustomerWalletPoint = x.CustomerWalletPoint,
                         OnDeliverd = x.OnDeliverd
                     }).ToList();
                var statusids = custReferralConfigList.Select(x => x.OnDeliverd).Distinct().ToList();
                var customerReferralStatus = db.CustomerReferralStatusDb.Where(x => statusids.Contains((int)x.Id) && x.IsActive == true && x.IsDeleted == false).ToList();
                custReferralConfigList.ForEach(x =>
                {
                    x.OrderCount = x.OnOrder + " Order";
                    x.orderStatus = customerReferralStatus != null ? customerReferralStatus.FirstOrDefault(y => y.Id == x.OnDeliverd).OrderStatus : "NA";
                });
                return custReferralConfigList;
            }
        }

        [Route("GetPeopleReferralOrderList")]
        [HttpGet]
        public List<DataContracts.External.MobileExecutiveDC.GetPeopleReferralOrderListDc> GetPeopleReferralOrderList(int PeopleId)
        {
            using (var context = new AuthContext())
            {
                var peopleId = new SqlParameter("@PeopleId", PeopleId);
                List<DataContracts.External.MobileExecutiveDC.GetPeopleReferralOrderListDc> PeopleReferralList = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.GetPeopleReferralOrderListDc>("exec GetPeopleReferralOrderList @PeopleId", peopleId).ToList();
                return PeopleReferralList;
            }
        }

        [Route("GetTodaysAttendenceDetailByExecutive")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> TodaysAttendence(int ExecutiveId, int WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    ExecutiveAttendenceMongoHelper executiveAttendenceHelper = new ExecutiveAttendenceMongoHelper();
                    bool response = false;

                    response = await executiveAttendenceHelper.InsertMissingExecutiveAttendances(ExecutiveId);
                    var today = DateTime.Now.Date;

                    DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc configs = new DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc();
                    // AttendanceRuleConfigsLogDc RuleConfigs = new AttendanceRuleConfigsLogDc();
                    DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc ExecutiveDetails = new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc();

                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 100;
                    cmd.CommandText = "[dbo].[GetExecutiveDetailAndAttendanceConfigRule]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var ExecutiveIdParam = new SqlParameter("ExecutiveId", ExecutiveId);
                    var WarehouseIdParam = new SqlParameter("WarehouseId", WarehouseId);
                    cmd.Parameters.Add(ExecutiveIdParam);
                    cmd.Parameters.Add(WarehouseIdParam);

                    var reader = cmd.ExecuteReader();

                    ExecutiveDetails = ((IObjectContextAdapter)context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc>(reader).FirstOrDefault();

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        configs = ((IObjectContextAdapter)context)
                                            .ObjectContext
                                            .Translate<DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc>(reader).FirstOrDefault();
                    }

                    context.Database.Connection.Close();

                    //get attendance rule

                    DataContracts.External.MobileExecutiveDC.AttendenceDetailDC obj = new DataContracts.External.MobileExecutiveDC.AttendenceDetailDC();

                    if (configs != null && configs.ChannelMasterId > 0)
                    {
                        MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                        var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == ExecutiveId).FirstOrDefault();
                        var PlannedRoute = TodayBeat != null && TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
                        var ActualRoute = TodayBeat != null && TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

                        var totalcall = TodayBeat != null && TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;
                        var TotalcallAnyCluster = TodayBeat != null && TodayBeat.ActualRoutes != null ? ActualRoute.Count(x => x.IsVisited) : 0;

                        var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                        var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                        var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                        var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;



                        DateTime TodayDate = DateTime.Today;
                        DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
                        string sDate = startDate.ToString("yyyy-MM-dd");
                        string query = $" select custid  from {platformIdxName} where cast(createddate as date)= cast('{sDate}' as date) and  executiveid = { ExecutiveId } group by custid ";

                        ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElasticOrderData> elasticSqlHelperData = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElasticOrderData>();
                        var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(query)).ToList());

                        List<int> custids = new List<int>();
                        if (configs.IsTADABeatShop)
                        {
                            custids = PlannedRoute != null ? PlannedRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                        }
                        else
                        {
                            //custids = ActualRoute != null ? ActualRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                            custids = orderdetails.Select(x => x.custid).Distinct().ToList();
                        }

                        int ProductiveCall = custids != null ? orderdetails.Where(x => custids.Contains(x.custid)).Distinct().Count() : 0;
                        //int ProductiveCall2 = orderdetails != null ? custids.Where(x => orderdetails.Contains(x)).Distinct().Count() : 0;

                        // any shop first checkin

                        if (FirstCheckIn != null)
                        {
                            if (!configs.IsCheckinBeatShop)
                            {
                                if (ExecutiveDetails.FirstCheckIn == null)
                                {
                                    ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
                                }
                                if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                {
                                    //present
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = false;
                                }
                                else
                                {
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = true;
                                }
                            }
                            if (BeatFirstCheckIn != null)
                            {
                                if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
                                {
                                    if (ExecutiveDetails.FirstCheckIn == null)
                                    {
                                        ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
                                    }
                                    if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                    {
                                        //present
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = false;
                                    }
                                    else
                                    {
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = true;
                                    }
                                }
                            }

                            //check out
                            if (!configs.IsCheckOutBeatShop) //any shop check out
                            {
                                ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
                            }
                            else // beat shop check out
                            {
                                ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
                            }
                        }

                        int TC = 0;
                        // status - full day half day
                        if (PlannedRoute != null && PlannedRoute.Count > 0)
                        {
                            if (configs.IsFullDayBeatShop)
                            {
                                // beat shop visit count check
                                if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = totalcall;
                            }
                        }
                        // Any shop visit count check
                        if (ActualRoute != null && ActualRoute.Count > 0)
                        {
                            if (!configs.IsFullDayBeatShop)
                            {
                                if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    //full day
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = TotalcallAnyCluster;
                            }
                        }
                        //int PC = 0;
                        // TADA approve
                        if (!configs.IsTADARequired && ExecutiveDetails.IsPresent)
                        {
                            ExecutiveDetails.TADA = "Approved";
                        }
                        if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }
                        if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }

                        obj.ExecutiveId = ExecutiveId;
                        obj.IsPresent = ExecutiveDetails.IsPresent;
                        obj.IsLate = ExecutiveDetails.IsLate;
                        obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
                        obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
                        obj.Status = ExecutiveDetails.Status;
                        obj.TADA = ExecutiveDetails.TADA;
                        obj.Description = configs.Description;

                        var executive = context.ExecutiveAttendances.Where(x => x.Id == ExecutiveDetails.Id).FirstOrDefault();
                        if (executive != null)
                        {
                            executive.CityId = ExecutiveDetails.CityId;
                            executive.FirstCheckIn = ExecutiveDetails.FirstCheckIn;
                            executive.IsLate = ExecutiveDetails.IsLate;
                            executive.IsPresent = ExecutiveDetails.IsPresent;
                            executive.LastCheckOut = LastCheckOut != null ? LastCheckOut.CheckOut : null;
                            executive.PC = ProductiveCall;
                            executive.Status = ExecutiveDetails.Status;
                            executive.TADA = ExecutiveDetails.TADA;
                            executive.TC = TC;
                            executive.CreatedDate = ExecutiveDetails.CreatedDate;
                            executive.ModifiedDate = DateTime.Now;

                            executive.ConfigCheckInTime = configs.CheckInTime;
                            executive.ConfigDayMinVisits = configs.DayMinVisits;
                            executive.ConfigIsCheckinBeatShop = configs.IsCheckinBeatShop;
                            executive.ConfigIsCheckOutBeatShop = configs.IsCheckOutBeatShop;
                            executive.ConfigIsTADABeatShop = configs.IsTADABeatShop;
                            executive.ConfigTADACalls = configs.TADACalls;
                            executive.ConfigIsFullDayBeatShop = configs.IsFullDayBeatShop;
                            executive.ConfigIsMinimumVisit = configs.IsMinimumVisit;
                            executive.ConfigIsTADARequired = configs.IsTADARequired;
                            if (executive.ConfigId == 0)
                            {
                                executive.ConfigId = configs.ConfigId;
                            }

                            context.Entry(executive).State = EntityState.Modified;
                            context.Commit();
                        }
                    }
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = obj };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse
                {
                    Status = false,
                    Message = ex.Message
                };
            }
        }

        [Route("GetMonthlyAttendenceDetailByExecutive")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetMonthlyAttendenceDetailByExecutiveAsync(int ExecutiveId, int Month, int Year)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var TodayDate = DateTime.Today;
                    List<DataContracts.External.MobileExecutiveDC.AttendenceDetailDC> AttendenceDetailList = new List<DataContracts.External.MobileExecutiveDC.AttendenceDetailDC>();
                    DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceLogListDC AttendanceLogList = new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceLogListDC();

                    var executiveid = new SqlParameter("ExecutiveId", ExecutiveId);
                    var month = new SqlParameter("Month", Month);
                    var year = new SqlParameter("Year", Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceMonthReportDC>("GetExecutiveAttendanceMonthReportForApp @ExecutiveId,@Month,@Year", executiveid, month, year).ToList();
                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                    {
                        AttendenceDetailList = ExecutiveMonthData.Select(x => new DataContracts.External.MobileExecutiveDC.AttendenceDetailDC
                        {
                            ExecutiveId = x.ExecutiveId,
                            FirstCheckIn = x.FirstCheckIn != null ? (TimeSpan?)x.FirstCheckIn.Value.TimeOfDay : null,
                            LastCheckOut = x.LastCheckOut != null ? (TimeSpan?)x.LastCheckOut.Value.TimeOfDay : null,
                            Date = x.CreatedDate,
                            TADA = x.TADA,
                            Status = x.Status,
                            IsLate = x.IsLate,
                            IsPresent = x.IsPresent,
                            CityId = x.CityId,
                            Description = x.Description
                        }).ToList();
                        var HalfDayCount = AttendenceDetailList.Where(x => x.IsPresent == true && x.Status == "Half Day" && x.Date < TodayDate).Count();
                        var FullDayCount = AttendenceDetailList.Where(x => x.IsPresent == true && x.Status == "Full Day").Count();

                        AttendanceLogList.PresentDay = FullDayCount > 0 ? FullDayCount + (HalfDayCount > 0 ? Convert.ToDouble(HalfDayCount) / 2 : 0) : (HalfDayCount > 0 ? Convert.ToDouble(HalfDayCount) / 2 : 0);
                        AttendanceLogList.AbsentDay = AttendenceDetailList.Where(x => x.IsPresent == false).Count();
                        AttendanceLogList.TADADay = AttendenceDetailList.Where(x => x.IsPresent == true && x.TADA == "Approved").Count();
                    }
                    AttendanceLogList.AttendenceDetailList = AttendenceDetailList.Count > 0 && AttendenceDetailList.Any() ? AttendenceDetailList : new List<DataContracts.External.MobileExecutiveDC.AttendenceDetailDC>();

                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = AttendanceLogList };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [HttpGet]
        [Route("GetSalesIncentiveClassificationStoreWise")]//mobile App Api
        public List<DataContracts.External.MobileExecutiveDC.ClassificationMastersDc> GetSalesIncentiveClassificationStoreWise(int PeopleId)
        {
            List<DataContracts.External.MobileExecutiveDC.ClassificationMastersDc> list = new List<DataContracts.External.MobileExecutiveDC.ClassificationMastersDc>();
            using (var db = new AuthContext())
            {
                var peopleId = new SqlParameter("peopleid", PeopleId);
                list = db.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ClassificationMastersDc>("EXEC GetSalesIncentiveClassificationStoreWise @peopleid", peopleId).ToList();
            }
            return list;
        }

        [Route("WarehouseClusterItemIndexing")]
        [HttpGet]
        public IHttpActionResult WarehouseClusterItemIndexingAsync()
        {
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetWarehouseClusterItemIndexing]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Execute Stored Procedure..
                cmd.ExecuteNonQuery();
            }
            return Ok();
        }


        #endregion
        [HttpPost]
        [Route("GetTelecallerBeatDSR")]
        public DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDc GetTelecallerBeatDSR(DataContracts.External.MobileExecutiveDC.BeatDSR beatDSR)
        {
            MongoDbHelper<DigitalSalesBeatDSR> mongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
            List<DataContracts.External.MobileExecutiveDC.DigitalSalesBeatDSRDC> DSRResult = new List<DataContracts.External.MobileExecutiveDC.DigitalSalesBeatDSRDC>();
            DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDc res = new DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDc();

            using (var Context = new AuthContext())
            {
                #region PeopleList Role wise
                DataTable CityDt = new DataTable();
                CityDt.Columns.Add("IntValue");
                if (beatDSR.CityIds.Count > 0)
                {
                    foreach (var id in beatDSR.CityIds)
                    {
                        var dr = CityDt.NewRow();
                        dr["IntValue"] = id;
                        CityDt.Rows.Add(dr);
                    }
                }
                var cityid = new SqlParameter("@CityIds", CityDt);
                cityid.SqlDbType = SqlDbType.Structured;
                cityid.TypeName = "dbo.intValues";

                var role = new SqlParameter("@Role", beatDSR.Type);

                var PeopleData = Context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.PeopleDataDC>("DigitalSalesPeopleList @CityIds,@Role", cityid, role).ToList();
                #endregion
                var peoplelist = PeopleData.OrderBy(x => x.PeopleID).Skip(beatDSR.skip).Take(beatDSR.take);
                var peopleids = PeopleData.Select(x => x.PeopleID).ToList();
                var totcount = PeopleData.Count();
                var today = DateTime.Now.Date;
                if (beatDSR.EndDate >= today || (beatDSR.EndDate == null && beatDSR.StartDate == null) || (beatDSR.EndDate == today && beatDSR.StartDate == today))
                {
                    if (peoplelist != null && peoplelist.Any())
                    {
                        MongoDbHelper<ExecutiveBeats> mongoDbBeatHelper = new MongoDbHelper<ExecutiveBeats>();
                        var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                        var MonthBeat = mongoDbBeatHelper.Select(x => x.AssignmentDate == today && peopleids.Contains(x.PeopleId));

                        if (Context.Database.Connection.State != ConnectionState.Open)
                            Context.Database.Connection.Open();

                        foreach (var item in peoplelist)
                        {
                            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();

                            var todayBeat = MonthBeat.Where(x => x.PeopleId == item.PeopleID).FirstOrDefault();
                            DataContracts.External.MobileExecutiveDC.BeatCustomerDc Beat = new DataContracts.External.MobileExecutiveDC.BeatCustomerDc();

                            Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                            DataTable IdDt = new DataTable();
                            List<int> ActualCustomerVisited = new List<int>();
                            IdDt = new DataTable();
                            IdDt.Columns.Add("IntValue");

                            if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any())
                            {
                                if (Beat.TodayBeatCustomerIds.Count > 0)
                                {
                                    foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                                    {
                                        int cid = id;
                                        var dr = IdDt.NewRow();
                                        dr["IntValue"] = cid;
                                        IdDt.Rows.Add(dr);
                                    }
                                }
                                else
                                {
                                    IdDt = null;
                                }

                            }
                            ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                            var cmd = Context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 1200;
                            cmd.CommandText = "[dbo].[TodayDashBoardDetail]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var param4 = new SqlParameter("PersonId", item.PeopleID);
                            var param5 = new SqlParameter("CustIdDs", IdDt);
                            var param8 = new SqlParameter("WarehouseId", item.WarehouseId);
                            cmd.Parameters.Add(param4);
                            cmd.Parameters.Add(param5);
                            cmd.Parameters.Add(param8);

                            var reader = cmd.ExecuteReader();
                            dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                            if (dashboardDetail != null)
                            {
                                DataContracts.External.MobileExecutiveDC.DigitalSalesBeatDSRDC ToObj = new DataContracts.External.MobileExecutiveDC.DigitalSalesBeatDSRDC();
                                //DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC ToObj1 = new DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC();
                                ToObj.BeatSales = dashboardDetail.BeatSales;
                                ToObj.ExtraSales = dashboardDetail.ExtraSales;
                                ToObj.BeatOrder = dashboardDetail.BeatOrder;
                                ToObj.TotalSales = dashboardDetail.TotalSales;
                                ToObj.ProductiveCall = dashboardDetail.ProductiveCall;
                                int SuccessPhoneOrder = 0;
                                if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                                {
                                    SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                    ToObj.VisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                                    ToObj.TotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                    ToObj.TodayOutletCoverage = Math.Round((Convert.ToDouble(ToObj.TodayTotalCall) / (Convert.ToDouble(ToObj.TodayVisitPlanned))) * 100, 2);
                                    ToObj.PhoneOrder = SuccessPhoneOrder;
                                }
                                else
                                {
                                    ToObj.VisitPlanned = 0;
                                    ToObj.TotalCall = 0;
                                    ToObj.TodayOutletCoverage = 0;
                                }
                                if (ToObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                                {
                                    ToObj.TodayStrikeRate = Math.Round((Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100, 2);
                                }
                                var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                                ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                                ToObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                                ToObj.ExtraCall = dashboardDetail.ExtraCall;
                                ToObj.ExtraOrder = dashboardDetail.ExtraOrder;
                                ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                                ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                                ToObj.Eco = dashboardDetail.Eco;
                                ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                                ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                                ToObj.SalesPerson = item.DisplayName;
                                ToObj.ClusterName = dashboardDetail.ClusterName;
                                ToObj.ChannelName = dashboardDetail.ChannelName;
                                ToObj.StoreName = dashboardDetail.StoreName;
                                ToObj.CityName = item.CityName;
                                ToObj.SalesPersonId = item.PeopleID;
                                ToObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                                ToObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;

                                DSRResult.Add(ToObj);
                                res.DigitalSalesBeatDSRMTDData = DSRResult;
                                res.Totalcount = totcount;
                            }
                        }

                    }
                }
                if ((beatDSR.EndDate != null && beatDSR.StartDate != null) && (beatDSR.StartDate != today))
                {
                    beatDSR.EndDate = beatDSR.EndDate.Value.AddDays(1).AddMilliseconds(-1);
                    var DSRResultList = mongoDbHelper.Select(x => peopleids.Contains(x.SalesPersonId) && x.CreatedDate >= beatDSR.StartDate && x.CreatedDate <= beatDSR.EndDate).ToList();
                    if (res.DigitalSalesBeatDSRMTDData != null && res.DigitalSalesBeatDSRMTDData.Count > 0)
                    {
                        DSRResultList.AddRange(res.DigitalSalesBeatDSRMTDData);
                    }
                    var result = DSRResultList
                    .GroupBy(ac => new
                    {
                        ac.SalesPersonId,
                        ac.SalesPerson,
                        ac.ChannelName
                    })
                    .Select(ac => new DigitalSalesBeatDSR
                    {
                        SalesPerson = ac.Key.SalesPerson,
                        SalesPersonId = ac.Key.SalesPersonId,
                        ChannelName = ac.Key.ChannelName,
                        BeatSales = ac.Sum(acs => acs.BeatSales),
                        BeatOrder = ac.Sum(acs => acs.BeatOrder),
                        ExtraCall = ac.Sum(acs => acs.ExtraCall),
                        TotalCall = ac.Sum(acs => acs.TotalCall),
                        TodayTotalCall = ac.Sum(acs => acs.TodayTotalCall),
                        ExtraOrder = ac.Sum(acs => acs.ExtraOrder),
                        ExtraSales = ac.Sum(acs => acs.ExtraSales),
                        ExtraVisit = ac.Sum(acs => acs.ExtraVisit),
                        VisitPlanned = ac.Sum(acs => acs.VisitPlanned),
                        TodayVisitPlanned = ac.Sum(acs => acs.TodayVisitPlanned),
                        TodayStrikeRate = ac.Sum(acs => acs.TodayStrikeRate),
                        TodaySupperOrder = ac.Sum(acs => acs.TodaySupperOrder),
                        PhoneOrder = ac.Sum(acs => acs.PhoneOrder),
                        //TodayTarget = ac.Sum(acs => acs.TodayTarget),
                        //MtdMonthlyTarget = ac.Sum(acs => acs.MtdMonthlyTarget),
                        TodayProductiveCall = ac.Sum(acs => acs.TodayProductiveCall),
                        ProductiveCall = ac.Sum(acs => acs.ProductiveCall),
                        TotalSales = ac.Sum(acs => acs.TotalSales),
                        OutletCoverage = ac.Average(acs => acs.OutletCoverage),
                        StrikeRate = ac.Average(acs => acs.StrikeRate),
                        Eco = ac.Average(acs => acs.Eco),
                        AvgOrderValue = ac.Average(acs => acs.AvgOrderValue),
                        AvgLineItem = ac.Average(acs => acs.AvgLineItem),
                        CheckIn = beatDSR.EndDate.Value.Date == beatDSR.StartDate.Value.Date ? ac.FirstOrDefault()?.CheckIn : null,
                        CheckOut = beatDSR.EndDate.Value.Date == beatDSR.StartDate.Value.Date ? ac.FirstOrDefault()?.CheckOut : null
                    }).ToList();


                    res.DigitalSalesBeatDSRMTDData = Mapper.Map(result).ToANew<List<DataContracts.External.MobileExecutiveDC.DigitalSalesBeatDSRDC>>();
                    res.DigitalSalesBeatDSRMTDData.ForEach(y =>
                    {
                        y.CityName = PeopleData.FirstOrDefault(x => x.PeopleID == y.SalesPersonId)?.CityName;
                        y.StartDate = beatDSR.StartDate.Value.ToString("dd/MM/yyyy");
                        y.EndDate = beatDSR.EndDate.Value.ToString("dd/MM/yyyy"); ;
                    });
                    res.DigitalSalesBeatDSRMTDData = res.DigitalSalesBeatDSRMTDData.OrderBy(x => x.Id).Skip(beatDSR.skip).Take(beatDSR.take).ToList();
                    res.Totalcount = result.Count();
                }

                return res;
            }
        }

        [HttpPost]
        [Route("GetAllBeat")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetAllBeat(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc
            {
                MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>(),
                NoVisitMyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>()
            };


            List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc> VisitCustList = new List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>();

            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + obj.PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                //var role = authContext.Database.SqlQuery<string>(query).ToList();
                //bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                #region Beat edit configuration dynamic

                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = new ExecutiveBeats();
                if (obj.Day.ToUpper() == "ALL" || obj.Day.ToUpper() == today.DayOfWeek.ToString().ToUpper())
                    todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var ActualRoutes = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";
                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    res.NoVisitMyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    return res;
                }

                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "SEARCH")
                {
                    res.MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    res.NoVisitMyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    return res;
                }

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        // searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                        searchCustomerIds.AddRange(todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {
                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                }


                List<DataContracts.External.MobileExecutiveDC.SalesGroupDc> CustSalesGrouplist = new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>();
                List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC> CustomerRemarkList = new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>();
                List<DataContracts.External.MobileExecutiveDC.BeatCustomers> BeatCustomers = new List<DataContracts.External.MobileExecutiveDC.BeatCustomers>();
                if (obj.APIType.ToLower() == ("both").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    var NotvisitedCustids = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                    BeatCustomers.Add(new DataContracts.External.MobileExecutiveDC.BeatCustomers
                    {
                        Customertype = 1,
                        customers = visitedCustids
                    });
                    BeatCustomers.Add(new DataContracts.External.MobileExecutiveDC.BeatCustomers
                    {
                        Customertype = 0,
                        customers = NotvisitedCustids
                    });
                }
                else if (obj.APIType.ToLower() == ("Visit").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    BeatCustomers.Add(new DataContracts.External.MobileExecutiveDC.BeatCustomers
                    {
                        Customertype = 1,
                        customers = visitedCustids
                    });
                }
                else if (obj.APIType.ToLower() == ("NotVisit").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                    var NotvisitedCustids = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                    BeatCustomers.Add(new DataContracts.External.MobileExecutiveDC.BeatCustomers
                    {
                        Customertype = 0,
                        customers = NotvisitedCustids
                    });
                }
                ParallelLoopResult parellelResult = Parallel.ForEach(BeatCustomers, (BeatCustomer) =>
                {
                    List<DataContracts.External.MobileExecutiveDC.MyBeatDC> MyBeatDCs = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
                    if (BeatCustomer.customers != null && BeatCustomer.customers.Any())
                    {
                        DataTable NotvisitedCustdt = new DataTable();
                        NotvisitedCustdt.Columns.Add("IntValue");
                        foreach (var item in BeatCustomer.customers)
                        {
                            DataRow dr = NotvisitedCustdt.NewRow();
                            dr[0] = item;
                            NotvisitedCustdt.Rows.Add(dr);
                        }
                        DataTable orderdays = new DataTable();
                        orderdays.Columns.Add("IntValue");
                        foreach (var item in obj.OrderDays)
                        {
                            DataRow dr = orderdays.NewRow();
                            dr[0] = item;
                            orderdays.Rows.Add(dr);
                        }

                        var param1 = new SqlParameter("peopleid", obj.PeopleId);
                        var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                        var param3 = new SqlParameter("Day", obj.Day);
                        var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                        var param5 = new SqlParameter("GroupId", obj.GroupId);
                        var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                        //var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                        var param7 = new SqlParameter("OrderDays", orderdays);
                        param7.SqlDbType = SqlDbType.Structured;
                        param7.TypeName = "dbo.IntValues";

                        var param8 = new SqlParameter("skip", obj.skip);
                        var param9 = new SqlParameter("take", obj.take);
                        var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                        var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                        var param12 = new SqlParameter("BeatAllCustomers", NotvisitedCustdt);
                        param12.SqlDbType = SqlDbType.Structured;
                        param12.TypeName = "dbo.IntValues";

                        var cmd = authContext.Database.Connection.CreateCommand();
                        //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                        cmd.CommandText = "[dbo].[GetExecutiveMyBeat]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add(param1);
                        cmd.Parameters.Add(param2);
                        cmd.Parameters.Add(param3);
                        cmd.Parameters.Add(param4);
                        cmd.Parameters.Add(param5);
                        cmd.Parameters.Add(param6);
                        cmd.Parameters.Add(param7);
                        cmd.Parameters.Add(param8);
                        cmd.Parameters.Add(param9);
                        cmd.Parameters.Add(param10);
                        cmd.Parameters.Add(param11);
                        cmd.Parameters.Add(param12);
                        var reader = cmd.ExecuteReader();
                        MyBeatDCs = ((IObjectContextAdapter)authContext)
                        .ObjectContext
                        .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                        reader.NextResult();
                        if (reader.Read())
                        {
                            if (BeatCustomer.Customertype == 0)
                            {
                                res.NonVisitCount = Convert.ToInt32(reader["Totalcount"]);
                                res.NoVisitMyBeatDCs = MyBeatDCs;
                            }
                            else
                            {
                                res.VisitCount = Convert.ToInt32(reader["Totalcount"]);
                                res.MyBeatDCs = MyBeatDCs;
                            }
                        }

                    }
                });



                if (parellelResult.IsCompleted)
                {
                    List<int> CustomerIds = new List<int>();
                    if (BeatCustomers.Any(x => x.Customertype == 1))
                        CustomerIds.AddRange(res.MyBeatDCs.Select(x => x.CustomerId).ToList());

                    if (BeatCustomers.Any(x => x.Customertype == 0))
                        CustomerIds.AddRange(res.NoVisitMyBeatDCs.Select(x => x.CustomerId).ToList());
                    CustomerIds = CustomerIds.Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                    List<string> SkCodeList = new List<string>();

                    if (BeatCustomers.Any(x => x.Customertype == 1))
                        SkCodeList.AddRange(res.MyBeatDCs.Select(y => y.Skcode).ToList());
                    if (BeatCustomers.Any(x => x.Customertype == 0))
                        SkCodeList.AddRange(res.NoVisitMyBeatDCs.Select(y => y.Skcode).ToList());

                    SkCodeList = SkCodeList.Distinct().ToList();
                    var TagData = await CRMCustomerTag(SkCodeList);

                    if (BeatCustomers.Any(x => x.Customertype == 1))
                    {
                        res.MyBeatDCs = res.MyBeatDCs.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                        {
                            Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                            CustomerId = x.FirstOrDefault().CustomerId,
                            CustomerName = x.FirstOrDefault().CustomerName,
                            OrderCount = x.FirstOrDefault().OrderCount,
                            MTDSales = x.FirstOrDefault().MTDSales,
                            PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                            Skcode = x.FirstOrDefault().Skcode,
                            Mobile = x.FirstOrDefault().Mobile,
                            ShopName = x.FirstOrDefault().ShopName,
                            ShippingAddress = x.FirstOrDefault().ShippingAddress,
                            CustomerVerify = x.FirstOrDefault().CustomerVerify,
                            lat = x.FirstOrDefault().lat,
                            lg = x.FirstOrDefault().lg,
                            Active = x.FirstOrDefault().Active,
                            LastOrderDate = x.FirstOrDefault().LastOrderDate,
                            LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                            WarehouseId = x.FirstOrDefault().WarehouseId,
                            Distance = x.FirstOrDefault().Distance,
                            IsReschedule = x.FirstOrDefault().IsReschedule,
                            IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                            CheckIn = x.FirstOrDefault().CheckIn,
                            IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                            IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                            IsBeatEdit = BeatEdit,
                            SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>(),
                            CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>(),
                            IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false,
                            IsVisited = false,
                            CRMTag = TagData.FirstOrDefault(y => y.Skcode == x.FirstOrDefault().Skcode)?.CRMTags,
                            LastVisitDaysAgo = (todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null) != null ?
                                            (DateTime.Now.Date - Convert.ToDateTime(todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null).Date).Days :
                                            x.FirstOrDefault().CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(x.FirstOrDefault().CheckIn).Date).Days : 90, //TODO:SalesAppMarch2023
                            CustomerType = x.FirstOrDefault().CustomerType,
                            Type = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key)?.Type : "",
                            SubType = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key)?.SubType : "",
                        }).ToList();

                        if (obj.VisitDays != null && obj.VisitDays.Any())
                        {
                            res.MyBeatDCs = res.MyBeatDCs.Where(x =>
                                                   (obj.VisitDays.Contains(10) && x.LastVisitDaysAgo >= 0 && x.LastVisitDaysAgo <= 10)
                                                || (obj.VisitDays.Contains(30) && x.LastVisitDaysAgo >= 11 && x.LastVisitDaysAgo <= 30)
                                                || (obj.VisitDays.Contains(60) && x.LastVisitDaysAgo >= 31 && x.LastVisitDaysAgo <= 60)
                                                || (obj.VisitDays.Any(y => y >= 61) && x.LastVisitDaysAgo >= 61)).ToList();
                            res.VisitCount = res.MyBeatDCs.Any() && res.MyBeatDCs.Count > 0 ? res.VisitCount : 0;
                        }

                    }

                    if (BeatCustomers.Any(x => x.Customertype == 0))
                    {
                        res.NoVisitMyBeatDCs = res.NoVisitMyBeatDCs.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                        {
                            Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                            CustomerId = x.FirstOrDefault().CustomerId,
                            CustomerName = x.FirstOrDefault().CustomerName,
                            OrderCount = x.FirstOrDefault().OrderCount,
                            MTDSales = x.FirstOrDefault().MTDSales,
                            PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                            Skcode = x.FirstOrDefault().Skcode,
                            Mobile = x.FirstOrDefault().Mobile,
                            ShopName = x.FirstOrDefault().ShopName,
                            ShippingAddress = x.FirstOrDefault().ShippingAddress,
                            CustomerVerify = x.FirstOrDefault().CustomerVerify,
                            lat = x.FirstOrDefault().lat,
                            lg = x.FirstOrDefault().lg,
                            Active = x.FirstOrDefault().Active,
                            LastOrderDate = x.FirstOrDefault().LastOrderDate,
                            LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                            WarehouseId = x.FirstOrDefault().WarehouseId,
                            Distance = x.FirstOrDefault().Distance,
                            IsReschedule = x.FirstOrDefault().IsReschedule,
                            IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                            CheckIn = x.FirstOrDefault().CheckIn,
                            IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                            IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                            IsBeatEdit = BeatEdit,
                            SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>(),
                            CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>(),
                            IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false,
                            IsVisited = false,
                            CRMTag = TagData.FirstOrDefault(y => y.Skcode == x.FirstOrDefault().Skcode)?.CRMTags,
                            LastVisitDaysAgo = (todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null) != null ?
                                                (DateTime.Now.Date - Convert.ToDateTime(todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null).Date).Days :
                                                x.FirstOrDefault().CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(x.FirstOrDefault().CheckIn).Date).Days : 90, //TODO:SalesAppMarch2023
                            CustomerType = x.FirstOrDefault().CustomerType,
                            Type = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key)?.Type : "",
                            SubType = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key)?.SubType : "",
                        }).ToList();

                        if (obj.VisitDays != null && obj.VisitDays.Any())
                        {
                            res.NoVisitMyBeatDCs = res.NoVisitMyBeatDCs.Where(x =>
                                                   (obj.VisitDays.Contains(10) && x.LastVisitDaysAgo >= 0 && x.LastVisitDaysAgo <= 10)
                                                || (obj.VisitDays.Contains(30) && x.LastVisitDaysAgo >= 11 && x.LastVisitDaysAgo <= 30)
                                                || (obj.VisitDays.Contains(60) && x.LastVisitDaysAgo >= 31 && x.LastVisitDaysAgo <= 60)
                                                || (obj.VisitDays.Any(y => y >= 61) && x.LastVisitDaysAgo >= 61)).ToList();
                            res.NonVisitCount = res.NoVisitMyBeatDCs.Any() && res.NoVisitMyBeatDCs.Count > 0 ? res.NonVisitCount : 0;
                        }


                    }
                }
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        #region RowData

        [HttpGet]
        [Route("GetTelecallerRowData")]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetTelecallerRowData(DateTime Startdate, DateTime Enddate, string FormType)
        {
            using (var Context = new AuthContext())
            {
                Enddate = Enddate.AddDays(1).AddMilliseconds(-1);
                var data = Context.CheckOutReasons.Where(x => x.CreatedDate >= Startdate && x.CreatedDate < Enddate).ToList();
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
            }
        }

        [Route("ExportAllExecutiveAttendenceRowDetails")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse ExportAllExecutiveAttendenceRowsDetailsAsync(DateTime date)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<AllExecutiveAttendanceRowDetailsDC> RowDataList = new List<AllExecutiveAttendanceRowDetailsDC>();

                    var Actualdate = date.AddDays(1).AddMilliseconds(-1);
                    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                    var AttendanceData = mongoDbHelper.Select(x => x.AssignmentDate >= date && x.AssignmentDate <= Actualdate).ToList();
                    var ExecutiveAllIds = AttendanceData.GroupBy(x => x.PeopleId).Select(x => x.Key).ToList();

                    DataTable dt = new DataTable();
                    dt.Columns.Add("intValue");
                    foreach (var id in ExecutiveAllIds)
                    {
                        var dr = dt.NewRow();
                        dr["intValue"] = id;
                        dt.Rows.Add(dr);
                    }
                    var param = new SqlParameter("ExecutiveIds", dt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.intValues";

                    var ExecutiveAllData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveDataList>("ExecutiveDataListByIds @ExecutiveIds", param).ToList();

                    foreach (var exec in AttendanceData)
                    {
                        if (ExecutiveAllData.Any(e => e.ExecutiveId == exec.PeopleId))
                        {
                            if (exec.ActualRoutes != null && exec.ActualRoutes.Count > 0)
                            {
                                var data = exec.ActualRoutes.Select(x => new AllExecutiveAttendanceRowDetailsDC
                                {
                                    EmployeeCode = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId).Empcode,
                                    ExecuitveName = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId).ExecutiveName,
                                    Store = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId).StoreName,
                                    Warehouse = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId).WarehouseName,
                                    Cluster = x.ClusterName,
                                    Date = exec.AssignmentDate.Date,
                                    Day = x.Day,
                                    SkCode = x.Skcode,
                                    CheckIn = x.CheckIn != null ? x.CheckIn.Value.ToString("hh:mm:ss") : null,
                                    CheckOut = x.CheckOut != null ? x.CheckOut.Value.ToString("hh:mm:ss") : null,
                                    BeatCustomer = x.IsBeat == true ? "Yes" : "No"
                                }).ToList();
                                RowDataList.AddRange(data);
                            }
                        }
                    }
                    if (RowDataList.Any() && RowDataList.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(RowDataList);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/AllExecutiveDayReport");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "AllExecutiveDay_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "AllExecutiveDay_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/AllExecutiveDayReport/" + fileName);
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = FileUrl };
                    }
                    //Get Selft Orders for 
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        #endregion

        [HttpGet]
        [Route("ExecutiveBeatHistoryJob")]
        [AllowAnonymous]
        public async Task<bool> ExecutiveBeatHistoryJob()
        {
            // remove old doc and insert in ExecutiveBeats_History collection 
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            MongoDbHelper<ExecutiveBeats_History> BeatHistoryMongoDbHelper = new MongoDbHelper<ExecutiveBeats_History>();
            {
                var today = DateTime.Now.Date.AddDays(-60);
                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate < today).ToList();
                if (executiveBeats.Count() > 0)
                {
                    foreach (var data in executiveBeats)
                    {
                        if (data != null)
                        {
                            var Beatdoc = Mapper.Map(data).ToANew<ExecutiveBeats_History>();
                            var IsInsertDoc = BeatHistoryMongoDbHelper.Insert(Beatdoc);
                            if (IsInsertDoc)
                            {
                                var IsRemoveDoc = mongoDbHelper.Delete(data.Id);
                            }
                        }
                    }
                }
            }
            return result;
        }

        [Route("ShoppingCartHistoryJob")]
        [AllowAnonymous]
        public async Task<bool> ShoppingCartHistoryJob()
        {
            // remove old doc and insert in ExecutiveBeats_History collection 
            bool result = false;
            MongoDbHelper<CustomerShoppingCart> mongoDbHelper = new MongoDbHelper<CustomerShoppingCart>();
            MongoDbHelper<CustomerShoppingCart_History> ShoppingCartHistoryMongoDbHelper = new MongoDbHelper<CustomerShoppingCart_History>();
            {
                var today = DateTime.Now.Date.AddDays(-60);
                var customerShoppingCarts = mongoDbHelper.Select(x => x.CreatedDate < today).ToList();
                if (customerShoppingCarts.Count() > 0)
                {
                    foreach (var data in customerShoppingCarts)
                    {
                        if (data != null)
                        {
                            var CartDoc = Mapper.Map(data).ToANew<CustomerShoppingCart_History>();
                            var IsInsertDoc = ShoppingCartHistoryMongoDbHelper.Insert(CartDoc);
                            if (IsInsertDoc)
                            {
                                var IsRemoveDoc = mongoDbHelper.Delete(data.Id);
                            }
                        }
                    }
                }
            }
            return result;
        }

        [HttpGet]
        [Route("DSRDateChangeTemp")]
        [AllowAnonymous]
        public async Task<bool> DSRDateChangeTemp()
        {
            bool result = false;
            MongoDbHelper<DigitalSalesBeatDSR> mongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
            {
                var today = DateTime.Now.Date;
                var DSRdata = mongoDbHelper.Select(x => x.IsActive == true).ToList();
                foreach (var data in DSRdata)
                {
                    if (data.CreatedDate == data.ModifiedDate)
                    {
                        data.CreatedDate = data.CreatedDate.AddDays(-1);
                        result = mongoDbHelper.Replace(data.Id, data);
                    }
                }
            }
            return result;
        }

        [HttpPost]
        [Route("MarketingCostDashboard")]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse MarketingCostDashboard(MarketingCostDashboardDC dashboardDC)
        {
            ElasticHelper elasticHelper = new ElasticHelper();
            List<OrderDiscountDC> orderDiscountDC = new List<OrderDiscountDC>();
            List<OrderElasticDataDC> OrderMasters = new List<OrderElasticDataDC>();
            List<StoreList> storeList = new List<StoreList>();
            List<int> Warehouseids = new List<int>();

            List<string> CancelOrderStatusList = new List<string>();
            string FileUrl = "";


            #region Status

            string CancelOrderStatus = "Order Canceled,Delivery Canceled,Post Order Canceled";
            CancelOrderStatusList = CancelOrderStatus.Split(',').ToList();

            string PreStatus = "Pending,ReadyToPick,InTransit";
            List<string> PreStatusList = PreStatus.Split(',').ToList();

            string status = "Ready to Dispatch,Issued,Shipped,Delivered,sattled";
            List<string> PostStatus = status.Split(',').ToList();

            var startDate = dashboardDC.date.Date;
            var EndDate = startDate.AddMonths(1).Date;

            var CurrentMonthStartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

            #endregion

            if (dashboardDC.date.Date < CurrentMonthStartDate)
            {
                string ExcelSavePath = HttpContext.Current.Server.MapPath("~/MarketingCostReport/MonthlyReport/");

                if (!Directory.Exists(ExcelSavePath))
                    Directory.CreateDirectory(ExcelSavePath);

                if (!File.Exists(ExcelSavePath + "MarketingCostMonthlyReport_" + dashboardDC.date.Date.Month + dashboardDC.date.Date.Year + ".xlsx"))
                {
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
                }
                var BookingPreStatus = PreStatus + ",Order Canceled";
                var postStatus = status + ",Delivery Canceled";
                var orderDiscountDT = ExcelGenerator.Excel_To_DataTable(ExcelSavePath + "MarketingCostMonthlyReport_" + dashboardDC.date.Date.Month + dashboardDC.date.Date.Year + ".xlsx", 0);
                List<ExcelOrderElasticDataDC> ExcelOrderElasticData = AngularJSAuthentication.API.Helper.DatatableToList.ConvertDataTableToList<ExcelOrderElasticDataDC>(orderDiscountDT);
                var data = ExcelOrderElasticData.Where(x => dashboardDC.StoreId.Contains((long)x.storeid)
                           && ((dashboardDC.OrderType != "Booking" || (dashboardDC.OrderType == "Booking" && (x.createddate >= startDate && x.createddate < EndDate && BookingPreStatus.Contains(x.status))))
                             || (x.dispatchdate >= startDate && x.dispatchdate < EndDate && postStatus.Contains(x.status))
                             || (x.updateddate >= startDate && x.updateddate < EndDate && status == "Post Order Canceled"))
                           && (dashboardDC.RetailerType.Contains("All") || dashboardDC.RetailerType.Contains(x.customertype))
                           && (dashboardDC.RetailerClass.Contains("All") || dashboardDC.RetailerClass.Contains(x.customerclass))).ToList();
                if (data != null)
                    OrderMasters = Mapper.Map(data).ToANew<List<OrderElasticDataDC>>();
            }
            else
            {
                #region ElasticOrderData

                string OrderStatus = "'" + string.Join("','", PostStatus) + "'" + ",'Delivery Canceled'";
                string CustomerTypes = "'" + string.Join("','", dashboardDC.RetailerType) + "'";
                string CustomerClass = "'" + string.Join("','", dashboardDC.RetailerClass) + "'";
                string StoreList = string.Join(",", dashboardDC.StoreId);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = EndDate.ToString("yyyy-MM-dd");

                var query = $"SELECT orderid,orderdetailid,whid,whname,ordqty,status,price,itemmultimrpid,isfreeitem,dispatchqty,itemnumber,itemname,catname,compname,brandname,isnull(billdiscountamount,0) billdiscountamount,storeid,walletamount from {platformIdxName} " +
                    $"where ordertype in (0,1) and storeid in (" + StoreList + ") ";

                if (!dashboardDC.RetailerType.Contains("All"))
                {
                    query += " and (customertype in (" + CustomerTypes + ") " + (dashboardDC.RetailerType.Contains("undefined") ? " or customertype is null" : "") + ")";
                }
                if (!dashboardDC.RetailerClass.Contains("All"))
                {
                    query += " and (customerclass in (" + CustomerClass + ") " + (dashboardDC.RetailerClass.Contains("undefined") ? " or customerclass is null" : "") + ")";
                }

                if (dashboardDC.OrderType == "Booking")
                {
                    string BookingStatus = "'Order Canceled'," + "'" + string.Join("','", PreStatusList) + "'";
                    query = query + " and ((createddate >= '" + sDate + "' and createddate<'" + eDate + "' and status in (" + BookingStatus + ")) or (dispatchdate >= '" + sDate + "' and dispatchdate < '" + eDate + "' and status in (" + OrderStatus + ")) or (updateddate >= '" + sDate + "' and updateddate < '" + eDate + "' and status in ('Post Order Canceled')))";
                }
                else
                {
                    query = query + " and ((dispatchdate >= '" + sDate + "' and dispatchdate < '" + eDate + "' and status in (" + OrderStatus + ")) or (updateddate >= '" + sDate + "' and updateddate < '" + eDate + "' and status in ('Post Order Canceled')))";
                }

                OrderMasters = elasticHelper.GetList(query);

                #endregion
            }
            #region APP

            var itemultimrps = OrderMasters.Select(x => new { x.itemmultimrpid, x.whid }).Distinct().ToList();

            List<WarehouseAPPDC> warehouseAPPDCs = new List<WarehouseAPPDC>();

            var itemultimrpsDt = new DataTable();
            itemultimrpsDt.Columns.Add("ItemMultiMRPId");
            itemultimrpsDt.Columns.Add("WarehouseId");
            foreach (var item in itemultimrps)
            {
                var dr = itemultimrpsDt.NewRow();
                dr["ItemMultiMRPId"] = item.itemmultimrpid;
                dr["WarehouseId"] = item.whid;
                itemultimrpsDt.Rows.Add(dr);
            }
            var param = new SqlParameter("ItemMultiMRPs", itemultimrpsDt);
            param.SqlDbType = SqlDbType.Structured;
            param.TypeName = "dbo.ItemMultiMRPIdAndWhId";

            using (var context = new AuthContext())
            {
                warehouseAPPDCs = context.Database.SqlQuery<WarehouseAPPDC>("GetWarehouseWiseAPP @ItemMultiMRPs", param).ToList();
                storeList = context.StoreDB.Where(x => dashboardDC.StoreId.Contains(x.Id)).Select(x => new StoreList { StoreId = x.Id, StoreName = x.Name }).ToList();
            }

            #endregion


            #region BillDicount_WalletPoint

            var OrderDetailIds = OrderMasters.GroupBy(x => x.orderdetailid).Select(x => x.Key).ToList();

            var orderdetailDt = new DataTable();
            orderdetailDt.Columns.Add("IntValue");
            foreach (var id in OrderDetailIds)
            {
                var dr = orderdetailDt.NewRow();
                dr["IntValue"] = id;
                orderdetailDt.Rows.Add(dr);
            }
            var paramid = new SqlParameter("@OrderDetailIds", orderdetailDt);
            paramid.SqlDbType = SqlDbType.Structured;
            paramid.TypeName = "dbo.IntValues";

            using (var context = new AuthContext())
            {
                orderDiscountDC = context.Database.SqlQuery<OrderDiscountDC>("OrderDataWithDiscount @OrderDetailIds", paramid).ToList();
            }

            #endregion


            var CancelOrderData = OrderMasters.Where(x => CancelOrderStatusList.Contains(x.status)).ToList();
            var OrderData = OrderMasters.Where(x => !CancelOrderStatusList.Contains(x.status)
                            && (PreStatusList.Contains(x.status) || (PostStatus.Contains(x.status) && x.dispatchqty > 0))).ToList();


            if (!dashboardDC.IsExport)
            {
                Warehouseids = OrderMasters.Select(x => x.whid).Distinct().ToList();
                List<MarketingCostWarehouseDC> marketingCosts = new List<MarketingCostWarehouseDC>();

                foreach (var wareid in Warehouseids)
                {
                    MarketingCostWarehouseDC marketingCost = new MarketingCostWarehouseDC();
                    marketingCost.WarehouseName = OrderMasters.FirstOrDefault(x => x.whid == wareid)?.whname;
                    marketingCost.TotalSales = Math.Round(OrderData.Where(x => x.whid == wareid && !x.isfreeitem).Sum(x => (PostStatus.Contains(x.status) ? x.dispatchqty : x.ordqty) * x.price), 2);
                    marketingCost.Cancellation = Math.Round(CancelOrderData.Where(x => x.whid == wareid && !x.isfreeitem).Sum(x => x.ordqty * x.price), 2);
                    marketingCost.Offers = Math.Round(OrderData.Where(x => x.whid == wareid && !x.isfreeitem)
                                            .Sum(x => orderDiscountDC.Any(y => y.OrderDetailId == x.orderdetailid) ?
                                            orderDiscountDC.FirstOrDefault(y => y.OrderDetailId == x.orderdetailid).BillDiscountAmount : 0), 2);

                    marketingCost.Freebies = Math.Round(OrderData.Where(x => x.whid == wareid && x.isfreeitem)
                                               .Sum(x => (PostStatus.Contains(x.status) ? x.dispatchqty : x.ordqty)
                                               * (warehouseAPPDCs.Any(y => y.WarehouseId == x.whid && y.ItemMultiMRPId == x.itemmultimrpid) ? warehouseAPPDCs.FirstOrDefault(y => y.WarehouseId == x.whid && y.ItemMultiMRPId == x.itemmultimrpid).APP : 0)), 2);

                    marketingCost.WalletPoint = Math.Round(OrderData.Where(x => x.whid == wareid && !x.isfreeitem)
                                            .Sum(x => orderDiscountDC.Any(y => y.OrderDetailId == x.orderdetailid) ?
                                            orderDiscountDC.FirstOrDefault(y => y.OrderDetailId == x.orderdetailid).WalletAmount : 0), 2);

                    marketingCost.TotalSpend = Math.Round(marketingCost.Offers + marketingCost.WalletPoint + marketingCost.Freebies, 2);
                    marketingCost.MarketingCost = Math.Round(marketingCost.TotalSales > 0 ? marketingCost.TotalSpend / marketingCost.TotalSales : 0, 2);
                    marketingCosts.Add(marketingCost);
                }
                if (marketingCosts.Count > 0)
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = marketingCosts };
                else
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
            }
            else
            {
                var itemOrderData = OrderMasters.GroupBy(x => new { x.itemmultimrpid, x.itemnumber, x.whid, x.storeid })
                                .Select(x => new { x.Key.itemnumber, x.Key.itemmultimrpid, x.Key.whid, x.Key.storeid }).ToList();

                List<MarketingCostExportDC> marketingCostExports = new List<MarketingCostExportDC>();

                foreach (var export in itemOrderData)
                {
                    var data = OrderMasters.Where(x => x.itemnumber == export.itemnumber && (!PostStatus.Contains(x.status) || (PostStatus.Contains(x.status) && x.dispatchqty > 0)) && x.itemmultimrpid == export.itemmultimrpid && x.whid == export.whid).ToList();
                    if (data != null && data.Count > 0)
                    {
                        var storename = storeList.Where(x => export.storeid == x.StoreId).Select(x => x.StoreName).FirstOrDefault();
                        MarketingCostExportDC marketingCostExport = new MarketingCostExportDC();
                        marketingCostExport.WarehouseName = data.FirstOrDefault().whname;
                        marketingCostExport.ItemNumber = export.itemnumber;
                        marketingCostExport.ItemMultiMRPId = export.itemmultimrpid;
                        marketingCostExport.ItemName = data.FirstOrDefault().itemname;
                        marketingCostExport.CategoryName = data.FirstOrDefault().catname;
                        marketingCostExport.SubCategoryName = data.FirstOrDefault().compname;
                        marketingCostExport.BrandName = data.FirstOrDefault().brandname;
                        marketingCostExport.StoreName = storename;
                        marketingCostExport.TotalSales = Math.Round(data.Where(x => !CancelOrderStatusList.Contains(x.status) && !x.isfreeitem).Sum(x => (PostStatus.Contains(x.status) ? x.dispatchqty : x.ordqty) * x.price), 2);
                        marketingCostExport.Cancellation = Math.Round(data.Where(x => CancelOrderStatusList.Contains(x.status) && !x.isfreeitem).Sum(x => (PostStatus.Contains(x.status) ? x.dispatchqty : x.ordqty) * x.price), 2);
                        marketingCostExport.Offers = Math.Round(data.Where(x => !CancelOrderStatusList.Contains(x.status) && !x.isfreeitem).Sum(x => orderDiscountDC.Any(z => z.OrderDetailId == x.orderdetailid) ? orderDiscountDC.FirstOrDefault(y => y.OrderDetailId == x.orderdetailid).BillDiscountAmount : 0), 2);
                        marketingCostExport.WalletPoints = Math.Round(data.Where(x => !CancelOrderStatusList.Contains(x.status) && !x.isfreeitem).Sum(x => orderDiscountDC.Any(z => z.OrderDetailId == x.orderdetailid) ? orderDiscountDC.FirstOrDefault(y => y.OrderDetailId == x.orderdetailid).WalletAmount : 0), 2);
                        marketingCostExport.Freebies = Math.Round(data.Where(x => !CancelOrderStatusList.Contains(x.status) && x.isfreeitem)
                                                    .Sum(x => (PostStatus.Contains(x.status) ? x.dispatchqty : x.ordqty) * (warehouseAPPDCs.Any(y => y.WarehouseId == x.whid && y.ItemMultiMRPId == x.itemmultimrpid) ? warehouseAPPDCs.FirstOrDefault(y => y.WarehouseId == x.whid && y.ItemMultiMRPId == x.itemmultimrpid).APP : 0)), 2);
                        marketingCostExport.TotalSpend = Math.Round(marketingCostExport.Offers + marketingCostExport.WalletPoints + marketingCostExport.Freebies, 2);
                        marketingCostExport.MarketingCost = Math.Round(marketingCostExport.TotalSales > 0 ? marketingCostExport.TotalSpend / marketingCostExport.TotalSales : 0, 2);

                        marketingCostExports.Add(marketingCostExport);
                    }
                }
                if (marketingCostExports.Count > 0)
                {
                    var dashboardDt = ClassToDataTable.CreateDataTable(marketingCostExports);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/MarketingCostReport");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "MarketingCost" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(dashboardDt, "MarketingCost", filePath);

                    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                  , HttpContext.Current.Request.Url.DnsSafeHost
                                                                  , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                  , "/MarketingCostReport/" + fileName);

                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = FileUrl };
                }
                else
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
            }
        }

        [HttpGet]
        [Route("MarketingCostDashboardJob")]
        public void MarketingCostDashboardJob()
        {
            var currentDate = DateTime.Today;
            if (currentDate.Day == 1)
            {
                ElasticHelper elasticHelper = new ElasticHelper();
                List<ExcelOrderElasticDataDC> OrderMasters = new List<ExcelOrderElasticDataDC>();

                #region Status

                string PreStatus = "Pending,ReadyToPick,InTransit";
                List<string> PreStatusList = PreStatus.Split(',').ToList();

                string status = "Ready to Dispatch,Issued,Shipped,Delivered,sattled";
                List<string> PostStatus = status.Split(',').ToList();

                string OrderStatus = "'" + string.Join("','", PostStatus) + "'" + ",'Delivery Canceled'";

                var PreviousMonth = DateTime.Today.AddMonths(-1);
                string sDate = new DateTime(PreviousMonth.Year, PreviousMonth.Month, 1).ToString("yyyy-MM-dd");
                string eDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).ToString("yyyy-MM-dd");

                #endregion

                var query = $"SELECT orderid,orderdetailid,whid,whname,ordqty,status,price,itemmultimrpid,isfreeitem,createddate,dispatchdate,updateddate,dispatchqty,itemnumber,itemname,catname,compname,brandname,isnull(billdiscountamount,0) billdiscountamount,storeid,walletamount,isnull(customertype,'undefined')customertype,isnull(customerclass,'undefined')customerclass from {platformIdxName} where ordertype in (0,1)";

                string BookingStatus = "'Order Canceled'," + "'" + string.Join("','", PreStatusList) + "'";
                query = query + " and ((createddate >= '" + sDate + "' and createddate<'" + eDate + "' and status in (" + BookingStatus + ")) or (dispatchdate >= '" + sDate + "' and dispatchdate < '" + eDate + "' and status in (" + OrderStatus + ")) or (updateddate >= '" + sDate + "' and updateddate < '" + eDate + "' and status in ('Post Order Canceled')))";


                OrderMasters = elasticHelper.GetOrderMasterList(query);

                var dashboardDt = ClassToDataTable.CreateDataTable(OrderMasters);

                string ExcelSavePath = HttpContext.Current.Server.MapPath("~/MarketingCostReport/MonthlyReport");
                if (!Directory.Exists(ExcelSavePath))
                    Directory.CreateDirectory(ExcelSavePath);

                var fileName = "MarketingCostMonthlyReport_" + PreviousMonth.Month + PreviousMonth.Year + ".xlsx";
                string filePath = ExcelSavePath + "\\" + fileName;

                ExcelGenerator.DataTable_To_Excel(dashboardDt, "MarketingCost_" + PreviousMonth.Month + PreviousMonth.Year, filePath);
            }
        }

        [Route("GetCompanyTopMarginItemV2")]
        [HttpGet]
        public async Task<ItemResponseDc> GetCompanyTopMarginItemV2(int PeopleId, int warehouseId, int skip, int take, string lang, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.ItemDataDC>() };
            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                List<DataContracts.External.ItemDataDC> ItemDataDCs = new List<DataContracts.External.ItemDataDC>();

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                var brandids = string.Join(",", SubSubCats).Split(',').Select(x => Convert.ToInt32(x)).ToList();

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var ic in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = ic;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("Classification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                DataTable brandidDt = new DataTable();
                brandidDt.Columns.Add("IntValue");
                foreach (var item in brandids)
                {
                    DataRow dr = brandidDt.NewRow();
                    dr[0] = item;
                    brandidDt.Rows.Add(dr);
                }
                var SubSubCategoryIds = new SqlParameter("SubSubCategoryIds", brandidDt);
                SubSubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubSubCategoryIds.TypeName = "dbo.IntValues";


                var Subcatids = string.Join(",", SubCats).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable SubCatidDt = new DataTable();
                SubCatidDt.Columns.Add("IntValue");
                foreach (var item in Subcatids)
                {
                    DataRow dr = SubCatidDt.NewRow();
                    dr[0] = item;
                    SubCatidDt.Rows.Add(dr);
                }
                var SubCategoryIds = new SqlParameter("SubCategoryIds", SubCatidDt);
                SubCategoryIds.SqlDbType = SqlDbType.Structured;
                SubCategoryIds.TypeName = "dbo.IntValues";

                var Categoryid = string.Join(",", CatIds).Split(',').Select(x => Convert.ToInt32(x)).ToList();
                DataTable CatIdDt = new DataTable();
                CatIdDt.Columns.Add("IntValue");
                foreach (var item in Categoryid)
                {
                    DataRow dr = CatIdDt.NewRow();
                    dr[0] = item;
                    CatIdDt.Rows.Add(dr);
                }
                var CategoryIds = new SqlParameter("CategoryIds", CatIdDt);
                CategoryIds.SqlDbType = SqlDbType.Structured;
                CategoryIds.TypeName = "dbo.IntValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetCompanyTopMarginItemSalesAppV2]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@Skip", skip));
                cmd.Parameters.Add(new SqlParameter("@Take", take));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(SubSubCategoryIds);
                cmd.Parameters.Add(SubCategoryIds);
                cmd.Parameters.Add(CategoryIds);
                cmd.Parameters.Add(param1);

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<DataContracts.External.ItemDataDC>(reader).ToList();
                reader.NextResult();
                while (reader.Read())
                {
                    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                }

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    ItemData = ItemData.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (ItemData != null && ItemData.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }
                BackendOrderController backendOrderController = new BackendOrderController();
                foreach (var it in ItemData.Where(a => (a.ItemAppType == 0 || a.ItemAppType == 1) && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid)))
                {

                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                    if (customerId > 0)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                    }

                    //Condition for offer end

                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        else if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }
                    else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;

                    }

                    if (it.OfferCategory == 1)
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }

                    if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                    {
                        if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                        }
                        else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                        }

                        else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName; //item display name
                        }
                        else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                        }
                    }

                    ItemDataDCs.Add(it);
                }

                itemResponseDc.ItemDataDCs = ItemDataDCs;
            }
            return itemResponseDc;
        }

        [Route("GetLastPurchaseItemNewV2")]
        [AllowAnonymous]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.ItemResponseDc> GetLastPurchaseItemAsyncNewV2(int PeopleId, int customerId, int warehouseId, int skip, int take, string lang, string IncentiveClassifications)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>() };
            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);

                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }

                #endregion

                var categoryIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                var companyIds = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                var brandIds = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                var enddate = DateTime.Now;
                var startDate = enddate.AddMonths(-9);
                var orderPredicate = PredicateBuilder.New<MongoOrderMaster>(x => x.Status != "Inactive" && x.Status != "Dummy Order Cancelled" && !x.Deleted
                                                    && x.CustomerId == customerId && x.WarehouseId == warehouseId);

                var platformIdxName = "skorderdata_" + AppConstants.Environment;
                //ElasticSqlHelper<DataContracts.ElasticSearch.ElasticItemNumber> elasticSqlHelper = new ElasticSqlHelper<DataContracts.ElasticSearch.ElasticItemNumber>();

                // var orderdatas = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync($"SELECT top 100 itemnumber,itemname,createddate,ordqty,itemmultimrpid from {platformIdxName} where custid='{customerId}' and whid='{warehouseId}' order by createddate desc,ordqty desc"))).ToList();

                string query = $" SELECT top 10 orderid from skorderdata_{AppConstants.Environment} where custid={customerId} and whid='{warehouseId}'  and catid in ({ string.Join(",", categoryIds) }) and compid in ({ string.Join(",", companyIds) }) and brandid in ({ string.Join(",", brandIds) })  group by orderid order by orderid desc";

                ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.LastPOOrderData> elasticSqlHelperData = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.LastPOOrderData>();

                var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(query)).ToList());

                if (orderdetails != null && orderdetails.Any())
                {
                    var orderIdList = orderdetails.Select(x => x.OrderId).ToList();
                    List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                    string queryItem = $" SELECT itemnumber from skorderdata_{AppConstants.Environment} where custid={customerId} and whid='{warehouseId}'  and catid in ({ string.Join(",", categoryIds) }) and compid in ({ string.Join(",", companyIds) }) and brandid in ({ string.Join(",", brandIds) }) and orderid in ({ string.Join(",", orderIdList) })  group by itemnumber";

                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.LastPOOrderItemNumberData> elasticSqlHelperDataNew = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.LastPOOrderItemNumberData>();

                    var OrderItemDetails = AsyncContext.Run(async () => (await elasticSqlHelperDataNew.GetListAsync(queryItem)).ToList());

                    var ItemNumberList = OrderItemDetails.Select(x => x.ItemNumber).ToList();

                    ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                    var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesCatelogElasticData(warehouseId, StoreCategorySubCategoryBrands, ItemNumberList, "", -1, -1, (skip * take), take, "DESC", true, IncentiveClassificationList));
                    ItemData = data.ItemMasters;
                    itemResponseDc.TotalItem = data.TotalItem;

                    var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                    List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                    if (ItemData != null && ItemData.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    }
                    BackendOrderController backendOrderController = new BackendOrderController();
                    foreach (var it in ItemData)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                        it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);

                        //Condition for offer end
                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            else if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }
                        else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;

                        }

                        if (it.OfferCategory == 1)
                        {
                            if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                it.IsOffer = true;
                            else
                                it.IsOffer = false;
                        }

                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }
                            }
                            else { it.dreamPoint = 0; }

                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch { }

                        if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }

                        it.Itemtype = 1;
                        ItemDataDCs.Add(it);
                    }
                }
            }
            itemResponseDc.ItemDataDCs = ItemDataDCs;
            return itemResponseDc;
        }



        [Route("GetItemsbyBarcode")]
        [HttpGet]
        public List<ItemMaster> GetItemsbyBarcodes(string Barcode)
        {
            using (var context = new AuthContext())
            {
                SqlParameter sqlParameter = new SqlParameter("@Barcode", Barcode);
                var itemmaster = context.Database.SqlQuery<ItemMaster>("ItemDetailByBarcode @Barcode", sqlParameter).ToList();
                return itemmaster;
            }
        }

        [HttpGet]
        [Route("GetExecutiveBeatByCustId")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetExecutiveBeatByCustId(int PeopleId, int CustomerId)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse response = new DataContracts.External.MobileExecutiveDC.APIResponse();
            DataContracts.External.MobileExecutiveDC.MyBeatDC res = new DataContracts.External.MobileExecutiveDC.MyBeatDC();
            AllBeatCustomerDc VisitCust = new AllBeatCustomerDc();

            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                //var role = authContext.Database.SqlQuery<string>(query).ToList();
                //bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                #region Beat edit configuration dynamic

                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var ActualRoutes = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(x => x.CustomerId == CustomerId) ? todayBeat.ActualRoutes.Where(x => x.CustomerId == CustomerId).ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "ExecutiveBeatByCustId";
                var peopleId = new SqlParameter("@peopleId", PeopleId);
                var custid = new SqlParameter("@customerId", CustomerId);
                VisitCust = authContext.Database.SqlQuery<AllBeatCustomerDc>("exec " + Sp + " @peopleId,@customerId", peopleId, custid).FirstOrDefault();

                if (VisitCust == null)
                {
                    response.Status = false;
                    response.Data = res;
                    return response;
                }

                List<int> searchCustomerIds = new List<int>();

                List<DataContracts.External.MobileExecutiveDC.SalesGroupDc> CustSalesGrouplist = new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>();
                List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC> CustomerRemarkList = new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>();
                List<DataContracts.External.MobileExecutiveDC.BeatCustomers> BeatCustomers = new List<DataContracts.External.MobileExecutiveDC.BeatCustomers>();

                var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(x => x.CustomerId == CustomerId) ? CustomerId : 0;
                var NotvisitedCustids = visitedCustids > 0 ? 0 : CustomerId;//searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();

                var param1 = new SqlParameter("peopleId", PeopleId);
                var param2 = new SqlParameter("customerId", CustomerId);
                res = authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.MyBeatDC>("GetExecutiveMyBeatByCustId @peopleId,@customerId", param1, param2).FirstOrDefault();

                List<int> CustomerIds = new List<int>();

                CustomerIds.Add(CustomerId);
                var CustomerIdslist = new System.Data.DataTable();
                var CustIds = new System.Data.DataTable();
                CustomerIdslist.Columns.Add("IntValue");
                CustIds.Columns.Add("IntValue");
                foreach (var item in CustomerIds)
                {
                    var dr = CustomerIdslist.NewRow();
                    dr["IntValue"] = item;
                    CustomerIdslist.Rows.Add(dr);

                    var dr1 = CustIds.NewRow();
                    dr1["IntValue"] = item;
                    CustIds.Rows.Add(dr1);
                }
                var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                CIds.SqlDbType = System.Data.SqlDbType.Structured;
                CIds.TypeName = "dbo.IntValues";

                var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                CustIdParam.TypeName = "dbo.IntValues";
                CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                List<string> SkCodeList = new List<string>();

                SkCodeList = SkCodeList.Distinct().ToList();
                var TagData = await CRMCustomerTag(SkCodeList);

                res = new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = VisitCust.CustomerId == CustomerId ? VisitCust.Day : "NoBeat",
                    CustomerId = res.CustomerId,
                    CustomerName = res.CustomerName,
                    OrderCount = res.OrderCount,
                    MTDSales = res.MTDSales,
                    PendingOrderCount = res.PendingOrderCount,
                    Skcode = res.Skcode,
                    Mobile = res.Mobile,
                    ShopName = res.ShopName,
                    ShippingAddress = res.ShippingAddress,
                    CustomerVerify = res.CustomerVerify,
                    lat = res.lat,
                    lg = res.lg,
                    Active = res.Active,
                    LastOrderDate = res.LastOrderDate,
                    LastOrderDaysAgo = res.LastOrderDaysAgo,
                    WarehouseId = res.WarehouseId,
                    Distance = res.Distance,
                    IsReschedule = res.IsReschedule,
                    IsCustomerUpdate = res.IsCustomerUpdate,
                    CheckIn = res.CheckIn,
                    IsVerifyRequestPending = res.IsVerifyRequestPending,
                    IsCustomerProfileEdit = res.IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == CustomerId) ? CustSalesGrouplist.Where(y => y.CustomerId == CustomerId).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesGroupDc>(),
                    CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == CustomerId) ? CustomerRemarkList.Where(y => y.CustomerId == CustomerId).ToList() : new List<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>(),
                    IsBeat = (today.ToString("dddd").ToUpper() == VisitCust.Day) ? true : false,
                    IsVisited = visitedCustids > 0 ? true : false,
                    CRMTag = TagData.FirstOrDefault(y => y.Skcode == res.Skcode)?.CRMTags,
                    LastVisitDaysAgo = (todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == CustomerId) ? ActualRoutes.FirstOrDefault(y => y.CustomerId == res.CustomerId)?.CheckIn : null) != null ?
                                    (DateTime.Now.Date - Convert.ToDateTime(todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == res.CustomerId)?.CheckIn : null).Date).Days :
                                    res.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(res.CheckIn).Date).Days : 90, //TODO:SalesAppMarch2023
                    CustomerType = res.CustomerType,
                };

                res.IsBeatEdit = BeatEdit;
            }
            if (res != null)
            {
                response.Status = true;
                response.Data = res;
            }
            else
            {
                response.Status = false;
                response.Data = res;
            }
            return response;
        }

        [Route("GetHighesPOForReviewBasket")]
        [AllowAnonymous]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.ItemResponseDc> GetHighesPOForReviewBasketAsync(int PeopleId, int CustomerId, int WarehouseId, string lang)
        {
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>() };

            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();

            CustomerShoppingCartDc customerShoppingCartDc = new CustomerShoppingCartDc();
            MongoDbHelper<CustomerShoppingCart> mongoDbHelper = new MongoDbHelper<CustomerShoppingCart>();
            var cartPredicate = PredicateBuilder.New<CustomerShoppingCart>(x => x.CustomerId == CustomerId && x.WarehouseId == WarehouseId && !x.GeneratedOrderId.HasValue && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));
            if (PeopleId > 0)
            {
                cartPredicate = cartPredicate.And(x => x.PeopleId == PeopleId);
            }
            else
            {
                cartPredicate = cartPredicate.And(x => x.PeopleId == 0);
            }
            var customerShoppingCart = mongoDbHelper.Select(cartPredicate, x => x.OrderByDescending(y => y.ModifiedDate), null, null, collectionName: "CustomerShoppingCart").FirstOrDefault();
            List<int> AddedItemMrpIdLst = new List<int>();
            if (customerShoppingCart != null && customerShoppingCart.ShoppingCartItems != null && customerShoppingCart.ShoppingCartItems.Any())
            {
                AddedItemMrpIdLst = customerShoppingCart.ShoppingCartItems.Where(x => x.IsActive && x.IsDeleted != true).ToList().Select(x => x.ItemMultiMRPId).ToList();
            }

            var enddate = DateTime.Now;
            var startDate = enddate.AddMonths(-9);
            var orderPredicate = PredicateBuilder.New<MongoOrderMaster>(x => x.Status != "Inactive" && x.Status != "Dummy Order Cancelled" && !x.Deleted
                                                && x.CustomerId == CustomerId && x.WarehouseId == WarehouseId);
            /*
            var indexName = "skorderdata_" + AppConstants.Environment;
            var client = ElasticNestHelper<DataContracts.ElasticSearch.skorderdata>.CreateElaticConfig(indexName);
            var filters = new List<Func<QueryContainerDescriptor<DataContracts.ElasticSearch.skorderdata>, QueryContainer>>();

            filters.Add(fq => fq.Term(x => x.Field("whid").Value(WarehouseId)));//---TODO--Remove on prod
            filters.Add(fq => fq.Term(x => x.Field("custid").Value(CustomerId)));
            if (AddedItemMrpIdLst.Any())
                filters.Add(fq => fq.Bool(a => a.MustNot(z => z.Terms(t => t.Field("itemmultimrpid").Terms(AddedItemMrpIdLst)))));
            var orderdatas = (client.Search<DataContracts.ElasticSearch.skorderdata>(x => x.Query(q =>
                       q.Bool(b => b.Filter(filters))))).Documents.OrderByDescending(x => x.createddate).OrderByDescending(x=>x.ordqty).Take(10).ToList();

            */
            var platformIdxName = "skorderdata_" + AppConstants.Environment;

            string query = $" SELECT top 10 orderid from skorderdata_{AppConstants.Environment} where custid={CustomerId} and whid='{WarehouseId}' group by orderid order by orderid desc";

            ElasticSqlHelper<DataContracts.External.LastPOOrderData> elasticSqlHelperData = new ElasticSqlHelper<DataContracts.External.LastPOOrderData>();

            var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(query)).ToList());

            if (orderdetails != null && orderdetails.Any())
            {
                var orderIdList = orderdetails.Select(x => x.OrderId).ToList();
                //List<DataContracts.External.ItemDataDC> ItemData = new List<DataContracts.External.ItemDataDC>();
                //string queryItem = $" SELECT itemnumber from skorderdata_{AppConstants.Environment} where custid={customerId} and whid='{warehouseId}'  and catid in ({ string.Join(",", categoryIds) }) and compid in ({ string.Join(",", companyIds) }) and brandid in ({ string.Join(",", brandIds) }) and orderid in ({ string.Join(",", orderIdList) })  group by itemnumber";

                ElasticSqlHelper<DataContracts.ElasticSearch.ElasticItemNumber> elasticSqlHelper = new ElasticSqlHelper<DataContracts.ElasticSearch.ElasticItemNumber>();

                var orderdatas = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync($"SELECT itemnumber,itemname,createddate,ordqty,itemmultimrpid from {platformIdxName} where custid='{CustomerId}' and whid='{WarehouseId}' and orderid in ({ string.Join(",", orderIdList) })  order by createddate desc"))).ToList();
                //select sum(dispatchqty * price) as val from {platformIdxName} where status='Post Order Canceled' and updateddate>='{sDate}' and updateddate<'{eDate}' {whereCond.ToString()}")).FirstOrDefault());


                var ItemNumberLists = AddedItemMrpIdLst != null && AddedItemMrpIdLst.Any() ? orderdatas.Where(x => !AddedItemMrpIdLst.Contains(x.itemmultimrpid)).ToList().Select(x => new
                {
                    itemmultimrpid = x.itemmultimrpid,
                    itemnumber = x.itemnumber,
                    itemname = x.itemname,
                    createddate = x.createddate,
                    ordqty = x.ordqty
                }).ToList() : orderdatas.Select(x => new
                {
                    itemmultimrpid = x.itemmultimrpid,
                    itemnumber = x.itemnumber,
                    itemname = x.itemname,
                    createddate = x.createddate,
                    ordqty = x.ordqty
                }).ToList();


                var ItemNumberList = ItemNumberLists.Select(x =>
                            new
                            {
                                x.itemnumber,
                                x.createddate,
                                x.ordqty
                            }
                           ).GroupBy(x => x.itemnumber).Select(x => new
                           {
                               ItemNumber = x.Key,
                               x.OrderByDescending(y => y.createddate).FirstOrDefault().ordqty,
                               x.OrderByDescending(y => y.createddate).FirstOrDefault().createddate
                           }).OrderByDescending(x => x.ordqty).ToList();

                //var ItemNumberList = ItemNumberLists.Select(x => x.itemnumber).ToList();

                /*
                MongoDbHelper<MongoOrderMaster> mongoDbHelper = new MongoDbHelper<MongoOrderMaster>();
                var enddate = DateTime.Now;
                var startDate = enddate.AddMonths(-9);
                var orderPredicate = PredicateBuilder.New<MongoOrderMaster>(x => x.Status != "Inactive" && x.Status != "Dummy Order Cancelled" && !x.Deleted
                                                    && x.CustomerId == CustomerId && x.WarehouseId == WarehouseId);
                // && x.CreatedDate >= startDate && x.CreatedDate <= enddate);
                var ordercollection = mongoDbHelper.mongoDatabase.GetCollection<MongoOrderMaster>("MongoOrderMaster").AsQueryable();
                var itemList = ordercollection.Where(orderPredicate)
                                    .SelectMany(t => t.orderDetails, (t, a) => new
                                    {
                                        CreatedDate = t.CreatedDate,
                                        Qty = a.qty,
                                        ItemAmount = a.TotalAmt,
                                        ItemNumber = a.itemNumber
                                    }).ToList();
                var ItemNumberList = itemList.GroupBy(x => x.ItemNumber)
                                    .Select(y => new
                                    {
                                        ItemNumber = y.Key,
                                        Qty = y.FirstOrDefault().Qty,
                                        CreatedDate = y.FirstOrDefault().CreatedDate,
                                        ItemAmount = y.FirstOrDefault().ItemAmount
                                    }).ToList();
                */
                if (ItemNumberList != null && ItemNumberList.Any())
                {
                    List<string> ItemNumberLst = ItemNumberList.Select(x => x.ItemNumber).Distinct().ToList();
                    //string ItemNumbers = string.Join(",", ItemNumberLst);

                    List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

                    if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                    {
                        using (var context = new AuthContext())
                        {
                            var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == CustomerId);
                            if (context.Database.Connection.State != ConnectionState.Open)
                                context.Database.Connection.Open();

                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                            {
                                List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                                if (!Convert.ToBoolean(ConfigurationManager.AppSettings["salesAppElasticData"]))
                                {
                                    var IdDt = new DataTable();
                                    SqlParameter param = null;

                                    IdDt = new DataTable();
                                    IdDt.Columns.Add("categoryId");
                                    IdDt.Columns.Add("companyId");
                                    IdDt.Columns.Add("brandId");
                                    foreach (var item in StoreCategorySubCategoryBrands)
                                    {
                                        var dr = IdDt.NewRow();
                                        dr["categoryId"] = item.Categoryid;
                                        dr["companyId"] = item.SubCategoryId;
                                        dr["brandId"] = item.BrandId;
                                        IdDt.Rows.Add(dr);
                                    }

                                    var ItemNumberDT = new DataTable();
                                    ItemNumberDT.Columns.Add("StringValue");
                                    foreach (var item in ItemNumberLst)
                                    {
                                        var dr = ItemNumberDT.NewRow();
                                        dr["StringValue"] = item;
                                        ItemNumberDT.Rows.Add(dr);
                                    }
                                    var paramItemNumber = new SqlParameter("@ItemNumbers", ItemNumberDT);
                                    paramItemNumber.SqlDbType = System.Data.SqlDbType.Structured;
                                    paramItemNumber.TypeName = "dbo.stringValues";

                                    param = new SqlParameter("CatCompanyBrand", IdDt);
                                    param.SqlDbType = SqlDbType.Structured;
                                    param.TypeName = "dbo.CatCompanyBrand";

                                    var cmd = context.Database.Connection.CreateCommand();
                                    cmd.CommandText = "[dbo].[GetHighestPOItemforSalesAppN]";
                                    cmd.Parameters.Add(new SqlParameter("@warehouseId", WarehouseId));
                                    cmd.Parameters.Add(param);
                                    cmd.Parameters.Add(paramItemNumber);


                                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                                    // Run the sproc
                                    var reader = cmd.ExecuteReader();
                                    ItemData = ((IObjectContextAdapter)context)
                                    .ObjectContext
                                    .Translate<DataContracts.External.MobileExecutiveDC.ItemDataDC>(reader).ToList();
                                    reader.NextResult();
                                    if (reader.Read())
                                    {
                                        itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                                    }
                                }
                                else
                                {
                                    var StoreCategorySubCategory = Mapper.Map(StoreCategorySubCategoryBrands).ToANew<List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>>();
                                    ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                                    var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesCatelogElasticData(WarehouseId, StoreCategorySubCategory, ItemNumberLst, "", -1, -1, 0, 1000, "DESC", true, null));
                                    ItemData = Mapper.Map(data.ItemMasters.ToList()).ToANew<List<DataContracts.External.MobileExecutiveDC.ItemDataDC>>();//OrderByDescending(y => y.LastOrderQty)
                                    itemResponseDc.TotalItem = data.TotalItem;
                                }

                                var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                                BackendOrderController backendOrderController = new BackendOrderController();
                                foreach (var it in ItemData)
                                {
                                    double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                                    it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                                    //Condition for offer end
                                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                                    {
                                        if (it.OfferCategory == 2)
                                        {
                                            it.IsOffer = false;
                                            it.FlashDealSpecialPrice = 0;
                                            it.OfferCategory = 0;
                                        }
                                        else if (it.OfferCategory == 1)
                                        {
                                            it.IsOffer = false;
                                            it.OfferCategory = 0;
                                        }

                                    }
                                    else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;

                                    }

                                    if (it.OfferCategory == 1)
                                    {
                                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                            it.IsOffer = true;
                                        else
                                            it.IsOffer = false;
                                    }

                                    try
                                    {
                                        if (!it.IsOffer)
                                        {
                                            /// Dream Point Logic && Margin Point
                                            int? MP, PP;
                                            double xPoint = xPointValue * 10;
                                            //Customer (0.2 * 10=1)
                                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                            {
                                                PP = 0;
                                            }
                                            else
                                            {
                                                PP = it.promoPerItems;
                                            }
                                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                            {
                                                MP = 0;
                                            }
                                            else
                                            {
                                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                            }
                                            if (PP > 0 && MP > 0)
                                            {
                                                int? PP_MP = PP + MP;
                                                it.dreamPoint = PP_MP;
                                            }
                                            else if (MP > 0)
                                            {
                                                it.dreamPoint = MP;
                                            }
                                            else if (PP > 0)
                                            {
                                                it.dreamPoint = PP;
                                            }
                                            else
                                            {
                                                it.dreamPoint = 0;
                                            }
                                        }
                                        else { it.dreamPoint = 0; }

                                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                        if (it.price > it.UnitPrice)
                                        {
                                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                        }
                                        else
                                        {
                                            it.marginPoint = 0;
                                        }
                                    }
                                    catch { }

                                    if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                                    {
                                        if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                        {
                                            it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                        }
                                        else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                        {
                                            it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                        }

                                        else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                        {
                                            it.itemname = it.HindiName; //item display name
                                        }
                                        else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                        {
                                            it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                        }
                                    }

                                    it.Itemtype = 1;
                                    ItemDataDCs.Add(it);
                                }

                            }
                        }
                    }
                }
                var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                using (var context = new AuthContext())
                {
                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, WarehouseId, context);
                }

                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (ItemDataDCs != null && ItemDataDCs.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(WarehouseId, ItemDataDCs.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }



                foreach (var item in ItemDataDCs)
                {
                    item.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.Classification;
                    item.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.BackgroundRgbColor;


                    if (ItemNumberList != null && ItemNumberList.Any(x => x.ItemNumber == item.ItemNumber))
                    {
                        item.LastOrderDate = ItemNumberList.Where(x => x.ItemNumber == item.ItemNumber).OrderByDescending(x => x.createddate).FirstOrDefault().createddate;
                        item.LastOrderQty = ItemNumberList.Where(x => x.ItemNumber == item.ItemNumber).OrderByDescending(x => x.createddate).FirstOrDefault().ordqty;
                        item.LastOrderDays = (DateTime.Today - item.LastOrderDate).Value.Days;
                    }

                    if (item.price > item.UnitPrice)
                    {
                        item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                        if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                        {
                            var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                            var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                            var UPMRPMargin = item.marginPoint.Value;
                            if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                        }

                    }
                    else
                    {
                        item.marginPoint = 0;
                    }
                }
            }
            itemResponseDc.ItemDataDCs = ItemDataDCs.OrderByDescending(y => y.PurchaseValue).ToList();
            return itemResponseDc;
        }

        [Route("GetSalesPersonKPI")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.SalesKpiResponse>> GetSalesPersonKPI(int peopleId, int warehouseId, int month, int year)
        {
            ItemMasterManager manager = new ItemMasterManager();
            var configs = await manager.GetSalesPersonKPIConfigs(peopleId, warehouseId, month, year);

            DateTime startDate = new DateTime(year, month, 1);
            string sDate = startDate.ToString("yyyy-MM-dd");
            string eDate = startDate.Date.AddMonths(1).AddDays(1).ToString("yyyy-MM-dd");
            //List<SalesPersonKpiResponse> salesPersonKpi = new List<SalesPersonKpiResponse>();
            List<DataContracts.External.MobileExecutiveDC.SalesKpiResponse> salesKpiResponses = new List<DataContracts.External.MobileExecutiveDC.SalesKpiResponse>();


            bool Isdigitalexecutive = false;


            using (var authContext = new AuthContext())
            {
                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + peopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = authContext.Database.SqlQuery<string>(query).ToList();
                Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));
            }

            foreach (var StoreData in configs.GroupBy(s => new { s.StoreId, s.StoreName }))
            {
                List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiResponse> salesPersonKpi = new List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiResponse>();
                DataContracts.External.MobileExecutiveDC.SalesKpiResponse salesKpiResponse = new DataContracts.External.MobileExecutiveDC.SalesKpiResponse();
                salesKpiResponse.StoreId = StoreData.Key.StoreId;
                salesKpiResponse.StoreName = StoreData.Key.StoreName;

                foreach (var item in StoreData.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type }))
                {
                    DataContracts.External.MobileExecutiveDC.SalesPersonKpiResponse kpi = new DataContracts.External.MobileExecutiveDC.SalesPersonKpiResponse
                    {
                        Month = month,
                        Year = year,
                        KpiName = item.Key.KpiName,
                        DisplayName = string.IsNullOrEmpty(item.Key.DisplayName) ? item.Key.KpiName : item.Key.DisplayName,
                        Type = item.Key.Type
                    };
                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKPIOrderData> elasticSqlHelperOrdeData = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKPIOrderData>();
                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal> elasticSqlHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal>();
                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData> skcodeElasticHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData>();

                    //var clusterIds = string.Join(",", item.Select(s => s.ClusterId).Distinct().ToList());


                    var Targets = item.GroupBy(s => s.KPIId).Select(d => new { KPIID = d.Key, Target = d.FirstOrDefault().Target, IncentiveAmount = d.FirstOrDefault().IncentiveAmount });
                    double incentiveAmount = 0;
                    var queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from {platformIdxName} where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and executiveid = { peopleId } and IIF(isdigitalorder is null, false, isdigitalorder) = false";

                    if (Isdigitalexecutive)
                        queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from {platformIdxName} where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and ordertakensalespersonid = { peopleId } and IIF(isdigitalorder is null, false, isdigitalorder) = true";

                    var OrderData = (await elasticSqlHelperOrdeData.GetListAsync(queryOrderData)).ToList();
                    switch (item.Key.KpiName)
                    {
                        case "MTD":

                            incentiveAmount = 0;
                            foreach (var store in item.GroupBy(d => d.StoreId))
                            {
                                //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());
                                //Old Query: var achievedVal = (await elasticSqlHelper.GetListAsync($"select sum(dispatchqty * price) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(y => new { y.dispatchqty, y.price }).Sum(y => y.dispatchqty * y.price);
                                var Achievement = achievedVal;
                                var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                // var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                // var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();
                                // kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                kpi.Achievement += Math.Round(Achievement, 0);
                                kpi.Target += Target.Sum(d => d.Target);
                            }
                            break;


                        case "MAC":
                            incentiveAmount = 0;

                            foreach (var store in item.GroupBy(d => d.StoreId))
                            {
                                //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                // var achievedVal = (await elasticSqlHelper.GetListAsync($"select count(distinct custid) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}' and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(x => x.custid).Distinct().Count();
                                var Achievement = achievedVal;//achievedVal.val;
                                var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                kpi.Achievement += Achievement;//Math.Round(Achievement, 0);
                                kpi.Target += Target.Sum(d => d.Target);
                            }

                            break;

                        case "Success Stores":
                            incentiveAmount = 0;

                            var date = DateTime.Now;
                            var isMonthComplete = false;
                            if (date.Day < 3)
                            {
                                isMonthComplete = true;
                                date = DateTime.Now.AddMonths(-1);
                            }
                            var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

                            var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                            string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
                            var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and executiveid ={peopleId} group by skcode,storeid";
                            var skCodeDataLists = await skcodeElasticHelper.GetListAsync(query);
                            foreach (var store in item.GroupBy(d => d.StoreId))
                            {
                                // var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                //var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and storeid={store.Key} and executiveid ={peopleId} group by skcode,storeid";
                                //var skCodeDataList = await skcodeElasticHelper.GetListAsync(query);

                                var skCodeDataList = skCodeDataLists.Where(x => x.storeid == store.Key).ToList();

                                var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                               && s.TargetOnStores.Count > 0
                                               && s.TargetOnStores.Any(d => d.StoreId == store.Key), collectionName: DocumentName).ToList();
                                List<DataContracts.External.MobileExecutiveDC.CustStoreTargets> targetOnStores = new List<DataContracts.External.MobileExecutiveDC.CustStoreTargets>();
                                foreach (var data in allTarget)
                                {
                                    foreach (var storeTarget in data.TargetOnStores)
                                    {
                                        targetOnStores.Add(new DataContracts.External.MobileExecutiveDC.CustStoreTargets
                                        {
                                            skcode = data.Skcode,
                                            StoreId = storeTarget.StoreId,
                                            Target = storeTarget.Target,
                                            TargetLineItem = storeTarget.TargetLineItem
                                        });
                                    }

                                }

                                //var targetOnStores = mongoHelper.GetWithProjection(s => s.TargetOnStores.Any(d => d.StoreId == store.Key),
                                //           s => s.TargetOnStores.Select(d => new CustStoreTargets
                                //           {
                                //               skcode = s.Skcode,
                                //               StoreId = d.StoreId,
                                //               Target = d.Target,
                                //               TargetLineItem = d.TargetLineItem
                                //           }).ToList(), DocumentName).SelectMany(d => d).ToList();

                                int Achievement = 0;

                                targetOnStores.ForEach(s =>
                                {
                                    var skcodeData = skCodeDataList.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                        s.Target <= a.dispatchamount &&
                                        (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                                    );

                                    if (skcodeData != null)
                                        Achievement++;

                                });


                                var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();

                                incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                kpi.Achievement += Achievement;
                                kpi.Target += Target.Sum(d => d.Target);
                            }

                            break;

                    }

                    //kpi.AchievementPercent = Math.Round(100 * (kpi.Achievement / kpi.Target), 0);
                    kpi.AchievementPercent = kpi.Target > 0 ? Math.Round(100 * (kpi.Achievement / kpi.Target), 0) : 0;
                    var incentives = item.GroupBy(d => new { d.AchievePercent, d.IncentivePercent });
                    var incentivePercent = incentives.Where(s => s.Key.AchievePercent <= kpi.AchievementPercent).OrderByDescending(s => s.Key.AchievePercent)?.FirstOrDefault()?.Key?.IncentivePercent ?? 0;
                    kpi.Earning += incentivePercent == 0 ? 0 : Math.Round((incentiveAmount * incentivePercent) / 100, 0);
                    salesPersonKpi.Add(kpi);
                }
                salesKpiResponse.SalesPersonKpi = salesPersonKpi;
                salesKpiResponses.Add(salesKpiResponse);
            }
            return salesKpiResponses;
        }

        [Route("GetTargetItem")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.SalesItemResponseDc> GetTargetItem(int companyId, int storeId, int customerId, int warehouseId, int peopleId, int skip, int take, string lang, string itemname)
        {
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.SalesItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>() };
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();

            List<int> CatIds = new List<int>();
            List<int> SubCats = new List<int>();
            List<int> SubSubCats = new List<int>();
            if (peopleId != 0)
            {
                StoreCategorySubCategoryBrands = GetCatSubCatwithStores(peopleId);
                if (storeId > 0)
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.StoreId == storeId).ToList();
                CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
            }

            var today = DateTime.Today;
            if (today.Day <= 10 && companyId == 0)
            {
                today = today.AddMonths(-1);
            }
            var monthStart = new DateTime(today.Year, today.Month, 1);
            var monthEnd = monthStart.AddMonths(1).AddDays(-1);
            var startDate = monthStart.ToString("yyyy-MM-dd");
            var enddate = monthEnd.ToString("yyyy-MM-dd");

            string query = $"SELECT itemnumber from skorderdata_{AppConstants.Environment} where whid={warehouseId} and custid={customerId}  and createddate>='{startDate}' and createddate <= '{enddate}'";
            if (!string.IsNullOrEmpty(itemname))
                query += $" and (lcase(itemname) like '%{itemname.ToLower()}%' or lcase(itemnumber) like '%{itemname.ToLower()}%') ";
            if (companyId > 0)
            {
                query += $" and compid={companyId}";
            }

            if (CatIds != null && CatIds.Any())
            {
                query += $" and catid in ({string.Join(",", CatIds)})";
            }

            if (SubCats != null && SubCats.Any())
            {
                query += $" and compid in ({string.Join(",", SubCats)})";
            }
            if (SubSubCats != null && SubSubCats.Any())
            {
                query += $" and brandid in ({string.Join(",", SubSubCats)})";
            }

            query += " group by itemnumber";


            ElasticSqlHelper<elasticItemvalue> elasticSqlHelper = new ElasticSqlHelper<elasticItemvalue>();

            var orderitems = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).ToList());
            var itemnumbers = string.Empty;
            if (orderitems != null && orderitems.Any())
            {
                itemnumbers = "'" + string.Join("','", orderitems.Select(x => x.itemnumber)) + "'";
            }
            string itemIndex = ConfigurationManager.AppSettings["ElasticSearchIndexName"];
            query = $"SELECT itemnumber from {itemIndex} where warehouseid={warehouseId} " +
                $" and active=true and deleted=false and  isdiscontinued=false and (isitemlimit=false or (isitemlimit=true and itemlimitqty>0 and itemlimitqty-minorderqty>0 )) and (itemapptype=0 or itemapptype=1)";

            if (!string.IsNullOrEmpty(itemnumbers))
                query += $" and itemnumber not in ({ itemnumbers })";

            if (!string.IsNullOrEmpty(itemname))
                query += $" and (lcase(itemname) like '%{itemname.ToLower()}%' or lcase(itemnumber) like '%{itemname.ToLower()}%' ) ";

            if (CatIds != null && CatIds.Any())
            {
                query += $" and categoryid in ({string.Join(",", CatIds)})";
            }

            if (SubCats != null && SubCats.Any())
            {
                query += $" and subcategoryid in ({string.Join(",", SubCats)})";
            }
            if (companyId != 0)
            {
                query += $" and subcategoryid ={companyId}";
            }
            if (SubSubCats != null && SubSubCats.Any())
            {
                query += $" and subsubcategoryid in ({string.Join(",", SubSubCats)})";
            }

            query += " group by itemnumber";

            ElasticSqlHelper<elasticItemvalue> elasticSqlHelper1 = new ElasticSqlHelper<elasticItemvalue>();

            var dbItemNumbers = AsyncContext.Run(async () => (await elasticSqlHelper1.GetListAsync(query)).ToList());

            itemResponseDc.TotalItem = dbItemNumbers.Count();
            var itemNumbers = dbItemNumbers.OrderBy(x => x.itemnumber).Skip(skip).Take(take).Select(x => x.itemnumber).ToList();

            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
            if (itemNumbers != null && itemNumbers.Any())
            {
                ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesCatelogElasticData(warehouseId, StoreCategorySubCategoryBrands, itemNumbers, "", -1, -1, 0, 1000, "ASC", true, null));
                ItemData = data.ItemMasters;
            }
            if (ItemData != null && ItemData.Any())
            {
                ItemMasterManager itemMasterManager = new ItemMasterManager();
                var itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                using (var context = new AuthContext())
                {
                    var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                    foreach (var it in ItemData)
                    {
                        it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                        it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;

                        //Condition for offer end
                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            else if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }
                        else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;

                        }

                        if (it.OfferCategory == 1)
                        {
                            if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                it.IsOffer = true;
                            else
                                it.IsOffer = false;
                        }

                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }
                            }
                            else { it.dreamPoint = 0; }

                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch { }

                        if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }


                    }
                }
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                var itemMultiMRPIds = ItemData.Select(x => x.ItemMultiMRPId).ToList();
                using (var context = new AuthContext())
                {
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                }

                foreach (var item in ItemData)
                {
                    if (item.price > item.UnitPrice)
                    {
                        item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                        if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                        {
                            var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                            var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                            var UPMRPMargin = item.marginPoint.Value;
                            if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                        }
                    }
                    else
                    {
                        item.marginPoint = 0;
                    }
                }

                itemResponseDc.ItemDataDCs = ItemData.GroupBy(x => new { x.ItemNumber, x.Itemtype }).Select(x => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                {
                    BaseCategoryId = x.FirstOrDefault().BaseCategoryId,
                    BillLimitQty = x.FirstOrDefault().BillLimitQty,
                    Categoryid = x.FirstOrDefault().Categoryid,
                    CompanyId = x.FirstOrDefault().CompanyId,
                    dreamPoint = x.FirstOrDefault().dreamPoint,
                    HindiName = x.FirstOrDefault().HindiName,
                    IsItemLimit = x.FirstOrDefault().IsItemLimit,
                    IsOffer = x.FirstOrDefault().IsOffer,
                    ItemId = x.FirstOrDefault().ItemId,
                    ItemlimitQty = x.FirstOrDefault().ItemlimitQty,
                    ItemMultiMRPId = x.FirstOrDefault().ItemMultiMRPId,
                    itemname = x.FirstOrDefault().itemname,
                    ItemNumber = x.FirstOrDefault().ItemNumber,
                    Itemtype = x.FirstOrDefault().Itemtype,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDays = x.FirstOrDefault().LastOrderDays,
                    LastOrderQty = x.FirstOrDefault().LastOrderQty,
                    LogoUrl = x.FirstOrDefault().LogoUrl,
                    marginPoint = x.FirstOrDefault().marginPoint,
                    MinOrderQty = x.FirstOrDefault().MinOrderQty,
                    OfferCategory = x.FirstOrDefault().OfferCategory,
                    OfferFreeItemId = x.FirstOrDefault().OfferFreeItemId,
                    OfferFreeItemImage = x.FirstOrDefault().OfferFreeItemImage,
                    OfferFreeItemName = x.FirstOrDefault().OfferFreeItemName,
                    OfferFreeItemQuantity = x.FirstOrDefault().OfferFreeItemQuantity,
                    OfferId = x.FirstOrDefault().OfferId,
                    OfferMinimumQty = x.FirstOrDefault().OfferMinimumQty,
                    OfferType = x.FirstOrDefault().OfferType,
                    OfferWalletPoint = x.FirstOrDefault().OfferWalletPoint,
                    price = x.FirstOrDefault().price,
                    Sequence = x.FirstOrDefault().Sequence,
                    SubCategoryId = x.FirstOrDefault().SubCategoryId,
                    SubsubCategoryid = x.FirstOrDefault().SubsubCategoryid,
                    UnitPrice = x.FirstOrDefault().UnitPrice,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Active = x.FirstOrDefault().active,
                    Classification = x.FirstOrDefault().Classification,
                    BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                    moqList = x.Count() > 1 ? x.Select(y => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                    {
                        isChecked = (y.ItemMultiMRPId == x.FirstOrDefault().ItemMultiMRPId && y.MinOrderQty == x.FirstOrDefault().MinOrderQty),
                        BaseCategoryId = y.BaseCategoryId,
                        BillLimitQty = y.BillLimitQty,
                        Categoryid = y.Categoryid,
                        CompanyId = y.CompanyId,
                        dreamPoint = y.dreamPoint,
                        HindiName = y.HindiName,
                        IsItemLimit = y.IsItemLimit,
                        IsOffer = y.IsOffer,
                        ItemId = y.ItemId,
                        ItemlimitQty = y.ItemlimitQty,
                        ItemMultiMRPId = y.ItemMultiMRPId,
                        itemname = y.itemname,
                        ItemNumber = y.ItemNumber,
                        Itemtype = y.Itemtype,
                        LastOrderDate = y.LastOrderDate,
                        LastOrderDays = y.LastOrderDays,
                        LastOrderQty = y.LastOrderQty,
                        LogoUrl = y.LogoUrl,
                        marginPoint = y.marginPoint,
                        MinOrderQty = y.MinOrderQty,
                        OfferCategory = y.OfferCategory,
                        OfferFreeItemId = y.OfferFreeItemId,
                        OfferFreeItemImage = y.OfferFreeItemImage,
                        OfferFreeItemName = y.OfferFreeItemName,
                        OfferFreeItemQuantity = y.OfferFreeItemQuantity,
                        OfferId = y.OfferId,
                        OfferMinimumQty = y.OfferMinimumQty,
                        OfferType = y.OfferType,
                        OfferWalletPoint = y.OfferWalletPoint,
                        price = y.price,
                        Sequence = y.Sequence,
                        SubCategoryId = y.SubCategoryId,
                        SubsubCategoryid = y.SubsubCategoryid,
                        UnitPrice = y.UnitPrice,
                        WarehouseId = y.WarehouseId,
                        Active = y.active,
                        Classification = y.Classification,
                        BackgroundRgbColor = y.BackgroundRgbColor,
                    }).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>()
                }).OrderBy(x => x.Sequence).ToList();

            }


            return itemResponseDc;
        }

        [Route("GetAlreadyBoughtTargetItem")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.SalesItemResponseDc> GetAlreadyBoughtTargetItem(int companyId, int storeId, int customerId, int warehouseId, int peopleId, int skip, int take, string lang, string itemname)
        {
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.SalesItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>() };
            List<int> CatIds = new List<int>();
            List<int> SubCats = new List<int>();
            List<int> SubSubCats = new List<int>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            if (peopleId != 0)
            {
                StoreCategorySubCategoryBrands = GetCatSubCatwithStores(peopleId);
                if (storeId > 0)
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => x.StoreId == storeId).ToList();
                CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
            }


            var today = DateTime.Today;
            if (today.Day <= 10 && companyId == 0)
            {
                today = today.AddMonths(-1);
            }
            var monthStart = new DateTime(today.Year, today.Month, 1);
            var monthEnd = monthStart.AddMonths(1).AddDays(-1);
            var startDate = monthStart.ToString("yyyy-MM-dd");
            var enddate = monthEnd.ToString("yyyy-MM-dd");

            string query = $"SELECT itemnumber from skorderdata_{AppConstants.Environment} where whid={warehouseId} and custid={customerId}  and createddate>='{startDate}' and createddate <= '{enddate}'";
            if (!string.IsNullOrEmpty(itemname))
                query += $"and (lcase(itemname) like '%{itemname.ToLower()}%' or lcase(itemnumber) like '%{itemname.ToLower()}%') ";

            if (companyId > 0)
                query += $" and compid={companyId}";

            if (CatIds != null && CatIds.Any())
            {
                query += $" and catid in ({string.Join(",", CatIds)})";
            }

            if (SubCats != null && SubCats.Any())
            {
                query += $" and compid in ({string.Join(",", SubCats)})";
            }
            if (SubSubCats != null && SubSubCats.Any())
            {
                query += $" and brandid in ({string.Join(",", SubSubCats)})";
            }

            query += " group by itemnumber";

            ElasticSqlHelper<elasticItemvalue> elasticSqlHelper = new ElasticSqlHelper<elasticItemvalue>();

            var orderitems = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).ToList());
            if (orderitems != null && orderitems.Any())
            {
                itemResponseDc.TotalItem = orderitems.Count();
                var orderitemnumbers = orderitems.OrderBy(x => x.itemnumber).Skip(skip).Take(take).Select(x => x.itemnumber).ToList();
                if (orderitemnumbers != null && orderitemnumbers.Any())
                {
                    List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                    ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                    var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetCatelogAllElasticItemData(warehouseId, StoreCategorySubCategoryBrands, orderitemnumbers, "", -1, -1, 0, 1000, "ASC", true));
                    ItemData = data.ItemMasters;
                    if (ItemData != null && ItemData.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        var itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());


                        using (var context = new AuthContext())
                        {
                            var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                            var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                            foreach (var it in ItemData)
                            {
                                it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                                it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;

                                //Condition for offer end
                                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                                {
                                    if (it.OfferCategory == 2)
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                    else if (it.OfferCategory == 1)
                                    {
                                        it.IsOffer = false;
                                        it.OfferCategory = 0;
                                    }

                                }
                                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;

                                }

                                if (it.OfferCategory == 1)
                                {
                                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                        it.IsOffer = true;
                                    else
                                        it.IsOffer = false;
                                }

                                try
                                {
                                    if (!it.IsOffer)
                                    {
                                        /// Dream Point Logic && Margin Point
                                        int? MP, PP;
                                        double xPoint = xPointValue * 10;
                                        //Customer (0.2 * 10=1)
                                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                        {
                                            PP = 0;
                                        }
                                        else
                                        {
                                            PP = it.promoPerItems;
                                        }
                                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                        {
                                            MP = 0;
                                        }
                                        else
                                        {
                                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                        }
                                        if (PP > 0 && MP > 0)
                                        {
                                            int? PP_MP = PP + MP;
                                            it.dreamPoint = PP_MP;
                                        }
                                        else if (MP > 0)
                                        {
                                            it.dreamPoint = MP;
                                        }
                                        else if (PP > 0)
                                        {
                                            it.dreamPoint = PP;
                                        }
                                        else
                                        {
                                            it.dreamPoint = 0;
                                        }
                                    }
                                    else { it.dreamPoint = 0; }

                                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                    if (it.price > it.UnitPrice)
                                    {
                                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                    }
                                    else
                                    {
                                        it.marginPoint = 0;
                                    }
                                }
                                catch { }

                                if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                                {
                                    if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                    }
                                    else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                    }

                                    else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName; //item display name
                                    }
                                    else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                    }
                                }


                            }
                        }
                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                        var itemMultiMRPIds = ItemData.Select(x => x.ItemMultiMRPId).ToList();
                        using (var context = new AuthContext())
                        {
                            ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                        }

                        foreach (var item in ItemData)
                        {
                            if (item.price > item.UnitPrice)
                            {
                                item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                                if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                                {
                                    var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                    var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                    var UPMRPMargin = item.marginPoint.Value;
                                    if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                        item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                                }
                            }
                            else
                            {
                                item.marginPoint = 0;
                            }
                        }

                        itemResponseDc.ItemDataDCs = ItemData.GroupBy(x => new { x.ItemNumber, x.Itemtype }).Select(x => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                        {
                            BaseCategoryId = x.FirstOrDefault().BaseCategoryId,
                            BillLimitQty = x.FirstOrDefault().BillLimitQty,
                            Categoryid = x.FirstOrDefault().Categoryid,
                            CompanyId = x.FirstOrDefault().CompanyId,
                            dreamPoint = x.FirstOrDefault().dreamPoint,
                            HindiName = x.FirstOrDefault().HindiName,
                            IsItemLimit = x.FirstOrDefault().IsItemLimit,
                            IsOffer = x.FirstOrDefault().IsOffer,
                            ItemId = x.FirstOrDefault().ItemId,
                            ItemlimitQty = x.FirstOrDefault().ItemlimitQty,
                            ItemMultiMRPId = x.FirstOrDefault().ItemMultiMRPId,
                            itemname = x.FirstOrDefault().itemname,
                            ItemNumber = x.FirstOrDefault().ItemNumber,
                            Itemtype = x.FirstOrDefault().Itemtype,
                            LastOrderDate = x.FirstOrDefault().LastOrderDate,
                            LastOrderDays = x.FirstOrDefault().LastOrderDays,
                            LastOrderQty = x.FirstOrDefault().LastOrderQty,
                            LogoUrl = x.FirstOrDefault().LogoUrl,
                            marginPoint = x.FirstOrDefault().marginPoint,
                            MinOrderQty = x.FirstOrDefault().MinOrderQty,
                            OfferCategory = x.FirstOrDefault().OfferCategory,
                            OfferFreeItemId = x.FirstOrDefault().OfferFreeItemId,
                            OfferFreeItemImage = x.FirstOrDefault().OfferFreeItemImage,
                            OfferFreeItemName = x.FirstOrDefault().OfferFreeItemName,
                            OfferFreeItemQuantity = x.FirstOrDefault().OfferFreeItemQuantity,
                            OfferId = x.FirstOrDefault().OfferId,
                            OfferMinimumQty = x.FirstOrDefault().OfferMinimumQty,
                            OfferType = x.FirstOrDefault().OfferType,
                            OfferWalletPoint = x.FirstOrDefault().OfferWalletPoint,
                            price = x.FirstOrDefault().price,
                            Sequence = x.FirstOrDefault().Sequence,
                            SubCategoryId = x.FirstOrDefault().SubCategoryId,
                            SubsubCategoryid = x.FirstOrDefault().SubsubCategoryid,
                            UnitPrice = x.FirstOrDefault().UnitPrice,
                            WarehouseId = x.FirstOrDefault().WarehouseId,
                            Active = x.FirstOrDefault().active,
                            Classification = x.FirstOrDefault().Classification,
                            BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                            moqList = x.Count() > 1 ? x.Select(y => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                            {
                                isChecked = (y.ItemMultiMRPId == x.FirstOrDefault().ItemMultiMRPId && y.MinOrderQty == x.FirstOrDefault().MinOrderQty),
                                BaseCategoryId = y.BaseCategoryId,
                                BillLimitQty = y.BillLimitQty,
                                Categoryid = y.Categoryid,
                                CompanyId = y.CompanyId,
                                dreamPoint = y.dreamPoint,
                                HindiName = y.HindiName,
                                IsItemLimit = y.IsItemLimit,
                                IsOffer = y.IsOffer,
                                ItemId = y.ItemId,
                                ItemlimitQty = y.ItemlimitQty,
                                ItemMultiMRPId = y.ItemMultiMRPId,
                                itemname = y.itemname,
                                ItemNumber = y.ItemNumber,
                                Itemtype = y.Itemtype,
                                LastOrderDate = y.LastOrderDate,
                                LastOrderDays = y.LastOrderDays,
                                LastOrderQty = y.LastOrderQty,
                                LogoUrl = y.LogoUrl,
                                marginPoint = y.marginPoint,
                                MinOrderQty = y.MinOrderQty,
                                OfferCategory = y.OfferCategory,
                                OfferFreeItemId = y.OfferFreeItemId,
                                OfferFreeItemImage = y.OfferFreeItemImage,
                                OfferFreeItemName = y.OfferFreeItemName,
                                OfferFreeItemQuantity = y.OfferFreeItemQuantity,
                                OfferId = y.OfferId,
                                OfferMinimumQty = y.OfferMinimumQty,
                                OfferType = y.OfferType,
                                OfferWalletPoint = y.OfferWalletPoint,
                                price = y.price,
                                Sequence = y.Sequence,
                                SubCategoryId = y.SubCategoryId,
                                SubsubCategoryid = y.SubsubCategoryid,
                                UnitPrice = y.UnitPrice,
                                WarehouseId = y.WarehouseId,
                                Active = y.active,
                                Classification = y.Classification,
                                BackgroundRgbColor = y.BackgroundRgbColor,
                            }).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>()
                        }).OrderBy(x => x.Sequence).ToList();

                    }
                }
            }
            return itemResponseDc;
        }

        [Route("GetCustomerTargetForSalesApp")]
        [HttpGet]
        public HttpResponseMessage GetCustomerTargetForSalesApp(int peopleId, int WarehouseId, string SkCode, int customerid)
        {
            List<DataContracts.External.MobileExecutiveDC.CustomerTarget> targets = new List<DataContracts.External.MobileExecutiveDC.CustomerTarget>();

            var target = new DataContracts.External.MobileExecutiveDC.CustomerTarget();
            using (var con = new AuthContext())
            {

                var storeIds = con.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsActive && x.IsDeleted == false).Select(x => x.StoreId).ToList();
                var stores = con.StoreDB.Where(x => storeIds.Contains(x.Id)).Select(x => new { x.Id, x.Name, x.ImagePath }).ToList();
                var date = DateTime.Now;
                var isMonthComplete = false;
                if (date.Day <= 10)
                {
                    isMonthComplete = true;
                    date = DateTime.Now.AddMonths(-1);
                }
                var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

                var MonthlyCustomerTarget = new MongoDbHelper<DataContracts.Mongo.CustomersTargets.MonthlyCustomerTarget>();
                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
                var GetExportData = MonthlyCustomerTarget.Select(x => x.Skcode == SkCode, null, null, null, false, "", DocumentName).FirstOrDefault();
                if (GetExportData != null)
                {

                    var levelid = con.LevelMasterDB.Where(x => x.Name == GetExportData.Levels && x.WarehouseId == 1 && x.CreatedDate.Month == date.Month && x.CreatedDate.Year == date.Year).Select(x => x.Id).FirstOrDefault();
                    var image = con.CustomerBandsDB.Where(x => x.CreatedDate.Month == date.Month && x.CreatedDate.Year == date.Year && x.LevelId == levelid && x.BandName == GetExportData.Bands).Select(x => new { x.Type, x.value, x.ImagePath }).FirstOrDefault();
                    target.StoreId = 0;
                    target.StoreName = "SK";
                    var totalpuramt = GetExportData.CurrentVolume;
                    target.TargetMonth = date.ToString("MMMM");
                    target.IsClaimed = GetExportData.IsClaimed;
                    target.SKCode = GetExportData.Skcode;
                    target.TargetAmount = GetExportData.Target;
                    target.LeftDays = isMonthComplete ? 0 : (lastDayOfMonth - date.Day);
                    target.TargetLineItem = GetExportData.TargetLineItem;
                    target.CurrentLineItem = GetExportData.CurrentLineItem.HasValue ? GetExportData.CurrentLineItem.Value : 0;

                    target.targetConditions = new List<DataContracts.External.MobileExecutiveDC.targetCondition>();
                    target.targetConditions.Add(new DataContracts.External.MobileExecutiveDC.targetCondition
                    {
                        ConditionText = "Shop worth Rs. " + Convert.ToInt32(target.TargetAmount).ToString(),
                        ConditionCompleteText = ConvertNumberToWord.minifyLong(Convert.ToInt32(GetExportData.CurrentVolume)) + "/" + ConvertNumberToWord.minifyLong(Convert.ToInt32(target.TargetAmount)),
                        Target = Convert.ToInt32(target.TargetAmount),
                        CurrentValue = Convert.ToInt32(GetExportData.CurrentVolume),
                        AchivePercent = target.TargetAmount > 0 ? ((totalpuramt / (Convert.ToDecimal(target.TargetAmount) / 100)) > 100 ? 100 : totalpuramt / (Convert.ToDecimal(target.TargetAmount) / 100)) : 100,
                        Message = (target.TargetAmount > totalpuramt ? "Only Rs. " + (target.TargetAmount - totalpuramt) + " away from the remaining target." : "")
                    });

                    if (target.TargetLineItem.HasValue && target.TargetLineItem.Value > 0)
                    {
                        target.targetConditions.Add(new DataContracts.External.MobileExecutiveDC.targetCondition
                        {
                            ConditionText = "Buy " + Convert.ToInt32(target.TargetLineItem).ToString() + " Unique line item",
                            ConditionCompleteText = Convert.ToInt32(target.CurrentLineItem.Value).ToString() + "/" + Convert.ToInt32(target.TargetLineItem).ToString(),
                            Target = GetExportData.TargetLineItem.Value,
                            CurrentValue = target.CurrentLineItem.Value,
                            AchivePercent = target.TargetLineItem.Value > 0 ? ((target.CurrentLineItem.Value / (Convert.ToDecimal(target.TargetLineItem.Value) / 100)) > 100 ? 100 : (target.CurrentLineItem.Value / (Convert.ToDecimal(target.TargetLineItem.Value) / 100))) : 100,
                            Message = (GetExportData.TargetLineItem.Value > target.CurrentLineItem.Value ? "Buy " + (GetExportData.TargetLineItem.Value - target.CurrentLineItem.Value) + " unique line item more." : "")
                        });
                    }

                    if (!(GetExportData.IsOffer.HasValue && GetExportData.IsOffer.Value))
                    {
                        target.GiftImage = image != null ? image.ImagePath : null;
                        target.Type = image != null ? image.Type : null;
                        target.Value = image != null ? image.value : 0;
                    }
                    else
                    {
                        target.Type = "Offer";
                        target.Value = GetExportData.OfferValue.Value;
                        target.OfferDesc = GetExportData.OfferDesc;
                        target.OfferValue = GetExportData.OfferValue.Value;
                        target.OfferType = GetExportData.OfferType.Value;
                    }
                    target.Level = GetExportData.Levels;
                    target.TotalPurchaseAmount = Convert.ToDecimal(totalpuramt);
                    target.TotalPendingPurchaseAmount = Convert.ToDecimal(GetExportData.PendingVolume);
                    try
                    {
                        var amtPer = target.TotalPurchaseAmount / (target.TargetAmount / 100);
                        var lineitemPer = target.TargetLineItem.HasValue && target.TargetLineItem.Value > 0 ? (target.CurrentLineItem.HasValue ? target.CurrentLineItem.Value : 0) / (target.TargetLineItem.Value / 100) : 100;

                        amtPer = amtPer > 100 ? 100 : amtPer;
                        lineitemPer = lineitemPer > 100 ? 100 : lineitemPer;

                        target.AchivePercent = (amtPer + lineitemPer) / 2;
                        if (target.AchivePercent > 100)
                            target.AchivePercent = 100;
                    }
                    catch (Exception)
                    {
                        target.AchivePercent = 0;
                    }

                    targets.Add(target);

                    if (GetExportData.TargetOnStores != null && GetExportData.TargetOnStores.Any(x => storeIds.Contains(x.StoreId)))
                    {
                        ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData> skcodeElasticHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData>();
                        DateTime startDate = new DateTime(date.Year, date.Month, 1);
                        string sDate = startDate.ToString("yyyy-MM-dd");
                        string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");


                        foreach (var storetarget in GetExportData.TargetOnStores.Where(x => storeIds.Contains(x.StoreId)).ToList())
                        {

                            var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and storeid={storetarget.StoreId} and skcode ='{SkCode}'  group by skcode,storeid";
                            var skCodeDataList = AsyncContext.Run(() => skcodeElasticHelper.GetListAsync(query));

                            storetarget.CurrentVolume = skCodeDataList.FirstOrDefault()?.dispatchamount ?? 0;
                            storetarget.CurrentLineItem = Convert.ToInt32(skCodeDataList.FirstOrDefault()?.linecount ?? 0);



                            target = new DataContracts.External.MobileExecutiveDC.CustomerTarget();
                            target.TargetMonth = date.ToString("MMMM");
                            target.StoreId = storetarget.StoreId;
                            target.StoreName = storetarget.StoreName;
                            target.StoreUrl = stores.Any(x => x.Id == storetarget.StoreId) ? stores.FirstOrDefault(x => x.Id == storetarget.StoreId).ImagePath : "";
                            target.SKCode = GetExportData.Skcode;
                            target.TargetAmount = Convert.ToDecimal(storetarget.Target);
                            target.TotalPurchaseAmount = Convert.ToDecimal(storetarget.CurrentVolume);
                            target.LeftDays = isMonthComplete ? 0 : (lastDayOfMonth - date.Day);
                            target.TargetLineItem = storetarget.TargetLineItem;
                            target.CurrentLineItem = storetarget.CurrentLineItem.HasValue ? storetarget.CurrentLineItem.Value : 0;

                            target.targetConditions = new List<DataContracts.External.MobileExecutiveDC.targetCondition>();
                            target.targetConditions.Add(new DataContracts.External.MobileExecutiveDC.targetCondition
                            {
                                ConditionText = "Shop worth Rs. " + Convert.ToInt32(storetarget.Target).ToString(),
                                ConditionCompleteText = ConvertNumberToWord.minifyLong(Convert.ToInt32(storetarget.CurrentVolume)) + "/" + ConvertNumberToWord.minifyLong(Convert.ToInt32(storetarget.Target)),
                                Target = Convert.ToInt32(storetarget.Target),
                                CurrentValue = Convert.ToInt32(storetarget.CurrentVolume),
                                AchivePercent = Convert.ToDecimal(storetarget.Target > 0 ? (storetarget.CurrentVolume / ((storetarget.Target) / 100)) > 100 ? 100 : (storetarget.CurrentVolume / ((storetarget.Target) / 100)) : 100),
                                Message = (storetarget.Target > storetarget.CurrentVolume ? "Only Rs. " + (storetarget.Target - storetarget.CurrentVolume) + " away from the remaining target." : "")
                            });

                            if (storetarget.TargetLineItem.HasValue && storetarget.TargetLineItem.Value > 0)
                            {
                                target.targetConditions.Add(new DataContracts.External.MobileExecutiveDC.targetCondition
                                {
                                    ConditionText = "Buy " + Convert.ToInt32(storetarget.TargetLineItem).ToString() + " Unique line item",
                                    ConditionCompleteText = Convert.ToInt32(storetarget.CurrentLineItem.Value).ToString() + "/" + Convert.ToInt32(storetarget.TargetLineItem).ToString(),
                                    Target = storetarget.TargetLineItem.Value,
                                    CurrentValue = storetarget.CurrentLineItem.Value,
                                    AchivePercent = storetarget.TargetLineItem.Value > 0 ? (storetarget.CurrentLineItem.Value / (Convert.ToDecimal(storetarget.TargetLineItem.Value) / 100)) > 100 ? 100 : (storetarget.CurrentLineItem.Value / (Convert.ToDecimal(storetarget.TargetLineItem.Value) / 100)) : 100,
                                    Message = (storetarget.TargetLineItem.Value > storetarget.CurrentLineItem.Value ? "Buy " + (storetarget.TargetLineItem.Value - storetarget.CurrentLineItem.Value) + " unique line item more." : "")
                                });
                            }

                            if (!(GetExportData.IsOffer.HasValue && GetExportData.IsOffer.Value))
                            {
                                target.GiftImage = image != null ? image.ImagePath : null;
                                target.Type = image != null ? image.Type : null;
                                target.Value = image != null ? image.value : 0;
                            }
                            else
                            {
                                target.Type = "Offer";
                                target.OfferDesc = GetExportData.OfferDesc;
                                target.OfferValue = GetExportData.OfferValue.Value;
                                target.OfferType = GetExportData.OfferType.Value;
                            }
                            target.Level = GetExportData.Levels;
                            try
                            {
                                var amtPer = Convert.ToDecimal(storetarget.CurrentVolume / (storetarget.Target / 100));
                                var lineitemPer = storetarget.TargetLineItem.HasValue && storetarget.TargetLineItem.Value > 0 ? (storetarget.CurrentLineItem.HasValue ? storetarget.CurrentLineItem.Value : 0) / (Convert.ToDecimal(storetarget.TargetLineItem.Value) / 100) : 100;
                                amtPer = amtPer > 100 ? 100 : amtPer;
                                lineitemPer = lineitemPer > 100 ? 100 : lineitemPer;
                                target.AchivePercent = (amtPer + lineitemPer) / 2;
                                if (target.AchivePercent > 100)
                                    target.AchivePercent = 100;
                            }
                            catch (Exception)
                            {
                                target.AchivePercent = 0;
                            }
                            target.IsClaimed = target.AchivePercent >= 100;
                            targets.Add(target);
                        }

                    }

                    var response = new
                    {
                        GetTargetData = targets,
                        Status = true,
                        Message = "Target Data"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);


                }
                else
                {
                    string[] response = null;
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
        }

        [Route("GetLevelData")]
        [HttpGet]
        public List<DataContracts.External.MobileExecutiveDC.LevelDc> GetLevelData(int customerId, string SkCode)
        {
            List<DataContracts.External.MobileExecutiveDC.LevelDc> levelDcs = new List<DataContracts.External.MobileExecutiveDC.LevelDc>();
            var date = DateTime.Now;
            if (date.Day <= 10)
            {
                date = DateTime.Now.AddMonths(-1);
            }
            var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

            var MonthlyCustomerTarget = new MongoDbHelper<DataContracts.Mongo.CustomersTargets.MonthlyCustomerTarget>();
            string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
            var GetExportData = MonthlyCustomerTarget.Select(x => x.Skcode == SkCode, null, null, null, false, "", DocumentName).FirstOrDefault();


            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 1,
                BrandCount = 0,
                KKVolume = 0,
                LevelName = "Level 0",
                OrderCount = 0,
                Selected = false,
                Volume = 0
            });
            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 2,
                BrandCount = 0,
                KKVolume = 0,
                LevelName = "Level 1",
                OrderCount = 1,
                Selected = false,
                Volume = 0
            });
            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 3,
                BrandCount = 5,
                KKVolume = 0,
                LevelName = "Level 2",
                OrderCount = 3,
                Selected = false,
                Volume = 10000
            });
            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 4,
                BrandCount = 10,
                KKVolume = 2000,
                LevelName = "Level 3",
                OrderCount = 5,
                Selected = false,
                Volume = 20000
            });
            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 5,
                BrandCount = 20,
                KKVolume = 8000,
                LevelName = "Level 4",
                OrderCount = 8,
                Selected = false,
                Volume = 30000,
            });
            levelDcs.Add(new DataContracts.External.MobileExecutiveDC.LevelDc
            {
                Id = 6,
                BrandCount = 40,
                KKVolume = 15000,
                LevelName = "Level 5",
                OrderCount = 12,
                Selected = false,
                Volume = 75000
            });


            if (GetExportData != null)
            {
                int level = 0;
                switch (GetExportData.Levels)
                {
                    case "Level 0":
                        level = 1;
                        break;
                    case "Level 1":
                        level = 2;
                        break;
                    case "Level 2":
                        level = 3;
                        break;
                    case "Level 3":
                        level = 4;
                        break;
                    case "Level 4":
                        level = 5;
                        break;
                    case "Level 5":
                        level = 6;
                        break;
                }

                foreach (var item in levelDcs)
                {
                    if (item.Id <= level)
                    {
                        item.Selected = true;
                    }
                }
            }
            return levelDcs;

        }

        [Route("GetMoreInfoForSalesApp")]
        [HttpGet]
        public async Task<string> GetMoreInfoForSalesApp(string key, int peopleId)
        {
            string result = string.Empty;
            var today = DateTime.Today;
            if (today.Day <= 10)
            {
                today = today.AddMonths(-1);
            }

            MongoDbHelper<TargetAndIncentiveMoreInfo> mongoDbHelper = new MongoDbHelper<TargetAndIncentiveMoreInfo>();
            var data = (await mongoDbHelper.SelectAsync(x => x.Key == key)).FirstOrDefault();
            result = data.Template;
            if (key == "KPI" || key == "ItemCommission")
            {
                ItemMasterManager manager = new ItemMasterManager();
                var configs = await manager.GetSalesPersonKPIInfo(peopleId, key, today.Month, today.Year);
                if (key == "KPI")
                {
                    result = result.Replace("#KPI#", configs);
                }
                else if (key == "ItemCommission")
                {
                    result = result.Replace("#ItemCommission#", configs);
                }
            }

            return result;
        }

        [Route("ClaimCustomerCompanyTarget")]
        [HttpGet]
        public HttpResponseMessage ClaimCustomerCompanyTarget(int customerId, int targetDetailId)
        {
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetCustomerCompanyTarget]";
                cmd.Parameters.Add(new SqlParameter("@CustomerId", customerId));
                cmd.Parameters.Add(new SqlParameter("@TargetDetailId", targetDetailId));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                List<DataContracts.External.MobileExecutiveDC.SubCategoryTargetCustomerDc> SubCategoryTargetCustomerDc = new List<DataContracts.External.MobileExecutiveDC.SubCategoryTargetCustomerDc>();
                List<DataContracts.External.MobileExecutiveDC.GiftItemDc> GiftItemDcs = new List<DataContracts.External.MobileExecutiveDC.GiftItemDc>();
                List<DataContracts.External.MobileExecutiveDC.TargetCustomerBrandDc> TargetCustomerBrandDcs = new List<DataContracts.External.MobileExecutiveDC.TargetCustomerBrandDc>();
                List<DataContracts.External.MobileExecutiveDC.TargetCustomerItemDc> TargetCustomerItemDcs = new List<DataContracts.External.MobileExecutiveDC.TargetCustomerItemDc>();


                using (var reader = cmd.ExecuteReader())
                {
                    SubCategoryTargetCustomerDc = ((IObjectContextAdapter)context)
                   .ObjectContext
                   .Translate<DataContracts.External.MobileExecutiveDC.SubCategoryTargetCustomerDc>(reader).ToList();

                    reader.NextResult();
                    GiftItemDcs = ((IObjectContextAdapter)context)
                                   .ObjectContext
                                   .Translate<DataContracts.External.MobileExecutiveDC.GiftItemDc>(reader).ToList();

                    reader.NextResult();
                    TargetCustomerBrandDcs = ((IObjectContextAdapter)context)
                                               .ObjectContext
                                               .Translate<DataContracts.External.MobileExecutiveDC.TargetCustomerBrandDc>(reader).ToList();

                    reader.NextResult();
                    TargetCustomerItemDcs = ((IObjectContextAdapter)context)
                                              .ObjectContext
                                              .Translate<DataContracts.External.MobileExecutiveDC.TargetCustomerItemDc>(reader).ToList();
                }

                foreach (var item in SubCategoryTargetCustomerDc)
                {
                    if (GiftItemDcs != null && GiftItemDcs.Any())
                    {
                        item.GiftItemDcs = GiftItemDcs.Where(x => x.id == item.id).ToList();
                    }
                    if (TargetCustomerBrandDcs != null && TargetCustomerBrandDcs.Any())
                    {
                        item.TargetCustomerBrandDcs = TargetCustomerBrandDcs.Where(x => x.id == item.id).ToList();
                    }
                    if (TargetCustomerItemDcs != null && TargetCustomerItemDcs.Any())
                    {
                        item.TargetCustomerItemDcs = TargetCustomerItemDcs.Where(x => x.id == item.id).ToList();
                    }
                }

                if (SubCategoryTargetCustomerDc != null && SubCategoryTargetCustomerDc.Any())
                {
                    var subCategoryTargetCustomerDc = SubCategoryTargetCustomerDc.FirstOrDefault(); ;

                    if (subCategoryTargetCustomerDc.IsCompleted)
                    {
                        if (!subCategoryTargetCustomerDc.IsClaimed)
                        {
                            string message = "";
                            if (subCategoryTargetCustomerDc.valueType == "WalletPoint")
                            {
                                #region Reward Insertion in Wallet 

                                var cust = context.Customers.Where(x => x.CustomerId == subCategoryTargetCustomerDc.CustomerId).SingleOrDefault();

                                var IsWalletEdit = context.WalletDb.Where(x => x.CustomerId == subCategoryTargetCustomerDc.CustomerId).SingleOrDefault();
                                if (IsWalletEdit == null)
                                {
                                    IsWalletEdit = new Wallet();
                                    IsWalletEdit.CompanyId = cust.CompanyId ?? 0;
                                    IsWalletEdit.CustomerId = cust.CustomerId;
                                    IsWalletEdit.TransactionDate = indianTime;
                                    IsWalletEdit.TotalAmount = Convert.ToDouble(subCategoryTargetCustomerDc.WalletValue);
                                    IsWalletEdit.CreatedDate = indianTime;
                                    IsWalletEdit.UpdatedDate = indianTime;
                                    IsWalletEdit.Deleted = false;
                                    context.WalletDb.Add(IsWalletEdit);
                                    context.Commit();
                                }
                                CustomerWalletHistory customerwallethistory = new CustomerWalletHistory();

                                customerwallethistory.CustomerId = cust.CustomerId;
                                customerwallethistory.WarehouseId = cust.Warehouseid.Value;
                                customerwallethistory.Through = "Achieved " + subCategoryTargetCustomerDc.CompanyName + " - " + subCategoryTargetCustomerDc.CreatedDate.ToString("MMMyyyy") + " Target Reward";
                                customerwallethistory.CompanyId = cust.CompanyId ?? 0;
                                if (Convert.ToDouble(subCategoryTargetCustomerDc.WalletValue) >= 0)
                                {
                                    customerwallethistory.NewAddedWAmount = Convert.ToDouble(subCategoryTargetCustomerDc.WalletValue);
                                    customerwallethistory.TotalWalletAmount = IsWalletEdit.TotalAmount + Convert.ToDouble(subCategoryTargetCustomerDc.WalletValue);
                                }
                                customerwallethistory.UpdatedDate = indianTime;
                                customerwallethistory.TransactionDate = indianTime;
                                customerwallethistory.CreatedDate = indianTime;
                                context.CustomerWalletHistoryDb.Add(customerwallethistory);
                                IsWalletEdit.TotalAmount = IsWalletEdit.TotalAmount + Convert.ToDouble(subCategoryTargetCustomerDc.WalletValue);
                                IsWalletEdit.UpdatedDate = indianTime;
                                IsWalletEdit.TransactionDate = indianTime;
                                context.Entry(IsWalletEdit).State = EntityState.Modified;

                                #endregion

                                message = "Reward Points successfully Added in wallet";
                            }
                            else if (subCategoryTargetCustomerDc.valueType == "DreamItem")
                            {
                                #region Create Reward Ordered

                                Customer cust = new Customer();
                                Warehouse w = new Warehouse();
                                var sc = new DreamOrder();

                                cust = context.Customers.Where(x => x.CustomerId == customerId).SingleOrDefault();
                                w = context.Warehouses.Where(wr => wr.WarehouseId == cust.Warehouseid).FirstOrDefault();

                                if (cust != null)
                                {
                                    if (w != null)
                                    {
                                        sc.WarehouseId = w.WarehouseId;
                                        sc.WarehouseName = w.WarehouseName;
                                        sc.CityId = w.Cityid;
                                    }
                                    sc.ShopName = cust.ShopName;
                                    sc.Status = "Pending";
                                    sc.CustomerMobile = cust.Mobile;
                                    sc.ShippingAddress = cust.ShippingAddress;
                                    //sc.SalesPersonId = cust.ExecutiveId;
                                    sc.CompanyId = cust.CompanyId;
                                }
                                sc.CreatedDate = indianTime;
                                sc.UpdatedDate = indianTime;
                                sc.Deliverydate = indianTime.AddDays(2);
                                sc.Deleted = false;
                                sc.ReDispatchCount = 0;

                                foreach (var item in subCategoryTargetCustomerDc.GiftItemDcs)
                                {
                                    var dreamorder = new DreamItem();

                                    dreamorder.ShopName = cust.ShopName;
                                    dreamorder.ItemId = item.itemid;
                                    dreamorder.OrderQty = item.Qty;
                                    dreamorder.ShopName = cust.ShopName;
                                    dreamorder.Skcode = cust.Skcode;
                                    dreamorder.ItemName = item.ItemName;
                                    dreamorder.Discription = "";
                                    dreamorder.Status = "Pending";
                                    dreamorder.CreatedDate = indianTime;
                                    dreamorder.UpdatedDate = indianTime;
                                    dreamorder.Deleted = false;
                                    if (sc.DreamItemDetails == null)
                                    {
                                        sc.DreamItemDetails = new List<DreamItem>();
                                    }
                                    sc.DreamItemDetails.Add(dreamorder);
                                }
                                context.DreamOrderDb.Add(sc);


                                #endregion

                                message = "Reward order created successfully, will get you soon";
                            }

                            var customerTarget = context.SubCategoryTargetCustomers.FirstOrDefault(x => x.Id == subCategoryTargetCustomerDc.id);
                            customerTarget.IsClaimed = true;
                            customerTarget.ModifiedBy = customerId;
                            customerTarget.ModifiedDate = DateTime.Now;
                            context.Entry(customerTarget).State = EntityState.Modified;
                            context.Commit();
                            var response = new
                            {
                                Status = true,
                                Message = message
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                        else
                        {
                            var response = new
                            {
                                Status = false,
                                Message = "Already claimed processed"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                    }
                    else
                    {
                        var response = new
                        {
                            Status = false,
                            Message = "Target Not Completed!"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                }
                else
                {
                    var response = new
                    {
                        Status = false,
                        Message = "Target Not Found!"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
        }
        [Route("ClaimCustomerReward")]
        [HttpGet]
        public HttpResponseMessage ClaimCustomerReward(string SKCode, int CustomerId, int WarehouseId)
        {
            //var target = new CustomerTarget();
            var date = indianTime;
            if (date.Day <= 10)
            {
                date = DateTime.Now.AddMonths(-1);
            }
            var monthyear = DateTime.Now.Month + "-" + DateTime.Now.Year;
            using (var db = new AuthContext())
            {

                var MonthlyCustomerTarget = new MongoDbHelper<DataContracts.Mongo.CustomersTargets.MonthlyCustomerTarget>();
                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
                var Target = MonthlyCustomerTarget.Select(x => x.Skcode == SKCode, null, null, null, false, "", DocumentName).FirstOrDefault();
                if (Target != null)
                {
                    var GetExportData = Target;

                    //var GetExportData = db.CustomersTargetDB.Where(x => x.WarehouseId == WarehouseId && x.Skcode == SKCode && x.CreatedDate.Month == date.Month && x.CreatedDate.Year == date.Year).SingleOrDefault();
                    var levelid = db.LevelMasterDB.Where(x => x.Name == GetExportData.Levels && x.WarehouseId == 1 && x.CreatedDate.Month == date.Month && x.CreatedDate.Year == date.Year).Select(x => x.Id).FirstOrDefault();
                    var image = db.CustomerBandsDB.Where(x => x.CreatedDate.Month == date.Month && x.CreatedDate.Year == date.Year && x.LevelId == levelid && x.BandName == GetExportData.Bands).Select(x => new { x.Type, x.value, x.ImagePath, x.GiftId }).SingleOrDefault();

                    if (!(Target.IsOffer.HasValue && Target.IsOffer.Value))
                    {
                        if (GetExportData.IsClaimed == false && Convert.ToInt32(GetExportData.Target) <= Convert.ToInt32(GetExportData.CurrentVolume))
                        {
                            if (image != null && image.Type == "Point")
                            {
                                #region Reward Insertion in Wallet 

                                var cust = db.Customers.Where(x => x.CustomerId == CustomerId).SingleOrDefault();

                                var IsWalletEdit = db.WalletDb.Where(x => x.CustomerId == CustomerId).SingleOrDefault();
                                if (IsWalletEdit != null)
                                {
                                    CustomerWalletHistory customerwallethistory = new CustomerWalletHistory();
                                    try
                                    {
                                        customerwallethistory.CustomerId = CustomerId;
                                        customerwallethistory.WarehouseId = cust.Warehouseid.Value;
                                        customerwallethistory.Through = "Achieved " + monthyear + " Target Reward";
                                        customerwallethistory.CompanyId = cust.CompanyId ?? 0;
                                        if (Convert.ToDouble(image.value) >= 0)
                                        {
                                            customerwallethistory.NewAddedWAmount = Convert.ToDouble(image.value);
                                            customerwallethistory.TotalWalletAmount = IsWalletEdit.TotalAmount + Convert.ToDouble(image.value);
                                        }
                                        customerwallethistory.UpdatedDate = indianTime;
                                        customerwallethistory.TransactionDate = indianTime;
                                        customerwallethistory.CreatedDate = indianTime;
                                        db.CustomerWalletHistoryDb.Add(customerwallethistory);
                                        db.Commit();
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    IsWalletEdit.TotalAmount = IsWalletEdit.TotalAmount + Convert.ToDouble(image.value);
                                    IsWalletEdit.UpdatedDate = indianTime;
                                    IsWalletEdit.TransactionDate = indianTime;
                                    db.WalletDb.Attach(IsWalletEdit);
                                    db.Entry(IsWalletEdit).State = EntityState.Modified;
                                    db.Commit();



                                    Target.IsClaimed = true;
                                    MonthlyCustomerTarget.Replace(Target.Id, Target, DocumentName);

                                }
                                else
                                {
                                    var wallet = new Wallet();
                                    wallet.CompanyId = cust.CompanyId ?? 0;
                                    wallet.CustomerId = CustomerId;
                                    wallet.TransactionDate = indianTime;
                                    wallet.TotalAmount = Convert.ToDouble(image.value);
                                    wallet.CreatedDate = indianTime;
                                    wallet.UpdatedDate = indianTime;
                                    wallet.Deleted = false;
                                    db.WalletDb.Add(wallet);
                                    db.Commit();

                                    CustomerWalletHistory customerwallethistory = new CustomerWalletHistory();
                                    try
                                    {
                                        customerwallethistory.CustomerId = CustomerId;
                                        customerwallethistory.WarehouseId = cust.Warehouseid.Value;
                                        customerwallethistory.Through = "Achieved " + monthyear + " Target Reward";
                                        customerwallethistory.CompanyId = cust.CompanyId ?? 0;
                                        if (Convert.ToDouble(image.value) >= 0)
                                        {
                                            customerwallethistory.NewAddedWAmount = Convert.ToDouble(image.value);
                                            customerwallethistory.TotalWalletAmount = Convert.ToDouble(image.value);
                                        }
                                        customerwallethistory.UpdatedDate = indianTime;
                                        customerwallethistory.TransactionDate = indianTime;
                                        customerwallethistory.CreatedDate = indianTime;
                                        db.CustomerWalletHistoryDb.Add(customerwallethistory);
                                        db.Commit();

                                        Target.IsClaimed = true;
                                        MonthlyCustomerTarget.Replace(Target.Id, Target, DocumentName);

                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                                #endregion

                                var response = new
                                {
                                    Status = true,
                                    Message = "Reward Points successfully Added in wallet"
                                };
                                return Request.CreateResponse(HttpStatusCode.OK, response);
                            }
                            else
                            {
                                #region Create Reward Ordered
                                Customer cust = new Customer();
                                Customer custdb = new Customer();
                                Warehouse w = new Warehouse();
                                var sc = new DreamOrder();
                                try
                                {
                                    cust = db.Customers.Where(x => x.Skcode == SKCode && x.CustomerId == CustomerId).SingleOrDefault();
                                }
                                catch (Exception sad)
                                {
                                }
                                try
                                {
                                    custdb = db.Customers.Where(x => x.CustomerId == CustomerId).SingleOrDefault();
                                }
                                catch (Exception sad)
                                {
                                }
                                try
                                {
                                    w = db.Warehouses.Where(wr => wr.WarehouseId == custdb.Warehouseid).FirstOrDefault();
                                }
                                catch (Exception sad)
                                {
                                }
                                if (cust != null)
                                {
                                    if (w != null)
                                    {
                                        sc.WarehouseId = w.WarehouseId;
                                        sc.WarehouseName = w.WarehouseName;
                                        sc.CityId = w.Cityid;
                                    }
                                    sc.ShopName = cust.ShopName;
                                    sc.Status = "Pending";
                                    sc.CustomerMobile = cust.Mobile;
                                    sc.ShippingAddress = cust.ShippingAddress;
                                    //sc.SalesPersonId = cust.ExecutiveId;
                                    sc.CompanyId = cust.CompanyId;
                                }
                                sc.CreatedDate = indianTime;
                                sc.UpdatedDate = indianTime;
                                sc.Deliverydate = indianTime.AddDays(2);
                                sc.Deleted = false;
                                sc.ReDispatchCount = 0;

                                var dreamorder = new DreamItem();
                                RewardItems it = db.RewardItemsDb.Where(x => x.rItemId == image.GiftId).SingleOrDefault();
                                dreamorder.ShopName = cust.ShopName;
                                dreamorder.ItemId = it.rItemId;
                                dreamorder.OrderQty = 1;

                                dreamorder.ShopName = cust.ShopName;
                                dreamorder.Skcode = cust.Skcode;
                                dreamorder.ItemName = it.rItem;
                                dreamorder.Discription = it.Description;
                                dreamorder.Status = "Pending";
                                dreamorder.CreatedDate = indianTime;
                                dreamorder.UpdatedDate = indianTime;
                                dreamorder.Deleted = false;


                                try
                                {
                                    if (sc.DreamItemDetails == null)
                                    {
                                        sc.DreamItemDetails = new List<DreamItem>();
                                    }
                                    sc.DreamItemDetails.Add(dreamorder);
                                }
                                catch (Exception ex)
                                {
                                    throw;
                                }

                                db.DreamOrderDb.Add(sc);
                                int id = db.Commit();

                                Target.IsClaimed = true;
                                MonthlyCustomerTarget.Replace(Target.Id, Target, DocumentName);
                                #endregion

                                var response = new
                                {
                                    Status = true,
                                    Message = "Reward order successfully created"
                                };
                                return Request.CreateResponse(HttpStatusCode.OK, response);
                            }
                        }
                        else
                        {
                            var response = new
                            {
                                Status = false,
                                Message = "Already claimed Reward"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                    }
                    else
                    {
                        if (GetExportData.IsClaimed == false && Convert.ToInt32(GetExportData.Target) <= Convert.ToInt32(GetExportData.CurrentVolume))
                        {
                            int totalDiscount = GetExportData.OfferValue.Value;
                            if (GetExportData.OfferType.Value == 0)//Percent
                            {
                                totalDiscount = Convert.ToInt32(GetExportData.Target * Convert.ToDecimal(GetExportData.OfferValue.Value) / 100);
                            }
                            List<int> discounts = new List<int>();
                            if (totalDiscount > GetExportData.MaxDiscount)
                            {
                                var j = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(totalDiscount) / GetExportData.MaxDiscount.Value));
                                for (int i = 0; i < j; i++)
                                {
                                    discounts.Add(totalDiscount > GetExportData.MaxDiscount.Value ? GetExportData.MaxDiscount.Value : totalDiscount);
                                    totalDiscount = totalDiscount - GetExportData.MaxDiscount.Value;
                                }
                            }
                            else
                            {
                                discounts.Add(totalDiscount);
                            }

                            var offers = db.OfferDb.FirstOrDefault(x => x.OfferId == GetExportData.OfferId);
                            if (offers != null)
                            {
                                foreach (var item in discounts)
                                {
                                    db.BillDiscountDb.Add(new Model.BillDiscount.BillDiscount
                                    {
                                        BillDiscountAmount = item,
                                        BillDiscountType = offers.OfferOn,
                                        BillDiscountTypeValue = item,
                                        CreatedBy = CustomerId,
                                        CreatedDate = DateTime.Now,
                                        CustomerId = CustomerId,
                                        IsActive = true,
                                        IsAddNextOrderWallet = false,
                                        IsMultiTimeUse = offers.IsMultiTimeUse,
                                        IsDeleted = false,
                                        IsScratchBDCode = false,
                                        IsUsedNextOrder = false,
                                        IsUseOtherOffer = offers.IsUseOtherOffer,
                                        MinOrderAmount = item * GetExportData.MOVMultiplier.Value,
                                        MaxOrderAmount = item * GetExportData.MOVMultiplier.Value * 10,
                                        OfferId = offers.OfferId,
                                        OrderId = 0
                                    });
                                }
                            }
                            string successmsg = "Please connect our customer executive";
                            if (db.Commit() > 0)
                            {
                                Target.IsClaimed = true;
                                MonthlyCustomerTarget.Replace(Target.Id, Target, DocumentName);
                                successmsg = "Scretch card successfully Added in offer section.";
                            }
                            var response = new
                            {
                                Status = true,
                                Message = successmsg
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                        else
                        {
                            var response = new
                            {
                                Status = false,
                                Message = "Already claimed Reward"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                    }
                }
                else
                {
                    var response = new
                    {
                        Status = false,
                        Message = "Target Not Found!"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
        }

        #region Digital RowData
        [HttpGet]
        [Route("GetCheckOutReasonRowData")]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetTelecallerRowData(DateTime Startdate, DateTime Enddate, int FormType)
        {
            try
            {
                using (var Context = new AuthContext())
                {
                    var type = new SqlParameter("@FormType", FormType);
                    var startdate = new SqlParameter("@StartDate", Startdate);
                    var enddate = new SqlParameter("@EndDate", Enddate);
                    var data = Context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.CheckOutReasonRowDataDC>("GetCheckOutReasonRawData @FormType,@StartDate,@EndDate", type, startdate, enddate).ToList();

                    if (data != null && data.Any() && data.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(data);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/CheckOutReasonRawData");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "CheckOut_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "CheckOut_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/CheckOutReasonRawData/" + fileName);
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = FileUrl };
                    }

                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = ex.Message };
            }
        }
        #endregion
        [Route("GetAllSalesPersonKPI")]
        [HttpGet]
        public async Task<string> GetSalesPersonKPI(int month, int year)
        {
            string FileUrl = "";
            List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc> salesPersonKpiList = new List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc>();
            using (var Context = new AuthContext())
            {
                var listt = (from e in Context.ClusterStoreExecutives
                             join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                             //join c in Context.Clusters on e.ClusterId equals c.ClusterId
                             //join s in Context.StoreDB on e.StoreId equals s.Id
                             where e.IsActive == true && e.IsDeleted == false && p.Active == true && p.Deleted == false   //&& e.ExecutiveId == 3751
                             select new
                             {
                                 p.PeopleID,
                                 p.WarehouseId,
                                 p.DisplayName,
                                 //c.WarehouseName,
                                 //s.Id,
                                 //s.Name,
                                 //c.ClusterName
                             }).Distinct().OrderBy(x => x.PeopleID).ToList();
                //var PeopleIds = listt.Select(x => x.PeopleID).Distinct().ToList();
                var storelist = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
                foreach (var p in listt)
                {
                    List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc> salesPersonKpi = new List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc>();

                    ItemMasterManager manager = new ItemMasterManager();
                    var configs = await manager.GetSalesPersonKPIConfigs(p.PeopleID, p.WarehouseId, month, year);

                    DateTime startDate = new DateTime(year, month, 1);
                    string sDate = startDate.ToString("yyyy-MM-dd");
                    string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");

                    bool Isdigitalexecutive = false;


                    using (var authContext = new AuthContext())
                    {
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + p.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = authContext.Database.SqlQuery<string>(query).ToList();
                        Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));
                    }


                    foreach (var item in configs.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type }))
                    {
                        DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc kpi = new DataContracts.External.MobileExecutiveDC.SalesPersonKpiListDc
                        {
                            Month = month,
                            Year = year,
                            KpiName = item.Key.KpiName,
                            DisplayName = string.IsNullOrEmpty(item.Key.DisplayName) ? item.Key.KpiName : item.Key.DisplayName,
                            Type = item.Key.Type
                        };
                        ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKPIOrderData> elasticSqlHelperOrdeData = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKPIOrderData>();
                        ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal> elasticSqlHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal>();
                        ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData> skcodeElasticHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData>();

                        //var clusterIds = string.Join(",", item.Select(s => s.ClusterId).Distinct().ToList());


                        var Targets = item.GroupBy(s => s.KPIId).Select(d => new { KPIID = d.Key, Target = d.FirstOrDefault().Target, IncentiveAmount = d.FirstOrDefault().IncentiveAmount });
                        double incentiveAmount = 0;
                        var queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from skorderdata_prod where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and executiveid = '" + p.PeopleID + "' and IIF(isdigitalorder is null, false, isdigitalorder) = false";

                        if (Isdigitalexecutive)
                            queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from skorderdata_prod where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and ordertakensalespersonid = '" + p.PeopleID + "' and IIF(isdigitalorder is null, false, isdigitalorder) = true";

                        var OrderData = (await elasticSqlHelperOrdeData.GetListAsync(queryOrderData)).ToList();
                        switch (item.Key.KpiName)
                        {
                            case "MTD":

                                incentiveAmount = 0;
                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());
                                    //Old Query: var achievedVal = (await elasticSqlHelper.GetListAsync($"select sum(dispatchqty * price) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                    var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(y => new { y.dispatchqty, y.price }).Sum(y => y.dispatchqty * y.price);
                                    var Achievement = achievedVal;
                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    // var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    // var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();
                                    // kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Math.Round(Achievement, 0);
                                    kpi.Target += Target.Sum(d => d.Target);
                                }
                                break;


                            case "MAC":
                                incentiveAmount = 0;

                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                    // var achievedVal = (await elasticSqlHelper.GetListAsync($"select count(distinct custid) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}' and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                    var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(x => x.custid).Distinct().Count();
                                    var Achievement = achievedVal;//achievedVal.val;
                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                    //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Achievement;//Math.Round(Achievement, 0);
                                    kpi.Target += Target.Sum(d => d.Target);
                                }

                                break;

                            case "Success Stores":
                                incentiveAmount = 0;

                                var date = DateTime.Now;
                                var isMonthComplete = false;
                                if (date.Day < 3)
                                {
                                    isMonthComplete = true;
                                    date = DateTime.Now.AddMonths(-1);
                                }
                                var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

                                var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
                                var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from skorderdata_prod where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and executiveid ='" + p.PeopleID + "' group by skcode,storeid";
                                var skCodeDataLists = await skcodeElasticHelper.GetListAsync(query);
                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    // var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                    //var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and storeid={store.Key} and executiveid ={peopleId} group by skcode,storeid";
                                    //var skCodeDataList = await skcodeElasticHelper.GetListAsync(query);

                                    var skCodeDataList = skCodeDataLists.Where(x => x.storeid == store.Key).ToList();

                                    var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                           && s.TargetOnStores.Count > 0
                                           && s.TargetOnStores.Any(d => d.StoreId == store.Key), collectionName: DocumentName).ToList();
                                    List<DataContracts.External.MobileExecutiveDC.CustStoreTargets> targetOnStores = new List<DataContracts.External.MobileExecutiveDC.CustStoreTargets>();
                                    foreach (var data in allTarget)
                                    {
                                        foreach (var storeTarget in data.TargetOnStores)
                                        {
                                            targetOnStores.Add(new DataContracts.External.MobileExecutiveDC.CustStoreTargets
                                            {
                                                skcode = data.Skcode,
                                                StoreId = storeTarget.StoreId,
                                                Target = storeTarget.Target,
                                                TargetLineItem = storeTarget.TargetLineItem
                                            });
                                        }

                                    }

                                    //var targetOnStores = mongoHelper.GetWithProjection(s => s.TargetOnStores.Any(d => d.StoreId == store.Key),
                                    //           s => s.TargetOnStores.Select(d => new CustStoreTargets
                                    //           {
                                    //               skcode = s.Skcode,
                                    //               StoreId = d.StoreId,
                                    //               Target = d.Target,
                                    //               TargetLineItem = d.TargetLineItem
                                    //           }).ToList(), DocumentName).SelectMany(d => d).ToList();

                                    int Achievement = 0;

                                    targetOnStores.ForEach(s =>
                                    {
                                        var skcodeData = skCodeDataList.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                            s.Target <= a.dispatchamount &&
                                            (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                                        );

                                        if (skcodeData != null)
                                            Achievement++;

                                    });


                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();

                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                    //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Achievement;
                                    kpi.Target += Target.Sum(d => d.Target);
                                }

                                break;

                        }

                        //kpi.AchievementPercent = Math.Round(100 * (kpi.Achievement / kpi.Target), 0);
                        kpi.AchievementPercent = kpi.Target > 0 ? Math.Round(100 * (kpi.Achievement / kpi.Target), 0) : 0;
                        var incentives = item.GroupBy(d => new { d.AchievePercent, d.IncentivePercent });
                        var incentivePercent = incentives.Where(s => s.Key.AchievePercent <= kpi.AchievementPercent).OrderByDescending(s => s.Key.AchievePercent)?.FirstOrDefault()?.Key?.IncentivePercent ?? 0;
                        kpi.Earning += incentivePercent == 0 ? 0 : Math.Round((incentiveAmount * incentivePercent) / 100, 0);

                        var storeid = configs.FirstOrDefault(x => x.ExecutiveName == p.DisplayName)?.StoreId;
                        kpi.ExecutiveName = p.DisplayName;
                        kpi.StoreName = storeid > 0 ? storelist.FirstOrDefault(x => x.Id == storeid).Name : "";
                        salesPersonKpi.Add(kpi);
                    }
                    salesPersonKpiList.AddRange(salesPersonKpi);
                }
                if (salesPersonKpiList.Any() && salesPersonKpiList.Count > 0)
                {
                    var Dt = ClassToDataTable.CreateDataTable(salesPersonKpiList);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/salesPersonKpiReport");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "salesPersonKpi_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(Dt, "salesPersonKpi_Report", filePath);

                    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                 , HttpContext.Current.Request.Url.DnsSafeHost
                                                                 , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                 , "/SalesAppDashboardFile/AllExecutiveDayReport/" + fileName);
                }
            }
            return FileUrl;
        }

        #region YesterdayJob 
        [Route("YesterdayBeatDSRJob")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesDashboardTodayMTDData> YesterdayBeatDSRJob()
        {
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            long? storeId = 0;

            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DataContracts.External.MobileExecutiveDC.DashboardDc dash = new DataContracts.External.MobileExecutiveDC.DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var Yesterday = DateTime.Now.AddDays(-1).Date;
            //var today = temp;
            //var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            //var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == Yesterday).FirstOrDefault();
            var YesterdayAllBeat = mongoDbHelper.Select(x => x.AssignmentDate == Yesterday).ToList();

            //---- get dashboard data from mongo---


            using (var Context = new AuthContext())
            {
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var ExecutiveDatalist = (from e in Context.ClusterStoreExecutives
                                         join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                         join ch in Context.ChannelMasters on e.ChannelMasterId equals ch.ChannelMasterId
                                         where e.IsActive == true && e.IsDeleted == false && ch.Active && !ch.Deleted
                                         select new
                                         {
                                             p.PeopleID,
                                             p.WarehouseId,
                                             ch.ChannelMasterId,
                                             ch.ChannelType
                                         }).Distinct().ToList();

                foreach (var data in ExecutiveDatalist)
                {
                    DataContracts.External.MobileExecutiveDC.BeatCustomerDc Beat = new DataContracts.External.MobileExecutiveDC.BeatCustomerDc();

                    //Beat.YesterdayBeatCustomerIds = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ? YesterdayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();
                    var planroute = YesterdayAllBeat.Where(x => x.PeopleId == data.PeopleID).FirstOrDefault();
                    Beat.YesterdayBeatCustomerIds = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(y => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = y.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                    DataTable IdDt = new DataTable();
                    List<int> ActualCustomerVisited = new List<int>();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");

                    DataTable VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt.Columns.Add("IntValue");

                    if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any() && Beat.YesterdayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }
                    //ActualCustomerVisited = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                    ActualCustomerVisited = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Select(y => y.CustomerId).ToList() : new List<int>();

                    if (IdDt == null)
                    {
                        IdDt = new DataTable();
                        IdDt.Columns.Add("IntValue");
                    }
                    var cmd = Context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 1200;
                    cmd.CommandText = "[dbo].[YesterdayBeatDSRJob]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var param4 = new SqlParameter("PersonId", data.PeopleID);
                    var param5 = new SqlParameter("CustIdDs", IdDt);
                    var param8 = new SqlParameter("WarehouseId", data.WarehouseId);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param8);


                    var reader = cmd.ExecuteReader();
                    dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                    if (dashboardDetail != null)
                    {
                        // YesterdayDashboardDcsList ToObj = new YesterdayDashboardDcsList();
                        mongoObj.BeatSales = dashboardDetail.BeatSales;
                        mongoObj.ExtraSales = dashboardDetail.ExtraSales;
                        mongoObj.BeatOrder = dashboardDetail.BeatOrder;
                        mongoObj.TotalSales = dashboardDetail.TotalSales;
                        mongoObj.ProductiveCall = dashboardDetail.ProductiveCall;
                        int SuccessPhoneOrder = 0;
                        if (planroute != null && planroute.PlannedRoutes.Count() > 0)
                        {
                            SuccessPhoneOrder = planroute.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                            mongoObj.VisitPlanned = planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                            mongoObj.TotalCall = planroute.PlannedRoutes.Where(y => y.IsVisited).Count();
                            mongoObj.OutletCoverage = (Convert.ToDouble(mongoObj.TotalCall) / mongoObj.VisitPlanned) * 100;
                            mongoObj.PhoneOrder = SuccessPhoneOrder;
                        }
                        else
                        {
                            mongoObj.VisitPlanned = 0;
                            mongoObj.TotalCall = 0;
                            mongoObj.OutletCoverage = 0;
                        }
                        if (mongoObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                        {
                            mongoObj.StrikeRate = (Convert.ToDouble(mongoObj.TodayProductiveCall) / (mongoObj.TotalCall + SuccessPhoneOrder)) * 100;
                        }
                        var planCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                        mongoObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                        mongoObj.ExtraCall = dashboardDetail.ExtraCall;
                        mongoObj.ExtraOrder = dashboardDetail.ExtraOrder;
                        mongoObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                        mongoObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                        mongoObj.Eco = dashboardDetail.Eco;
                        mongoObj.AvgLineItem = dashboardDetail.AvgLineItem;
                        mongoObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                    }

                    mongoObj.WarehouseId = data.WarehouseId;
                    mongoObj.SalesPersonId = data.PeopleID;
                    mongoObj.ChannelMatserId = data.ChannelMasterId;
                    mongoObj.ChannelName = data.ChannelType;
                    mongoObj.SalesPersonId = data.PeopleID;
                    mongoObj.StoreId = Convert.ToInt32(storeId);
                    mongoObj.TodayTarget = planroute != null ? planroute.TodayTarget : 0;
                    //mongoObj.PerfactOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.TodayPerfactOrder : 0;
                    //mongoObj.TodaySupperOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.TodaySupperOrder : 0;
                    //mongoObj.PhoneOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.PhoneOrder : 0;
                    mongoObj.CheckIn = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Max(x => x.CheckOut) : null;
                    var res = InsertDashboardJobinMongo(mongoObj, Context);
                }
            }
            return mongoObj;
        }

        [Route("DigitalSalesDSRJob")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<bool> DigitalSalesDSRJob()
        {
            DigitalSalesBeatDSR mongoObj = new DigitalSalesBeatDSR();
            long? storeId = 0;
            bool flag = false;
            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DataContracts.External.MobileExecutiveDC.DashboardDc dash = new DataContracts.External.MobileExecutiveDC.DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var YesterDay = DateTime.Now.AddDays(-1).Date;

            var YesterDayAllBeat = mongoDbHelper.Select(x => x.AssignmentDate == YesterDay).ToList();

            using (var Context = new AuthContext())
            {
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var ExecutiveDatalist = Context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.PeopleData>("GetDigitalExecutiveList").ToList();
                var PeopleIDs = ExecutiveDatalist.Select(x => x.PeopleID).Distinct().ToList();
                var StoreData = Context.ClusterStoreExecutives.Where(x => x.IsActive == true && x.IsDeleted == false && PeopleIDs.Contains(x.ExecutiveId))
                                .Select(x => new { x.ExecutiveId, x.StoreId, x.ClusterId }).ToList();

                foreach (var people in ExecutiveDatalist)
                {
                    var planroute = YesterDayAllBeat.Where(x => x.PeopleId == people.PeopleID).FirstOrDefault();
                    var BeatCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(y => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = y.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                    DataTable IdDt = new DataTable();
                    List<int> ActualCustomerVisited = new List<int>();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");

                    DataTable VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt.Columns.Add("IntValue");

                    if (BeatCustomers != null && BeatCustomers.Any() && BeatCustomers.Count > 0)
                    {
                        foreach (var id in BeatCustomers.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }
                    ActualCustomerVisited = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Select(y => y.CustomerId).ToList() : new List<int>();

                    if (IdDt == null)
                    {
                        IdDt = new DataTable();
                        IdDt.Columns.Add("IntValue");
                    }
                    var cmd = Context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 1200;
                    cmd.CommandText = "[dbo].[DigitalSalesBeatDSRJob]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var param4 = new SqlParameter("PersonId", people.PeopleID);
                    var param5 = new SqlParameter("CustIdDs", IdDt);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);


                    var reader = cmd.ExecuteReader();
                    dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                    if (dashboardDetail != null)
                    {
                        mongoObj.BeatSales = dashboardDetail.BeatSales;
                        mongoObj.ExtraSales = dashboardDetail.ExtraSales;
                        mongoObj.BeatOrder = dashboardDetail.BeatOrder;
                        mongoObj.TotalSales = dashboardDetail.TotalSales;
                        mongoObj.ProductiveCall = dashboardDetail.ProductiveCall;
                        int SuccessPhoneOrder = 0;
                        if (planroute != null && planroute.PlannedRoutes.Count() > 0)
                        {
                            SuccessPhoneOrder = planroute.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                            mongoObj.VisitPlanned = planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                            mongoObj.TotalCall = planroute.PlannedRoutes.Where(y => y.IsVisited).Count();
                            mongoObj.OutletCoverage = (Convert.ToDouble(mongoObj.TotalCall) / mongoObj.VisitPlanned) * 100;
                            mongoObj.PhoneOrder = SuccessPhoneOrder;
                        }
                        else
                        {
                            mongoObj.VisitPlanned = 0;
                            mongoObj.TotalCall = 0;
                            mongoObj.OutletCoverage = 0;
                        }
                        if (mongoObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                        {
                            mongoObj.StrikeRate = (Convert.ToDouble(mongoObj.ProductiveCall) / (mongoObj.TotalCall + SuccessPhoneOrder)) * 100;
                        }
                        var planCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                        mongoObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                        mongoObj.ExtraCall = dashboardDetail.ExtraCall;
                        mongoObj.ExtraOrder = dashboardDetail.ExtraOrder;
                        mongoObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                        mongoObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                        mongoObj.Eco = dashboardDetail.Eco;
                        mongoObj.AvgLineItem = dashboardDetail.AvgLineItem;
                        mongoObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                        mongoObj.WarehouseName = dashboardDetail.WarehouseName;
                    }

                    mongoObj.WarehouseId = people.WarehouseId;
                    mongoObj.SalesPersonId = people.PeopleID;
                    mongoObj.StoreIds = StoreData.Count > 0 ? StoreData.Where(x => x.ExecutiveId == people.PeopleID).Select(x => x.StoreId).Distinct().ToList() : new List<long>();
                    mongoObj.ChannelMasterId = people.ChannelMasterId;
                    mongoObj.ChannelName = people.ChannelName;
                    mongoObj.TodayTarget = planroute != null ? planroute.TodayTarget : 0;
                    mongoObj.CheckIn = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Max(x => x.CheckOut) : null;
                    mongoObj.IsActive = true;
                    mongoObj.IsDelete = false;
                    mongoObj.CreatedDate = DateTime.Now.AddDays(-1);
                    mongoObj.ModifiedDate = DateTime.Now;

                    #region DataInsertInMongo

                    MongoDbHelper<DigitalSalesBeatDSR> DSRMongoHelper = new MongoDbHelper<DigitalSalesBeatDSR>();

                    var param1 = new SqlParameter("PeopleID", people.PeopleID);

                    var cmd1 = Context.Database.Connection.CreateCommand();
                    cmd1.CommandText = "[dbo].[SpPerformanceTarget]";
                    cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd1.Parameters.Add(param1);

                    var reader1 = cmd1.ExecuteReader();
                    var dd = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.PerformanceTargetDc>(reader1).ToList();


                    //var WarehouseName = Context.Warehouses.FirstOrDefault(x => x.WarehouseId == obj.WarehouseId && x.active == true && x.Deleted == false).WarehouseName;
                    //long? storeId = Context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.SalesPersonId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                    //var ClusterIds = Context.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.SalesPersonId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                    //var ClusterNames = Context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                    mongoObj.ClusterIds = StoreData.Count > 0 ? string.Join(",", StoreData.Where(x => x.ExecutiveId == people.PeopleID).Select(x => x.ClusterId).Distinct().ToList()) : "";
                    mongoObj.ClusterName = null;
                    mongoObj.StoreId = 1;
                    mongoObj.StoreName = "All";
                    mongoObj.SalesPerson = people.DisplayName;
                    mongoObj.MtdMonthlyTarget = dd.Count > 0 ? dd.FirstOrDefault(x => x.Name == "Sales").NumPer : 0;

                    flag = DSRMongoHelper.Insert(mongoObj);

                    #endregion

                }
            }
            return flag;
        }
        #endregion
        #region SalesDashboard
        [HttpPost]
        [Route("GetSalesPerformanceDashbord")]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetSalesPerformanceDashbordAsync(DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordFilter obj)
        {
            try
            {
                obj.LastDate = obj.LastDate.AddDays(1).AddMilliseconds(-1);
                List<DataContracts.External.MobileExecutiveDC.ExecutiveDatas> executiveDatas = new List<DataContracts.External.MobileExecutiveDC.ExecutiveDatas>();
                DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordExecDC salesPerformanceDashbordExecDC = new DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordExecDC();
                List<DataContracts.External.MobileExecutiveDC.ActualRouteCustomerDC> ActualRouteCustomers = new List<DataContracts.External.MobileExecutiveDC.ActualRouteCustomerDC>();
                List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordListDC> salesPerformanceDashbordListDCs = new List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordListDC>();
                List<DataContracts.External.MobileExecutiveDC.PerformanceDashBoardData> performanceDashBoardDataList = new List<DataContracts.External.MobileExecutiveDC.PerformanceDashBoardData>();
                MongoHelper<ExecutiveBeats> mongoHelperBeat = new MongoHelper<ExecutiveBeats>();
                MongoHelper<DashBoardColourCode> mongoHelperColourCode = new MongoHelper<DashBoardColourCode>();
                AngularJSAuthentication.API.Helper.Elastic.ElasticHelper elasticHelper = new AngularJSAuthentication.API.Helper.Elastic.ElasticHelper();

                using (var context = new AuthContext())
                {

                    var StoreData = context.StoreDB.Where(x => obj.StoreIds.Contains((int)x.Id)).ToList();
                    var ColourCode = mongoHelperColourCode.GetAll().ToList();
                    var PerfactLineItem = context.StoreProductiveOrders.Select(x => x.PerfactLineItem).FirstOrDefault();

                    #region ElasticOrderData

                    string sDate = obj.FirstDate.Date.ToString("yyyy-MM-dd");
                    string eDate = obj.LastDate.Date.AddDays(1).ToString("yyyy-MM-dd");
                    var warehouseid = string.Join(",", obj.WarehouseIds);
                    var storeid = string.Join(",", obj.StoreIds);
                    var query = $"SELECT executiveid,custid,orderid,whid,ordqty,price,storeid,createddate,isnull(dispatchqty,0) dispatchqty,clustername,whname,cityname,brandid from  {platformIdxName} " +
                        $"where  createddate>='" + sDate + "' and createddate<'" + eDate + "' and whid in (" + warehouseid + ") and storeid in (" + storeid + ") and status not in ('Payment Pending','Inactive','Failed','Dummy Order Cancelled','Order Canceled')";

                    List<DataContracts.External.MobileExecutiveDC.OrderElasticDataDC> OrderMasters = elasticHelper.GetList(query);
                    #endregion
                    #region B

                    List<int> executiveids = new List<int>();
                    if (OrderMasters.Count > 0 && OrderMasters.Any())
                    {
                        executiveids = OrderMasters.Where(x => x.executiveid > 0).GroupBy(x => x.executiveid).Select(x => x.Key).ToList();
                    }
                    var ExecutiveBeats = mongoHelperBeat.GetWithProjection(x => x.AssignmentDate >= obj.FirstDate && x.AssignmentDate <= obj.LastDate,
                                            x => new ExecutiveBeats
                                            {
                                                PeopleId = x.PeopleId,
                                                AssignmentDate = x.AssignmentDate,
                                                ActualRoutes = x.ActualRoutes,
                                                PlannedRoutes = x.PlannedRoutes
                                            }, "ExecutiveBeats").ToList();
                    var BeatExecutiveIds = ExecutiveBeats.Where(x => !executiveids.Contains(x.PeopleId) && x.ActualRoutes != null && x.ActualRoutes.Any(y => obj.WarehouseIds.Contains((int)y.WarehouseId))).Select(x => x.PeopleId).Distinct().ToList();

                    if (BeatExecutiveIds.Count > 0)
                    {
                        executiveids.AddRange(BeatExecutiveIds);
                    }
                    #region ExecutiveData

                    var waredt = new DataTable();
                    waredt.Columns.Add("intValue");
                    foreach (var wareid in obj.WarehouseIds)
                    {
                        var dr = waredt.NewRow();
                        dr["intValue"] = wareid;
                        waredt.Rows.Add(dr);
                    }
                    var WareIds = new SqlParameter("@WarehouseIds", waredt);
                    WareIds.SqlDbType = SqlDbType.Structured;
                    WareIds.TypeName = "dbo.intValues";

                    var Storedt = new DataTable();
                    Storedt.Columns.Add("intValue");
                    foreach (var strid in obj.StoreIds)
                    {
                        var dr = Storedt.NewRow();
                        dr["intValue"] = strid;
                        Storedt.Rows.Add(dr);
                    }
                    var strids = new SqlParameter("@StoreIds", Storedt);
                    strids.SqlDbType = SqlDbType.Structured;
                    strids.TypeName = "dbo.intValues";

                    var AllExecutiveIds = context.Database.SqlQuery<int>("GetWarehoseStoreExecutive @StoreIds,@WarehouseIds", strids, WareIds).ToList();


                    if (AllExecutiveIds != null && AllExecutiveIds.Any() && AllExecutiveIds.Any(x => !executiveids.Contains(x)))
                        executiveids.AddRange(AllExecutiveIds.Where(x => !executiveids.Contains(x)));

                    //executiveids = executiveids.Distinct().ToList();

                    WareIds = new SqlParameter("@WarehouseIds", waredt);
                    WareIds.SqlDbType = SqlDbType.Structured;
                    WareIds.TypeName = "dbo.intValues";

                    strids = new SqlParameter("@StoreIds", Storedt);
                    strids.SqlDbType = SqlDbType.Structured;
                    strids.TypeName = "dbo.intValues";

                    var peopleids = new DataTable();
                    peopleids.Columns.Add("intValue");
                    foreach (var execid in executiveids)
                    {
                        var dr = peopleids.NewRow();
                        dr["intValue"] = execid;
                        peopleids.Rows.Add(dr);
                    }
                    var execids = new SqlParameter("@PeopleIds", peopleids);
                    execids.SqlDbType = SqlDbType.Structured;
                    execids.TypeName = "dbo.intValues";

                    executiveDatas = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveDatas>("GetExecutiveName @PeopleIds,@StoreIds,@WarehouseIds", execids, strids, WareIds).ToList();

                    #endregion

                    var dates = new List<DateTime>();

                    for (var dt = obj.FirstDate; dt <= obj.LastDate; dt = dt.AddDays(1))
                    {
                        dates.Add(dt);
                    }

                    foreach (var executiveid in executiveids)
                    {
                        DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordListDC salesPerformanceDashbordListDC = new DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordListDC();
                        salesPerformanceDashbordListDC.ExecutiveId = executiveid;
                        salesPerformanceDashbordListDC.ExecutiveName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.DisplayName).FirstOrDefault();
                        salesPerformanceDashbordListDC.CityName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.city).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseId = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.WarehouseId).FirstOrDefault();
                        salesPerformanceDashbordListDC.StoreName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.StoreName).FirstOrDefault();
                        salesPerformanceDashbordListDC.ClusterName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.ClusterName).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.WarehouseName).FirstOrDefault();

                        var PlannedRoutes = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).ToList();
                        var PlannedRoutess = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.PlannedRoutes != null).Select(x => new { x.AssignmentDate, x.PlannedRoutes }).ToList();

                        var orderdetail = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.executiveid == executiveid).ToList();

                        if (PlannedRoutes != null && PlannedRoutes.Any())
                        {

                            var ActualData = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).ToList();
                            var ActualDatass = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.ActualRoutes != null).Select(x => new { x.AssignmentDate, x.ActualRoutes }).ToList();
                            foreach (var AD in ActualDatass)
                            {
                                var res = AD.ActualRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ActualRouteCustomerDC
                                {
                                    CreatedDate = AD.AssignmentDate,
                                    ExecutiveId = executiveid,
                                    CustomerId = x.CustomerId,
                                    IsVisited = x.IsVisited,
                                    IsBeat = x.IsBeat ?? false
                                });
                                ActualRouteCustomers.AddRange(res);
                            }


                            var ActualTimeSpendCustomer = ActualData != null && ActualData.Any() ?
                                     ActualData.Where(x => x.CustomerCheckInOutHistories != null && x.CustomerCheckInOutHistories.Any(y => y.CheckOut.HasValue)).GroupBy(x => x.CustomerId).Select(x =>
                                     new
                                     {
                                         Customer = x.Key,
                                         totaltime = x.SelectMany(y => y.CustomerCheckInOutHistories)
                                         .Where(y => y.CheckIn.HasValue && y.CheckOut.HasValue)
                                         .Sum(y => y.CheckOut.Value.Subtract(y.CheckIn.Value).TotalMilliseconds)
                                     }) : null;
                            double ActualTimeSpend = ActualTimeSpendCustomer != null && ActualTimeSpendCustomer.Any() ? Math.Round(Convert.ToDouble((ActualTimeSpendCustomer.Sum(y => y.totaltime) / 3600000) / ActualTimeSpendCustomer.Count()), 2) : 0;
                            salesPerformanceDashbordListDC.ActualTimeSpend = ActualTimeSpend;

                            var AllCustids = new List<int>();
                            var BeatCustids = new List<int>();
                            var ExtraCustids = new List<int>();
                            //List<int> PRCustIds = new List<int>();

                            double BeatSales = 0;
                            double ExtraSales = 0;
                            salesPerformanceDashbordListDC.ProductiveCall = 0;

                            foreach (var dt in dates)
                            {
                                if (PlannedRoutess.All(y => y.AssignmentDate.Date != dt.Date))
                                {
                                    var pr = new
                                    {
                                        AssignmentDate = dt.Date,
                                        PlannedRoutes = new List<PlannedRoute>()
                                    };
                                    PlannedRoutess.Add(pr);
                                }
                            }

                            foreach (var pd in PlannedRoutess)
                            {
                                var planCustId = pd.PlannedRoutes.Where(x => x.ExecutiveId == executiveid).Select(x => x.CustomerId).Distinct().ToList();
                                var extraCust = ActualRouteCustomers.Where(x => !planCustId.Contains(x.CustomerId) && x.ExecutiveId == executiveid && x.IsBeat == false).Select(x => x.CustomerId).Distinct().ToList();
                                var beatsales = orderdetail.Where(x => planCustId.Contains(x.custid) && x.createddate.Date == pd.AssignmentDate.Date).Sum(x => x.ordqty * x.price);
                                if (beatsales > 0) BeatSales = BeatSales + beatsales;
                                var extrasales = orderdetail.Where(x => !planCustId.Contains(x.custid) && x.createddate.Date == pd.AssignmentDate.Date).Sum(x => x.ordqty * x.price);
                                if (extrasales > 0) ExtraSales = ExtraSales + extrasales;
                                //PRCustIds = planCustId.ToList();
                                //if (extraCust.Count > 0 && extraCust.Any()) PRCustIds.AddRange(extraCust);
                                salesPerformanceDashbordListDC.ProductiveCall += OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.createddate.Date == pd.AssignmentDate.Date && x.executiveid == executiveid).Select(x => x.custid).Distinct().Count();
                                var CustIds = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.createddate.Date == pd.AssignmentDate.Date && x.executiveid == executiveid).Select(x => x.custid).Distinct().ToList();
                                if (CustIds.Any()) AllCustids.AddRange(CustIds.Where(x => !AllCustids.Contains(x)).ToList());
                            }

                            salesPerformanceDashbordListDC.BeatSales = BeatSales;
                            salesPerformanceDashbordListDC.Sales = Math.Round(BeatSales + ExtraSales);
                            var SalesbeatPercent = salesPerformanceDashbordListDC.Sales > 0 ? (Math.Round(BeatSales) / salesPerformanceDashbordListDC.Sales) * 100 : 0;
                            salesPerformanceDashbordListDC.SalesColour = ColourCode.Where(x => SalesbeatPercent > 0 && x.SalesFrom <= SalesbeatPercent && x.SalesTo >= SalesbeatPercent).Select(x => x.Colour).FirstOrDefault();
                            salesPerformanceDashbordListDC.BeatVisitPercent = Math.Round((Convert.ToDouble(ActualData.Where(x => x.IsBeat == true).Select(x => x.CustomerId).Distinct().Count()) / PlannedRoutes.Select(x => x.CustomerId).Distinct().Count()) * 100, 2);

                            var BeatTCCount = ActualData.Where(x => x.IsBeat == true).Count();
                            salesPerformanceDashbordListDC.BeatTC = BeatTCCount;
                            salesPerformanceDashbordListDC.TC = ActualData.Count();
                            var TCColourPercent = salesPerformanceDashbordListDC.TC > 0 ? Math.Round((Convert.ToDouble(BeatTCCount) / salesPerformanceDashbordListDC.TC) * 100) : 0;
                            salesPerformanceDashbordListDC.TCColour = ColourCode.Where(x => TCColourPercent > 0 && x.TCFrom <= TCColourPercent && x.TCTo >= TCColourPercent).Select(x => x.Colour).FirstOrDefault();


                            var BeatPCCount = orderdetail.Where(x => BeatCustids.Contains(x.custid)).Select(x => x.custid).Distinct().Count();
                            var BeatPCPercent = salesPerformanceDashbordListDC.ProductiveCall > 0 ? Math.Round((Convert.ToDouble(BeatPCCount) / salesPerformanceDashbordListDC.ProductiveCall) * 100) : 0;
                            salesPerformanceDashbordListDC.PCColour = ColourCode.Where(x => BeatPCPercent > 0 && x.PCFrom <= BeatPCPercent && x.PCTo >= BeatPCPercent).Select(x => x.Colour).FirstOrDefault();
                            salesPerformanceDashbordListDC.BeatPC = BeatPCCount;

                            var orderdetailId = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.orderid).Count();
                            var TotalOrderId = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.orderid).Distinct().Count();
                            salesPerformanceDashbordListDC.AvgLineItem = salesPerformanceDashbordListDC.Sales > 0 ? Math.Round((Convert.ToDouble(orderdetailId) / TotalOrderId), 2) : 0;
                            salesPerformanceDashbordListDC.ActiveRetailer = AllCustids.Distinct().Count();
                            salesPerformanceDashbordListDC.Range = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.brandid).Distinct().Count();

                            var LineItemCount = orderdetail.GroupBy(x => x.orderid).Select(x => new { OrderId = x.Key, count = x.Count() });
                            salesPerformanceDashbordListDC.PerfactOrder = LineItemCount.Where(x => x.count >= PerfactLineItem).Count();

                            salesPerformanceDashbordListDC.Dispatch = Math.Round(orderdetail.Sum(x => x.dispatchqty * x.price));
                            if (orderdetail.Count > 0)
                            {
                                var StoreIds = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.storeid).Distinct().ToList();
                                salesPerformanceDashbordListDC.StoreName = string.Join(",", StoreData.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).ToList());
                                salesPerformanceDashbordListDC.ClusterName = string.Join(",", orderdetail.Select(x => x.clustername).Distinct().ToList());
                                salesPerformanceDashbordListDC.CityName = salesPerformanceDashbordListDC.CityName ?? orderdetail.Where(x => x.cityname != null).Select(x => x.cityname).FirstOrDefault();
                                salesPerformanceDashbordListDC.WarehouseName = salesPerformanceDashbordListDC.WarehouseName ?? orderdetail.Where(x => AllCustids.Contains(x.custid) && x.whname != null).Select(x => x.whname).FirstOrDefault();
                            }
                        }

                        else if (orderdetail.Count > 0)
                        {
                            salesPerformanceDashbordListDC.Sales = Math.Round(orderdetail.Sum(x => x.ordqty * x.price));
                            salesPerformanceDashbordListDC.ProductiveCall = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.executiveid == executiveid).Select(x => x.custid).Distinct().Count();
                            var StoreIds = orderdetail.Select(x => x.storeid).Distinct().ToList();
                            salesPerformanceDashbordListDC.StoreName = string.Join(",", StoreData.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).ToList());
                            salesPerformanceDashbordListDC.ClusterName = string.Join(",", orderdetail.Select(x => x.clustername).Distinct().ToList());
                            salesPerformanceDashbordListDC.CityName = salesPerformanceDashbordListDC.CityName ?? orderdetail.Where(x => x.cityname != null).Select(x => x.cityname).FirstOrDefault();
                            salesPerformanceDashbordListDC.WarehouseName = salesPerformanceDashbordListDC.WarehouseName ?? orderdetail.Where(x => x.whname != null).Select(x => x.whname).FirstOrDefault();

                        }
                        salesPerformanceDashbordListDCs.Add(salesPerformanceDashbordListDC);

                    }
                    if (obj.KeyWord != null && obj.KeyWord != "")
                    {
                        salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Where(x => x.ExecutiveName.Contains(obj.KeyWord)).ToList();
                        //salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Where(x => SqlMethods.Like(x.ExecutiveName, "%" + obj.KeyWord + "%")).ToList();
                    }
                    salesPerformanceDashbordExecDC.salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Skip(obj.Skip).Take(obj.Take).ToList();
                    salesPerformanceDashbordExecDC.TotalRecords = salesPerformanceDashbordListDCs.Count();
                    if (obj.WarehouseData)
                    {
                        salesPerformanceDashbordExecDC.WarehouseDataList = WarehouseDashboardDataAsync(obj.WarehouseIds, salesPerformanceDashbordListDCs, ColourCode);
                        //return new APIResponse { Status = true, Data = WarehouseData };
                    }
                    #endregion
                }
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = salesPerformanceDashbordExecDC };
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = ex.Message };
            }
        }

        #endregion
        public List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordWarehouseDC> WarehouseDashboardDataAsync(List<int> Warehouseids, List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordListDC> Datalist, List<DashBoardColourCode> ColourCode)
        {
            try
            {
                List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordWarehouseDC> salesPerformanceDataList = new List<DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordWarehouseDC>();
                foreach (var warehouseid in Warehouseids)
                {
                    DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordWarehouseDC salesPerformanceDashbordListDC = new DataContracts.External.MobileExecutiveDC.SalesPerformanceDashbordWarehouseDC();
                    var warehouseData = Datalist.Where(x => x.WarehouseId == warehouseid).ToList();
                    if (warehouseData != null && warehouseData.Count > 0)
                    {
                        salesPerformanceDashbordListDC.CityName = warehouseData.Where(x => x.CityName != null).Select(x => x.CityName).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseName = warehouseData[0].WarehouseName;
                        var beatSales = warehouseData.Sum(x => x.BeatSales);
                        salesPerformanceDashbordListDC.Sales = warehouseData.Sum(x => x.Sales);
                        var beatsalespercent = salesPerformanceDashbordListDC.Sales > 0 ? (Math.Round(beatSales) / salesPerformanceDashbordListDC.Sales) * 100 : 0;
                        salesPerformanceDashbordListDC.SalesColour = ColourCode.Where(x => beatsalespercent > 0 && x.SalesFrom <= beatsalespercent && x.SalesTo >= beatsalespercent).Select(x => x.Colour).FirstOrDefault();
                        salesPerformanceDashbordListDC.Dispatch = warehouseData.Sum(x => x.Dispatch);
                        var beatpercent = warehouseData.Sum(x => x.BeatVisitPercent);
                        var beatcount = warehouseData.Count(x => x.BeatVisitPercent > 0);
                        salesPerformanceDashbordListDC.BeatVisitPercent = beatcount > 0 ? Math.Round(beatpercent / beatcount, 2) : 0;

                        var BeatTC = warehouseData.Sum(x => x.BeatTC);
                        salesPerformanceDashbordListDC.TC = warehouseData.Sum(x => x.TC);
                        var BeatTcPercent = salesPerformanceDashbordListDC.TC > 0 ? (Convert.ToDouble(BeatTC) / Convert.ToDouble(salesPerformanceDashbordListDC.TC)) * 100 : 0;
                        salesPerformanceDashbordListDC.TCColour = ColourCode.Where(x => BeatTcPercent > 0 && x.TCFrom <= BeatTcPercent && x.TCTo >= BeatTcPercent).Select(x => x.Colour).FirstOrDefault();

                        var BeatPC = warehouseData.Sum(x => x.BeatPC);
                        salesPerformanceDashbordListDC.ProductiveCall = warehouseData.Sum(x => x.ProductiveCall);
                        var BeatPCPercent = salesPerformanceDashbordListDC.ProductiveCall > 0 ? (Convert.ToDouble(BeatPC) / salesPerformanceDashbordListDC.ProductiveCall) * 100 : 0;
                        salesPerformanceDashbordListDC.PCColour = ColourCode.Where(x => BeatPCPercent > 0 && x.PCFrom <= BeatPCPercent && x.PCTo >= BeatPCPercent).Select(x => x.Colour).FirstOrDefault();

                        salesPerformanceDashbordListDC.ActiveRetailer = warehouseData.Sum(x => x.ActiveRetailer);
                        salesPerformanceDashbordListDC.AvgLineItem = warehouseData.Sum(x => x.AvgLineItem) > 0 ? Math.Round(warehouseData.Sum(x => x.AvgLineItem) / warehouseData.Count(), 2) : 0;
                        salesPerformanceDashbordListDC.PerfactOrder = warehouseData.Sum(x => x.PerfactOrder);
                        salesPerformanceDashbordListDC.Range = warehouseData.Sum(x => x.Range) > 0 ? Math.Round(Convert.ToDouble(warehouseData.Sum(x => x.Range)) / warehouseData.Count(), 2) : 0;
                        salesPerformanceDashbordListDC.ActualTimeSpend = warehouseData.Sum(x => x.ActualTimeSpend) > 0 ? Math.Round(Convert.ToDouble(warehouseData.Sum(x => x.ActualTimeSpend)) / warehouseData.Count(x => x.ActualTimeSpend > 0), 2) : 0;

                        salesPerformanceDataList.Add(salesPerformanceDashbordListDC);
                    }
                }
                return salesPerformanceDataList;
            }
            catch
            {
                return null;
            }
        }

        #region SalesTargetDashboardReport API
        [HttpGet]
        [Route("SalesTargetDashboardReport")]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> SalesTargetDashboardReportAsync()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesTargetDashboardReportDC>("SalesTargetDashboardReport").ToList();
                    if (data.Any() && data.Count > 0)
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message }; ;
            }
        }

        [HttpGet]
        [Route("AttendenceCalculationJob")]
        [AllowAnonymous]
        public async Task<bool> AttendenceCalculationJob()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var list = (from e in context.ClusterStoreExecutives
                                join p in context.Peoples on e.ExecutiveId equals p.PeopleID
                                where e.IsActive == true && e.IsDeleted == false
                                select new
                                {
                                    p.PeopleID,
                                    p.WarehouseId
                                }).Distinct().ToList();
                    if (list != null && list.Any())
                    {


                        var today = DateTime.Now.Date;
                        foreach (var people in list)
                        {
                            ExecutiveAttendenceMongoHelper executiveAttendenceHelper = new ExecutiveAttendenceMongoHelper();

                            DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc configs = new DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc();
                            // AttendanceRuleConfigsLogDc RuleConfigs = new AttendanceRuleConfigsLogDc();
                            DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc ExecutiveDetails = new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc();
                            if (context.Database.Connection.State != ConnectionState.Open)
                                context.Database.Connection.Open();
                            var cmd = context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 100;
                            cmd.CommandText = "[dbo].[GetExecutiveDetailAndAttendanceConfigRule]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var ExecutiveIdParam = new SqlParameter("ExecutiveId", people.PeopleID);
                            var WarehouseIdParam = new SqlParameter("WarehouseId", people.WarehouseId);
                            cmd.Parameters.Add(ExecutiveIdParam);
                            cmd.Parameters.Add(WarehouseIdParam);
                            var reader = cmd.ExecuteReader();
                            ExecutiveDetails = ((IObjectContextAdapter)context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc>(reader).FirstOrDefault();

                            reader.NextResult();
                            if (reader.HasRows)
                            {
                                configs = ((IObjectContextAdapter)context)
                                                    .ObjectContext
                                                    .Translate<DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc>(reader).FirstOrDefault();
                            }
                            context.Database.Connection.Close();
                            if (ExecutiveDetails != null)
                            {
                                DataContracts.External.MobileExecutiveDC.AttendenceDetailDC obj = new DataContracts.External.MobileExecutiveDC.AttendenceDetailDC();

                                if (configs != null && configs.ChannelMasterId > 0)
                                {
                                    MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                                    var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == people.PeopleID).FirstOrDefault();
                                    var PlannedRoute = TodayBeat != null && TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
                                    var ActualRoute = TodayBeat != null && TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

                                    var totalcall = TodayBeat != null && TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;
                                    var TotalcallAnyCluster = TodayBeat != null && TodayBeat.ActualRoutes != null ? ActualRoute.Count(x => x.IsVisited) : 0;

                                    var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                                    var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                                    var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                                    var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                                    bool BeatShop = false;
                                    DataTable IdDt = new DataTable();
                                    if (configs.IsTADABeatShop)
                                    {
                                        BeatShop = true;

                                        IdDt.Columns.Add("IntValue");
                                        if (ActualRoute != null && ActualRoute.Count > 0)
                                        {
                                            foreach (var id in ActualRoute.Where(x => x.IsBeat == BeatShop).Select(x => x.CustomerId).Distinct())
                                            {
                                                var dr = IdDt.NewRow();
                                                dr["IntValue"] = id;
                                                IdDt.Rows.Add(dr);
                                            }
                                        }
                                        else
                                        {
                                            IdDt = null;
                                        }
                                    }
                                    else
                                    {
                                        IdDt = null;
                                    }
                                    DataContracts.External.MobileExecutiveDC.ProductiveCallDc ProductiveCall = new DataContracts.External.MobileExecutiveDC.ProductiveCallDc();
                                    using (var db = new AuthContext())
                                    {
                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();
                                        var cmd1 = db.Database.Connection.CreateCommand();
                                        cmd1.CommandTimeout = 100;
                                        cmd1.CommandText = "[dbo].[ExecutiveProductiveCall]";
                                        cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                                        var param4 = new SqlParameter("PersonId", people.PeopleID);
                                        var param5 = new SqlParameter("CustIdDs", IdDt);
                                        var param8 = new SqlParameter("WarehouseId", people.WarehouseId);
                                        var param9 = new SqlParameter("IsBeat", BeatShop);
                                        cmd1.Parameters.Add(param4);
                                        cmd1.Parameters.Add(param5);
                                        cmd1.Parameters.Add(param8);
                                        cmd1.Parameters.Add(param9);

                                        var readerData = cmd1.ExecuteReader();
                                        ProductiveCall = ((IObjectContextAdapter)db).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ProductiveCallDc>(readerData).FirstOrDefault();
                                        db.Database.Connection.Close();
                                    }
                                    // any shop first checkin
                                    if (FirstCheckIn != null)
                                    {
                                        if (!configs.IsCheckinBeatShop)
                                        {
                                            if (ExecutiveDetails.FirstCheckIn == null)
                                            {
                                                ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
                                            }
                                            if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                            {
                                                //present
                                                ExecutiveDetails.IsPresent = true;
                                                ExecutiveDetails.IsLate = false;
                                            }
                                            else
                                            {
                                                ExecutiveDetails.IsPresent = true;
                                                ExecutiveDetails.IsLate = true;
                                            }
                                        }
                                        if (BeatFirstCheckIn != null)
                                        {
                                            if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
                                            {
                                                if (ExecutiveDetails.FirstCheckIn == null)
                                                {
                                                    ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
                                                }
                                                if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                                {
                                                    //present
                                                    ExecutiveDetails.IsPresent = true;
                                                    ExecutiveDetails.IsLate = false;
                                                }
                                                else
                                                {
                                                    ExecutiveDetails.IsPresent = true;
                                                    ExecutiveDetails.IsLate = true;
                                                }
                                            }
                                        }

                                        //check out
                                        if (!configs.IsCheckOutBeatShop) //any shop check out
                                        {
                                            ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
                                        }
                                        else // beat shop check out
                                        {
                                            ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
                                        }
                                    }

                                    int TC = 0;
                                    // status - full day half day
                                    if (PlannedRoute != null && PlannedRoute.Count > 0)
                                    {
                                        if (configs.IsFullDayBeatShop)
                                        {
                                            // beat shop visit count check
                                            if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            else if (!configs.IsMinimumVisit)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            TC = totalcall;
                                        }
                                    }
                                    // Any shop visit count check
                                    if (ActualRoute != null && ActualRoute.Count > 0)
                                    {
                                        if (!configs.IsFullDayBeatShop)
                                        {
                                            if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                            {
                                                //full day
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            else if (!configs.IsMinimumVisit)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            TC = TotalcallAnyCluster;
                                        }
                                    }
                                    //int PC = 0;
                                    // TADA approve
                                    if (!configs.IsTADARequired && ExecutiveDetails.IsPresent)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                    }
                                    if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.ProductiveCall >= configs.TADACalls)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                        //PC = ProductiveCall;
                                    }
                                    if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.ProductiveCall >= configs.TADACalls)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                        //PC = ProductiveCall;
                                    }

                                    obj.ExecutiveId = people.PeopleID;
                                    obj.IsPresent = ExecutiveDetails.IsPresent;
                                    obj.IsLate = ExecutiveDetails.IsLate;
                                    obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
                                    obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
                                    obj.Status = ExecutiveDetails.Status;
                                    obj.TADA = ExecutiveDetails.TADA;
                                    obj.Description = configs.Description;

                                    var executive = context.ExecutiveAttendances.Where(x => x.Id == ExecutiveDetails.Id).FirstOrDefault();
                                    if (executive != null)
                                    {
                                        executive.CityId = ExecutiveDetails.CityId;
                                        executive.FirstCheckIn = ExecutiveDetails.FirstCheckIn;
                                        executive.IsLate = ExecutiveDetails.IsLate;
                                        executive.IsPresent = ExecutiveDetails.IsPresent;
                                        executive.LastCheckOut = LastCheckOut != null ? LastCheckOut.CheckOut : null;
                                        executive.PC = ProductiveCall.ProductiveCall;
                                        executive.Status = ExecutiveDetails.Status;
                                        executive.TADA = ExecutiveDetails.TADA;
                                        executive.TC = TC;
                                        executive.CreatedDate = ExecutiveDetails.CreatedDate;
                                        executive.ModifiedDate = DateTime.Now;

                                        executive.ConfigCheckInTime = configs.CheckInTime;
                                        executive.ConfigDayMinVisits = configs.DayMinVisits;
                                        executive.ConfigIsCheckinBeatShop = configs.IsCheckinBeatShop;
                                        executive.ConfigIsCheckOutBeatShop = configs.IsCheckOutBeatShop;
                                        executive.ConfigIsTADABeatShop = configs.IsTADABeatShop;
                                        executive.ConfigTADACalls = configs.TADACalls;
                                        executive.ConfigIsFullDayBeatShop = configs.IsFullDayBeatShop;
                                        executive.ConfigIsMinimumVisit = configs.IsMinimumVisit;
                                        executive.ConfigIsTADARequired = configs.IsTADARequired;
                                        if (executive.ConfigId == 0)
                                        {
                                            executive.ConfigId = configs.ConfigId;
                                        }

                                        context.Entry(executive).State = EntityState.Modified;
                                        context.Commit();
                                    }
                                }
                            }
                        }
                        context.Database.Connection.Close();
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }


        //[HttpGet]
        //[Route("WarehouseUpdateTemp")]
        //[AllowAnonymous]
        //public async Task<bool> WarehouseUpdateTemp()
        //{
        //    bool result = false;
        //    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
        //    {
        //        using (AuthContext context = new AuthContext())
        //        {
        //            var peoples = context.Database.SqlQuery<int>("select PeopleId from PeopleWarehouseTransferHis").ToList();
        //            var today = DateTime.Now.Date;
        //            foreach (var m in peoples)
        //            {
        //                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == m).FirstOrDefault();
        //                {
        //                    if (executiveBeats != null && executiveBeats.PlannedRoutes != null)
        //                    {
        //                        foreach (var item in executiveBeats.PlannedRoutes)
        //                        {
        //                            item.WarehouseId = 7;
        //                        }
        //                        result = mongoDbHelper.Replace(executiveBeats.Id, executiveBeats);
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    return result;
        //}
        #endregion

        [HttpGet]
        [Route("IsBeatAddTemp")]
        [AllowAnonymous]
        public async Task<bool> IsBeatAddTemp(int peopleId)
        {
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            {
                var today = DateTime.Now.Date;
                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate == today).ToList();
                foreach (var data in executiveBeats)
                {
                    if (data != null && data.ActualRoutes != null)
                    {
                        foreach (var item in data.ActualRoutes)
                        {
                            item.IsBeat = item.IsBeat != null ? item.IsBeat : false;
                        }
                        result = mongoDbHelper.Replace(data.Id, data);
                    }
                }
            }
            return result;
        }

        [HttpGet]
        [Route("ExecutiveTCUpdate")]
        public bool ExecutiveTCUpdate(DateTime today, int ExecutiveId)
        {
            using (AuthContext context = new AuthContext())
            {
                MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var executiveBeats = MongoDbHelper.Select(x => x.AssignmentDate == today).ToList();
                foreach (var route in executiveBeats)
                {
                    var totalcall = route != null && route.PlannedRoutes != null ? route.PlannedRoutes.Count(x => x.IsVisited) : 0;
                    var TotalcallAnyCluster = route != null && route.ActualRoutes != null ? route.ActualRoutes.Count(x => x.IsVisited) : 0;

                    var executive = context.ExecutiveAttendances.Where(x => x.ExecutiveId == route.PeopleId && EntityFunctions.TruncateTime(x.CreatedDate) == today).FirstOrDefault();
                    if (executive != null)
                    {
                        executive.TC = TotalcallAnyCluster;
                        context.Entry(executive).State = EntityState.Modified;
                    }

                }
                context.Commit();
                return true;
            }
        }

        [HttpPost]
        [Route("ExecutiveAttendanceReportDateWise")]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> ExecutiveAttendanceReportDateWiseAsync(DateTime date, List<int> Warehousids)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var Date = new SqlParameter("@date", date);

                    var sList = new DataTable();
                    sList.Columns.Add("intValue");
                    foreach (var item in Warehousids)
                    {
                        var dr = sList.NewRow();
                        dr["intValue"] = item;
                        sList.Rows.Add(dr);
                    }
                    var WarehouseIds = new SqlParameter("warehouseids", sList);
                    WarehouseIds.SqlDbType = SqlDbType.Structured;
                    WarehouseIds.TypeName = "dbo.intValues";

                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDateWiseDC>("ExecutiveAttendanceReportDateWise @date,@warehouseids", Date, WarehouseIds).ToList();

                    if (data.Any() && data.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(data);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/ExecutiveAttendanceReport");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "ExecutiveAttendance_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "ExecutiveAttendance_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/ExecutiveAttendanceReport/" + fileName);
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = FileUrl };
                    }
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("CustomerChannelTypeList")]
        [HttpGet]
        public List<ChannelMaster> CustomerChannelTypeList()
        {

            using (var db = new AuthContext())
            {
                List<ChannelMaster> list = new List<ChannelMaster>();
                list = db.ChannelMasters.Where(x => x.Active == true && x.Deleted == false).Distinct().ToList();
                return list;
            }
        }

        [Route("GetCityList")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<DataContracts.External.MobileExecutiveDC.GetCityListDc>> GetCityList()
        {
            using (AuthContext context = new AuthContext())
            {
                var res = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.GetCityListDc>("GetCityListCatConfig").ToList();
                return res;
            }
        }

        [Route("ExportSuccessStoreTarget")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.ExportSuccessStoreDC>> ExportSuccessStoreTargetAsync(DataContracts.External.MobileExecutiveDC.ExportSuccessStoreFilter exportSuccessStoreFilter)
        {
            List<DataContracts.External.MobileExecutiveDC.ExportSuccessStoreDC> exportSuccessStoreListDC = new List<DataContracts.External.MobileExecutiveDC.ExportSuccessStoreDC>();

            using (var db = new AuthContext())
            {
                string StoreName = db.StoreDB.Where(x => x.Id == exportSuccessStoreFilter.StoreId).Select(x => x.Name).FirstOrDefault();
                ItemMasterManager manager = new ItemMasterManager();
                var configs = await manager.GetSalesPersonKPISuccessStore(exportSuccessStoreFilter.WarehouseIds, exportSuccessStoreFilter.ClusterId, exportSuccessStoreFilter.StoreId, exportSuccessStoreFilter.Month, exportSuccessStoreFilter.Year);

                DateTime startDate = new DateTime(exportSuccessStoreFilter.Year, exportSuccessStoreFilter.Month, 1);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");

                //foreach (var item in configs.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type }))
                foreach (var item in configs.GroupBy(s => new { s.ExecutiveId, s.ExecutiveName }))
                {
                    DataContracts.External.MobileExecutiveDC.ExportSuccessStoreDC kpi = new DataContracts.External.MobileExecutiveDC.ExportSuccessStoreDC
                    {
                        Month = exportSuccessStoreFilter.Month,
                        Year = exportSuccessStoreFilter.Year,
                        //KpiName = item.f.Key.KpiName,
                        //DisplayName = string.IsNullOrEmpty(item.DisplayName) ? item.KpiName : item.DisplayName,
                        //Type = item.Type,
                        ExecutiveId = item.Key.ExecutiveId,
                        ExecutiveName = item.Key.ExecutiveName
                    };

                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal> elasticSqlHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.doubleVal>();
                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData> skcodeElasticHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticData>();

                    var clusterIds = string.Join(",", item.Select(s => s.ClusterId).Distinct().ToList());


                    var Targets = item.GroupBy(s => s.KPIId).Select(d => new { KPIID = d.Key, Target = d.FirstOrDefault().Target, IncentiveAmount = d.FirstOrDefault().IncentiveAmount });
                    double incentiveAmount = 0;

                    incentiveAmount = 0;

                    var date = DateTime.Now;
                    var isMonthComplete = false;
                    if (date.Day < 3)
                    {
                        isMonthComplete = true;
                        date = DateTime.Now.AddMonths(-1);
                    }
                    var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

                    var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                    string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();

                    foreach (var store in item.GroupBy(d => d.StoreId))
                    {
                        //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                        var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and storeid={store.Key} and executiveid ={item.Key.ExecutiveId} and IIF(isdigitalorder is null, false, isdigitalorder) = false group by skcode,storeid";
                        var skCodeDataList = await skcodeElasticHelper.GetListAsync(query);

                        var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                           && s.TargetOnStores.Count > 0
                                           && s.TargetOnStores.Any(d => d.StoreId == store.Key), collectionName: DocumentName).ToList();
                        List<DataContracts.External.MobileExecutiveDC.CustStoreTargets> targetOnStores = new List<DataContracts.External.MobileExecutiveDC.CustStoreTargets>();
                        foreach (var data in allTarget)
                        {
                            foreach (var storeTarget in data.TargetOnStores)
                            {
                                targetOnStores.Add(new DataContracts.External.MobileExecutiveDC.CustStoreTargets
                                {
                                    skcode = data.Skcode,
                                    StoreId = storeTarget.StoreId,
                                    Target = storeTarget.Target,
                                    TargetLineItem = storeTarget.TargetLineItem
                                });
                            }

                        }

                        //var targetOnStores = mongoHelper.GetWithProjection(s => s.TargetOnStores.Any(d => d.StoreId == store.Key),
                        //           s => s.TargetOnStores.Select(d => new CustStoreTargets
                        //           {
                        //               skcode = s.Skcode,
                        //               StoreId = d.StoreId,
                        //               Target = d.Target,
                        //               TargetLineItem = d.TargetLineItem
                        //           }).ToList(), DocumentName).SelectMany(d => d).ToList();

                        int Achievement = 0;

                        targetOnStores.ForEach(s =>
                        {
                            var skcodeData = skCodeDataList.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                s.Target <= a.dispatchamount &&
                                (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                            );

                            if (skcodeData != null)
                                Achievement++;

                        });



                        var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();

                        incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                        kpi.Achievement += Achievement;
                        kpi.Target += Target.Sum(d => d.Target);
                    }

                    kpi.AchievementPercent = Math.Round(100 * (kpi.Achievement / kpi.Target), 0);

                    var incentives = item.GroupBy(d => new { d.AchievePercent, d.IncentivePercent });
                    var incentivePercent = incentives.Where(s => s.Key.AchievePercent <= kpi.AchievementPercent).OrderByDescending(s => s.Key.AchievePercent)?.FirstOrDefault()?.Key?.IncentivePercent ?? 0;
                    kpi.Earning += incentivePercent == 0 ? 0 : Math.Round((incentiveAmount * incentivePercent) / 100, 0);
                    kpi.Store = !string.IsNullOrEmpty(StoreName) ? StoreName : string.Empty;
                    kpi.KpiName = "Success Store";
                    exportSuccessStoreListDC.Add(kpi);
                }
            }

            return exportSuccessStoreListDC;
        }

        [Route("GetCatalogConfigByCityId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.InsertCatalogConfigDc> GetCatalogConfigurationByCityIdAsync(long CityId)
        {
            using (AuthContext context = new AuthContext())
            {
                var CatConfigData = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsDeleted == false).ToList();
                var insertCatalogConfigDc = Mapper.Map(CatConfigData[0]).ToANew<DataContracts.External.MobileExecutiveDC.InsertCatalogConfigDc>();
                insertCatalogConfigDc.listingConfigurationDCs = Mapper.Map(CatConfigData).ToANew<List<DataContracts.External.MobileExecutiveDC.ListingConfigurationDC>>().OrderBy(x => x.Sequence).ToList();
                return insertCatalogConfigDc;
            }
        }

        [Route("DeleteCatalogConfigByCityId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> DeleteCatalogConfigByCityId(long CityId)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {

                            userid = int.Parse(claim.Value);
                        }
                    }
                    var catalogConfig = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsDeleted == false).ToList();
                    foreach (var catalog in catalogConfig)
                    {
                        catalog.IsActive = false;
                        catalog.IsDeleted = true;
                        catalog.ModifiedBy = userid;
                        catalog.ModifiedDate = DateTime.Now;
                        context.Entry(catalog).State = EntityState.Modified;
                    }
                    if (context.Commit() > 0)
                    {
                        res.Message = "City Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "City Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {

                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }

        [HttpPost]
        [Route("InsertCatalogConfiguration")]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> InsertCatalogConfiguration(DataContracts.External.MobileExecutiveDC.InsertCatalogConfigDc insertCatalogConfigDc)
        {
            try
            {
                if (1 == (insertCatalogConfigDc.Frequency + insertCatalogConfigDc.CustomerReach + insertCatalogConfigDc.Amount))
                {
                    using (AuthContext context = new AuthContext())
                    {
                        var identity = User.Identity as ClaimsIdentity;
                        int userid = 0;
                        foreach (Claim claim in identity.Claims)
                        {
                            if (claim.Type == "userid")
                            {
                                userid = int.Parse(claim.Value);
                            }
                        }
                        insertCatalogConfigDc.listingConfigurationDCs = insertCatalogConfigDc.listingConfigurationDCs.OrderBy(x => x.Sequence).ToList();
                        foreach (var x in insertCatalogConfigDc.listingConfigurationDCs)
                        {
                            var Checkdata = false;
                            CatelogConfig catelogConfig = new CatelogConfig();
                            if (x.Id > 0)
                            {
                                catelogConfig = context.CatelogConfigs.Where(y => y.Id == x.Id && y.CityId == insertCatalogConfigDc.CityId && y.IsDeleted == false).FirstOrDefault();
                                Checkdata = catelogConfig != null ? true : false;
                                catelogConfig = catelogConfig != null ? catelogConfig : new CatelogConfig();
                            }
                            catelogConfig.CityId = insertCatalogConfigDc.CityId;
                            catelogConfig.Frequency = insertCatalogConfigDc.Frequency;
                            catelogConfig.CustomerReach = insertCatalogConfigDc.CustomerReach;
                            catelogConfig.Amount = insertCatalogConfigDc.Amount;
                            catelogConfig.IsRepeat = insertCatalogConfigDc.IsRepeat;
                            catelogConfig.ConfigName = x.ConfigName;
                            catelogConfig.ItemCount = x.ItemCount;
                            catelogConfig.Status = x.Status;
                            catelogConfig.Sequence = x.Sequence;
                            catelogConfig.Sort = x.Sort;
                            catelogConfig.Unbilled = x.Unbilled;
                            catelogConfig.IsScoreCheck = x.IsScoreCheck;
                            catelogConfig.ScoreFrom = x.ScoreFrom;
                            catelogConfig.ScoreTo = x.ScoreTo;
                            catelogConfig.NewLaunch = x.NewLaunch;
                            catelogConfig.PromotionalItems = x.PromotionalItems;

                            if (x.Id > 0 && Checkdata)
                            {
                                catelogConfig.ModifiedBy = userid;
                                catelogConfig.ModifiedDate = DateTime.Now;
                                context.Entry(catelogConfig).State = EntityState.Modified;
                            }
                            else
                            {
                                catelogConfig.IsActive = true;
                                catelogConfig.IsDeleted = false;
                                catelogConfig.IsDisable = true;
                                catelogConfig.CreatedBy = userid;
                                catelogConfig.CreatedDate = DateTime.Now;
                                context.CatelogConfigs.Add(catelogConfig);
                            }
                            context.Commit();
                        }
                    }
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved" };
                }
                else
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Sum Of Frequency, CustomerReach and Amount Should be 1" };
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("CityStatusChange")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> ChengeCityStatus(long CityId, bool IsActive)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    var data = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsDeleted == false).ToList();
                    foreach (var res in data)
                    {
                        res.IsActive = IsActive;
                        res.ModifiedBy = userid;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                    }
                    if (context.Commit() > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false };
                    }
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetConfigCityList")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<DataContracts.External.MobileExecutiveDC.GetCityListDc>> GetConfigCityList()
        {
            using (AuthContext context = new AuthContext())
            {
                var res = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.GetCityListDc>("ConfigCityList").ToList();
                return res;
            }
        }

        [Route("AddCheckOutComment")]
        [HttpPost]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> AddCheckOutCommentAsync(List<DataContracts.External.MobileExecutiveDC.UpdateCheckOutDC> updateCheckOut)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    foreach (var res in updateCheckOut)
                    {
                        CheckOut checkOut = new CheckOut();
                        if (res.Id > 0)
                            checkOut = context.CheckOuts.Where(x => x.Id == res.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        checkOut.Comment = res.Comment;
                        checkOut.Sequence = res.Sequence;
                        checkOut.IsActive = true;
                        checkOut.IsDeleted = false;
                        if (res.Id > 0)
                        {
                            checkOut.ModifiedBy = userid;
                            checkOut.ModifiedDate = DateTime.Now;
                            context.Entry(checkOut).State = EntityState.Modified;
                        }
                        else
                        {
                            checkOut.CreatedBy = userid;
                            checkOut.CreatedDate = DateTime.Now;
                            context.CheckOuts.Add(checkOut);
                        }
                    }
                    if (context.Commit() > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Save" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("DeleteCheckOutComment")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> DeleteCheckoutCommentAsync(long Id)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    var res = context.CheckOuts.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    if (res != null)
                    {
                        res.IsActive = false;
                        res.IsDeleted = true;
                        res.ModifiedBy = userid;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                        context.Commit();
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Deleted Successfully" };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("DeleteProductCatalogItemById")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> DeleteProductCatalogItemById(long Id)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    ProductCatalogItem catalog = context.ProductCatalogItems.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    catalog.IsActive = false;
                    catalog.IsDeleted = true;
                    catalog.ModifiedBy = userid;
                    catalog.ModifiedDate = DateTime.Now;
                    context.Entry(catalog).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "Item Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }

        [Route("DeleteProductCatalogById")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> DeleteProductCatalogById(long Id)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    ProductCatalog catalog = context.ProductCatalogs.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    catalog.IsActive = false;
                    catalog.IsDeleted = true;
                    catalog.ModifiedBy = userid;
                    catalog.ModifiedDate = DateTime.Now;
                    context.Entry(catalog).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "Item Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }

        [Route("GetPromotionalSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<DataContracts.External.MobileExecutiveDC.PromotionalSKUItemListDC> GetSKUItemList(int warehouseid, string KeyValue)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@warehouseid", warehouseid);
                var param2 = new SqlParameter("@KeyValue", KeyValue);
                var SKUItemListData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.PromotionalSKUItemListDC>("exec SpPromotionalSKUItemList @warehouseid,@KeyValue", param1, param2).ToList();
                return SKUItemListData;
            }
        }

        [Route("GetProdCatItemById")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetProdCatItemByIdAsync(long Warehouseid, long SectionId)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var param1 = new SqlParameter("WarehouseId", Warehouseid);
                    var param2 = new SqlParameter("SectionId", SectionId);
                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.UpdateProductCatalogItemDc>("exec GetProductCatItemsBySection @WarehouseId,@SectionId", param1, param2).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetProductCatalogByWId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetProductCatalogAsync(long WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.ProductCatalogs.Where(x => x.WarehouseId == WarehouseId && x.IsActive == true && x.IsDeleted == false && !x.IsPromotional)
                      .Select(x =>
                      new DataContracts.External.MobileExecutiveDC.GetProductCatalogDC
                      {
                          Id = x.Id,
                          SectionName = x.SectionName,
                          SectionHindiName = x.SectionHindiName,
                          CustomList = x.CustomList,
                          Type = x.Type,
                          URL = x.URL,
                          WarehouseId = x.WarehouseId,
                          IsPromotional = x.IsPromotional,
                          Sequence = x.Sequence
                      }).OrderBy(x => x.Sequence).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = res };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("InsertProductCatalog")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse AddProductCatalog(List<DataContracts.External.MobileExecutiveDC.InsertProductCatalogDataDC> insertProductCatalogDataDCs)
        {

            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                if (insertProductCatalogDataDCs.Count > 0)
                {
                    foreach (var obj in insertProductCatalogDataDCs)
                    {
                        ProductCatalog catalog = new ProductCatalog();
                        if (obj.Id > 0)
                            catalog = context.ProductCatalogs.Where(x => x.Id == obj.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        catalog.SectionName = obj.SectionName;
                        catalog.SectionHindiName = obj.SectionHindiName;
                        catalog.Sequence = obj.Sequence;
                        catalog.Type = obj.Type;
                        catalog.WarehouseId = obj.WarehouseId;
                        catalog.IsPromotional = false;
                        catalog.URL = obj.URL;
                        catalog.CustomList = obj.CustomList;
                        catalog.IsActive = true;
                        catalog.IsDeleted = false;
                        if (obj.Id > 0)
                        {
                            catalog.ModifiedBy = userid;
                            catalog.ModifiedDate = DateTime.Now;
                            context.Entry(catalog).State = EntityState.Modified;
                        }
                        else
                        {
                            catalog.CreatedBy = userid;
                            catalog.CreatedDate = DateTime.Now;
                            context.ProductCatalogs.Add(catalog);
                            context.Commit();
                        }
                        if (obj.ItemNumber != null)
                        {
                            if (obj.Type == "CustomItem" && obj.ItemNumber.Count > 0)
                            {
                                foreach (var res1 in obj.ItemNumber)
                                {
                                    var data = context.ProductCatalogItems.Where(x => x.SectionId == catalog.Id && x.ItemNumber == res1.ItemNumber && x.WarehouseId == obj.WarehouseId).FirstOrDefault();
                                    if (data == null)
                                    {
                                        ProductCatalogItem catalogItem = new ProductCatalogItem();
                                        catalogItem.WarehouseId = (int)obj.WarehouseId;
                                        catalogItem.ItemNumber = res1.ItemNumber;
                                        catalogItem.StoreId = res1.StoreId;
                                        catalogItem.Sequence = res1.Sequence;
                                        catalogItem.SectionId = catalog.Id;
                                        catalogItem.IsPromotional = false;
                                        catalogItem.IsActive = true;
                                        catalogItem.IsDeleted = false;
                                        catalogItem.CreatedBy = userid;
                                        catalogItem.CreatedDate = DateTime.Now;
                                        context.ProductCatalogItems.Add(catalogItem);
                                    }
                                    else
                                    {
                                        data.Sequence = res1.Sequence;
                                        data.IsActive = true;
                                        data.IsDeleted = false;
                                        data.ModifiedBy = userid;
                                        data.ModifiedDate = DateTime.Now;
                                        context.Entry(data).State = EntityState.Modified;
                                    }
                                }
                            }
                        }
                    }

                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Saved";
                        res.Status = true;
                    }
                }
                else
                {
                    res.Message = "Object Null";
                    res.Status = false;
                }
            }
            return res;
        }

        [Route("GetBeatEditConfig")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetBeatEditConfigAsync()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = (from b in context.BeatEditConfigs
                               join s in context.StoreDB
                               on b.StoreId equals s.Id
                               where s.IsActive == true && s.IsDeleted == false
                               && b.IsActive == true && b.IsDeleted == false
                               select new DataContracts.External.MobileExecutiveDC.BeatEditDC
                               {
                                   BeatEditId = b.Id,
                                   StoreId = b.StoreId,
                                   StoreName = s.Name,
                                   IsAnytime = b.IsAnytime,
                                   FromDate = b.FromDate,
                                   ToDate = b.ToDate
                               }).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = res };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("BeatEditConfig")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse BeatEditConfigAsync(List<DataContracts.External.MobileExecutiveDC.BeatEditDC> beatEditDCs)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    foreach (var beat in beatEditDCs)
                    {
                        var res = context.BeatEditConfigs.FirstOrDefault(x => x.Id == beat.BeatEditId && x.StoreId == beat.StoreId && x.IsActive == true && x.IsDeleted == false);
                        if (res != null)
                        {
                            res.IsAnytime = beat.IsAnytime;
                            res.FromDate = beat.FromDate;
                            res.ToDate = beat.ToDate;
                            res.ModifiedBy = userid;
                            res.ModifiedDate = DateTime.Now;
                            context.Entry(res).State = EntityState.Modified;
                        }
                    }
                    if (context.Commit() > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved SuccessFully" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Save" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetAttendanceConfigListByStoreId")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetAttendanceConfigListByStoreIdAsync(int ChannelMasterId)
        {
            try
            {
                List<DataContracts.External.MobileExecutiveDC.AttendanceConfigCityDC> AttendanceConfigdata = new List<DataContracts.External.MobileExecutiveDC.AttendanceConfigCityDC>();
                using (AuthContext context = new AuthContext())
                {
                    AttendanceConfigdata = (from a in context.AttendanceRuleConfigs
                                            join c in context.Cities on a.IsDeleted equals false
                                            where c.active == true && c.Deleted == false
                                            && a.ChannelMasterId == ChannelMasterId && a.CityId == c.Cityid
                                            select new DataContracts.External.MobileExecutiveDC.AttendanceConfigCityDC
                                            {
                                                AttendaceConfigId = a.Id,
                                                CityId = a.CityId,
                                                CityName = c.CityName,
                                                CreatedDate = a.CreatedDate,
                                                IsActive = a.IsActive
                                            }).ToList();
                    var Globaldata = context.AttendanceRuleConfigs.Where(x => x.ChannelMasterId == ChannelMasterId && x.CityId == 0 && x.IsActive == true && x.IsDeleted == false)
                                .Select(x => new DataContracts.External.MobileExecutiveDC.AttendanceConfigCityDC { AttendaceConfigId = x.Id, CityId = x.CityId, CityName = "Global", CreatedDate = x.CreatedDate, IsActive = x.IsActive }).FirstOrDefault();
                    if (Globaldata != null) AttendanceConfigdata.Insert(0, Globaldata);
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = AttendanceConfigdata };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ActiveInactiveCityAttendance")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse ActiveInactiveCityAttendanceAsync(long AttendaceConfigId, bool IsActive)
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (AuthContext context = new AuthContext())
                {
                    var data = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    if (data != null)
                    {
                        data.IsActive = IsActive;
                        data.ModifiedBy = userid;
                        data.ModifiedDate = DateTime.Now;
                        context.Entry(data).State = EntityState.Modified;
                        context.Commit();
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Updated Successfully" };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Updated" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("DeleteAttendanceConfigById")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse DeleteAttendanceConfigById(long AttendaceConfigId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    if (res != null)
                    {
                        res.IsActive = false;
                        res.IsDeleted = true;
                        res.ModifiedBy = 1;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                        context.Commit();
                    }
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Deleted Successfully" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ItemClassificationIncentiveReport")]
        [HttpPost]
        public List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc> ItemClassificationInsentiveReport(DataContracts.External.MobileExecutiveDC.ReportFilterDc obj)
        {
            List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc> list = new List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc>();
            using (var Context = new AuthContext())
            {
                DataTable wid = new DataTable();
                wid.Columns.Add("IntValue");

                if (obj.warehouseids != null && obj.warehouseids.Count > 0)
                {
                    foreach (var id in obj.warehouseids)
                    {
                        var dr = wid.NewRow();
                        dr["IntValue"] = id;
                        wid.Rows.Add(dr);
                    }
                }

                DataTable sid = new DataTable();
                sid.Columns.Add("IntValue");

                if (obj.storeids != null && obj.storeids.Count > 0)
                {
                    foreach (var id in obj.storeids)
                    {
                        var dr = sid.NewRow();
                        dr["IntValue"] = id;
                        sid.Rows.Add(dr);
                    }
                }
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 900;
                cmd.CommandText = "[dbo].[GetItemClassificationIncentiveReport]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var WarehouseId = new SqlParameter("WarehouseId", wid);
                var StoreId = new SqlParameter("StoreId", sid);
                var month = new SqlParameter("month", obj.Month);
                var year = new SqlParameter("year", obj.Year);

                cmd.Parameters.Add(WarehouseId);
                cmd.Parameters.Add(StoreId);
                cmd.Parameters.Add(month);
                cmd.Parameters.Add(year);

                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc>(reader).ToList();
            }
            return list;
        }

        [Route("GetItemClassificationIncentiveAllExport")]
        [HttpPost]
        public List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc> GetItemClassificationIncentiveAllExport(DataContracts.External.MobileExecutiveDC.ReportFilterDc obj)
        {
            List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc> list = new List<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc>();
            using (var Context = new AuthContext())
            {

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();
                //var sList = new DataTable();
                //sList.Columns.Add("intValue");
                //foreach (var item in obj.warehouseids)
                //{
                //    var dr = sList.NewRow();
                //    dr["intValue"] = item;
                //    sList.Rows.Add(dr);
                //}
                //var WarehouseIds = new SqlParameter("WarehousIds", sList);
                //WarehouseIds.SqlDbType = SqlDbType.Structured;
                //WarehouseIds.TypeName = "dbo.intValues";

                //var sListt = new DataTable();
                //sListt.Columns.Add("intValue");
                //foreach (var item in obj.storeids)
                //{
                //    var dr = sListt.NewRow();
                //    dr["intValue"] = item;
                //    sListt.Rows.Add(dr);
                //}
                //var SID = new SqlParameter("StoreId", sListt);
                //SID.SqlDbType = SqlDbType.Structured;
                //SID.TypeName = "dbo.intValues";

                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 900;
                cmd.CommandText = "[dbo].[GetItemClassificationIncentiveAllExport]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var month = new SqlParameter("month", obj.Month);
                var year = new SqlParameter("year", obj.Year);
                cmd.Parameters.Add(month);
                cmd.Parameters.Add(year);

                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ItemClassificationReportDc>(reader).ToList();
            }
            return list;
        }

        [Route("GetTargetData")]
        [HttpGet]
        public List<DataContracts.External.MobileExecutiveDC.SalesKpiDataDC> GetTargetData(int warehouseid, int storeid, DateTime? month, int skip, int take)
        {
            List<DataContracts.External.MobileExecutiveDC.SalesKpiDataDC> SalesKpiData = new List<DataContracts.External.MobileExecutiveDC.SalesKpiDataDC>();
            // List<TargetDataDc> tdData = new List<TargetDataDc>();
            int pMonth = month != null && month.HasValue ? Convert.ToDateTime(month).Month : 0;
            using (var myContext = new AuthContext())
            {
                var param1 = new SqlParameter("@warehouseid", warehouseid);
                var param2 = new SqlParameter("@storeid", storeid);
                var param3 = new SqlParameter("@month", pMonth);
                var param4 = new SqlParameter("@skip", skip);
                var param5 = new SqlParameter("@take", take);

                SalesKpiData = myContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesKpiDataDC>("EXEC GetSalesKpiData @warehouseid,@storeid,@month,@skip,@take", param1, param2, param3, param4, param5).ToList();
            }
            return SalesKpiData;
        }

        [Route("DownloadTargetFile")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.DownloadTargetDataDC>> DownloadTargetFileAsync(DataContracts.External.MobileExecutiveDC.uploadtargetDTOdc obj)
        {
            List<DataContracts.External.MobileExecutiveDC.DownloadTargetDC> DownloadTargetList = new List<DataContracts.External.MobileExecutiveDC.DownloadTargetDC>();
            List<DataContracts.External.MobileExecutiveDC.DownloadTargetDataDC> downloadTargetDataList = new List<DataContracts.External.MobileExecutiveDC.DownloadTargetDataDC>();
            ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElascticTargetMTD> elasticSqlMTDHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElascticTargetMTD>();
            //ElasticSqlHelper<ElasticTargetMAC> elasticSqlMACHelper = new ElasticSqlHelper<ElasticTargetMAC>();
            ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticSuccssStoreData> elasticSqlSuccssStoreHelper = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticSuccssStoreData>();

            using (var myContext = new AuthContext())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                DataTable DT = new DataTable();
                using (var connection = new SqlConnection(connectionString))
                {
                    if (myContext.Database.Connection.State != ConnectionState.Open)
                        myContext.Database.Connection.Open();

                    var paramMonth = new SqlParameter("@month", obj.StartDate.Month);
                    var paramYear = new SqlParameter("@year", obj.StartDate.Year);


                    var cmd = myContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[DownloadSalesKpiFile]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(paramMonth);
                    cmd.Parameters.Add(paramYear);


                    var reader = cmd.ExecuteReader();
                    DownloadTargetList = ((IObjectContextAdapter)myContext).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DownloadTargetDC>(reader).ToList();

                }
            }
            if (DownloadTargetList != null && DownloadTargetList.Any())
            {

                var ExecutiveIds = DownloadTargetList.Select(x => x.ExecutiveId).Distinct().ToList();
                var StoreIds = DownloadTargetList.Select(x => x.StoreId).Distinct().ToList();

                DateTime startDate = new DateTime(obj.StartDate.Year, obj.StartDate.Month, 1);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = startDate.Date.AddMonths(1).AddDays(1).ToString("yyyy-MM-dd");

                var achievedValMTD = (await elasticSqlMTDHelper.GetListAsync($"select count(distinct custid) custCount, sum(dispatchqty*price) dispatchamt,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  group by executiveid,storeid,clusterid")).ToList();
                //var achievedValMAC = (await elasticSqlMACHelper.GetListAsync($"select count(distinct custid) custCount,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  group by executiveid,storeid,clusterid")).ToList();

                achievedValMTD = achievedValMTD.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();
                //achievedValMAC = achievedValMAC.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();


                //success store
                var date = DateTime.Now;
                var isMonthComplete = false;
                if (date.Day < 6)
                {
                    isMonthComplete = true;
                    date = DateTime.Now.AddMonths(-1);
                }
                var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);
                var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();

                var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                            && s.TargetOnStores.Count > 0
                                            && s.TargetOnStores.Any(d => d.StoreId != -1), collectionName: DocumentName).ToList();
                List<DataContracts.External.MobileExecutiveDC.CustStoreTargets> mongotargetOnStores = new List<DataContracts.External.MobileExecutiveDC.CustStoreTargets>();
                foreach (var item in allTarget)
                {
                    foreach (var storeTarget in item.TargetOnStores)
                    {
                        mongotargetOnStores.Add(new DataContracts.External.MobileExecutiveDC.CustStoreTargets
                        {
                            skcode = item.Skcode,
                            StoreId = storeTarget.StoreId,
                            Target = storeTarget.Target,
                            TargetLineItem = storeTarget.TargetLineItem
                        });
                    }

                }

                //mongoHelper.GetWithProjection(s => s.TargetOnStores!=null 
                //                        && s.TargetOnStores.Count>0 
                //                        && s.TargetOnStores.Any(d => d.StoreId != -1),
                //                       s => s.TargetOnStores.Select(d => new CustStoreTargets
                //                       {
                //                           skcode = s.Skcode,
                //                           StoreId = d.StoreId,
                //                           Target = d.Target,
                //                           TargetLineItem = d.TargetLineItem
                //                       }).ToList(), DocumentName).SelectMany(d => d).ToList();


                var querySuccessStore = $"select skcode, storeid,executiveid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') group by skcode,storeid,executiveid";
                var skCodeDataListSuccessStore = await elasticSqlSuccssStoreHelper.GetListAsync(querySuccessStore);
                skCodeDataListSuccessStore = skCodeDataListSuccessStore.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();


                ItemMasterManager manager = new ItemMasterManager();
                var configs = await manager.GetSalesPersonKPIConfigsForAchievement(obj.StartDate.Month, obj.StartDate.Year);
                foreach (var target in DownloadTargetList)
                {
                    target.Achievement = await GetSalesPersonKPIAchievment(target.StoreId, target.ExecutiveId, target.ClusterId, target.WarehouseId, target.SalesKpi, obj.StartDate.Month, obj.StartDate.Year, achievedValMTD, skCodeDataListSuccessStore.Where(d => d.executiveid == target.ExecutiveId && d.storeid == target.StoreId).ToList(), configs.Where(x => x.ExecutiveId == target.ExecutiveId && x.StoreId == target.StoreId && x.ClusterId == target.ClusterId && x.KpiName == target.SalesKpi).ToList(), mongotargetOnStores);

                }
                downloadTargetDataList = Mapper.Map(DownloadTargetList).ToANew<List<DataContracts.External.MobileExecutiveDC.DownloadTargetDataDC>>();
            }
            return downloadTargetDataList;
        }

        public async Task<double?> GetSalesPersonKPIAchievment(long storeId, int peopleId, int clusterId, int warehouseId, string salesKpiName, int month, int year, List<DataContracts.External.MobileExecutiveDC.ElascticTargetMTD> elasticTargetMtd, List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiElasticSuccssStoreData> elacticTargetSuccess, List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiAndIncentiveAchivement> configs, List<DataContracts.External.MobileExecutiveDC.CustStoreTargets> mongotargetOnStores)
        {
            List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiAchivementResponse> salesPersonKpi = new List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiAchivementResponse>();

            double achievedVal = 0;

            if (configs != null && configs.Any())
            {
                foreach (var item in configs.Where(x => x.ExecutiveId == peopleId && x.KpiName == salesKpiName && x.ClusterId == clusterId).GroupBy(s => new { s.KpiName, s.DisplayName, s.Type })) //configs.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type })
                {
                    DataContracts.External.MobileExecutiveDC.SalesPersonKpiAchivementResponse kpi = new DataContracts.External.MobileExecutiveDC.SalesPersonKpiAchivementResponse
                    {
                        ExecutiveId = item.FirstOrDefault().ExecutiveId,
                        Month = month,
                        Year = year,
                        KpiName = item.Key.KpiName,
                        DisplayName = string.IsNullOrEmpty(item.Key.DisplayName) ? item.Key.KpiName : item.Key.DisplayName,
                        Type = item.Key.Type
                    };

                    switch (item.Key.KpiName)
                    {
                        case "MTD":

                            achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.clusterid == clusterId && x.storeid == storeId).Select(y => new { targetamt = y.dispatchamt }).Sum(y => y.targetamt);


                            //foreach (var store in item.GroupBy(d => d.StoreId))
                            //{
                            //    var achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.clusterid == clusterId && x.storeid == store.Key).Select(y => new { targetamt = y.dispatchamt }).Sum(y => y.targetamt);

                            //    var Achievement = achievedVal;
                            //    kpi.Achievement += Math.Round(Achievement, 0);
                            //}
                            break;


                        case "MAC":

                            achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.storeid == storeId && x.clusterid == clusterId).Select(y => y.custCount).FirstOrDefault();
                            //foreach (var store in item.GroupBy(d => d.StoreId))
                            //{
                            //    var achievedValMAC = elascticTargetMAC.Where(x => x.executiveid == peopleId && x.storeid == store.Key).Select(y => y.custCount).FirstOrDefault();

                            //    var Achievement = achievedValMAC;
                            //    kpi.Achievement += Achievement;
                            //}
                            break;

                        case "Success Stores":

                            var targetonStore = mongotargetOnStores.Where(s => s.StoreId == storeId).Select(d => new DataContracts.External.MobileExecutiveDC.CustStoreTargets
                            {
                                skcode = d.skcode,
                                StoreId = d.StoreId,
                                Target = d.Target,
                                TargetLineItem = d.TargetLineItem
                            }).ToList();
                            int Achievement = 0;

                            Parallel.ForEach(targetonStore, s =>
                            //targetonStore.ForEach(s =>
                            {
                                var skcodeData = elacticTargetSuccess.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                    s.Target <= a.dispatchamount &&
                                    (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                                );

                                if (skcodeData != null)
                                    Achievement++;

                            });

                            achievedVal = Achievement;

                            break;

                    }
                    //salesPersonKpi.Add(kpi);

                }
            }
            //if (configs != null && configs.Any() && salesPersonKpi != null && salesPersonKpi.Any() && salesPersonKpi.Count > 0)
            //{
            //    return salesPersonKpi.FirstOrDefault().Achievement;
            //}

            return achievedVal;

            //return null;
        }
        [Route("UploadMonthTargetFile")]
        [HttpPost]
        public IHttpActionResult UploadMonthTargetFile(DateTime StartDate, DateTime EndDate, bool IsMonth)
        {
            //DateTime StartDate, DateTime EndDate, bool IsMonth            
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            DateTime now = StartDate;
            var startDate = new DateTime(now.Year, now.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);
            int Month = StartDate.Month;
            int Year = StartDate.Year;
            List<TargetDetails> target = new List<TargetDetails>();
            List<SalesPersonKPI> salesPersonKPI = new List<SalesPersonKPI>();
            if (HttpContext.Current.Request.Files.Count > 0)
            {
                using (AuthContext context = new AuthContext())
                {

                    //using (var dbContextTransaction = context.Database.BeginTransaction())
                    //{
                    var httpPostedFile = HttpContext.Current.Request.Files["file"];
                    if (httpPostedFile != null)
                    {
                        //Check uploaded file extenstion
                        var supportedTypes = new[] { "xls", "xlsx" };
                        string fileExtension = Path.GetExtension(httpPostedFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExtension))
                        {
                            res.Status = false;
                            res.Message = "Extension Is InValid - Only Upload EXCEL/xls/xlsx File.";
                            return Created(res.Message, res.Message);
                        }

                        string uploadPath = HttpContext.Current.Server.MapPath("~/Upload/MonKPI");
                        if (!Directory.Exists(uploadPath))
                        {
                            Directory.CreateDirectory(uploadPath);
                        }
                        string fileName = DateTime.Now.ToString("ddMMyyyyHHmmss") + "_" + httpPostedFile.FileName;
                        string filePath = Path.Combine(uploadPath, fileName);
                        httpPostedFile.SaveAs(filePath);

                        DataTable KpiDataTable = ExcelFileHelper.GetRequestsDataFromExcel(filePath);
                        //Validate column count
                        if (KpiDataTable.Columns.Count != 6)
                        {
                            res.Status = false;
                            res.Message = "Invalid data, Due to column count is mismatched.";
                            return Created(res.Message, res.Message);
                        }

                        var WarehouseList = context.Warehouses.Where(x => x.active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.WarehouseList { WarehouseId = y.WarehouseId, WarehouseName = y.WarehouseName }).Distinct().ToList();
                        var StoreList = context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.StoreList { StoreId = y.Id, StoreName = y.Name }).Distinct().ToList();
                        var PeopleList = context.Peoples.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.PeopleList { PeopleID = y.PeopleID, PeopleName = y.DisplayName }).Distinct().ToList();
                        var ClusterList = context.Clusters.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.ClusterList { ClusterId = y.ClusterId, ClusterName = y.ClusterName }).Distinct().ToList();
                        var SalesKpiList = context.SalesKPIs.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.SalesKpiList { KpiName = y.Name, KpiId = y.Id }).Distinct().ToList();
                        List<SalesPersonKPI> SalesPersonKpiList = SalesKpiManager.GetSalesPersonKPIDetails(Month, Year, WarehouseList, StoreList, PeopleList, ClusterList, SalesKpiList, KpiDataTable);

                        using (var dbContextTransaction = context.Database.BeginTransaction())
                        {
                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                /*
                                if (IsMonth == true)
                                {
                                    //---Delete Existing
                                    var CurrentMonthSalesPersonKpis = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive).ToList();
                                    if (CurrentMonthSalesPersonKpis != null && CurrentMonthSalesPersonKpis.Any())
                                    {
                                        foreach (var item in CurrentMonthSalesPersonKpis)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsDeleted = true);// && x.ModifiedDate=DateTime.Now );
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsActive = false);//&& x.IsDeleted = Convert.ToBoolean(false)
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.ModifiedDate = DateTime.Now);
                                    }
                                }
                                */
                                //--Remove existing Cluster and Stored data for same month
                                var existingClusterStore = SalesPersonKpiList.Select(x => new { x.ClusterId, x.StoreId }).Distinct().ToList();
                                foreach (var salesPersonItem in SalesPersonKpiList)
                                {
                                    var existingClusterStoreItems = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive && x.ClusterId == salesPersonItem.ClusterId && x.StoreId == salesPersonItem.StoreId).ToList();
                                    if (existingClusterStoreItems != null && existingClusterStoreItems.Any())
                                    {
                                        foreach (var item in existingClusterStoreItems)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                    }
                                }

                                context.SalesPersonKPIs.AddRange(SalesPersonKpiList);
                            }

                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                if (context.Commit() > 0)
                                {
                                    dbContextTransaction.Commit();
                                }
                                res.Message = "Upload Successfully";
                            }
                            else
                            {
                                res.Message = "something went wrong";
                            }
                        }

                    }
                    else
                    {
                        res.Message = "something went wrong";
                        res.Status = false;
                    }

                }
            }
            return Created(res.Message, res.Message);
        }

        [Route("GetSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<DataContracts.External.MobileExecutiveDC.SKUItemListDC> GetSKUItemList(int StoreId, int warehouseid, string KeyValue)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@StoreId", StoreId);
                var param2 = new SqlParameter("@warehouseid", warehouseid);
                var param3 = new SqlParameter("@KeyValue", KeyValue);
                var SKUItemListData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SKUItemListDC>("exec SpSKUItemList @StoreId,@warehouseid,@KeyValue", param1, param2, param3).ToList();
                return SKUItemListData;
            }
        }

        [Route("GetSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<DataContracts.External.MobileExecutiveDC.TopSKUsItemDc> TopSKUItemList(int warehouseid, int storeid) //7,9,12
        {
            List<DataContracts.External.MobileExecutiveDC.TopSKUsItemDc> List = new List<DataContracts.External.MobileExecutiveDC.TopSKUsItemDc>();
            using (var context = new AuthContext())
            {
                var res = context.TopSKUsItems.Where(x => x.IsActive == true && x.IsDeleted == false && x.WarehouseId == warehouseid && x.StoreId == storeid).ToList();

                List = Mapper.Map(res).ToANew<List<DataContracts.External.MobileExecutiveDC.TopSKUsItemDc>>();
                var wids = List.Select(x => x.WarehouseId).Distinct().ToList();
                var warehouselist = context.Warehouses.Where(x => wids.Contains(x.WarehouseId)).ToList();

                List.ForEach(y =>
                {
                    y.WarehouseName = warehouselist.Where(x => x.WarehouseId == y.WarehouseId).Select(x => x.WarehouseName).FirstOrDefault();
                });

                return List.OrderBy(x => x.SequenceNo).ToList();
            }
        }

        [Route("RemoveSKUItemList")]
        [HttpDelete]
        [AllowAnonymous]
        public bool RemoveSkuItems(int id)
        {
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                if (id != 0)
                {
                    var data = context.TopSKUsItems.FirstOrDefault(x => x.Id == id && x.IsActive == true && x.IsDeleted == false);
                    if (data != null)
                    {
                        data.IsActive = false;
                        data.IsDeleted = true;
                        data.ModifiedDate = DateTime.Now;
                        data.ModifiedBy = userid;
                        context.Entry(data).State = EntityState.Modified;
                        context.Commit();
                        return true;
                    }
                    else
                        return false;
                }
            }
            return true;
        }

        [Route("InsertTopHighMarginSKUItemList")]
        [HttpPost]
        [AllowAnonymous]
        public IHttpActionResult InsertTopHighMarginSKUItem(DataContracts.External.MobileExecutiveDC.InsertTopSkUItems insertTopSkUItems)
        {
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (var dbtransaction = context.Database.BeginTransaction())
                {
                    foreach (var m in insertTopSkUItems.topSKUsItemDcs)
                    {
                        //* var item = context.TopSKUsItems.FirstOrDefault(x => x.ItemId == m.ItemId && x.StoreId == m.StoreId && x.Wa*/rehouseId == m.WarehouseId && x.IsActive == true && x.IsDeleted == false);
                        m.StoreId = insertTopSkUItems.IsPromotional ? 0 : m.StoreId;
                        var item = context.TopSKUsItems.Where(x => x.StoreId == m.StoreId && x.WarehouseId == m.WarehouseId && x.IsActive == true && x.IsDeleted == false).ToList();

                        context.TopSKUsItems.RemoveRange(item);

                        TopSKUsItem obj = new TopSKUsItem();
                        obj.ItemId = m.ItemId;
                        obj.itemName = m.itemName;
                        obj.Margin = m.Margin;
                        obj.UnitPrice = m.UnitPrice;
                        obj.StoreId = insertTopSkUItems.IsPromotional ? 0 : m.StoreId;
                        obj.WarehouseId = m.WarehouseId;
                        obj.CreatedBy = userid;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsActive = true;
                        obj.IsDeleted = false;
                        obj.SequenceNo = m.SequenceNo;
                        obj.IsPromotional = insertTopSkUItems.IsPromotional ? true : false;
                        context.TopSKUsItems.Add(obj);
                    }
                    if (context.Commit() > 0)
                    {
                        dbtransaction.Commit();
                    }
                }
                return Created("Ok", "OK");
            }
        }

        [Route("GetProdCatItemByWareId")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetProdCatItemByWareIdAsync(long Warehouseid)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var param = new SqlParameter("WarehouseId", Warehouseid);
                    var data = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.UpdateProductCatalogItemDc>("exec GetProductCatItems @WarehouseId", param).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("InsertProductCatalogItem")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse AddProductCatalogItem(List<DataContracts.External.MobileExecutiveDC.UpdateProductCatalogItemDc> ProductCatalogItems)
        {
            DataContracts.External.MobileExecutiveDC.APIResponse res = new DataContracts.External.MobileExecutiveDC.APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    if (ProductCatalogItems.Count > 0 || ProductCatalogItems.Any())
                    {
                        var warehouseId = ProductCatalogItems.FirstOrDefault().WarehouseId;
                        var catelogs = context.ProductCatalogs.FirstOrDefault(x => x.WarehouseId == warehouseId && x.IsActive && !x.IsDeleted.Value);
                        if (catelogs != null)
                        {
                            catelogs = new ProductCatalog
                            {
                                CreatedBy = userid,
                                CreatedDate = DateTime.Now,
                                CustomList = "Promotional",
                                IsActive = true,
                                IsDeleted = false,
                                IsPromotional = true,
                                SectionHindiName = "",
                                SectionName = "Promotional",
                                Sequence = 0,
                                WarehouseId = warehouseId,
                                Type = "CustomList"
                            };
                            context.ProductCatalogs.Add(catelogs);
                            context.Commit();
                        }
                        foreach (var item in ProductCatalogItems)
                        {
                            ProductCatalogItem catalogItem = new ProductCatalogItem();
                            if (item.Id > 0)
                                catalogItem = context.ProductCatalogItems.Where(x => x.Id == item.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                            catalogItem.ItemNumber = item.ItemNumber;
                            catalogItem.WarehouseId = item.WarehouseId;
                            catalogItem.StoreId = item.StoreId;
                            catalogItem.Sequence = item.Sequence;
                            catalogItem.IsPromotional = item.IsPromotional;
                            catalogItem.SectionId = catelogs.Id;
                            catalogItem.IsActive = true;
                            catalogItem.IsDeleted = false;
                            if (item.Id > 0)
                            {
                                catalogItem.ModifiedBy = userid;
                                catalogItem.ModifiedDate = DateTime.Now;
                                context.Entry(catalogItem).State = EntityState.Modified;
                            }
                            else
                            {
                                catalogItem.SectionId = catelogs.Id;
                                catalogItem.CreatedBy = userid;
                                catalogItem.CreatedDate = DateTime.Now;
                                context.ProductCatalogItems.Add(catalogItem);

                            }
                        }
                        if (context.Commit() > 0)
                        {
                            res.Message = "Item Saved";
                            res.Status = true;
                        }
                        else
                        {
                            res.Message = "Item Not Save";
                            res.Status = false;
                        }
                    }
                    else
                    {
                        res.Message = "Object Null";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Message = ex.Message;
                res.Status = false;
            }
            return res;
        }

        [Route("SearchBeatDSR")]
        [HttpPost]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDCs BeatDSRRR(DataContracts.External.MobileExecutiveDC.beatDSRRR beatDSR)
        {
            MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
            MongoDbHelper<ExecutiveBeats> ExecutiveMongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

            List<DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC> TodaySales = new List<DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC>();
            List<SalesDashboardTodayMTDData> DSRResult = new List<SalesDashboardTodayMTDData>();
            DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDCs res = new DataContracts.External.MobileExecutiveDC.BeatDSRReportResponseDCs();

            using (var Context = new AuthContext())
            {
                var today = DateTime.Now.Date;
                if (beatDSR.EndDate >= today || (beatDSR.EndDate == null && beatDSR.StartDate == null) || (beatDSR.EndDate == today && beatDSR.StartDate == today))
                {
                    var listt = (from e in Context.ClusterStoreExecutives
                                 join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                 join c in Context.Clusters on e.ClusterId equals c.ClusterId
                                 join s in Context.StoreDB on e.StoreId equals s.Id
                                 where e.IsActive == true && e.IsDeleted == false && p.Active == true && p.Deleted == false && c.Active == true && c.Deleted == false  // && e.ExecutiveId == 1539
                                 select new
                                 {
                                     p.PeopleID,
                                     p.WarehouseId,
                                     p.DisplayName,
                                     c.WarehouseName,
                                     s.Id,
                                     s.Name,
                                     c.ClusterName,
                                     e.ChannelMasterId
                                 }).Distinct().OrderBy(x => x.PeopleID).ToList();
                    var PeopleIds = listt.Select(x => x.PeopleID).Distinct().ToList();
                    var Channeltype = Context.ChannelMasters.Where(x => x.Active && !x.Deleted).ToList();

                    List<peopleDataDc> pList = new List<peopleDataDc>();
                    foreach (var id in PeopleIds)
                    {
                        var data = listt.Where(x => x.PeopleID == id).FirstOrDefault();
                        var ChannelId = listt.Where(x => x.PeopleID == id).Select(x => x.ChannelMasterId).FirstOrDefault();

                        peopleDataDc obj = new peopleDataDc();
                        obj.WarehouseId = data.WarehouseId;
                        obj.WarehouseName = data.WarehouseName;
                        obj.DisplayName = data.DisplayName;
                        obj.PeopleID = data.PeopleID;
                        obj.StoreId = data.Id;
                        obj.StoreName = string.Join(",", listt.Where(x => x.PeopleID == id).Select(x => x.Name).Distinct().ToList());//data.Name;
                        obj.ClusterName = string.Join(",", listt.Where(x => x.PeopleID == id).Select(x => x.ClusterName).Distinct().ToList());
                        obj.ChannelMasterId = ChannelId;
                        obj.ChannelType = Channeltype.Where(x => x.ChannelMasterId == ChannelId).Select(x => x.ChannelType).FirstOrDefault(); //string.Join(",", Channeltype.Where(x => Channels.Contains(x.ChannelMasterId)).Select(x => x.ChannelType).ToList());

                        pList.Add(obj);

                    }

                    //var list = pList.Where(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.StoreId.Contains((int)x.StoreId)).Select(x => x).Distinct().ToList();
                    var list = pList.Where(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.ChannelMasterId.Contains(x.ChannelMasterId)).Select(x => x).Distinct().ToList();
                    var peoplelist = list.OrderBy(x => x.PeopleID).Skip(beatDSR.skip).Take(beatDSR.take);
                    var totcount = list.Count();
                    if (peoplelist != null && peoplelist.Any())
                    {
                        var peopleids = list.Select(x => x.PeopleID).ToList();
                        MongoDbHelper<ExecutiveBeats> mongoDbBeatHelper = new MongoDbHelper<ExecutiveBeats>();
                        var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);

                        if (Context.Database.Connection.State != ConnectionState.Open)
                            Context.Database.Connection.Open();

                        foreach (var item in peoplelist)
                        {
                            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();
                            var MonthBeat = mongoDbBeatHelper.Select(x => x.AssignmentDate == today && peopleids.Contains(x.PeopleId));
                            var todayBeat = MonthBeat.Where(x => x.PeopleId == item.PeopleID).FirstOrDefault();
                            DataContracts.External.MobileExecutiveDC.BeatCustomerDc Beat = new DataContracts.External.MobileExecutiveDC.BeatCustomerDc();

                            Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                            //if (Context.Database.Connection.State != ConnectionState.Open)
                            //    Context.Database.Connection.Open();

                            DataTable IdDt = new DataTable();
                            List<int> ActualCustomerVisited = new List<int>();
                            IdDt = new DataTable();
                            IdDt.Columns.Add("IntValue");

                            if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any())
                            {
                                if (Beat.TodayBeatCustomerIds.Count > 0)
                                {
                                    foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                                    {
                                        int cid = id;
                                        var dr = IdDt.NewRow();
                                        dr["IntValue"] = cid;
                                        IdDt.Rows.Add(dr);
                                    }
                                }
                                else
                                {
                                    IdDt = null;
                                }

                            }
                            ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                            var cmd = Context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 1200;
                            cmd.CommandText = "[dbo].[TodayDashBoardDetail]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var param4 = new SqlParameter("PersonId", item.PeopleID);
                            var param5 = new SqlParameter("CustIdDs", IdDt);
                            var param8 = new SqlParameter("WarehouseId", item.WarehouseId);
                            cmd.Parameters.Add(param4);
                            cmd.Parameters.Add(param5);
                            cmd.Parameters.Add(param8);

                            var reader = cmd.ExecuteReader();
                            dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                            if (dashboardDetail != null)
                            {
                                DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC ToObj = new DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC();
                                ToObj.BeatSales = dashboardDetail.BeatSales;
                                ToObj.ExtraSales = dashboardDetail.ExtraSales;
                                ToObj.BeatOrder = dashboardDetail.BeatOrder;
                                ToObj.TotalSales = dashboardDetail.TotalSales;
                                ToObj.ProductiveCall = dashboardDetail.ProductiveCall;
                                int SuccessPhoneOrder = 0;
                                if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                                {
                                    SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                    ToObj.VisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                                    ToObj.TotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                    ToObj.TodayOutletCoverage = (Convert.ToDouble(ToObj.TodayTotalCall) / (Convert.ToDouble(ToObj.TodayVisitPlanned))) * 100;
                                    ToObj.PhoneOrder = SuccessPhoneOrder;
                                }
                                else
                                {
                                    ToObj.VisitPlanned = 0;
                                    ToObj.TotalCall = 0;
                                    ToObj.TodayOutletCoverage = 0;
                                }
                                if (ToObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                                {
                                    ToObj.TodayStrikeRate = (Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100;
                                }
                                var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                                ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                                ToObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                                ToObj.ExtraCall = dashboardDetail.ExtraCall;
                                ToObj.ExtraOrder = dashboardDetail.ExtraOrder;
                                ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                                ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                                ToObj.Eco = dashboardDetail.Eco;
                                ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                                ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                                ToObj.SalesPerson = item.DisplayName;
                                ToObj.ClusterName = item.ClusterName;
                                ToObj.ChannelName = item.ChannelType;
                                ToObj.StoreName = item.StoreName;
                                ToObj.WarehouseName = item.WarehouseName;
                                ToObj.SalesPersonId = item.PeopleID;
                                ToObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                                ToObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;

                                TodaySales.Add(ToObj);
                                res.salesTodayDC = TodaySales;
                                res.Totalcount = totcount;
                            }
                        }
                    }
                }
                if (beatDSR.EndDate != null && beatDSR.StartDate != null && beatDSR.StartDate != today)
                {
                    beatDSR.EndDate = beatDSR.EndDate.Value.AddDays(1).AddMilliseconds(-1);
                    var store = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();

                    DSRResult = mongoDbHelper.Select(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.ChannelMasterId.Contains(x.ChannelMatserId) && x.CreatedDate >= beatDSR.StartDate && x.CreatedDate <= beatDSR.EndDate).ToList(); //&& beatDSR.StoreId.Contains(x.StoreId)
                    if ((TodaySales != null && TodaySales.Count > 0) && DSRResult != null && DSRResult.Count > 0)
                    {
                        var data = Mapper.Map(TodaySales).ToANew<List<SalesDashboardTodayMTDData>>();
                        DSRResult.AddRange(data);
                    }
                    if (DSRResult != null)
                    {
                        var result = DSRResult
                        .GroupBy(ac => new
                        {
                            ac.SalesPersonId,
                            ac.SalesPerson,
                            ac.StoreId,
                            ac.ClusterIds,
                            ac.ClusterName,
                            ac.StoreName,
                            ac.WarehouseId,
                            ac.WarehouseName,
                            ac.ChannelMatserId,
                            ac.ChannelName
                        })
                        .Select(ac => new SalesDashboardTodayMTDData
                        {
                            SalesPerson = ac.Key.SalesPerson,
                            SalesPersonId = ac.Key.SalesPersonId,
                            StoreId = ac.Key.StoreId,
                            ClusterIds = ac.Key.ClusterIds,
                            ClusterName = ac.Key.ClusterName,
                            StoreName = ac.Key.StoreName,
                            WarehouseId = ac.Key.WarehouseId,
                            WarehouseName = ac.Key.WarehouseName,
                            ChannelMatserId = ac.Key.ChannelMatserId,
                            ChannelName = ac.Key.ChannelName,
                            BeatSales = ac.Sum(acs => acs.BeatSales),
                            BeatOrder = ac.Sum(acs => acs.BeatOrder),
                            ExtraCall = ac.Sum(acs => acs.ExtraCall),
                            TotalCall = ac.Sum(acs => acs.TotalCall),
                            TodayTotalCall = ac.Sum(acs => acs.TodayTotalCall),
                            ExtraOrder = ac.Sum(acs => acs.ExtraOrder),
                            ExtraSales = ac.Sum(acs => acs.ExtraSales),
                            ExtraVisit = ac.Sum(acs => acs.ExtraVisit),
                            VisitPlanned = ac.Sum(acs => acs.VisitPlanned),
                            TodayVisitPlanned = ac.Sum(acs => acs.TodayVisitPlanned),
                            TodayStrikeRate = ac.Sum(acs => acs.TodayStrikeRate),
                            TodaySupperOrder = ac.Sum(acs => acs.TodaySupperOrder),
                            PhoneOrder = ac.Sum(acs => acs.PhoneOrder),
                            //TodayTarget = ac.Sum(acs => acs.TodayTarget),
                            //MtdMonthlyTarget = ac.Sum(acs => acs.MtdMonthlyTarget),
                            TodayProductiveCall = ac.Sum(acs => acs.TodayProductiveCall),
                            ProductiveCall = ac.Sum(acs => acs.ProductiveCall),
                            TotalSales = ac.Sum(acs => acs.TotalSales),
                            OutletCoverage = ac.Average(acs => acs.OutletCoverage),
                            StrikeRate = ac.Average(acs => acs.StrikeRate),
                            Eco = ac.Average(acs => acs.Eco),
                            AvgOrderValue = ac.Average(acs => acs.AvgOrderValue),
                            AvgLineItem = ac.Average(acs => acs.AvgLineItem),
                        }).ToList();


                        res.SalesDashboardTodayMTDData = Mapper.Map(result).ToANew<List<DataContracts.External.MobileExecutiveDC.SalesDashboardTodayMTDDataa>>();
                        res.SalesDashboardTodayMTDData.ForEach(y =>
                        {
                            var clusterids = string.Join(",", DSRResult.Where(x => x.SalesPersonId == y.SalesPersonId).Select(x => x.ClusterIds).Distinct().ToList());
                            y.ClusterIds = string.Join(",", clusterids.ToLower().Split(',').Distinct().ToList());
                            var clustername = string.Join(",", DSRResult.Where(x => x.SalesPersonId == y.SalesPersonId).Select(x => x.ClusterName).Distinct().ToList());
                            y.ClusterName = string.Join(",", clustername.ToLower().Split(',').Distinct().ToList());
                            y.StartDate = beatDSR.StartDate.Value.ToString("dd/MM/yyyy");
                            y.EndDate = beatDSR.EndDate.Value.ToString("dd/MM/yyyy"); ;
                        });
                        res.SalesDashboardTodayMTDData = res.SalesDashboardTodayMTDData.OrderBy(x => x.Id).Skip(beatDSR.skip).Take(beatDSR.take).ToList();
                        res.SalesDashboardTodayMTDData = res.SalesDashboardTodayMTDData.Count > 0 ? res.SalesDashboardTodayMTDData : null;
                        res.Totalcount = result.Count();
                    }
                }
            }
            return res;
        }

        [Route("GetAllExecutiveAttendenceForReport")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetAllExecutiveAttendenceForReportAsync(DataContracts.External.MobileExecutiveDC.AllExecutiveAttendanceReportFilter executiveAttendanceReportFilter)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDC> executiveAttendanceLogDCList = new List<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDC>();
                    DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDCs execAttendanceLogDCList = new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDCs();
                    MongoDbHelper<ExecutiveAttendanceLog> mongoDbHelper = new MongoDbHelper<ExecutiveAttendanceLog>();
                    var Firstdate = new DateTime(executiveAttendanceReportFilter.Year, executiveAttendanceReportFilter.Month, 1);
                    var LastDate = Firstdate.AddMonths(1).AddMilliseconds(-1);

                    DataTable citydt = new DataTable();
                    citydt.Columns.Add("intValue");
                    foreach (var cityid in executiveAttendanceReportFilter.CityIds)
                    {
                        var dr = citydt.NewRow();
                        dr["intValue"] = cityid;
                        citydt.Rows.Add(dr);
                    }
                    var Cityid = new SqlParameter("CityId", citydt);
                    Cityid.SqlDbType = SqlDbType.Structured;
                    Cityid.TypeName = "dbo.intValues";

                    //DataTable strdt = new DataTable();
                    //strdt.Columns.Add("intValue");
                    //foreach (var strid in executiveAttendanceReportFilter.StoreIds)
                    //{
                    //    var dr = strdt.NewRow();
                    //    dr["intValue"] = strid;
                    //    strdt.Rows.Add(dr);
                    //}
                    //var storeid = new SqlParameter("StoreId", strdt);
                    //storeid.SqlDbType = SqlDbType.Structured;
                    //storeid.TypeName = "dbo.intValues";

                    DataTable chdt = new DataTable();
                    chdt.Columns.Add("intValue");
                    foreach (var chid in executiveAttendanceReportFilter.ChannelMasterId)
                    {
                        var dr = chdt.NewRow();
                        dr["intValue"] = chid;
                        chdt.Rows.Add(dr);
                    }
                    var Channelid = new SqlParameter("ChannelMasterId", chdt);
                    Channelid.SqlDbType = SqlDbType.Structured;
                    Channelid.TypeName = "dbo.intValues";

                    DataTable Waredt = new DataTable();
                    Waredt.Columns.Add("intValue");
                    foreach (var wareid in executiveAttendanceReportFilter.WarehouseIds)
                    {
                        var dr = Waredt.NewRow();
                        dr["intValue"] = wareid;
                        Waredt.Rows.Add(dr);
                    }
                    var warehouseid = new SqlParameter("WarehouseId", Waredt);
                    warehouseid.SqlDbType = SqlDbType.Structured;
                    warehouseid.TypeName = "dbo.intValues";

                    var month = new SqlParameter("Month", executiveAttendanceReportFilter.Month);
                    var year = new SqlParameter("Year", executiveAttendanceReportFilter.Year);
                    var skip = new SqlParameter("Skip", executiveAttendanceReportFilter.Skip);
                    var take = new SqlParameter("Take", executiveAttendanceReportFilter.Take);

                    var ExecutiveData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDC>("GetExecutiveAttendanceReport @ChannelMasterId,@CityId,@WarehouseId,@Month,@Year,@Skip,@Take", Channelid, Cityid, warehouseid, month, year, skip, take).ToList();

                    if (ExecutiveData.Any() && ExecutiveData.Count > 0)
                    {
                        execAttendanceLogDCList.TotalRecords = ExecutiveData[0].TotalRecords;
                        execAttendanceLogDCList.executiveAttendanceLogDCs = ExecutiveData;
                    }
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = execAttendanceLogDCList };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportExecutiveAttendenceRowDetails")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse ExportExecutiveAttendenceDayCustomerDetailsAsync(int ExecutiveId, DateTime date)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceRowDetailsDC> RowDataList = new List<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceRowDetailsDC>();

                    var Actualdate = date.AddDays(1).AddMilliseconds(-1);
                    var ExecutiveData = context.Peoples.Where(x => x.PeopleID == ExecutiveId && x.Active == true && x.Deleted == false).FirstOrDefault();
                    var StoreId = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == ExecutiveId && x.IsActive == true && x.IsDeleted == false).Select(x => x.StoreId).FirstOrDefault();
                    var StoreName = context.StoreDB.Where(x => StoreId == x.Id && x.IsActive == true && x.IsDeleted == false).Select(x => x.Name).FirstOrDefault();
                    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                    var AttendanceData = mongoDbHelper.Select(x => x.PeopleId == ExecutiveId && x.CreatedDate >= date && x.CreatedDate <= Actualdate).FirstOrDefault();
                    if (AttendanceData != null && AttendanceData.ActualRoutes != null)
                    {
                        RowDataList = AttendanceData.ActualRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceRowDetailsDC
                        {
                            EmployeeCode = ExecutiveData.Empcode,
                            ExecuitveName = ExecutiveData.DisplayName,
                            Store = StoreName,
                            Channel = x.ChannelName,
                            Warehouse = x.WarehouseName,
                            Cluster = x.ClusterName,
                            Date = AttendanceData.CreatedDate.Date,
                            Day = x.Day,
                            SkCode = x.Skcode,
                            CheckIn = x.CheckIn != null ? TimeSpan.Parse(x.CheckIn.Value.ToString("hh:mm:ss")) : x.CheckIn.Value.TimeOfDay,
                            CheckOut = x.CheckOut != null ? TimeSpan.Parse(x.CheckOut.Value.ToString("hh:mm:ss")) : x.CheckOut.Value.TimeOfDay,
                            BeatCustomer = x.IsBeat == true ? "Yes" : "No"
                        }).ToList();
                    }
                    //Get Selft Orders for 
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = RowDataList };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetExecutiveAttendenceMonthViewForReport")]
        [HttpGet]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetExecutiveAttendenceMonthViewForReportAsync(int ExecutiveId, int Month, int Year)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var executiveid = new SqlParameter("ExecutiveId", ExecutiveId);
                    var month = new SqlParameter("Month", Month);
                    var year = new SqlParameter("Year", Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceMonthReportDC>("GetExecutiveAttendanceMonthReport @ExecutiveId,@Month,@Year", executiveid, month, year).ToList();


                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = ExecutiveMonthData };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportAllExecutiveAttendenceForReport")]
        [HttpPost]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse ExportAllExecutiveAttendenceForReportAsync(DataContracts.External.MobileExecutiveDC.ExportAllExecutiveAttendenceForReportDC ExportAllExecutiveAttendenceForReportDC)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var sList = new DataTable();
                    sList.Columns.Add("intValue");
                    foreach (var item in ExportAllExecutiveAttendenceForReportDC.WarehousIds)
                    {
                        var dr = sList.NewRow();
                        dr["intValue"] = item;
                        sList.Rows.Add(dr);
                    }
                    var WarehouseIds = new SqlParameter("WarehousIds", sList);
                    WarehouseIds.SqlDbType = SqlDbType.Structured;
                    WarehouseIds.TypeName = "dbo.intValues";

                    //var sListt = new DataTable();
                    //sListt.Columns.Add("intValue");
                    //foreach (var item in ExportAllExecutiveAttendenceForReportDC.StoreIDs)
                    //{
                    //    var dr = sListt.NewRow();
                    //    dr["intValue"] = item;
                    //    sListt.Rows.Add(dr);
                    //}
                    //var SID = new SqlParameter("StoreId", sListt);
                    //SID.SqlDbType = SqlDbType.Structured;
                    //SID.TypeName = "dbo.intValues";

                    var ChannelListt = new DataTable();
                    ChannelListt.Columns.Add("intValue");
                    foreach (var item in ExportAllExecutiveAttendenceForReportDC.ChannelMasterId)
                    {
                        var dr = ChannelListt.NewRow();
                        dr["intValue"] = item;
                        ChannelListt.Rows.Add(dr);
                    }
                    var CHID = new SqlParameter("ChannelMasterId", ChannelListt);
                    CHID.SqlDbType = SqlDbType.Structured;
                    CHID.TypeName = "dbo.intValues";

                    var month = new SqlParameter("Month", ExportAllExecutiveAttendenceForReportDC.Month);
                    var year = new SqlParameter("Year", ExportAllExecutiveAttendenceForReportDC.Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceReportDC>("ExportAllExecutiveAttendanceReport @Month,@Year,@WarehousIds,@ChannelMasterId", month, year, WarehouseIds, CHID).ToList();
                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = ExecutiveMonthData };
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetAttendanceConfigById")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetAttendanceConfigById(long AttendaceConfigId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    var data = Mapper.Map(res).ToANew<DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigDC>();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("InsertUpdateAttendanceConfig")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse InsertUpdateAttendanceConfig(DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigDC attendanceRuleConfig)
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (AuthContext context = new AuthContext())
                {

                    if (attendanceRuleConfig.Id > 0)
                    {
                        var data = context.AttendanceRuleConfigs.Where(x => x.Id == attendanceRuleConfig.Id && x.IsDeleted == false).FirstOrDefault();
                        if (data != null)
                        {
                            data.IsCheckinBeatShop = attendanceRuleConfig.IsCheckinBeatShop;
                            data.CheckInTime = attendanceRuleConfig.CheckInTime;
                            data.IsCheckOutBeatShop = attendanceRuleConfig.IsCheckOutBeatShop;
                            data.IsFullDayBeatShop = attendanceRuleConfig.IsFullDayBeatShop;
                            data.IsMinimumVisit = attendanceRuleConfig.IsMinimumVisit;
                            data.DayMinVisits = attendanceRuleConfig.DayMinVisits;
                            data.IsTADABeatShop = attendanceRuleConfig.IsTADABeatShop;
                            data.IsTADARequired = attendanceRuleConfig.IsTADARequired;
                            data.TADACalls = attendanceRuleConfig.TADACalls;
                            data.Description = attendanceRuleConfig.Description;
                            data.ModifiedBy = userid;
                            data.ModifiedDate = DateTime.Now;
                            context.Entry(data).State = EntityState.Modified;
                            context.Commit();
                            return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Updated Successfully" };
                        }
                        else
                            return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
                    }
                    else
                    {
                        var Attendance = context.AttendanceRuleConfigs.FirstOrDefault(x => x.ChannelMasterId == attendanceRuleConfig.ChannelMasterId
                                    && x.CityId == attendanceRuleConfig.CityId && x.IsActive == true && x.IsDeleted == false);
                        if (Attendance == null)
                        {
                            AttendanceRuleConfig attendanceConfig = new AttendanceRuleConfig();
                            attendanceConfig = Mapper.Map(attendanceRuleConfig).ToANew<AttendanceRuleConfig>();
                            attendanceConfig.IsActive = true;
                            attendanceConfig.IsDeleted = false;
                            attendanceConfig.CreatedBy = userid;
                            attendanceConfig.CreatedDate = DateTime.Now;
                            attendanceConfig.ModifiedBy = userid;
                            attendanceConfig.ModifiedDate = DateTime.Now;
                            context.AttendanceRuleConfigs.Add(attendanceConfig);
                            context.Commit();
                            return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved Successfully" };
                        }
                        else
                        {
                            return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Already Exists" };
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetAttendanceConfigLog")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetAttendanceConfigLogAsync(int AttendanceRuleConfigId, int Skip, int Take)
        {
            DataContracts.External.MobileExecutiveDC.AttendanceRuleEditLog attendanceRuleEditLog = new DataContracts.External.MobileExecutiveDC.AttendanceRuleEditLog();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    /*
                    var AttendanceRuleConfigIdParam = new SqlParameter("AttendanceRuleConfigId", AttendanceRuleConfigId);
                    var SkipParam = new SqlParameter("Skip", Skip);
                    var TakeParam = new SqlParameter("Take", Take);
                    var res = context.Database.SqlQuery("GetAttendanceConfigLogAsync @AttendanceRuleConfigId,@Skip,@Take", AttendanceRuleConfigIdParam, SkipParam, TakeParam);
                   */
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 900;
                    cmd.CommandText = "[dbo].[GetAttendanceConfigLogAsync]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@AttendanceRuleConfigId", AttendanceRuleConfigId));
                    cmd.Parameters.Add(new SqlParameter("@Skip", Skip));
                    cmd.Parameters.Add(new SqlParameter("@Take", Take));

                    // cmd.Parameters.Add(new SqlParameter("@Status", getPoOrderListDc.Status));

                    var reader = cmd.ExecuteReader();
                    var data = ((IObjectContextAdapter)context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigLogDC>(reader).ToList();
                    attendanceRuleEditLog.AttendanceRuleConfigLog = data;
                    reader.NextResult();
                    if (reader.Read())
                    {
                        attendanceRuleEditLog.TotalRecords = reader["TotalRecords"] is DBNull ? 0 : Convert.ToInt64(reader["TotalRecords"]);

                        if (attendanceRuleEditLog.AttendanceRuleConfigLog != null && attendanceRuleEditLog.AttendanceRuleConfigLog.Any())
                        {
                            var AttendanceConfig = context.AttendanceRuleConfigs.Where(x => x.Id == AttendanceRuleConfigId).FirstOrDefault();
                            //foreach (var item in attendanceRuleEditLog.AttendanceRuleConfigLog)
                            //for (int i = 0; i < attendanceRuleEditLog.AttendanceRuleConfigLog.Count; i++)
                            //{
                            //    item.IsCheckinBeatShopUpdated = AttendanceConfig.IsCheckinBeatShop == item.IsCheckinBeatShop ? false : true;
                            //    item.IsCheckInTimeUpdated = AttendanceConfig.CheckInTime == item.CheckInTime ? false : true;
                            //    item.IsCheckOutBeatShopUpdated = AttendanceConfig.IsCheckOutBeatShop == item.IsCheckOutBeatShop ? false : true;
                            //    item.IsFullDayBeatShopUpdated = AttendanceConfig.IsFullDayBeatShop == item.IsFullDayBeatShop ? false : true;
                            //    item.IsMinimumVisitUpdated = AttendanceConfig.IsMinimumVisit == item.IsMinimumVisit ? false : true;
                            //    item.DayMinVisitsUpdated = AttendanceConfig.DayMinVisits == item.DayMinVisits ? false : true;
                            //    item.IsTADABeatShopUpdated = AttendanceConfig.IsTADABeatShop == item.IsTADABeatShop ? false : true;
                            //    item.IsTADARequiredUpdated = AttendanceConfig.IsTADARequired == item.IsTADARequired ? false : true;
                            //    item.TADACallsUpdated = AttendanceConfig.TADACalls == item.TADACalls ? false : true;
                            //    item.DescriptionUpdated = AttendanceConfig.Description == item.Description ? false : true;
                            //}

                            for (int i = 0; i < attendanceRuleEditLog.AttendanceRuleConfigLog.Count; i++)
                            {

                                if (i == 0)
                                {
                                    var attendanceCurrent = attendanceRuleEditLog.AttendanceRuleConfigLog[i];
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckinBeatShopUpdated = attendanceCurrent.IsCheckinBeatShop == AttendanceConfig.IsCheckinBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckInTimeUpdated = attendanceCurrent.CheckInTime == AttendanceConfig.CheckInTime ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckOutBeatShopUpdated = attendanceCurrent.IsCheckOutBeatShop == AttendanceConfig.IsCheckOutBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsFullDayBeatShopUpdated = attendanceCurrent.IsFullDayBeatShop == AttendanceConfig.IsFullDayBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsMinimumVisitUpdated = attendanceCurrent.IsMinimumVisit == AttendanceConfig.IsMinimumVisit ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DayMinVisitsUpdated = attendanceCurrent.DayMinVisits == AttendanceConfig.DayMinVisits ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADABeatShopUpdated = attendanceCurrent.IsTADABeatShop == AttendanceConfig.IsTADABeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADARequiredUpdated = attendanceCurrent.IsTADARequired == AttendanceConfig.IsTADARequired ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].TADACallsUpdated = attendanceCurrent.TADACalls == AttendanceConfig.TADACalls ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DescriptionUpdated = attendanceCurrent.Description == AttendanceConfig.Description ? false : true;
                                }
                                else
                                {
                                    var attendanceCurrent = attendanceRuleEditLog.AttendanceRuleConfigLog[i];
                                    var attendanceNext = attendanceRuleEditLog.AttendanceRuleConfigLog[i - 1];

                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckinBeatShopUpdated = attendanceCurrent.IsCheckinBeatShop == attendanceNext.IsCheckinBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckInTimeUpdated = attendanceCurrent.CheckInTime == attendanceNext.CheckInTime ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckOutBeatShopUpdated = attendanceCurrent.IsCheckOutBeatShop == attendanceNext.IsCheckOutBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsFullDayBeatShopUpdated = attendanceCurrent.IsFullDayBeatShop == attendanceNext.IsFullDayBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsMinimumVisitUpdated = attendanceCurrent.IsMinimumVisit == attendanceNext.IsMinimumVisit ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DayMinVisitsUpdated = attendanceCurrent.DayMinVisits == attendanceNext.DayMinVisits ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADABeatShopUpdated = attendanceCurrent.IsTADABeatShop == attendanceNext.IsTADABeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADARequiredUpdated = attendanceCurrent.IsTADARequired == attendanceNext.IsTADARequired ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].TADACallsUpdated = attendanceCurrent.TADACalls == attendanceNext.TADACalls ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DescriptionUpdated = attendanceCurrent.Description == attendanceNext.Description ? false : true;

                                }
                            }
                        }

                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = attendanceRuleEditLog };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "No Data Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetCityListForAttendanceConfig")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetCityListForAttendanceConfig(long ChannelId, bool IsEdit)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    //var storeid = new SqlParameter("StoreId", StoreId);
                    var channelid = new SqlParameter("ChannelMasterId", ChannelId);
                    var isedit = new SqlParameter("IsEdit", IsEdit);
                    //var res = context.Database.SqlQuery<GetCityListDc>("GetCityListAttendanceConfig @StoreId,@IsEdit", StoreId, isedit).ToList();
                    var res = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.GetCityListDc>("GetCityListAttendanceConfig @ChannelMasterId,@IsEdit", channelid, isedit).ToList();
                    if (res != null)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = res };
                    }
                    else
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Deleted Successfully" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("StoresOfMappedExecutive/{PeopleId}")]
        [HttpGet]
        public async Task<List<StoreViewModel>> GetStoreList(int PeopleId)
        {
            using (var context = new AuthContext())
            {
                List<StoreViewModel> result = new List<StoreViewModel>();
                var ExecutiveId = new SqlParameter("ExecutiveId", PeopleId);
                result = await context.Database.SqlQuery<StoreViewModel>("exec StoresOfMappedExecutive @ExecutiveId", ExecutiveId).ToListAsync();
                return result;
            }
        }
        [Route("GetExecutiveWiseChannelList")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetExecutiveWiseChannelList(int ExecutiveId)
        {
            using (var context = new AuthContext())
            {
                List<ChannelList> data = new List<ChannelList>();
                data = (from ce in context.ClusterStoreExecutives
                        join c in context.ChannelMasters on ce.ChannelMasterId equals c.ChannelMasterId
                        where c.Deleted == false && c.Active == true
                        && ce.ExecutiveId == ExecutiveId && ce.IsActive == true && ce.IsDeleted == false
                        select new ChannelList
                        {
                            ChannelMasterId = c.ChannelMasterId,
                            ChannelName = c.ChannelType
                        }).Distinct().ToList();
                if (data.Count > 0)
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data };
                else
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = data };
            }
        }

        [Route("GetTargetItemForSalesApp")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.SalesItemResponseDc> GetTargetItemForSalesApp(int customerId, int warehouseId, int peopleId, int skip, int take, string lang)
        {
            skip = skip * 10;
            var SkCode = "";
            List<long> StoreIds = new List<long>();
            DataContracts.External.MobileExecutiveDC.SalesItemResponseDc itemResponseDc = new DataContracts.External.MobileExecutiveDC.SalesItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>() };

            using (var context = new AuthContext())
            {
                StoreIds = (from cse in context.ClusterStoreExecutives
                            join s in context.StoreDB on cse.StoreId equals s.Id
                            join c in context.Clusters on cse.ClusterId equals c.ClusterId
                            where cse.IsActive == true && cse.IsDeleted == false && s.IsActive == true && s.IsDeleted == false
                            && cse.ExecutiveId == peopleId && c.Active == true && c.Deleted == false
                            select cse.StoreId
                                        ).Distinct().ToList();
                SkCode = context.Customers.Where(x => x.CustomerId == customerId && x.Active == true && x.Deleted == false).Select(x => x.Skcode).FirstOrDefault();

            }

            var today = DateTime.Today;
            if (today.Day <= 10)
            {
                today = today.AddMonths(-1);
            }
            var cartPredicate = PredicateBuilder.New<AngularJSAuthentication.DataContracts.Mongo.CustomersTargets.MonthlyCustomerTarget>(x => x.WarehouseId == warehouseId && x.Skcode == SkCode);
            var MonthlyCustomerTarget = new MongoDbHelper<AngularJSAuthentication.DataContracts.Mongo.CustomersTargets.MonthlyCustomerTarget>();
            string DocumentName = "MonthlyTargetData_" + today.Month.ToString() + today.Year.ToString();
            var TargetCustomers = MonthlyCustomerTarget.Select(cartPredicate, null, null, null, false, "", DocumentName).ToList();

            var StoreWiseTarget = TargetCustomers.Where(x => x.TargetOnStores != null).SelectMany(x => x.TargetOnStores).Where(y => StoreIds.Contains(y.StoreId)).ToList();

            if (StoreWiseTarget.Count > 0 && StoreWiseTarget.Any() && StoreIds.Count > 0 && StoreIds.Any())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();

                List<int> CatIds = new List<int>();
                List<int> SubCats = new List<int>();
                List<int> SubSubCats = new List<int>();
                if (peopleId != 0)
                {
                    AngularJSAuthentication.API.Controllers.External.SalesManApp.SalesAppItemController salesAppItemConTroller = new AngularJSAuthentication.API.Controllers.External.SalesManApp.SalesAppItemController();
                    StoreCategorySubCategoryBrands = salesAppItemConTroller.GetCatSubCatwithStores(peopleId);
                    if (StoreIds.Count > 0 && StoreIds.Any())
                        StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => StoreIds.Contains(x.StoreId)).ToList();
                    CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                    SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                    SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                }

                var monthStart = new DateTime(today.Year, today.Month, 1);
                var monthEnd = monthStart.AddMonths(1).AddDays(-1);
                var startDate = monthStart.ToString("yyyy-MM-dd");
                var enddate = monthEnd.ToString("yyyy-MM-dd");

                string query = $"SELECT itemnumber from skorderdata_{AppConstants.Environment} where whid={warehouseId} and custid={customerId}  and createddate>='{startDate}' and createddate <= '{enddate}'";

                if (StoreIds.Count > 0)
                {
                    query += $" and storeid in ({string.Join(",", StoreIds)})";
                }

                if (CatIds != null && CatIds.Any())
                {
                    query += $" and catid in ({string.Join(",", CatIds)})";
                }

                if (SubCats != null && SubCats.Any())
                {
                    query += $" and compid in ({string.Join(",", SubCats)})";
                }
                if (SubSubCats != null && SubSubCats.Any())
                {
                    query += $" and brandid in ({string.Join(",", SubSubCats)})";
                }

                query += " group by itemnumber";


                ElasticSqlHelper<elasticItemvalue> elasticSqlHelper = new ElasticSqlHelper<elasticItemvalue>();

                var orderitems = AsyncContext.Run(async () => (await elasticSqlHelper.GetListAsync(query)).ToList());
                var itemnumbers = string.Empty;
                if (orderitems != null && orderitems.Any())
                {
                    itemnumbers = "'" + string.Join("','", orderitems.Select(x => x.itemnumber)) + "'";
                }
                string itemIndex = ConfigurationManager.AppSettings["ElasticSearchIndexName"];
                query = $"SELECT itemnumber from {itemIndex} where warehouseid={warehouseId} " +
                    $" and active=true and deleted=false and  isdiscontinued=false and (isitemlimit=false or (isitemlimit=true and itemlimitqty>0 and itemlimitqty-minorderqty>0 )) and (itemapptype=0 or itemapptype=1)";

                if (!string.IsNullOrEmpty(itemnumbers))
                    query += $" and itemnumber not in ({ itemnumbers })";

                if (CatIds != null && CatIds.Any())
                {
                    query += $" and categoryid in ({string.Join(",", CatIds)})";
                }

                if (SubCats != null && SubCats.Any())
                {
                    query += $" and subcategoryid in ({string.Join(",", SubCats)})";
                }
                if (SubSubCats != null && SubSubCats.Any())
                {
                    query += $" and subsubcategoryid in ({string.Join(",", SubSubCats)})";
                }

                query += " group by itemnumber";

                ElasticSqlHelper<elasticItemvalue> elasticSqlHelper1 = new ElasticSqlHelper<elasticItemvalue>();

                var dbItemNumbers = AsyncContext.Run(async () => (await elasticSqlHelper1.GetListAsync(query)).ToList());

                itemResponseDc.TotalItem = dbItemNumbers.Count();
                var itemNumbers = dbItemNumbers.OrderBy(x => x.itemnumber).Skip(skip).Take(take).Select(x => x.itemnumber).ToList();

                List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                if (itemNumbers != null && itemNumbers.Any())
                {
                    ElasticSalesAppClusterItemDataHelper elasticSalesAppClusterItem = new ElasticSalesAppClusterItemDataHelper();
                    var data = AsyncContext.Run(() => elasticSalesAppClusterItem.GetSalesCatelogElasticData(warehouseId, StoreCategorySubCategoryBrands, itemNumbers, "", -1, -1, 0, 1000, "ASC", true, null));
                    ItemData = data.ItemMasters;
                }
                if (ItemData != null && ItemData.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    var itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    using (var context = new AuthContext())
                    {
                        var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                        foreach (var it in ItemData)
                        {
                            it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                            it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;

                            //Condition for offer end
                            if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                            {
                                if (it.OfferCategory == 2)
                                {
                                    it.IsOffer = false;
                                    it.FlashDealSpecialPrice = 0;
                                    it.OfferCategory = 0;
                                }
                                else if (it.OfferCategory == 1)
                                {
                                    it.IsOffer = false;
                                    it.OfferCategory = 0;
                                }

                            }
                            else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;

                            }

                            if (it.OfferCategory == 1)
                            {
                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }


                        }
                    }
                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    var itemMultiMRPIds = ItemData.Select(x => x.ItemMultiMRPId).ToList();
                    using (var context = new AuthContext())
                    {
                        ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
                    }

                    foreach (var item in ItemData)
                    {
                        if (item.price > item.UnitPrice)
                        {
                            item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = item.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }
                        }
                        else
                        {
                            item.marginPoint = 0;
                        }
                    }

                    itemResponseDc.ItemDataDCs = ItemData.GroupBy(x => new { x.ItemNumber, x.Itemtype }).Select(x => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                    {
                        BaseCategoryId = x.FirstOrDefault().BaseCategoryId,
                        BillLimitQty = x.FirstOrDefault().BillLimitQty,
                        Categoryid = x.FirstOrDefault().Categoryid,
                        CompanyId = x.FirstOrDefault().CompanyId,
                        dreamPoint = x.FirstOrDefault().dreamPoint,
                        HindiName = x.FirstOrDefault().HindiName,
                        IsItemLimit = x.FirstOrDefault().IsItemLimit,
                        IsOffer = x.FirstOrDefault().IsOffer,
                        ItemId = x.FirstOrDefault().ItemId,
                        ItemlimitQty = x.FirstOrDefault().ItemlimitQty,
                        ItemMultiMRPId = x.FirstOrDefault().ItemMultiMRPId,
                        itemname = x.FirstOrDefault().itemname,
                        ItemNumber = x.FirstOrDefault().ItemNumber,
                        Itemtype = x.FirstOrDefault().Itemtype,
                        LastOrderDate = x.FirstOrDefault().LastOrderDate,
                        LastOrderDays = x.FirstOrDefault().LastOrderDays,
                        LastOrderQty = x.FirstOrDefault().LastOrderQty,
                        LogoUrl = x.FirstOrDefault().LogoUrl,
                        marginPoint = x.FirstOrDefault().marginPoint,
                        MinOrderQty = x.FirstOrDefault().MinOrderQty,
                        OfferCategory = x.FirstOrDefault().OfferCategory,
                        OfferFreeItemId = x.FirstOrDefault().OfferFreeItemId,
                        OfferFreeItemImage = x.FirstOrDefault().OfferFreeItemImage,
                        OfferFreeItemName = x.FirstOrDefault().OfferFreeItemName,
                        OfferFreeItemQuantity = x.FirstOrDefault().OfferFreeItemQuantity,
                        OfferId = x.FirstOrDefault().OfferId,
                        OfferMinimumQty = x.FirstOrDefault().OfferMinimumQty,
                        OfferType = x.FirstOrDefault().OfferType,
                        OfferWalletPoint = x.FirstOrDefault().OfferWalletPoint,
                        price = x.FirstOrDefault().price,
                        Sequence = x.FirstOrDefault().Sequence,
                        SubCategoryId = x.FirstOrDefault().SubCategoryId,
                        SubsubCategoryid = x.FirstOrDefault().SubsubCategoryid,
                        UnitPrice = x.FirstOrDefault().UnitPrice,
                        WarehouseId = x.FirstOrDefault().WarehouseId,
                        Active = x.FirstOrDefault().active,
                        Classification = x.FirstOrDefault().Classification,
                        BackgroundRgbColor = x.FirstOrDefault().BackgroundRgbColor,
                        moqList = x.Count() > 1 ? x.Select(y => new DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC
                        {
                            isChecked = (y.ItemMultiMRPId == x.FirstOrDefault().ItemMultiMRPId && y.MinOrderQty == x.FirstOrDefault().MinOrderQty),
                            BaseCategoryId = y.BaseCategoryId,
                            BillLimitQty = y.BillLimitQty,
                            Categoryid = y.Categoryid,
                            CompanyId = y.CompanyId,
                            dreamPoint = y.dreamPoint,
                            HindiName = y.HindiName,
                            IsItemLimit = y.IsItemLimit,
                            IsOffer = y.IsOffer,
                            ItemId = y.ItemId,
                            ItemlimitQty = y.ItemlimitQty,
                            ItemMultiMRPId = y.ItemMultiMRPId,
                            itemname = y.itemname,
                            ItemNumber = y.ItemNumber,
                            Itemtype = y.Itemtype,
                            LastOrderDate = y.LastOrderDate,
                            LastOrderDays = y.LastOrderDays,
                            LastOrderQty = y.LastOrderQty,
                            LogoUrl = y.LogoUrl,
                            marginPoint = y.marginPoint,
                            MinOrderQty = y.MinOrderQty,
                            OfferCategory = y.OfferCategory,
                            OfferFreeItemId = y.OfferFreeItemId,
                            OfferFreeItemImage = y.OfferFreeItemImage,
                            OfferFreeItemName = y.OfferFreeItemName,
                            OfferFreeItemQuantity = y.OfferFreeItemQuantity,
                            OfferId = y.OfferId,
                            OfferMinimumQty = y.OfferMinimumQty,
                            OfferType = y.OfferType,
                            OfferWalletPoint = y.OfferWalletPoint,
                            price = y.price,
                            Sequence = y.Sequence,
                            SubCategoryId = y.SubCategoryId,
                            SubsubCategoryid = y.SubsubCategoryid,
                            UnitPrice = y.UnitPrice,
                            WarehouseId = y.WarehouseId,
                            Active = y.active,
                            Classification = y.Classification,
                            BackgroundRgbColor = y.BackgroundRgbColor,
                        }).ToList() : new List<DataContracts.External.MobileExecutiveDC.SalesAppItemDataDC>()
                    }).OrderBy(x => x.Sequence).ToList();

                }
            }


            return itemResponseDc;
        }

        [Route("GetItemClassificationV2")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.ItemResponseDc> GetItemClassificationV2(int PeopleId, int customerId, int warehouseId, string lang, int skip, int take, string Classification, string IncentiveClassifications)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            var itemResponseDc = new DataContracts.External.MobileExecutiveDC.ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>() };
            using (var context = new AuthContext())
            {

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var catsubcatDt = new DataTable();
                SqlParameter categorysubcatParam = null;

                catsubcatDt = new DataTable();
                catsubcatDt.Columns.Add("categoryId");
                catsubcatDt.Columns.Add("companyId");
                catsubcatDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = catsubcatDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    catsubcatDt.Rows.Add(dr);
                }

                categorysubcatParam = new SqlParameter("CatCompanyBrand", catsubcatDt);
                categorysubcatParam.SqlDbType = SqlDbType.Structured;
                categorysubcatParam.TypeName = "dbo.CatCompanyBrand";

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var item in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = item;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("IncentiveClassification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetItemClassificationForSalesV2]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@CustomerId", customerId));
                cmd.Parameters.Add(new SqlParameter("@Classification", Classification));
                cmd.Parameters.Add(categorysubcatParam);
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(new SqlParameter("@Skip", skip));
                cmd.Parameters.Add(new SqlParameter("@Take", take));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<ItemDataDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                }


                itemResponseDc.ItemDataDCs = await ItemAdditionalFilters(warehouseId, ItemData, context, lang, customerId);

            }

            return itemResponseDc;
        }
        private async Task<List<DataContracts.External.MobileExecutiveDC.ItemDataDC>> ItemAdditionalFilters(int warehouseId, List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemData, AuthContext context, string lang, int CustomerId)
        {
            List<DataContracts.External.MobileExecutiveDC.ItemDataDC> ItemDataDCs = new List<DataContracts.External.MobileExecutiveDC.ItemDataDC>();
            var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
            var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
            var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == CustomerId && x.Active == true && x.Deleted == false);
            BackendOrderController backendOrderController = new BackendOrderController();
            foreach (var it in ItemData)
            {
                double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price, it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0, cprice);
                //Condition for offer end
                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                {
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }
                    else if (it.OfferCategory == 1)
                    {
                        it.IsOffer = false;
                        it.OfferCategory = 0;
                    }

                }
                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                {
                    it.IsOffer = false;
                    it.FlashDealSpecialPrice = 0;
                    it.OfferCategory = 0;

                }

                if (it.OfferCategory == 1)
                {
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;
                }

                try
                {
                    if (!it.IsOffer)
                    {
                        /// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //Customer (0.2 * 10=1)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                    }
                    else { it.dreamPoint = 0; }

                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                    if (it.price > it.UnitPrice)
                    {
                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                    }
                    else
                    {
                        it.marginPoint = 0;
                    }
                }
                catch { }

                if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                {
                    if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                    {
                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                    }
                    else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                    {
                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                    }

                    else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                    {
                        it.itemname = it.HindiName; //item display name
                    }
                    else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                    {
                        it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                    }
                }

                it.Itemtype = 1;
                ItemDataDCs.Add(it);
            }

            var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
            List<ItemScheme> ItemSchemes = new List<ItemScheme>();
            //using (var context = new AuthContext())
            //{
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
            //}

            List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

            if (ItemDataDCs != null && ItemDataDCs.Any())
            {
                ItemMasterManager itemMasterManager = new ItemMasterManager();
                itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemDataDCs.Select(s => s.ItemMultiMRPId).Distinct().ToList());

            }

            foreach (var item in ItemDataDCs)
            {
                item.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.Classification;
                item.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.BackgroundRgbColor;

                if (item.price > item.UnitPrice)
                {
                    item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                    if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                    {
                        var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                        var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                        var UPMRPMargin = item.marginPoint.Value;
                        if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                            item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                    }

                }
                else
                {
                    item.marginPoint = 0;
                }
            }


            return ItemDataDCs;

        }

        //TODO:SalesAppMarch2023
        [Route("GetOldExecutiveLatestBeatReport")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.LatestBeatReportDc>> GetOldExecutiveLatestBeatReport(DataContracts.External.MobileExecutiveDC.OldBeatReportPostDc obj)
        {

            using (var authContext = new AuthContext())
            {
                var peopleids = new System.Data.DataTable();
                var clusterids = new System.Data.DataTable();

                clusterids.Columns.Add("IntValue");
                peopleids.Columns.Add("IntValue");

                foreach (var item in obj.clusterIds)
                {
                    var dr = clusterids.NewRow();
                    dr["IntValue"] = item;
                    clusterids.Rows.Add(dr);
                }
                var ClusterIds = new SqlParameter("MultiClusterId", clusterids);
                ClusterIds.SqlDbType = System.Data.SqlDbType.Structured;
                ClusterIds.TypeName = "dbo.IntValues";

                foreach (var item in obj.PeopleId)
                {
                    var dr = peopleids.NewRow();
                    dr["IntValue"] = item;
                    peopleids.Rows.Add(dr);
                }
                var peopleid = new SqlParameter("Peopleids", peopleids);
                peopleid.SqlDbType = System.Data.SqlDbType.Structured;
                peopleid.TypeName = "dbo.IntValues";

                var channelid = new SqlParameter("ChannelMasterId", obj.ChannelMasterIds[0]);
                var storeid = new SqlParameter("StoreIds", obj.StoreIds);
                var warehouseid = new SqlParameter("WarehouseId", obj.WarehouseId);
                var executiveid = new SqlParameter("CurrentExecutiveId", obj.CurrentExecutiveId);

                var BeatList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.LatestBeatReportDc>("exec GetOldExecLatestBeatEditReport  @Peopleids,@MultiClusterId,@StoreIds,@WarehouseId,@CurrentExecutiveId,@ChannelMasterId", peopleid, ClusterIds, storeid, warehouseid, executiveid, channelid).ToListAsync();
                return BeatList;
            }
        }

        //TODO:SalesAppMarch2023
        [Route("GetOldExecutiveById")]
        [HttpGet]
        public async Task<DataContracts.External.MobileExecutiveDC.APIResponse> GetOldExecutiveByIdAsync(long Executiveid)
        {
            using (var context = new AuthContext())
            {
                try
                {
                    var OldExecutiveLists = (from e in context.ExecutiveStoreChangeHistories
                                             join p in context.Peoples on e.OldExecutiveId equals p.PeopleID
                                             where p.Active == true && p.Deleted == false && e.IsActive == true && e.IsDeleted == false
                                             && e.ExecutiveId == Executiveid
                                             select new DataContracts.External.MobileExecutiveDC.OldExectuiveListDC
                                             {
                                                 OldExecutiveId = e.OldExecutiveId,
                                                 OldExecutiveName = p.DisplayName,
                                                 OldExecutiveEmpCode = p.Empcode,
                                                 OldStoreId = e.OldStoreId,
                                                 OldClusterId = e.OldClusterId
                                             }).ToList();
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Data = OldExecutiveLists, Status = true };
                }
                catch (Exception ex)
                {
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
                }
            }
        }

        [Route("GetLatestBeatReport")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.LatestBeatReportDc>> GetLatestBeatReport(DataContracts.External.MobileExecutiveDC.BeatReportPostDc obj)
        {

            using (var authContext = new AuthContext())
            {
                var storeids = new System.Data.DataTable();
                var clusterids = new System.Data.DataTable();
                var channelids = new System.Data.DataTable();

                clusterids.Columns.Add("IntValue");
                storeids.Columns.Add("IntValue");
                channelids.Columns.Add("IntValue");

                foreach (var item in obj.clusterIds)
                {
                    var dr = clusterids.NewRow();
                    dr["IntValue"] = item;
                    clusterids.Rows.Add(dr);
                }
                var ClusterIds = new SqlParameter("MultiClusterId", clusterids);
                ClusterIds.SqlDbType = System.Data.SqlDbType.Structured;
                ClusterIds.TypeName = "dbo.IntValues";

                foreach (var item in obj.StoreIds)
                {
                    var dr = storeids.NewRow();
                    dr["IntValue"] = item;
                    storeids.Rows.Add(dr);
                }

                var StoreIdParam = new SqlParameter("MultiStoreIds", storeids);
                StoreIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                StoreIdParam.TypeName = "dbo.IntValues";


                foreach (var item in obj.ChannelMasterIds)
                {
                    var dr = channelids.NewRow();
                    dr["IntValue"] = item;
                    channelids.Rows.Add(dr);
                }

                var ChannelIdParam = new SqlParameter("MultiChannelIds", channelids);
                ChannelIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                ChannelIdParam.TypeName = "dbo.IntValues";

                var peopleid = new SqlParameter("peopleid", obj.PeopleId);

                var BeatList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.LatestBeatReportDc>("exec GetLatestBeatEditReport  @peopleId,@MultiClusterId,@MultiStoreIds,@MultiChannelIds", peopleid, ClusterIds, StoreIdParam, ChannelIdParam).ToListAsync();
                return BeatList;
            }
        }

        [Route("ResetEditedBeat")]
        [HttpPost]
        [AllowAnonymous]
        public DataContracts.External.MobileExecutiveDC.APIResponse ResetEditedBeatAsync(DataContracts.External.MobileExecutiveDC.ResetEditBeatDC resetEditBeatDC)
        {
            try
            {
                using (var context = new AuthContext())
                {
                    var executiveid = new SqlParameter("ExecutiveId", resetEditBeatDC.ExecutiveId);
                    var storeid = new SqlParameter("StoreId", resetEditBeatDC.StoreId);
                    DataTable dt = new DataTable();
                    dt.Columns.Add("IntValue");
                    foreach (var data in resetEditBeatDC.ClusterIds)
                    {
                        var dr = dt.NewRow();
                        dr["IntValue"] = data;
                        dt.Rows.Add(dr);
                    }
                    var clusters = new SqlParameter
                    {
                        ParameterName = "ClusterIds",
                        SqlDbType = SqlDbType.Structured,
                        TypeName = "dbo.IntValues",
                        Value = dt
                    };

                    var res = context.Database.ExecuteSqlCommand("ResetEditedBeat @ExecutiveId,@StoreId,@ClusterIds", executiveid, storeid, clusters);
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Reset Succefully" };

                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ValidatingAssignBeat")]
        [HttpPost]
        public async Task<string> ValidatingAssignBeat(DataContracts.External.MobileExecutiveDC.ValidatingAssignBeatDc ValidatingAssignBeat)
        {
            int userid = 0;
            var identity = User.Identity as ClaimsIdentity;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            string result = "";
            if (ValidatingAssignBeat != null && ValidatingAssignBeat.ClusterExecutiveBeat.Any() && ValidatingAssignBeat.clusterIds.Any() && ValidatingAssignBeat.ChannelMasterIds.Any() && userid > 0)
            {
                using (var context = new AuthContext())
                {
                    var CustomerSkcode = ValidatingAssignBeat.ClusterExecutiveBeat.Select(x => x.Skcode).Distinct().ToList();
                    List<Customer> CustomerList = await context.Customers.Where(x => CustomerSkcode.Contains(x.Skcode)).ToListAsync();
                    var ClusterIds = ValidatingAssignBeat.clusterIds;

                    if (CustomerList != null && CustomerList.Any() && ClusterIds.Any())
                    {
                        var CustNotExitsinCluster = CustomerList.Where(x => !ClusterIds.Contains(x.ClusterId)).Select(x => x.Skcode).ToList();
                        result = string.Join(",", CustNotExitsinCluster);
                    }
                }
            }
            return result;
        }

        [Route("AssignBeatFromUploader")]
        [HttpPost]
        public async Task<string> AssignBeatFromUploader(DataContracts.External.MobileExecutiveDC.ValidatingAssignBeatDc beatList)
        {
            int userid = 0;
            var identity = User.Identity as ClaimsIdentity;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            string result = "";
            if (beatList != null && beatList.ClusterExecutiveBeat.Any() && beatList.clusterIds.Any() && userid > 0 && beatList.ClusterExecutiveBeat.Any(x => x.StoreId > 0))
            {
                using (var context = new AuthContext())
                {
                    var CustomerSkcode = beatList.ClusterExecutiveBeat.Select(x => x.Skcode).Distinct().ToList();
                    var StoreIds = beatList.ClusterExecutiveBeat.Select(x => x.StoreId).Distinct().ToList();
                    var CustomerList = await context.Customers.Where(x => CustomerSkcode.Contains(x.Skcode)).ToListAsync();
                    var CustNotExitsinCluster = CustomerList.Where(x => !beatList.clusterIds.Contains(x.ClusterId)).Select(x => x.Skcode).ToList();
                    if (CustNotExitsinCluster != null && CustNotExitsinCluster.Any())
                    {
                        return result = string.Join(",", CustNotExitsinCluster);
                    }
                    var ConsumerTypeCust = CustomerList.Where(x => x.CustomerType != null && x.CustomerType.Trim().ToLower() == "consumer").Select(x => x.Skcode).ToList();
                    if (ConsumerTypeCust != null && ConsumerTypeCust.Any())
                    {
                        return result = "This Customer Type is Consumer " + string.Join(",", ConsumerTypeCust);
                    }

                    var ExecutiveId = beatList.ClusterExecutiveBeat.Select(x => x.ExecutiveId).FirstOrDefault();
                    var storelist = context.ClusterStoreExecutives.Where(x => x.IsActive == true && x.IsDeleted == false && x.ExecutiveId == ExecutiveId).Select(x => x.StoreId).Distinct().ToList();
                    var CustomeridList = CustomerList.Select(x => x.CustomerId).Distinct().ToList();
                    var CustomerMappingList = await context.CustomerExecutiveMappings.Where(x => CustomeridList.Contains(x.CustomerId) && storelist.Contains(x.StoreId) && x.IsDeleted == false && x.IsActive == true).ToListAsync();
                    List<CustomerExecutiveMapping> AddList = new List<CustomerExecutiveMapping>();
                    List<CustomerExecutiveMapping> UpdateList = new List<CustomerExecutiveMapping>();

                    #region TODO:SalesAppMarch2023
                    //foreach (var store in storelist)
                    //{
                    //    foreach (var beat in beatList.ClusterExecutiveBeat)
                    //    {
                    //        if (!string.IsNullOrEmpty(beat.Skcode) && CustomerList.Any(x => x.Skcode == beat.Skcode))
                    //        {
                    //            var CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId;
                    //            if (AddList.Count() > 0 )
                    //            {
                    //                var isExist = AddList.Any(x => x.CustomerId == CustomerId && x.Day == beat.Day && x.StoreId == store);
                    //                if (isExist)
                    //                {
                    //                    continue;
                    //                }
                    //            }

                    //            if (UpdateList.Count() > 0)
                    //            {
                    //                var isExist = UpdateList.Any(x => x.CustomerId == CustomerId && x.Day == beat.Day && x.StoreId == store);
                    //                if (isExist)
                    //                {
                    //                    continue;
                    //                }
                    //            }

                    //            DayOfWeek Day = readDayOfWeek(beat.Day);
                    //            CustomerExecutiveMapping AddBeat = new CustomerExecutiveMapping();
                    //            DateTime startdate = DateTime.Now;

                    //            if (beat.SkipDays == 0 && beat.SkipWeeks == 0 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                    //                startdate = CalculateDate(Day, DateTime.Now);
                    //            else if (beat.SkipDays == 0 && beat.SkipWeeks >= 1 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                    //                startdate = CalculateDate(Day, DateTime.Now.AddDays((beat.SkipWeeks) * 7 + 7));
                    //            else if (beat.SkipDays >= 1 && beat.SkipWeeks == 0 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                    //                startdate = CalculateDate(Day, DateTime.Now.AddDays((beat.SkipDays) * 1 + 1));
                    //            else if (!string.IsNullOrEmpty(beat.EvenOrOddWeek))
                    //            {
                    //                CultureInfo ciCurr = CultureInfo.CurrentCulture;
                    //                int weekNum = ciCurr.Calendar.GetWeekOfYear(startdate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                    //                //int weekNum = GetWeekOfMonth(dt);
                    //                if (beat.EvenOrOddWeek.Trim().ToLower() == "odd")
                    //                {
                    //                    int addDays = weekNum % 2 != 0 ? 0 : 7;
                    //                    beat.SkipDays = 14;
                    //                    startdate = DateTime.Now.AddDays(addDays);
                    //                    startdate = CalculateDate(Day, startdate);
                    //                }
                    //                else if (beat.EvenOrOddWeek.Trim().ToLower() == "even")
                    //                {
                    //                    int addDays = weekNum % 2 == 0 ? 0 : 7;
                    //                    beat.SkipDays = 14;
                    //                    startdate = DateTime.Now.AddDays(addDays);
                    //                    startdate = CalculateDate(Day, startdate);
                    //                }
                    //            }


                    //            if (CustomerMappingList.Any(x => x.CustomerId == CustomerId && x.Day == beat.Day && x.StoreId == store))
                    //            {
                    //                var data = CustomerMappingList.Where(x => x.StoreId == store && x.Day == beat.Day && x.CustomerId == CustomerId).FirstOrDefault();
                    //                data.SkipDays = beat.SkipDays;
                    //                data.SkipWeeks = beat.SkipWeeks;
                    //                data.StartDate = startdate;
                    //                data.EvenOrOddWeek = beat.EvenOrOddWeek;
                    //                data.ModifiedBy = userid;
                    //                data.ModifiedDate = DateTime.Now;
                    //                UpdateList.Add(data);
                    //            }
                    //            else
                    //            {
                    //                AddList.Add(new CustomerExecutiveMapping
                    //                {
                    //                    CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId,
                    //                    StoreId = store,
                    //                    SkipDays = beat.SkipDays,
                    //                    SkipWeeks = beat.SkipWeeks,
                    //                    StartDate = startdate,
                    //                    Day = beat.Day ?? "NoBeat",
                    //                    Beat = beat.BeatNumber,
                    //                    CreatedBy = userid,
                    //                    CreatedDate = DateTime.Now,
                    //                    ModifiedBy = userid,
                    //                    ModifiedDate = DateTime.Now,
                    //                    IsActive = true,
                    //                    IsDeleted = false,
                    //                });
                    //            }
                    //        }
                    //    }
                    //}
                    #endregion TODO:SalesAppMarch2023
                    if (CustomerMappingList.Any() && CustomerMappingList != null)
                    {
                        CustomerMappingList.ForEach(i =>
                        {
                            i.IsActive = false;
                            i.IsDeleted = true;
                            i.ModifiedBy = userid;
                            i.ModifiedDate = DateTime.Now;
                            context.Entry(i).State = EntityState.Modified;
                        });
                    }
                    foreach (var store in storelist)
                    {
                        foreach (var beat in beatList.ClusterExecutiveBeat)
                        {
                            if (!string.IsNullOrEmpty(beat.Skcode) && CustomerList.Any(x => x.Skcode == beat.Skcode))
                            {
                                var CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId;
                                DayOfWeek Day = readDayOfWeek(beat.Day);
                                CustomerExecutiveMapping AddBeat = new CustomerExecutiveMapping();
                                DateTime startdate = DateTime.Now;

                                //if (beat.SkipDays == 0 && beat.SkipWeeks == 0 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                //    startdate = CalculateDate(Day, DateTime.Now);
                                //else 
                                if (beat.SkipDays == 28 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                {
                                    beat.SkipWeeks = 0;
                                    startdate = CalculateDate(Day, DateTime.Now.AddDays((beat.MonthWeek > 1 ? beat.MonthWeek - 1 : 0) * 7));
                                }
                                else if (beat.SkipDays >= 1 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                {
                                    beat.SkipWeeks = 0;
                                    startdate = CalculateDate(Day, DateTime.Now.AddDays((beat.SkipDays) * 1 + 1));
                                }
                                else if (beat.SkipWeeks >= 1 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                {
                                    beat.SkipDays = 0;
                                    startdate = CalculateDate(Day, DateTime.Now.AddDays(beat.SkipWeeks > 1 ? (beat.SkipWeeks - 1) * 7 : 0));
                                }
                                else if (!string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                {
                                    CultureInfo ciCurr = CultureInfo.CurrentCulture;
                                    int weekNum = ciCurr.Calendar.GetWeekOfYear(startdate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                                    if (beat.EvenOrOddWeek.Trim().ToLower() == "odd")
                                    {
                                        int addDays = weekNum % 2 != 0 ? 0 : 7;
                                        beat.SkipDays = 14;
                                        beat.SkipWeeks = 0;
                                        startdate = DateTime.Now.AddDays(addDays);
                                        startdate = CalculateDate(Day, startdate);
                                    }
                                    else if (beat.EvenOrOddWeek.Trim().ToLower() == "even")
                                    {
                                        int addDays = weekNum % 2 == 0 ? 0 : 7;
                                        beat.SkipDays = 14;
                                        beat.SkipWeeks = 0;
                                        startdate = DateTime.Now.AddDays(addDays);
                                        startdate = CalculateDate(Day, startdate);
                                    }
                                }
                                else
                                {
                                    startdate = CalculateDate(Day, DateTime.Now);
                                }

                                //if (beat.SkipDays == 28 && string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                //{
                                //    startdate = CalculateDate(Day, DateTime.Now.AddDays((beat.MonthWeek > 1 ? beat.MonthWeek - 1 : 0) * 7));

                                //}
                                //else
                                //{
                                //    startdate = CalculateDate(Day, DateTime.Now);
                                //}

                                var NewAddList = AddList.FirstOrDefault(x => x.CustomerId == CustomerId && x.Day == beat.Day && x.StoreId == store);
                                if (NewAddList != null)
                                {
                                    NewAddList.SkipDays = beat.SkipDays;
                                    NewAddList.SkipWeeks = beat.SkipWeeks;
                                    NewAddList.EvenOrOddWeek = beat.EvenOrOddWeek;
                                    NewAddList.MonthWeek = beat.MonthWeek;
                                    NewAddList.StartDate = startdate;
                                }
                                else
                                {
                                    AddList.Add(new CustomerExecutiveMapping
                                    {
                                        CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId,
                                        StoreId = store,
                                        SkipDays = beat.SkipDays,
                                        SkipWeeks = beat.SkipWeeks,
                                        StartDate = startdate,
                                        Day = beat.Day ?? "NoBeat",
                                        Beat = beat.BeatNumber,
                                        CreatedBy = userid,
                                        CreatedDate = DateTime.Now,
                                        ModifiedBy = userid,
                                        ModifiedDate = DateTime.Now,
                                        IsActive = true,
                                        EvenOrOddWeek = beat.EvenOrOddWeek,
                                        MonthWeek = beat.MonthWeek,
                                        IsDeleted = false,
                                    });
                                }
                            }
                        }
                    }
                    if (AddList.Any() || UpdateList.Any())
                    {
                        if (AddList != null && AddList.Any())
                        {
                            context.CustomerExecutiveMappings.AddRange(AddList);
                        }
                        if (UpdateList != null && UpdateList.Any())
                        {
                            foreach (var item in UpdateList)
                            {
                                context.Entry(item).State = EntityState.Modified;
                            }
                        }
                        if (context.Commit() > 0) { result = "Updated Successfully"; } else { result = "Something Went wrong"; }
                    }
                    else
                    {
                        result = "There is no record to update";
                    }

                }
            }
            return result;
        }
        public static DayOfWeek readDayOfWeek(string Day)
        {
            switch (Day)
            {
                case "Sunday":
                    return DayOfWeek.Sunday;
                case "Monday":
                    return DayOfWeek.Monday;
                case "Tuesday":
                    return DayOfWeek.Tuesday;
                case "Wednesday":
                    return DayOfWeek.Wednesday;
                case "Thursday":
                    return DayOfWeek.Thursday;
                case "Friday":
                    return DayOfWeek.Friday;
                case "Saturday":
                    return DayOfWeek.Saturday;
            }
            return DayOfWeek.Monday;
        }
        private static DateTime CalculateDate(DayOfWeek dayOfWeek, DateTime date)
        {
            if (date.DayOfWeek != dayOfWeek)
            {
                var direction = date.DayOfWeek > dayOfWeek ? -1D : 1D;
                do
                {
                    date = date.AddDays(direction);
                } while (date.DayOfWeek != dayOfWeek);
            }
            return date;
        }

        [Route("ExecutiveBeatUpload")]
        [HttpPost]
        public async Task<string> ExecutiveBeatUpload(DataContracts.External.MobileExecutiveDC.ValidatingAssignBeatDc beatList)
        {
            using (var context = new AuthContext())
            {
                string result = "";
                int userid = 0;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                var PeopleId = beatList.ClusterExecutiveBeat.Select(x => x.ExecutiveId).FirstOrDefault();

                var ClusterStoreExecutiveData = (from cs in context.ClusterStoreExecutives
                                                 join s in context.StoreDB
                                                 on cs.StoreId equals s.Id
                                                 join ch in context.ChannelMasters
                                                 on cs.ChannelMasterId equals ch.ChannelMasterId
                                                 join c in context.Clusters
                                                 on cs.ClusterId equals c.ClusterId
                                                 where cs.ExecutiveId == PeopleId &&
                                                 cs.IsActive == true && cs.IsDeleted == false && s.IsActive == true && s.IsDeleted == false
                                                 && ch.Active == true && ch.Deleted == false && c.Active == true && c.Deleted == false
                                                 select cs
                                                 ).ToList();

                var clusterId = ClusterStoreExecutiveData.Select(x => x.ClusterId).Distinct().ToList();
                var ChannelId = ClusterStoreExecutiveData.Select(x => x.ChannelMasterId).Distinct().ToList();

                var CustomerSkcode = beatList.ClusterExecutiveBeat.Select(x => x.Skcode).Distinct().ToList();
                var StoreIds = beatList.ClusterExecutiveBeat.Select(x => x.StoreId).Distinct().ToList();
                var CustomerList = await context.Customers.Where(x => CustomerSkcode.Contains(x.Skcode) && clusterId.Contains((int)x.ClusterId)).ToListAsync();

                var CustomeridList = CustomerList.Select(x => x.CustomerId).Distinct().ToList();
                List<CustomerExecutiveMappingsBeatEdit> AddList = new List<CustomerExecutiveMappingsBeatEdit>();
                List<CustomerExecutiveMappingsBeatEdit> UpdateList = new List<CustomerExecutiveMappingsBeatEdit>();


                foreach (var beat in beatList.ClusterExecutiveBeat)
                {
                    var CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId;
                    if (CustomerId > 0)
                    {
                        var editCust = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.ExecutiveId == beat.ExecutiveId && x.StoreId == beat.StoreId && x.CustomerId == CustomerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        if (editCust != null)
                        {
                            editCust.Day = beat.Day ?? "NoBeat";
                            editCust.ModifiedBy = userid;
                            editCust.ModifiedDate = DateTime.Now;
                            editCust.StoreId = (int)beat.StoreId;
                            UpdateList.Add(editCust);
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(beat.Skcode) && CustomerList.Any(x => x.Skcode == beat.Skcode))
                            {
                                DayOfWeek Day = readDayOfWeek(beat.Day);
                                CustomerExecutiveMappingsBeatEdit AddBeat = new CustomerExecutiveMappingsBeatEdit();

                                if (string.IsNullOrEmpty(beat.EvenOrOddWeek))
                                {
                                    AddList.Add(new CustomerExecutiveMappingsBeatEdit
                                    {
                                        CustomerId = CustomerList.FirstOrDefault(x => x.Skcode == beat.Skcode).CustomerId,
                                        ExecutiveId = beat.ExecutiveId,
                                        StoreId = (int)beat.StoreId,
                                        StartDate = CalculateDate(Day, DateTime.Now),
                                        Day = beat.Day ?? "NoBeat",
                                        CreatedBy = userid,
                                        CreatedDate = DateTime.Now,
                                        ModifiedBy = userid,
                                        ModifiedDate = DateTime.Now,
                                        IsActive = true,
                                        IsDeleted = false,
                                    });
                                }
                            }
                        }
                    }
                }
                if (UpdateList != null && UpdateList.Any())
                {
                    foreach (var Editbeat in UpdateList)
                    {
                        context.Entry(Editbeat).State = EntityState.Modified;
                    }
                }
                if (AddList != null && AddList.Any())
                {
                    context.CustomerExecutiveMappingsBeatEditDb.AddRange(AddList);
                }
                if (context.Commit() > 0) { return result = "Updated Successfully"; } else { return result = "Something Went wrong"; }
            }
        }

        [Route("MappedCustomerOnCluster")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>> GetMappedCustomerListOnCluster(DataContracts.External.MobileExecutiveDC.SearchMappedExeOnClusterDc SearchMappedExeOnCluster)
        {
            List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc> result = new List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>();
            if (SearchMappedExeOnCluster != null && SearchMappedExeOnCluster.clusterIds.Any() && SearchMappedExeOnCluster.ExecutiveId > 0)
            {
                using (var context = new AuthContext())
                {
                    var clusterIdList = new DataTable();
                    clusterIdList.Columns.Add("IntValue");
                    foreach (var item in SearchMappedExeOnCluster.clusterIds)
                    {
                        var dr = clusterIdList.NewRow();
                        dr["IntValue"] = item;
                        clusterIdList.Rows.Add(dr);
                    }
                    var clIds = new SqlParameter("clusterIds", clusterIdList);
                    clIds.SqlDbType = SqlDbType.Structured;
                    clIds.TypeName = "dbo.IntValues";

                    var channelList = new DataTable();
                    channelList.Columns.Add("IntValue");
                    foreach (var item in SearchMappedExeOnCluster.ChannelMasterIds)
                    {
                        var dr = channelList.NewRow();
                        dr["IntValue"] = item;
                        channelList.Rows.Add(dr);
                    }
                    var ChannelIds = new SqlParameter("ChannelMasterIds", channelList);
                    ChannelIds.SqlDbType = SqlDbType.Structured;
                    ChannelIds.TypeName = "dbo.IntValues";

                    var ExecutiveId = new SqlParameter("ExecutiveId", SearchMappedExeOnCluster.ExecutiveId);
                    var StoreId = new SqlParameter("StoreId", SearchMappedExeOnCluster.StoreId);
                    result = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>("exec GetMappedCustomerOnCluster @ExecutiveId, @clusterIds,@ChannelMasterIds , @StoreId", ExecutiveId, clIds, ChannelIds, StoreId).ToListAsync();
                }
            }
            return result;
        }

        [HttpPost]
        [Route("GetMyBeatCustomerSearch")]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc> GetMyBeatCustomerSearch(DataContracts.External.MobileExecutiveDC.BeatCustomerDTOdc obj)
        {
            DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc res = new DataContracts.External.MobileExecutiveDC.MyBeatCustomerDc();
            int Skiplist = (obj.skip - 1) * obj.take;
            BeatsManager manager = new BeatsManager();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> list = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<DataContracts.External.MobileExecutiveDC.MyBeatDC> Beatlist = new List<DataContracts.External.MobileExecutiveDC.MyBeatDC>();
            List<int> CustomerList = new List<int>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                bool Isdigitalexecutive = isSalesLead > 0;

                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                if (Isdigitalexecutive)
                    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today);
                var ActualRoutes = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? todayBeats[0].ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

                res.VisitCount = 0;
                res.NonVisitCount = 0;

                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("CustomerId");
                AllBeatCustomerIdslist.Columns.Add("IsVisited");


                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("GroupId", obj.GroupId);
                var param5 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param6 = new SqlParameter("OrderDays", obj.OrderDays);
                var param7 = new SqlParameter("skip", Skiplist);
                var param8 = new SqlParameter("take", obj.take);
                var param9 = new SqlParameter("KeyValue", obj.KeyValue);
                var param10 = new SqlParameter("IsBeatEdit", obj.BeatEdit);
                var param11 = new SqlParameter("ExecutiveLat", obj.lat);
                var param12 = new SqlParameter("ExecutiveLg", obj.lg);
                var param13 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                var param14 = new SqlParameter("IsPagination", obj.IsPagination);



                var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveBeatSearchDigital" : "[dbo].[GetExecutiveBeatSearch]";
                cmd.CommandText = "[dbo].[GetExecutiveBeatSearch]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param7);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param9);
                cmd.Parameters.Add(param10);
                cmd.Parameters.Add(param11);
                cmd.Parameters.Add(param12);
                cmd.Parameters.Add(param13);
                cmd.Parameters.Add(param14);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext)
                .ObjectContext
                .Translate<DataContracts.External.MobileExecutiveDC.MyBeatDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                    res.VisitCount = Convert.ToInt32(reader["Visited"]);
                    res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                }


                List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                var CustomerIdslist = new System.Data.DataTable();
                var CustIds = new System.Data.DataTable();
                CustomerIdslist.Columns.Add("IntValue");
                CustIds.Columns.Add("IntValue");
                foreach (var item in CustomerIds)
                {
                    var dr = CustomerIdslist.NewRow();
                    dr["IntValue"] = item;
                    CustomerIdslist.Rows.Add(dr);

                    var dr1 = CustIds.NewRow();
                    dr1["IntValue"] = item;
                    CustIds.Rows.Add(dr1);
                }
                var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                CIds.SqlDbType = System.Data.SqlDbType.Structured;
                CIds.TypeName = "dbo.IntValues";

                var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                CustIdParam.TypeName = "dbo.IntValues";
                var CustSalesGrouplist = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                var CustomerRemarkList = await authContext.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new DataContracts.External.MobileExecutiveDC.MyBeatDC
                {
                    Day = x.FirstOrDefault().Day,
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    IsBeat = (today.ToString("dddd").ToUpper() == x.FirstOrDefault().Day.ToUpper()) ? true : false,
                    CustomerType = x.FirstOrDefault().CustomerType,
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);


                foreach (var item in Beatlist)
                {
                    var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023

                    item.SalesGroupDcs = (CustSalesGrouplist != null && CustSalesGrouplist.Any(x => x.CustomerId == item.CustomerId)) ? CustSalesGrouplist.Where(x => x.CustomerId == item.CustomerId).ToList() : null;
                    item.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                    item.Day = item.Day != null ? item.Day.ToUpper() : null;
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
                res.MyBeatDCs = obj.Day == "Search" ? Beatlist.OrderBy(y => y.Day).ToList() : Beatlist.OrderBy(y => y.Day).ThenBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
                res.VisitCount = Beatlist.Count(x => x.IsVisited == true);
                res.NonVisitCount = Beatlist.Count(x => x.IsVisited == false);
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        [Route("StoreClusterExecutive")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.StoreClusterExecutiveDc>> GetStoreClusterExecutives(DataContracts.External.MobileExecutiveDC.SearchStoreClusterDc Search)
        {
            List<DataContracts.External.MobileExecutiveDC.StoreClusterExecutiveDc> result = new List<DataContracts.External.MobileExecutiveDC.StoreClusterExecutiveDc>();
            if (Search != null && Search.ClusterIds.Any() && Search.StoreId > 0)
            {
                using (var context = new AuthContext())
                {
                    var clusterIdList = new DataTable();
                    clusterIdList.Columns.Add("IntValue");
                    foreach (var item in Search.ClusterIds)
                    {
                        var dr = clusterIdList.NewRow();
                        dr["IntValue"] = item;
                        clusterIdList.Rows.Add(dr);
                    }
                    var clIds = new SqlParameter("clusterIds", clusterIdList);
                    clIds.SqlDbType = SqlDbType.Structured;
                    clIds.TypeName = "dbo.IntValues";

                    var StoreId = new SqlParameter("StoreId", Search.StoreId);
                    result = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.StoreClusterExecutiveDc>("exec GetStoreClusterExecutives @clusterIds , @StoreId", clIds, StoreId).ToListAsync();
                }
            }
            return result;
        }

        [Route("MappedCustomerOnStoreCluster")]
        [HttpPost]
        public async Task<List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>> GetMappedCustomerListOnStoreCluster(DataContracts.External.MobileExecutiveDC.SearchMappedStoreClusterDc SearchMappedStoreCluster)
        {
            List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc> result = new List<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>();
            if (SearchMappedStoreCluster != null && SearchMappedStoreCluster.clusterIds.Any() && SearchMappedStoreCluster.StoreId > 0)
            {
                using (var context = new AuthContext())
                {
                    var clusterIdList = new DataTable();
                    clusterIdList.Columns.Add("IntValue");
                    foreach (var item in SearchMappedStoreCluster.clusterIds)
                    {
                        var dr = clusterIdList.NewRow();
                        dr["IntValue"] = item;
                        clusterIdList.Rows.Add(dr);
                    }
                    var clIds = new SqlParameter("clusterIds", clusterIdList);
                    clIds.SqlDbType = SqlDbType.Structured;
                    clIds.TypeName = "dbo.IntValues";

                    var StoreId = new SqlParameter("StoreId", SearchMappedStoreCluster.StoreId);
                    result = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.MappedCustomerOnClusterDc>("exec GetMappedCustomerOnStoreCluster @clusterIds , @StoreId", clIds, StoreId).ToListAsync();
                }
            }
            return result;
        }

        [Route("GetClusterListByWId/{WarehouseId}")]
        [HttpGet]
        public async Task<List<DataContracts.External.MobileExecutiveDC.WarehouseClusterDc>> GetCustomersByClusterId(int WarehouseId)
        {
            var result = new List<DataContracts.External.MobileExecutiveDC.WarehouseClusterDc>();
            if (WarehouseId > 0)
            {
                using (AuthContext context = new AuthContext())
                {
                    string sqlquery = "exec GetClusterListByWId " + WarehouseId;
                    result = await context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.WarehouseClusterDc>(sqlquery).ToListAsync();
                }
            }
            return result;
        }

        [Route("GetExecutiveChannelMapping")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse GetExecutiveChannelMapping()
        {
            using (var context = new AuthContext())
            {
                var Data = context.Database.SqlQuery<ExecutiveMappingDC>("ExecutiveChannelMapping").ToList();
                if (Data != null && Data.Count > 0)
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = Data };
                else
                    return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Data Not Found" };
            }
        }

        [Route("AddCustomerChannel")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse AddCustomerChannel(AddChannel addChannel)
        {
            try
            {
                CustomerChannelMapping channelMapping;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                using (var context = new AuthContext())
                {
                    var CustomerData = context.Customers.Where(x => x.Skcode == addChannel.SkCode && !x.Deleted).FirstOrDefault();
                    if (CustomerData == null)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Wrong SkCode" };
                    }
                    if (CustomerData.CustomerType != null && CustomerData.CustomerType.ToLower() == "consumer")
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "This Customer is Consumer." };

                    var ChannelData = context.CustomerChannelMappings.Where(x => x.CustomerId == CustomerData.CustomerId && x.IsActive && x.IsDeleted == false).ToList();
                    addChannel.StoreId.ForEach(x =>
                    {
                        var custChannel = ChannelData.Where(y => y.StoreId == x).FirstOrDefault();
                        if (custChannel != null)
                        {
                            custChannel.ChannelMasterId = addChannel.ChannelId;
                            custChannel.ModifiedBy = userid;
                            custChannel.ModifiedDate = DateTime.Now;
                            context.Entry(custChannel).State = EntityState.Modified;
                        }
                        else
                        {
                            context.CustomerChannelMappings.Add(new CustomerChannelMapping
                            {
                                CustomerId = CustomerData.CustomerId,
                                StoreId = x,
                                ChannelMasterId = addChannel.ChannelId,
                                CreatedBy = userid,
                                CreatedDate = DateTime.Now,
                                IsActive = true,
                                IsDeleted = false
                            });
                        }
                    });
                    if (context.Commit() > 0)
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Message = "Data Saved Successfully" };
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = "Something Went Wrong" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("PaylaterDashboard")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse PaylaterDashboard(int ExecutiveId)
        {
            try
            {
                using (var context = new AuthContext())
                {
                    var executiveid = new SqlParameter("@ExectiveId", ExecutiveId);
                    PaylaterDashboardDc data = context.Database.SqlQuery<PaylaterDashboardDc>("PaylaterDashboard @ExectiveId", executiveid).FirstOrDefault();
                    if (data != null)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data, Message = "" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = new PaylaterDashboardDc(), Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("PaylaterDashboardDetail")]
        [HttpPost]
        public DataContracts.External.MobileExecutiveDC.APIResponse PaylaterDashboardDetail(PaylaterDashboardFilter dashboardFilter)
        {
            try
            {
                using (var context = new AuthContext())
                {
                    var execid = new SqlParameter("@ExecutiveId", dashboardFilter.ExecutiveId);
                    var custid = new SqlParameter("@CustomerId", dashboardFilter.CustomerId);
                    var keyword = new SqlParameter("@KeayWord", dashboardFilter.KeyWord ?? "");
                    var filter = new SqlParameter("@Filter", dashboardFilter.Filter ?? "");
                    var type = new SqlParameter("@Type", dashboardFilter.Type ?? "");
                    var subtype = new SqlParameter("@SubType", dashboardFilter.SubType ?? "");
                    var skip = new SqlParameter("@Skip", dashboardFilter.Skip);
                    var take = new SqlParameter("@Take", dashboardFilter.Take);
                    var data = context.Database.SqlQuery<PaylaterDashboardDetailDc>("PaylaterDashboardDeatil @ExecutiveId,@CustomerId,@KeayWord,@Filter,@Type,@SubType,@Skip,@Take", execid, custid, keyword, filter, type, subtype, skip, take).ToList();
                    if (data != null && data.Count() > 0)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data, Message = "" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = new List<PaylaterDashboardDetailDc>(), Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("PayLaterCollectAmount")]
        [HttpPost]
        public async Task<AngularJSAuthentication.DataContracts.Masters.UPIPayment.SalesAppQRGenerateDc> PayLaterCollectAmount(PayLaterCollection payLaterCollection)
        {
            using (var context = new AuthContext())
            {
                double amount = 0;
                var orderid = new SqlParameter("@Orderid", payLaterCollection.OrderId);
                amount = context.Database.SqlQuery<double>("Sp_PayLaterRemainingAmount @Orderid", orderid).FirstOrDefault();
                if (amount > 0)
                {
                    UPIPayment.UPIController upi = new UPIPayment.UPIController();
                    DataContracts.Masters.UPIPayment.GenerateSalesAppOrderAmtQRCodeDc qRCode = new DataContracts.Masters.UPIPayment.GenerateSalesAppOrderAmtQRCodeDc();
                    qRCode.amount = amount;
                    qRCode.OrderId = payLaterCollection.OrderId;
                    qRCode.peopleId = payLaterCollection.peopleId;
                    AngularJSAuthentication.DataContracts.Masters.UPIPayment.SalesAppQRGenerateDc qrresult = await upi.GenerateSalesAppOrderAmtQRCode(qRCode);
                    return qrresult;
                    //qrresult = upi.GenerateBackEndAmtQRCode
                }
                else
                {
                    AngularJSAuthentication.DataContracts.Masters.UPIPayment.SalesAppQRGenerateDc salesAppQRGenerateDc = new DataContracts.Masters.UPIPayment.SalesAppQRGenerateDc();
                    salesAppQRGenerateDc.msg = "Remaining Amount is 0.";
                    salesAppQRGenerateDc.Status = false;
                    return salesAppQRGenerateDc;
                }

            }
        }

        [Route("CheckCustomerPaylaterDue")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse CheckCustomerPaylaterDue(int ExecutiveId, int CustomerId)
        {
            try
            {
                using (var context = new AuthContext())
                {
                    var execid = new SqlParameter("@ExecutiveId", ExecutiveId);
                    var custid = new SqlParameter("@CustomerId", CustomerId);
                    var keyword = new SqlParameter("@KeayWord", "");
                    var filter = new SqlParameter("@Filter", "");
                    var type = new SqlParameter("@Type", "");
                    var subtype = new SqlParameter("@SubType", "");
                    var skip = new SqlParameter("@Skip", Convert.ToInt32(0));
                    var take = new SqlParameter("@Take", Convert.ToInt32(1));
                    var data = context.Database.SqlQuery<CustomerPaylaterDue>("PaylaterDashboardDeatil @ExecutiveId,@CustomerId,@KeayWord,@Filter,@Type,@SubType,@Skip,@Take", execid, custid, keyword, filter, type, subtype, skip, take).FirstOrDefault();
                    if (data != null)
                    {
                        data.IsPaylaterDue = data.TotalDue > 0;
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data, Message = "" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = new List<PaylaterDashboardDetailDc>(), Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("CustomerPaylaterDetails")]
        [HttpGet]
        public DataContracts.External.MobileExecutiveDC.APIResponse CustomerPaylaterDetails(int ExecutiveId, int CustomerId)
        {
            try
            {
                using (var context = new AuthContext())
                {
                    var execid = new SqlParameter("@ExecutiveId", ExecutiveId);
                    var custid = new SqlParameter("@CustomerId", CustomerId);
                    var keyword = new SqlParameter("@KeayWord", "");
                    var filter = new SqlParameter("@Filter", "");
                    var type = new SqlParameter("@Type", "");
                    var subtype = new SqlParameter("@SubType", "");
                    var skip = new SqlParameter("@Skip", Convert.ToInt32(0));
                    var take = new SqlParameter("@Take", Convert.ToInt32(1));
                    var data = context.Database.SqlQuery<CustomerPaylaterDetailDc>("PaylaterDashboardDeatil @ExecutiveId,@CustomerId,@KeayWord,@Filter,@Type,@SubType,@Skip,@Take", execid, custid, keyword, filter, type, subtype, skip, take).FirstOrDefault();

                    List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc> VisitCustList = new List<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>();
                    var today = DateTime.Now;

                    string Sp = "GetExecutiveAllBeat";
                    var peopleId = new SqlParameter("@peopleId", ExecutiveId);
                    VisitCustList = context.Database.SqlQuery<DataContracts.External.MobileExecutiveDC.AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                    if (VisitCustList.Count == 0)
                    {
                        data.IsBeat = false;
                    }
                    else
                    {
                        var day = VisitCustList.Any(x => x.CustomerId == CustomerId) ? VisitCustList.FirstOrDefault(x => x.CustomerId == CustomerId).Day : "NoBeat";
                        data.IsBeat = today.ToString("dddd").ToUpper() == day.ToUpper() ? true : false;
                    }
                    if (data != null)
                    {
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = true, Data = data, Message = "" };
                    }
                    else
                        return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Data = new List<PaylaterDashboardDetailDc>(), Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new DataContracts.External.MobileExecutiveDC.APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExecutiveTrackingSalesData")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DataContracts.External.MobileExecutiveDC.ReturnDashboardDc> ExecutiveTrackingSalesData(int PeopleId, int WarehouseId, DateTime StartDate)
        {
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            DigitalSalesBeatDSR DSR = new DigitalSalesBeatDSR();

            long? storeId = 0;
            DateTime EndDate = StartDate.AddDays(1).AddMilliseconds(-1);

            DataContracts.External.MobileExecutiveDC.DashboardDetailDc dashboardDetail = new DataContracts.External.MobileExecutiveDC.DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DataContracts.External.MobileExecutiveDC.ReturnDashboardDc ReturnDashboardDcs = new DataContracts.External.MobileExecutiveDC.ReturnDashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var executiveBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == StartDate).FirstOrDefault();

            //---- get dashboard data from mongo---
            List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();

            using (var Context = new AuthContext())
            {

                var channeldata = (from cs in Context.ClusterStoreExecutives
                                   join c in Context.ChannelMasters
                                   on cs.ChannelMasterId equals c.ChannelMasterId
                                   where cs.IsActive == true && cs.IsDeleted == false && c.Active == true && c.Deleted == false
                                   && cs.ExecutiveId == PeopleId
                                   select new
                                   {
                                       c.ChannelMasterId,
                                       c.ChannelType
                                   }).FirstOrDefault();

                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = Context.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                if (Isdigitalexecutive && channeldata.ChannelType.ToUpper() == "DIGITAL")
                {
                    MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
                    var digitallist = DigitalDSRmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= StartDate && x.CreatedDate >= EndDate);
                    list = Mapper.Map(digitallist).ToANew<List<SalesDashboardTodayMTDData>>();
                }
                else if (!Isdigitalexecutive && channeldata.ChannelType.ToUpper() != "DIGITAL")
                {
                    //List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                    MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                    list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= StartDate && x.CreatedDate >= EndDate);
                }

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                DataContracts.External.MobileExecutiveDC.BeatCustomerDc Beat = new DataContracts.External.MobileExecutiveDC.BeatCustomerDc();

                Beat.YesterdayBeatCustomerIds = executiveBeat != null && executiveBeat.PlannedRoutes != null && executiveBeat.PlannedRoutes.Any() ?
                        executiveBeat.PlannedRoutes.Select(x => new DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<DataContracts.External.MobileExecutiveDC.ExecutiveBeatCustomerDc>();

                // repeat: //goto statment for job

                DataTable IdDt = new DataTable();
                List<int> ActualCustomerVisited = new List<int>();
                IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");


                DataTable VisitedCustomersdt = new DataTable();
                VisitedCustomersdt = new DataTable();
                VisitedCustomersdt.Columns.Add("IntValue");


                DataContracts.External.MobileExecutiveDC.YesterdaySaleDC YestObj = new DataContracts.External.MobileExecutiveDC.YesterdaySaleDC();

                IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");
                if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any() && Beat.YesterdayBeatCustomerIds.Count > 0)
                {
                    foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                    {
                        int cid = id;
                        var dr = IdDt.NewRow();
                        dr["IntValue"] = cid;
                        IdDt.Rows.Add(dr);
                    }
                }
                else
                {
                    IdDt = null;
                }

                ActualCustomerVisited = executiveBeat != null && executiveBeat.ActualRoutes != null && executiveBeat.ActualRoutes.Any() ? executiveBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();


                if (IdDt == null)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                }
                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 1200;
                cmd.CommandText = "[dbo].[ExecutiveTrackingSalesDataDetail]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var param4 = new SqlParameter("PersonId", PeopleId);
                var param5 = new SqlParameter("CustIdDs", IdDt);
                var param6 = new SqlParameter("@StartDatee", StartDate);
                var param8 = new SqlParameter("WarehouseId", WarehouseId);
                //var param9 = new SqlParameter("Temp", temp);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param8);
                //cmd.Parameters.Add(param9);


                var reader = cmd.ExecuteReader();
                dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.DashboardDetailDc>(reader).FirstOrDefault();

                if (dashboardDetail != null)
                {
                    DataContracts.External.MobileExecutiveDC.TodayDashboardDc ToObj = new DataContracts.External.MobileExecutiveDC.TodayDashboardDc();
                    ToObj.TodayBeatSales = dashboardDetail.BeatSales;
                    ToObj.TodayExtraSales = dashboardDetail.ExtraSales;
                    ToObj.TodayBeatOrder = dashboardDetail.BeatOrder;
                    ToObj.TodayTotalSales = dashboardDetail.TotalSales;
                    ToObj.TodayProductiveCall = dashboardDetail.ProductiveCall;
                    int SuccessPhoneOrder = 0;
                    if (executiveBeat != null && executiveBeat.PlannedRoutes.Count() > 0)
                    {
                        SuccessPhoneOrder = executiveBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                        ToObj.TodayVisitPlanned = executiveBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                        ToObj.TodayTotalCall = executiveBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                        ToObj.TodayOutletCoverage = Math.Round((Convert.ToDouble(ToObj.TodayTotalCall) / ToObj.TodayVisitPlanned) * 100, 2);
                        ToObj.PhoneOrder = SuccessPhoneOrder;
                    }
                    else
                    {
                        ToObj.TodayVisitPlanned = 0;
                        ToObj.TodayTotalCall = 0;
                        ToObj.TodayOutletCoverage = 0;
                    }
                    if (ToObj.TodayTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        ToObj.TodayStrikeRate = Math.Round((Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100, 2);
                    }
                    //var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    // ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                    List<int> PlanCustIds = new List<int>();
                    if (executiveBeat != null && executiveBeat.PlannedRoutes != null && executiveBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = executiveBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }
                    ToObj.TodayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0;
                    ToObj.TodayExtraCall = dashboardDetail.ExtraCall;
                    ToObj.TodayExtraOrder = dashboardDetail.ExtraOrder;
                    ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                    ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                    ToObj.Eco = dashboardDetail.Eco;
                    ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                    ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                    ReturnDashboardDcs.TodayDashboardDcs = ToObj;
                }

                //---------------------------------------------------------------------------------------------
                var today = StartDate;

                DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc configs = new DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc();
                // AttendanceRuleConfigsLogDc RuleConfigs = new AttendanceRuleConfigsLogDc();
                DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc ExecutiveDetails = new DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc();

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var cmdd = Context.Database.Connection.CreateCommand();
                cmdd.CommandTimeout = 100;
                cmdd.CommandText = "[dbo].[GetExecutiveDetailAndAttendanceConfigRuleSalesDataDetail]";
                cmdd.CommandType = System.Data.CommandType.StoredProcedure;
                var ExecutiveIdParam = new SqlParameter("ExecutiveId", PeopleId);
                var WarehouseIdParam = new SqlParameter("WarehouseId", WarehouseId);
                var startdateParam = new SqlParameter("StartDatee", StartDate);
                cmdd.Parameters.Add(ExecutiveIdParam);
                cmdd.Parameters.Add(WarehouseIdParam);
                cmdd.Parameters.Add(startdateParam);

                var readerr = cmdd.ExecuteReader();

                ExecutiveDetails = ((IObjectContextAdapter)Context).ObjectContext.Translate<DataContracts.External.MobileExecutiveDC.ExecutiveAttendanceDetailDc>(readerr).FirstOrDefault();

                readerr.NextResult();
                if (readerr.HasRows)
                {
                    configs = ((IObjectContextAdapter)Context)
                                        .ObjectContext
                                        .Translate<DataContracts.External.MobileExecutiveDC.AttendanceRuleConfigsLogDc>(readerr).FirstOrDefault();
                }

                Context.Database.Connection.Close();

                //get attendance rule

                DataContracts.External.MobileExecutiveDC.AttendenceDetailDC obj = new DataContracts.External.MobileExecutiveDC.AttendenceDetailDC();

                if (configs != null && configs.ChannelMasterId > 0)
                {
                    MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                    var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == StartDate && x.PeopleId == PeopleId).FirstOrDefault();
                    var PlannedRoute = TodayBeat != null && TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
                    var ActualRoute = TodayBeat != null && TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

                    var totalcall = TodayBeat != null && TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;
                    var TotalcallAnyCluster = TodayBeat != null && TodayBeat.ActualRoutes != null ? ActualRoute.Count(x => x.IsVisited) : 0;

                    var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                    var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                    var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                    var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;



                    DateTime TodayDate = StartDate;
                    DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
                    string sDate = startDate.ToString("yyyy-MM-dd");
                    string queryy = $" select custid  from {platformIdxName} where cast(createddate as date)= cast('{sDate}' as date) and  executiveid = { PeopleId } group by custid ";

                    ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElasticOrderData> elasticSqlHelperData = new ElasticSqlHelper<DataContracts.External.MobileExecutiveDC.ElasticOrderData>();
                    var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(queryy)).ToList());

                    List<int> custids = new List<int>();
                    if (configs.IsTADABeatShop)
                    {
                        custids = PlannedRoute != null ? PlannedRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                    }
                    else
                    {
                        //custids = ActualRoute != null ? ActualRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                        custids = orderdetails.Select(x => x.custid).Distinct().ToList();
                    }

                    int ProductiveCall = custids != null ? orderdetails.Where(x => custids.Contains(x.custid)).Distinct().Count() : 0;
                    //int ProductiveCall2 = orderdetails != null ? custids.Where(x => orderdetails.Contains(x)).Distinct().Count() : 0;

                    // any shop first checkin
                    if (ExecutiveDetails != null)
                    {
                        if (FirstCheckIn != null)
                        {
                            if (!configs.IsCheckinBeatShop)
                            {
                                if (ExecutiveDetails.FirstCheckIn == null)
                                {
                                    ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
                                }
                                if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                {
                                    //present
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = false;
                                }
                                else
                                {
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = true;
                                }
                            }
                            if (BeatFirstCheckIn != null)
                            {
                                if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
                                {
                                    if (ExecutiveDetails.FirstCheckIn == null)
                                    {
                                        ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
                                    }
                                    if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                    {
                                        //present
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = false;
                                    }
                                    else
                                    {
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = true;
                                    }
                                }
                            }
                            //check out
                            if (!configs.IsCheckOutBeatShop) //any shop check out
                            {
                                ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
                            }
                            else // beat shop check out
                            {
                                ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
                            }
                        }

                        int TC = 0;
                        // status - full day half day
                        if (PlannedRoute != null && PlannedRoute.Count > 0)
                        {
                            if (configs.IsFullDayBeatShop)
                            {
                                // beat shop visit count check
                                if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = totalcall;
                            }
                        }
                        // Any shop visit count check
                        if (ActualRoute != null && ActualRoute.Count > 0)
                        {
                            if (!configs.IsFullDayBeatShop)
                            {
                                if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    //full day
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = TotalcallAnyCluster;
                            }
                        }
                        //int PC = 0;
                        // TADA approve
                        if (!configs.IsTADARequired && ExecutiveDetails != null && ExecutiveDetails.IsPresent)
                        {
                            ExecutiveDetails.TADA = "Approved";
                        }
                        if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails != null && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }
                        if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails != null && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }
                        obj.ExecutiveId = PeopleId;
                        obj.IsPresent = ExecutiveDetails.IsPresent;
                        obj.IsLate = ExecutiveDetails.IsLate;
                        obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
                        obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
                        obj.Status = ExecutiveDetails.Status;
                        obj.TADA = ExecutiveDetails.TADA;
                        obj.Description = configs.Description;
                        ReturnDashboardDcs.AttendenceDetailDCs = obj;
                    }
                }
                return ReturnDashboardDcs;
            }
        }

    }

}


