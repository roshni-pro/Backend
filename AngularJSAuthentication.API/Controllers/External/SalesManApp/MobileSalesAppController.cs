using NLog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AngularJSAuthentication.Model;
using System.Data.Entity;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using System.Data.Entity.Infrastructure;
using AngularJSAuthentication.API.Controllers.AgentCommission;
using AngularJSAuthentication.API.Helpers;
using AngularJSAuthentication.API.Managers;
using Newtonsoft.Json;
using AngularJSAuthentication.DataLayer.Infrastructure;
using AngularJSAuthentication.Common.Constants;
using System.Web;
using AngularJSAuthentication.Common.Helpers;
using AngularJSAuthentication.Model.Store;
using SqlBulkTools;
using AgileObjects.AgileMapper;
using System.ComponentModel.DataAnnotations;
using AngularJSAuthentication.DataContracts.Mongo;
using AngularJSAuthentication.DataContracts.APIParams;
using System.Device.Location;
using System.Collections.Concurrent;
using AngularJSAuthentication.Model.Forecasting;
using System.Security.Claims;
using LinqKit;
using MongoDB.Driver;
using MongoDB.Bson;
using AngularJSAuthentication.Model.Seller;
using System.IO;
using AngularJSAuthentication.DataContracts.External;
using AngularJSAuthentication.DataContracts.Masters.Store;
using AngularJSAuthentication.Model.Salescommission;
using System.Configuration;
using static AngularJSAuthentication.API.Controllers.CustomersController;
using static AngularJSAuthentication.API.Controllers.DeliverychargeController;
using static AngularJSAuthentication.API.Controllers.SalesAppCounterController;
using AngularJSAuthentication.DataContracts.Transaction.Reports;
using AngularJSAuthentication.BusinessLayer.Managers.Masters;
using AngularJSAuthentication.DataContracts.Masters;
using AngularJSAuthentication.API.Helper;
using AngularJSAuthentication.DataContracts.PeopleNotification;
using System.Text;
using AngularJSAuthentication.DataContracts.CustomerReferralDc;
using AngularJSAuthentication.API.Managers.SalesApp;
using AngularJSAuthentication.DataContracts.Transaction;
using static AngularJSAuthentication.API.Controllers.AgentsController;
using AngularJSAuthentication.Model.Agentcommision;
using static AngularJSAuthentication.API.Controllers.WarehouseController;
using AngularJSAuthentication.DataContracts.Transaction.TripPlanner;
using AngularJSAuthentication.API.Controllers.Agent;
using AngularJSAuthentication.API.Managers.NotificationApprovalMatrix;
using AngularJSAuthentication.DataContracts.Transaction.Customer;
using AngularJSAuthentication.Model.SalesApp;
using AngularJSAuthentication.DataLayer.Repositories.Masters;
using Dapper;
using System.Transactions;
using AngularJSAuthentication.DataContracts.ForCast;
using AngularJSAuthentication.DataContracts.External.SalesAppDc;
using NPOI.XSSF.UserModel;
using System.Runtime.Serialization.Formatters.Binary;
using NPOI.SS.UserModel;
using System.Web.Script.Serialization;
using System.Data.Entity.SqlServer;
using AngularJSAuthentication.Common.Enums;
using System.Data.Entity.Core.Objects;
using AngularJSAuthentication.DataContracts.Shared;
using AngularJSAuthentication.API.Models;
using AngularJSAuthentication.API.ControllerV1;
using AngularJSAuthentication.BusinessLayer.SalesApp;
using AngularJSAuthentication.API.Helper.SalesApp;
using Nito.AsyncEx;
using MongoDB.Driver.Core.Configuration;
using Elasticsearch.Net;
using AngularJSAuthentication.DataContracts.ElasticSearch;
using System.Threading;
using System.Net.Http.Headers;
using AngularJSAuthentication.API.Managers.CRM;
using AngularJSAuthentication.DataContracts.CRM;
using AngularJSAuthentication.Model.CustomerShoppingCart;
using static AngularJSAuthentication.API.Controllers.BackendOrderController;
using AngularJSAuthentication.API.Helper.Notification;


namespace AngularJSAuthentication.API.Controllers.External.SalesManApp
{
    [RoutePrefix("api/MobileSales")]


    public class MobileSalesAppController : ApiController
    {
        #region Global Variables
        public static Logger logger = LogManager.GetCurrentClassLogger();
        public static TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime indianTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);
        public double xPointValue = AppConstants.xPoint;
        public int MemberShipHours = AppConstants.MemberShipHours;
        public bool ElasticSearchEnable = AppConstants.ElasticSearchEnable;
        readonly string platformIdxName = $"skorderdata_{AppConstants.Environment}";

        #endregion

        #region Sales app controller


        [Route("")]
        [AllowAnonymous]
        [HttpPost]
        public HttpResponseMessage add(SalesAppCounterDc sale)
        {
            try
            {
                SalesAppCounter sales = new SalesAppCounter
                {
                    Date = indianTime,
                    Deleted = false,
                    lat = sale.lat,
                    Long = sale.Long,
                    SalesPersonId = sale.SalesPersonId
                };
                using (var db = new AuthContext())
                {
                    db.SalesAppCounterDB.Add(sales);
                    db.Commit();
                    SalesAppCounterDTO MUData = new SalesAppCounterDTO()
                    {
                        MUget = sales,
                        Status = true,
                        Message = " Added suscessfully."
                    };
                    //var query = @"select p.peopleId as SalesPersonId, p.Mobile, p.PeopleFirstName, p.PeopleLastName, p.Email, w.WarehouseName, w.WarehouseId from people p inner join Warehouses w on w.WarehouseId = p.WarehouseId where p.peopleId=#salesPersonID#";
                    //query = query.Replace("#salesPersonID#", sale.SalesPersonId.ToString());
                    //InitialPoint initialPoint = new InitialPoint()
                    //{
                    //    lat = sale.lat,
                    //    Long = sale.Long,
                    //    Mobile = sale.Mobile,
                    //    PeopleFirstName = sale.PeopleFirstName,
                    //    PeopleLastName = sale.PeopleLastName,
                    //    WarehouseId = sale.WarehouseId,
                    //    WarehouseName = sale.WarehouseName,
                    //    SalesPersonId = sale.SalesPersonId
                    //};
                    //var client = new SignalRMasterClient(DbConstants.URL + "signalr");
                    //// Send message to server.
                    //string message = JsonConvert.SerializeObject(initialPoint);
                    //client.SayHello(message, initialPoint.WarehouseId.ToString());
                    //client.Stop();
                    //string message = JsonConvert.SerializeObject(initialPoint);
                    //ChatFeed.SendChatMessage(message, initialPoint.WarehouseId.ToString());
                    return Request.CreateResponse(HttpStatusCode.OK, MUData);
                }
            }
            catch (Exception ex)
            {
                SalesAppCounterDTO MUData = new SalesAppCounterDTO()
                {
                    MUget = null,
                    Status = false,
                    Message = "Something Went Wrong."
                };
                logger.Error("Error in Add data salesperson " + ex.Message);
                return Request.CreateResponse(HttpStatusCode.BadRequest, MUData);
            }
        }

        [Route("BeatCustomerVisit")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<DateTime> BeatCustomerVisit(DataContracts.External.MobileExecutiveDC.SalesAppRouteParam param)
        {
            BeatsManager manager = new BeatsManager();
            DateTime? CheckIn = await manager.BeatStart(param.PeopleId, param.CustomerId);
            CheckIn = await manager.BeatActualRoute(param);
            return CheckIn.Value;
        }

        [Route("UpdateActualRoute")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<bool> UpdateActualRoute(List<DataContracts.External.MobileExecutiveDC.SalesAppRouteParam> param)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.UpdateActualRoute(param);
        }
        [Route("UpdateActualRouteForSkip")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<bool> UpdateActualRouteForSkip(DataContracts.External.MobileExecutiveDC.SalesAppRouteParam param)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.UpdateActualRouteForSkip(param);
        }
        [Route("CustomerAddressUpdateRequest")]
        [HttpPost]
        public async Task<HttpResponseMessage> CustomerAddressUpdateRequest(CustomerUpdateRequest customerUpdateRequest)
        {
            var Customer = new Customer();
            if (customerUpdateRequest.CustomerId > 0)
            {
                using (var context = new AuthContext())
                {
                    Customer = context.Customers.FirstOrDefault(x => x.CustomerId == customerUpdateRequest.CustomerId);
                }
            }
            MongoDbHelper<CustomerUpdateRequest> mongoDbHelper = new MongoDbHelper<CustomerUpdateRequest>();
            int count = mongoDbHelper.Count(x => x.CustomerId == customerUpdateRequest.CustomerId && x.RequestBy == customerUpdateRequest.RequestBy && x.Status == 0);
            if (count == 0)
            {
                customerUpdateRequest.CreatedDate = DateTime.Now;
                customerUpdateRequest.Status = 0;
                customerUpdateRequest.UpdatedDate = DateTime.Now;
                customerUpdateRequest.WarehouseId = Customer.Warehouseid ?? 0;
                customerUpdateRequest.SkCode = Customer.Skcode;
                customerUpdateRequest.MobileNo = Customer.Mobile;
                bool result = await mongoDbHelper.InsertAsync(customerUpdateRequest);
                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = result,
                    Message = result ? "Updated request save successfully." : "Some issue occurred please try after some time."
                });

            }
            else
            {

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = false,
                    Message = "Already one updated request pending for this customer."
                });
            }
        }

        [Route("UpdateExectiveStartAddress")]
        [HttpGet]
        public HttpResponseMessage UpdateExectiveStartAddress(int peopleId, double lat, double lng)
        {
            if (peopleId > 0)
            {
                using (var db = new AuthContext())
                {
                    var person = db.Peoples.Where(u => u.PeopleID == peopleId).SingleOrDefault();
                    if (person != null)
                    {
                        person.StartLat = lat;
                        person.StartLng = lng;
                        person.UpdatedDate = DateTime.Now;
                        db.Entry(person).State = EntityState.Modified;
                        db.Commit();
                        var res = new Peopleresponse()
                        {
                            Status = true,
                            message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        var res = new Peopleresponse()
                        {
                            Status = false,
                            message = "People not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
            }
            else
            {
                var res = new Peopleresponse()
                {
                    Status = false,
                    message = "People not exist."
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }

        //[Route("GetMinOrderAmount")]
        //[HttpGet]
        //public async Task<dynamic> GetRetailerMinOrderAmountSalesAPP(int warehouseId, int PeopleId)
        //{
        //    int minOrderValue = Convert.ToInt32(ConfigurationManager.AppSettings["MinOrderValue"]);
        //    int NoOfLineItemSales = 0;
        //    List<long> StoreIDs = new List<long>();
        //    List<StoreMinOrder> storeMinOrder = new List<StoreMinOrder>();
        //    using (var context = new AuthContext())
        //    {
        //        //NoOfLineItemSales = context.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(x =>
        //        //    x.NoOfLineItemSales
        //        //).FirstOrDefault();  // comment for takinf
        //        //var StoreIDs = (from k in context.ClusterStoreExecutives
        //        //                join j in context.StoreDB on k.StoreId equals j.Id
        //        //                where k.ExecutiveId == PeopleId && k.IsActive == true && k.IsDeleted == false && j.IsActive == true && j.IsDeleted == false
        //        //                select  k.StoreId).ToList();
        //        var PID = new SqlParameter("@PeopleID", PeopleId);
        //        StoreIDs = context.Database.SqlQuery<long>("EXEC GetUniverseWiseExecutive @PeopleID", PID).ToList();
        //        var warehouse = await context.Warehouses.FirstOrDefaultAsync(x => x.WarehouseId == warehouseId);
        //        if (warehouse != null && warehouse.Cityid > 0)
        //        {

        //            //context.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsActive == true && x.IsDeleted == false).ToList();
        //            MongoDbHelper<DataContracts.Mongo.RetailerMinOrder> mongoDbHelper = new MongoDbHelper<DataContracts.Mongo.RetailerMinOrder>();
        //            var cartPredicate = PredicateBuilder.New<DataContracts.Mongo.RetailerMinOrder>(x => x.CityId == warehouse.Cityid && x.WarehouseId == warehouseId);
        //            var retailerMinOrder = mongoDbHelper.Select(cartPredicate, null, null, null, collectionName: "RetailerMinOrder").FirstOrDefault();
        //            if (retailerMinOrder != null)
        //            {
        //                minOrderValue = retailerMinOrder.MinOrderValue;
        //            }
        //            else
        //            {
        //                DataContracts.Mongo.RetailerMinOrder newRetailerMinOrder = new DataContracts.Mongo.RetailerMinOrder
        //                {
        //                    CityId = warehouse.Cityid,
        //                    WarehouseId = warehouse.WarehouseId,
        //                    MinOrderValue = minOrderValue,

        //                };
        //                var result = mongoDbHelper.Insert(newRetailerMinOrder);
        //            }
        //        }
        //        MongoDbHelper<StoreMinOrder> mHelperStore = new MongoDbHelper<StoreMinOrder>();
        //        //storeMinOrder = mHelperStore.Select(x => x.StoreId > 0 && x.WarehouseId == warehouseId && (x.CityId == 0 || x.CityId == warehouse.Cityid)).ToList();
        //        storeMinOrder = mHelperStore.Select(x => x.StoreId > 0 && x.WarehouseId == warehouseId && (x.CityId == 0 || x.CityId == warehouse.Cityid) && StoreIDs.Contains(x.StoreId)).ToList();
        //        int minValue=0;
        //        minValue = storeMinOrder[0].MinOrderValue;
        //        foreach (var x in storeMinOrder)
        //        {
        //            if (minValue > x.MinOrderValue)
        //            {
        //                minValue = x.MinOrderValue;
        //            }
        //        }
        //        storeMinOrder = storeMinOrder.GroupBy(x => new { x.CityId, x.StoreId }).Select(x => new StoreMinOrder { CityId = x.Key.CityId,WarehouseId = x.FirstOrDefault().WarehouseId, StoreId = x.Key.StoreId, MinOrderValue = minValue, MinLineItem = x.FirstOrDefault().MinLineItem }).ToList(); //,MinLineItem=x.FirstOrDefault().MinLineItem
        //      //  storeMinOrder = storeMinOrder.GroupBy(x => new { x.CityId, x.StoreId ,x.WarehouseId}).Select(x => new StoreMinOrder { CityId = x.Key.CityId, StoreId = x.Key.StoreId,WarehouseId=x.Key.WarehouseId,  MinLineItem = x.FirstOrDefault().MinLineItem }).ToList();
        //    }

        //    return new { minOrderValue = minOrderValue, StoreMinOrder = storeMinOrder };
        //    //NoOfLineItem = storeMinOrder.Select(x=>x.MinLineItem).FirstOrDefault()
        //}

        [Route("GetMinOrderAmount")]
        [HttpGet]
        public async Task<dynamic> GetRetailerMinOrderAmountSalesAPP(int warehouseId, int PeopleId)
        {
            int minOrderValue = Convert.ToInt32(ConfigurationManager.AppSettings["MinOrderValue"]);
            int NoOfLineItemSales = 0;
            List<StoreMinOrder> storeMinOrder = new List<StoreMinOrder>();
            using (var context = new AuthContext())
            {
                NoOfLineItemSales = context.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(x =>
                    x.NoOfLineItemSales
                ).FirstOrDefault();
                var warehouse = await context.Warehouses.FirstOrDefaultAsync(x => x.WarehouseId == warehouseId);
                if (warehouse != null && warehouse.Cityid > 0)
                {
                    MongoDbHelper<DataContracts.Mongo.RetailerMinOrder> mongoDbHelper = new MongoDbHelper<DataContracts.Mongo.RetailerMinOrder>();
                    var cartPredicate = PredicateBuilder.New<DataContracts.Mongo.RetailerMinOrder>(x => x.CityId == warehouse.Cityid && x.WarehouseId == warehouse.WarehouseId);
                    var retailerMinOrder = mongoDbHelper.Select(cartPredicate, null, null, null, collectionName: "RetailerMinOrder").FirstOrDefault();
                    if (retailerMinOrder != null)
                    {
                        minOrderValue = retailerMinOrder.MinOrderValue;
                    }
                    else
                    {
                        DataContracts.Mongo.RetailerMinOrder newRetailerMinOrder = new DataContracts.Mongo.RetailerMinOrder
                        {
                            CityId = warehouse.Cityid,
                            WarehouseId = warehouse.WarehouseId,
                            MinOrderValue = minOrderValue
                        };
                        var result = mongoDbHelper.Insert(newRetailerMinOrder);
                    }
                }
                MongoDbHelper<StoreMinOrder> mHelperStore = new MongoDbHelper<StoreMinOrder>();
                storeMinOrder = mHelperStore.Select(x => x.StoreId > 0 && (x.CityId == 0 || x.CityId == warehouse.Cityid) && x.WarehouseId == warehouseId).ToList();
                storeMinOrder = storeMinOrder.GroupBy(x => new { x.CityId, x.StoreId }).Select(x => new StoreMinOrder { CityId = x.Key.CityId, StoreId = x.Key.StoreId, MinOrderValue = x.FirstOrDefault().MinOrderValue }).ToList();
            }

            return new { minOrderValue = minOrderValue, StoreMinOrder = storeMinOrder, NoOfLineItem = NoOfLineItemSales };

        }


        [Route("GetDefaultCustomerid")]
        [HttpGet]
        public SalesAppDefaultCustomersDC GetDefaultCustomerid(int WarehouseId)
        {
            using (var db = new AuthContext())
            {
                SalesAppDefaultCustomersDC res;
                var companydetails = db.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                if (companydetails != null)
                {
                    if (WarehouseId > 0)
                    {
                        MongoDbHelper<SalesAppDefaultCustomers> SalesAppmongoDbHelper = new MongoDbHelper<SalesAppDefaultCustomers>();
                        var defaultCustomer = SalesAppmongoDbHelper.Select(x => x.WarehouseId == WarehouseId).FirstOrDefault();
                        if (defaultCustomer != null)
                        {
                            companydetails.DefaultSalesSCcustomerId = defaultCustomer.CustomerId;
                            res = new SalesAppDefaultCustomersDC
                            {
                                DefaultSalesSCcustomerId = companydetails.DefaultSalesSCcustomerId,
                                Status = true,
                                Message = "Success!!"
                            };
                            return res;
                        }
                        else
                        {
                            res = new SalesAppDefaultCustomersDC
                            {
                                DefaultSalesSCcustomerId = 0,
                                Status = false,
                                Message = "No Data Found!!"
                            };
                            return res;
                        }
                    }
                    else
                    {
                        res = new SalesAppDefaultCustomersDC
                        {
                            DefaultSalesSCcustomerId = 0,
                            Status = false,
                            Message = "No Data Found!!"
                        };
                        return res;
                    }
                }
                else
                {
                    res = new SalesAppDefaultCustomersDC
                    {
                        DefaultSalesSCcustomerId = 0,
                        Status = false,
                        Message = "No Data Found!!"
                    };
                    return res;
                }
            }

        }

        [Route("Profile")]
        [HttpGet]
        public HttpResponseMessage GetProfile(int PeopleId)
        {
            Peopleresponse res;
            People person = new People();
            if (PeopleId > 0)
            {
                using (var db = new AuthContext())
                {
                    person = db.Peoples.Where(u => u.PeopleID == PeopleId).SingleOrDefault();
                    if (person != null)
                    {

                        if (person.IsLocation == null)
                        {
                            person.IsLocation = false;
                        }
                        if (person.IsRecording == null)
                        {
                            person.IsRecording = false;

                        }
                        if (person.LocationTimer == null)
                        {
                            person.LocationTimer = 0;
                        }
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = db.Database.SqlQuery<string>(query).ToList();
                        var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                        if (IsRole)
                        {
                            person.Role = "Hub sales lead";
                        }
                        else
                        {
                            person.Role = "";
                        }

                        var data = db.LocationResumeDetails.Where(z => z.PeopleId == PeopleId).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                        if (data != null)
                        {

                            person.Status = data.Status;
                        }

                        var list =

                        res = new Peopleresponse()
                        {
                            people = person,
                            Status = true,
                            message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        res = new Peopleresponse()
                        {
                            people = person,
                            Status = false,
                            message = "People not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
            }
            res = new Peopleresponse()
            {
                people = person,
                Status = false,
                message = "Something went wrong."
            };
            return Request.CreateResponse(HttpStatusCode.OK, res);
        }

        [Route("IsDayStarted/{peopleId}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<bool> IsDayStarted(int PeopleId)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.IsDayStarted(PeopleId);
        }

        [Route("InactiveCustOrderCount/{customerid}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<int> InactiveCustOrderCount(int customerid)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.InactiveCustOrderCount(customerid);
        }

        [Route("StartDay")]
        [HttpPost]
        public async Task<bool> StartDay(DayStartParams param)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.InsertBeatInMongo(param.PeopleId, param.lat, param.lng, param.DayStartAddress);
        }
        [Route("GetSalesDashboardData")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesDeshboardData> GetSalesDashboardData(int peopleId)
        {
            SalesDeshboardData salesDeshboardData = new SalesDeshboardData();
            string completeTargetColor = "#FF6161", IncompleteTargetColor = "#4FFF6C";
            using (var context = new AuthContext())
            {
                salesDeshboardData.ShowTarget = Convert.ToBoolean(ConfigurationManager.AppSettings["ShowSalesAppDesbaordTarget"]);
                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                MongoDbHelper<ExecuteBeatTarget> mongoDbTargetHelper = new MongoDbHelper<ExecuteBeatTarget>();
                var today = DateTime.Now.Date;
                var people = (await context.Peoples.FirstOrDefaultAsync(x => x.PeopleID == peopleId));
                int cityId = people.Cityid ?? 0;
                int? clusterId = (await context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.ClusterId).FirstOrDefaultAsync());
                var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                var MonthBeat = await mongoDbHelper.SelectAsync(x => x.PeopleId == peopleId && x.AssignmentDate >= firstDayOfMonth && x.AssignmentDate <= today);
                var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == today);
                var MonthCustomers = await context.Customers.Where(x => x.ExecutiveId == peopleId && x.CreatedDate >= firstDayOfMonth).Select(x => new { x.CustomerId, x.CreatedDate }).ToListAsync();
                if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any())
                {
                    MongoDbHelper<NextDayBeatPlan> mongoDbCustomBeatPlanHelper = new MongoDbHelper<NextDayBeatPlan>();
                    var CustomBeatPlans = (await mongoDbCustomBeatPlanHelper.SelectAsync(x => x.CreatedDate <= DateTime.Now && x.CreatedDate >= today && x.ExecutiveId == peopleId)).ToList();

                    var beatTargets = clusterId.HasValue ? mongoDbTargetHelper.Select(x => x.StartDate <= DateTime.Now && x.EndDate >= DateTime.Now && x.ClusterId == clusterId).ToList() : null;
                    var beatTarget = beatTargets.FirstOrDefault();

                    #region BeatCustomerOrder
                    var beatCustomerids = MonthBeat.SelectMany(y => y.PlannedRoutes.Select(x => x.CustomerId)).ToList();
                    if (MonthBeat.Select(x => x.ActualRoutes).Any())
                    {
                        if (beatCustomerids == null)
                            beatCustomerids = new List<int>();

                        beatCustomerids.AddRange(MonthBeat.Select(x => x.ActualRoutes).Where(x => x != null).SelectMany(x => x.Select(y => y.CustomerId)).ToList());
                    }
                    beatCustomerids = beatCustomerids.Distinct().ToList();

                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    var customerIdDt = new DataTable();
                    customerIdDt.Columns.Add("IntValue");
                    foreach (var item in beatCustomerids)
                    {
                        var dr = customerIdDt.NewRow();
                        dr["IntValue"] = item;
                        customerIdDt.Rows.Add(dr);
                    }
                    var param = new SqlParameter("customerId", customerIdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.IntValues";
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.Parameters.Add(new SqlParameter("@ExectiveId", peopleId));
                    cmd.CommandText = "[dbo].[GetBeatCustomerOrder]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandTimeout = 600;
                    cmd.Parameters.Add(param);

                    // Run the sproc
                    var reader = cmd.ExecuteReader();
                    var beatCustomerOrders = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<BeatCustomerOrder>(reader).ToList();
                    #endregion


                    var BeatCustomers = todayBeat.PlannedRoutes.Select(x => new BeatCustomer
                    {
                        CustomerId = x.CustomerId,
                        Active = x.Active,
                        TravalStart = x.TravalStart,
                        BillingAddress = x.BillingAddress,
                        IsVisited = x.IsVisited,
                        BeatNumber = x.BeatNumber.HasValue ? x.BeatNumber.Value : todayBeat.PlannedRoutes.Count + 1,
                        lat = x.lat,
                        AreaName = x.AreaName,
                        lg = x.lg,
                        Mobile = x.Mobile,
                        Name = x.Name,
                        IsKPP = x.IsKPP,
                        ShippingAddress = x.ShippingAddress,
                        ShopName = x.ShopName,
                        Skcode = x.Skcode,
                        WarehouseId = x.WarehouseId,
                        WarehouseName = x.WarehouseName,
                        MaxOrderCount = x.MaxOrderCount,
                        WtAvgAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId) ? beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId).FirstOrDefault().weightAvgAmount : 0,
                        WtAvgOrder = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId) ? beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId).FirstOrDefault().weightAvgOrder : 0,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today).Sum(z => z.lineItem) / beatCustomerOrders.Count(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today)) : 0,
                        TotalLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today).Sum(z => z.lineItem)) : 0,
                        TotalOrder = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) ? beatCustomerOrders.Count(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) : 0,
                        TotalOrderAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) ? Convert.ToInt32(Math.Round(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today).Sum(z => z.GrossAmount), 0)) : 0,
                        Comment = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId) ? todayBeat.ActualRoutes.FirstOrDefault(y => y.CustomerId == x.CustomerId).Comment : "",
                        Status = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today) ?
                                   "Ordered" : (!x.IsVisited ? "Not Visited" : (todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.ShopCloseImage))
                                   ? "Shop Closed - Skip" : ((CustomBeatPlans != null && CustomBeatPlans.Any(y => y.CustomerId == x.CustomerId)) ? "Reschedule" : (todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.Comment) && y.Comment.Contains("Not Visited")) ? "Not Visited" : "Visited"))))
                    }).ToList();


                    salesDeshboardData.MyBeat = new MyBeat
                    {
                        AreaName = todayBeat != null && todayBeat.PlannedRoutes != null ? todayBeat.PlannedRoutes.FirstOrDefault(x => !string.IsNullOrEmpty(x.ClusterName)).ClusterName + "-" + todayBeat.AssignmentDate.DayOfWeek.ToString() : "",
                        BeatCustomers = BeatCustomers,
                        TodayVisit = BeatCustomers != null ? BeatCustomers.Count : 0,
                        Visited = BeatCustomers != null && BeatCustomers.Any(x => x.IsVisited) ? BeatCustomers.Count(x => x.IsVisited) : 0,
                        AvgLineItem = BeatCustomers != null && BeatCustomers.Sum(x => x.TotalOrder) > 0 ? BeatCustomers.Sum(z => z.TotalLineItem) / BeatCustomers.Sum(x => x.TotalOrder) : 0,
                        BeatAmount = BeatCustomers != null ? BeatCustomers.Sum(z => z.TotalOrderAmount) : 0,
                        BeatOrder = BeatCustomers != null ? BeatCustomers.Sum(y => y.TotalOrder) : 0,
                        Conversion = BeatCustomers != null ? BeatCustomers.Where(y => y.TotalOrder > 0).Select(z => z.CustomerId).Distinct().Count() : 0,
                        AvgLineItemColor = "#ffffff",
                        BeatAmountColor = "#ffffff",
                        BeatOrderColor = "#ffffff",
                        ConversionColor = "#ffffff",
                        VisitedColor = "#ffffff",
                    };
                    if (beatTarget != null)
                    {
                        salesDeshboardData.MyBeat.VisitedColor = salesDeshboardData.MyBeat.Visited <= (salesDeshboardData.MyBeat.TodayVisit * beatTarget.VisitedPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.MyBeat.ConversionColor = salesDeshboardData.MyBeat.Conversion <= (salesDeshboardData.MyBeat.TodayVisit * beatTarget.ConversionPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.MyBeat.BeatOrderColor = salesDeshboardData.MyBeat.BeatOrder <= (salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.MyBeat.BeatAmountColor = salesDeshboardData.MyBeat.BeatAmount <= (salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.MyBeat.AvgLineItemColor = salesDeshboardData.MyBeat.AvgLineItem <= beatTarget.AvgLineItem ? completeTargetColor : IncompleteTargetColor;


                        salesDeshboardData.BeatTarget = new BeatTarget
                        {
                            AvgLineItem = beatTarget.AvgLineItem,
                            Conversion = Convert.ToInt32(salesDeshboardData.MyBeat.TodayVisit * beatTarget.ConversionPercent / 100),
                            CustomerCount = Convert.ToInt32(salesDeshboardData.MyBeat.TodayVisit * beatTarget.CustomerPercent / 100),
                            OrderCount = Convert.ToInt32((salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100)),
                            OrderAmount = Convert.ToInt32((salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount),
                            Visited = Convert.ToInt32(salesDeshboardData.MyBeat.TodayVisit * beatTarget.VisitedPercent / 100),
                        };
                    }
                    else
                    {
                        salesDeshboardData.BeatTarget = new BeatTarget
                        {
                            AvgLineItem = 0,
                            Conversion = 0,
                            CustomerCount = 0,
                            OrderCount = 0,
                            OrderAmount = 0,
                            Visited = 0,
                        };
                    }


                    salesDeshboardData.SalesMetricsDaily = new BeatSale
                    {
                        CustomerCount = beatCustomerOrders != null && beatCustomerOrders.Any(x => x.CreatedDate.Date == today) ? beatCustomerOrders.Where(x => x.CreatedDate.Date == today).Select(x => x.CustomerId).Distinct().Count() : 0,
                        TotalOrders = beatCustomerOrders != null && beatCustomerOrders.Any(x => x.CreatedDate.Date == today) ? beatCustomerOrders.Where(x => x.CreatedDate.Date == today).Count() : 0,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(x => x.CreatedDate.Date == today) ? Convert.ToDecimal(beatCustomerOrders.Where(x => x.CreatedDate.Date == today).Sum(x => x.lineItem)) / beatCustomerOrders.Where(x => x.CreatedDate.Date == today).Count() : 0,
                        TotalAmount = beatCustomerOrders != null && beatCustomerOrders.Any(x => x.CreatedDate.Date == today) ? Convert.ToInt32(Math.Round(beatCustomerOrders.Where(x => x.CreatedDate.Date == today).Sum(x => x.GrossAmount), 0)) : 0,
                        AvgLineItemColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                    };
                    if (beatTarget != null)
                    {
                        salesDeshboardData.SalesMetricsDaily.AvgLineItemColor = salesDeshboardData.SalesMetricsDaily.AvgLineItem < beatTarget.AvgLineItem ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SalesMetricsDaily.TotalOrdersColor = salesDeshboardData.SalesMetricsDaily.TotalOrders < (salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SalesMetricsDaily.CustomerCountColor = salesDeshboardData.SalesMetricsDaily.CustomerCount < (salesDeshboardData.MyBeat.TodayVisit * beatTarget.CustomerPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SalesMetricsDaily.TotalAmountColor = salesDeshboardData.SalesMetricsDaily.TotalOrders < (salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount ? completeTargetColor : IncompleteTargetColor;

                        salesDeshboardData.SalesTarget = new DataContracts.APIParams.SalesTarget
                        {
                            AvgLineItem = beatTarget.AvgLineItem,
                            CustomerCount = Convert.ToInt32(salesDeshboardData.MyBeat.TodayVisit * beatTarget.CustomerPercent / 100),
                            OrderCount = Convert.ToInt32((salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100)),
                            OrderAmount = Convert.ToInt32((salesDeshboardData.MyBeat.TodayVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount),
                        };
                    }
                    else
                    {
                        salesDeshboardData.SalesTarget = new DataContracts.APIParams.SalesTarget
                        {
                            AvgLineItem = 0,
                            CustomerCount = 0,
                            OrderCount = 0,
                            OrderAmount = 0,
                        };
                    }



                    var thisWeekStart = today.AddDays(-(int)today.DayOfWeek);
                    var weekBeats = MonthBeat.Where(x => x.AssignmentDate >= thisWeekStart && x.AssignmentDate <= today).SelectMany(p => p.PlannedRoutes.Select(x => new BeatCustomer
                    {
                        CustomerId = x.CustomerId,
                        Active = x.Active,
                        BillingAddress = x.BillingAddress,
                        IsVisited = x.IsVisited,
                        BeatNumber = x.BeatNumber.HasValue ? x.BeatNumber.Value : todayBeat.PlannedRoutes.Count + 1,
                        lat = x.lat,
                        lg = x.lg,
                        Mobile = x.Mobile,
                        Name = x.Name,
                        IsKPP = x.IsKPP,
                        ShippingAddress = x.ShippingAddress,
                        ShopName = x.ShopName,
                        Skcode = x.Skcode,
                        WarehouseId = x.WarehouseId,
                        WarehouseName = x.WarehouseName,
                        AreaName = x.AreaName,
                        MaxOrderCount = x.MaxOrderCount,
                        WtAvgAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId) ? beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId).FirstOrDefault().weightAvgAmount : 0,
                        WtAvgOrder = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId) ? beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId).FirstOrDefault().weightAvgOrder : 0,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Average(z => z.lineItem)) : 0,
                        TotalLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date == today).Sum(z => z.lineItem)) : 0,
                        TotalOrder = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? beatCustomerOrders.Count(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) : 0,
                        TotalOrderAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToInt32(Math.Round(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Sum(z => z.GrossAmount), 0)) : 0,
                        //Comment = p.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId) ? todayBeat.ActualRoutes.FirstOrDefault(y => y.CustomerId == x.CustomerId).Comment : "",
                        Status = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ?
                                    //"Ordered" : (!x.IsVisited ? "Not Visited" : (p.ActualRoutes != null && p.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.ShopCloseImage))
                                    //? "Shop Closed - Skip" : "Visited"))
                                    "Ordered" : (!x.IsVisited ? "Not Visited" : (todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.ShopCloseImage))
                                   ? "Shop Closed - Skip" : ((CustomBeatPlans != null && CustomBeatPlans.Any(y => y.CustomerId == x.CustomerId)) ? "Reschedule" : (todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.Comment) && y.Comment.Contains("Not Visited")) ? "Not Visited" : "Visited"))))
                    }).ToList()).ToList();


                    salesDeshboardData.SaleMetricsWeekly = new BeatSaleWeekly
                    {
                        BeatCustomers = weekBeats,
                        PlannedVisit = weekBeats.Count(),
                        Visited = weekBeats.Where(x => x.IsVisited).Count(),
                        NotVisited = weekBeats.Where(x => !x.IsVisited).Count(),
                        CustomerCount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? beatCustomerOrders.Where(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Select(x => x.CustomerId).Distinct().Count() : 0,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Sum(z => z.lineItem)) / beatCustomerOrders.Where(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Count() : 0,
                        TotalAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToInt32(Math.Round(beatCustomerOrders.Where(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Sum(z => z.GrossAmount), 0)) : 0,
                        TotalOrders = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? beatCustomerOrders.Count(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) : 0,
                        Conversion = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? beatCustomerOrders.Where(y => y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Select(z => z.CustomerId).Distinct().Count() : 0,
                        AvgLineItemColor = "#ffffff",
                        ConversionColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                        NotVisitedColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                        VisitedColor = "#ffffff",
                    };

                    if (beatTarget != null)
                    {
                        salesDeshboardData.SaleMetricsWeekly.AvgLineItemColor = salesDeshboardData.SaleMetricsWeekly.AvgLineItem < beatTarget.AvgLineItem ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsWeekly.TotalOrdersColor = salesDeshboardData.SaleMetricsWeekly.TotalOrders < (salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.OrderPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsWeekly.ConversionColor = salesDeshboardData.SaleMetricsWeekly.Conversion < (salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.ConversionPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsWeekly.TotalAmountColor = salesDeshboardData.SaleMetricsWeekly.TotalAmount < (salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsWeekly.VisitedColor = salesDeshboardData.SaleMetricsWeekly.Visited < (salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.VisitedPercent / 100) ? completeTargetColor : IncompleteTargetColor;

                        salesDeshboardData.SalesWeeklyTarget = new BeatTarget
                        {
                            AvgLineItem = beatTarget.AvgLineItem,
                            Conversion = Convert.ToInt32(salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.ConversionPercent / 100),
                            CustomerCount = Convert.ToInt32(salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.CustomerPercent / 100),
                            OrderCount = Convert.ToInt32((salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.OrderPercent / 100)),
                            OrderAmount = Convert.ToInt32((salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount),
                            Visited = Convert.ToInt32(salesDeshboardData.SaleMetricsWeekly.PlannedVisit * beatTarget.VisitedPercent / 100),
                        };
                    }
                    else
                    {
                        salesDeshboardData.SalesWeeklyTarget = new BeatTarget
                        {
                            AvgLineItem = 0,
                            Conversion = 0,
                            CustomerCount = 0,
                            OrderCount = 0,
                            OrderAmount = 0,
                            Visited = 0,
                        };
                    }

                    ClusterPareto clusterPareto = new ClusterPareto();

                    if (clusterId.HasValue)
                    {
                        var cmd1 = context.Database.Connection.CreateCommand();
                        cmd1.Parameters.Add(new SqlParameter("@warehouseid", people.WarehouseId));
                        cmd1.Parameters.Add(new SqlParameter("@clusterid", clusterId));
                        cmd1.CommandText = "[dbo].[GetCustomerItemPareto]";
                        cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd1.CommandTimeout = 600;


                        // Run the sproc
                        var reader1 = cmd1.ExecuteReader();
                        clusterPareto = ((IObjectContextAdapter)context)
                        .ObjectContext
                        .Translate<ClusterPareto>(reader1).FirstOrDefault();
                    }

                    var monthBeats = MonthBeat.SelectMany(p => p.PlannedRoutes.Select(x => new BeatCustomer
                    {
                        CustomerId = x.CustomerId,
                        Active = x.Active,
                        BillingAddress = x.BillingAddress,
                        IsVisited = x.IsVisited,
                        BeatNumber = x.BeatNumber.HasValue ? x.BeatNumber.Value : todayBeat.PlannedRoutes.Count + 1,
                        lat = x.lat,
                        lg = x.lg,
                        Mobile = x.Mobile,
                        Name = x.Name,
                        IsKPP = x.IsKPP,
                        ShippingAddress = x.ShippingAddress,
                        ShopName = x.ShopName,
                        Skcode = x.Skcode,
                        WarehouseId = x.WarehouseId,
                        WarehouseName = x.WarehouseName,
                        AreaName = x.AreaName,
                        MaxOrderCount = x.MaxOrderCount,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToDecimal(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Average(z => z.lineItem)) : 0,
                        TotalOrder = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? beatCustomerOrders.Count(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) : 0,
                        TotalOrderAmount = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ? Convert.ToInt32(Math.Round(beatCustomerOrders.Where(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today).Sum(z => z.GrossAmount), 0)) : 0,
                        //Comment = p.ActualRoutes != null && todayBeat.ActualRoutes.Any(y => y.CustomerId == x.CustomerId) ? todayBeat.ActualRoutes.FirstOrDefault(y => y.CustomerId == x.CustomerId).Comment : "",
                        Status = beatCustomerOrders != null && beatCustomerOrders.Any(y => y.CustomerId == x.CustomerId && y.CreatedDate.Date >= thisWeekStart && y.CreatedDate.Date <= today) ?
                                   "Ordered" : (!x.IsVisited ? "Not Visited" : (p.ActualRoutes != null && p.ActualRoutes.Any(y => y.CustomerId == x.CustomerId && !string.IsNullOrEmpty(y.ShopCloseImage))
                                   ? "Shop Closed - Skip" : "Visited"))
                    }).ToList()).ToList();

                    salesDeshboardData.SaleMetricsMonthly = new BeatSaleMonthly
                    {
                        //BeatCustomers= monthBeats,
                        CustomerCount = beatCustomerOrders != null && beatCustomerOrders.Any() ? beatCustomerOrders.Select(x => x.CustomerId).Distinct().Count() : 0,
                        TotalAmount = beatCustomerOrders != null && beatCustomerOrders.Any() ? Convert.ToInt32(Math.Round(beatCustomerOrders.Sum(z => z.GrossAmount), 0)) : 0,
                        TotalOrders = beatCustomerOrders != null && beatCustomerOrders.Any() ? beatCustomerOrders.Count() : 0,
                        AvgLineItem = beatCustomerOrders != null && beatCustomerOrders.Any() ? Convert.ToDecimal(beatCustomerOrders.Sum(z => z.lineItem)) / beatCustomerOrders.Count() : 0,
                        AvgLineItemColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                        CustomerPareto = clusterPareto.CustomerPareto,
                        ProductPareto = clusterPareto.ItemPareto
                    };


                    if (beatTarget != null)
                    {
                        salesDeshboardData.SaleMetricsMonthly.AvgLineItemColor = salesDeshboardData.SaleMetricsMonthly.AvgLineItem < beatTarget.AvgLineItem ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsMonthly.TotalOrdersColor = salesDeshboardData.SaleMetricsMonthly.TotalOrders < (monthBeats.Count() * beatTarget.OrderPercent / 100) ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsMonthly.TotalAmountColor = salesDeshboardData.SaleMetricsMonthly.TotalAmount < (monthBeats.Count() * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount ? completeTargetColor : IncompleteTargetColor;
                        salesDeshboardData.SaleMetricsMonthly.CustomerCountColor = salesDeshboardData.SaleMetricsMonthly.CustomerCount < (monthBeats.Count() * beatTarget.CustomerPercent / 100) ? completeTargetColor : IncompleteTargetColor;

                        salesDeshboardData.SalesMonthlyTarget = new SalesMonthlyTarget
                        {
                            AvgLineItem = beatTarget.AvgLineItem,
                            CustomerCount = Convert.ToInt32(monthBeats.Count() * beatTarget.CustomerPercent / 100),
                            OrderCount = Convert.ToInt32(monthBeats.Count() * beatTarget.OrderPercent / 100),
                            OrderAmount = Convert.ToInt32(monthBeats.Count() * beatTarget.OrderPercent / 100) * beatTarget.AvgOrderAmount,
                            CustomerPareto = beatTarget.CustomerPareto,
                            ProductPareto = beatTarget.ProductPareto
                        };

                    }
                    else
                    {
                        salesDeshboardData.SalesMonthlyTarget = new SalesMonthlyTarget
                        {
                            AvgLineItem = 0,
                            CustomerCount = 0,
                            OrderCount = 0,
                            OrderAmount = 0,
                            CustomerPareto = 0,
                            ProductPareto = 0
                        };
                    }

                }
                else
                {
                    salesDeshboardData.MyBeat = new MyBeat
                    {
                        AvgLineItemColor = "#ffffff",
                        BeatAmountColor = "#ffffff",
                        BeatOrderColor = "#ffffff",
                        ConversionColor = "#ffffff",
                        VisitedColor = "#ffffff",
                    };
                    salesDeshboardData.SaleMetricsWeekly = new BeatSaleWeekly
                    {

                        AvgLineItemColor = "#ffffff",
                        ConversionColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                        NotVisitedColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                        VisitedColor = "#ffffff",
                    };
                    salesDeshboardData.SaleMetricsMonthly = new BeatSaleMonthly
                    {
                        AvgLineItemColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                    };
                    salesDeshboardData.SalesMetricsDaily = new BeatSale
                    {
                        AvgLineItemColor = "#ffffff",
                        TotalAmountColor = "#ffffff",
                        TotalOrdersColor = "#ffffff",
                        CustomerCountColor = "#ffffff",
                    };
                }

                if (MonthCustomers != null && MonthCustomers.Any())
                {
                    var customerIds = MonthCustomers.Select(x => x.CustomerId).ToList();
                    var newCustSale = context.DbOrderMaster.Where(x => customerIds.Contains(x.CustomerId) && x.OrderTakenSalesPersonId == peopleId).Select(x => new { x.CustomerId, x.OrderId, x.GrossAmount }).ToList();
                    salesDeshboardData.CustomerAcquisitionMonthly = new BeatSale
                    {
                        CustomerCount = MonthCustomers.Count(),
                        TotalAmount = newCustSale != null && newCustSale.Any() ? Convert.ToInt32(Math.Round(newCustSale.Sum(x => x.GrossAmount), 0)) : 0,
                        TotalOrders = newCustSale != null && newCustSale.Any() ? newCustSale.Count() : 0,
                    };
                }
                else
                {
                    salesDeshboardData.CustomerAcquisitionMonthly = new BeatSale();
                }
                try
                {
                    #region  CancellationReportResDc
                    CancellationReportResDc result = new CancellationReportResDc();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    var cmdCancellation = context.Database.Connection.CreateCommand();
                    cmdCancellation.CommandText = "[Cancellation].[SalesManReport]";
                    cmdCancellation.CommandType = System.Data.CommandType.StoredProcedure;
                    cmdCancellation.Parameters.Add(new SqlParameter("@peopleId", peopleId));
                    var readerCancellation = cmdCancellation.ExecuteReader();
                    var CancellationReport = ((IObjectContextAdapter)context)
                     .ObjectContext
                     .Translate<CancellationReportDc>(readerCancellation).FirstOrDefault();
                    if (CancellationReport != null)
                    {
                        //on amount Cancellation
                        result.CancelAmount = Math.Round(CancellationReport.CurrentMonthCancelValue, 2);  //Current Month Cancellation amount   

                        // on count Cancellation
                        result.CancelCount = CancellationReport.CurrentMonthCancelCount; // Current month Cancellation count
                        result.CancelCountDiff = result.CancelCount - CancellationReport.LastMonthCancelCount;

                        double currentCancelCountPercent = Math.Round(CancellationReport.CurrentMonthCancelCount > 0 ? Convert.ToDouble(CancellationReport.CurrentMonthCancelCount) / CancellationReport.CurrentMonthTotalCount * 100 : 0, 2);
                        double lastCancelCountPercent = Math.Round(CancellationReport.LastMonthCancelCount > 0 ? Convert.ToDouble(CancellationReport.LastMonthCancelCount) / CancellationReport.LastMonthTotalCount * 100 : 0, 2);
                        result.CompareCountPercent = Math.Round(currentCancelCountPercent - lastCancelCountPercent, 2);

                        //Cancellation  Percent on value
                        result.CancellationPercant = Math.Round(CancellationReport.CurrentMonthCancelValue > 0 ? Convert.ToDouble(CancellationReport.CurrentMonthCancelValue) / CancellationReport.CurrentMonthTotalValue * 100 : 0, 2);
                        double lastCancellationPercant = CancellationReport.LastMonthCancelValue > 0 ? Convert.ToDouble(CancellationReport.LastMonthCancelValue) / CancellationReport.LastMonthTotalValue * 100 : 0;
                        result.CompareCancellationPercant = Math.Round(result.CancellationPercant - lastCancellationPercant, 2);
                        if (result.CancellationPercant >= 0 && result.CancellationPercant <= 5)
                        {
                            result.Backgroundcolor = "#FFFFFF";
                            result.WarningCount = 0;
                        }
                        else if (result.CancellationPercant > 5 && result.CancellationPercant < 10)
                        {
                            result.Backgroundcolor = "#FFFF00"; result.WarningCount = 0;
                        }
                        else
                        {
                            result.Backgroundcolor = "#FF0000"; //red
                            result.WarningCount = Convert.ToInt32(result.CancellationPercant / 10);
                        }

                    }
                    salesDeshboardData.CancellationReports = result;
                    #endregion
                }
                catch (Exception s) { }

            }
            return salesDeshboardData;
        }

        [HttpGet]
        [Route("GlobalSearch")]
        [AllowAnonymous]
        public HttpResponseMessage GlobalsearchV1(int PeopleId, int WarehouseId, string Globalkey)
        {
            using (AuthContext db = new AuthContext())
            {

                GlobalcustomerDetail obj = new GlobalcustomerDetail();

                var customer = new List<SalespDTO>();
                if (!string.IsNullOrEmpty(Globalkey) && Globalkey.Length > 5)
                {

                    var Warehouseid = new SqlParameter
                    {
                        ParameterName = "WarehouseId",
                        Value = WarehouseId,

                    };
                    var ParamPeopleId = new SqlParameter
                    {
                        ParameterName = "PeopleId",
                        Value = PeopleId,

                    };
                    var GlobalKey = new SqlParameter
                    {
                        ParameterName = "Globalkey",
                        Value = Globalkey,

                    };
                    customer = db.Database.SqlQuery<SalespDTO>("CustomerGlobalSearch @WarehouseId,@PeopleId,@Globalkey", Warehouseid, ParamPeopleId, GlobalKey).ToList();
                }
                if (customer.Count() > 0)
                {
                    obj = new GlobalcustomerDetail()
                    {
                        customers = customer,
                        Status = true,
                        Message = "Customer Found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, obj);
                }
                else
                {
                    obj = new GlobalcustomerDetail()
                    {
                        customers = customer,
                        Status = false,
                        Message = "No Customer found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, obj);
                }

            }
        }

        [HttpGet]
        [Route("Search")]
        public HttpResponseMessage Search(int PeopleId, string key)
        {
            using (AuthContext db = new AuthContext())
            {
                var customer = db.Customers.Where(c => (c.Skcode.Contains(key) || c.ShopName.Contains(key) || c.Mobile.Contains(key)) && c.Deleted == false).ToList();
                var warehouseIds = customer.Select(x => x.Warehouseid).Distinct().ToList();
                var warehouses = db.Warehouses.Where(x => warehouseIds.Contains(x.WarehouseId)).ToList();
                var customerids = customer.Select(x => x.CustomerId).ToList();
                var custDocs = db.CustomerDocs.Where(x => customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                var gstDocttypeid = db.CustomerDocTypeMasters.FirstOrDefault(x => x.IsActive && x.DocType == "GST")?.Id;
                var clusterIds = customer.Select(x => x.ClusterId).ToList();
                var clusterExecutive = db.ClusterStoreExecutives.Where(x => clusterIds.Contains(x.ClusterId) && x.IsActive && !x.IsDeleted.Value).Select(x => new { x.ClusterId, x.ExecutiveId }).ToList();

                customer.ForEach(x =>
                {
                    x.ExecutiveId = clusterExecutive.Any(y => y.ClusterId == x.ClusterId && y.ExecutiveId == PeopleId) ? clusterExecutive.FirstOrDefault(y => y.ClusterId == x.ClusterId && y.ExecutiveId == PeopleId).ExecutiveId : 0;
                    x.WarehouseName = x.Warehouseid.HasValue ? warehouses.FirstOrDefault(z => z.WarehouseId == x.Warehouseid.Value)?.WarehouseName : "";
                    if (gstDocttypeid.HasValue && custDocs.Any(y => y.CustomerDocTypeMasterId != gstDocttypeid.Value))
                    {
                        x.CustomerDocTypeMasterId = custDocs.FirstOrDefault(y => y.CustomerDocTypeMasterId != gstDocttypeid.Value).CustomerDocTypeMasterId;
                    }

                });

                return Request.CreateResponse(HttpStatusCode.OK, customer);
            }
        }

        [Route("DeliveryCharge")]
        [HttpGet]
        public async Task<DeliveryChageDC> GetWarehouseDeliveryCharge(int WarehouseId, int PeopleId)
        {
            DeliveryChageDC Commission = new DeliveryChageDC();
            if (WarehouseId > 0 && PeopleId > 0)
            {
                using (AuthContext context = new AuthContext())
                {
                    var query = "Select delcharge.*,sum(agentcom.Amount) as CommissionAmt from DeliveryCharges delcharge inner join Customers cust on delcharge.WarehouseId = cust.Warehouseid inner join AgentCommissionforCities agentcom on agentcom.CustomerId = cust.CustomerId where delcharge.WarehouseId = " + WarehouseId + " and agentcom.PeopleId = " + PeopleId + " and delcharge.IsActive = 1 and delcharge.isDeleted = 0 group by delcharge.[id],delcharge.[CompanyId],delcharge.[min_Amount],delcharge.[max_Amount] ,delcharge.[del_Charge],delcharge.[WarehouseId],delcharge.[cluster_Id],delcharge.[warhouse_Name],delcharge.[cluster_Name],delcharge.[IsActive],delcharge.[isDeleted],delcharge.IsDistributor";
                    Commission = await context.Database.SqlQuery<DeliveryChageDC>(query).FirstOrDefaultAsync();
                }
            }
            return Commission;
        }

        [Route("PlanNextDayBeat")]
        [HttpGet]
        public async Task<bool> PlanNextDayBeat(int customerId, int peopleId, DateTime planDate, bool isAddOnBeat = false)
        {
            if (!isAddOnBeat)
            {
                MongoDbHelper<NextDayBeatPlan> mongoDbHelper = new MongoDbHelper<NextDayBeatPlan>();
                bool result = await mongoDbHelper.InsertAsync(new NextDayBeatPlan
                {
                    CustomerId = customerId,
                    ExecutiveId = peopleId,
                    PlanDate = planDate.Date,
                    CreatedDate = DateTime.Now
                });
                return result;
            }
            else
            {
                //using (var context = new AuthContext())
                //{
                //    string day = planDate.DayOfWeek.ToString();
                //    if (!context.CustomerExecutiveMappings.Any(x => x.ExecutiveId == peopleId && x.CustomerId == customerId && x.Day == day && x.IsActive))
                //    {
                //        int beat = context.CustomerExecutiveMappings.Count(x => x.ExecutiveId == peopleId && x.Day == day && x.IsActive);
                //        context.CustomerExecutiveMappings.Add(new Model.Store.CustomerExecutiveMapping
                //        {
                //            CustomerId = customerId,
                //            CreatedDate = DateTime.Now,
                //            CreatedBy = peopleId,
                //            Beat = beat,
                //            Day = day,
                //            ExecutiveId = peopleId,
                //            IsActive = true,
                //            IsDeleted = false
                //        });
                //        context.Commit();
                //    }
                //}
                return true;
            }
        }

        [Route("BeatStart/{peopleId}/{customerId}")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DateTime?> BeatStart(int peopleId, int customerId)
        {
            BeatsManager manager = new BeatsManager();
            return await manager.BeatStart(peopleId, customerId);
        }

        private List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> GetCatSubCatwithStores(int peopleid)
        {
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> results = new List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand>();
            using (var context = new AuthContext())
            {
                var query = string.Format("exec IsSalesAppLead {0}", peopleid);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleid && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();
                    var universalStoreIds = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList();
                    if (universalStoreIds != null && universalStoreIds.Any())
                        storeids.AddRange(universalStoreIds);
                }
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = retailerAppManager.GetStoreWithDetail();

                results = StoreCategorySubCategoryBrands.Where(x => storeids.Contains(x.StoreId)).ToList();
            }
            return results;
        }
        [Route("SalesSubCategoryOffer")]
        [HttpGet]
        public async Task<OfferdataDc> SalesSubCategoryOffer(int customerId, int PeopleId, int SubCategoryId)
        {
            List<OfferDc> FinalBillDiscount = new List<OfferDc>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            OfferdataDc res;
            using (AuthContext context = new AuthContext())
            {
                CustomersManager manager = new CustomersManager();

                List<BillDiscountOfferDc> billDiscountOfferDcs = manager.GetCustomerBillDiscount(customerId, "Retailer App");
                if (billDiscountOfferDcs.Any())
                {
                    foreach (var billDiscountOfferDc in billDiscountOfferDcs.Where(x => x.BillDiscountType == "subcategory" && x.OfferBillDiscountItems.Any(y => y.Id == SubCategoryId)))
                    {

                        var bdcheck = new OfferDc
                        {
                            OfferId = billDiscountOfferDc.OfferId,

                            OfferName = billDiscountOfferDc.OfferName,
                            OfferCode = billDiscountOfferDc.OfferCode,
                            OfferCategory = billDiscountOfferDc.OfferCategory,
                            OfferOn = billDiscountOfferDc.OfferOn,
                            start = billDiscountOfferDc.start,
                            end = billDiscountOfferDc.end,
                            DiscountPercentage = billDiscountOfferDc.DiscountPercentage,
                            BillAmount = billDiscountOfferDc.BillAmount,
                            LineItem = billDiscountOfferDc.LineItem,
                            Description = billDiscountOfferDc.Description,
                            BillDiscountOfferOn = billDiscountOfferDc.BillDiscountOfferOn,
                            BillDiscountWallet = billDiscountOfferDc.BillDiscountWallet,
                            IsMultiTimeUse = billDiscountOfferDc.IsMultiTimeUse,
                            IsUseOtherOffer = billDiscountOfferDc.IsUseOtherOffer,
                            IsScratchBDCode = billDiscountOfferDc.IsScratchBDCode,
                            BillDiscountType = billDiscountOfferDc.BillDiscountType,
                            OfferAppType = billDiscountOfferDc.OfferAppType,
                            ApplyOn = billDiscountOfferDc.ApplyOn,
                            WalletType = billDiscountOfferDc.WalletType,
                            OfferBillDiscountItems = billDiscountOfferDc.OfferBillDiscountItems.Select(y => new OfferBillDiscountItemDc
                            {
                                CategoryId = y.CategoryId,
                                Id = y.Id,
                                IsInclude = y.IsInclude,
                                SubCategoryId = y.SubCategoryId
                            }).ToList(),
                            OfferItems = billDiscountOfferDc.OfferItems.Select(y => new OfferItemdc
                            {
                                IsInclude = y.IsInclude,
                                itemId = y.itemId
                            }).ToList(),
                            RetailerBillDiscountFreeItemDcs = null
                        };

                        FinalBillDiscount.Add(bdcheck);
                    }
                }
                res = new OfferdataDc()
                {
                    offer = FinalBillDiscount,
                    Status = true,
                    Message = "Success"
                };
                return res;
            }

        }

        [Route("SalesHomePageGetSubSubCategories")]
        [HttpGet]
        public async Task<CatScatSscatDCs> SalesHomePageGetSubSubCategories(string lang, int subCategoryId, int PeopleId, int warehouseId)
        {
            using (var db = new AuthContext())
            {
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<Category> Cat = new List<Category>();
                List<SubCategory> Scat = new List<SubCategory>();
                List<SubsubCategory> SsCat = new List<SubsubCategory>();
                try
                {
                    var subCategoryQuery = "select SubCategoryId, 0 Categoryid,  '' CategoryName, [SubCategoryId],  (Case when '" + lang + "'='hi' and ( HindiName is not null or HindiName='') then HindiName else SubcategoryName end) SubcategoryName ,[LogoUrl],[itemcount],StoreBanner from SubCategories where IsActive=1 and Deleted=0 and SubCategoryId=" + subCategoryId;

                    var brandQuery = "Exec GetRetailerBrandBySubCategoryId " + warehouseId + "," + subCategoryId + "," + lang;
                    var Scatv = db.Database.SqlQuery<SubCategoryDCs>(subCategoryQuery).ToList();
                    var SsCatv = db.Database.SqlQuery<SubsubCategoryDcs>(brandQuery).ToList();

                    CatScatSscatDCs CatScatSscatcdc = new CatScatSscatDCs
                    {
                        subCategoryDC = Mapper.Map(Scatv).ToANew<List<SubCategoryDCs>>(),
                        subsubCategoryDc = Mapper.Map(SsCatv).ToANew<List<SubsubCategoryDcs>>(),
                    };


                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        CatScatSscatcdc.subsubCategoryDc = CatScatSscatcdc.subsubCategoryDc.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                        CatScatSscatcdc.subCategoryDC = CatScatSscatcdc.subCategoryDC.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId))).ToList();
                    }
                    #endregion


                    if (CatScatSscatcdc.subsubCategoryDc != null && CatScatSscatcdc.subsubCategoryDc.Any())
                    {

                        List<string> strCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId + "-" + x.BrandId).Distinct().ToList();
                        List<string> companyStrCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId).Distinct().ToList();


                        CatScatSscatcdc.subsubCategoryDc = CatScatSscatcdc.subsubCategoryDc.Where(x => !(strCondition.Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.SubsubCategoryid))).ToList();
                        CatScatSscatcdc.subCategoryDC = CatScatSscatcdc.subCategoryDC.Where(x => !(companyStrCondition.Contains(x.Categoryid + " " + x.SubCategoryId))).ToList();

                    }

                    return CatScatSscatcdc;
                }
                catch (Exception ex)
                {
                    logger.Error("Error in SalesHomePageGetSubSubCategories " + ex.Message);
                    return null;
                }
            }
        }

        [Route("SalesGetItembySubCatAndBrand")]
        [HttpGet]
        public async Task<ItemListDc> SalesGetItembySubCatAndBrand(string lang, int PeopleId, int warehouseId, int scatid, int sscatid)
        {
            using (var context = new AuthContext())
            {
                List<ItemListDc> brandItem = new List<ItemListDc>();
                ItemListDc item = new ItemListDc();
                List<ItemDataDC> newdata = new List<ItemDataDC>();

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetItemBySubCatAndBrand]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@sscatid", sscatid));
                cmd.Parameters.Add(new SqlParameter("@scatid", scatid));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                newdata = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<ItemDataDC>(reader).ToList();


                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                foreach (var it in newdata)
                {
                    it.dreamPoint = it.dreamPoint.HasValue ? it.dreamPoint : 0;
                    it.marginPoint = it.marginPoint.HasValue ? it.marginPoint : 0;
                    if (!it.IsOffer)
                    {
                        /// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //salesman 0.2=(0.02 * 10=0.2)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }

                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                }

                item.ItemMasters = new List<ItemDataDC>();
                item.ItemMasters.AddRange(newdata);

                ItemListDc res = new ItemListDc();
                if (item.ItemMasters != null && item.ItemMasters.Any())
                {
                    res.Status = true;
                    res.Message = "Success";
                    res.ItemMasters = item.ItemMasters;
                    return res;
                }
                else
                {
                    res.Status = false;
                    res.Message = "Failed";
                    return res;
                }
            }
        }

        [Route("GetAllSalesStore")]
        [HttpGet]
        public async Task<List<RetailerStore>> GetAllSalesStore(int PeopleId, int warehouseId, string lang)
        {
            List<RetailerStore> retailerStore = new List<RetailerStore>();
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetAllStore]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@lang", lang));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                retailerStore = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<RetailerStore>(reader).ToList();

                #region Mappedstore
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                if (retailerStore != null && retailerStore.Any())
                {
                    List<int> Subcatids = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                    retailerStore = retailerStore.Where(x => Subcatids.Contains(x.SubCategoryId)).ToList();
                }
                #endregion
                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (retailerStore != null && retailerStore.Any() && blockBarnds != null && blockBarnds.Any())
                {
                    retailerStore = retailerStore.Where(x => !(blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId))).ToList();
                }
                #endregion
            }
            return retailerStore;
        }

        [Route("UpdateProfileImage")]
        [HttpPost]
        public async Task<bool> UpdateProfileImage(UpdateSalesManProfileImageDc obj)
        {
            bool result = false;
            if (obj != null && obj.PeopleId > 0 && obj.ProfilePic != null)
            {
                using (var db = new AuthContext())
                {
                    var person = await db.Peoples.Where(u => u.PeopleID == obj.PeopleId).FirstOrDefaultAsync();
                    person.ProfilePic = obj.ProfilePic;
                    person.UpdatedDate = DateTime.Now;
                    db.Entry(person).State = EntityState.Modified;
                    result = db.Commit() > 0;
                }
            }
            return result;
        }

        [Route("NotApprovedNotification")]
        [HttpGet]
        public async Task<List<PeopleSentNotificationDc>> NotApprovedNotification(int PeopleId)
        {
            int ApproveTimeLeft = Convert.ToInt32(ConfigurationManager.AppSettings["ApproveNotifyTimeLeftInMinute"]);

            DateTime dt1 = DateTime.Now;
            using (var context = new AuthContext())
            {
                //var param = new SqlParameter("PeopleId", PeopleId);
                //var NotApprovedList = await context.Database.SqlQuery<PeopleSentNotificationDc>("exec Operation.NotApprovedNotification @PeopleId", param).ToListAsync();
                SalesAppManager manager = new SalesAppManager();
                var NotApprovedList = manager.NotApprovedNotificationManager(PeopleId);
                NotApprovedList.ForEach(x =>
                {
                    x.TimeLeft = x.TimeLeft.AddMinutes(ApproveTimeLeft); // from Create date
                    if (!string.IsNullOrEmpty(x.Shopimage) && !x.Shopimage.Contains("http"))
                    {
                        x.Shopimage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , x.Shopimage);
                    }
                });
                return NotApprovedList;
            }
        }

        [Route("GetallNotification")]
        [HttpGet]
        public PaggingDatas GetallNotification(int skip, int take, int PeopleId)
        {
            int ApproveTimeLeft = Convert.ToInt32(ConfigurationManager.AppSettings["ApproveNotifyTimeLeftInMinute"]);

            using (var context = new AuthContext())
            {
                DateTime dt1 = DateTime.Now;
                PaggingDatas data = new PaggingDatas();
                context.Database.CommandTimeout = 600;
                SalesAppManager manager = new SalesAppManager();
                skip = (take - 1) * skip;
                var PeopleSentNotificationDc = manager.GetPeopleSentNotificationDetail(skip, take, PeopleId);
                //    var query = "[Operation].[GetPeopleNotification] " + PeopleId.ToString() + "," + ((take - 1) * skip).ToString() + "," + take;
                //    var PeopleSentNotificationDc = context.Database.SqlQuery<PeopleSentNotificationDc>(query).ToList();
                PeopleSentNotificationDc.ForEach(x =>
                {
                    x.TimeLeft = x.TimeLeft.AddMinutes(ApproveTimeLeft); // from Create date

                    if (!string.IsNullOrEmpty(x.Shopimage) && !x.Shopimage.Contains("http"))
                    {
                        x.Shopimage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , x.Shopimage);
                    }
                });
                data.notificationmaster = PeopleSentNotificationDc;
                data.total_count = PeopleSentNotificationDc != null && PeopleSentNotificationDc.Any() ? PeopleSentNotificationDc.FirstOrDefault().TotalCount : 0;
                return data;
            }
        }

        [Route("GetCustomerDocType")]
        [HttpGet]
        public async Task<dynamic> GetCustomerDocType(int warehouseId, int PeopleId)
        {
            using (AuthContext db = new AuthContext())
            {
                var CustomerDocTypes = await db.CustomerDocTypeMasters.Where(x => x.IsActive).ToListAsync();
                return Request.CreateResponse(HttpStatusCode.OK, CustomerDocTypes);
            }

        }

        public string skcode()
        {
            using (AuthContext db = new AuthContext())
            {
                var query = "select max(cast(replace(skcode,'SK','') as bigint)) from customers ";
                var intSkCode = db.Database.SqlQuery<long>(query).FirstOrDefault();
                var skcode = "SK" + (intSkCode + 1);
                bool flag = false;
                while (flag == false)
                {
                    var check = db.Customers.Any(s => s.Skcode.Trim().ToLower() == skcode.Trim().ToLower());

                    if (!check)
                    {
                        flag = true;
                        return skcode;
                    }
                    else
                    {
                        intSkCode += 1;
                        skcode = "SK" + intSkCode;
                    }
                }

                return skcode;
            }
        }
        [Route("CheckOTP")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<HttpResponseMessage> CheckOTP(SalesCustomerRegistor otpCheckDc)
        {
            MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP> mongoDbHelper = new MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP>();
            var cartPredicate = PredicateBuilder.New<Model.CustomerOTP.RetailerCustomerOTP>(x => x.Mobile == otpCheckDc.MobileNumber);

            var CustomerOTPs = mongoDbHelper.Select(cartPredicate).ToList();
            if (CustomerOTPs != null && CustomerOTPs.Any(x => x.Otp == otpCheckDc.Otp))
            {
                foreach (var item in CustomerOTPs)
                {
                    await mongoDbHelper.DeleteAsync(item.Id);
                }

                using (var context = new AuthContext())
                {
                    People people = context.Peoples.Where(q => q.PeopleID == otpCheckDc.PeopleId).FirstOrDefault();
                    var cust = context.Customers.Where(x => x.Deleted == false && x.Mobile == otpCheckDc.MobileNumber).FirstOrDefault();
                    Cluster dd = null;
                    if (cust != null)
                    {
                        cust.Skcode = skcode();
                        cust.ShopName = otpCheckDc.ShopName;
                        cust.Shopimage = otpCheckDc.Shopimage;
                        cust.Mobile = otpCheckDc.MobileNumber;
                        cust.Active = false;
                        cust.Deleted = false;
                        cust.CreatedBy = people.DisplayName;
                        cust.CreatedDate = indianTime;
                        cust.lat = otpCheckDc.lat;
                        cust.lg = otpCheckDc.lg;
                        cust.Shoplat = otpCheckDc.lat;
                        cust.Shoplg = otpCheckDc.lg;
                        #region to assign cluster ID and determine if it is in cluster or not.

                        if (cust.lat != 0 && cust.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(cust.lat).Append("', '").Append(cust.lg).Append("')");
                            var clusterId = context.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                cust.InRegion = false;
                            }
                            else
                            {
                                var agent = context.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    cust.AgentCode = Convert.ToString(agent.AgentId);


                                cust.ClusterId = clusterId;
                                dd = context.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                cust.ClusterName = dd.ClusterName;
                                cust.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            cust.Warehouseid = dd.WarehouseId;
                            cust.WarehouseName = dd.WarehouseName;
                            cust.ClusterId = dd.ClusterId;
                            cust.ClusterName = dd.ClusterName;
                            cust.Cityid = dd.CityId;
                            cust.City = dd.CityName;
                            cust.ShippingCity = dd.CityName;
                            cust.IsCityVerified = true;
                        }
                        context.Entry(cust).State = EntityState.Modified;
                        context.Commit();
                    }
                    else
                    {
                        cust = new Customer();
                        cust.Skcode = skcode();
                        cust.ShopName = otpCheckDc.ShopName;
                        cust.Shopimage = otpCheckDc.Shopimage;
                        cust.Mobile = otpCheckDc.MobileNumber;
                        cust.Active = false;
                        cust.Deleted = false;
                        cust.CreatedBy = people.DisplayName;
                        cust.CreatedDate = indianTime;
                        cust.UpdatedDate = indianTime;
                        cust.lat = otpCheckDc.lat;
                        cust.lg = otpCheckDc.lg;
                        cust.Shoplat = otpCheckDc.lat;
                        cust.Shoplg = otpCheckDc.lg;
                        cust.CompanyId = 1;
                        #region to assign cluster ID and determine if it is in cluster or not.

                        if (cust.lat != 0 && cust.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(cust.lat).Append("', '").Append(cust.lg).Append("')");
                            var clusterId = context.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                cust.InRegion = false;
                            }
                            else
                            {
                                var agent = context.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    cust.AgentCode = Convert.ToString(agent.AgentId);


                                cust.ClusterId = clusterId;
                                dd = context.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                cust.ClusterName = dd.ClusterName;
                                cust.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            cust.Warehouseid = dd.WarehouseId;
                            cust.WarehouseName = dd.WarehouseName;
                            cust.ClusterId = dd.ClusterId;
                            cust.ClusterName = dd.ClusterName;

                            cust.Cityid = dd.CityId;
                            cust.City = dd.CityName;
                            cust.ShippingCity = dd.CityName;
                            cust.IsCityVerified = true;
                        }
                        context.Customers.Add(cust);
                    }
                    context.Commit();

                    var res = new
                    {
                        SkCode = cust.Skcode,
                        Status = true,
                        Message = "OTP Verify Successfully."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
            else
            {
                var res = new
                {
                    SkCode = "",
                    Status = false,
                    Message = "Please enter correct OTP."
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }
        private string GenerateRandomOTP(int iOTPLength, string[] saAllowedCharacters)
        {
            using (AuthContext db = new AuthContext())
            {
                string sOTP = String.Empty;
                string sTempChars = String.Empty;
                Random rand = new Random();

                for (int i = 0; i < iOTPLength; i++)
                {
                    int p = rand.Next(0, saAllowedCharacters.Length);
                    sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    sOTP += sTempChars;
                }
                return sOTP;
            }
        }

        [Route("Genotp")]
        [HttpGet]
        [AllowAnonymous]
        public OTP Getotp(string MobileNumber, bool type, string mode = "")
        {
            string Apphash = "";
            bool TestUser = false;
            OTP b = new OTP();
            List<string> CustomerStatus = new List<string>();
            CustomerStatus.Add("Not Verified");
            CustomerStatus.Add("Pending For Submitted");
            CustomerStatus.Add("Pending For Activation");
            CustomerStatus.Add("Temporary Active");
            using (var context = new AuthContext())
            {
                if (!type)
                {
                    Customer cust = context.Customers.Where(c => c.Mobile.Trim().Equals(MobileNumber.Trim()) && !c.Deleted).FirstOrDefault();
                    if (cust != null)
                    {
                        TestUser = cust.CustomerCategoryId.HasValue && cust.CustomerCategoryId.Value == 0;
                        b = new OTP()
                        {
                            Status = false,
                            Message = "This mobile no already registered."
                        };
                        return b;
                    }
                }
            }
            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
            string sRandomOTP = GenerateRandomOTP(4, saAllowedCharacters);
            // string OtpMessage = " is Your login Code. :). ShopKirana";
            string OtpMessage = ""; //"{#var1#} is Your login Code. {#var2#}. ShopKirana";
            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Login_Code");
            OtpMessage = dltSMS == null ? "" : dltSMS.Template;
            OtpMessage = OtpMessage.Replace("{#var1#}", sRandomOTP);
            OtpMessage = OtpMessage.Replace("{#var2#}", ":)");

            //  string message = "";
            if (string.IsNullOrEmpty(Apphash))
            {
                Apphash = ConfigurationManager.AppSettings["Apphash"];
            }

            //string OtpMessage = string.Format("<#> {0} : is Your Shopkirana Verification Code for complete process.{1}{2} Shopkirana", sRandomOTP, Environment.NewLine, Apphash);
            // string message = sRandomOTP + " " + OtpMessage;

            //string message = OtpMessage;
            var status = dltSMS == null ? false : Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, OtpMessage, ((Int32)Common.Enums.SMSRouteEnum.OTP).ToString(), dltSMS.DLTId);
            //if (status)
            //{
            MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP> mongoDbHelper = new MongoDbHelper<Model.CustomerOTP.RetailerCustomerOTP>();
            Model.CustomerOTP.RetailerCustomerOTP CustomerOTP = new Model.CustomerOTP.RetailerCustomerOTP
            {
                CreatedDate = DateTime.Now,
                DeviceId = "",
                IsActive = true,
                Mobile = MobileNumber,
                Otp = sRandomOTP
            };
            mongoDbHelper.Insert(CustomerOTP);
            //}


            OTP a = new OTP()
            {
                OtpNo = TestUser || (!string.IsNullOrEmpty(mode) && mode == "debug") ? sRandomOTP : "",
                Status = true,
                Message = "Successfully sent OTP."
            };
            return a;
        }

        [Route("GetPeopleReferralConfigurations")]
        [HttpGet]
        public List<GetCustReferralConfigDc> GetPeopleReferralConfigurations(int CityId)
        {
            List<GetCustReferralConfigDc> custReferralConfigList = new List<GetCustReferralConfigDc>();
            using (var db = new AuthContext())
            {
                custReferralConfigList = db.CustomerReferralConfigurationDb.Where(x => x.CityId == CityId && x.ReferralType == 2 && x.IsActive == true && x.IsDeleted == false)
                     .Select(x => new GetCustReferralConfigDc
                     {
                         OnOrder = x.OnOrder,
                         ReferralWalletPoint = x.ReferralWalletPoint,
                         CustomerWalletPoint = x.CustomerWalletPoint,
                         OnDeliverd = x.OnDeliverd
                     }).ToList();
                var statusids = custReferralConfigList.Select(x => x.OnDeliverd).Distinct().ToList();
                var customerReferralStatus = db.CustomerReferralStatusDb.Where(x => statusids.Contains((int)x.Id) && x.IsActive == true && x.IsDeleted == false).ToList();
                custReferralConfigList.ForEach(x =>
                {
                    x.OrderCount = x.OnOrder + " Order";
                    x.orderStatus = customerReferralStatus != null ? customerReferralStatus.FirstOrDefault(y => y.Id == x.OnDeliverd).OrderStatus : "NA";
                });
                return custReferralConfigList;
            }
        }

        [Route("GetPeopleReferralOrderList")]
        [HttpGet]
        public List<GetPeopleReferralOrderListDc> GetPeopleReferralOrderList(int PeopleId)
        {
            using (var context = new AuthContext())
            {
                var peopleId = new SqlParameter("@PeopleId", PeopleId);
                List<GetPeopleReferralOrderListDc> PeopleReferralList = context.Database.SqlQuery<GetPeopleReferralOrderListDc>("exec GetPeopleReferralOrderList @PeopleId", peopleId).ToList();
                return PeopleReferralList;
            }
        }

        #endregion

        #region SalesAppItem

        public PublishAppHome GetSalesAppPublisheddata(string appType, int wId)
        {
            using (var context = new AuthContext())
            {
                var publishedData = context.PublishAppHomeDB.Where(x => x.WarehouseID == wId && x.AppType == appType && x.Deleted == false).FirstOrDefault();
                return publishedData;
            }
        }

        public CategorySalesAppDc Categories(int PeopleId, int baseCatId, int warehouseid, string lang)
        {
            //List<Category> categories = new List<Category>();
            //List<SubCategories> subcategories = new List<SubCategories>();
            //List<SubSubCategories> subsubcategories = new List<SubSubCategories>();
            CategorySalesAppDc ibjtosend = new CategorySalesAppDc();
            ibjtosend.Basecats = new List<BaseCategory>();
            ibjtosend.Categories = new List<Category>();
            ibjtosend.SubCategories = new List<SubCategories>();
            ibjtosend.SubSubCategories = new List<SubSubCategories>();
            DataContracts.KPPApp.customeritem ds = new DataContracts.KPPApp.customeritem();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
            List<string> SubCats = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId).Distinct().ToList();
            List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
            List<string> strCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId + "-" + x.BrandId).Distinct().ToList();
            using (var unitOfWork = new UnitOfWork())
            {
                DataContracts.KPPApp.customeritem CatSubCatBrands = unitOfWork.KPPAppRepository.GetSalesCatSubCat(warehouseid, baseCatId);
                CatSubCatBrands.SubSubCategories = CatSubCatBrands.SubSubCategories.Where(x => strCondition.Contains(x.Categoryid + "-" + x.SubCategoryId + "-" + x.SubSubCategoryId)).ToList();
                SubCats = CatSubCatBrands.SubSubCategories.Select(x => x.Categoryid + "-" + x.SubCategoryId).Distinct().ToList();
                CatSubCatBrands.SubCategories = CatSubCatBrands.SubCategories.Where(x => SubCats.Contains(x.Categoryid + "-" + x.SubCategoryId)).ToList();

                CatIds = CatSubCatBrands.SubCategories.Select(x => x.Categoryid).ToList();
                CatSubCatBrands.Categories = CatSubCatBrands.Categories.Where(x => CatIds.Contains(x.Categoryid)).ToList();
                List<int> BaseCatIds = CatSubCatBrands.Categories.Select(x => x.BaseCategoryId).ToList();
                CatSubCatBrands.Basecats = CatSubCatBrands.Basecats.Where(x => BaseCatIds.Contains(x.BaseCategoryId)).ToList();


                if (lang == "hi")
                {
                    foreach (var kk in CatSubCatBrands.Basecats)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.BaseCategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.Categories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.CategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.SubCategories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.SubcategoryName = kk.HindiName;
                        }
                    }

                    foreach (var kk in CatSubCatBrands.SubSubCategories)
                    {
                        if (kk.HindiName != null && kk.HindiName != "{nan}" && kk.HindiName != "")
                        {
                            kk.SubSubcategoryName = kk.HindiName;
                        }
                    }
                }
                ibjtosend.Basecats = CatSubCatBrands.Basecats.Select(x => new BaseCategory { BaseCategoryId = x.BaseCategoryId, BaseCategoryName = x.BaseCategoryName, HindiName = x.HindiName, LogoUrl = x.LogoUrl }).ToList();
                ibjtosend.Categories = CatSubCatBrands.Categories.Select(x => new Category { BaseCategoryId = x.BaseCategoryId, HindiName = x.HindiName, Categoryid = x.Categoryid, CategoryName = x.CategoryName, CategoryHindiName = x.HindiName, LogoUrl = x.LogoUrl, CategoryImg = x.CategoryImg }).ToList();
                ibjtosend.SubCategories = CatSubCatBrands.SubCategories.Select(x => new SubCategories { Categoryid = x.Categoryid, HindiName = x.HindiName, SubCategoryId = x.SubCategoryId, SubcategoryName = x.SubcategoryName, LogoUrl = x.LogoUrl, itemcount = x.itemcount }).ToList();
                ibjtosend.SubSubCategories = CatSubCatBrands.SubSubCategories.Select(x => new SubSubCategories { SubCategoryId = x.SubCategoryId, Categoryid = x.Categoryid, HindiName = x.HindiName, SubSubCategoryId = x.SubSubCategoryId, SubSubcategoryName = x.SubSubcategoryName, LogoUrl = x.LogoUrl, itemcount = x.itemcount }).ToList();

                if (ibjtosend.SubSubCategories != null && ibjtosend.SubSubCategories.Any())
                {
                    using (var db = new AuthContext())
                    {
                        //var ActiveCustomer = db.Customers.Where(x => x.CustomerId == customerId).Select(x => new { x.IsKPP }).FirstOrDefault();

                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        #region block Barnd

                        var custtype = 4;
                        var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                        if (blockBarnds != null && blockBarnds.Any())
                        {
                            //ibjtosend.SubSubCategories = ibjtosend.SubSubCategories.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubSubCategoryId))).ToList();
                            //ibjtosend.SubCategories = ibjtosend.SubCategories.Where(x => ibjtosend.SubSubCategories.Select(y => y.SubCategoryId).Contains(x.SubCategoryId)).ToList();
                            //ibjtosend.Categories = ibjtosend.Categories.Where(x => ibjtosend.SubCategories.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();

                            ibjtosend.SubSubCategories = ibjtosend.SubSubCategories.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.SubSubCategoryId))).ToList();
                            ibjtosend.SubCategories = ibjtosend.SubCategories.Where(x => ibjtosend.SubSubCategories.Select(y => y.Categoryid + " " + y.SubCategoryId).Contains(x.Categoryid + " " + x.SubCategoryId)).ToList();
                            ibjtosend.Categories = ibjtosend.Categories.Where(x => ibjtosend.SubCategories.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();
                        }
                        #endregion
                    }
                }
            }
            return ibjtosend;
        }
        //Get Published Code
        [Route("GetPublishedSection")]
        [HttpGet]
        public IEnumerable<AppHomeSections> GetPublishedSectionSalesApp(string appType, int WarehouseId, string lang, int PeopleId)
        {
            using (var context = new AuthContext())
            {
                CategorySalesAppDc CategorySalesApp = Categories(PeopleId, 0, WarehouseId, lang);
                List<AppHomeSections> sections = new List<AppHomeSections>();

                var datenow = indianTime;

                Caching.ICacheProvider _cacheProvider = new Caching.RedisCacheProvider();
                var publishedData = _cacheProvider.GetOrSet(Caching.CacheKeyHelper.APPHomeCacheKey(appType.Replace(" ", ""), WarehouseId.ToString()), () => GetSalesAppPublisheddata(appType, WarehouseId));

                //var publishedData = GetSalesAppPublisheddata(appType, WarehouseId);

                if (publishedData == null)
                {
                }
                else
                {
                    sections = JsonConvert.DeserializeObject<List<AppHomeSections>>(publishedData.ApphomeSection);
                    foreach (var a in sections)
                    {
                        if (a.SectionType == "Banner" || a.SectionSubType == "Flash Deal")
                        {
                            foreach (var ap in a.AppItemsList)
                            {
                                //if (a.SectionSubType == "Base Category")
                                //{
                                //    ap.BaseCategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Category")
                                //{
                                //    ap.CategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Sub Category")
                                //{
                                //    ap.SubCategoryId = ap.RedirectionID;
                                //}
                                //else if (a.SectionSubType == "Brand")
                                //{
                                //    ap.SubsubCategoryId = ap.RedirectionID;
                                //}

                                if (ap.OfferEndTime < datenow)
                                {
                                    ap.Expired = true;
                                    ap.Deleted = true;
                                    ap.Active = false;
                                }
                            }
                            if (a.AppItemsList.All(x => !x.Active && x.Deleted))
                            {
                                a.Deleted = true;
                                a.Active = false;
                            }
                        }
                    }
                    sections = sections.ToList().Select(o => new AppHomeSections
                    {
                        AppItemsList = o.Deleted == false && (o.SectionType == "Banner" || o.SectionType == "PopUp" || o.SectionSubType == "Flash Deal") ? o.AppItemsList.Where(i => i.Deleted == false && (i.OfferEndTime > datenow || i.OfferEndTime == null) && (i.OfferStartTime < datenow || i.OfferStartTime == null)).ToList() : o.AppItemsList.Where(x => x.Deleted == false).ToList(),
                        SectionID = o.SectionID,
                        AppType = o.AppType,
                        WarehouseID = o.WarehouseID,
                        SectionName = o.SectionName,
                        SectionHindiName = o.SectionHindiName,
                        SectionType = o.SectionType,
                        SectionSubType = o.SectionSubType,
                        CreatedDate = o.CreatedDate,
                        UpdatedDate = indianTime,
                        IsTile = o.IsTile,
                        IsBanner = o.IsBanner,
                        IsPopUp = o.IsPopUp,
                        Sequence = o.Sequence,
                        RowCount = o.RowCount,
                        ColumnCount = o.ColumnCount,
                        HasBackgroundColor = o.HasBackgroundColor,
                        TileBackgroundColor = o.TileBackgroundColor,
                        BannerBackgroundColor = o.BannerBackgroundColor,
                        HasHeaderBackgroundColor = o.HasHeaderBackgroundColor,
                        TileHeaderBackgroundColor = o.TileHeaderBackgroundColor,
                        HasBackgroundImage = o.HasBackgroundImage,
                        TileBackgroundImage = o.TileBackgroundImage,
                        HasHeaderBackgroundImage = o.HasHeaderBackgroundImage,
                        TileHeaderBackgroundImage = o.TileHeaderBackgroundImage,
                        IsTileSlider = o.IsTileSlider,
                        TileAreaHeaderBackgroundImage = o.TileAreaHeaderBackgroundImage,
                        HeaderTextColor = o.HeaderTextColor,
                        sectionBackgroundImage = o.sectionBackgroundImage,
                        Deleted = o.Deleted,
                        ViewType = o.ViewType,
                        WebViewUrl = o.WebViewUrl
                    }).ToList();
                }

                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                #endregion

                if (!string.IsNullOrEmpty(lang) && lang.ToLower() == "hi")
                {
                    sections.ForEach(x =>
                    {
                        string SectionName = !string.IsNullOrEmpty(x.SectionHindiName) ? x.SectionHindiName : x.SectionName;
                        x.SectionName = SectionName;
                        x.AppItemsList.ForEach(y =>
                        {
                            if (x.SectionSubType == "Base Category")
                            {
                                var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                if (basecat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(basecat.HindiName) ? basecat.HindiName : basecat.BaseCategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Category")
                            {
                                var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                if (catdata != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(catdata.HindiName) ? catdata.HindiName : catdata.CategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Sub Category")
                            {
                                var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                if (subcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subcat.HindiName) ? subcat.HindiName : subcat.SubcategoryName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Brand")
                            {
                                var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                if (subsubcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subsubcat.HindiName) ? subsubcat.HindiName : subsubcat.SubSubcategoryName;
                                    y.TileName = tileName;
                                }
                            }

                            if (!string.IsNullOrEmpty(y.BannerImage) && !y.BannerImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.BannerImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileImage) && !y.TileImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileSectionBackgroundImage) && !y.TileSectionBackgroundImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileSectionBackgroundImage);
                            }
                            if (!string.IsNullOrEmpty(x.TileHeaderBackgroundImage) && !x.TileHeaderBackgroundImage.Contains("http"))
                            {
                                x.TileHeaderBackgroundImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , x.TileHeaderBackgroundImage);
                            }
                        });

                        if (x.SectionSubType == "Brand")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        else if (x.SectionSubType == "Item")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.CatId).Contains(t.CategoryId) && blockBarnds.Select(z => z.SubCatId).Contains(t.SubCategoryId) && blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }

                        x.AppItemsList = x.AppItemsList.Where(y => y.Active).ToList();
                        x.Active = x.SectionSubType != "Other" ? x.AppItemsList.Any() : true;
                    });
                }
                else
                {
                    sections.ForEach(x =>
                    {
                        string SectionName = !string.IsNullOrEmpty(x.SectionHindiName) ? x.SectionHindiName : x.SectionName;
                        x.SectionName = SectionName;
                        x.AppItemsList.ForEach(y =>
                        {
                            if (x.SectionSubType == "Base Category")
                            {
                                var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                if (basecat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(basecat.BaseCategoryName) ? basecat.BaseCategoryName : basecat.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Category")
                            {
                                var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                if (catdata != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(catdata.CategoryName) ? catdata.CategoryName : catdata.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Sub Category")
                            {
                                var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                if (subcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subcat.SubcategoryName) ? subcat.SubcategoryName : subcat.HindiName;
                                    y.TileName = tileName;
                                }
                            }
                            else if (x.SectionSubType == "Brand")
                            {
                                var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                if (subsubcat != null)
                                {
                                    string tileName = !string.IsNullOrEmpty(subsubcat.SubSubcategoryName) ? subsubcat.SubSubcategoryName : subsubcat.HindiName;
                                    y.TileName = tileName;
                                }
                            }

                            if (x.SectionType == "Banner")
                            {
                                if (y.RedirectionType == "Base Category")
                                {
                                    var basecat = CategorySalesApp.Basecats.Any(s => s.BaseCategoryId == y.BaseCategoryId) ? CategorySalesApp.Basecats.FirstOrDefault(s => s.BaseCategoryId == y.BaseCategoryId) : null;
                                    y.Active = CategorySalesApp.Basecats.Any(c => c.BaseCategoryId == y.BaseCategoryId);
                                }
                                else if (y.RedirectionType == "Category")
                                {
                                    var catdata = CategorySalesApp.Categories.Any(s => s.Categoryid == y.CategoryId) ? CategorySalesApp.Categories.FirstOrDefault(s => s.Categoryid == y.CategoryId) : null;
                                    y.Active = CategorySalesApp.Categories.Any(c => c.Categoryid == y.CategoryId);
                                }
                                else if (y.RedirectionType == "Sub Category")
                                {
                                    var subcat = CategorySalesApp.SubCategories.Any(s => s.SubCategoryId == y.SubCategoryId) ? CategorySalesApp.SubCategories.FirstOrDefault(s => s.SubCategoryId == y.SubCategoryId) : null;
                                    y.Active = CategorySalesApp.SubCategories.Any(c => c.SubCategoryId == y.SubCategoryId);
                                }
                                else if (y.RedirectionType == "Brand")
                                {
                                    var subsubcat = CategorySalesApp.SubSubCategories.Any(s => s.SubSubCategoryId == y.SubsubCategoryId) ? CategorySalesApp.SubSubCategories.FirstOrDefault(s => s.SubSubCategoryId == y.SubsubCategoryId) : null;
                                    y.Active = CategorySalesApp.SubSubCategories.Any(c => c.SubSubCategoryId == y.SubsubCategoryId);
                                }
                            }
                            if (!string.IsNullOrEmpty(y.BannerImage) && !y.BannerImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.BannerImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileImage) && !y.TileImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileImage);
                            }
                            if (!string.IsNullOrEmpty(y.TileSectionBackgroundImage) && !y.TileSectionBackgroundImage.Contains("http"))
                            {
                                y.BannerImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , y.TileSectionBackgroundImage);
                            }
                            if (!string.IsNullOrEmpty(x.TileHeaderBackgroundImage) && !x.TileHeaderBackgroundImage.Contains("http"))
                            {
                                x.TileHeaderBackgroundImage = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , x.TileHeaderBackgroundImage);
                            }
                        });
                        if (x.SectionSubType == "Brand")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        else if (x.SectionSubType == "Item")
                        {
                            if (blockBarnds != null && blockBarnds.Any())
                            {
                                x.AppItemsList = x.AppItemsList.Where(t => !(blockBarnds.Select(z => z.CatId).Contains(t.CategoryId) && blockBarnds.Select(z => z.SubCatId).Contains(t.SubCategoryId) && blockBarnds.Select(z => z.SubSubCatId).Contains(t.SubsubCategoryId))).ToList();
                            }
                        }
                        x.AppItemsList = x.AppItemsList.Where(y => y.Active).ToList();
                        x.Active = x.SectionSubType != "Other" && x.SectionSubType != "DynamicHtml" ? x.AppItemsList.Any() : true;
                    });

                }
                return sections.Where(x => x.Active).OrderBy(x => x.Sequence).ToList();

            }
        }

        [Route("getItembysscatid")]
        [HttpGet]
        public HttpResponseMessage salesgetbysscatidv3(string lang, int PeopleId, int warehouseid, int catid, int scatid, int sscatid)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();
                //Increase some parameter For offer
                var newdata = (from a in context.itemMasters
                               where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true
                               && ((sscatid > 0 && a.SubsubCategoryid == sscatid) || (sscatid == 0 && a.SubsubCategoryid == a.SubsubCategoryid))
                               && ((scatid > 0 && a.SubCategoryId == scatid) || (scatid == 0 && a.SubCategoryId == a.SubCategoryId))
                               && a.Categoryid == catid && (a.ItemAppType == 0 || a.ItemAppType == 1)
                               && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                               let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                               select new factoryItemdata
                               {
                                   WarehouseId = a.WarehouseId,
                                   IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                   ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                   CompanyId = a.CompanyId,
                                   Categoryid = a.Categoryid,
                                   Discount = a.Discount,
                                   ItemId = a.ItemId,
                                   ItemNumber = a.Number,
                                   itemname = a.itemname,
                                   IsSensitive = a.IsSensitive,
                                   IsSensitiveMRP = a.IsSensitiveMRP,
                                   UnitofQuantity = a.UnitofQuantity,
                                   UOM = a.UOM,
                                   LogoUrl = a.LogoUrl,
                                   MinOrderQty = a.MinOrderQty,
                                   price = a.price,
                                   SubCategoryId = a.SubCategoryId,
                                   SubsubCategoryid = a.SubsubCategoryid,
                                   TotalTaxPercentage = a.TotalTaxPercentage,
                                   SellingUnitName = a.SellingUnitName,
                                   SellingSku = a.SellingSku,
                                   UnitPrice = a.UnitPrice,
                                   HindiName = a.HindiName,
                                   VATTax = a.VATTax,
                                   active = a.active,
                                   NetPurchasePrice = a.NetPurchasePrice,
                                   marginPoint = a.marginPoint,
                                   promoPerItems = a.promoPerItems,
                                   IsOffer = a.IsOffer,
                                   Deleted = a.Deleted,
                                   OfferCategory = a.OfferCategory,
                                   OfferStartTime = a.OfferStartTime,
                                   OfferEndTime = a.OfferEndTime,
                                   OfferQtyAvaiable = a.OfferQtyAvaiable,
                                   OfferQtyConsumed = a.OfferQtyConsumed,
                                   OfferId = a.OfferId,
                                   OfferType = a.OfferType,
                                   OfferWalletPoint = a.OfferWalletPoint,
                                   OfferFreeItemId = a.OfferFreeItemId,
                                   OfferPercentage = a.OfferPercentage,
                                   OfferFreeItemName = a.OfferFreeItemName,
                                   OfferFreeItemImage = a.OfferFreeItemImage,
                                   OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                   OfferMinimumQty = a.OfferMinimumQty,
                                   FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                   FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                   BillLimitQty = a.BillLimitQty,
                                   ItemMultiMRPId = a.ItemMultiMRPId
                               }).OrderByDescending(x => x.ItemNumber).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                foreach (var it in newdata)
                {
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }
                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }

                    if (it.OfferType != "FlashDeal")
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }


                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch (Exception ds) { }
                    //// by sudhir 22-08-2019
                    if (lang.Trim() == "hi")
                    {
                        if (it.IsSensitive == true)
                        {
                            if (it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                            }
                            else
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                            }
                        }
                        else
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                        }
                    }
                    //end
                    item.ItemMasters.Add(it);
                }

                if (item.ItemMasters != null)
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                else
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }

            }
        }

        [Route("Category")]
        [HttpGet]
        public CategorySalesAppDc GetCategory(int PeopleId, int warehouseid, string lang)
        {
            CategorySalesAppDc ibjtosend = Categories(PeopleId, 0, warehouseid, lang);
            return ibjtosend;
        }

        [Route("GetCustomerTopBrand")]
        [HttpGet]
        public async Task<List<SubSubCategories>> GetCustomerTopBrand(int PeopleId, int warehouseId, int customerId, string lang)
        {
            List<SubSubCategories> lstSubCategories = new List<SubSubCategories>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var db = new AuthContext())
            {
                var subCategoryQuery = "Exec GetCustomerTopBrand " + warehouseId + "," + customerId + ",0,20";
                lstSubCategories = await db.Database.SqlQuery<SubSubCategories>(subCategoryQuery).ToListAsync();

                List<string> strCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId + "-" + x.BrandId).Distinct().ToList();
                if (lstSubCategories != null)
                {
                    lstSubCategories = lstSubCategories.Where(x => strCondition.Contains(x.Categoryid + "-" + x.SubCategoryId + "-" + x.SubSubCategoryId)).ToList();
                    lstSubCategories.ForEach(x =>
                    {
                        if (!string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.HindiName))
                        {
                            x.SubSubcategoryName = x.HindiName;
                        }
                    });
                }
            }
            return lstSubCategories;
        }

        [Route("GetBestPriceSubCategory")]
        [HttpGet]
        public async Task<List<SubCategories>> GetBestPriceSubCategory(int PeopleId, int warehouseId, string lang)
        {
            List<SubCategories> lstSubCategories = new List<SubCategories>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            using (var db = new AuthContext())
            {
                var subCategoryQuery = "Exec GetBestPriceSubCategory " + warehouseId + ",0,20";
                lstSubCategories = await db.Database.SqlQuery<SubCategories>(subCategoryQuery).ToListAsync();

                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                if (lstSubCategories != null)
                {
                    lstSubCategories = lstSubCategories.Where(x => SubCats.Contains(x.SubCategoryId)).ToList();
                    lstSubCategories.ForEach(x =>
                    {
                        if (!string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.HindiName))
                        {
                            x.SubcategoryName = x.HindiName;
                        }
                    });
                }

            }
            return lstSubCategories;
        }

        [Route("GetCustomerTopBrandItem")]
        [HttpGet]
        public async Task<List<factoryItemdata>> GetCustomerTopBrandItem(int warehouseId, int customerId, int subSubCategoryId, int skip, int take, string lang)
        {
            List<factoryItemdata> newdata = new List<factoryItemdata>();
            using (var db = new AuthContext())
            {
                var subCategoryQuery = "Exec GetCustomerTopBrandItem " + warehouseId + "," + customerId + "," + subSubCategoryId + "," + skip + "," + take;
                newdata = await db.Database.SqlQuery<factoryItemdata>(subCategoryQuery).ToListAsync();
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                foreach (var it in newdata)
                {
                    it.dreamPoint = it.dreamPoint.HasValue ? it.dreamPoint : 0;
                    it.marginPoint = it.marginPoint.HasValue ? it.marginPoint : 0;
                    if (!it.IsOffer)
                    {
                        /// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //salesman 0.2=(0.02 * 10=0.2)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }

                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                }
            }
            return newdata;
        }

        [Route("GetBestPriceSubCategoryItem")]
        [HttpGet]
        public async Task<List<factoryItemdata>> GetBestPriceSubCategoryItem(int PeopleId, int warehouseId, int subCategoryId, int skip, int take, string lang)
        {
            List<factoryItemdata> newdata = new List<factoryItemdata>();
            using (var db = new AuthContext())
            {
                var subCategoryQuery = "Exec GetBestPriceSubCategoryItem " + warehouseId + "," + subCategoryId + "," + skip + "," + take;
                newdata = await db.Database.SqlQuery<factoryItemdata>(subCategoryQuery).ToListAsync();
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                foreach (var it in newdata)
                {
                    it.dreamPoint = it.dreamPoint.HasValue ? it.dreamPoint : 0;
                    it.marginPoint = it.marginPoint.HasValue ? it.marginPoint : 0;
                    if (!it.IsOffer)
                    {
                        /// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //salesman 0.2=(0.02 * 10=0.2)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }

                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                }
            }
            return newdata;
        }

        [Route("HomePageGetCategories")]
        [AllowAnonymous]
        [HttpGet]
        public OnBaseSalesAppDc GetCategories(int PeopleId, int BaseCategoryId, int warehouseid, string lang)
        {
            OnBaseSalesAppDc ibjtosend = new OnBaseSalesAppDc();
            ibjtosend.Categorys = new List<Category>();
            ibjtosend.SubCategorys = new List<SubCategory>();
            ibjtosend.SubsubCategorys = new List<SubsubCategory>();
            CategorySalesAppDc CategorySalesApp = Categories(PeopleId, BaseCategoryId, warehouseid, lang);

            ibjtosend.Categorys = CategorySalesApp.Categories.Select(x => new Category
            {
                BaseCategoryId = x.BaseCategoryId,
                HindiName = x.HindiName,
                Categoryid = x.Categoryid,
                CategoryName = x.CategoryName,
                CategoryHindiName = x.HindiName,
                LogoUrl = x.LogoUrl,
                CategoryImg = x.CategoryImg
            }).ToList();
            ibjtosend.SubCategorys = CategorySalesApp.SubCategories.Select(x => new SubCategory
            {
                Categoryid = x.Categoryid,
                HindiName = x.HindiName,
                SubCategoryId = x.SubCategoryId,
                SubcategoryName = x.SubcategoryName,
                LogoUrl = x.LogoUrl,
                itemcount = x.itemcount
            }).ToList();
            ibjtosend.SubsubCategorys = CategorySalesApp.SubSubCategories.Select(x => new SubsubCategory
            {
                SubCategoryId = x.SubCategoryId,
                Categoryid = x.Categoryid,
                HindiName = x.HindiName,
                SubsubCategoryid = x.SubSubCategoryId,
                SubsubcategoryName = x.SubSubcategoryName,
                LogoUrl = x.LogoUrl,
                itemcount = x.itemcount
            }).ToList();

            if (ibjtosend.SubsubCategorys != null && ibjtosend.SubsubCategorys.Any())
            {
                using (var db = new AuthContext())
                {
                    //var ActiveCustomer = db.Customers.Where(x => x.CustomerId == customerId).Select(x => new { x.IsKPP }).FirstOrDefault();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd

                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        //ibjtosend.SubsubCategorys = ibjtosend.SubsubCategorys.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                        //ibjtosend.SubCategorys = ibjtosend.SubCategorys.Where(x => ibjtosend.SubsubCategorys.Select(y => y.SubCategoryId).Contains(x.SubCategoryId)).ToList();
                        //ibjtosend.Categorys = ibjtosend.Categorys.Where(x => ibjtosend.SubCategorys.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();

                        ibjtosend.SubsubCategorys = ibjtosend.SubsubCategorys.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.SubsubCategoryid))).ToList();
                        ibjtosend.SubCategorys = ibjtosend.SubCategorys.Where(x => ibjtosend.SubsubCategorys.Select(y => y.Categoryid + " " + y.SubCategoryId).Contains(x.Categoryid + " " + x.SubCategoryId)).ToList();
                        ibjtosend.Categorys = ibjtosend.Categorys.Where(x => ibjtosend.SubCategorys.Select(y => y.Categoryid).Contains(x.Categoryid)).ToList();
                    }
                    #endregion
                }
            }
            return ibjtosend;
        }

        [Route("Search")]
        [HttpGet]
        public HttpResponseMessage Search(string lang, string itemname, int PeopleId, int warehouseId)
        {
            using (var db = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();
                var newdata = (from a in db.itemMasters
                               where (a.WarehouseId == warehouseId &&
                               a.itemname.Contains(itemname) && a.Deleted == false && a.active == true && (a.ItemAppType == 0 || a.ItemAppType == 1)
                               && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                               let limit = db.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                               select new factoryItemdata
                               {
                                   WarehouseId = a.WarehouseId,
                                   IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                   ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                   CompanyId = a.CompanyId,
                                   Categoryid = a.Categoryid,
                                   Discount = a.Discount,
                                   ItemId = a.ItemId,
                                   ItemNumber = a.Number,
                                   itemname = a.itemname,
                                   LogoUrl = a.LogoUrl,
                                   MinOrderQty = a.MinOrderQty,
                                   IsSensitive = a.IsSensitive,
                                   IsSensitiveMRP = a.IsSensitiveMRP,
                                   UnitofQuantity = a.UnitofQuantity,
                                   UOM = a.UOM,
                                   price = a.price,
                                   SubCategoryId = a.SubCategoryId,
                                   SubsubCategoryid = a.SubsubCategoryid,
                                   TotalTaxPercentage = a.TotalTaxPercentage,
                                   SellingUnitName = a.SellingUnitName,
                                   SellingSku = a.SellingSku,
                                   UnitPrice = a.UnitPrice,
                                   HindiName = a.HindiName,
                                   VATTax = a.VATTax,
                                   active = a.active,
                                   marginPoint = a.marginPoint,
                                   promoPerItems = a.promoPerItems,
                                   NetPurchasePrice = a.NetPurchasePrice,
                                   IsOffer = a.IsOffer,
                                   Deleted = a.Deleted,
                                   OfferCategory = a.OfferCategory,
                                   OfferStartTime = a.OfferStartTime,
                                   OfferEndTime = a.OfferEndTime,
                                   OfferQtyAvaiable = a.OfferQtyAvaiable,
                                   OfferQtyConsumed = a.OfferQtyConsumed,
                                   OfferId = a.OfferId,
                                   OfferType = a.OfferType,
                                   OfferWalletPoint = a.OfferWalletPoint,
                                   OfferFreeItemId = a.OfferFreeItemId,
                                   OfferPercentage = a.OfferPercentage,
                                   OfferFreeItemName = a.OfferFreeItemName,
                                   OfferFreeItemImage = a.OfferFreeItemImage,
                                   OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                   OfferMinimumQty = a.OfferMinimumQty,
                                   FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                   FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                   FreeItemId = a.OfferFreeItemId,
                                   ItemMultiMRPId = a.ItemMultiMRPId,
                                   BillLimitQty = a.BillLimitQty,
                                   itemBaseName = a.itemBaseName
                               }).OrderByDescending(x => x.ItemNumber).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();



                foreach (var it in newdata)
                {



                    if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                    {
                        it.IsOffer = false;
                    }
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;

                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }
                    }
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }



                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {/// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //Customer (0.02 * 10=0.2)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                        //// by sudhir 22-08-2019
                        if (lang.Trim() == "hi")
                        {
                            if (it.HindiName != null)
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }
                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }
                        //end
                    }
                    catch { }

                    if (it.OfferType != "FlashDeal")
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    item.ItemMasters.Add(it);
                }
                if (item.ItemMasters != null)
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                else
                {
                    item.Message = false;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }

            }
        }

        [Route("GetItemByBarcode")]
        [HttpGet]
        public HttpResponseMessage GetItemByBarcode(int PeopleId, int WarehouseId, string barcode, string Lang)
        {
            using (var db = new AuthContext())
            {
                WRSITEM item = new WRSITEM();
                var barcodeitem = db.ItemBarcodes.FirstOrDefault(i => i.Barcode == barcode && i.IsDeleted == false && i.IsActive == true);
                if (barcodeitem != null)
                {
                    List<ItemMaster> itemList = new List<ItemMaster>();
                    List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                    List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                    List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                    List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

                    var newdata = (from a in db.itemMasters
                                   where a.WarehouseId == WarehouseId && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid)
                                   && a.Deleted == false && a.active == true && a.Number.Trim().ToLower().Equals(barcodeitem.ItemNumber.Trim().ToLower())
                                   let limit = db.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new factoryItemdata
                                   {
                                       BaseCategoryId = a.BaseCategoryid,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       WarehouseId = a.WarehouseId,
                                       CompanyId = a.CompanyId,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       HindiName = a.HindiName,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UnitofQuantity = a.UnitofQuantity,
                                       UOM = a.UOM,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       VATTax = a.VATTax,
                                       itemBaseName = a.itemBaseName,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       promoPerItems = a.promoPerItems,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       FreeItemId = a.OfferFreeItemId,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       BillLimitQty = a.BillLimitQty
                                   }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && x.OfferAppType == "Retailer App" || x.OfferAppType == "Both" || x.OfferAppType == "Sales App").Select(x => x.OfferId).ToList() : new List<int>();
                    foreach (var it in newdata)
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }

                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;

                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else { it.dreamPoint = 0; }

                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch { }
                        if (Lang.Trim() == "hi")
                        {
                            if (it.HindiName != null)
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }

                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }
                        item.ItemMasters.Add(it);
                    }
                    if (item.ItemMasters != null)
                    {
                        item.Message = true;
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                    else
                    {
                        item.Message = false;
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                }
                else
                {
                    item.Message = false;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
            }
        }

        [Route("GetAllBrand")]
        [HttpGet]
        public dynamic GetBrandWarehouseId(int PeopleId, int WarehouseId, string lang)
        {
            List<SubsubCategoryDTOM> ass = new List<SubsubCategoryDTOM>();
            try
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                // var CatIdstr = String.Join(",", CatIds);
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                // var SubCatsstr = String.Join(",", SubCats);
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                //var SubSubCatsstr = String.Join(",", SubSubCats);
                using (var authContext = new AuthContext())
                {
                    if (authContext.Database.Connection.State != ConnectionState.Open)
                        authContext.Database.Connection.Open();

                    var CatIdDt = new DataTable();
                    CatIdDt.Columns.Add("IntValue");
                    foreach (var item in CatIds)
                    {
                        var dr = CatIdDt.NewRow();
                        dr["IntValue"] = item;
                        CatIdDt.Rows.Add(dr);
                    }
                    var SubCatIdDt = new DataTable();
                    SubCatIdDt.Columns.Add("IntValue");
                    foreach (var item in SubCats)
                    {
                        var dr = SubCatIdDt.NewRow();
                        dr["IntValue"] = item;
                        SubCatIdDt.Rows.Add(dr);
                    }
                    var BrandIdDt = new DataTable();
                    BrandIdDt.Columns.Add("IntValue");
                    foreach (var item in SubSubCats)
                    {
                        var dr = BrandIdDt.NewRow();
                        dr["IntValue"] = item;
                        BrandIdDt.Rows.Add(dr);
                    }

                    var Catparam = new SqlParameter("categoryIds", CatIdDt);
                    Catparam.SqlDbType = SqlDbType.Structured;
                    Catparam.TypeName = "dbo.IntValues";
                    var SubCatparam = new SqlParameter("subCategoryIds", SubCatIdDt);
                    SubCatparam.SqlDbType = SqlDbType.Structured;
                    SubCatparam.TypeName = "dbo.IntValues";
                    var Brandparam = new SqlParameter("brandIds", BrandIdDt);
                    Brandparam.SqlDbType = SqlDbType.Structured;
                    Brandparam.TypeName = "dbo.IntValues";
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetSalesAllBrand]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@warehouseId", WarehouseId));
                    cmd.Parameters.Add(Catparam);
                    cmd.Parameters.Add(SubCatparam);
                    cmd.Parameters.Add(Brandparam);

                    // Run the sproc
                    var reader1 = cmd.ExecuteReader();
                    ass = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<SubsubCategoryDTOM>(reader1).ToList();

                    ass.ForEach(x =>
                    {
                        if (!string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.HindiName))
                        {
                            x.SubsubcategoryName = x.HindiName;
                        }
                    });
                    //string query = "select b.SubsubCategoryid,b.SubsubcategoryName,b.LogoUrl,b.HindiName,b.Categoryid,b.SubCategoryId,b.SubcategoryName SubcategoryName from ItemMasters a with(nolock) inner join SubsubCategories b with(nolock) on a.SubsubCategoryid=b.SubsubCategoryid " +
                    //              "and a.Deleted = 0  and a.active = 1  and a.WarehouseId = " + WarehouseId + "and b.Deleted =0 and b.IsActive =1 and a.SubsubCategoryid in(" + SubSubCatsstr + ") and a.SubCategoryId in(" + SubCatsstr + ")  and a.Categoryid in(" + CatIdstr + ")  group by b.SubsubCategoryid,b.SubsubcategoryName,b.LogoUrl,b.HindiName,b.Categoryid,b.SubCategoryId,b.SubcategoryName ";
                    //ass = db.Database.SqlQuery<SubsubCategoryDTOM>(query).ToList();
                    return ass;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in GetAllBrand " + ex.Message);
                return null;
            }
        }

        [Route("GetAllItemByBrand")]
        [HttpGet]
        public HttpResponseMessage GetAllItemByBrand(string lang, int PeopleId, int warehouseid, int subSubCategoryId)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();
                if (lang.Trim() == "hi")
                {
                    //Increase some parameter For offer
                    var newdatahi = (from a in context.itemMasters
                                     where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true && a.SubsubCategoryid == subSubCategoryId && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                       && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                     let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                     select new factoryItemdata
                                     {
                                         WarehouseId = a.WarehouseId,
                                         IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                         ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                         CompanyId = a.CompanyId,
                                         Categoryid = a.Categoryid,
                                         Discount = a.Discount,
                                         ItemId = a.ItemId,
                                         ItemNumber = a.Number,
                                         itemname = a.HindiName != null ? a.HindiName : a.itemname,
                                         LogoUrl = a.LogoUrl,
                                         MinOrderQty = a.MinOrderQty,
                                         price = a.price,
                                         SubCategoryId = a.SubCategoryId,
                                         SubsubCategoryid = a.SubsubCategoryid,
                                         TotalTaxPercentage = a.TotalTaxPercentage,
                                         SellingUnitName = a.SellingUnitName,
                                         SellingSku = a.SellingSku,
                                         UnitPrice = a.UnitPrice,
                                         HindiName = a.HindiName,
                                         VATTax = a.VATTax,
                                         active = a.active,
                                         dreamPoint = 0,
                                         marginPoint = a.marginPoint,
                                         NetPurchasePrice = a.NetPurchasePrice,
                                         promoPerItems = a.promoPerItems,
                                         IsOffer = a.IsOffer,
                                         Deleted = a.Deleted,
                                         IsSensitive = a.IsSensitive,
                                         OfferCategory = a.OfferCategory,
                                         OfferStartTime = a.OfferStartTime,
                                         OfferEndTime = a.OfferEndTime,
                                         OfferQtyAvaiable = a.OfferQtyAvaiable,
                                         OfferQtyConsumed = a.OfferQtyConsumed,
                                         OfferId = a.OfferId,
                                         OfferType = a.OfferType,
                                         OfferWalletPoint = a.OfferWalletPoint,
                                         OfferFreeItemId = a.OfferFreeItemId,
                                         OfferPercentage = a.OfferPercentage,
                                         OfferFreeItemName = a.OfferFreeItemName,
                                         OfferFreeItemImage = a.OfferFreeItemImage,
                                         OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                         OfferMinimumQty = a.OfferMinimumQty,
                                         FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                         FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                         ItemMultiMRPId = a.ItemMultiMRPId,
                                         BillLimitQty = a.BillLimitQty,
                                         itemBaseName = a.itemBaseName,
                                         IsSensitiveMRP = a.IsSensitiveMRP,
                                         UOM = a.UOM,
                                         UnitofQuantity = a.UnitofQuantity
                                     }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdatahi = newdatahi.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    var offerids = newdatahi.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                    foreach (factoryItemdata it in newdatahi)
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }

                        if (it.OfferType != "FlashDeal")
                        {

                            if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                it.IsOffer = true;
                            else
                                it.IsOffer = false;
                        }

                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else
                                it.dreamPoint = 0;
                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch (Exception es)
                        {

                        }

                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }
                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }

                        item.ItemMasters.Add(it);
                    }

                }
                else
                {
                    //Increase some parameter For offer
                    var newdata = (from a in context.itemMasters
                                   where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true && a.SubsubCategoryid == subSubCategoryId && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                   && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                   let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new factoryItemdata
                                   {
                                       WarehouseId = a.WarehouseId,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       CompanyId = a.CompanyId,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       HindiName = a.HindiName,
                                       VATTax = a.VATTax,
                                       active = a.active,
                                       dreamPoint = 0,
                                       marginPoint = a.marginPoint,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       promoPerItems = a.promoPerItems,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       BillLimitQty = a.BillLimitQty,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       UnitofQuantity = a.UnitofQuantity
                                   }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                    foreach (factoryItemdata it in newdata)
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }


                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }
                        }
                        catch (Exception es)
                        {

                        }
                        item.ItemMasters.Add(it);
                    }
                }
                return Request.CreateResponse(HttpStatusCode.OK, new WRSITEM() { ItemMasters = item.ItemMasters, Message = true });

            }
        }

        [Route("GetBestSellingSubCategory")]
        [HttpGet]
        public async Task<List<BestSellingSubCategory>> GetBestSellingSubCategory(int PeopleId, int warehouseId, string lang)
        {
            List<BestSellingSubCategory> bestSellingSubCategories = new List<BestSellingSubCategory>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var db = new AuthContext())
            {
                var subCategoryQuery = "Exec GetSalesAppDeshboardSubCategory " + warehouseId + "," + PeopleId + ",0,20";
                bestSellingSubCategories = await db.Database.SqlQuery<BestSellingSubCategory>(subCategoryQuery).ToListAsync();

                List<string> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryName).Distinct().ToList();
                if (bestSellingSubCategories != null)
                {
                    bestSellingSubCategories = bestSellingSubCategories.Where(x => SubCats.Contains(x.SubCategoryName)).ToList();
                    bestSellingSubCategories.ForEach(x =>
                    {
                        if (!string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.HindiName))
                        {
                            x.SubCategoryName = x.HindiName;
                        }
                    });
                }
            }
            return bestSellingSubCategories;
        }

        [Route("GetItemBySectionForAgent")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage GetItemBySectionForAgent(int PeopleId, int warehouseid, int sectionid, string lang)
        {

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
            List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
            List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
            List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();

            using (var context = new AuthContext())
            {
                DateTime CurrentDate = DateTime.Now;
                var data = context.AppHomeSectionsDB.Where(x => x.WarehouseID == warehouseid && x.Deleted == false && x.SectionID == sectionid).Include("detail").SelectMany(x => x.AppItemsList.Select(y => new { y.ItemId, y.SectionItemID })).ToList();
                if (data != null)
                {
                    List<int> Itemids = data.Select(x => x.ItemId).ToList();

                    WRSITEM item = new WRSITEM();

                    var newdata = (from a in context.itemMasters
                                   where (a.WarehouseId == warehouseid && a.Deleted == false && a.active == true && Itemids.Contains(a.ItemId) && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                   && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                   let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new factoryItemdata
                                   {
                                       WarehouseId = a.WarehouseId,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       CompanyId = a.CompanyId,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       HindiName = a.HindiName,
                                       VATTax = a.VATTax,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       promoPerItems = a.promoPerItems,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       BillLimitQty = a.BillLimitQty,
                                       ItemAppType = a.ItemAppType,
                                       ItemMultiMRPId = a.ItemMultiMRPId
                                   }).ToList();

                    newdata = newdata.OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseid);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion
                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                    foreach (var it in newdata)
                    {
                        if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                        {
                            it.IsOffer = false;
                        }
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }


                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //Customer (0.2 * 10=1)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax)  By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;

                            }
                            else
                            {

                                it.dreamPoint = 0;
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                        }
                        catch { }

                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }
                        item.ItemMasters.Add(it);
                    }
                    if (item.ItemMasters != null)
                    {
                        var res = new
                        {
                            ItemMasters = item.ItemMasters,
                            Status = true,
                            Message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        Array[] l = new Array[] { };
                        var res = new
                        {
                            ItemMasters = l,
                            Status = false,
                            Message = "fail"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                else
                {
                    Array[] l = new Array[] { };
                    var res = new
                    {
                        ItemMasters = l,
                        Status = false,
                        Message = "Item Not found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }

            }
        }

        [Route("GetOfferItemForAgent")]
        [HttpGet]
        public HttpResponseMessage GetOfferItemForAgent(int PeopleId, int WarehouseId, string lang)
        {

            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WROFFERTEM item = new WROFFERTEM();
                List<factoryItemdata> itemMasters = new List<factoryItemdata>();
                itemMasters = (from a in context.itemMasters
                               where (a.WarehouseId == WarehouseId && a.OfferStartTime <= indianTime
                               && a.OfferEndTime >= indianTime && a.OfferCategory == 1 && a.active == true && a.Deleted == false
                               && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid)
                               && (a.ItemAppType == 0 || a.ItemAppType == 1))
                               //join b in context.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                               join c in context.OfferDb on a.OfferId equals c.OfferId
                               where (c.IsActive == true && c.IsDeleted == false && (c.OfferAppType == "Sales App" || c.OfferAppType == "Both"))
                               let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                               select new factoryItemdata
                               {
                                   WarehouseId = a.WarehouseId,
                                   IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                   ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                   CompanyId = a.CompanyId,
                                   Categoryid = a.Categoryid,
                                   Discount = a.Discount,
                                   ItemId = a.ItemId,
                                   ItemNumber = a.Number,
                                   //itemname = a.HindiName != null ? a.HindiName : a.itemname,
                                   itemname = a.itemname,
                                   LogoUrl = a.LogoUrl,
                                   MinOrderQty = a.MinOrderQty,
                                   price = a.price,
                                   SubCategoryId = a.SubCategoryId,
                                   SubsubCategoryid = a.SubsubCategoryid,
                                   TotalTaxPercentage = a.TotalTaxPercentage,
                                   SellingUnitName = a.SellingUnitName,
                                   SellingSku = a.SellingSku,
                                   UnitPrice = a.UnitPrice,
                                   HindiName = a.HindiName != null ? a.HindiName : a.itemname,
                                   VATTax = a.VATTax,
                                   active = a.active,
                                   marginPoint = a.marginPoint,
                                   NetPurchasePrice = a.NetPurchasePrice,
                                   promoPerItems = a.promoPerItems,
                                   IsOffer = a.IsOffer,
                                   Deleted = a.Deleted,
                                   OfferCategory = a.OfferCategory,
                                   OfferStartTime = a.OfferStartTime,
                                   OfferEndTime = a.OfferEndTime,
                                   OfferQtyAvaiable = a.OfferQtyAvaiable,
                                   OfferQtyConsumed = a.OfferQtyConsumed,
                                   OfferId = a.OfferId,
                                   OfferType = a.OfferType,
                                   OfferWalletPoint = a.OfferWalletPoint,
                                   OfferFreeItemId = a.OfferFreeItemId,
                                   OfferPercentage = a.OfferPercentage,
                                   OfferFreeItemName = a.OfferFreeItemName,
                                   OfferFreeItemImage = a.OfferFreeItemImage,
                                   OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                   OfferMinimumQty = a.OfferMinimumQty,
                                   FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                   BillLimitQty = a.BillLimitQty,
                                   ItemMultiMRPId = a.ItemMultiMRPId
                               }).OrderByDescending(x => x.ItemNumber).ToList();

                RetailerAppManager retailerAppManager = new RetailerAppManager();
                #region block Barnd
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    itemMasters = itemMasters.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                foreach (var it in itemMasters)
                {
                    if (item.ItemMasters == null)
                    {
                        item.ItemMasters = new List<factoryItemdata>();
                    }
                    try
                    {/// Dream Point Logic && Margin Point
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }
                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                    item.ItemMasters.Add(it);
                }
                if (itemMasters.Count() != 0)
                {
                    var res = new
                    {
                        offerData = itemMasters,
                        Status = true,
                        Message = "Success."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
                else
                {
                    var res = new
                    {
                        offerData = itemMasters,
                        Status = false,
                        Message = "Item Not found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }

            }
        }

        [Route("CustomerOrderHistory")]
        [HttpGet]
        public async Task<SalesCustomerOrders> GetCustomerOrderHistory(int customerId)
        {
            SalesCustomerOrders customerOrders = new SalesCustomerOrders();
            List<CusterOrderHistory> custerOrderHistories = new List<CusterOrderHistory>();
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var cmd = context.Database.Connection.CreateCommand();
                cmd.Parameters.Add(new SqlParameter("@customerId", @customerId));
                cmd.CommandText = "[dbo].[GetCustomerOrderHistoryForSalesApp]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.CommandTimeout = 600;

                var reader = cmd.ExecuteReader();
                custerOrderHistories = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<CusterOrderHistory>(reader).ToList();
                custerOrderHistories = custerOrderHistories.OrderBy(x => x.SubCategoryName).ThenBy(x => x.BrandName).ThenBy(x => x.ItemName).ToList();
            }

            if (custerOrderHistories != null && custerOrderHistories.Any())
            {
                customerOrders.CusterOrderHistories = custerOrderHistories;
                customerOrders.Brands = custerOrderHistories.Select(x => x.BrandName).Distinct().ToList();
                customerOrders.Subcategories = custerOrderHistories.Select(x => x.SubCategoryName).Distinct().ToList();
            }

            return customerOrders;
        }

        [Route("GetCompanyAllItem")]
        [HttpGet]
        public HttpResponseMessage GetCompanyAllItem(int PeopleId, int WarehouseId, int scatid, string lang)
        {
            using (var context = new AuthContext())
            {
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                List<int> CatIds = StoreCategorySubCategoryBrands.Select(x => x.Categoryid).Distinct().ToList();
                List<int> SubCats = StoreCategorySubCategoryBrands.Select(x => x.SubCategoryId).Distinct().ToList();
                List<int> SubSubCats = StoreCategorySubCategoryBrands.Select(x => x.BrandId).Distinct().ToList();
                WRSITEM item = new WRSITEM();
                if (lang.Trim() == "hi")
                {
                    var newdata = (from a in context.itemMasters
                                   where (a.WarehouseId == WarehouseId && a.Deleted == false && a.active == true && a.SubCategoryId == scatid && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                    && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                   let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new factoryItemdata
                                   {
                                       WarehouseId = a.WarehouseId,
                                       CompanyId = a.CompanyId,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       itemname = a.HindiName != null ? a.HindiName : a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       HindiName = a.HindiName,
                                       VATTax = a.VATTax,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       promoPerItems = a.promoPerItems,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       itemBaseName = a.itemBaseName,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       UnitofQuantity = a.UnitofQuantity
                                   }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    foreach (var it in newdata)
                    {
                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //salesman 0.2=(0.02 * 10=0.2)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                    if (it.price > it.UnitPrice)
                                    {
                                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                    }
                                    else
                                    {
                                        it.marginPoint = 0;
                                    }
                                }
                            }
                            catch (Exception ds) { }
                        }
                        catch { }
                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true)
                                {
                                    if (it.IsSensitiveMRP == false)
                                    {
                                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                    }
                                    else
                                    {
                                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                }
                            }
                            else
                            {
                                it.itemname = it.itemBaseName + " " + it.price + " MRP ";
                            }
                        }
                        item.ItemMasters.Add(it);
                    }

                }
                else
                {
                    var newdata = (from a in context.itemMasters
                                   where (a.WarehouseId == WarehouseId && a.Deleted == false && a.active == true && a.SubCategoryId == scatid && (a.ItemAppType == 0 || a.ItemAppType == 1)
                                    && CatIds.Contains(a.Categoryid) && SubCats.Contains(a.SubCategoryId) && SubSubCats.Contains(a.SubsubCategoryid))
                                   let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new factoryItemdata
                                   {
                                       WarehouseId = a.WarehouseId,
                                       CompanyId = a.CompanyId,
                                       IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       Categoryid = a.Categoryid,
                                       Discount = a.Discount,
                                       ItemId = a.ItemId,
                                       ItemNumber = a.Number,
                                       itemname = a.itemname,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       price = a.price,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       SellingUnitName = a.SellingUnitName,
                                       SellingSku = a.SellingSku,
                                       UnitPrice = a.UnitPrice,
                                       HindiName = a.HindiName,
                                       VATTax = a.VATTax,
                                       active = a.active,
                                       marginPoint = a.marginPoint,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       promoPerItems = a.promoPerItems,
                                       IsOffer = a.IsOffer,
                                       Deleted = a.Deleted,
                                       OfferCategory = a.OfferCategory,
                                       OfferStartTime = a.OfferStartTime,
                                       OfferEndTime = a.OfferEndTime,
                                       OfferQtyAvaiable = a.OfferQtyAvaiable,
                                       OfferQtyConsumed = a.OfferQtyConsumed,
                                       OfferId = a.OfferId,
                                       OfferType = a.OfferType,
                                       OfferWalletPoint = a.OfferWalletPoint,
                                       OfferFreeItemId = a.OfferFreeItemId,
                                       OfferPercentage = a.OfferPercentage,
                                       OfferFreeItemName = a.OfferFreeItemName,
                                       OfferFreeItemImage = a.OfferFreeItemImage,
                                       OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                       OfferMinimumQty = a.OfferMinimumQty,
                                       FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                       FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       UnitofQuantity = a.UnitofQuantity
                                   }).OrderByDescending(x => x.ItemNumber).ToList();

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    #region block Barnd
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                    }
                    #endregion

                    foreach (var it in newdata)
                    {
                        if (item.ItemMasters == null)
                        {
                            item.ItemMasters = new List<factoryItemdata>();
                        }
                        try
                        {

                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //salesman 0.2=(0.02 * 10=0.2)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }
                                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                    if (it.price > it.UnitPrice)
                                    {
                                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                    }
                                    else
                                    {
                                        it.marginPoint = 0;
                                    }
                                }
                            }
                            catch (Exception ds) { }
                        }
                        catch { }
                        item.ItemMasters.Add(it);
                    }
                }
                if (item.ItemMasters != null)
                {
                    item.Message = true;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                else
                {
                    item.Message = false;
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }

            }
        }

        [Route("GetCompanyBrand")]
        [HttpGet]
        public async Task<List<SubSubCategories>> GetCompanyBrand(int PeopleId, int warehouseId, int subcategoryId, string lang)
        {
            List<SubSubCategories> lstSubCategories = new List<SubSubCategories>();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var db = new AuthContext())
            {
                var brandQuery = "Exec GetSalesBrandBySubCategoryId " + warehouseId + "," + subcategoryId;
                lstSubCategories = db.Database.SqlQuery<SubSubCategories>(brandQuery).ToList();

                List<string> strCondition = StoreCategorySubCategoryBrands.Select(x => x.Categoryid + "-" + x.SubCategoryId + "-" + x.BrandId).Distinct().ToList();
                if (lstSubCategories != null)
                {
                    lstSubCategories = lstSubCategories.Where(x => strCondition.Contains(x.Categoryid + "-" + x.SubCategoryId + "-" + x.SubSubCategoryId)).ToList();
                    lstSubCategories = lstSubCategories.GroupBy(s => new { s.SubCategoryId, s.SubSubCategoryId, s.SubSubcategoryName, s.LogoUrl, s.HindiName }).Select(x => new SubSubCategories
                    {
                        Categoryid = 0,
                        HindiName = x.Key.HindiName,
                        itemcount = x.Sum(u => u.itemcount),
                        LogoUrl = x.Key.LogoUrl,
                        SubCategoryId = x.Key.SubCategoryId,
                        SubSubCategoryId = x.Key.SubSubCategoryId,
                        SubSubcategoryName = !string.IsNullOrEmpty(lang) && lang.Trim() == "hi" && !string.IsNullOrEmpty(x.Key.HindiName) ? x.Key.HindiName : x.Key.SubSubcategoryName
                    }).ToList();
                }
            }
            return lstSubCategories;
        }


        #endregion

        #region  SalesAppReport
        [Route("BrandWise")]
        [HttpGet]
        public dynamic Getdata(string day, int PeopleId)
        {

            using (var db = new AuthContext())
            {
                var people = db.Peoples.Where(x => x.PeopleID == PeopleId && x.Deleted == false).SingleOrDefault();

                if (day != null && PeopleId > 0)
                {
                    List<Target> item = new List<Target>();
                    //item = db.TargetDb.Where(x => x.WarehouseId == people.WarehouseId).ToList();
                    var date = indianTime;
                    var sDate = indianTime.Date;
                    if (day == "1Month")
                    {
                        sDate = indianTime.AddMonths(-1).Date;
                    }
                    else if (day == "3Month")
                    {
                        sDate = indianTime.AddMonths(-3).Date;
                    }
                    var list = (from i in db.DbOrderDetails
                                where i.CreatedDate > sDate && i.CreatedDate <= date && i.WarehouseId == people.WarehouseId && i.ExecutiveId == PeopleId
                                join k in db.itemMasters on i.ItemId equals k.ItemId
                                join l in db.SubsubCategorys on k.SubsubCategoryid equals l.SubsubCategoryid
                                select new SaleDC
                                {
                                    Sale = i.TotalAmt,
                                    SubsubcategoryName = l.SubsubcategoryName,
                                }).ToList();


                    var result = list.GroupBy(d => d.SubsubcategoryName)
                        .Select(
                            g => new
                            {
                                Sale = g.Sum(s => s.Sale),
                                BrandName = g.First().SubsubcategoryName,
                            });
                    return result;
                }

                else
                {
                    return null;
                }
            }

        }

        [Route("SalesManAppNew")]
        [HttpGet]
        public HttpResponseMessage MobileAppV1(DateTime? datefrom, DateTime? dateto, int id)
        {
            using (var db = new AuthContext())
            {
                try
                {
                    var orderQuery = string.Format("select distinct sum(totalamt) over(partition by  o.executiveid ) sale ," +
                                                    "sum(totalamt) over(partition by  o.executiveid, o.storeid) Storesale," +
                        " max(isnull(s.name, 'Other'))  over(partition by  o.storeid) StoreName," +
                        " dense_rank() over(partition by  o.executiveid order by od.orderid) + dense_rank() over(partition by  o.executiveid order by od.orderid desc) - 1 OrderCount, " +
                        " dense_rank() over(partition by  o.executiveid order by od.CustomerId) + dense_rank() over(partition by  o.executiveid order by od.CustomerId desc) - 1 OrderCustomerCount, " +
                        "  dense_rank() over(partition by  o.executiveid, o.storeid  order by od.orderid) + dense_rank() over(partition by  o.executiveid, o.storeid  order by od.orderid desc) - 1 StoreOrderCount" +
                        " from OrderDetails o with(nolock)" +
                       " inner join OrderMasters od  with(nolock) on o.OrderId = od.OrderId and o.ExecutiveId = {0}" +
                       " left join stores s with(nolock) on o.StoreId = s.Id", id);

                    int ActiveCustomercount = 0, TotalCustomercount = 0;

                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    List<DataContracts.Masters.Store.ClusterStoreExecutiveDc> clusterStoreExecutiveDcs = retailerAppManager.GetStoreClusterExecutiveDetail();
                    var clusterIds = clusterStoreExecutiveDcs.Where(x => x.ExecutiveId == id).Select(x => x.ClusterId).Distinct().ToList();
                    var predicate = PredicateBuilder.New<Customer>();
                    predicate = predicate.And(x => x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false);

                    //var builder = Builders<BsonDocument>.Filter;
                    //var filter = builder.Eq("orderDetails.ExecutiveId", id) & builder.Eq("active", true) & builder.Eq("Deleted", false);
                    if (datefrom != null && dateto != null)
                    {
                        //filter = filter & builder.Gte("CreatedDate", datefrom.Value) & builder.Lte("CreatedDate", dateto.Value);
                        predicate = predicate.And(x => x.CreatedDate >= datefrom && x.CreatedDate <= dateto);
                        orderQuery += string.Format(" where od.CreatedDate between '{0}' and '{1}'", datefrom.Value, dateto.Value);
                    }
                    //MongoDbHelper<MongoOrderMaster> mongoDbHelper = new MongoDbHelper<MongoOrderMaster>();
                    TotalCustomercount = db.Customers.Count(predicate);
                    predicate = predicate.And(x => x.Active);
                    ActiveCustomercount = db.Customers.Count(predicate);
                    ////IMongoDatabase mogodb = mongoDbHelper.dbClient.GetDatabase(ConfigurationManager.AppSettings["mongoDbName"]);
                    //var collection = mongoDbHelper.mongoDatabase.GetCollection<BsonDocument>("OrderMaster");
                    //var aggTotal = collection.Aggregate().Match(filter)
                    //.Group(new BsonDocument
                    //                {
                    //                    {
                    //                      "_id", "$orderDetails.ExecutiveId"
                    //                    },
                    //                    {
                    //                        "total", new BsonDocument
                    //                                     {
                    //                                         {
                    //                                             "$sum", "$orderDetails.TotalAmt"
                    //                                         }
                    //                                     }
                    //                    },
                    //                    {

                    //                         "count", new BsonDocument
                    //                                     {
                    //                                       {
                    //                                           "$sum", 1
                    //                                       }
                    //                                    }
                    //                    }
                    //                }).Project(new BsonDocument
                    //                {
                    //                    {"_id", 0},
                    //                    {"total", 1},
                    //                    {"count", 2},
                    //                });


                    //var doc = aggTotal.FirstOrDefault();

                    var orderData = db.Database.SqlQuery<orderDataDC>(orderQuery).ToList();

                    var res = new
                    {
                        Customercountdata = TotalCustomercount,
                        ActiveCustomer = ActiveCustomercount,
                        OrderCountdata = orderData != null && orderData.Any() ? orderData.FirstOrDefault().OrderCount : 0,
                        TotalOrderAmount = orderData != null && orderData.Any() ? orderData.FirstOrDefault().sale : 0,
                        OrderCustomerCount = orderData != null && orderData.Any() ? orderData.FirstOrDefault().OrderCustomerCount : 0,
                        StoreDetail = orderData != null && orderData.Any() ? orderData.Select(x => new StoreSalesDc { StoreName = x.StoreName, Storesale = x.Storesale, StoreOrderCount = x.StoreOrderCount }).ToList() : new List<StoreSalesDc>()
                    };

                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
                catch (Exception ex)
                {
                    var storedetail = new { StoreName = "", Storesale = 0, StoreOrderCount = 0 };
                    return Request.CreateResponse(HttpStatusCode.OK,

                        new
                        {
                            Customercountdata = 0,
                            ActiveCustomer = 0,
                            OrderCountdata = 0,
                            TotalOrderAmount = 0,
                            OrderCustomerCount = 0,
                            StoreDetail = new List<StoreSalesDc>()
                        });

                }
            }
        }

        [Route("ExecuteSalesTarget")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesTargetResponse> ExecuteSalesTarget(int peopleId, int CustomerId, int skip, int take, string itemName = null)
        {
            SalesTargetResponse response = new SalesTargetResponse();
            List<SalesTargetCustomerItem> result = new List<SalesTargetCustomerItem>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;
                itemName = itemName == null ? "" : itemName;
                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                var subcatid = 0;
                //DateTime date = indianTime.AddMonths(Month);
                List<Object> parameters = new List<object>();
                string sqlquery = "exec Seller.SalesTargetByCustomerId";
                parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                parameters.Add(new SqlParameter("@PeopleId", peopleId));
                parameters.Add(new SqlParameter("@SubCategoryId", subcatid));
                parameters.Add(new SqlParameter("@itemName", itemName));
                //parameters.Add(new SqlParameter("@StartDate", startDate));
                //parameters.Add(new SqlParameter("@EndDate", endDate));
                parameters.Add(new SqlParameter("@skip", skip));
                parameters.Add(new SqlParameter("@take", take));
                sqlquery = sqlquery + " @CustomerId, @PeopleId,@SubCategoryId,@itemName, @skip,@take";
                result = await context.Database.SqlQuery<SalesTargetCustomerItem>(sqlquery, parameters.ToArray()).ToListAsync();

                if (skip == 0)
                {
                    response.AchivePercent = await context.Database.SqlQuery<double>("exec GetAchiveSalesTargetByPeopleId " + peopleId).FirstOrDefaultAsync();
                }
                response.SalesTargetCustomerItems = result;

            }
            return response;
        }

        [Route("BrandWiseCustomerSalesTarget")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<CompanySalesTargetCustomer>> BrandWiseCustomerSalesTarget(int peopleId, int CustomerId, int skip, int take)
        {
            List<CompanySalesTargetCustomer> result = new List<CompanySalesTargetCustomer>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;

                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                if (CustomerId > 0)
                {
                    //DateTime date = indianTime.AddMonths(Month);
                    List<Object> parameters = new List<object>();
                    string sqlquery = "exec Seller.SalesTargetByCustomerBrand";
                    parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                    parameters.Add(new SqlParameter("@PeopleId", peopleId));
                    //parameters.Add(new SqlParameter("@StartDate", startDate));
                    //parameters.Add(new SqlParameter("@EndDate", endDate));
                    parameters.Add(new SqlParameter("@skip", skip));
                    parameters.Add(new SqlParameter("@take", take));
                    sqlquery = sqlquery + " @CustomerId, @PeopleId,  @skip,@take";
                    result = await context.Database.SqlQuery<CompanySalesTargetCustomer>(sqlquery, parameters.ToArray()).ToListAsync();
                }
            }
            return result;
        }

        [Route("CustomerSalesTargetbyBrand")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<SalesTargetCustomerItem>> CustomerSalesTargetbyBrand(int peopleId, int CustomerId, int subCategoryId)
        {
            List<SalesTargetCustomerItem> result = new List<SalesTargetCustomerItem>();
            using (var context = new AuthContext())
            {
                DateTime startDate, endDate;
                DateTime now = indianTime;
                string itemName = "";
                //if (Month == 0)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //}
                //else if (Month == 1)
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-1);
                //    startDate = new DateTime(now.Year, now.Month, 1);

                //}
                //else
                //{
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //    endDate = startDate.AddMonths(1).AddDays(-1).AddHours(now.Hour).AddMinutes(now.Minute);
                //    now = now.AddMonths(-2);
                //    startDate = new DateTime(now.Year, now.Month, 1);
                //}

                if (CustomerId > 0)
                {
                    int skip = 0; int take = 100;
                    //  DateTime date = indianTime.AddMonths(Month);
                    List<Object> parameters = new List<object>();
                    string sqlquery = "exec Seller.SalesTargetByCustomerId";
                    parameters.Add(new SqlParameter("@CustomerId", CustomerId));
                    parameters.Add(new SqlParameter("@PeopleId", peopleId));
                    parameters.Add(new SqlParameter("@SubCategoryId", subCategoryId));
                    parameters.Add(new SqlParameter("@itemName", itemName));
                    //parameters.Add(new SqlParameter("@StartDate", startDate));
                    //parameters.Add(new SqlParameter("@EndDate", endDate));
                    parameters.Add(new SqlParameter("@skip", skip));
                    parameters.Add(new SqlParameter("@take", take));
                    sqlquery = sqlquery + " @CustomerId, @PeopleId, @SubCategoryId,@itemName, @skip, @take";
                    result = await context.Database.SqlQuery<SalesTargetCustomerItem>(sqlquery, parameters.ToArray()).ToListAsync();
                }
            }
            return result;
        }

        [Route("GetSalesPersonCommission")]
        [HttpGet]
        public async Task<SalesPersonCommission> GetSalesPersonCommission(int peopleId, int warehouseId, int month, int year = 2021)
        {
            SalesPersonCommission salesPersonCommission = new SalesPersonCommission();
            using (var context = new AuthContext())
            {

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                DataTable peopleidDt = new DataTable();
                peopleidDt.Columns.Add("IntValue");
                DataRow dr = peopleidDt.NewRow();
                dr[0] = peopleId;
                peopleidDt.Rows.Add(dr);

                var executiveIds = new SqlParameter("executiveIds", peopleidDt);
                executiveIds.SqlDbType = SqlDbType.Structured;
                executiveIds.TypeName = "dbo.IntValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetSalesCommission]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@Month", month));
                cmd.Parameters.Add(new SqlParameter("@Year", year));
                cmd.Parameters.Add(executiveIds);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 600;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var SalesPersonCommissionData = ((IObjectContextAdapter)context)
                                    .ObjectContext
                                    .Translate<SalesPersonCommissionData>(reader).ToList();

                if (SalesPersonCommissionData != null && SalesPersonCommissionData.Any())
                {
                    salesPersonCommission = SalesPersonCommissionData.GroupBy(x => x.Name).Select(x => new SalesPersonCommission
                    {
                        Name = x.Key,
                        CategoryCommissions = x.GroupBy(y => new { y.CategoryName, y.ShowColumnWithValueField }).Select(z =>
                               new CategoryCommission
                               {
                                   CategoryName = z.Key.CategoryName,
                                   ShowColumnWithValueField = JsonConvert.DeserializeObject<Dictionary<string, string>>(z.Key.ShowColumnWithValueField),
                                   EventCommissions = z.Select(p => new EventCommission
                                   {
                                       Id = p.Id,
                                       BookedValue = Convert.ToInt32(Math.Round(p.BookedValue, 0)),
                                       EventCatName = p.EventCatName,
                                       EventName = p.EventName,
                                       IncentiveType = p.IncentiveType,
                                       IncentiveValue = p.IncentiveValue,
                                       ReqBookedValue = Convert.ToInt32(Math.Round(p.ReqBookedValue, 0)),
                                       EarnValue = Convert.ToInt32(Math.Round(p.EarnValue, 0)),
                                       EndDate = p.EndDate,
                                       StartDate = p.StartDate
                                   }
                                  ).ToList()
                               }
                        ).ToList()
                    }).FirstOrDefault();
                }
                else
                {
                    string Name = context.Peoples.FirstOrDefault(x => x.PeopleID == peopleId).DisplayName;
                    salesPersonCommission = new SalesPersonCommission
                    {
                        Name = Name
                    };
                }
            }

            return salesPersonCommission;
        }


        #endregion

        #region Others
        //Agent 
        [Route("GetChequeBounceinfo")]
        [HttpPost]
        [Authorize]
        public AgentChequeBounceInfoList GetChequeBounceinfo(AgentChequeBouncePaginator agentChequeBouncePaginator)
        {

            using (var context = new AuthContext())
            {

                AgentChequeBounceInfoList agentChequeBounceInfoList = new AgentChequeBounceInfoList();
                if (agentChequeBouncePaginator.AgentId > 0)
                {
                    var query = "Select od.CustomerName,Cust.Skcode,Cust.ShopName,cheq.ChequeNumber,cheq.ChequeAmt,cheq.ChequeDate,cheq.ChequeBankName,cheq.Orderid  from Customers cust " +
                                "inner join OrderDispatchedMasters od on cust.CustomerId=od.CustomerId " +
                                "inner join ChequeCollections cheq on cheq.Orderid=od.OrderId where cheq.ChequeStatus=4 and od.OrderTakenSalesPersonId=" + agentChequeBouncePaginator.AgentId;

                    agentChequeBounceInfoList.agentChequeBounceInfo = context.Database.SqlQuery<AgentChequeBounceInfo>(query).Skip(agentChequeBouncePaginator.Skip * agentChequeBouncePaginator.Take).Take(agentChequeBouncePaginator.Take).ToList();
                    agentChequeBounceInfoList.Count = context.Database.SqlQuery<AgentChequeBounceInfo>(query).Count();
                    agentChequeBounceInfoList.TotalAmount = Convert.ToDouble(context.Database.SqlQuery<AgentChequeBounceInfo>(query).Sum(x => x.ChequeAmt));
                }
                else if (agentChequeBouncePaginator.WarehouseId > 0)
                {
                    var query = "Select od.CustomerName,Cust.Skcode,Cust.ShopName,cheq.ChequeNumber,cheq.ChequeAmt,cheq.ChequeDate,cheq.ChequeBankName,cheq.Orderid  from Customers cust " +
                                    "inner join OrderDispatchedMasters od on cust.CustomerId=od.CustomerId " +
                                    "inner join ChequeCollections cheq on cheq.Orderid=od.OrderId where cheq.ChequeStatus=4 and Cust.WarehouseId=" + agentChequeBouncePaginator.WarehouseId;

                    agentChequeBounceInfoList.agentChequeBounceInfo = context.Database.SqlQuery<AgentChequeBounceInfo>(query).Skip(agentChequeBouncePaginator.Skip * agentChequeBouncePaginator.Take).Take(agentChequeBouncePaginator.Take).ToList();
                    agentChequeBounceInfoList.Count = context.Database.SqlQuery<AgentChequeBounceInfo>(query).Count();
                    agentChequeBounceInfoList.TotalAmount = Convert.ToDouble(context.Database.SqlQuery<AgentChequeBounceInfo>(query).Sum(x => x.ChequeAmt));

                }
                return agentChequeBounceInfoList;

            }
        }

        [Route("GetSalesLeadExecutive")]
        [HttpGet]
        [AllowAnonymous]
        //[Authorize]
        public List<ExecutiveInfo> GetSalesLeadExecutive(int Id)
        {

            using (var context = new AuthContext())
            {
                var data = context.Peoples.Where(x => x.ReportPersonId == Id).Select(x => new ExecutiveInfo
                {
                    ExecutiveId = x.PeopleID,
                    ExecutiveName = x.DisplayName
                }).ToList();
                return data;

            }
        }

        //agent commision
        [Route("GetCustMyLead")]
        [AllowAnonymous]
        [HttpGet]
        public List<customernewDC> GetCustDetailLabel(float currentlat, float currentlng, int skip, int take, string Skcode)
        {

            using (var myContext = new AuthContext())
            {
                if (Skcode == null)
                {
                    Skcode = "";
                }
                var currentlatParam = new SqlParameter("@currentlat", currentlat);
                var currentlngParam = new SqlParameter("@currentlng", currentlng);
                var skipParam = new SqlParameter("@skip", skip);
                var takeParam = new SqlParameter("@take", take);
                var SkcodeParam = new SqlParameter("@Skcode", Skcode);
                var result = myContext.Database.SqlQuery<customernewDC>("GetNearestCustomersFromLatLng @currentlat,@currentlng,@skip,@take,@Skcode", currentlatParam, currentlngParam, skipParam, takeParam, SkcodeParam).ToList();
                return result;

            }

        }

        [Route("GetCustGrabbed")]
        [HttpGet]
        public async Task<List<CustomerDC>> CustGrabbed(int PeopleId)
        {
            Message message = new Message();
            using (AuthContext context = new AuthContext())
            {
                if (PeopleId > 0)
                {
                    string query = "select * from Customers where GrabbedBy=" + PeopleId + "and Deleted= 0 ";
                    List<CustomerDC> cust = await context.Database.SqlQuery<CustomerDC>(query).ToListAsync();

                    return cust;
                }
                else
                {
                    return null;
                }

            }
        }

        [Route("GetCustDetails")]
        [AllowAnonymous]
        [HttpGet]
        public Customer GetCustDetails(int CustomerId)
        {
            using (AuthContext context = new AuthContext())
            {
                var custdetails = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false).FirstOrDefault();

                return custdetails;
            }
        }

        [Route("CustGrabbed")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<CustomerGrabbedDc> CustGrabbed(int CustomerId, int PeopleId)
        {
            CustomerGrabbedDc customerGrabbedDc = new CustomerGrabbedDc();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (AuthContext context = new AuthContext())
            {
                var customers = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false).FirstOrDefault();
                if (customers != null)
                {
                    var Peoplecity = context.Peoples.Where(x => x.PeopleID == PeopleId && x.Deleted == false).Select(x => x.Cityid).FirstOrDefault();
                    if (customers.GrabbedBy == 0)
                    {
                        if (customers.Cityid == Peoplecity && customers.Cityid > 0)
                        {
                            customers.GrabbedBy = PeopleId;
                            customers.UpdatedDate = indianTime;
                            customers.CustomerVerify = "Pending For Activation";
                            context.Entry(customers).State = EntityState.Modified;
                            //context.Commit();
                            if (context.Commit() > 0)
                            {
                                customerGrabbedDc.Message = "Customer Grabbed Successfully";
                                customerGrabbedDc.Status = true;
                            }

                            string query = "Select Distinct citywise.Id,citywise.CommissionAmount from CityWiseActivationConfigurations citywise inner join Customers cust on citywise.CityId=cust.Cityid where cust.GrabbedBy>0 and cust.GrabbedBy=" + PeopleId + " and citywise.IsActive=0 ";
                            var commission = await context.Database.SqlQuery<commissionDc>(query).FirstAsync();
                            AgentCommissionforCity agentCommissionforCity = new AgentCommissionforCity();
                            agentCommissionforCity.Amount = commission.CommissionAmount;
                            agentCommissionforCity.ConfigurationId = commission.Id;
                            agentCommissionforCity.PeopleId = PeopleId;
                            agentCommissionforCity.CustomerId = CustomerId;
                            agentCommissionforCity.IsActive = true;
                            agentCommissionforCity.IsDeleted = false;
                            agentCommissionforCity.CreatedDate = DateTime.Now;
                            agentCommissionforCity.CreatedBy = userid;
                            context.AgentCommissionforCityDB.Add(agentCommissionforCity);
                            context.Commit();

                        }
                        else
                        {
                            customerGrabbedDc.Message = "Customer Out Of City";
                            customerGrabbedDc.Status = false;
                        }

                    }
                    else if (customers.GrabbedBy > 0)
                    {
                        customerGrabbedDc.Message = "Customer Is Already Grabbed";
                        customerGrabbedDc.Status = false;
                    }
                    customerGrabbedDc.cust = customers;
                    return customerGrabbedDc;
                }
                else
                {

                    customerGrabbedDc.cust = customers;
                    return customerGrabbedDc;
                }


            }
        }


        [AllowAnonymous]
        [Route("GetAgentCommission")]
        [HttpGet]
        public async Task<List<AgentCommissionDc>> GetAgentCommission(int PeopleId)
        {
            using (AuthContext context = new AuthContext())
            {

                string query = "Select cust.CustomerId,cust.SkCode as Skcode,cust.Name,cust.ShopName,cust.City,city.CommissionAmount,Cust.CustomerVerify,cust.UpdatedDate,city.IsDeleted,city.IsActive from AgentCommissionforCities agent with(nolock) inner join Customers cust  with(nolock)  on agent.CustomerId = cust.CustomerId inner join CityWiseActivationConfigurations city  with(nolock)  on city.CityId = cust.Cityid and city.Id = agent.ConfigurationId where city.IsDeleted = 0 and agent.IsDeleted=0 and cust.Deleted=0 and cust.GrabbedBy = " + PeopleId + "";
                List<AgentCommissionDc> Commission = await context.Database.SqlQuery<AgentCommissionDc>(query).ToListAsync();
                return Commission;


            }
        }

        [Route("ValidatePinCode")]
        [HttpGet]
        [AllowAnonymous]

        //master
        public async Task<bool> ValidatePinCode(string city, string pinCode)
        {
            return true;
            //var pincodeUrl = ConfigurationManager.AppSettings["PostalCodeApiUrl"] + pinCode;
            //bool isValid = false;



            //GeoHelper helper = new GeoHelper();
            //var responseList = helper.GetAddressResult(pinCode);

            //if (responseList != null && responseList.Any() && responseList.Any(x => x.address_components.Any()) &&
            //    !responseList.Any(x => x.address_components.Any(z => z.types.Contains("administrative_area_level_2")))
            //    && responseList.Any(x => x.geometry != null && x.geometry.location != null)
            //    )
            //{
            //    var lat = responseList.FirstOrDefault().geometry.location.lat;
            //    var lng = responseList.FirstOrDefault().geometry.location.lng;
            //    responseList = helper.GetLatLngResult((double)lat, (double)lng);

            //}

            //isValid = responseList != null && responseList.Any(x => x.address_components != null && x.address_components.Any())
            //           && responseList.SelectMany(x => x.address_components).Any(z => !string.IsNullOrEmpty(z.long_name) && z.long_name.ToLower() == city.ToLower());




            //return isValid;
        }

        //Customer

        [Route("IsChequeAccepted")]
        [HttpGet]
        [AllowAnonymous]
        public CustomerChequeAccepted IsChequeAccepted(int CustomerId)
        {
            CustomerChequeAccepted CustomerChequeAccepted = new CustomerChequeAccepted();
            using (var db = new AuthContext())
            {
                var cust = db.Customers.Where(x => x.CustomerId == CustomerId).Select(x => new { x.IsChequeAccepted, x.ChequeLimit }).FirstOrDefault();
                CustomerChequeAccepted.ChequeLimit = cust.ChequeLimit;
                CustomerChequeAccepted.IsChequeAccepted = cust.IsChequeAccepted;
                if (cust.IsChequeAccepted)
                {
                    string query = "exec GetCutomerChequLimit " + CustomerChequeAccepted.ChequeLimit + "," + CustomerId;
                    var lstChequeStatus = db.Database.SqlQuery<double>(query).FirstOrDefault();
                    if (lstChequeStatus == 0)
                    {
                        CustomerChequeAccepted.IsChequeAccepted = false;
                        CustomerChequeAccepted.msg = "Your previous cheque was return or cheque limit exceed.";
                    }
                    else
                    {
                        CustomerChequeAccepted.ChequeLimit = lstChequeStatus;
                    }
                }
                else
                {
                    CustomerChequeAccepted.msg = "";
                }
            }
            return CustomerChequeAccepted;
        }

        [Route("changepassword")]
        [AcceptVerbs("PUT")]
        public HttpResponseMessage Changepassword(pwcdetail item)
        {
            logger.Info("start putCustomer: ");
            using (AuthContext db = new AuthContext())
            {
                if (item == null)
                {
                    throw new ArgumentNullException("item");
                }
                try
                {
                    customerDetail res;
                    Customer cust = db.Customers.Where(x => x.CustomerId == item.CustomerId).SingleOrDefault();
                    var identity = User.Identity as ClaimsIdentity;
                    if (cust != null && cust.Password != item.currentpassword)
                        cust = null;


                    if (cust != null)
                    {
                        cust.Password = item.newpassword;
                        cust.IsResetPasswordOnLogin = false;
                        db.Entry(cust).State = EntityState.Modified;
                        db.Commit();
                    }
                    else
                    {
                        res = new customerDetail()
                        {
                            customers = null,
                            Status = false,
                            Message = "Customer not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    res = new customerDetail()
                    {
                        customers = cust,
                        Status = true,
                        Message = "Password is changed."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
                catch (Exception ex)
                {
                    logger.Error("Error in put Customer " + ex.Message);
                    customerDetail res;
                    res = new customerDetail()
                    {
                        customers = null,
                        Status = false,
                        Message = "Somthing went wrong."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }

        [Route("addcust")]
        [AcceptVerbs("POST")]
        public HttpResponseMessage addcust(Customer customer)
        {
            customerDetail res;
            logger.Info("start addCustomer: ");
            using (AuthContext db = new AuthContext())
            {
                try
                {
                    Customer c = new Customer();
                    Customer customers = db.Customers.Where(s => s.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
                    People people = db.Peoples.Where(q => q.PeopleID == customer.ExecutiveId).FirstOrDefault();
                    City city = db.Cities.Where(x => x.CityName.Trim().ToLower() == customer.City.Trim().ToLower() && x.Deleted == false).FirstOrDefault();

                    Warehouse wh = new Warehouse();

                    if (people != null)
                    {
                        wh = db.Warehouses.Where(x => x.WarehouseId == people.WarehouseId && x.Deleted == false).FirstOrDefault();
                    }

                    if (!string.IsNullOrEmpty(customer.RefNo))
                    {
                        var checkgst = false;
                        if (customers == null)
                            checkgst = db.Customers.Any(x => x.RefNo == customer.RefNo);
                        else
                            checkgst = db.Customers.Any(x => x.RefNo == customer.RefNo && x.CustomerId != customers.CustomerId);

                        if (checkgst)
                        {
                            res = new customerDetail()
                            {
                                customers = null,
                                Status = false,
                                Message = "Gst Already Exsits."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                    }

                    if (!string.IsNullOrEmpty(customer.LicenseNumber.Trim()) && customer.LicenseNumber != "0")
                    {
                        var checkgst = db.Customers.Where(x => x.LicenseNumber == customer.LicenseNumber && x.CustomerId != customer.CustomerId).Count();
                        if (checkgst > 0)
                        {
                            res = new customerDetail()
                            {
                                customers = null,
                                Status = false,
                                Message = "License Number Already Exsits."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                    }

                    if (customers == null)
                    {
                        string s = string.Format("{0:N6}", customer.lat);
                        string t = string.Format("{0:N6}", customer.lg);
                        // var dd = GetClusters(Convert.ToDouble(s), Convert.ToDouble(t));
                        Cluster dd = null;
                        c.Distance = 0;
                        if (!string.IsNullOrEmpty(customer.ShippingAddress))
                        {
                            GeoHelper geoHelper = new GeoHelper();
                            decimal? lat, longitude;
                            geoHelper.GetLatLongWithZipCode(customer.ShippingAddress, customer.City, customer.ZipCode, out lat, out longitude);
                            c.Addresslat = (double)lat;
                            c.Addresslg = (double)longitude;
                            if (lat.HasValue && longitude.HasValue && customer.lat > 0 && customer.lg > 0)
                            {
                                var sourceGeoCordinates = new System.Device.Location.GeoCoordinate(c.Addresslat.Value, c.Addresslg.Value);
                                var destination = new System.Device.Location.GeoCoordinate(customer.lat, customer.lg);
                                c.Distance = GeoHelper.AerialDistance(sourceGeoCordinates, destination);
                            }
                        }


                        c.Skcode = skcode();
                        c.BAGPSCoordinates = customer.BAGPSCoordinates;
                        c.BillingAddress = customer.BillingAddress;
                        c.ShippingAddress = customer.ShippingAddress;
                        c.ZipCode = customer.ZipCode;

                        c.BillingCity = customer.BillingCity;
                        c.BillingState = customer.BillingState;
                        c.BillingZipCode = customer.BillingZipCode;

                        c.ExecutiveId = people.PeopleID;
                        c.FSAAI = customer.FSAAI;
                        c.LandMark = customer.LandMark;
                        c.Mobile = customer.Mobile;
                        c.MobileSecond = customer.MobileSecond;
                        c.MonthlyTurnOver = customer.MonthlyTurnOver;
                        c.Name = customer.Name;
                        c.Password = customer.Password;
                        c.RefNo = customer.RefNo;
                        c.SAGPSCoordinates = customer.SAGPSCoordinates;
                        c.ShopName = customer.ShopName;
                        c.SizeOfShop = customer.SizeOfShop;
                        c.UploadRegistration = customer.UploadRegistration;
                        c.lat = customer.lat;
                        c.lg = customer.lg;
                        if (customer.Shoplat > 0)
                        {
                            c.Shoplat = customer.Shoplat;
                            c.Shoplg = customer.Shoplg;
                        }
                        c.ShippingCity = city != null ? city.CityName : "";
                        c.State = city != null ? city.StateName : "";
                        c.Cityid = wh.Cityid;
                        c.City = wh.CityName;
                        c.AadharNo = customer.AadharNo;//sudhir
                        c.PanNo = customer.PanNo;//sudhir
                        c.AreaName = customer.AreaName;
                        #region to assign cluster ID and determine if it is in cluster or not.
                        // < summary >
                        // Updated by 28 - 06 - 2019
                        // </ summary > tejas to assign cluster and refine if cx is in region or not
                        if (customer.lat != 0 && customer.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(customer.lat).Append("', '").Append(customer.lg).Append("')");
                            var clusterId = db.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                customer.InRegion = false;
                            }
                            else
                            {
                                var agent = db.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    customer.AgentCode = Convert.ToString(agent.AgentId);


                                customer.ClusterId = clusterId;
                                dd = db.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                customer.ClusterName = dd.ClusterName;
                                customer.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            c.Warehouseid = dd.WarehouseId;
                            c.WarehouseName = dd.WarehouseName;
                            c.ClusterId = dd.ClusterId;
                            c.ClusterName = dd.ClusterName;
                            c.City = dd.CityName;
                            c.Cityid = dd.CityId;
                        }

                        c.CompanyId = wh.CompanyId;
                        c.Shopimage = customer.Shopimage;
                        // c.Active = true;//change on demand of Salesman  
                        c.Active = false;//change on demand of Salesman 
                        c.IsCityVerified = true;
                        c.IsSignup = true;
                        c.CreatedBy = people.DisplayName;
                        c.CreatedDate = indianTime;
                        c.UpdatedDate = indianTime;
                        c.AnniversaryDate = customer.AnniversaryDate;
                        c.DOB = customer.DOB;
                        c.WhatsappNumber = customer.WhatsappNumber;
                        c.LicenseNumber = customer.LicenseNumber;     //tejas 07-06-19
                        c.UploadLicensePicture = customer.UploadLicensePicture;
                        c.UploadGSTPicture = customer.UploadGSTPicture;

                        if (!string.IsNullOrEmpty(c.RefNo))
                        {
                            var custGstVerifys = db.CustGSTverifiedRequestDB.Where(x => x.RefNo == customer.RefNo).ToList();
                            if (custGstVerifys.Any() && custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault().Active == "Active")
                            {
                                var gstVerify = custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault();
                                var state = db.States.FirstOrDefault(x => x.AliasName.ToLower().Trim() == gstVerify.State.ToLower().Trim() || x.StateName.ToLower().Trim() == gstVerify.State.ToLower().Trim());
                                c.BillingCity = gstVerify.City;
                                c.BillingState = state != null ? state.StateName : gstVerify.State;
                                c.BillingZipCode = gstVerify.Zipcode;
                                c.BillingAddress = string.Format("{0}, {1}, {2}, {3}, {4}-{5}", gstVerify.HomeNo, gstVerify.HomeName, gstVerify.ShippingAddress, gstVerify.City, gstVerify.State, gstVerify.Zipcode);
                                c.NameOnGST = gstVerify.Name;
                                c.UploadGSTPicture = customer.UploadGSTPicture;
                            }
                        }

                        if (string.IsNullOrEmpty(c.BillingAddress))
                        {
                            c.BillingCity = c.City;
                            c.BillingState = c.State;
                            c.BillingZipCode = c.ZipCode;
                            c.BillingAddress = c.ShippingAddress;
                        }

                        db.Customers.Add(c);
                        #region Referral Customer
                        if (!string.IsNullOrEmpty(customer.ReferralSkCode))
                        {
                            var customerReferralConfiguration = db.CustomerReferralConfigurationDb.Where(x => x.CityId == c.Cityid && x.ReferralType == 2 && x.IsActive == true && x.IsDeleted == false).ToList();
                            var referralWallet = db.ReferralWalletDb.Where(x => x.SkCode == c.Skcode).FirstOrDefault();
                            if (customerReferralConfiguration != null && referralWallet == null)
                            {
                                foreach (var item in customerReferralConfiguration)
                                {
                                    db.ReferralWalletDb.Add(new Model.CustomerReferral.ReferralWallet
                                    {
                                        SkCode = customer.Skcode,
                                        ReferralSkCode = customer.ReferralSkCode,
                                        CreatedBy = customer.CustomerId,
                                        ReferralWalletPoint = item.ReferralWalletPoint,
                                        CustomerWalletPoint = item.CustomerWalletPoint,
                                        IsActive = true,
                                        CreatedDate = DateTime.Now,
                                        IsDeleted = false,
                                        ReferralType = Convert.ToInt32(ReferralType.People),
                                        OnOrder = item.OnOrder,
                                        CustomerReferralConfigurationId = item.Id,
                                        IsUsed = 0
                                    });
                                }
                            }
                        }
                        #endregion


                        if (db.Commit() > 0 && ((!string.IsNullOrEmpty(customer.LicenseNumber) && customer.CustomerDocTypeMasterId > 0) || (!string.IsNullOrEmpty(c.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture))))
                        {
                            var docMaster = db.CustomerDocTypeMasters.Where(x => x.IsActive).ToList();
                            if (!string.IsNullOrEmpty(c.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture) && docMaster.Any(x => x.DocType == "GST"))
                            {
                                db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                                {
                                    CustomerId = c.CustomerId,
                                    IsActive = true,
                                    CreatedBy = people.PeopleID,
                                    CreatedDate = DateTime.Now,
                                    CustomerDocTypeMasterId = docMaster.FirstOrDefault(x => x.DocType == "GST").Id,
                                    DocPath = customer.UploadGSTPicture,
                                    IsDeleted = false
                                });
                            }

                            if (!string.IsNullOrEmpty(c.LicenseNumber) && customer.CustomerDocTypeMasterId > 0)
                            {
                                db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                                {
                                    CustomerId = c.CustomerId,
                                    IsActive = true,
                                    CreatedBy = people.PeopleID,
                                    CreatedDate = DateTime.Now,
                                    CustomerDocTypeMasterId = customer.CustomerDocTypeMasterId,
                                    DocPath = customer.UploadRegistration,
                                    IsDeleted = false
                                });
                            }

                            db.Commit();
                        }

                        var customerLatLngVerify = new CustomerLatLngVerify
                        {
                            CaptureImagePath = c.Shopimage,
                            CreatedBy = people.PeopleID,
                            CreatedDate = DateTime.Now,
                            CustomerId = c.CustomerId,
                            IsActive = true,
                            IsDeleted = false,
                            lat = c.lat,
                            lg = c.lg,
                            Newlat = c.lat,
                            Newlg = c.lg,
                            NewShippingAddress = c.ShippingAddress,
                            ShippingAddress = c.ShippingAddress,
                            ShopFound = 1,
                            ShopName = c.ShopName,
                            Skcode = c.Skcode,
                            LandMark = c.LandMark,
                            Status = 1,
                            Nodocument = true,
                            Aerialdistance = 0
                        };
                        db.CustomerLatLngVerify.Add(customerLatLngVerify);
                        db.Commit();
                        res = new customerDetail()
                        {
                            customers = c,
                            Status = true,
                            Message = "Registration successfully."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        Cluster dd = null;

                        if (customers.ShippingAddress != customer.ShippingAddress)
                        {
                            GeoHelper geoHelper = new GeoHelper();
                            decimal? lat, longitude;
                            geoHelper.GetLatLongWithZipCode(customer.ShippingAddress, customer.City, customer.ZipCode, out lat, out longitude);
                            customers.Addresslat = (double)lat;
                            customers.Addresslg = (double)longitude;
                        }
                        if (customers.Addresslat.HasValue && customers.Addresslg.HasValue && customer.lat > 0 && customer.lg > 0)
                        {
                            var sourceGeoCordinates = new System.Device.Location.GeoCoordinate(customers.Addresslat.Value, customers.Addresslg.Value);
                            var destination = new System.Device.Location.GeoCoordinate(customer.lat, customer.lg);
                            customers.Distance = GeoHelper.AerialDistance(sourceGeoCordinates, destination);
                        }



                        customers.BAGPSCoordinates = customer.BAGPSCoordinates;
                        customers.BillingAddress = customer.BillingAddress;
                        customers.ShippingAddress = customer.ShippingAddress;
                        customers.ZipCode = customer.ZipCode;

                        customers.BillingCity = customer.BillingCity;
                        customers.BillingState = customer.BillingState;
                        customers.BillingZipCode = customer.BillingZipCode;

                        customers.ExecutiveId = people.PeopleID;
                        customers.FSAAI = customer.FSAAI;
                        customers.LandMark = customer.LandMark;
                        customers.Mobile = customer.Mobile;
                        customers.MobileSecond = customer.MobileSecond;
                        customers.MonthlyTurnOver = customer.MonthlyTurnOver;
                        customers.Name = customer.Name;
                        customers.Password = customer.Password;
                        customers.RefNo = customer.RefNo;
                        customers.SAGPSCoordinates = customer.SAGPSCoordinates;
                        customers.ShopName = customer.ShopName;
                        customers.SizeOfShop = customer.SizeOfShop;
                        customers.UploadRegistration = customer.UploadRegistration;
                        customers.lat = customer.lat;
                        customers.lg = customer.lg;
                        customers.AreaName = customer.AreaName;
                        if (customer.Shoplat > 0)
                        {
                            customers.Shoplat = customer.Shoplat;
                            customers.Shoplg = customer.Shoplg;
                        };
                        customers.ShippingCity = city != null ? city.CityName : "";
                        customers.State = city != null ? city.StateName : "";
                        customers.Cityid = wh.Cityid;
                        customers.City = wh.CityName;
                        customers.AadharNo = customer.AadharNo;//sudhir
                        customers.PanNo = customer.PanNo;//sudhir
                        #region to assign cluster ID and determine if it is in cluster or not.
                        // < summary >
                        // Updated by 28 - 06 - 2019
                        // </ summary > tejas to assign cluster and refine if cx is in region or not
                        if (customer.lat != 0 && customer.lg != 0)
                        {
                            var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(customer.lat).Append("', '").Append(customer.lg).Append("')");
                            var clusterId = db.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                            if (!clusterId.HasValue)
                            {
                                customers.InRegion = false;
                            }
                            else
                            {
                                var agent = db.ClusterAgent.FirstOrDefault(x => x.ClusterId == clusterId && x.active);

                                if (agent != null && agent.AgentId > 0)
                                    customers.AgentCode = Convert.ToString(agent.AgentId);


                                customers.ClusterId = clusterId;
                                dd = db.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                                customers.ClusterName = dd.ClusterName;
                                customers.InRegion = true;
                            }
                        }
                        #endregion

                        if (dd != null)
                        {
                            customers.Warehouseid = dd.WarehouseId;
                            customers.WarehouseName = dd.WarehouseName;
                            customers.ClusterId = dd.ClusterId;
                            customers.ClusterName = dd.ClusterName;
                            customers.City = dd.CityName;
                            customers.Cityid = dd.CityId;

                        }

                        customers.CompanyId = wh.CompanyId;
                        customers.Shopimage = customer.Shopimage;

                        customers.Active = false;//change on demand of Salesman 
                        customers.IsCityVerified = true;
                        customers.IsSignup = true;
                        customers.LastModifiedBy = people.DisplayName;
                        customers.UpdatedDate = indianTime;
                        customers.AnniversaryDate = customer.AnniversaryDate;
                        customers.DOB = customer.DOB;
                        customers.WhatsappNumber = customer.WhatsappNumber;
                        customers.LicenseNumber = customer.LicenseNumber;     //tejas 07-06-19
                        customers.UploadLicensePicture = customer.UploadLicensePicture;
                        customers.UploadGSTPicture = customer.UploadGSTPicture;

                        if (!string.IsNullOrEmpty(customers.RefNo))
                        {
                            var custGstVerifys = db.CustGSTverifiedRequestDB.Where(x => x.RefNo == customer.RefNo).ToList();
                            if (custGstVerifys.Any() && custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault().Active == "Active")
                            {
                                var gstVerify = custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault();
                                var state = db.States.FirstOrDefault(x => x.AliasName.ToLower().Trim() == gstVerify.State.ToLower().Trim() || x.StateName.ToLower().Trim() == gstVerify.State.ToLower().Trim());
                                customers.BillingCity = gstVerify.City;
                                customers.BillingState = state != null ? state.StateName : gstVerify.State;
                                customers.BillingZipCode = gstVerify.Zipcode;
                                customers.BillingAddress = string.Format("{0}, {1}, {2}, {3}, {4}-{5}", gstVerify.HomeNo, gstVerify.HomeName, gstVerify.ShippingAddress, gstVerify.City, gstVerify.State, gstVerify.Zipcode);
                                customers.NameOnGST = gstVerify.Name;
                            }

                        }

                        if (string.IsNullOrEmpty(customers.BillingAddress))
                        {
                            customers.BillingCity = customers.City;
                            customers.BillingState = customers.State;
                            customers.BillingZipCode = customers.ZipCode;
                            customers.BillingAddress = customers.ShippingAddress;
                        }

                        db.Entry(customers).State = EntityState.Modified;


                        #region Referral Customer
                        if (!string.IsNullOrEmpty(customer.ReferralSkCode))
                        {
                            var customerReferralConfiguration = db.CustomerReferralConfigurationDb.Where(x => x.CityId == customers.Cityid && x.ReferralType == 2 && x.IsActive == true && x.IsDeleted == false).ToList();
                            var referralWallet = db.ReferralWalletDb.Where(x => x.SkCode == customers.Skcode).FirstOrDefault();
                            if (customerReferralConfiguration != null && referralWallet == null)
                            {
                                foreach (var item in customerReferralConfiguration)
                                {
                                    db.ReferralWalletDb.Add(new Model.CustomerReferral.ReferralWallet
                                    {
                                        SkCode = customers.Skcode,
                                        ReferralSkCode = customer.ReferralSkCode,
                                        CreatedBy = customers.CustomerId,
                                        ReferralWalletPoint = item.ReferralWalletPoint,
                                        CustomerWalletPoint = item.CustomerWalletPoint,
                                        IsActive = true,
                                        CreatedDate = DateTime.Now,
                                        IsDeleted = false,
                                        ReferralType = Convert.ToInt32(ReferralType.People),
                                        OnOrder = item.OnOrder,
                                        CustomerReferralConfigurationId = item.Id,
                                        IsUsed = 0
                                    });
                                }
                            }
                        }
                        #endregion
                        if (db.Commit() > 0 && ((!string.IsNullOrEmpty(customer.LicenseNumber) && customer.CustomerDocTypeMasterId > 0) || (!string.IsNullOrEmpty(customer.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture))))
                        {
                            var docMaster = db.CustomerDocTypeMasters.Where(x => x.IsActive).ToList();
                            if (!string.IsNullOrEmpty(customers.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture) && docMaster.Any(x => x.DocType == "GST"))
                            {
                                db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                                {
                                    CustomerId = customers.CustomerId,
                                    IsActive = true,
                                    CreatedBy = people.PeopleID,
                                    CreatedDate = DateTime.Now,
                                    CustomerDocTypeMasterId = docMaster.FirstOrDefault(x => x.DocType == "GST").Id,
                                    DocPath = customer.UploadGSTPicture,
                                    IsDeleted = false
                                });
                            }

                            if (!string.IsNullOrEmpty(customers.LicenseNumber) && customer.CustomerDocTypeMasterId > 0)
                            {
                                db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                                {
                                    CustomerId = customers.CustomerId,
                                    IsActive = true,
                                    CreatedBy = people.PeopleID,
                                    CreatedDate = DateTime.Now,
                                    CustomerDocTypeMasterId = customer.CustomerDocTypeMasterId,
                                    DocPath = customer.UploadRegistration,
                                    IsDeleted = false
                                });
                            }

                            db.Commit();
                        }

                        var customerLatLngVerify = new CustomerLatLngVerify
                        {
                            CaptureImagePath = customers.Shopimage,
                            CreatedBy = people.PeopleID,
                            CreatedDate = DateTime.Now,
                            CustomerId = customers.CustomerId,
                            IsActive = true,
                            IsDeleted = false,
                            lat = customers.lat,
                            lg = customers.lg,
                            Newlat = customers.lat,
                            Newlg = customers.lg,
                            NewShippingAddress = customers.ShippingAddress,
                            ShippingAddress = customers.ShippingAddress,
                            ShopFound = 1,
                            ShopName = customers.ShopName,
                            Skcode = customers.Skcode,
                            LandMark = customers.LandMark,
                            Status = 1,
                            Nodocument = true,
                            Aerialdistance = 0
                        };
                        db.CustomerLatLngVerify.Add(customerLatLngVerify);
                        db.Commit();



                        res = new customerDetail()
                        {
                            customers = customers,
                            Status = true,
                            Message = "Registration successfully."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                catch (Exception ex)
                {
                    logger.Error("Error in addCustomer " + (ex.InnerException != null ? ex.InnerException.ToString() : ex.ToString()));
                    res = new customerDetail()
                    {
                        customers = null,
                        Status = false,
                        Message = "something went wrong."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }

        [AllowAnonymous]
        [Route("Updatecust")]
        [AcceptVerbs("PUT")]

        public async Task<customerDetail> Updatecust(Customer customer)
        {
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            customerDetail res;
            logger.Info("start UpdateCustomer: ");
            using (AuthContext db = new AuthContext())
            {
                try
                {
                    Customer c = db.Customers.Where(s => s.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
                    //Customer customers = db.Customers.Where(s => s.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
                    People people = db.Peoples.Where(q => q.PeopleID == customer.ExecutiveId).SingleOrDefault();
                    //City city = db.Cities.Where(x => x.Cityid == customer.Cityid && x.Deleted == false).SingleOrDefault();
                    Warehouse wh = db.Warehouses.Where(x => x.WarehouseId == people.WarehouseId && x.Deleted == false).FirstOrDefault();

                    //logger.Info("End  UpdateCustomer: ");

                    //c.Skcode = skcode();
                    c.BAGPSCoordinates = customer.BAGPSCoordinates;
                    c.BillingAddress = customer.BillingAddress;
                    c.ShippingAddress = customer.ShippingAddress;
                    //c.ExecutiveId = people.PeopleID;
                    c.FSAAI = customer.FSAAI;
                    c.LandMark = customer.LandMark;
                    c.Mobile = customer.Mobile;
                    c.MobileSecond = customer.MobileSecond;
                    c.MonthlyTurnOver = customer.MonthlyTurnOver;
                    c.Name = customer.Name;
                    c.Password = customer.Password;
                    c.RefNo = customer.RefNo;
                    c.SAGPSCoordinates = customer.SAGPSCoordinates;
                    c.ShopName = customer.ShopName;
                    c.ShippingAddress = customer.ShippingAddress;//sudhir
                    c.SizeOfShop = customer.SizeOfShop;//sudhir
                    c.UploadRegistration = customer.UploadRegistration;
                    c.lat = customer.lat;
                    c.lg = customer.lg;
                    c.City = wh.CityName;
                    c.Cityid = wh.Cityid;
                    c.Warehouseid = people.WarehouseId;
                    c.WarehouseName = wh.WarehouseName;
                    c.CompanyId = people.CompanyId;
                    c.Shopimage = customer.Shopimage;
                    c.AnniversaryDate = customer.AnniversaryDate;
                    c.DOB = customer.DOB;
                    c.WhatsappNumber = customer.WhatsappNumber;
                    c.LicenseNumber = customer.LicenseNumber;
                    c.UpdatedDate = indianTime;
                    c.CustomerVerify = "Pending For Activation";
                    c.AadharNo = customer.AadharNo;//sudhir
                    c.PanNo = customer.PanNo;//sudhir         
                    c.ExecutiveId = people.PeopleID;
                    c.ExecutiveName = people.DisplayName;

                    db.Entry(c).State = EntityState.Modified;

                    //CustWarehouse cs = db.CustWarehouseDB.Where(x => x.CustomerId == c.CustomerId).FirstOrDefault();
                    //Customer cs = db.Customers.Where(x => x.CustomerId == c.CustomerId).FirstOrDefault();
                    //cs.ExecutiveId = people.PeopleID;
                    //cs.ExecutiveName = people.DisplayName;
                    //cs.CustomerId = c.CustomerId;
                    //cs.Warehouseid = wh.WarehouseId;
                    //cs.WarehouseName = wh.WarehouseName;
                    //cs.CompanyId = wh.CompanyId;
                    //cs.UpdatedDate = DateTime.Now;
                    ////db.CustWarehouseDB.Attach(cs);
                    //db.Entry(c).State = EntityState.Modified;
                    db.Commit();


                    res = new customerDetail()
                    {
                        customers = c,
                        Status = true,
                        Message = "Update successfully."
                    };
                    return res;
                }
                catch (Exception ex)
                {

                    res = new customerDetail()
                    {
                        customers = null,
                        Status = false,
                        Message = "something went wrong."
                    };
                    return res;
                }
            }
        }

        [Route("UpdatecustForMyLead")]
        [HttpPut]
        [AllowAnonymous]
        public async Task<customerDetail> UpdatecustForMyLead(Customer customer)
        {
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            customerDetail res;
            using (AuthContext db = new AuthContext())
            {
                try
                {
                    Customer c = db.Customers.Where(s => s.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
                    //Customer customers = db.Customers.Where(s => s.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
                    City city = db.Cities.Where(x => x.Cityid == customer.Cityid && x.Deleted == false).FirstOrDefault();
                    People people = db.Peoples.Where(q => q.PeopleID == customer.ExecutiveId).FirstOrDefault();
                    //City city = db.Cities.Where(x => x.Cityid == customer.Cityid && x.Deleted == false).SingleOrDefault();
                    Warehouse wh = db.Warehouses.Where(x => x.WarehouseId == people.WarehouseId && x.Deleted == false).FirstOrDefault();


                    if (!string.IsNullOrEmpty(customer.RefNo))
                    {
                        var checkgst = db.Customers.Where(x => x.RefNo == customer.RefNo && x.CustomerId != c.CustomerId).Count();
                        if (checkgst > 0)
                        {
                            res = new customerDetail()
                            {
                                customers = null,
                                Status = false,
                                Message = "Gst Already Exsits."
                            };
                            return res;
                        }
                    }

                    if (!string.IsNullOrEmpty(customer.LicenseNumber.Trim()) && customer.LicenseNumber != "0")
                    {
                        var checkgst = db.Customers.Where(x => x.LicenseNumber == customer.LicenseNumber && x.CustomerId != c.CustomerId).Count();

                        if (checkgst > 0)
                        {
                            res = new customerDetail()
                            {
                                customers = null,
                                Status = false,
                                Message = "License Number Already Exsits."
                            };
                            return res;
                        }
                    }

                    bool TrackRequest = false;
                    if (customer.lat != c.lat || customer.lg != c.lg || customer.RefNo != c.RefNo || customer.LicenseNumber != c.LicenseNumber)
                        TrackRequest = true;

                    if (c.ShippingAddress != customer.ShippingAddress)
                    {
                        GeoHelper geoHelper = new GeoHelper();
                        decimal? lat, longitude;
                        geoHelper.GetLatLongWithZipCode(customer.ShippingAddress, customer.City, customer.ZipCode, out lat, out longitude);
                        //mbd 9 june 2022
                        c.Addresslat = (double?)lat;
                        c.Addresslg = (double?)longitude;
                        c.Distance = 0;
                    }

                    if (c.Addresslat.HasValue && c.Addresslg.HasValue && customer.lat > 0 && customer.lg > 0)
                    {
                        var sourceGeoCordinates = new System.Device.Location.GeoCoordinate(c.Addresslat.Value, c.Addresslg.Value);
                        var destination = new System.Device.Location.GeoCoordinate(customer.lat, customer.lg);
                        c.Distance = GeoHelper.AerialDistance(sourceGeoCordinates, destination);
                    }

                    //c.Skcode = skcode();
                    c.BAGPSCoordinates = customer.BAGPSCoordinates;
                    c.BillingAddress = customer.BillingAddress;
                    c.ShippingAddress = customer.ShippingAddress;
                    c.FSAAI = customer.FSAAI;
                    c.LandMark = customer.LandMark;
                    c.Mobile = customer.Mobile;
                    c.MobileSecond = customer.MobileSecond;
                    c.MonthlyTurnOver = customer.MonthlyTurnOver;
                    c.Name = customer.Name;
                    c.Password = customer.Password;
                    c.RefNo = customer.RefNo;
                    c.SAGPSCoordinates = customer.SAGPSCoordinates;
                    c.ShopName = customer.ShopName;
                    c.ShippingAddress = customer.ShippingAddress;//sudhir
                    c.SizeOfShop = customer.SizeOfShop;//sudhir
                    c.UploadRegistration = customer.UploadRegistration;
                    c.Warehouseid = wh.WarehouseId;
                    c.WarehouseName = wh.WarehouseName;
                    c.AreaName = customer.AreaName;

                    #region to assign cluster ID and determine if it is in cluster or not.                   
                    if (customer.lat != c.lat || customer.lg != c.lg)
                    {
                        var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(customer.lat).Append("', '").Append(customer.lg).Append("')");
                        var clusterId = db.Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                        if (!clusterId.HasValue)
                        {
                            c.InRegion = false;

                        }
                        else
                        {
                            c.ClusterId = clusterId;
                            var dd = db.Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                            c.ClusterName = dd.ClusterName;
                            c.InRegion = true;
                            c.Warehouseid = dd.WarehouseId;
                            c.WarehouseName = dd.WarehouseName;
                        }
                    }
                    #endregion



                    c.lat = customer.lat;
                    c.lg = customer.lg;
                    if (customer.Shoplat > 0)
                    {
                        c.Shoplat = customer.Shoplat;
                        c.Shoplg = customer.Shoplg;
                    }
                    c.City = city != null ? city.CityName : "";
                    c.ShippingCity = city != null ? city.CityName : "";
                    c.Cityid = city != null ? city.Cityid : 0;
                    c.State = city != null ? city.StateName : "";

                    c.Shopimage = customer.Shopimage;
                    c.AnniversaryDate = customer.AnniversaryDate;
                    c.DOB = customer.DOB;
                    c.WhatsappNumber = customer.WhatsappNumber;
                    c.LicenseNumber = customer.LicenseNumber;
                    c.UpdatedDate = indianTime;
                    c.CustomerVerify = "Pending For Activation";
                    c.AadharNo = customer.AadharNo;//sudhir
                    c.PanNo = customer.PanNo;//sudhir
                    c.CompanyId = wh.CompanyId;
                    c.UpdatedDate = indianTime;
                    c.ZipCode = customer.ZipCode;
                    c.UploadGSTPicture = customer.UploadGSTPicture;
                    c.BillingCity = customer.BillingCity;
                    c.BillingState = customer.BillingState;
                    c.BillingZipCode = customer.BillingZipCode;

                    if (c != null && c.GrabbedBy == 0)
                    {
                        c.GrabbedBy = people.PeopleID;
                        string query = "Select top 1 citywise.Id,citywise.CommissionAmount from CityWiseActivationConfigurations citywise inner join Customers cust on citywise.CityId=cust.Cityid where cust.GrabbedBy>0 and citywise.IsActive=1 and citywise.IsDeleted=0 and cust.GrabbedBy=" + people.PeopleID;
                        var commission = await db.Database.SqlQuery<commissionDc>(query).FirstOrDefaultAsync();
                        if (commission != null)
                        {
                            AgentCommissionforCity agentCommissionforCity = new AgentCommissionforCity();
                            agentCommissionforCity.Amount = commission.CommissionAmount;
                            agentCommissionforCity.ConfigurationId = commission.Id;
                            agentCommissionforCity.PeopleId = people.PeopleID;
                            agentCommissionforCity.CustomerId = c.CustomerId;
                            agentCommissionforCity.IsActive = true;
                            agentCommissionforCity.IsDeleted = false;
                            agentCommissionforCity.CreatedDate = DateTime.Now;
                            agentCommissionforCity.CreatedBy = userid;
                            db.AgentCommissionforCityDB.Add(agentCommissionforCity);
                        }
                    }
                    else if (c.GrabbedBy > 0)
                    {
                        c.CustomerVerify = "Pending For Submitted";
                        c.UpdatedDate = indianTime;
                    }

                    if (!string.IsNullOrEmpty(c.RefNo))
                    {
                        var custGstVerifys = db.CustGSTverifiedRequestDB.Where(x => x.RefNo == customer.RefNo).ToList();
                        if (custGstVerifys.Any() && custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault().Active == "Active")
                        {
                            var gstVerify = custGstVerifys.OrderByDescending(x => x.GSTVerifiedRequestId).FirstOrDefault();
                            var state = db.States.FirstOrDefault(x => x.AliasName.ToLower().Trim() == gstVerify.State.ToLower().Trim() || x.StateName.ToLower().Trim() == gstVerify.State.ToLower().Trim());
                            c.BillingCity = gstVerify.City;
                            c.BillingState = state != null ? state.StateName : gstVerify.State;
                            c.BillingZipCode = gstVerify.Zipcode;
                            c.BillingAddress = string.Format("{0}, {1}, {2}, {3}, {4}-{5}", gstVerify.HomeNo, gstVerify.HomeName, gstVerify.ShippingAddress, gstVerify.City, gstVerify.State, gstVerify.Zipcode);
                            c.NameOnGST = gstVerify.Name;
                        }

                    }

                    if (string.IsNullOrEmpty(c.BillingAddress))
                    {
                        c.BillingCity = c.City;
                        c.BillingState = c.State;
                        c.BillingZipCode = c.ZipCode;
                        c.BillingAddress = c.ShippingAddress;
                    }

                    db.Entry(c).State = EntityState.Modified;

                    //customer tracking
                    if (TrackRequest)
                    {
                        var custVerifies = db.CustomerLatLngVerify.Where(x => x.CustomerId == customer.CustomerId && x.Status == 1 && x.IsActive).ToList();
                        if (custVerifies != null && custVerifies.Any())
                        {
                            foreach (var item in custVerifies)
                            {
                                item.IsActive = false;
                                item.IsDeleted = true;
                                item.ModifiedBy = customer.CustomerId;
                                item.ModifiedDate = DateTime.Now;
                                db.Entry(item).State = EntityState.Modified;
                            }
                        }
                        var customerLatLngVerify = new CustomerLatLngVerify
                        {
                            CaptureImagePath = customer.Shopimage,
                            CreatedBy = customer.CustomerId,
                            CreatedDate = DateTime.Now,
                            CustomerId = customer.CustomerId,
                            IsActive = true,
                            IsDeleted = false,
                            lat = c.lat,
                            lg = c.lg,
                            Newlat = customer.lat,
                            Newlg = customer.lg,
                            NewShippingAddress = customer.ShippingAddress,
                            ShippingAddress = c.ShippingAddress,
                            ShopFound = 1,
                            ShopName = customer.ShopName,
                            Skcode = c.Skcode,
                            LandMark = customer.LandMark,
                            Status = 1,
                            Nodocument = true,
                            Aerialdistance = 0
                        };
                        db.CustomerLatLngVerify.Add(customerLatLngVerify);
                    }

                    if (db.Commit() > 0 && ((!string.IsNullOrEmpty(customer.LicenseNumber) && customer.CustomerDocTypeMasterId > 0) || (!string.IsNullOrEmpty(customer.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture))))
                    {
                        var customerdocs = db.CustomerDocs.Where(x => x.CustomerId == c.CustomerId).ToList();
                        var docMaster = db.CustomerDocTypeMasters.Where(x => x.IsActive).ToList();
                        if (!string.IsNullOrEmpty(c.RefNo) && !string.IsNullOrEmpty(customer.UploadGSTPicture) && docMaster.Any(x => x.DocType == "GST"))
                        {
                            var docid = docMaster.FirstOrDefault(x => x.DocType == "GST").Id;
                            if (customerdocs.Any(x => x.CustomerDocTypeMasterId == docid && x.IsActive))
                            {
                                var custdoc = customerdocs.FirstOrDefault(x => x.CustomerDocTypeMasterId == docid && x.IsActive);
                                custdoc.ModifiedBy = people.PeopleID;
                                custdoc.ModifiedDate = DateTime.Now;
                                custdoc.IsActive = false;
                                db.Entry(custdoc).State = EntityState.Modified;
                            }
                            db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                            {
                                CustomerId = c.CustomerId,
                                IsActive = true,
                                CreatedBy = people.PeopleID,
                                CreatedDate = DateTime.Now,
                                CustomerDocTypeMasterId = docid,
                                DocPath = customer.UploadGSTPicture,
                                IsDeleted = false
                            });
                        }

                        if (!string.IsNullOrEmpty(c.LicenseNumber) && customer.CustomerDocTypeMasterId > 0)
                        {
                            if (customerdocs.Any(x => x.CustomerDocTypeMasterId == customer.CustomerDocTypeMasterId && x.IsActive))
                            {
                                var custdoc = customerdocs.FirstOrDefault(x => x.CustomerDocTypeMasterId == customer.CustomerDocTypeMasterId && x.IsActive);
                                custdoc.ModifiedBy = people.PeopleID;
                                custdoc.ModifiedDate = DateTime.Now;
                                custdoc.IsActive = false;
                                db.Entry(custdoc).State = EntityState.Modified;
                            }
                            db.CustomerDocs.Add(new Model.CustomerDelight.CustomerDoc
                            {
                                CustomerId = c.CustomerId,
                                IsActive = true,
                                CreatedBy = people.PeopleID,
                                CreatedDate = DateTime.Now,
                                CustomerDocTypeMasterId = customer.CustomerDocTypeMasterId,
                                DocPath = customer.UploadRegistration,
                                IsDeleted = false
                            });
                        }

                        db.Commit();
                    }



                    res = new customerDetail()
                    {
                        customers = c,
                        Status = true,
                        Message = "Update Details successfully."
                    };
                    return res;
                }
                catch (Exception ex)
                {

                    res = new customerDetail()
                    {
                        customers = null,
                        Status = false,
                        Message = "Something Went Wrong Details."
                    };
                    return res;
                }
            }
        }

        //Target Module
        [Route("GetBeatCustomerTarget")]
        [HttpGet]
        public BeatCustomerTargetDc GetBeatCustomerTarget(int warehouseId, int salesExecutiveId)
        {
            BeatCustomerTargetDc beatCustomerTargetDc = new BeatCustomerTargetDc();
            //using (var con = new AuthContext())
            //{
            //    var date = DateTime.Now;
            //    if (date.Day < 6)
            //    {
            //        date = DateTime.Now.AddMonths(-1);
            //    }
            //    var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

            //    var MonthlyCustomerTarget = new MongoDbHelper<MonthlyCustomerTarget>();
            //    string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
            //    var TargetCustomers = MonthlyCustomerTarget.Select(x => x.WarehouseId == warehouseId, null, null, null, false, "", DocumentName).ToList();
            //    if (TargetCustomers != null && TargetCustomers.Any())
            //    {
            //        var executiveCustomers = con.Customers.Where(x => x.ExecutiveId == salesExecutiveId).Select(x => new { x.Skcode, x.Mobile, x.CustomerId }).ToList();
            //        if (executiveCustomers != null && executiveCustomers.Any())
            //        {

            //            List<CustomerTargetDc> customerTargetDcs = TargetCustomers.Where(x => executiveCustomers.Select(y => y.Skcode).Contains(x.Skcode)).
            //                                                                      Select(x => new CustomerTargetDc
            //                                                                      {
            //                                                                          CustomerId = executiveCustomers.FirstOrDefault(y => y.Skcode == x.Skcode).CustomerId,
            //                                                                          MobileNo = executiveCustomers.FirstOrDefault(y => y.Skcode == x.Skcode).Mobile,
            //                                                                          SkCode = x.Skcode,
            //                                                                          TargetAmount = x.Target,
            //                                                                          AchieveAmount = x.CurrentVolume,
            //                                                                          RemainingAmount = x.Target > x.CurrentVolume ? x.Target - x.CurrentVolume : 0
            //                                                                      }).ToList();
            //            beatCustomerTargetDc.AchieveAmount = customerTargetDcs != null ? customerTargetDcs.Sum(x => x.AchieveAmount) : 0;
            //            beatCustomerTargetDc.TargetAmount = customerTargetDcs != null ? customerTargetDcs.Sum(x => x.TargetAmount) : 0;
            //            beatCustomerTargetDc.RemainingAmount = customerTargetDcs != null ? customerTargetDcs.Sum(x => x.RemainingAmount) : 0;
            //            beatCustomerTargetDc.CustomerTargetDcs = customerTargetDcs != null ? customerTargetDcs.OrderByDescending(x => x.TargetAmount).ToList() : new List<CustomerTargetDc>();
            //        }

            //    }
            //}
            return beatCustomerTargetDc;
        }

        //Target

        [Route("CustomerPurchaseData")]
        [HttpGet]
        [AcceptVerbs("GET")]
        public dynamic Get(string day, int CustomerId, int top)
        {
            try
            {
                using (var db = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 1, userid = 0;
                    int Warehouse_id = 1;

                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "Warehouseid")
                        {
                            Warehouse_id = int.Parse(claim.Value);
                        }
                    }
                    if (Warehouse_id > 0)
                    {
                        var sdate = indianTime.AddDays(-30).Date;
                        var today = indianTime;
                        if (day == "3 month")
                        {
                            sdate = indianTime.AddMonths(-3).Date;
                        }

                        var list = db.DbOrderDetails.Where(i => i.CreatedDate >= sdate && i.CreatedDate <= today && i.CustomerId == CustomerId).ToList();

                        List<OrderDetails> ODFilter = new List<OrderDetails>();

                        List<string> SubsubcategoryName = new List<string>();

                        foreach (var l1 in list)
                        {

                            if (l1.SubsubcategoryName != null && SubsubcategoryName.Any(x => x == l1.SubsubcategoryName))
                            {
                                var od = ODFilter.Where(x => x.SubsubcategoryName == l1.SubsubcategoryName).Select(x => x.TotalAmt).SingleOrDefault();
                                var cc = od;
                                double TotalAmt = Convert.ToDouble(cc);
                                TotalAmt = TotalAmt + l1.TotalAmt;
                                foreach (var asd in ODFilter)
                                {
                                    var odd = ODFilter.Where(x => x.SubsubcategoryName == l1.SubsubcategoryName).SingleOrDefault();
                                    if (odd != null)
                                    {
                                        odd.TotalAmt = TotalAmt;
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                            else
                            {

                                ODFilter.Add(l1);
                                SubsubcategoryName.Add(l1.SubsubcategoryName);
                            }


                        }


                        List<OrderDetailsDTM> OrderDetailMain = new List<OrderDetailsDTM>();
                        foreach (var item in ODFilter)
                        {
                            OrderDetailsDTM b = new OrderDetailsDTM();
                            b.status = item.Status;
                            b.SubsubcategoryName = item.SubsubcategoryName;
                            b.CategoryName = item.CategoryName;
                            b.CompanyId = item.CompanyId;
                            b.WarehouseId = item.WarehouseId;
                            b.CreatedDate = item.CreatedDate;
                            b.day = item.CreatedDate.Day;
                            b.month = item.CreatedDate.Month;
                            b.year = item.CreatedDate.Year;
                            b.TotalAmt = item.TotalAmt;
                            OrderDetailMain.Add(b);

                        }
                        return OrderDetailMain;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in add feedBack " + ex.Message);
                logger.Info("End  addCity: ");
                return null;
            }
        }

        [Route("Report")]
        [HttpGet]
        [AcceptVerbs("GET")]
        public dynamic Get(string day, string skcode)
        {
            try
            {
                using (var db = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 1, userid = 0;
                    int Warehouse_id = 1;

                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "Warehouseid")
                        {
                            Warehouse_id = int.Parse(claim.Value);
                        }
                    }
                    if (Warehouse_id > 0)
                    {
                        var sdate = indianTime.AddDays(-30).Date;
                        var today = indianTime;
                        if (day == "3 month")
                        {
                            sdate = indianTime.AddMonths(-3).Date;
                        }

                        var list = db.DbOrderMaster.Where(i => i.CreatedDate >= sdate && i.CreatedDate <= today && i.Skcode.Trim() == skcode.Trim()).ToList();

                        List<Target> uniqe = new List<Target>();
                        if (list.Count != 0)
                        {
                            foreach (var a in list)
                            {
                                Target l = uniqe.Where(x => x.createdDate.Date == a.CreatedDate.Date && x.status == a.Status).SingleOrDefault();
                                int i = 1;
                                if (l != null)
                                {
                                    l.TotalAmount = l.TotalAmount + a.TotalAmount;
                                    l.TotalOrder = l.TotalOrder + i++;
                                }
                                else
                                {
                                    Target b = new Target();

                                    b.TotalOrder = i++;
                                    b.status = a.Status;
                                    b.Comment = a.comments;
                                    b.name = a.ShopName;
                                    b.CompanyId = a.CompanyId;
                                    b.WarehouseId = a.WarehouseId;
                                    b.createdDate = a.CreatedDate.Date;
                                    b.day = a.CreatedDate.Day;
                                    b.month = a.CreatedDate.Month;
                                    b.year = a.CreatedDate.Year;
                                    b.TotalAmount = a.GrossAmount;
                                    uniqe.Add(b);
                                }
                            }
                        }


                        return uniqe;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in add feedBack " + ex.Message);
                logger.Info("End  addCity: ");
                return null;
            }
        }

        //Action Task

        [Route("Search")]
        public List<ActionTask> Getdata(int PeopleId)
        {
            logger.Info("start ActionTask: ");
            ActionTask ass = new ActionTask();
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }

                using (AuthContext db = new AuthContext())
                {
                    var asss = db.ActionTaskDb.Where(x => x.PeopleID == PeopleId && x.CompanyId == compid).ToList();

                    return asss;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in ActionTask " + ex.Message);
                logger.Info("End  ActionTask: ");
                return null;
            }
        }
        //billdiscount

        [Route("CommonDiscountOfferForAgent")]
        [HttpGet]
        //[AllowAnonymous]
        public DataContracts.External.OfferdataDc CommonDiscountOfferForAgent(int CustomerId, int? PeopleId, int WarehouseId)
        {

            List<AngularJSAuthentication.DataContracts.External.OfferDc> FinalBillDiscount = new List<AngularJSAuthentication.DataContracts.External.OfferDc>();
            AngularJSAuthentication.DataContracts.External.OfferdataDc res;
            using (AuthContext context = new AuthContext())
            {
                CustomersManager manager = new CustomersManager();
                var query = string.Format("exec IsSalesAppLead {0}", PeopleId);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();
                    var universalStoreIds = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList();
                    if (universalStoreIds != null && universalStoreIds.Any())
                        storeids.AddRange(universalStoreIds);
                }
                List<AngularJSAuthentication.DataContracts.Masters.BillDiscountOfferDc> billDiscountOfferDcs = manager.GetCustomerBillDiscount(CustomerId, "Sales App");
                if (billDiscountOfferDcs.Any())
                {
                    billDiscountOfferDcs = billDiscountOfferDcs.Where(x => (storeids.Contains(x.StoreId) || x.StoreId == 0) && x.ApplyType != "PrimeCustomer").ToList();

                    var offerIds = billDiscountOfferDcs.Where(x => x.BillDiscountOfferOn == "FreeItem").Select(x => x.OfferId).ToList();
                    List<GenricEcommers.Models.BillDiscountFreeItem> BillDiscountFreeItems = offerIds.Any() ? context.BillDiscountFreeItem.Where(x => offerIds.Contains(x.offerId) && x.RemainingOfferStockQty < x.OfferStockQty).ToList() : new List<GenricEcommers.Models.BillDiscountFreeItem>();
                    //List<BillDiscount> billDiscountfounds = context.BillDiscountDb.Where(x => x.CustomerId == CustomerId && offerIds.Contains(x.OfferId)).ToList();
                    foreach (var billDiscountOfferDc in billDiscountOfferDcs)
                    {

                        var bdcheck = new AngularJSAuthentication.DataContracts.External.OfferDc
                        {
                            OfferId = billDiscountOfferDc.OfferId,
                            MaxBillAmount = billDiscountOfferDc.MaxBillAmount,
                            OfferName = billDiscountOfferDc.OfferName,
                            OfferCode = billDiscountOfferDc.OfferCode,
                            OfferCategory = billDiscountOfferDc.OfferCategory,
                            OfferOn = billDiscountOfferDc.OfferOn,
                            start = billDiscountOfferDc.start,
                            end = billDiscountOfferDc.end,
                            DiscountPercentage = billDiscountOfferDc.DiscountPercentage,
                            BillAmount = billDiscountOfferDc.BillAmount,
                            LineItem = billDiscountOfferDc.LineItem,
                            Description = billDiscountOfferDc.Description,
                            BillDiscountOfferOn = billDiscountOfferDc.BillDiscountOfferOn,
                            BillDiscountWallet = billDiscountOfferDc.BillDiscountWallet,
                            IsMultiTimeUse = billDiscountOfferDc.IsMultiTimeUse,
                            IsUseOtherOffer = billDiscountOfferDc.IsUseOtherOffer,
                            IsScratchBDCode = billDiscountOfferDc.IsScratchBDCode,
                            BillDiscountType = billDiscountOfferDc.BillDiscountType,
                            OfferAppType = billDiscountOfferDc.OfferAppType,
                            ApplyOn = billDiscountOfferDc.ApplyOn,
                            WalletType = billDiscountOfferDc.WalletType,
                            MaxDiscount = billDiscountOfferDc.MaxDiscount,
                            OfferBillDiscountItems = billDiscountOfferDc.OfferBillDiscountItems.Select(y => new AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc
                            {
                                CategoryId = y.CategoryId,
                                Id = y.Id,
                                IsInclude = y.IsInclude,
                                SubCategoryId = y.SubCategoryId
                            }).ToList(),
                            OfferItems = billDiscountOfferDc.OfferItems.Select(y => new AngularJSAuthentication.DataContracts.External.OfferItemdc
                            {
                                IsInclude = y.IsInclude,
                                itemId = y.itemId
                            }).ToList(),
                            RetailerBillDiscountFreeItemDcs = BillDiscountFreeItems.Where(x => x.offerId == billDiscountOfferDc.OfferId).Select(x => new AngularJSAuthentication.DataContracts.External.RetailerBillDiscountFreeItemDc
                            {
                                ItemId = x.ItemId,
                                ItemName = x.ItemName,
                                Qty = x.Qty
                            }).ToList()
                        };
                        if (billDiscountOfferDc.MaxDiscount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        else if (billDiscountOfferDc.MaxBillAmount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxBillAmount * billDiscountOfferDc.DiscountPercentage / 100;
                        }
                        else
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        if (bdcheck.BillDiscountOfferOn == "FreeItem" && bdcheck.RetailerBillDiscountFreeItemDcs.Any())
                            FinalBillDiscount.Add(bdcheck);
                        else
                            FinalBillDiscount.Add(bdcheck);


                    }
                }
                res = new DataContracts.External.OfferdataDc()
                {
                    offer = FinalBillDiscount,
                    Status = true,
                    Message = "Success"
                };
                return res;
            }
            //List<OfferBDDTO> BillDiscount = new List<OfferBDDTO>();
            //List<OfferBDDTO> FinalBillDiscount = new List<OfferBDDTO>();
            //ResDTOList res;
            //DateTime CurrentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);
            //try
            //{
            //    using (AuthContext context = new AuthContext())
            //    {
            //        Customer Customer = context.Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false && x.Active == true).FirstOrDefault();
            //        if (Customer != null)
            //        {
            //            BillDiscount = context.OfferDb.Where(o => o.IsDeleted == false && o.WarehouseId == Customer.Warehouseid && o.start <= CurrentDate && o.end >= CurrentDate && o.IsActive == true
            //                            && (o.OfferAppType == "Sales App" || o.OfferAppType == "Both") && (o.OfferOn == "BillDiscount" || o.OfferOn == "ScratchBillDiscount"))
            //                             .Select(o => new OfferBDDTO
            //                             {

            //                                 OfferId = o.OfferId,
            //                                 CustomerId = Customer.CustomerId,
            //                                 WarehouseId = o.WarehouseId,
            //                                 OfferName = o.OfferName,
            //                                 OfferOn = o.OfferOn,
            //                                 OfferCategory = o.OfferCategory,
            //                                 Description = o.Description,
            //                                 start = o.start,
            //                                 end = o.end,
            //                                 DiscountPercentage = o.DiscountPercentage,
            //                                 IsActive = o.IsActive,
            //                                 IsDeleted = o.IsDeleted,
            //                                 CreatedDate = o.CreatedDate,
            //                                 UpdateDate = o.UpdateDate,
            //                                 OfferCode = o.OfferCode,
            //                                 BillDiscountOfferOn = o.BillDiscountOfferOn,
            //                                 BillDiscountWallet = o.BillDiscountWallet,
            //                                 BillAmount = o.BillAmount,
            //                                 LineItem = o.LineItem,
            //                                 MaxBillAmount = o.MaxBillAmount,
            //                                 IsMultiTimeUse = o.IsMultiTimeUse,
            //                                 IsUseOtherOffer = o.IsUseOtherOffer,
            //                                 BillDiscountType = o.BillDiscountType,
            //                                 Category = o.Category,
            //                                 subCategory = o.subCategory,
            //                                 subSubCategory = o.subSubCategory,
            //                                 MaxDiscount = o.MaxDiscount,
            //                                 OfferUseCount = o.OfferUseCount,
            //                                 ApplyOn = o.ApplyOn,
            //                                 WalletType = o.WalletType,
            //                                 OfferItems = o.OfferItemsBillDiscounts.Select(x => new OfferItem
            //                                 {
            //                                     IsInclude = x.IsInclude,
            //                                     itemId = x.itemId
            //                                 }).ToList(),
            //                                 OfferBillDiscountItems = o.BillDiscountOfferSections.Select(x => new OfferBillDiscountItem
            //                                 {
            //                                     IsInclude = x.IsInclude,
            //                                     Id = x.ObjId
            //                                 }).ToList()
            //                             }).ToList();

            //            if (BillDiscount.Count() > 0)
            //            {
            //                //check if offer not used 
            //                foreach (var bdcheck in BillDiscount)
            //                {
            //                    if (bdcheck.OfferOn == "BillDiscount")
            //                    {
            //                        string query = "";
            //                        if (bdcheck.BillDiscountType == "subcategory" && bdcheck.OfferBillDiscountItems.Any())
            //                        {
            //                            var mappingIds = string.Join(",", bdcheck.OfferBillDiscountItems.Select(x => x.Id).ToList());

            //                            query = "select distinct d.Categoryid,a.[SubCategoryId],b.SubCategoryMappingId MappingId from SubCategories a inner join SubcategoryCategoryMappings b on a.SubCategoryid=b.subCategoryid inner join Categories d on b.Categoryid=d.Categoryid and a.IsActive=1 and b.IsActive =1 and a.Deleted=0 and b.Deleted=0 and d.IsActive=1 and d.Deleted=0 and b.SubCategoryMappingId in (" + mappingIds + ")";
            //                            var offerCatSubCats = context.Database.SqlQuery<OfferCatSubCat>(query).ToList();
            //                            foreach (var item in bdcheck.OfferBillDiscountItems)
            //                            {
            //                                if (offerCatSubCats.Any(x => x.MappingId == item.Id))
            //                                {
            //                                    var offerCatSubCat = offerCatSubCats.FirstOrDefault(x => x.MappingId == item.Id);
            //                                    item.Id = offerCatSubCat.SubCategoryId.Value;
            //                                    item.CategoryId = offerCatSubCat.Categoryid.Value;
            //                                }
            //                            }
            //                        }
            //                        else if (bdcheck.BillDiscountType == "brand" && bdcheck.OfferBillDiscountItems.Any())
            //                        {
            //                            var mappingIds = string.Join(",", bdcheck.OfferBillDiscountItems.Select(x => x.Id).ToList());

            //                            query = "select distinct d.SubCategoryId, e.Categoryid,a.[SubsubCategoryid],b.BrandCategoryMappingId MappingId"
            //                                            + " from SubsubCategories a inner"
            //                                            + " join BrandCategoryMappings b on a.SubsubCategoryid = b.SubsubCategoryId"
            //                                            + " inner join SubcategoryCategoryMappings c on c.SubCategoryMappingId = b.SubCategoryMappingId"
            //                                            + " inner join SubCategories d on d.SubCategoryId = c.SubCategoryId"
            //                                            + " inner join Categories e on e.Categoryid = c.Categoryid"
            //                                            + " where a.IsActive = 1 and b.IsActive = 1 and a.Deleted = 0 and b.Deleted = 0 and d.IsActive = 1 and d.Deleted = 0 and c.IsActive = 1 " +
            //                                            " and c.Deleted = 0 and e.IsActive = 1 and e.Deleted = 0 and b.BrandCategoryMappingId in (" + mappingIds + ")";
            //                            var offerCatSubCats = context.Database.SqlQuery<OfferCatSubCat>(query).ToList();
            //                            foreach (var item in bdcheck.OfferBillDiscountItems)
            //                            {
            //                                if (offerCatSubCats.Any(x => x.MappingId == item.Id))
            //                                {
            //                                    var offerCatSubCat = offerCatSubCats.FirstOrDefault(x => x.MappingId == item.Id);
            //                                    item.Id = offerCatSubCat.SubSubCategoryId.Value;
            //                                    item.SubCategoryId = offerCatSubCat.SubCategoryId.Value;
            //                                    item.CategoryId = offerCatSubCat.Categoryid.Value;
            //                                }
            //                            }
            //                        }
            //                    }

            //                    List<BillDiscount> founds = context.BillDiscountDb.Where(x => x.CustomerId == CustomerId && x.OfferId == bdcheck.OfferId).ToList();
            //                    if (founds != null && founds.Any())
            //                    {
            //                        if (bdcheck.OfferOn == "ScratchBillDiscount")
            //                        {
            //                            if (founds.FirstOrDefault().OrderId > 0)
            //                            {
            //                                //BillDiscount.Remove(bdcheck); offer used already
            //                            }
            //                            else if (founds.FirstOrDefault().IsScratchBDCode)
            //                            {
            //                                bdcheck.IsScratchBDCode = true;
            //                                FinalBillDiscount.Add(bdcheck);
            //                            }
            //                            else
            //                            {
            //                                bdcheck.IsScratchBDCode = false;
            //                                FinalBillDiscount.Add(bdcheck);
            //                            }
            //                        }
            //                        else
            //                        {
            //                            if (bdcheck.OfferOn == "BillDiscount" && bdcheck.IsMultiTimeUse)
            //                            {
            //                                if (!bdcheck.OfferUseCount.HasValue)
            //                                    FinalBillDiscount.Add(bdcheck);
            //                                else if (bdcheck.OfferUseCount.Value > founds.Count())
            //                                    FinalBillDiscount.Add(bdcheck);
            //                            }
            //                        }
            //                    }
            //                    else if (bdcheck.OfferOn == "BillDiscount")
            //                    {
            //                        FinalBillDiscount.Add(bdcheck);
            //                    }

            //                }
            //                res = new ResDTOList()
            //                {
            //                    BillDiscount = FinalBillDiscount,
            //                    Status = true,
            //                    Message = "Success"
            //                };
            //                return Request.CreateResponse(HttpStatusCode.OK, res);
            //            }
            //        }
            //    }
            //    res = new ResDTOList()
            //    {
            //        BillDiscount = null,
            //        Status = false,
            //        Message = "fail"
            //    };
            //    return Request.CreateResponse(HttpStatusCode.OK, res);
            //}
            //catch (Exception ee)
            //{

            //    res = new ResDTOList()
            //    {
            //        BillDiscount = null,
            //        Status = false,
            //        Message = ("something isse occurs : " + ee)
            //    };
            //    return Request.CreateResponse(HttpStatusCode.OK, res);
            //}
        }

        [Route("getbysscatid/V3")]
        [HttpGet]
        public HttpResponseMessage getbysscatidv3(string lang, int customerId, int sscatid)
        {
            using (var context = new AuthContext())
            {
                try
                {
                    List<WRSITEM> brandItem = new List<WRSITEM>();
                    var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                    var inActiveCustomer = ActiveCustomer != null && ActiveCustomer.Active == false && ActiveCustomer.Deleted == true ? true : false;
                    var warehouseId = ActiveCustomer != null ? ActiveCustomer.Warehouseid : 0;


                    string sqlquery = "SELECT a.[FlashDealId] AS[FlashDealId], a.[ItemId] AS[ItemId] FROM[dbo].[FlashDealItemConsumeds] AS a inner join AppHomeSectionItems c on a.FlashDealId = c.sectionItemId inner join dbo.AppHomeSections b on b.SectionID = c.apphomesections_SectionID  and b.[Deleted]= 0 and b.Active=1 and b.WarehouseID=" + warehouseId +
                                     " WHERE a.[CustomerId]=" + customerId;
                    var FlashDealWithItemIds = context.Database.SqlQuery<FlashDealWithItem>(sqlquery).ToList();
                    WRSITEM item = new WRSITEM();
                    //foreach (var cw in custBrand)
                    //{

                    //Increase some parameter For offer
                    if (lang.Trim() == "hi")
                    {
                        var newdatahi = (from a in context.itemMasters
                                         where (a.WarehouseId == warehouseId && a.Deleted == false && a.active == true && a.SubsubCategoryid == sscatid)
                                         join b in context.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                         let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()

                                         select new factoryItemdata
                                         {
                                             WarehouseId = a.WarehouseId,
                                             IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                             ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                             CompanyId = a.CompanyId,
                                             Categoryid = b.Categoryid,
                                             Discount = b.Discount,
                                             ItemId = a.ItemId,
                                             ItemNumber = b.Number,
                                             itemname = !string.IsNullOrEmpty(a.HindiName) ? a.HindiName : a.itemname,
                                             LogoUrl = b.LogoUrl,
                                             MinOrderQty = b.MinOrderQty,
                                             price = a.price,
                                             SubCategoryId = b.SubCategoryId,
                                             SubsubCategoryid = b.SubsubCategoryid,
                                             TotalTaxPercentage = b.TotalTaxPercentage,
                                             SellingUnitName = b.SellingUnitName,
                                             SellingSku = b.SellingSku,
                                             UnitPrice = a.UnitPrice,
                                             HindiName = a.HindiName,
                                             itemBaseName = a.itemBaseName,
                                             IsSensitive = a.IsSensitive,
                                             IsSensitiveMRP = a.IsSensitiveMRP,
                                             VATTax = b.VATTax,
                                             active = a.active,
                                             marginPoint = a.marginPoint,
                                             NetPurchasePrice = a.NetPurchasePrice,
                                             promoPerItems = a.promoPerItems,
                                             IsOffer = a.IsOffer,
                                             Deleted = a.Deleted,
                                             OfferCategory = a.OfferCategory,
                                             OfferStartTime = a.OfferStartTime,
                                             OfferEndTime = a.OfferEndTime,
                                             OfferQtyAvaiable = a.OfferQtyAvaiable,
                                             OfferQtyConsumed = a.OfferQtyConsumed,
                                             OfferId = a.OfferId,
                                             OfferType = a.OfferType,
                                             OfferWalletPoint = a.OfferWalletPoint,
                                             OfferFreeItemId = a.OfferFreeItemId,
                                             OfferPercentage = a.OfferPercentage,
                                             OfferFreeItemName = a.OfferFreeItemName,
                                             OfferFreeItemImage = a.OfferFreeItemImage,
                                             OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                             OfferMinimumQty = a.OfferMinimumQty,
                                             FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                             FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                             ItemMultiMRPId = a.ItemMultiMRPId,
                                             BillLimitQty = a.BillLimitQty
                                         }).OrderByDescending(x => x.ItemNumber).ToList();

                        var offerids = newdatahi.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && x.OfferAppType == "Retailer App" || x.OfferAppType == "Both" || x.OfferAppType == "Sales App").Select(x => x.OfferId).ToList() : new List<int>();


                        foreach (var it in newdatahi)
                        {
                            //Condition for offer end
                            if (!inActiveCustomer)
                            {
                                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                                {
                                    if (it.OfferCategory == 2)
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                    else if (it.OfferCategory == 1)
                                    {
                                        it.IsOffer = false;
                                        it.OfferCategory = 0;
                                    }

                                }
                                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                                {
                                    if (FlashDealWithItemIds != null && FlashDealWithItemIds.Any(x => x.ItemId == it.ItemId))
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                }

                                if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                    it.IsOffer = true;
                                else
                                    it.IsOffer = false;
                            }
                            else
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            if (item.ItemMasters == null)
                            {
                                item.ItemMasters = new List<factoryItemdata>();
                            }
                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }

                                    if (it.HindiName != null)
                                    {
                                        if (it.IsSensitive == true)
                                        {
                                            if (it.IsSensitiveMRP == false)
                                            {
                                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name   
                                            }
                                            else
                                            {
                                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM; //item display name                               
                                            }
                                        }
                                        else
                                        {
                                            it.itemname = it.HindiName + " " + it.price + " MRP "; //item display name                               
                                        }
                                    }
                                    else
                                    {
                                        it.itemname = it.itemBaseName + " " + it.price + " MRP "; //item display name                               
                                    }
                                }
                                else { it.dreamPoint = 0; }

                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            if (it.HindiName != null)
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }


                            item.ItemMasters.Add(it);
                        }
                    }
                    else
                    {
                        //Increase some parameter For offer
                        var newdata = (from a in context.itemMasters
                                       where (a.WarehouseId == warehouseId && a.Deleted == false && a.active == true && a.SubsubCategoryid == sscatid)
                                       join b in context.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       let limit = context.ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.Number == p2.ItemNumber && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                       select new factoryItemdata
                                       {
                                           WarehouseId = a.WarehouseId,
                                           CompanyId = a.CompanyId,
                                           IsItemLimit = limit != null ? limit.IsItemLimit : false,
                                           ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                           Categoryid = b.Categoryid,
                                           Discount = b.Discount,
                                           ItemId = a.ItemId,
                                           ItemNumber = b.Number,
                                           itemname = a.itemname,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           price = a.price,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           SellingUnitName = b.SellingUnitName,
                                           SellingSku = b.SellingSku,
                                           UnitPrice = a.UnitPrice,
                                           HindiName = a.HindiName,
                                           VATTax = b.VATTax,
                                           active = a.active,
                                           marginPoint = a.marginPoint,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           promoPerItems = a.promoPerItems,
                                           IsOffer = a.IsOffer,
                                           Deleted = a.Deleted,
                                           OfferCategory = a.OfferCategory,
                                           OfferStartTime = a.OfferStartTime,
                                           OfferEndTime = a.OfferEndTime,
                                           OfferQtyAvaiable = a.OfferQtyAvaiable,
                                           OfferQtyConsumed = a.OfferQtyConsumed,
                                           OfferId = a.OfferId,
                                           OfferType = a.OfferType,
                                           OfferWalletPoint = a.OfferWalletPoint,
                                           OfferFreeItemId = a.OfferFreeItemId,
                                           OfferPercentage = a.OfferPercentage,
                                           OfferFreeItemName = a.OfferFreeItemName,
                                           OfferFreeItemImage = a.OfferFreeItemImage,
                                           OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                                           OfferMinimumQty = a.OfferMinimumQty,
                                           FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                                           FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           BillLimitQty = a.BillLimitQty
                                       }).OrderByDescending(x => x.ItemNumber).ToList();

                        var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                        var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && x.OfferAppType == "Retailer App" || x.OfferAppType == "Both").Select(x => x.OfferId).ToList() : new List<int>();


                        foreach (var it in newdata)
                        {
                            if (!inActiveCustomer)
                            {
                                //Condition for offer end
                                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                                {
                                    if (it.OfferCategory == 2)
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                    else if (it.OfferCategory == 1)
                                    {
                                        it.IsOffer = false;
                                        it.OfferCategory = 0;
                                    }

                                }
                                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                                {
                                    if (FlashDealWithItemIds != null && FlashDealWithItemIds.Any(x => x.ItemId == it.ItemId))
                                    {
                                        it.IsOffer = false;
                                        it.FlashDealSpecialPrice = 0;
                                        it.OfferCategory = 0;
                                    }
                                }
                                if (it.OfferType != "FlashDeal")
                                {
                                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                                        it.IsOffer = true;
                                    else
                                        it.IsOffer = false;
                                }
                            }
                            else
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            if (item.ItemMasters == null)
                            {
                                item.ItemMasters = new List<factoryItemdata>();
                            }
                            try
                            {
                                if (!it.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point
                                    int? MP, PP;
                                    double xPoint = xPointValue * 10;
                                    //Customer (0.2 * 10=1)
                                    if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = it.promoPerItems;
                                    }
                                    if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        it.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        it.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        it.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        it.dreamPoint = 0;
                                    }

                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }
                                // Margin logic
                                // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                                if (it.price > it.UnitPrice)
                                {
                                    it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                                }
                                else
                                {
                                    it.marginPoint = 0;
                                }
                            }
                            catch { }

                            item.ItemMasters.Add(it);
                        }
                    }
                    //}
                    if (item.ItemMasters != null && item.ItemMasters.Any())
                    {
                        item.Message = true;
                        item.ItemMasters.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                    else
                    {
                        item.Message = false;
                        return Request.CreateResponse(HttpStatusCode.OK, item);
                    }
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        [Route("getall")]
        [HttpGet]
        public PaggingDatas notifyDelivered(int list, int page, int customerid)
        {
            using (var context = new AuthContext())
            {
                PaggingDatas data = new PaggingDatas();
                context.Database.CommandTimeout = 600;
                var query = "GetCustomerNotification " + customerid.ToString() + "," + ((page - 1) * list).ToString() + ",10";
                var DeviceNotificationDcs = context.Database.SqlQuery<DeviceNotificationDc>(query).ToList();

                //var notificationmaster = context.DeviceNotificationDb.Where(x => x.CustomerId == customerid).ToList();//.OrderByDescending(x => x.NotificationTime).Skip((page - 1) * list).Take(10).ToList();
                data.notificationmaster = DeviceNotificationDcs;
                data.total_count = DeviceNotificationDcs != null && DeviceNotificationDcs.Any() ? DeviceNotificationDcs.FirstOrDefault().TotalCount : 0;
                return data;


            }
        }

        [Route("customer/V3")]
        [AllowAnonymous]
        public HttpResponseMessage GetBeatDataV3(int id, string day)
        {
            using (var db = new AuthContext())
            {
                GlobalcustomerDetail obj = new GlobalcustomerDetail();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == id && x.AssignmentDate == today);


                if (todayBeats != null && todayBeats.Any())
                {
                    if (!string.IsNullOrEmpty(day) && day != "undefined")
                    {
                        if (day != DateTime.Now.DayOfWeek.ToString())
                        {
                            var executiveBeats = db.Database.SqlQuery<SalespDTO>(string.Format("exec GetExcutiveBeatCustomerexceptToday {0}", id)).ToList();
                            var OtherDayPlannedCustomers = executiveBeats.Select(i => new PlannedRoute
                            {
                                CustomerId = i.CustomerId,
                                CompanyId = i.CompanyId,
                                Active = i.Active,
                                CustomerVerify = i.CustomerVerify,
                                City = i.City,
                                WarehouseId = i.WarehouseId,
                                WarehouseName = i.WarehouseName,
                                lat = i.lat,
                                lg = i.lg,
                                ExecutiveId = i.ExecutiveId,
                                BeatNumber = i.BeatNumber,
                                Day = i.Day,
                                Skcode = i.Skcode,
                                Mobile = i.Mobile,
                                ShopName = i.ShopName,
                                BillingAddress = i.BillingAddress,
                                ShippingAddress = i.ShippingAddress,
                                Name = i.Name,
                                Emailid = i.Emailid,
                                RefNo = i.RefNo,
                                Password = i.Password,
                                UploadRegistration = i.UploadRegistration,
                                ResidenceAddressProof = i.ResidenceAddressProof,
                                DOB = i.DOB,
                                MaxOrderCount = i.MaxOrderCount,
                                IsKPP = i.IsKPP,
                                ClusterId = i.ClusterId,
                                ClusterName = i.ClusterName,
                                CustomerType = i.CustomerType
                            }).ToList();
                            todayBeats.ForEach(x =>
                            {
                                x.PlannedRoutes.AddRange(OtherDayPlannedCustomers);
                            });
                        }

                        todayBeats.ForEach(x =>
                        {
                            x.PlannedRoutes = x.PlannedRoutes.Where(s => !string.IsNullOrEmpty(s.Day) && s.Day == day).ToList();
                        });
                    }
                    else
                    {
                        var executiveBeats = db.Database.SqlQuery<SalespDTO>(string.Format("exec GetExcutiveBeatCustomerexceptToday {0}", id)).ToList();
                        var OtherDayPlannedCustomers = executiveBeats.Select(i => new PlannedRoute
                        {
                            CustomerId = i.CustomerId,
                            CompanyId = i.CompanyId,
                            Active = i.Active,
                            CustomerVerify = i.CustomerVerify,
                            City = i.City,
                            WarehouseId = i.WarehouseId,
                            WarehouseName = i.WarehouseName,
                            lat = i.lat,
                            lg = i.lg,
                            ExecutiveId = i.ExecutiveId,
                            BeatNumber = i.BeatNumber,
                            Day = i.Day,
                            Skcode = i.Skcode,
                            Mobile = i.Mobile,
                            ShopName = i.ShopName,
                            BillingAddress = i.BillingAddress,
                            ShippingAddress = i.ShippingAddress,
                            Name = i.Name,
                            Emailid = i.Emailid,
                            RefNo = i.RefNo,
                            Password = i.Password,
                            UploadRegistration = i.UploadRegistration,
                            ResidenceAddressProof = i.ResidenceAddressProof,
                            DOB = i.DOB,
                            MaxOrderCount = i.MaxOrderCount,
                            IsKPP = i.IsKPP,
                            ClusterId = i.ClusterId,
                            ClusterName = i.ClusterName,
                            CustomerType = i.CustomerType
                        }).ToList();
                        todayBeats.ForEach(x =>
                        {
                            x.PlannedRoutes.AddRange(OtherDayPlannedCustomers);
                        });
                    }

                }


                if (todayBeats != null && todayBeats.Any())
                {
                    //var existingActualRoute = todayBeats != null
                    //                    ? todayBeats.Where(s => s.ActualRoutes != null && s.ActualRoutes.Any()).SelectMany(z => z.ActualRoutes)
                    //                    : null;

                    //if (existingActualRoute != null && existingActualRoute.Any())
                    //    todayBeats.ForEach(s => s.PlannedRoutes.RemoveAll(x => existingActualRoute.Select(z => z.CustomerId).Contains(x.CustomerId)));

                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        customers = todayBeats,
                        Status = true,
                        Message = "Customer Found"
                    });
                }
                else
                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        customers = todayBeats,
                        Status = false,
                        Message = "No Customer found"
                    });


            }
        }

        //[Route("GetCustomerTarget")]
        //[HttpGet]
        //public HttpResponseMessage GetCustomerTarget(int WarehouseId)
        //{
        //    using (var con = new AuthContext())
        //    {
        //        var currentmonth = DateTime.Now;

        //        var MonthlyCustomerTarget = new MongoDbHelper<MonthlyCustomerTarget>();
        //        string DocumentName = "MonthlyTargetData_" + currentmonth.Month.ToString() + currentmonth.Year.ToString();
        //        var Targets = MonthlyCustomerTarget.Select(x => x.WarehouseId == WarehouseId, null, null, null, false, "", DocumentName).ToList();

        //        var warehousename = con.Warehouses.Where(x => x.WarehouseId == WarehouseId).Select(x => x.WarehouseName).FirstOrDefault();

        //        if (Targets != null)
        //        {
        //            var GetCustomerTarget = Targets.Select(x => new
        //            {
        //                Skcode = x.Skcode,
        //                WarehouseId = warehousename,
        //                Volumn = x.Volume,
        //                Levels = x.Levels,
        //                Bands = x.Bands,
        //                Target = x.Target,
        //                CurrentVolume = x.CurrentVolume,
        //                CreatedDate = x.CreatedDate,
        //                IsClaimed = x.IsClaimed
        //            }).ToList();


        //            var response = new
        //            {
        //                GetCustomerTarget = GetCustomerTarget,
        //                Status = true,
        //                Message = "Customer Target Data List"
        //            };
        //            return Request.CreateResponse(HttpStatusCode.OK, response);
        //        }
        //        else
        //        {
        //            var response = new
        //            {
        //                Status = false,
        //                Message = "Customer Target Not Found"
        //            };
        //            return Request.CreateResponse(HttpStatusCode.OK, response);
        //        }
        //    }
        //}

        [Route("OrderSummary")]
        [HttpGet]
        public HttpResponseMessage OrderSummary(int PeopleId)
        {
            var result = new OrderSummaryDc();
            using (var context = new AuthContext())
            {
                if (PeopleId > 0)
                {
                    var param = new SqlParameter("@PeopleId", PeopleId);
                    result = context.Database.SqlQuery<OrderSummaryDc>("exec [SalesAppOrderSummary] @PeopleId", param).FirstOrDefault();
                }
            }
            return Request.CreateResponse(HttpStatusCode.OK, result);
        }
        [Route("SalesManAllWarehouse")]
        public HttpResponseMessage GetAllWarehouseSalesMan(string Mobile, int PeopleId)
        {
            using (AuthContext db = new AuthContext())
            {
                WarehouseDetail obj = new WarehouseDetail();
                List<Warehouse> data = new List<Warehouse>();

                People people = db.Peoples.Where(e => e.PeopleID == PeopleId && e.Mobile == Mobile && e.Active == true).FirstOrDefault();
                if (people != null)
                {
                    data = db.Warehouses.Where(e => e.Deleted == false).ToList();
                    if (data.Count() > 0)
                    {
                        obj = new WarehouseDetail()
                        {
                            Warehouses = data,
                            Status = true,
                            Message = "Warehouse Found"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, obj);
                    }
                    else
                    {
                        if (data.Count() > 0)
                        {
                            obj = new WarehouseDetail()
                            {
                                Warehouses = data,
                                Status = true,
                                Message = "Warehouse Not Found"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, obj);
                        }
                    }
                }

                obj = new WarehouseDetail()
                {
                    Warehouses = data,
                    Status = false,
                    Message = "people not found"
                };
                return Request.CreateResponse(HttpStatusCode.OK, obj);
            }
        }


        [Route("GetLogedSalesPerson")]
        [AcceptVerbs("GET")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage GetLogedSalesPerson(string MobileNumber, bool IsOTPverified, string fcmid, string CurrentAPKversion, string PhoneOSversion, string DeviceId, string UserDeviceName, string IMEI = "")
        {
            SalesDTO res;
            using (var db = new AuthContext())
            {
                try
                {
                    if (IsOTPverified == true)
                    {
                        People People = new People();
                        string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + MobileNumber + "' and r.Name='Sales Executive' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        People = db.Database.SqlQuery<People>(query).FirstOrDefault();
                        //People = db.Peoples.Where(x => x.Mobile == MobileNumber && x.Department == "Sales Executive" && x.Deleted == false && x.Active == true).FirstOrDefault();
                        if (People != null)
                        {
                            List<string> FCMIds = new List<string>();
                            if (People.FcmId != fcmid)
                                FCMIds.Add(People.FcmId);

                            People.FcmId = fcmid;
                            People.DeviceId = DeviceId;
                            People.CurrentAPKversion = CurrentAPKversion;   //tejas for device info 
                            People.PhoneOSversion = PhoneOSversion;
                            People.UserDeviceName = UserDeviceName;
                            People.IMEI = IMEI;
                            //People.UpdatedDate = indianTime;
                            //db.Peoples.Attach(People);
                            db.Entry(People).State = EntityState.Modified;
                            db.Commit();
                            #region Device History
                            var Customerhistory = db.Peoples.Where(x => x.Mobile == People.Mobile).FirstOrDefault();
                            try
                            {
                                PhoneRecordHistory phonerecord = new PhoneRecordHistory();
                                if (Customerhistory != null)
                                {
                                    phonerecord.PeopleID = Customerhistory.PeopleID;
                                    phonerecord.PeopleFirstName = Customerhistory.PeopleFirstName;
                                    phonerecord.Department = Customerhistory.Department;
                                    phonerecord.Mobile = Customerhistory.Mobile;
                                    phonerecord.CurrentAPKversion = Customerhistory.CurrentAPKversion;
                                    phonerecord.PhoneOSversion = Customerhistory.PhoneOSversion;
                                    phonerecord.UserDeviceName = Customerhistory.UserDeviceName;
                                    phonerecord.IMEI = Customerhistory.IMEI;
                                    phonerecord.UpdatedDate = DateTime.Now;
                                    db.PhoneRecordHistoryDB.Add(phonerecord);
                                    int id = db.Commit();
                                }
                            }
                            catch (Exception ex)
                            {
                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                            }
                            #endregion

                            var registeredApk = db.GetAPKUserAndPwd("SalesApp");
                            People.RegisteredApk = registeredApk;
                            string queryrole = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + People.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                            var role = db.Database.SqlQuery<string>(queryrole).ToList();

                            var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                            if (IsRole)
                            {
                                People.Role = "Hub sales lead";
                            }
                            else
                            {

                                People.Role = "";

                            }

                            if (FCMIds.Any())
                            {
                                string Key = ConfigurationManager.AppSettings["SalesFcmApiKey"];
                                //var objNotificationList = FCMIds.Distinct().Select(x => new
                                //{
                                //    to = x,
                                //    PeopleId = People.PeopleID,
                                //    data = new
                                //    {
                                //        title = "",
                                //        body = "",
                                //        icon = "",
                                //        typeId = "",
                                //        notificationCategory = "",
                                //        notificationType = "",
                                //        notificationId = "",
                                //        notify_type = "logout",
                                //        url = "",
                                //    }
                                //}).ToList();
                                var data = new FCMData
                                {
                                    title = "",
                                    body = "",
                                    icon = "",
                                    notificationCategory = "",
                                    notificationType = "",
                                    notify_type = "logout",
                                    url = "",
                                };
                                ConcurrentBag<ManualAutoNotification> AutoNotifications = new ConcurrentBag<ManualAutoNotification>();
                                MongoDbHelper<ManualAutoNotification> AutoNotificationmongoDbHelper = new MongoDbHelper<ManualAutoNotification>();
                                ParallelLoopResult parellelResult = Parallel.ForEach(FCMIds.Distinct(), (x) =>
                                {
                                    var AutoNotification = new ManualAutoNotification
                                    {
                                        CreatedDate = DateTime.Now,
                                        FcmKey = Key,
                                        IsActive = true,
                                        IsSent = false,
                                        NotificationMsg = Newtonsoft.Json.JsonConvert.SerializeObject(data),
                                        ObjectId = People.PeopleID,
                                        ObjectType = "People"
                                    };
                                    try
                                    {
                                        var firebaseService = new FirebaseNotificationServiceHelper(Key);
                                        //var fcmid = "fZGIeP5dTKGd-2JBZttcDj:APA91bGINtqXqKuCcEHd4qXZMN-VtX5KC2g98KkytmGdpc28_-duDu8Ry1P6Kk_Xb9RgRG0iDWrp8DkwE1EPCOPG0OLz2uRjo-HBg-Ysg-mDaMErlYLjJGZE7ScXKIkjmWZ0xNO6UyxN";
                                        var result = firebaseService.SendNotificationForApprovalAsync(x, data);
                                        if (result != null)
                                        {
                                            AutoNotification.IsSent = true;
                                        }
                                        else
                                        {
                                            AutoNotification.IsSent = false;
                                        }
                                        //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                                        //tRequest.Method = "post";
                                        //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(x);
                                        //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                                        //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                                        //tRequest.ContentLength = byteArray.Length;
                                        //tRequest.ContentType = "application/json";
                                        //using (Stream dataStream = tRequest.GetRequestStream())
                                        //{
                                        //    dataStream.Write(byteArray, 0, byteArray.Length);
                                        //    using (WebResponse tResponse = tRequest.GetResponse())
                                        //    {
                                        //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                                        //        {
                                        //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                                        //            {
                                        //                String responseFromFirebaseServer = tReader.ReadToEnd();
                                        //                AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse>(responseFromFirebaseServer);
                                        //                if (response.success == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = true;
                                        //                }
                                        //                else if (response.failure == 1)
                                        //                {
                                        //                    AutoNotification.IsSent = false;
                                        //                }
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                    }
                                    catch (Exception asd)
                                    {
                                        AutoNotification.IsSent = false;
                                        logger.Error(new StringBuilder("Error while sending FCM for type: ").Append(data.notify_type).Append(asd.ToString()).ToString());
                                    }
                                });
                                if (parellelResult.IsCompleted && AutoNotifications != null && AutoNotifications.Any())
                                {
                                    var autoNot = AutoNotifications.ToList();
                                    AutoNotificationmongoDbHelper.InsertMany(autoNot);
                                }
                            }
                            res = new SalesDTO()
                            {
                                P = People,
                                Status = true,
                                Message = "Success."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                        else
                        {
                            res = new SalesDTO()
                            {
                                P = null,
                                Status = false,
                                Message = "SalesPerson does not exist or Incorect mobile number."
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, res);
                        }
                    }
                    else
                    {

                        res = new SalesDTO()
                        {
                            P = null,
                            Status = false,
                            Message = "OTP not verified."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                    res = new SalesDTO()
                    {
                        P = null,
                        Status = false,
                        Message = "Some Error Occurred."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }

        //public OTP Getotp(string MobileNumber, string msg, string sRandomOTP, string DLTId)
        //{
        //    logger.Info("start Gen OTP: ");
        //    try
        //    {
        //        string OtpMessage = msg;
        //        string message = sRandomOTP + " :" + OtpMessage;
        //        Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, message, ((Int32)Common.Enums.SMSRouteEnum.OTP).ToString(), DLTId);
        //        OTP a = new OTP()
        //        {
        //            OtpNo = sRandomOTP
        //        };
        //        return a;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error("Error in OTP Genration for Order.");
        //        return null;
        //    }
        //}
        //public bool GenerateOTPForDeliveryAPP(int OrderId, string Status, int userid, double? lat, double? lg)
        //{
        //    bool result = false;
        //    string msgs = "";
        //    try
        //    {
        //        string requireStatus = "Delivered,Delivery Redispatch,Delivery Canceled Request,Delivery Canceled";
        //        if (requireStatus.Split(',').ToList().Contains(Status))
        //        {
        //            using (AuthContext context = new AuthContext())
        //            {
        //                // " is Your Shopkirana Verification Code. :)";
        //                string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
        //                string sRandomOTP = GenerateRandomOTP(4, saAllowedCharacters);

        //                if (!string.IsNullOrEmpty(sRandomOTP))
        //                {
        //                    var orderDeliveryOTPs = context.OrderDeliveryOTP.Where(x => x.OrderId == OrderId && x.IsActive);
        //                    if (orderDeliveryOTPs != null)
        //                    {
        //                        foreach (var orderDeliveryOTP in orderDeliveryOTPs)
        //                        {
        //                            orderDeliveryOTP.ModifiedDate = DateTime.Now;
        //                            orderDeliveryOTP.ModifiedBy = userid;
        //                            orderDeliveryOTP.IsActive = false;
        //                            //context.OrderDeliveryOTP.Attach(orderDeliveryOTP);
        //                            context.Entry(orderDeliveryOTP).State = EntityState.Modified;
        //                        }
        //                    }
        //                    OrderDeliveryOTP OrderDeliveryOTP = new OrderDeliveryOTP
        //                    {
        //                        CreatedBy = userid,
        //                        CreatedDate = DateTime.Now,
        //                        IsActive = true,
        //                        OrderId = OrderId,
        //                        OTP = sRandomOTP,
        //                        Status = Status,
        //                        lat = lat,
        //                        lg = lg
        //                    };
        //                    context.OrderDeliveryOTP.Add(OrderDeliveryOTP);
        //                    result = context.Commit() > 0;
        //                }

        //                string query = "select a.warehouseid,sp.Mobile salespersonmobile,sp.FcmId salespersonfcmid,agent.Mobile agentmobile,agent.FcmId agentfcmid,c.Mobile customermobile,c.fcmId customerfmcid  from OrderMasters a Inner join  Customers c on  a.CustomerId=c.CustomerId  left join People agent on c.AgentCode=agent.PeopleID  Outer Apply (Select top 1 sp.Mobile,sp.FcmId  from OrderDetails od  Inner join People sp on od.ExecutiveId=sp.PeopleID  and od.OrderId=a.OrderId ) sp  Where  a.orderid =" + OrderId;
        //                var orderMobiledetail = context.Database.SqlQuery<ControllerV1.OrderMobiledetail>(query).FirstOrDefault();
        //                var OrderDeliveryMaster = context.OrderDeliveryMasterDB.Where(z => z.OrderId == OrderId).FirstOrDefault();
        //                //var ordermaster = context.DbOrderMaster.FirstOrDefault(x => x.OrderId == OrderId);
        //                var Ordercancellation = context.DeptOrderCancellationDb.Where(o => o.OrderId == OrderId).FirstOrDefault();
        //                DeptOrderCancellation a = new DeptOrderCancellation();
        //                a.OrderId = OrderId;

        //                if (orderMobiledetail != null)
        //                {
        //                    List<ControllerV1.SalesLeadMobile> SalesLeadMobile = new List<ControllerV1.SalesLeadMobile>();
        //                    query = "select a.Mobile,a.FcmId from People a inner join AspNetUsers b on a.Email=b.Email and a.WarehouseId=" + orderMobiledetail.warehouseid + " and a.Active=1 and a.Deleted=0 inner join AspNetUserRoles c on b.id=c.UserId  inner join AspNetRoles d on c.RoleId=d.Id and d.Name='Hub sales lead'";
        //                    SalesLeadMobile = context.Database.SqlQuery<ControllerV1.SalesLeadMobile>(query).ToList();

        //                    var param = new SqlParameter("@OrderId", OrderId);
        //                    var ordermaster = context.Database.SqlQuery<OrderDetailForOTPTemplateDc>("Exec GetOrderDetailForOTPTemplate  @OrderId", param).FirstOrDefault();

        //                    switch (Status)
        //                    {
        //                        case "Delivered":
        //                            if (!string.IsNullOrEmpty(orderMobiledetail.customermobile))
        //                            {
        //                                if (ordermaster != null && ordermaster.OrderType == 5)
        //                                {
        //                                    //Getotp(orderMobiledetail.customermobile, " is OTP for delivery of Order No (" + ordermaster.invoice_no + ")", sRandomOTP);
        //                                    string Message = "";//"{#var1#} is Delivery Code for delivery of Order No. {#var2#} for Total Qty {#var3#} and Value of Rs. {#var4#}. Shopkirana";
        //                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Delivered");
        //                                    Message = dltSMS == null ? "" : dltSMS.Template;

        //                                    Message = Message.Replace("{#var2#}", ordermaster.invoice_no.ToString());
        //                                    Message = Message.Replace("{#var3#}", ordermaster.TotalQty.ToString());
        //                                    Message = Message.Replace("{#var4#}", ordermaster.OrderAmount.ToString());
        //                                    if (dltSMS != null)
        //                                        Getotp(orderMobiledetail.customermobile, Message, sRandomOTP, dltSMS.DLTId);
        //                                }
        //                                else
        //                                {
        //                                    //Getotp(orderMobiledetail.customermobile, " is OTP for delivery of Order No (" + OrderId + ")", sRandomOTP);
        //                                    string Message = ""; //"{#var1#} is Delivery Code for delivery of Order No. {#var2#} for Total Qty {#var3#} and Value of Rs. {#var4#}. Shopkirana";
        //                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Delivered");
        //                                    Message = dltSMS == null ? "" : dltSMS.Template;
        //                                    Message = Message.Replace("{#var2#}", ordermaster.invoice_no.ToString());
        //                                    Message = Message.Replace("{#var3#}", ordermaster.TotalQty.ToString());
        //                                    Message = Message.Replace("{#var4#}", ordermaster.OrderAmount.ToString());
        //                                    if (dltSMS != null)
        //                                        Getotp(orderMobiledetail.customermobile, Message, sRandomOTP, dltSMS.DLTId);

        //                                }
        //                            }
        //                            break;
        //                        case "Delivery Redispatch":
        //                            if (!string.IsNullOrEmpty(orderMobiledetail.agentmobile))
        //                            {
        //                                //  Getotp(orderMobiledetail.agentmobile, " is Your Customer Order No (" + OrderId + ") Delivery Redispatch Code Shopkirana", sRandomOTP);
        //                                string msg = ""; //" is Your Customer Order No {#var2#} Delivery Redispatch Code. ShopKirana";
        //                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Redispatch");
        //                                msg = dltSMS == null ? "" : dltSMS.Template;
        //                                msg = msg.Replace("{#var2#}", OrderId.ToString());
        //                                if (dltSMS != null)
        //                                    Getotp(orderMobiledetail.agentmobile, msg, sRandomOTP, dltSMS.DLTId);
        //                            }
        //                            if (SalesLeadMobile != null && SalesLeadMobile.Any())
        //                            {
        //                                foreach (var item in SalesLeadMobile)
        //                                {
        //                                    if (!string.IsNullOrEmpty(item.Mobile))
        //                                    {
        //                                        string msg = ""; //" : is Your Customer Order No {#var2#} Delivery Redispatch Code. ShopKirana";
        //                                        var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Redispatch");
        //                                        msg = dltSMS == null ? "" : dltSMS.Template;
        //                                        msg = msg.Replace("{#var2#}", OrderId.ToString());
        //                                        if (dltSMS != null)
        //                                            Getotp(item.Mobile, msg, sRandomOTP, dltSMS.DLTId);
        //                                    }
        //                                }
        //                            }

        //                            if (!string.IsNullOrEmpty(orderMobiledetail.salespersonmobile))
        //                            {
        //                                string msg = ""; //" : is Your Customer Order No {#var2#} Delivery Redispatch Code. ShopKirana";
        //                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Redispatch");
        //                                msg = dltSMS == null ? "" : dltSMS.Template;
        //                                msg = msg.Replace("{#var2#}", OrderId.ToString());
        //                                if (dltSMS != null)
        //                                    Getotp(orderMobiledetail.salespersonmobile, msg, sRandomOTP, dltSMS.DLTId);
        //                            }
        //                            break;
        //                        //case "Delivery Canceled Request":
        //                        //    if (!string.IsNullOrEmpty(orderMobiledetail.agentmobile))
        //                        //    {
        //                        //        Getotp(orderMobiledetail.agentmobile, " is OTP for delivery canceled of Order No (" + OrderId + ") Shopkirana", sRandomOTP);
        //                        //    }
        //                        //    if (!string.IsNullOrEmpty(orderMobiledetail.customermobile))
        //                        //    {
        //                        //        if (OrderDeliveryMaster.comments == "Dont Want" || OrderDeliveryMaster.comments == "Price Issue (sales)")
        //                        //        {
        //                        //            if (ordermaster != null && ordermaster.OrderType != 5)
        //                        //            {
        //                        //                var msg = "You will be Charged 100 wallet point of Cancellation";
        //                        //                Common.Helpers.SendSMSHelper.SendSMS(orderMobiledetail.customermobile, msg, ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString());
        //                        //            }
        //                        //            //Getotp(orderMobiledetail.customermobile, " Delivery canceled of Order No (" + OrderId + ")", msg);
        //                        //        }
        //                        //    }


        //                        //if (!string.IsNullOrEmpty(orderMobiledetail.salespersonmobile))
        //                        //{
        //                        //    Getotp(orderMobiledetail.salespersonmobile, " is OTP for delivery canceled of Order No (" + OrderId + ") Shopkirana", sRandomOTP);
        //                        //}
        //                        //break;
        //                        case "Delivery Canceled":
        //                            if (!string.IsNullOrEmpty(orderMobiledetail.agentmobile))
        //                            {
        //                                string Message = ""; //" is OTP for delivery canceled of Order No {#var2#} . ShopKirana";
        //                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Cancellation");
        //                                Message = dltSMS == null ? "" : dltSMS.Template;
        //                                Message = Message.Replace("{#var2#}", OrderId.ToString());
        //                                if (dltSMS != null)
        //                                    Getotp(orderMobiledetail.agentmobile, Message, sRandomOTP, dltSMS.DLTId);

        //                            }


        //                            //if (!string.IsNullOrEmpty(orderMobiledetail.customermobile))
        //                            //{
        //                            //    Getotp(orderMobiledetail.customermobile, " is OTP for delivery canceled of Order No (" + OrderId + ")", sRandomOTP);
        //                            //}
        //                            if (!string.IsNullOrEmpty(orderMobiledetail.customermobile))
        //                            {
        //                                //var msg = "You will be Charged 100 wallet point of Cancellation";
        //                                //Getotp(orderMobiledetail.customermobile, " Delivery canceled of Order No (" + OrderId + ")", msg);
        //                                if (OrderDeliveryMaster.comments == "Dont Want" || OrderDeliveryMaster.comments == "Price Issue (sales)")
        //                                {
        //                                    if (ordermaster != null && ordermaster.OrderType != 5)
        //                                    {
        //                                        // var msg = "You will be Charged 100 wallet point of Cancellation";
        //                                        var msg = "";//" You will be Charged {#var#} wallet point of Cancellation";
        //                                        var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.RetailerApp, "Wallet_Fine_Charged_On_Cancellation_Order");
        //                                        msg = dltSMS == null ? "" : dltSMS.Template;
        //                                        msg = msg.Replace("{#var#}", "100");
        //                                        if (dltSMS != null)
        //                                            Common.Helpers.SendSMSHelper.SendSMS(orderMobiledetail.customermobile, msg, ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString(), dltSMS.DLTId);
        //                                    }
        //                                    //Getotp(orderMobiledetail.customermobile, " Delivery canceled of Order No (" + OrderId + ")", msg);
        //                                }
        //                            }


        //                            if (!string.IsNullOrEmpty(orderMobiledetail.salespersonmobile))
        //                            {
        //                                string Message = ""; //" is OTP for delivery canceled of Order No {#var2#} . ShopKirana";
        //                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.SalesApp, "Order_Delivery_Cancellation");
        //                                Message = dltSMS == null ? "" : dltSMS.Template;
        //                                Message = Message.Replace("{#var2#}", OrderId.ToString());
        //                                Getotp(orderMobiledetail.salespersonmobile, Message, sRandomOTP, dltSMS.DLTId);
        //                            }
        //                            break;
        //                    }

        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error("Error in GenerateOTPForOrder Method: " + ex.Message);
        //        result = false;
        //    }
        //    return result;
        //}


        //[Route("NotifyDeliveryAPPForOrderCancled")]
        //[HttpGet]
        //[AllowAnonymous]
        //public ResponceDc NotifyDeliveryAPPForOrderCancled(long TripPlannerConfirmedDetailId, int orderId, int Peopleid, int status, string orderStatus, long? Id = null)
        //{
        //    int ApproveNotifyTimeLeftInMinute = Convert.ToInt32(ConfigurationManager.AppSettings["ApproveNotifyTimeLeftInMinute"]);
        //    bool checkTrpStatus = false;
        //    // status = 1 Approved, 0= Reject
        //    ResponceDc res = null;
        //    using (var context = new AuthContext())
        //    {
        //        var tripPlannerConfirmedDetails = context.TripPlannerConfirmedDetails.Where(x => x.Id == TripPlannerConfirmedDetailId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();

        //        if ((int)CustomerTripStatusEnum.unloading == tripPlannerConfirmedDetails.CustomerTripStatus)
        //        {
        //            checkTrpStatus = true;
        //        }
        //        else if ((int)CustomerTripStatusEnum.CollectingPayment == tripPlannerConfirmedDetails.CustomerTripStatus)
        //        {
        //            checkTrpStatus = true;
        //        }
        //        else if ((int)CustomerTripStatusEnum.VerifyingOTP == tripPlannerConfirmedDetails.CustomerTripStatus)
        //        {
        //            checkTrpStatus = true;
        //        }
        //        if (!checkTrpStatus)
        //        {
        //            string FCMKey = "";
        //            IAppConfiguration AppConfiguration = new BaseAppConfiguration();
        //            if (Id != null)
        //            {
        //                var peopleSentNotification = context.PeopleSentNotifications.Where(x => x.OrderId == orderId && !x.IsApproved && !x.IsRejected && !x.IsDeleted && x.Id == Id).FirstOrDefault();
        //                if (peopleSentNotification.CreatedDate.AddMinutes(ApproveNotifyTimeLeftInMinute) >= DateTime.Now)
        //                {
        //                    //Get Delivery boy FCM ID for Notify
        //                    ///status update order trip
        //                    var OrderId = new SqlParameter("@OrderId", orderId);
        //                    string FCMID = context.Database.SqlQuery<string>(" EXEC GetDboyFCMId @OrderId", OrderId).FirstOrDefault();
        //                    if (FCMID != null)
        //                    {

        //                        FCMKey = ConfigurationManager.AppSettings["DeliveryFcmApiKey"];
        //                        if (status == 1)
        //                        {
        //                            string Msg = "Order Action Notification";
        //                            string notify_type = "Order Action Updated Notification";
        //                            AppConfiguration.SendNotificationForApprovalDeliveyApp(FCMID, Msg, orderId, FCMKey, orderStatus, status, notify_type);
        //                            if (GenerateOTPForDeliveryAPP(orderId, orderStatus, Peopleid, null, null))
        //                            {
        //                                tripPlannerConfirmedDetails.CustomerTripStatus = Convert.ToInt32(CustomerTripStatusEnum.RedispatchAndOrderCancelVerifyingOTP);
        //                                context.Entry(tripPlannerConfirmedDetails).State = EntityState.Modified;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            var tripPlannerConfirmedOrders = context.TripPlannerConfirmedOrders.Where(x => x.TripPlannerConfirmedDetailId == TripPlannerConfirmedDetailId && x.OrderId == orderId).FirstOrDefault();
        //                            if (tripPlannerConfirmedOrders != null)
        //                            {
        //                                string Msg = "Order Reject Action Notification";
        //                                string notify_type = "Sales Person Order Reject Notification";
        //                                AppConfiguration.SendNotificationForApprovalDeliveyApp(FCMID, Msg, orderId, FCMKey, orderStatus, status, notify_type);
        //                                tripPlannerConfirmedDetails.CustomerTripStatus = Convert.ToInt32(CustomerTripStatusEnum.ReachedDistination);
        //                                context.Entry(tripPlannerConfirmedDetails).State = EntityState.Modified;
        //                                tripPlannerConfirmedOrders.WorkingStatus = Convert.ToInt32(WorKingStatus.Pending);
        //                                context.Entry(tripPlannerConfirmedOrders).State = EntityState.Modified;
        //                            }
        //                        }
        //                    }
        //                }
        //                if (peopleSentNotification != null)
        //                {
        //                    if (status == 1)
        //                    {
        //                        peopleSentNotification.IsApproved = true;
        //                        peopleSentNotification.ApprovedBy = Peopleid;
        //                        peopleSentNotification.ApprovedDate = DateTime.Now;
        //                    }
        //                    else
        //                    {
        //                        peopleSentNotification.IsRejected = true;
        //                        peopleSentNotification.RejectedBy = Peopleid;
        //                        peopleSentNotification.RejectedDate = DateTime.Now;
        //                    }
        //                    context.Entry(peopleSentNotification).State = EntityState.Modified;
        //                    context.Commit();
        //                }
        //            }
        //            else
        //            {
        //                var peopleSentNotification = context.PeopleSentNotifications.Where(x => x.OrderId == orderId && !x.IsApproved && !x.IsRejected && !x.IsDeleted).FirstOrDefault();
        //                if (peopleSentNotification.CreatedDate.AddMinutes(ApproveNotifyTimeLeftInMinute) >= DateTime.Now)
        //                {
        //                    //Get Delivery boy FCM ID for Notify
        //                    ///status update order trip
        //                    var OrderId = new SqlParameter("@OrderId", orderId);
        //                    string FCMID = context.Database.SqlQuery<string>(" EXEC GetDboyFCMId @OrderId", OrderId).FirstOrDefault();
        //                    if (FCMID != null)
        //                    {

        //                        FCMKey = ConfigurationManager.AppSettings["DeliveryFcmApiKey"];
        //                        if (status == 1)
        //                        {
        //                            peopleSentNotification.NotificationType = 1;
        //                            string Msg = "Order Action Notification";
        //                            string notify_type = "Order Action Updated Notification";
        //                            AppConfiguration.SendNotificationForApprovalDeliveyApp(FCMID, Msg, orderId, FCMKey, orderStatus, status, notify_type);
        //                            if (GenerateOTPForDeliveryAPP(orderId, orderStatus, Peopleid, null, null))
        //                            {
        //                                tripPlannerConfirmedDetails.CustomerTripStatus = Convert.ToInt32(CustomerTripStatusEnum.RedispatchAndOrderCancelVerifyingOTP);
        //                                context.Entry(tripPlannerConfirmedDetails).State = EntityState.Modified;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            peopleSentNotification.NotificationType = 1;
        //                            var tripPlannerConfirmedOrders = context.TripPlannerConfirmedOrders.Where(x => x.TripPlannerConfirmedDetailId == TripPlannerConfirmedDetailId && x.OrderId == orderId).FirstOrDefault();
        //                            if (tripPlannerConfirmedOrders != null)
        //                            {
        //                                string Msg = "Order Reject Action Notification";
        //                                string notify_type = "Sales Person Order Reject Notification";
        //                                AppConfiguration.SendNotificationForApprovalDeliveyApp(FCMID, Msg, orderId, FCMKey, orderStatus, status, notify_type);
        //                                tripPlannerConfirmedDetails.CustomerTripStatus = Convert.ToInt32(CustomerTripStatusEnum.ReachedDistination);
        //                                context.Entry(tripPlannerConfirmedDetails).State = EntityState.Modified;
        //                                tripPlannerConfirmedOrders.WorkingStatus = Convert.ToInt32(WorKingStatus.Pending);
        //                                context.Entry(tripPlannerConfirmedOrders).State = EntityState.Modified;
        //                            }
        //                        }
        //                    }
        //                }
        //                if (peopleSentNotification != null)
        //                {
        //                    if (status == 1)
        //                    {
        //                        peopleSentNotification.IsApproved = true;
        //                        peopleSentNotification.ApprovedBy = Peopleid;
        //                        peopleSentNotification.ApprovedDate = DateTime.Now;
        //                    }
        //                    else
        //                    {
        //                        peopleSentNotification.IsRejected = true;
        //                        peopleSentNotification.RejectedBy = Peopleid;
        //                        peopleSentNotification.RejectedDate = DateTime.Now;
        //                    }
        //                    context.Entry(peopleSentNotification).State = EntityState.Modified;
        //                    context.Commit();
        //                }
        //            }
        //            res = new ResponceDc()
        //            {
        //                TripDashboardDC = null,
        //                Status = true,
        //                Message = "Your order status send successfully."
        //            };
        //        }
        //        else
        //        {
        //            res = new ResponceDc()
        //            {
        //                TripDashboardDC = null,
        //                Status = false,
        //                Message = "Order in Progress Collecting Payment"
        //            };
        //        }

        //    }
        //    return res;
        //}


        [Route("UploadPeopleProfileImage")]
        [HttpPost]
        [AllowAnonymous]
        public string UploadPeopleProfileImage()
        {
            string LogoUrl = "";
            try
            {
                if (HttpContext.Current.Request.Files.AllKeys.Any())
                {
                    var httpPostedFile = HttpContext.Current.Request.Files["file"];
                    if (httpPostedFile != null)
                    {
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~/PeopleProfileImage")))
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/PeopleProfileImage"));

                        string extension = Path.GetExtension(httpPostedFile.FileName);
                        string fileName = httpPostedFile.FileName.Substring(0, httpPostedFile.FileName.LastIndexOf('.')) + DateTime.Now.ToString("ddMMyyyyHHmmss") + extension;
                        LogoUrl = Path.Combine(HttpContext.Current.Server.MapPath("~/PeopleProfileImage"), fileName);
                        httpPostedFile.SaveAs(LogoUrl);
                        AngularJSAuthentication.Common.Helpers.FileUploadHelper.Upload(fileName, "~/PeopleProfileImage", LogoUrl);
                        LogoUrl = "/PeopleProfileImage/" + fileName;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in UploadPeopleProfileImage Method: " + ex.Message);
            }
            return LogoUrl;
        }

        [Route("GetAllOfferSalesApp")]
        [HttpGet]
        // [AllowAnonymous]
        public DataContracts.External.OfferdataDc GetAllOfferSalesApp(int PeopleId, int WarehouseId, int CustomerId)
        {

            List<AngularJSAuthentication.DataContracts.External.OfferDc> FinalBillDiscount = new List<AngularJSAuthentication.DataContracts.External.OfferDc>();
            AngularJSAuthentication.DataContracts.External.OfferdataDc res;
            using (AuthContext context = new AuthContext())
            {
                CustomersManager manager = new CustomersManager();
                var query = string.Format("exec IsSalesAppLead {0}", PeopleId);
                var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                List<long> storeids = new List<long>();
                if (isSalesLead > 0)
                    storeids = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                {
                    storeids = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsDeleted == false && x.IsActive).Select(x => x.StoreId).Distinct().ToList();
                    var universalStoreIds = context.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsUniversal).Select(x => x.Id).ToList();
                    if (universalStoreIds != null && universalStoreIds.Any())
                        storeids.AddRange(universalStoreIds);
                }
                List<AngularJSAuthentication.DataContracts.Masters.BillDiscountOfferDc> billDiscountOfferDcs = manager.GetAllOfferSalesApp(WarehouseId, CustomerId, "Sales App");
                if (billDiscountOfferDcs.Any())
                {
                    billDiscountOfferDcs = billDiscountOfferDcs.Where(x => (storeids.Contains(x.StoreId) || x.StoreId == 0) && x.ApplyType != "PrimeCustomer").ToList();

                    foreach (var billDiscountOfferDc in billDiscountOfferDcs)
                    {

                        var bdcheck = new AngularJSAuthentication.DataContracts.External.OfferDc
                        {
                            OfferId = billDiscountOfferDc.OfferId,
                            MaxBillAmount = billDiscountOfferDc.MaxBillAmount,
                            OfferName = billDiscountOfferDc.OfferName,
                            OfferCode = billDiscountOfferDc.OfferCode,
                            OfferCategory = billDiscountOfferDc.OfferCategory,
                            OfferOn = billDiscountOfferDc.OfferOn,
                            start = billDiscountOfferDc.start,
                            end = billDiscountOfferDc.end,
                            DiscountPercentage = billDiscountOfferDc.DiscountPercentage,
                            BillAmount = billDiscountOfferDc.BillAmount,
                            LineItem = billDiscountOfferDc.LineItem,
                            Description = billDiscountOfferDc.Description,
                            BillDiscountOfferOn = billDiscountOfferDc.BillDiscountOfferOn,
                            BillDiscountWallet = billDiscountOfferDc.BillDiscountWallet,
                            IsMultiTimeUse = billDiscountOfferDc.IsMultiTimeUse,
                            IsUseOtherOffer = billDiscountOfferDc.IsUseOtherOffer,
                            IsScratchBDCode = billDiscountOfferDc.IsScratchBDCode,
                            BillDiscountType = billDiscountOfferDc.BillDiscountType,
                            OfferAppType = billDiscountOfferDc.OfferAppType,
                            ApplyOn = billDiscountOfferDc.ApplyOn,
                            WalletType = billDiscountOfferDc.WalletType,
                            MaxDiscount = billDiscountOfferDc.MaxDiscount,
                            IsBillDiscountFreebiesItem = billDiscountOfferDc.IsBillDiscountFreebiesItem,
                            IsBillDiscountFreebiesValue = billDiscountOfferDc.IsBillDiscountFreebiesValue,
                            offerminorderquantity = billDiscountOfferDc.offerminorderquantity,
                            offeritemname = billDiscountOfferDc.offeritemname,
                        };
                        if (billDiscountOfferDc.MaxDiscount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        else if (billDiscountOfferDc.MaxBillAmount > 0)
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxBillAmount * billDiscountOfferDc.DiscountPercentage / 100;
                        }
                        else
                        {
                            bdcheck.MaxDiscount = billDiscountOfferDc.MaxDiscount;
                        }
                        FinalBillDiscount.Add(bdcheck);
                    }
                }
                res = new DataContracts.External.OfferdataDc()
                {
                    offer = FinalBillDiscount,
                    Status = true,
                    Message = "Success"
                };
                return res;
            }

        }

        [Route("RetailerItemDetail")]
        [HttpGet]
        public async Task<ItemDataDC> RetailerItemDetail(int wareHouseId, int customerId, int itemId, string lang = "en")
        {
            List<ItemMaster> items = new List<ItemMaster>();
            using (var myContext = new AuthContext())
            {
                var ActiveCustomer = myContext.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                items = myContext.itemMasters.Where(x => x.ItemId == itemId && (x.ItemAppType == 0 || x.ItemAppType == 1) && x.active && !x.Deleted && x.WarehouseId == wareHouseId && (x.ItemAppType == 0 || x.ItemAppType == 1)).ToList();

                var retList = items.Select(a => new ItemDataDC
                {
                    WarehouseId = a.WarehouseId,
                    CompanyId = a.CompanyId,
                    ItemId = a.ItemId,
                    ItemNumber = a.Number,
                    itemname = a.itemname,
                    LogoUrl = a.LogoUrl,
                    MinOrderQty = a.MinOrderQty,
                    price = a.price,
                    TotalTaxPercentage = a.TotalTaxPercentage,
                    UnitPrice = a.UnitPrice,
                    active = a.active,
                    marginPoint = a.marginPoint,
                    NetPurchasePrice = a.NetPurchasePrice,
                    promoPerItems = a.promoPerItems,
                    IsOffer = a.IsOffer,
                    Deleted = a.Deleted,
                    OfferCategory = a.OfferCategory,
                    OfferStartTime = a.OfferStartTime,
                    OfferEndTime = a.OfferEndTime,
                    OfferQtyAvaiable = a.OfferQtyAvaiable,
                    OfferQtyConsumed = a.OfferQtyConsumed,
                    OfferId = a.OfferId,
                    OfferType = a.OfferType,
                    OfferWalletPoint = a.OfferWalletPoint,
                    OfferFreeItemId = a.OfferFreeItemId,
                    OfferPercentage = a.OfferPercentage,
                    OfferFreeItemName = a.OfferFreeItemName,
                    OfferFreeItemImage = a.OfferFreeItemImage,
                    OfferFreeItemQuantity = a.OfferFreeItemQuantity,
                    OfferMinimumQty = a.OfferMinimumQty,
                    FlashDealSpecialPrice = a.FlashDealSpecialPrice,
                    FlashDealMaxQtyPersonCanTake = a.OfferMaxQtyPersonCanTake,
                    ItemAppType = a.ItemAppType,
                }).OrderByDescending(x => x.ItemNumber).ToList();

                retList = await ItemValidate(retList, ActiveCustomer, myContext, lang);

                return retList.FirstOrDefault();
            }

        }

        public bool EnableOtherLanguage = false;
        private async Task<List<ItemDataDC>> ItemValidate(List<ItemDataDC> newdata, Customer ActiveCustomer, AuthContext db, string lang)
        {
            List<ItemDataDC> returnItems = new List<ItemDataDC>();
            if (ActiveCustomer != null && newdata.Any())
            {
                if (newdata != null && newdata.Any(s => !s.active))
                {
                    var InactiveItems = newdata.Where(s => !s.active);
                    InactiveItems = InactiveItems.GroupBy(x => x.ItemMultiMRPId).Select(x => x.FirstOrDefault()).ToList();
                    newdata = newdata.Where(s => s.active).ToList();
                    newdata.AddRange(InactiveItems);
                }
                var IsPrimeCustomer = db.PrimeCustomers.Any(x => x.CustomerId == ActiveCustomer.CustomerId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.StartDate <= indianTime && x.EndDate >= indianTime);

                DateTime CurrentDate = !IsPrimeCustomer ? indianTime.AddHours(-1 * MemberShipHours) : indianTime;
                var inActiveCustomer = ActiveCustomer != null && (ActiveCustomer.Active == false || ActiveCustomer.Deleted == true) ? true : false;
                var warehouseId = ActiveCustomer != null && ActiveCustomer.Warehouseid.HasValue ? ActiveCustomer.Warehouseid.Value : 0;


                string sqlquery = "SELECT a.[FlashDealId] AS [FlashDealId], a.[ItemId] AS [ItemId] FROM [dbo].[FlashDealItemConsumeds] AS a inner join AppHomeSectionItems c on a.FlashDealId = c.sectionItemId inner join dbo.AppHomeSections b on b.SectionID = c.apphomesections_SectionID  and b.Active=1 and b.[Deleted]=0  and b.WarehouseID=" + warehouseId +
                                     " WHERE a.[CustomerId]=" + ActiveCustomer.CustomerId;
                var FlashDealWithItemIds = db.Database.SqlQuery<FlashDealWithItem>(sqlquery).ToList();



                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = ActiveCustomer.IsKPP ? 1 : 2;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 1, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    newdata = newdata.Where(x => !(blockBarnds.Select(y => y.CatId).Contains(x.Categoryid) && blockBarnds.Select(y => y.SubCatId).Contains(x.SubCategoryId) && blockBarnds.Select(y => y.SubSubCatId).Contains(x.SubsubCategoryid))).ToList();
                }
                #endregion

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? db.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.OfferOn == "Item" && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Retailer App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
                List<ItemDataDC> freeItems = null;
                if (activeOfferids.Any() && lang.Trim() == "hi")
                {
                    var freeItemIds = newdata.Where(x => x.OfferId.HasValue && x.OfferId > 0 && activeOfferids.Contains(x.OfferId.Value)).Select(x => x.OfferFreeItemId).ToList();
                    freeItems = db.itemMasters.Where(x => freeItemIds.Contains(x.ItemId)).Select(x => new ItemDataDC
                    {
                        ItemId = x.ItemId,
                        itemname = x.itemname,
                        HindiName = x.HindiName,
                        IsSensitive = x.IsSensitive,
                        IsSensitiveMRP = x.IsSensitiveMRP,
                        price = x.price,
                        UnitofQuantity = x.UnitofQuantity,
                        UOM = x.UOM
                    }).ToList();

                    foreach (var it in freeItems)
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }
                }

                var itemMultiMRPIds = newdata.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                var PrimeItems = itemMultiMRPIds.Any() ? db.PrimeItemDetails.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId) && x.CityId == ActiveCustomer.Cityid && (x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value))).ToList() : null;

                List<ItemScheme> ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, ActiveCustomer.Warehouseid.Value, db);
                foreach (var it in newdata.Where(x => (x.ItemAppType == 0 || x.ItemAppType == 1)))
                {
                    if (PrimeItems != null && PrimeItems.Any(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.MinOrderQty == it.MinOrderQty))
                    {
                        var primeItem = PrimeItems.FirstOrDefault(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.MinOrderQty == it.MinOrderQty);
                        it.IsPrimeItem = true;
                        it.PrimePrice = primeItem.PrimePercent > 0 ? Convert.ToDecimal(it.UnitPrice - (it.UnitPrice * Convert.ToDouble(primeItem.PrimePercent) / 100)) : primeItem.PrimePrice;
                    }
                    //Condition for offer end.
                    if (!inActiveCustomer)
                    {
                        it.IsFlashDealStart = false;
                        if (it.OfferStartTime.HasValue)
                            it.NoPrimeOfferStartTime = it.OfferStartTime.Value.AddHours(MemberShipHours);
                        it.CurrentStartTime = indianTime;
                        if (IsPrimeCustomer)
                        {
                            it.IsFlashDealStart = it.OfferStartTime.Value <= indianTime;
                        }
                        else
                        {
                            it.IsFlashDealStart = it.NoPrimeOfferStartTime <= indianTime;
                        }

                        if (!(it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime))
                        {
                            if (it.OfferCategory == 2)
                            {
                                it.IsOffer = false;
                                it.FlashDealSpecialPrice = 0;
                                it.OfferCategory = 0;
                            }
                            else if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }

                        }
                        else if ((it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime) && it.OfferCategory == 2)
                        {
                            if (FlashDealWithItemIds != null && FlashDealWithItemIds.Any(x => x.ItemId == it.ItemId))
                            {
                                it.IsFlashDealUsed = true;
                            }
                        }

                        if (it.OfferCategory == 1)
                        {
                            if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            {
                                it.IsOffer = true;
                                if (freeItems != null && freeItems.Any(y => y.ItemId == it.OfferFreeItemId))
                                    it.OfferFreeItemName = freeItems.FirstOrDefault(y => y.ItemId == it.OfferFreeItemId).itemname;
                            }
                            else
                                it.IsOffer = false;
                        }
                    }
                    else
                    {
                        if (it.OfferCategory == 1)
                        {
                            if (!(it.OfferStartTime <= CurrentDate && it.OfferEndTime >= indianTime) || !(activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId)))
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }
                        else
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;

                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        var unitprice = it.UnitPrice;
                        if (it.OfferCategory == 2 && it.IsOffer && it.FlashDealSpecialPrice.HasValue && it.FlashDealSpecialPrice > 0)
                        {
                            unitprice = it.FlashDealSpecialPrice.Value;
                        }
                        if (it.price > unitprice)
                        {
                            it.marginPoint = unitprice > 0 ? (((it.price - unitprice) * 100) / unitprice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == it.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == it.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = it.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    it.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }

                        }
                        else
                        {
                            it.marginPoint = 0;
                        }

                    }
                    catch { }

                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }

                    returnItems.Add(it);
                }
            }

            if (returnItems.Any())
            {
                if (EnableOtherLanguage && !string.IsNullOrEmpty(lang) && lang.ToLower() != "hi" && lang.ToLower() != "en")
                {
                    List<DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest> ElasticLanguageDataReqests = new List<DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest>();
                    ElasticLanguageDataReqests = returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.itemBaseName }).ToList();
                    // ElasticLanguageDatas.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageData { englishtext = x.itemname }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.OfferFreeItemName }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.SellingUnitName }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.UOM }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.Scheme }).ToList());
                    ElasticLanguageDataReqests.AddRange(returnItems.Select(x => new DataContracts.ElasticLanguageSearch.ElasticLanguageDataRequest { englishtext = x.UnitofQuantity }).ToList());


                    LanguageConvertHelper LanguageConvertHelper = new LanguageConvertHelper();
                    var ElasticLanguageDatas = LanguageConvertHelper.GetConvertLanguageData(ElasticLanguageDataReqests.Distinct().ToList(), lang.ToLower());
                    returnItems.ForEach(x =>
                    {
                        x.itemBaseName = ElasticLanguageDatas.Any(y => y.englishtext == x.itemBaseName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.itemBaseName).converttext : x.itemBaseName;
                        x.itemname = ElasticLanguageDatas.Any(y => y.englishtext == x.itemBaseName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.itemBaseName).converttext : x.itemBaseName;
                        if (x.IsSensitive == true && x.IsSensitiveMRP == true)
                        {
                            x.itemname += " " + x.price + " MRP " + x.UnitofQuantity + " " + x.UOM;
                        }
                        else if (x.IsSensitive == true && x.IsSensitiveMRP == false)
                        {
                            x.itemname += " " + x.UnitofQuantity + " " + x.UOM; //item display name 
                        }

                        else if (x.IsSensitive == false && x.IsSensitiveMRP == false)
                        {
                            x.itemname = x.itemBaseName; //item display name
                        }
                        else if (x.IsSensitive == false && x.IsSensitiveMRP == true)
                        {
                            x.itemname += " " + x.price + " MRP";//item display name 
                        }

                        x.OfferFreeItemName = ElasticLanguageDatas.Any(y => y.englishtext == x.OfferFreeItemName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.OfferFreeItemName).converttext : x.OfferFreeItemName;
                        x.SellingUnitName = ElasticLanguageDatas.Any(y => y.englishtext == x.SellingUnitName) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.SellingUnitName).converttext : x.SellingUnitName;
                        x.UOM = ElasticLanguageDatas.Any(y => y.englishtext == x.UOM) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.UOM).converttext : x.UOM;
                        x.Scheme = ElasticLanguageDatas.Any(y => y.englishtext == x.Scheme) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.Scheme).converttext : x.Scheme;
                        x.UnitofQuantity = ElasticLanguageDatas.Any(y => y.englishtext == x.UnitofQuantity) ? ElasticLanguageDatas.FirstOrDefault(y => y.englishtext == x.UnitofQuantity).converttext : x.UnitofQuantity;

                    });
                }

            }

            return returnItems;
        }


        private async Task<List<ItemDataDC>> ItemAdditionalFilters(int warehouseId, List<ItemDataDC> ItemData, AuthContext context, string lang, int CustomerId)
        {
            List<ItemDataDC> ItemDataDCs = new List<ItemDataDC>();
            var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
            var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();
            var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == CustomerId && x.Active == true && x.Deleted == false);
            BackendOrderController backendOrderController = new BackendOrderController();
            foreach (var it in ItemData)
            {
                double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId,it.price,it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0,cprice);
                //Condition for offer end
                if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                {
                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }
                    else if (it.OfferCategory == 1)
                    {
                        it.IsOffer = false;
                        it.OfferCategory = 0;
                    }

                }
                else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                {
                    it.IsOffer = false;
                    it.FlashDealSpecialPrice = 0;
                    it.OfferCategory = 0;

                }

                if (it.OfferCategory == 1)
                {
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;
                }

                try
                {
                    if (!it.IsOffer)
                    {
                        /// Dream Point Logic && Margin Point
                        int? MP, PP;
                        double xPoint = xPointValue * 10;
                        //Customer (0.2 * 10=1)
                        if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                        {
                            PP = 0;
                        }
                        else
                        {
                            PP = it.promoPerItems;
                        }
                        if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                        {
                            MP = 0;
                        }
                        else
                        {
                            double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                            MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                        }
                        if (PP > 0 && MP > 0)
                        {
                            int? PP_MP = PP + MP;
                            it.dreamPoint = PP_MP;
                        }
                        else if (MP > 0)
                        {
                            it.dreamPoint = MP;
                        }
                        else if (PP > 0)
                        {
                            it.dreamPoint = PP;
                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                    }
                    else { it.dreamPoint = 0; }

                    // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                    if (it.price > it.UnitPrice)
                    {
                        it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                    }
                    else
                    {
                        it.marginPoint = 0;
                    }
                }
                catch { }

                if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                {
                    if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                    {
                        it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                    }
                    else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                    {
                        it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                    }

                    else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                    {
                        it.itemname = it.HindiName; //item display name
                    }
                    else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                    {
                        it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                    }
                }

                it.Itemtype = 1;
                ItemDataDCs.Add(it);
            }

            var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
            List<ItemScheme> ItemSchemes = new List<ItemScheme>();
            //using (var context = new AuthContext())
            //{
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);
            //}

            List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

            if (ItemDataDCs != null && ItemDataDCs.Any())
            {
                ItemMasterManager itemMasterManager = new ItemMasterManager();
                itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, ItemDataDCs.Select(s => s.ItemMultiMRPId).Distinct().ToList());

            }

            foreach (var item in ItemDataDCs)
            {
                item.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.Classification;
                item.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == item.ItemMultiMRPId)?.BackgroundRgbColor;

                if (item.price > item.UnitPrice)
                {
                    item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                    if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                    {
                        var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                        var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                        var UPMRPMargin = item.marginPoint.Value;
                        if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                            item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                    }

                }
                else
                {
                    item.marginPoint = 0;
                }
            }


            return ItemDataDCs;

        }
        [Route("UploadCustomerShopImage")]
        [HttpPost]
        [AllowAnonymous]
        public string UploadCustomerShopImage()
        {
            string LogoUrl = "";

            if (HttpContext.Current.Request.Files.AllKeys.Any())
            {
                var httpPostedFile = HttpContext.Current.Request.Files["file"];
                if (httpPostedFile != null)
                {
                    if (!Directory.Exists(HttpContext.Current.Server.MapPath("~/CustomerShopImage")))
                        Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/CustomerShopImage"));

                    string extension = Path.GetExtension(httpPostedFile.FileName);

                    string fileName = httpPostedFile.FileName.Substring(0, httpPostedFile.FileName.LastIndexOf('.')) + DateTime.Now.ToString("ddMMyyyyHHmmss") + extension;

                    LogoUrl = Path.Combine(HttpContext.Current.Server.MapPath("~/CustomerShopImage"), fileName);
                    AngularJSAuthentication.Common.Helpers.FileUploadHelper.Upload(httpPostedFile.FileName, "~/CustomerShopImage", LogoUrl);

                    httpPostedFile.SaveAs(LogoUrl);
                    LogoUrl = "/CustomerShopImage/" + fileName;
                }
            }
            return LogoUrl;
        }

        [Route("GetCategoryImageByCId")]
        public dynamic GetCategoryImageByCId(int CategoryId)
        {
            using (var db = new AuthContext())
            {
                try
                {
                    List<CategoryImage> ass = new List<CategoryImage>();
                    ass = db.CategoryImageDB.Where(c => c.CategoryId == CategoryId && c.Deleted == false && c.IsActive == true).ToList();
                    if (ass != null)
                    {
                        return ass;
                    }
                    else
                    {
                        var obj = new
                        {
                        };
                        return obj;
                    }
                }
                catch
                {
                    return null;
                }
            }
        }

        [Route("")]
        [AcceptVerbs("POST")]
        public HttpResponseMessage add(Feedback item)
        {
            logger.Info("start add RequestItem: ");
            using (AuthContext context = new AuthContext())
            {
                try
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 0, userid = 0;   // Access claims
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    item.CompanyId = compid;
                    if (item == null)
                    {
                        throw new ArgumentNullException("item");
                    }
                    logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
                    item = context.AddFeedBack(item);
                    logger.Info("End add RequestItem: ");
                    return Request.CreateResponse(HttpStatusCode.OK, item);
                }
                catch (Exception ex)
                {
                    logger.Error("Error in add RequestItem " + ex.Message);
                    logger.Info("End  RequestItem: ");
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.Message);
                }
            }
        }
        [HttpPost]
        [Route("StartUpdatePitching")]

        public HttpResponseMessage StartUpdatePitching(AgentPitchMasterDc AgentPitchMaster)
        {
            bool status = false;
            string Msg = "";
            var resultObj = new AgentPitchMasterDc();

            using (var context = new AuthContext())
            {
                if (AgentPitchMaster != null && AgentPitchMaster.ExecutiveId > 0) //&& AgentPitchMaster.CustomerId > 0
                {
                    AngularJSAuthentication.Model.Agent.AgentPitchMaster Addapm = new AngularJSAuthentication.Model.Agent.AgentPitchMaster();
                    Addapm.StartDate = AgentPitchMaster.StartDate;
                    Addapm.EndDate = indianTime;
                    Addapm.CustomerId = AgentPitchMaster.CustomerId;
                    Addapm.ExecutiveId = AgentPitchMaster.ExecutiveId;
                    Addapm.ShopImageUrl = AgentPitchMaster.ShopImageUrl;
                    Addapm.AudioUrl = AgentPitchMaster.AudioUrl;
                    Addapm.lat = AgentPitchMaster.lat;
                    Addapm.lg = AgentPitchMaster.lg;
                    Addapm.IsDeleted = false;
                    Addapm.IsActive = true;
                    Addapm.CreatedBy = AgentPitchMaster.ExecutiveId;
                    Addapm.CreatedDate = indianTime;
                    context.AgentPitchMasters.Add(Addapm);
                    if (context.Commit() > 0)
                    {
                        status = true;
                        Msg = "Successfully Started....";
                        resultObj = Mapper.Map(Addapm).ToANew<AgentPitchMasterDc>();
                    }
                    else { Msg = "Something went wrong "; }
                }
                else { Msg = "Something went wrong "; }
            }
            var res = new ResMsg()
            {
                Status = status,
                Message = Msg,
                //AgentPitchMasters = resultObj
            };
            return Request.CreateResponse(HttpStatusCode.OK, res);
        }

        [Route("")]
        [HttpPost]
        [AcceptVerbs("POST")]
        public HttpResponseMessage add(RequestItem item)
        {
            logger.Info("start add RequestItem: ");
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;   // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                item.CompanyId = compid;
                if (item == null)
                {
                    throw new ArgumentNullException("item");
                }
                logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
                using (var context = new AuthContext())
                {
                    context.AddRequestItem(item);
                }
                logger.Info("End add RequestItem: ");
                return Request.CreateResponse(HttpStatusCode.OK, item);
            }
            catch (Exception ex)
            {
                logger.Error("Error in add RequestItem " + ex.Message);
                logger.Info("End  RequestItem: ");
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.Message);
            }
        }

        #region Login via credentials
        [Route("")]
        [HttpGet]
        [AllowAnonymous]
        public HttpResponseMessage Saleslogin(string mob, string password, string FcmId, string DeviceId, string CurrentAPKversion, string PhoneOSversion, string UserDeviceName, string IMEI)
        {

            using (var db = new AuthContext())
            {
                Peopleresponse res;
                People People = new People();
                People = db.Peoples.Where(x => x.Mobile == mob && x.Active == true && x.Deleted == false).FirstOrDefault();
                if (People != null)
                {
                    if (People.Password == password)
                    {
                        List<string> FCMIds = new List<string>();
                        if (People.FcmId != FcmId)
                            FCMIds.Add(People.FcmId);

                        var registeredApk = db.GetAPKUserAndPwd("SalesApp");
                        People.RegisteredApk = registeredApk;
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + People.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = db.Database.SqlQuery<string>(query).ToList();
                        var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                        if (IsRole)
                        {
                            People.Role = "Hub sales lead";
                        }
                        else
                        {
                            People.Role = "";
                        }
                        People.FcmId = FcmId;
                        People.DeviceId = DeviceId;
                        People.CurrentAPKversion = CurrentAPKversion;   //tejas for device info 
                        People.PhoneOSversion = PhoneOSversion;
                        People.UserDeviceName = UserDeviceName;
                        People.IMEI = IMEI;
                        People.UpdatedDate = DateTime.Now;
                        db.Entry(People).State = EntityState.Modified;
                        #region Device History
                        PhoneRecordHistory phonerecord = new PhoneRecordHistory();
                        phonerecord.PeopleID = People.PeopleID;
                        phonerecord.PeopleFirstName = People.PeopleFirstName;
                        phonerecord.Department = People.Department;
                        phonerecord.Mobile = People.Mobile;
                        phonerecord.CurrentAPKversion = People.CurrentAPKversion;
                        phonerecord.IMEI = People.IMEI;
                        phonerecord.PhoneOSversion = People.PhoneOSversion;
                        phonerecord.UserDeviceName = People.UserDeviceName;
                        phonerecord.UpdatedDate = DateTime.Now;
                        db.PhoneRecordHistoryDB.Add(phonerecord);
                        int id = db.Commit();
                        #endregion



                        if (FCMIds.Any())
                        {
                            string Key = ConfigurationManager.AppSettings["SalesFcmApiKey"];
                            //var objNotificationList = FCMIds.Distinct().Select(x => new
                            //{
                            //    to = x,
                            //    PeopleId = People.PeopleID,
                            //    data = new
                            //    {
                            //        title = "",
                            //        body = "",
                            //        icon = "",
                            //        typeId = "",
                            //        notificationCategory = "",
                            //        notificationType = "",
                            //        notificationId = "",
                            //        notify_type = "logout",
                            //        url = "",
                            //    }
                            //}).ToList();
                            var data = new FCMData
                            {
                                title = "",
                                body = "",
                                icon = "",
                                notificationCategory = "",
                                notificationType = "",
                                notify_type = "logout",
                                url = "",
                            };
                            ConcurrentBag<ManualAutoNotification> AutoNotifications = new ConcurrentBag<ManualAutoNotification>();
                            MongoDbHelper<ManualAutoNotification> AutoNotificationmongoDbHelper = new MongoDbHelper<ManualAutoNotification>();
                            ParallelLoopResult parellelResult = Parallel.ForEach(FCMIds.Distinct(), (x) =>
                            {
                                var AutoNotification = new ManualAutoNotification
                                {
                                    CreatedDate = DateTime.Now,
                                    FcmKey = Key,
                                    IsActive = true,
                                    IsSent = false,
                                    NotificationMsg = Newtonsoft.Json.JsonConvert.SerializeObject(data),
                                    ObjectId = People.PeopleID,
                                    ObjectType = "People"
                                };
                                try
                                {
                                    var firebaseService = new FirebaseNotificationServiceHelper(Key);
                                    //var fcmid = "fZGIeP5dTKGd-2JBZttcDj:APA91bGINtqXqKuCcEHd4qXZMN-VtX5KC2g98KkytmGdpc28_-duDu8Ry1P6Kk_Xb9RgRG0iDWrp8DkwE1EPCOPG0OLz2uRjo-HBg-Ysg-mDaMErlYLjJGZE7ScXKIkjmWZ0xNO6UyxN";
                                    var result = firebaseService.SendNotificationForApprovalAsync(x, data);
                                    if (result != null)
                                    {
                                        AutoNotification.IsSent = true;
                                    }
                                    else
                                    {
                                        AutoNotification.IsSent = false;
                                    }
                                    //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                                    //tRequest.Method = "post";
                                    //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(x);
                                    //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                                    //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                                    //tRequest.ContentLength = byteArray.Length;
                                    //tRequest.ContentType = "application/json";
                                    //using (Stream dataStream = tRequest.GetRequestStream())
                                    //{
                                    //    dataStream.Write(byteArray, 0, byteArray.Length);
                                    //    using (WebResponse tResponse = tRequest.GetResponse())
                                    //    {
                                    //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                                    //        {
                                    //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                                    //            {
                                    //                String responseFromFirebaseServer = tReader.ReadToEnd();
                                    //                AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<AngularJSAuthentication.API.Controllers.NotificationController.FCMResponse>(responseFromFirebaseServer);
                                    //                if (response.success == 1)
                                    //                {
                                    //                    AutoNotification.IsSent = true;
                                    //                }
                                    //                else if (response.failure == 1)
                                    //                {
                                    //                    AutoNotification.IsSent = false;
                                    //                }
                                    //            }
                                    //        }
                                    //    }
                                    //}
                                }
                                catch (Exception asd)
                                {
                                    AutoNotification.IsSent = false;
                                    logger.Error(new StringBuilder("Error while sending FCM for type: ").Append(data.notify_type).Append(asd.ToString()).ToString());
                                }
                            });
                            if (parellelResult.IsCompleted && AutoNotifications != null && AutoNotifications.Any())
                            {
                                var autoNot = AutoNotifications.ToList();
                                AutoNotificationmongoDbHelper.InsertMany(autoNot);
                            }
                        }

                        res = new Peopleresponse
                        {
                            people = People,
                            Status = true,
                            message = "Success."

                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        res = new Peopleresponse
                        {
                            people = null,
                            Status = false,
                            message = "Wrong Password."

                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
                else
                {
                    res = new Peopleresponse
                    {
                        people = null,
                        Status = false,
                        message = "Record not found."
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, res);
                }
            }
        }
        #endregion

        [Route("ViaOtp")]
        [HttpPost]
        [AllowAnonymous]
        public HttpResponseMessage SalesAppLoginByotpV2(People customer)
        {
            using (AuthContext db = new AuthContext())
            {

                SalesDTO res;
                string error = "";
                People People = new People();
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + customer.Mobile + "' and r.Name='Sales Executive' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                People = db.Database.SqlQuery<People>(query).FirstOrDefault();
                //People = db.Peoples.Where(x => x.Mobile == customer.Mobile && x.Department == "Sales Executive" && x.Deleted == false && x.Active == true).FirstOrDefault();
                try
                {
                    if (People == null)
                    {
                        res = new SalesDTO()
                        {
                            P = null,
                            Status = false,
                            Message = "Not a Registered Sales Executive"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        using (var context = new AuthContext())
                            try
                            {
                                string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
                                string sRandomOTP = GenerateRandomOTP(4, saAllowedCharacters);
                                // string OtpMessage = " is Your login Code. :). ShopKirana";
                                string OtpMessage = ""; //"{#var1#} is Your login Code. {#var2#}. ShopKirana";
                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "Login_Code");
                                OtpMessage = dltSMS == null ? "" : dltSMS.Template;
                                OtpMessage = OtpMessage.Replace("{#var1#}", sRandomOTP);
                                OtpMessage = OtpMessage.Replace("{#var2#}", ":)");



                                //string CountryCode = "91";
                                //string Sender = "SHOPKR";
                                //string authkey = Startup.smsauthKey; //"100498AhbWDYbtJT56af33e3";
                                //int route = 4;
                                //string path = "http://bulksms.newrise.in/api/sendhttp.php?authkey=" + authkey + "&mobiles=" + People.Mobile + "&message=" + sRandomOTP + " :" + OtpMessage + " &sender=" + Sender + "&route=" + route + "&country=" + CountryCode;

                                ////string path ="http://bulksms.newrise.in/api/sendhttp.php?authkey=100498AhbWDYbtJT56af33e3&mobiles=9770838685&message= SK OTP is : " + sRandomOTP + " &sender=SHOPKR&route=4&country=91";

                                //var webRequest = (HttpWebRequest)WebRequest.Create(path);
                                //webRequest.Method = "GET";
                                //webRequest.ContentType = "application/json";
                                //webRequest.UserAgent = "Mozilla/5.0 (Windows NT 5.1; rv:28.0) Gecko/20100101 Firefox/28.0";
                                //webRequest.ContentLength = 0; // added per comment 
                                //webRequest.Credentials = CredentialCache.DefaultCredentials;
                                //webRequest.Accept = "*/*";
                                //var webResponse = (HttpWebResponse)webRequest.GetResponse();
                                bool result = dltSMS == null ? false : Common.Helpers.SendSMSHelper.SendSMS(People.Mobile, (sRandomOTP + " :" + OtpMessage), ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString(), dltSMS.DLTId);
                                if (!result)
                                {
                                    logger.Info("OTP Genrated: " + sRandomOTP);
                                }
                                else
                                {
                                    logger.Info("OTP Genrated: " + sRandomOTP);

                                    var check = context.CheckPeopleSalesPersonData(customer.Mobile);
                                    check.OTP = sRandomOTP;
                                    if (check != null)
                                    {
                                        res = new SalesDTO
                                        {

                                            P = new People { OTP = sRandomOTP },
                                            Status = true,
                                            Message = "Success."

                                        };
                                        return Request.CreateResponse(HttpStatusCode.OK, res);
                                    }
                                    else
                                    {
                                        res = new SalesDTO
                                        {
                                            P = null,
                                            Status = false,
                                            Message = "Not Success"

                                        };
                                        return Request.CreateResponse(HttpStatusCode.OK, res);
                                    }
                                }
                            }
                            catch (Exception sdf)
                            {
                                res = new SalesDTO
                                {
                                    P = null,
                                    Status = false,
                                    Message = "Not Success"

                                };
                                return Request.CreateResponse(HttpStatusCode.OK, res);
                            }
                    }
                }
                catch (Exception es)
                {
                    error = error + es;
                }
                res = new SalesDTO()
                {
                    P = null,
                    Status = false,
                    Message = ("This is something went wrong Sales Executive : " + error)
                };
                return Request.CreateResponse(HttpStatusCode.OK, res);
            }
        }

        [Route("GSTVerify")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<dynamic> GetCustomerGSTVerify(string GSTNO)
        {

            string path = ConfigurationManager.AppSettings["GetCustomerGstUrl"];
            path = path.Replace("[[GstNo]]", GSTNO);
            var gst = new CustomerGst();

            using (GenericRestHttpClient<CustomerGst, string> memberClient
                   = new GenericRestHttpClient<CustomerGst, string>(path,
                   string.Empty, null))
            {
                try
                {
                    gst = await memberClient.GetAsync();
                }
                catch (Exception ex)
                {
                    TextFileLogHelper.LogError("GST API error: " + ex.ToString());
                    gst.error = true;
                }

                if (gst.error == false)
                {
                    using (AuthContext db = new AuthContext())
                    {
                        CustGSTverifiedRequest GSTdata = new CustGSTverifiedRequest();
                        GSTdata.RequestPath = path;
                        GSTdata.RefNo = gst.taxpayerInfo.gstin;
                        GSTdata.Name = gst.taxpayerInfo.lgnm;
                        GSTdata.ShopName = gst.taxpayerInfo.tradeNam;
                        GSTdata.Active = gst.taxpayerInfo.sts;
                        GSTdata.ShippingAddress = gst.taxpayerInfo.pradr?.addr?.st;
                        GSTdata.State = gst.taxpayerInfo.pradr?.addr?.stcd;
                        GSTdata.City = gst.taxpayerInfo.pradr?.addr?.loc;
                        GSTdata.lat = gst.taxpayerInfo.pradr?.addr?.lt;
                        GSTdata.lg = gst.taxpayerInfo.pradr?.addr?.lg;
                        GSTdata.Zipcode = gst.taxpayerInfo.pradr?.addr?.pncd;
                        GSTdata.RegisterDate = gst.taxpayerInfo.rgdt;
                        GSTdata.LastUpdate = gst.taxpayerInfo.lstupdt;
                        GSTdata.HomeName = gst.taxpayerInfo.pradr?.addr?.bnm;
                        GSTdata.HomeNo = gst.taxpayerInfo.pradr?.addr?.bno;
                        GSTdata.CustomerBusiness = gst.taxpayerInfo.nba != null && gst.taxpayerInfo.nba.Any() ? gst.taxpayerInfo.nba[0] : "";
                        GSTdata.Citycode = gst.taxpayerInfo.ctjCd;
                        GSTdata.PlotNo = gst.taxpayerInfo.pradr?.addr?.flno;
                        GSTdata.Message = gst.error;
                        GSTdata.UpdateDate = DateTime.Now;
                        GSTdata.CreateDate = DateTime.Now;
                        GSTdata.Delete = false;
                        db.CustGSTverifiedRequestDB.Add(GSTdata);
                        db.Commit();
                        if (!string.IsNullOrEmpty(GSTdata.City) && !string.IsNullOrEmpty(GSTdata.State))
                        {
                            Managers.CustomerAddressRequestManager manager = new Managers.CustomerAddressRequestManager();
                            manager.AddGSTCityAndState(GSTdata.City, GSTdata.Zipcode, GSTdata.State, GSTdata.RefNo.Substring(0, 2), db);
                        }

                        CustomerGSTVerify cust = new CustomerGSTVerify()
                        {
                            id = GSTdata.GSTVerifiedRequestId,
                            RefNo = gst.taxpayerInfo.gstin,
                            Name = gst.taxpayerInfo.lgnm,
                            ShopName = gst.taxpayerInfo.tradeNam,
                            ShippingAddress = string.Format("{0}, {1}, {2}, {3}, {4}-{5}", GSTdata.HomeNo, GSTdata.HomeName, GSTdata.ShippingAddress, GSTdata.City, GSTdata.State, GSTdata.Zipcode),
                            State = gst.taxpayerInfo.pradr?.addr?.stcd,
                            City = gst.taxpayerInfo.pradr?.addr?.loc,
                            Active = gst.taxpayerInfo.sts,
                            lat = gst.taxpayerInfo.pradr?.addr?.lt,
                            lg = gst.taxpayerInfo.pradr?.addr?.lg,
                            Zipcode = gst.taxpayerInfo.pradr?.addr?.pncd
                        };

                        if (cust.Active == "Active")
                        {
                            custDTOList Custlist = new custDTOList()
                            {
                                custverify = cust,
                                Status = true,
                                Message = "Customer GST Number Is Verify Successfully."
                            };
                            return Custlist;
                        }
                        else
                        {
                            custDTOList Custlist = new custDTOList()
                            {
                                custverify = cust,
                                Status = true,
                                Message = "Customer GST Number Is " + cust.Active
                            };

                            return Custlist;
                        }



                    }
                }

                else
                {
                    custDTOList Custlist = new custDTOList()
                    {
                        custverify = null,
                        Status = false,
                        Message = "Customer GST Number not valid."
                    };
                    return Custlist;
                }
            }

        }
        [Route("")]
        public HttpResponseMessage Get()
        {
            logger.Info("start WalletList: ");
            using (AuthContext context = new AuthContext())
            {
                try
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int compid = 0, userid = 0;
                    int Warehouse_id = 0;

                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "compid")
                        {
                            compid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                        if (claim.Type == "Warehouseid")
                        {
                            Warehouse_id = int.Parse(claim.Value);
                        }
                    }
                    var pointList = (from i in context.WalletDb
                                     where i.Deleted == false
                                     join j in context.Customers on i.CustomerId equals j.CustomerId
                                     join k in context.Warehouses on j.Warehouseid equals k.WarehouseId into ts
                                     from k in ts.DefaultIfEmpty()
                                     select new
                                     {
                                         Id = i.Id,
                                         CustomerId = i.CustomerId,
                                         TotalAmount = i.TotalAmount,
                                         CreatedDate = i.CreatedDate,
                                         TransactionDate = i.TransactionDate,
                                         UpdatedDate = i.UpdatedDate,
                                         Skcode = j.Skcode,
                                         ShopName = j.ShopName,
                                         WarehouseName = k.WarehouseName,
                                         WarehouseId = j.Warehouseid,
                                         City = k.CityName
                                     }).ToList();
                    logger.Info("End  wallet: ");
                    return Request.CreateResponse(HttpStatusCode.OK, pointList);


                }
                catch (Exception ex)
                {
                    logger.Error("Error in WalletList " + ex.Message);
                    logger.Info("End  WalletList: ");
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.Message); ;
                }
            }
        }

        [Route("GetCompanyDetailsForRetailer")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<companydetails> GetCompanyDetailsForRetailer()
        {
            string FinBoxApiClientKey = ConfigurationManager.AppSettings["FinBoxClientKey"].ToString();
            long LogDboyLoctionMeter = Common.Constants.AppConstants.LogDboyLoctionMeter;
            var loggedInUser = HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null ? HttpContext.Current.User.Identity.Name : "System";
            int customerId = 0, WarehouseId = 0, cityId = 0;
            bool IsKpp = false;
            bool IsSalesMan = false;

            if ((string.IsNullOrEmpty(loggedInUser) || loggedInUser == "RetailerApp")
                && HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Request.Headers.AllKeys.Any(x => x == "username"))
            {
                loggedInUser = Convert.ToString(HttpContext.Current.Request.Headers.GetValues("username").FirstOrDefault());

                customerId = loggedInUser.Split('_').Length > 1 ? Convert.ToInt32(loggedInUser.Split('_')[1]) : 0;
            }
            else
            {
                IsSalesMan = true;
            }
            companydetails res;
            bool IsActive = true;
            using (AuthContext db = new AuthContext())
            {
                if (customerId > 0)
                {
                    var customer = db.Customers.FirstOrDefault(x => x.CustomerId == customerId);
                    IsActive = customer.Active;
                    IsKpp = customer.IsKPP;
                    WarehouseId = customer.Warehouseid.HasValue ? customer.Warehouseid.Value : 0;
                    if (WarehouseId > 0)
                    {
                        cityId = db.Warehouses.FirstOrDefault(x => x.WarehouseId == WarehouseId).Cityid;
                    }
                }
                var companydetails = db.CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                if (companydetails != null)
                {
                    var query = "select  Operation.IsNewDeliveryAppOnCluster(" + customerId + ") ";

                    companydetails.ShowOrderTracking = db.Database.SqlQuery<bool>(query).FirstOrDefault();

                    if (WarehouseId > 0)
                    {
                        MongoDbHelper<SalesAppDefaultCustomers> SalesAppmongoDbHelper = new MongoDbHelper<SalesAppDefaultCustomers>();
                        var defaultCustomer = SalesAppmongoDbHelper.Select(x => x.WarehouseId == WarehouseId).FirstOrDefault();
                        if (defaultCustomer != null)
                        {
                            companydetails.DefaultSalesSCcustomerId = defaultCustomer.CustomerId;
                        }

                    }
                    if (cityId > 0)
                    {
                        MongoDbHelper<ExtandedCompanyDetail> mongoDbHelper = new MongoDbHelper<ExtandedCompanyDetail>();
                        var extandedCompanyDetail = mongoDbHelper.Select(x => x.CityId == cityId && x.AppType == "Retailer").FirstOrDefault();

                        if (extandedCompanyDetail != null)
                        {
                            companydetails.IsShowCreditOption = extandedCompanyDetail.IsShowCreditOption;
                            companydetails.IsOnlinePayment = extandedCompanyDetail.IsOnlinePayment;
                            companydetails.ischeckBookShow = extandedCompanyDetail.ischeckBookShow;
                            companydetails.IsRazorpayEnable = extandedCompanyDetail.IsRazorpayEnable;
                            companydetails.IsePayLaterShow = extandedCompanyDetail.IsePayLaterShow;
                            companydetails.IsFinBox = extandedCompanyDetail.IsFinBox;
                            companydetails.IsCreditLineShow = extandedCompanyDetail.IsCreditLineShow;
                        }
                    }

                    companydetails.FinboxclientApikey = FinBoxApiClientKey;

                    MongoDbHelper<VATMCustomers> VATMCustomershelper = new MongoDbHelper<VATMCustomers>();
                    var vATMCustomer = VATMCustomershelper.Select(x => x.CustomerId == customerId && x.IsActive).FirstOrDefault();

                    if (vATMCustomer != null && !string.IsNullOrEmpty(vATMCustomer.Data))
                    {
                        companydetails.IsShowVATM = true;
                    }
                    if (IsKpp)
                    {

                        double IsKPPMaxWalletPointUsed = Convert.ToDouble(ConfigurationManager.AppSettings["IsKPPMaxWalletPointUsed"]);
                        if (IsKPPMaxWalletPointUsed > 0)
                        {
                            companydetails.MaxWalletPointUsed = IsKPPMaxWalletPointUsed;
                        }
                        else
                        {
                            companydetails.MaxWalletPointUsed = 8000;
                        }
                        companydetails.ischeckBookShow = false;
                        companydetails.IsShowCreditOption = false;
                        companydetails.IsePayLaterShow = false;

                    }


                    if (!IsActive)
                    {
                        companydetails.IsShowCreditOption = false;
                        companydetails.IsOnlinePayment = false;
                        companydetails.ischeckBookShow = false;
                        companydetails.IsRazorpayEnable = false;
                        companydetails.IsePayLaterShow = false;
                        companydetails.IsFinBox = false;
                        companydetails.IsCreditLineShow = false;

                    }
                    if (LogDboyLoctionMeter > 0)
                    {
                        companydetails.LogDboyLoctionMeter = LogDboyLoctionMeter;
                    }
                    if (IsSalesMan)
                    {
                        companydetails.MaxWalletPointUsed = 0;
                    }


                    res = new companydetails
                    {
                        CompanyDetails = companydetails,
                        Status = true,
                        Message = "GetCompanyDetailsForRetailer"
                    };
                    return res;
                }
                else
                {
                    res = new companydetails
                    {
                        Status = false,
                        Message = "Something went Wrong"
                    };
                    return res;
                }
            }
        }

        [Route("GetCompanyWheelConfig")]
        [HttpGet]
        public async Task<CompnayWheelConfigDc> GetCompanyWheelConfig(int WarehouseId)
        {
            CompnayWheelConfigDc compnayWheelConfigDc = new CompnayWheelConfigDc();
            using (var context = new AuthContext())
            {
                var wheelConfig = await context.CompanyWheelConfiguration.FirstOrDefaultAsync();
                if (wheelConfig != null)
                {
                    compnayWheelConfigDc.OrderAmount = wheelConfig.OrderAmount;
                    compnayWheelConfigDc.LineItemCount = wheelConfig.LineItemCount;
                    compnayWheelConfigDc.IsKPPRequiredWheel = wheelConfig.IsKPPRequiredWheel;
                }
            }
            return compnayWheelConfigDc;
        }

        [Route("")]
        [AcceptVerbs("PUT")]
        public Customer Put(Customer cust)
        {
            using (AuthContext context = new AuthContext())
            {
                try
                {
                    return context.CustomerUpdate(cust);
                }
                catch (Exception ex)
                {
                    return null;
                }
            }
        }
        #endregion

        [Route("GetProductPerformance")]
        [HttpPost]
        [AllowAnonymous]
        public List<PerformanceDc> GetProductPerformance(ProductPerformanceFilter p)
        {
            int Skiplist = (p.Skip - 1) * p.Take;
            using (var context = new AuthContext())
            {
                //ProductPerformanceDC beat = new ProductPerformanceDC();
                List<PerformanceDc> list = new List<PerformanceDc>();

                var param1 = new SqlParameter("@clusterId", p.clusterId);
                var param2 = new SqlParameter("@PeopleId", p.peopleid);
                var param3 = new SqlParameter("@FromDate", p.FromDate);
                var param4 = new SqlParameter("@ToDate", p.Todate);
                var param5 = new SqlParameter("@Flag", p.Flag);
                var param6 = new SqlParameter("@ObjectId", p.ObjectId);
                var param7 = new SqlParameter("@Skip", Skiplist);
                var param8 = new SqlParameter("@Take", p.Take);
                var param9 = new SqlParameter("@WarehouseId", p.WarehouseId);
                var ProductPerformanceData = context.Database.SqlQuery<PerformanceDc>("exec SpProductPerformance @clusterId,@PeopleId,@FromDate,@ToDate,@Flag,@ObjectId,@Skip,@Take,@WarehouseId", param1, param2, param3, param4, param5, param6, param7, param8, param9).ToList();

                return ProductPerformanceData;
            }
        }

        [Route("GetFocusBrand")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<FocusBrandDC>> GetFocusBrand(int warehouseid, int PeopleId)
        {
            List<FocusBrandDC> list = new List<FocusBrandDC>();
            // List<int> CustomerList = new List<int>();

            using (var authContext = new AuthContext())
            {
                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();


                var param1 = new SqlParameter("warehouseid", warehouseid);
                var param2 = new SqlParameter("peopleid", PeopleId);

                var cmd = authContext.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[SpFocusBrand]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext).ObjectContext.Translate<FocusBrandDC>(reader).ToList();
            }

            return list;
        }

        [Route("GetSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<SKUItemListDC> GetSKUItemList(int StoreId, int warehouseid, string KeyValue)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@StoreId", StoreId);
                var param2 = new SqlParameter("@warehouseid", warehouseid);
                var param3 = new SqlParameter("@KeyValue", KeyValue);
                var SKUItemListData = context.Database.SqlQuery<SKUItemListDC>("exec SpSKUItemList @StoreId,@warehouseid,@KeyValue", param1, param2, param3).ToList();
                return SKUItemListData;
            }
        }
        [Route("GetPromotionalSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<PromotionalSKUItemListDC> GetSKUItemList(int warehouseid, string KeyValue)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@warehouseid", warehouseid);
                var param2 = new SqlParameter("@KeyValue", KeyValue);
                var SKUItemListData = context.Database.SqlQuery<PromotionalSKUItemListDC>("exec SpPromotionalSKUItemList @warehouseid,@KeyValue", param1, param2).ToList();
                return SKUItemListData;
            }
        }

        [Route("GetSalesGroup")]
        [HttpGet]
        [AllowAnonymous]
        public List<StoreDC> GetSalesGroup(int peopleid)
        {
            using (var context = new AuthContext())
            {
                context.Database.CommandTimeout = 120;
                List<GroupList> list = new List<GroupList>();
                var Stores = context.StoreDB.Where(x => x.IsActive && (x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => new { x.Id, x.Name }).ToList();
                var clusterstores = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleid && x.IsDeleted == false && x.IsActive == true);
                List<long> storeIds = clusterstores.Any() ? clusterstores.Select(x => x.StoreId).ToList() : new List<long>();
                List<int> clusterIds = clusterstores.Any() ? clusterstores.Select(x => x.ClusterId).ToList() : new List<int>();
                var clusterCustomerIds = clusterstores.Any() ? context.Customers.Where(x => x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value)).Select(x => x.CustomerId).ToList() : new List<int>();
                var grouplist = (from u in context.SalesGroupDb
                                 where u.CreatedBy == peopleid && u.IsActive == true && u.IsDeleted == false && u.Type == "Yes"
                                 select new { u.GroupName, u.Id, u.StoreId })
                      .Union(from u in context.SalesGroupDb
                             where (storeIds.Contains(u.StoreId) || u.StoreId == 0) && u.IsActive == true && u.IsDeleted == false && u.Type == "Yes"
                             select new { u.GroupName, u.Id, u.StoreId }).ToList();

                foreach (var item in grouplist)
                {
                    GroupList addlist = new GroupList();
                    //var List = context.SalesGroupCustomerDb.Where(x => clusterCustomerIds.Contains(x.CustomerID) && x.GroupId == item.Id && x.IsActive == true && x.IsDeleted == false).ToList();

                    var param1 = new SqlParameter("GroupId", item.Id);
                    var param2 = new SqlParameter("ExecutiveId", peopleid);
                    var List = context.Database.SqlQuery<long>("exec CheckCustomerInSalesGroup  @GroupId, @ExecutiveId", param1, param2).ToList();

                    if (List != null && List.Any())
                    {
                        addlist.GroupName = item.GroupName;
                        addlist.Id = item.Id;
                        addlist.StoreId = item.StoreId;
                        list.Add(addlist);
                    }
                }

                var SalesGroupDatalist = list.GroupBy(x => x.StoreId).Select(x =>
                 new StoreDC
                 {
                     StoreId = (int)x.Key,
                     GroupDcs = x.Select(y => new GroupDc
                     {
                         GroupName = y.GroupName,
                         GroupId = y.Id
                     }).ToList()
                 }
               ).ToList();
                foreach (var G in SalesGroupDatalist)
                {
                    if (G.StoreId == 0)
                    {
                        G.StoreName = "SK GROUP";
                    }
                    else if (G.StoreId == -1)
                    {
                        G.StoreName = "MY GROUP";
                    }
                    else
                    {
                        G.StoreName = Stores.FirstOrDefault(a => a.Id == G.StoreId)?.Name;
                    }
                }
                return SalesGroupDatalist;
            }
        }

        [Route("GetMySalesGroup")]
        [HttpGet]
        [AllowAnonymous]
        public List<SalesMyGroupDC> GetMySalesGroup(int peopleid)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@peopleid", peopleid);
                var GetMySalesGroupData = context.Database.SqlQuery<SalesMyGroupDC>("exec SpGetMySalesGroup @peopleid", param1).ToList();
                return GetMySalesGroupData;
            }
        }

        //[Route("GetSalesGroupCustomer")]
        //[HttpGet]
        //[AllowAnonymous]
        //public List<SalesGroupCustomerDC> GetSalesGroupCustomer(int groupid)
        //{
        //    using (var context = new AuthContext())
        //    {

        //        var param1 = new SqlParameter("@groupid", groupid);



        //        var GetSalesGroupCustomerData = context.Database.SqlQuery<SalesGroupCustomerDC>("exec SpGetSalesGroupCustomer @groupid", param1).ToList();

        //        return GetSalesGroupCustomerData;
        //    }
        //}

        [Route("GetTopHighMarginSkuItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<GetTopHighMarginSkuItemListDC> GetTopHighMarginSkuItemList(int PeopleId, int WarehouseId)
        {
            using (var context = new AuthContext())
            {
                var param1 = new SqlParameter("@peopleid", PeopleId);
                var param2 = new SqlParameter("@warehouseid", WarehouseId);
                var GetTopHighMarginSkuItemListData = context.Database.SqlQuery<GetTopHighMarginSkuItemListDC>("exec GetTopHighMarginSkuItemList  @peopleid,@warehouseid", param1, param2).ToList();

                return GetTopHighMarginSkuItemListData;
            }
        }

        [Route("InsertTopHighMarginSKUItemList")]
        [HttpPost]
        [AllowAnonymous]
        public IHttpActionResult InsertTopHighMarginSKUItem(InsertTopSkUItems insertTopSkUItems)
        {
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (var dbtransaction = context.Database.BeginTransaction())
                {
                    foreach (var m in insertTopSkUItems.topSKUsItemDcs)
                    {
                        //* var item = context.TopSKUsItems.FirstOrDefault(x => x.ItemId == m.ItemId && x.StoreId == m.StoreId && x.Wa*/rehouseId == m.WarehouseId && x.IsActive == true && x.IsDeleted == false);
                        m.StoreId = insertTopSkUItems.IsPromotional ? 0 : m.StoreId;
                        var item = context.TopSKUsItems.Where(x => x.StoreId == m.StoreId && x.WarehouseId == m.WarehouseId && x.IsActive == true && x.IsDeleted == false).ToList();

                        context.TopSKUsItems.RemoveRange(item);

                        TopSKUsItem obj = new TopSKUsItem();
                        obj.ItemId = m.ItemId;
                        obj.itemName = m.itemName;
                        obj.Margin = m.Margin;
                        obj.UnitPrice = m.UnitPrice;
                        obj.StoreId = insertTopSkUItems.IsPromotional ? 0 : m.StoreId;
                        obj.WarehouseId = m.WarehouseId;
                        obj.CreatedBy = userid;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsActive = true;
                        obj.IsDeleted = false;
                        obj.SequenceNo = m.SequenceNo;
                        obj.IsPromotional = insertTopSkUItems.IsPromotional ? true : false;
                        context.TopSKUsItems.Add(obj);
                    }
                    if (context.Commit() > 0)
                    {
                        dbtransaction.Commit();
                    }
                }
                return Created("Ok", "OK");
            }
        }

        [Route("GetSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<TopSKUsItemDc> TopSKUItemList(int warehouseid, int storeid) //7,9,12
        {
            List<TopSKUsItemDc> List = new List<TopSKUsItemDc>();
            using (var context = new AuthContext())
            {
                var res = context.TopSKUsItems.Where(x => x.IsActive == true && x.IsDeleted == false && x.WarehouseId == warehouseid && x.StoreId == storeid).ToList();

                List = Mapper.Map(res).ToANew<List<TopSKUsItemDc>>();
                var wids = List.Select(x => x.WarehouseId).Distinct().ToList();
                var warehouselist = context.Warehouses.Where(x => wids.Contains(x.WarehouseId)).ToList();

                List.ForEach(y =>
                {
                    y.WarehouseName = warehouselist.Where(x => x.WarehouseId == y.WarehouseId).Select(x => x.WarehouseName).FirstOrDefault();
                });

                return List.OrderBy(x => x.SequenceNo).ToList();
            }
        }
        [Route("GetPromotionalSKUItemList")]
        [HttpGet]
        [AllowAnonymous]
        public List<TopPromotionalSKUsItemDc> TopPromotionalSKUItemList(int warehouseid) //7,9,12
        {
            List<TopPromotionalSKUsItemDc> List = new List<TopPromotionalSKUsItemDc>();
            using (var context = new AuthContext())
            {
                var res = context.TopSKUsItems.Where(x => x.IsDeleted == false && x.WarehouseId == warehouseid && x.IsPromotional == true).ToList();

                List = Mapper.Map(res).ToANew<List<TopPromotionalSKUsItemDc>>();
                var wids = List.Select(x => x.WarehouseId).Distinct().ToList();
                var warehouselist = context.Warehouses.Where(x => wids.Contains(x.WarehouseId)).ToList();

                List.ForEach(y =>
                {
                    y.WarehouseName = warehouselist.Where(x => x.WarehouseId == y.WarehouseId).Select(x => x.WarehouseName).FirstOrDefault();
                });

                return List.OrderBy(x => x.SequenceNo).ToList();
            }
        }

        [Route("RemoveSKUItemList")]
        [HttpDelete]
        [AllowAnonymous]
        public bool RemoveSkuItems(int id)
        {
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                // Access claims
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                if (id != 0)
                {
                    var data = context.TopSKUsItems.FirstOrDefault(x => x.Id == id && x.IsActive == true && x.IsDeleted == false);
                    if (data != null)
                    {
                        data.IsActive = false;
                        data.IsDeleted = true;
                        data.ModifiedDate = DateTime.Now;
                        data.ModifiedBy = userid;
                        context.Entry(data).State = EntityState.Modified;
                        context.Commit();
                        return true;
                    }
                    else
                        return false;
                }
            }
            return true;
        }

        [Route("GetGroupMetricsOld")]
        [HttpPost]
        [AllowAnonymous]
        public SalesGroupMatrixDC GetGroupMetricsOld(GroupMetricsDTOdc obj)
        {
            using (var myContext = new AuthContext())
            {
                SalesGroupMatrixDC list = new SalesGroupMatrixDC();
                SalesAppManager salesAppManager = new SalesAppManager();
                var data = salesAppManager.SalesGroupMatrix(obj.CustomerId, obj.PeopleId, obj.flag, obj.warehouseid);

                BeatCustomersCRMDc Customer = new BeatCustomersCRMDc();
                bool IsLevelAdded = false;
                var param1 = new SqlParameter("@customerid", obj.CustomerId);
                var OrdersList = myContext.Database.SqlQuery<CRMLevelBeatCustomerDc>("exec CRMLevelBeatCustomer @customerid", param1).FirstOrDefault();
                Customer = Mapper.Map(OrdersList).ToANew<BeatCustomersCRMDc>();

                if (Customer != null)
                {
                    if (Customer.OrderCount >= 12 && Customer.Volume >= 75000 && Customer.BrandCount >= 40 && Customer.KKvolume >= 15000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 60)
                    {
                        Customer.Level = 5;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 8 && Customer.Volume >= 30000 && Customer.BrandCount >= 20 && Customer.KKvolume >= 8000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 30)
                    {
                        Customer.Level = 4;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 5 && Customer.Volume >= 20000 && Customer.BrandCount >= 10 && Customer.KKvolume >= 2000)
                    {
                        Customer.Level = 3;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 3 && Customer.Volume >= 10000 && Customer.BrandCount >= 5)
                    {
                        Customer.Level = 2;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount > 0)
                    {
                        Customer.Level = 1;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount == 0)
                    {
                        Customer.Level = 0;
                        IsLevelAdded = true;
                    }
                    else
                    {
                        if (!IsLevelAdded)
                        {
                            Customer.Level = -0;
                        }
                    }
                }
                data.Level = Customer.Level;
                return data;
            }
        }

        [Route("GetGroupMetrics")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<SalesGroupMatrixDC> GetGroupMetrics(GroupMetricsDTOdc obj)
        {
            using (var myContext = new AuthContext())
            {
                SalesGroupMatrixDC list = new SalesGroupMatrixDC();
                SalesAppManager salesAppManager = new SalesAppManager();
                ElasticSqlHelper<SalesGroupMatrixDC> elasticSqlGroupMetricsHelper = new ElasticSqlHelper<SalesGroupMatrixDC>();

                DateTime TodayDate = DateTime.Today;
                DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");

                var data2 = (await elasticSqlGroupMetricsHelper.GetListAsync($"select dispatchqty,price,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}' and custid='{obj.CustomerId}' and whid = '{obj.warehouseid}' ")).ToList();

                var data = salesAppManager.SalesGroupMatrix(obj.CustomerId, obj.PeopleId, obj.flag, obj.warehouseid);

                BeatCustomersCRMDc Customer = new BeatCustomersCRMDc();
                bool IsLevelAdded = false;
                var param1 = new SqlParameter("@customerid", obj.CustomerId);
                var OrdersList = myContext.Database.SqlQuery<CRMLevelBeatCustomerDc>("exec CRMLevelBeatCustomer @customerid", param1).FirstOrDefault();
                Customer = Mapper.Map(OrdersList).ToANew<BeatCustomersCRMDc>();

                if (Customer != null)
                {
                    if (Customer.OrderCount >= 12 && Customer.Volume >= 75000 && Customer.BrandCount >= 40 && Customer.KKvolume >= 15000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 60)
                    {
                        Customer.Level = 5;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 8 && Customer.Volume >= 30000 && Customer.BrandCount >= 20 && Customer.KKvolume >= 8000 && (Customer.SelfOrderCount / (Customer.OrderCount) * 100) > 30)
                    {
                        Customer.Level = 4;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 5 && Customer.Volume >= 20000 && Customer.BrandCount >= 10 && Customer.KKvolume >= 2000)
                    {
                        Customer.Level = 3;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount >= 3 && Customer.Volume >= 10000 && Customer.BrandCount >= 5)
                    {
                        Customer.Level = 2;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount > 0)
                    {
                        Customer.Level = 1;
                        IsLevelAdded = true;
                    }
                    else if (Customer.OrderCount == 0)
                    {
                        Customer.Level = 0;
                        IsLevelAdded = true;
                    }
                    else
                    {
                        if (!IsLevelAdded)
                        {
                            Customer.Level = -0;
                        }
                    }
                }
                data.Level = Customer.Level;
                return data;
            }
        }
        [Route("AddGroup")]
        [HttpPost]
        public APIResponse AddSalesGroup(SalesGroupDC SaleGroup)
        {
            APIResponse res = new APIResponse();
            Model.SalesApp.SalesGroup k = new Model.SalesApp.SalesGroup();
            SalesGroupCustomer obj = new SalesGroupCustomer();
            using (AuthContext context = new AuthContext())
            {

                if (SaleGroup.IsNewGroup == 0)
                {
                    if (SaleGroup.GroupName.Trim() == null && SaleGroup.GroupName.Trim() == "")
                    {
                        res.Message = "GroupName Cannot be null";
                        res.Status = false;
                        return res;
                    }
                    var checkduplicateGroup = context.SalesGroupDb.FirstOrDefault(x => x.StoreId == 0 && x.GroupName == SaleGroup.GroupName.Trim() && x.IsActive == true && x.IsDeleted == false);
                    if (checkduplicateGroup != null)
                    {
                        res.Message = "Group already exist";
                        res.Status = false;
                        return res;
                    }
                    var checkPeopleGroup = context.SalesGroupDb.FirstOrDefault(x => x.StoreId == -1 && x.CreatedBy == SaleGroup.PeopleId && x.GroupName == SaleGroup.GroupName.Trim() && x.IsActive == true && x.IsDeleted == false);
                    if (checkPeopleGroup != null)
                    {
                        res.Message = "Group already exist";
                        res.Status = false;
                        return res;
                    }

                    k.GroupName = SaleGroup.GroupName;
                    k.StoreId = -1; // SaleGroup.storeid;//-1 My Group 0 for SK Group
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.CreatedDate = DateTime.Now;
                    k.CreatedBy = SaleGroup.PeopleId;
                    k.ModifiedDate = DateTime.Now;
                    k.ModifiedBy = SaleGroup.PeopleId;
                    k.Type = "Yes";
                    context.SalesGroupDb.Add(k);

                    if (context.Commit() > 0)
                    {

                        obj.CustomerID = SaleGroup.customerid;
                        obj.GroupId = Convert.ToInt32(k.Id);
                        obj.IsActive = true;
                        obj.IsDeleted = false;
                        obj.CreatedDate = DateTime.Now;
                        obj.CreatedBy = SaleGroup.PeopleId;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = SaleGroup.PeopleId;
                        context.SalesGroupCustomerDb.Add(obj);
                        context.Commit();

                        res.Message = "Successfully Created";
                        res.Status = true;
                        res.Data = k.Id;
                    }
                }
                else
                {
                    var checkCustomerInGrp = context.SalesGroupCustomerDb.FirstOrDefault(x => x.CustomerID == SaleGroup.customerid && x.GroupId == SaleGroup.GroupId && x.IsActive == true && x.IsDeleted == false);
                    if (checkCustomerInGrp != null)
                    {
                        res.Message = "Customer already exist";
                        res.Status = false;
                        return res;
                    }

                    obj.CustomerID = SaleGroup.customerid;
                    obj.GroupId = SaleGroup.GroupId;
                    obj.IsActive = true;
                    obj.IsDeleted = false;
                    obj.CreatedDate = DateTime.Now;
                    obj.CreatedBy = SaleGroup.PeopleId;
                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = SaleGroup.PeopleId;
                    context.SalesGroupCustomerDb.Add(obj);
                    context.Commit();

                    res.Message = "Successfully Added";
                    res.Status = true;
                }
                return res;
            }

        }

        [Route("RemoveCustomerFromGroup")]
        [HttpPost]
        public APIResponse RemoveCustomerFromGroup(GroupCustRemoveDc obj)
        {
            APIResponse res = new APIResponse();

            SalesGroupCustomer k = new SalesGroupCustomer();
            using (AuthContext context = new AuthContext())
            {
                if (obj != null)
                {
                    var data = context.SalesGroupCustomerDb.FirstOrDefault(x => x.CustomerID == obj.CustomerID && x.GroupId == obj.GroupId && x.CreatedBy == obj.PeopleId && x.IsActive == true && x.IsDeleted == false);
                    if (data != null)
                    {
                        context.SalesGroupCustomerDb.Remove(data);
                        if (context.Commit() > 0)
                        {
                            res.Message = "Successfully Removed";
                            res.Status = true;
                        };
                    }
                }
            }
            return res;
        }

        [Route("RescheduleBeat")]
        [HttpPost]
        public bool AddRescheduleBeat(RescheduleBeatDC RescBeat)
        {
            bool status = false;
            try
            {
                CustomerExecutiveMappingsReschedule k = new CustomerExecutiveMappingsReschedule();
                //  bool status = false;

                var today = DateTime.Now.Date;

                int Day = today.Day;
                int finalday = Day + 7;


                using (AuthContext context = new AuthContext())
                {
                    k.CustomerId = RescBeat.CustomerID;
                    k.ExecutiveId = RescBeat.ExecutiveId;
                    k.StartDate = RescBeat.StartDate;
                    k.StoreId = RescBeat.StoreID;
                    k.IsReschedule = true;
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.CreatedDate = DateTime.Now;
                    k.ModifiedDate = DateTime.Now;
                    k.CreatedBy = RescBeat.CreatedBy;
                    k.ModifiedBy = RescBeat.ModifiedBy;
                    if (k.StartDate.Day < finalday)
                    {
                        context.CustomerExecutiveMappingsRescheduleDb.Add(k);
                        status = context.Commit() > 0;
                    }

                    //}                 
                }
                return status;
            }
            catch (Exception ex)
            {
                return status;
            }
        }

        [HttpGet]
        [Route("GetMyBeat")]
        [AllowAnonymous]
        public async Task<List<MyBeatDC>> GetMyBeat(int peopleId, int WarehouseId, int skip, int take, double lat = 0, double lg = 0)
        {
            int Skiplist = (skip - 1) * take;

            List<MyBeatDC> list = new List<MyBeatDC>();
            List<int> CustomerList = new List<int>();
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            //var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var todayBeat = (await mongoDbHelper.SelectAsync(x => x.PeopleId == peopleId && x.AssignmentDate == today)).FirstOrDefault();

            var PlannedRoute = todayBeat != null ? todayBeat.PlannedRoutes.ToList() : null;
            var ActualRoutes = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

            bool BeatEdit = false;
            if (todayBeat != null && PlannedRoute != null && PlannedRoute.Any())
            {
                using (var authContext = new AuthContext())
                {
                    var query = string.Format("exec IsSalesAppLead {0}", peopleId);
                    var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                    bool Isdigitalexecutive = isSalesLead > 0;

                    #region Beat edit configuration dynamic
                    var currentday = DateTime.Now.Day;
                    List<long> storeIds = new List<long>();
                    //if (Isdigitalexecutive)
                    //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                    //else
                        storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                    var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                    if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                    {
                        if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                        {
                            BeatEdit = true;
                        }
                        else
                        {
                            BeatEdit = false;
                        }
                    }
                    else
                    {
                        BeatEdit = true;
                    }
                    #endregion

                    //var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true).FirstOrDefault();
                    //if (Beat != null)
                    //{
                    //    BeatEdit = Beat.IsBeatEdit;
                    //}
                    //else
                    //{
                    //    BeatEdit = false;
                    //}
                    if (authContext.Database.Connection.State != ConnectionState.Open)
                        authContext.Database.Connection.Open();

                    var CustList = PlannedRoute.Select(y => y.CustomerId).Distinct().ToList();

                    DataTable IdDt = new DataTable();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    foreach (var id in CustList)
                    {
                        var dr = IdDt.NewRow();
                        dr["IntValue"] = id;
                        IdDt.Rows.Add(dr);
                    }

                    var param1 = new SqlParameter("CustomerIds", IdDt);
                    var param2 = new SqlParameter("Warehouseid", WarehouseId);
                    var param4 = new SqlParameter("PeopleId", peopleId);
                    var param5 = new SqlParameter("ExecutiveLat", lat);
                    var param6 = new SqlParameter("ExecutiveLg", lg);
                    var param7 = new SqlParameter("skip", Skiplist);
                    var param8 = new SqlParameter("take", take);

                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[SpGetMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandTimeout = 900;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    var reader = cmd.ExecuteReader();
                    var beatCustomerOrders = ((IObjectContextAdapter)authContext)
                    .ObjectContext.Translate<BeatCustomerOrderDc>(reader).ToList();

                    DataTable IdDt1 = new DataTable();
                    IdDt1 = new DataTable();
                    IdDt1.Columns.Add("IntValue");
                    foreach (var id in CustList)
                    {
                        var dr1 = IdDt1.NewRow();
                        dr1["IntValue"] = id;
                        IdDt1.Rows.Add(dr1);
                    }
                    var CustIdParam = new SqlParameter("CustomerIds", IdDt1);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    var CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                    var SkCodeList = PlannedRoute.Select(y => y.Skcode).Distinct().ToList();
                    var TagData = CRMCustomerTag(SkCodeList);

                    foreach (var item in beatCustomerOrders)
                    {
                        var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                        MyBeatDC beat = new MyBeatDC();
                        beat.CustomerId = item.CustomerId;
                        beat.LastOrderDate = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).LastOrderDate : null;
                        beat.LastOrderDaysAgo = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).LastOrderDaysAgo : 0;
                        beat.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                        beat.CustomerVerify = item.CustomerVerify;
                        beat.ShippingAddress = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).ShippingAddress : null;
                        beat.lat = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).lat : 0; //todayBeat.PlannedRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).lat;
                        beat.lg = beatCustomerOrders.Any(y => y.CustomerId == item.CustomerId) ? beatCustomerOrders.FirstOrDefault(y => y.CustomerId == item.CustomerId).lg : 0;
                        beat.Mobile = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Mobile;
                        beat.Skcode = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Skcode;
                        beat.ShopName = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).ShopName;
                        beat.Day = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Day;
                        beat.CustomerName = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Name;
                        beat.WarehouseId = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).WarehouseId;
                        beat.IsKPP = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsKPP;
                        beat.Active = PlannedRoute.FirstOrDefault(x => x.CustomerId == item.CustomerId).Active;
                        beat.IsVisited = PlannedRoute.Where(x => x.CustomerId == item.CustomerId).Select(y => y.IsVisited).FirstOrDefault();
                        beat.ObjectId = todayBeat.Id;
                        beat.IsBeatEdit = BeatEdit;
                        beat.Distance = item.Distance;
                        beat.IsCustomerUpdate = item.IsCustomerUpdate;
                        beat.CheckIn = item.CheckIn;
                        beat.IsVerifyRequestPending = item.IsVerifyRequestPending;
                        beat.IsCustomerProfileEdit = item.IsCustomerProfileEdit;
                        beat.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                        beat.IsBeat = true;
                        beat.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == beat.Skcode)?.CRMTags;
                        beat.CustomerType = item.CustomerType;
                        list.Add(beat);
                    }

                }
            }
            return list.OrderBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
        }

        [HttpPost]
        [Route("GetMyBeatCustomerDetail")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetMyBeatCustomerDetail(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            int Skiplist = (obj.skip - 1) * obj.take;
            BeatsManager manager = new BeatsManager();
            List<MyBeatDC> list = new List<MyBeatDC>();
            List<MyBeatDC> Beatlist = new List<MyBeatDC>();
            List<int> CustomerList = new List<int>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                var storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion

                //var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true).FirstOrDefault();
                //if (Beat != null)
                //{
                //    BeatEdit = Beat.IsBeatEdit;
                //}
                //else
                //{
                //    BeatEdit = false;
                //}
                List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();
                List<AllBeatCustomerDc> NotVisitCustList = new List<AllBeatCustomerDc>();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today);
                var ActualRoutes = todayBeats.Count > 0 && todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? todayBeats[0].ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

                res.VisitCount = 0;
                res.NonVisitCount = 0;

                DataTable AllBeatCustomerIdslist = new DataTable();

                if (obj.Day == "All")
                {
                    var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                    var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
                    var MonthBeatCustomerList = MonthBeat.SelectMany(x => x.PlannedRoutes).ToList();

                    if (MonthBeatCustomerList != null && MonthBeatCustomerList.Count > 0 && MonthBeatCustomerList.Any())
                    {
                        var customerids = MonthBeatCustomerList.Select(x => x.CustomerId).Distinct().ToList();
                        NotVisitCustList = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).ToList();
                        res.VisitCount = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == true);
                        res.NonVisitCount = MonthBeatCustomerList.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == false);
                    }
                }
                else
                {
                    if (todayBeats != null && todayBeats.Count > 0 && todayBeats[0].PlannedRoutes.Count > 0 && todayBeats[0].PlannedRoutes.Any())
                    {
                        if (today.ToString("dddd").ToUpper() == obj.Day.ToUpper() && obj.BeatEdit == false)
                        {
                            var customerids = todayBeats[0].PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                            NotVisitCustList = todayBeats[0].PlannedRoutes.Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).Distinct().ToList();
                        }
                        else
                        {
                            var customerids = todayBeats[0].PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                            NotVisitCustList = todayBeats[0].PlannedRoutes.Where(y => customerids.Contains(y.CustomerId)).Select(x => new AllBeatCustomerDc { CustomerId = x.CustomerId, IsVisited = x.IsVisited }).OrderBy(x => x.IsVisited ? 1 : 0).ToList();
                            res.VisitCount = todayBeats[0].PlannedRoutes.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == true);
                            res.NonVisitCount = todayBeats[0].PlannedRoutes.Where(x => customerids.Contains(x.CustomerId)).Count(x => x.IsVisited == false);
                        }
                    }
                }

                AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("CustomerId");
                AllBeatCustomerIdslist.Columns.Add("IsVisited");
                foreach (var item in NotVisitCustList.Distinct())
                {
                    var dr = AllBeatCustomerIdslist.NewRow();
                    dr["CustomerId"] = item.CustomerId;
                    dr["IsVisited"] = item.IsVisited;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }

                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("GroupId", obj.GroupId);
                var param5 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param6 = new SqlParameter("OrderDays", obj.OrderDays);
                var param7 = new SqlParameter("skip", Skiplist);
                var param8 = new SqlParameter("take", obj.take);
                var param9 = new SqlParameter("KeyValue", obj.KeyValue);
                var param10 = new SqlParameter("IsBeatEdit", obj.BeatEdit);
                var param11 = new SqlParameter("ExecutiveLat", obj.lat);
                var param12 = new SqlParameter("ExecutiveLg", obj.lg);
                var param13 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                var param14 = new SqlParameter("IsPagination", obj.IsPagination);

                //var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandType = System.Data.CommandType.StoredProcedure;

                if (today.ToString("dddd").ToUpper() == obj.Day.ToUpper() && obj.BeatEdit == false)
                {
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetTodayExecutiveBeatWithFilter]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    //cmd.Parameters.Add(param7);
                    //cmd.Parameters.Add(param8);
                    //cmd.Parameters.Add(param9);
                    //cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    cmd.Parameters.Add(param13);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                        res.VisitCount = Convert.ToInt32(reader["Visited"]);
                        res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                        res.Reschedule = Convert.ToInt32(reader["Reschedule"]);
                    }
                }
                else
                {
                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetExecutiveBeatWithFilter]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    cmd.Parameters.Add(param13);
                    cmd.Parameters.Add(param14);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                        res.VisitCount = Convert.ToInt32(reader["Visited"]);
                        res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                    }
                }

                List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                var CustomerIdslist = new System.Data.DataTable();
                var CustIds = new System.Data.DataTable();
                CustomerIdslist.Columns.Add("IntValue");
                CustIds.Columns.Add("IntValue");
                foreach (var item in CustomerIds)
                {
                    var dr = CustomerIdslist.NewRow();
                    dr["IntValue"] = item;
                    CustomerIdslist.Rows.Add(dr);

                    var dr1 = CustIds.NewRow();
                    dr1["IntValue"] = item;
                    CustIds.Rows.Add(dr1);
                }
                var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                CIds.SqlDbType = System.Data.SqlDbType.Structured;
                CIds.TypeName = "dbo.IntValues";

                var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                CustIdParam.TypeName = "dbo.IntValues";
                var CustSalesGrouplist = await authContext.Database.SqlQuery<SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                var CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                {
                    Day = x.FirstOrDefault().Day,
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    IsBeat = (today.ToString("dddd").ToUpper() == x.FirstOrDefault().Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                    //var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023

                    item.SalesGroupDcs = (CustSalesGrouplist != null && CustSalesGrouplist.Any(x => x.CustomerId == item.CustomerId)) ? CustSalesGrouplist.Where(x => x.CustomerId == item.CustomerId).ToList() : null;
                    item.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                    item.Day = item.Day != null ? item.Day.ToUpper() : null;
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;

                    if (obj.Day == "All")
                    {
                        if (NotVisitCustList.Count > 0)
                        {
                            item.IsVisited = NotVisitCustList.FirstOrDefault(x => x.CustomerId == item.CustomerId) != null ? NotVisitCustList.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsVisited : false;
                        }
                    }
                    else
                    {
                        if (todayBeats.Count > 0 && todayBeats[0].PlannedRoutes != null && todayBeats[0].PlannedRoutes.Any())
                        {
                            item.IsVisited = todayBeats[0].PlannedRoutes.Any(x => x.CustomerId == item.CustomerId) ? todayBeats[0].PlannedRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId).IsVisited : false;
                        }
                    }
                }
                res.MyBeatDCs = obj.Day == "Search" ? Beatlist.OrderBy(y => y.Day).ToList() : Beatlist.OrderBy(y => y.Day).ThenBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
                res.VisitCount = Beatlist.Count(x => x.IsVisited == true);
                res.NonVisitCount = Beatlist.Count(x => x.IsVisited == false);
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        [HttpPost]
        [Route("GetMyBeatCustomerSearch")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetMyBeatCustomerSearch(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            int Skiplist = (obj.skip - 1) * obj.take;
            BeatsManager manager = new BeatsManager();
            List<MyBeatDC> list = new List<MyBeatDC>();
            List<MyBeatDC> Beatlist = new List<MyBeatDC>();
            List<int> CustomerList = new List<int>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                //var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                //bool Isdigitalexecutive = isSalesLead > 0;

                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeats = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today);
                var ActualRoutes = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? todayBeats[0].ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023

                res.VisitCount = 0;
                res.NonVisitCount = 0;

                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("CustomerId");
                AllBeatCustomerIdslist.Columns.Add("IsVisited");


                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("GroupId", obj.GroupId);
                var param5 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param6 = new SqlParameter("OrderDays", obj.OrderDays);
                var param7 = new SqlParameter("skip", Skiplist);
                var param8 = new SqlParameter("take", obj.take);
                var param9 = new SqlParameter("KeyValue", obj.KeyValue);
                var param10 = new SqlParameter("IsBeatEdit", obj.BeatEdit);
                var param11 = new SqlParameter("ExecutiveLat", obj.lat);
                var param12 = new SqlParameter("ExecutiveLg", obj.lg);
                var param13 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                var param14 = new SqlParameter("IsPagination", obj.IsPagination);



                var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveBeatSearchDigital" : "[dbo].[GetExecutiveBeatSearch]";
                cmd.CommandText = "[dbo].[GetExecutiveBeatSearch]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param7);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param9);
                cmd.Parameters.Add(param10);
                cmd.Parameters.Add(param11);
                cmd.Parameters.Add(param12);
                cmd.Parameters.Add(param13);
                cmd.Parameters.Add(param14);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext)
                .ObjectContext
                .Translate<MyBeatDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    res.totalRecord = Convert.ToInt32(reader["totalRecord"]);
                    res.VisitCount = Convert.ToInt32(reader["Visited"]);
                    res.NonVisitCount = Convert.ToInt32(reader["NoVisited"]);
                }


                List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                var CustomerIdslist = new System.Data.DataTable();
                var CustIds = new System.Data.DataTable();
                CustomerIdslist.Columns.Add("IntValue");
                CustIds.Columns.Add("IntValue");
                foreach (var item in CustomerIds)
                {
                    var dr = CustomerIdslist.NewRow();
                    dr["IntValue"] = item;
                    CustomerIdslist.Rows.Add(dr);

                    var dr1 = CustIds.NewRow();
                    dr1["IntValue"] = item;
                    CustIds.Rows.Add(dr1);
                }
                var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                CIds.SqlDbType = System.Data.SqlDbType.Structured;
                CIds.TypeName = "dbo.IntValues";

                var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                CustIdParam.TypeName = "dbo.IntValues";
                var CustSalesGrouplist = await authContext.Database.SqlQuery<SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                var CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                {
                    Day = x.FirstOrDefault().Day,
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    IsBeat = (today.ToString("dddd").ToUpper() == x.FirstOrDefault().Day.ToUpper()) ? true : false,
                    CustomerType = x.FirstOrDefault().CustomerType,
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);


                foreach (var item in Beatlist)
                {
                    var checkin = todayBeats[0].ActualRoutes != null && todayBeats[0].ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023

                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023

                    item.SalesGroupDcs = (CustSalesGrouplist != null && CustSalesGrouplist.Any(x => x.CustomerId == item.CustomerId)) ? CustSalesGrouplist.Where(x => x.CustomerId == item.CustomerId).ToList() : null;
                    item.CustomerRemarksDCs = (CustomerRemarkList != null && CustomerRemarkList.Any(x => x.CustomerId == item.CustomerId)) ? CustomerRemarkList.Where(x => x.CustomerId == item.CustomerId).OrderByDescending(z => z.CreatedDate).Take(3).ToList() : null;
                    item.Day = item.Day != null ? item.Day.ToUpper() : null;
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
                res.MyBeatDCs = obj.Day == "Search" ? Beatlist.OrderBy(y => y.Day).ToList() : Beatlist.OrderBy(y => y.Day).ThenBy(x => x.IsVisited ? 1 : 0).ThenBy(u => u.Distance).ToList();
                res.VisitCount = Beatlist.Count(x => x.IsVisited == true);
                res.NonVisitCount = Beatlist.Count(x => x.IsVisited == false);
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        [HttpPost]
        [Route("GetBeatEditList")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetBeatEditList(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();
            List<MyBeatDC> list = new List<MyBeatDC>();
            List<MyBeatDC> Beatlist = new List<MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                //var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                //bool Isdigitalexecutive = isSalesLead > 0;

                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion



                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                var dayIndex = new List<string> { "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "NO BEAT" };

                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";
                VisitCustList = authContext.Database.SqlQuery<AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).OrderBy(e => dayIndex.IndexOf(e.Day.ToUpper())).ToList();
                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "ALL")
                {
                    searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                }
                else if (obj.Day.ToUpper() == "NO BEAT")
                {
                    var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                    searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    //var clusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsActive && (!x.IsDeleted.HasValue || x.IsDeleted.Value == false)).Select(x => x.ClusterId).ToList();
                    //searchCustomerIds.AddRange(authContext.Customers.Where(x => !allcustomers.Contains(x.CustomerId) && x.Active && x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false).Select(x => x.CustomerId).ToList());
                }
                else if (obj.Day.ToUpper() == "SEARCH")
                {
                    searchCustomerIds = VisitCustList.Select(x => x.CustomerId).ToList();
                }
                else
                {
                    searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                }



                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("IntValue");
                foreach (var item in searchCustomerIds.Distinct().ToList())
                {
                    DataRow dr = AllBeatCustomerIdslist.NewRow();
                    dr[0] = item;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }


                var param1 = new SqlParameter("peopleid", obj.PeopleId);
                var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                var param3 = new SqlParameter("Day", obj.Day);
                var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                var param5 = new SqlParameter("GroupId", obj.GroupId);
                var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                var param8 = new SqlParameter("skip", obj.skip);
                var param9 = new SqlParameter("take", obj.take);
                var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                param12.SqlDbType = SqlDbType.Structured;
                param12.TypeName = "dbo.IntValues";


                var cmd = authContext.Database.Connection.CreateCommand();
                //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatEditDigital" : "[dbo].[GetExecutiveMyBeatEdit]";
                cmd.CommandText = "[dbo].[GetExecutiveMyBeatEdit]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param7);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param9);
                cmd.Parameters.Add(param10);
                cmd.Parameters.Add(param11);
                cmd.Parameters.Add(param12);
                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)authContext)
                .ObjectContext
                .Translate<MyBeatDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    res.totalRecord = Convert.ToInt32(reader["Totalcount"]);
                }

                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    CustomerType = x.FirstOrDefault().CustomerType
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);
                Beatlist.ForEach(x =>
                {
                    x.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == x.Skcode)?.CRMTags;
                });
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [HttpPost]
        [Route("GetVisitedBeat")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetVisitedBeat(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();
            List<MyBeatDC> list = new List<MyBeatDC>();
            List<MyBeatDC> Beatlist = new List<MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                #region //TODO:SalesAppMarch2023

                //var query = string.Format("exec IsSalesAppLead {0}", obj.PeopleId);
                //var isSalesLead = authContext.Database.SqlQuery<int>(query).FirstOrDefault();
                //bool Isdigitalexecutive = isSalesLead > 0;


                #region Beat edit configuration dynamic
                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion
                #endregion

                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var PlannedRoute = todayBeat.PlannedRoutes.ToList();
                var ActualRoutes = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";

                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<MyBeatDC>();
                    return res;
                }
                List<int> searchCustomerIds = new List<int>();

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                        //var clusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsActive && (!x.IsDeleted.HasValue || x.IsDeleted.Value == false)).Select(x => x.ClusterId).ToList();
                        //searchCustomerIds.AddRange(authContext.Customers.Where(x => !allcustomers.Contains(x.CustomerId) && x.Active && x.ClusterId.HasValue && clusterIds.Contains(x.ClusterId.Value) && x.Deleted == false).Select(x => x.CustomerId).ToList());
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {

                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                }

                var visitedCustomerIds = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                searchCustomerIds = searchCustomerIds.Where(x => visitedCustomerIds.Contains(x)).ToList();

                DataTable AllBeatCustomerIdslist = new DataTable();
                AllBeatCustomerIdslist.Columns.Add("IntValue");
                foreach (var item in searchCustomerIds.Distinct().ToList())
                {
                    DataRow dr = AllBeatCustomerIdslist.NewRow();
                    dr[0] = item;
                    AllBeatCustomerIdslist.Rows.Add(dr);
                }
                List<SalesGroupDc> CustSalesGrouplist = new List<SalesGroupDc>();
                List<InsertCustomerRemarksDC> CustomerRemarkList = new List<InsertCustomerRemarksDC>();
                if (searchCustomerIds != null && searchCustomerIds.Any())
                {
                    var param1 = new SqlParameter("peopleid", obj.PeopleId);
                    var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                    var param3 = new SqlParameter("Day", obj.Day);
                    var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                    var param5 = new SqlParameter("GroupId", obj.GroupId);
                    var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                    var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                    var param8 = new SqlParameter("skip", obj.skip);
                    var param9 = new SqlParameter("take", obj.take);
                    var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                    var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                    var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                    param12.SqlDbType = SqlDbType.Structured;
                    param12.TypeName = "dbo.IntValues";


                    var cmd = authContext.Database.Connection.CreateCommand();
                    //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandText = "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.VisitCount = Convert.ToInt32(reader["Totalcount"]);
                    }

                    List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();
                }
                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<SalesGroupDc>(),
                    CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<InsertCustomerRemarksDC>(),
                    IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [HttpPost]
        [Route("GetNotVisitedBeat")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetNotVisitedBeat(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();
            List<MyBeatDC> list = new List<MyBeatDC>();
            List<MyBeatDC> Beatlist = new List<MyBeatDC>();
            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + obj.PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = authContext.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));


                #region Beat edit configuration dynamic


                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                if (Isdigitalexecutive)
                    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                else
                    storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var ActualRoutes = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                if (Isdigitalexecutive)
                    Sp = "GetExecutiveAllBeatDigital";
                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<MyBeatDC>();
                    return res;
                }

                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "SEARCH")
                {
                    res.MyBeatDCs = new List<MyBeatDC>();
                    return res;
                }

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {

                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                }

                var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => !x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                //var visitedCustomerIds = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                searchCustomerIds = searchCustomerIds.Where(x => visitedCustids.Contains(x)).ToList();
                List<SalesGroupDc> CustSalesGrouplist = new List<SalesGroupDc>();
                List<InsertCustomerRemarksDC> CustomerRemarkList = new List<InsertCustomerRemarksDC>();
                if (searchCustomerIds != null && searchCustomerIds.Any())
                {
                    DataTable AllBeatCustomerIdslist = new DataTable();
                    AllBeatCustomerIdslist.Columns.Add("IntValue");
                    foreach (var item in searchCustomerIds.Distinct().ToList())
                    {
                        DataRow dr = AllBeatCustomerIdslist.NewRow();
                        dr[0] = item;
                        AllBeatCustomerIdslist.Rows.Add(dr);
                    }
                    var param1 = new SqlParameter("peopleid", obj.PeopleId);
                    var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                    var param3 = new SqlParameter("Day", obj.Day);
                    var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                    var param5 = new SqlParameter("GroupId", obj.GroupId);
                    var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                    var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                    var param8 = new SqlParameter("skip", obj.skip);
                    var param9 = new SqlParameter("take", obj.take);
                    var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                    var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                    var param12 = new SqlParameter("BeatAllCustomers", AllBeatCustomerIdslist);
                    param12.SqlDbType = SqlDbType.Structured;
                    param12.TypeName = "dbo.IntValues";


                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);
                    cmd.Parameters.Add(param2);
                    cmd.Parameters.Add(param3);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param6);
                    cmd.Parameters.Add(param7);
                    cmd.Parameters.Add(param8);
                    cmd.Parameters.Add(param9);
                    cmd.Parameters.Add(param10);
                    cmd.Parameters.Add(param11);
                    cmd.Parameters.Add(param12);
                    var reader = cmd.ExecuteReader();
                    list = ((IObjectContextAdapter)authContext)
                    .ObjectContext
                    .Translate<MyBeatDC>(reader).ToList();
                    reader.NextResult();
                    if (reader.Read())
                    {
                        res.NonVisitCount = Convert.ToInt32(reader["Totalcount"]);
                    }

                    List<int> CustomerIds = list.Select(x => x.CustomerId).Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();
                }
                Beatlist = list.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                {
                    Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                    CustomerId = x.FirstOrDefault().CustomerId,
                    CustomerName = x.FirstOrDefault().CustomerName,
                    OrderCount = x.FirstOrDefault().OrderCount,
                    MTDSales = x.FirstOrDefault().MTDSales,
                    PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                    Skcode = x.FirstOrDefault().Skcode,
                    Mobile = x.FirstOrDefault().Mobile,
                    ShopName = x.FirstOrDefault().ShopName,
                    ShippingAddress = x.FirstOrDefault().ShippingAddress,
                    CustomerVerify = x.FirstOrDefault().CustomerVerify,
                    lat = x.FirstOrDefault().lat,
                    lg = x.FirstOrDefault().lg,
                    Active = x.FirstOrDefault().Active,
                    LastOrderDate = x.FirstOrDefault().LastOrderDate,
                    LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                    WarehouseId = x.FirstOrDefault().WarehouseId,
                    Distance = x.FirstOrDefault().Distance,
                    IsReschedule = x.FirstOrDefault().IsReschedule,
                    IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                    CheckIn = x.FirstOrDefault().CheckIn,
                    IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                    IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                    IsBeatEdit = BeatEdit,
                    SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<SalesGroupDc>(),
                    CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<InsertCustomerRemarksDC>(),
                    IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false
                }).ToList();

                var SkCodeList = Beatlist.Select(y => y.Skcode).Distinct().ToList();
                var TagData = CRMCustomerTag(SkCodeList);

                foreach (var item in Beatlist)
                {
                    var checkin = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(x => x.CustomerId == item.CustomerId)?.CheckIn : null; //TODO:SalesAppMarch2023
                    item.LastVisitDaysAgo = checkin != null ? (DateTime.Now.Date - Convert.ToDateTime(checkin).Date).Days : item.CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(item.CheckIn).Date).Days : 90; //TODO:SalesAppMarch2023
                    item.CRMTag = TagData.Result.FirstOrDefault(y => y.Skcode == item.Skcode)?.CRMTags;
                }
            }
            res.MyBeatDCs = Beatlist;
            res.IsBeatEdit = BeatEdit;
            return res;
        }

        [HttpPost]
        [Route("GetAllBeat")]
        [AllowAnonymous]
        public async Task<MyBeatCustomerDc> GetAllBeat(BeatCustomerDTOdc obj)
        {
            MyBeatCustomerDc res = new MyBeatCustomerDc();
            res = new MyBeatCustomerDc
            {
                MyBeatDCs = new List<MyBeatDC>(),
                NoVisitMyBeatDCs = new List<MyBeatDC>()
            };


            List<AllBeatCustomerDc> VisitCustList = new List<AllBeatCustomerDc>();

            bool BeatEdit = false;
            using (var authContext = new AuthContext())
            {
                //string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + obj.PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                //var role = authContext.Database.SqlQuery<string>(query).ToList();
                //bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                #region Beat edit configuration dynamic

                var currentday = DateTime.Now.Day;
                List<long> storeIds = new List<long>();
                //if (Isdigitalexecutive)
                //    storeIds = authContext.StoreDB.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).Select(x => x.Id).ToList();
                //else
                storeIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.PeopleId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).Distinct().ToList();

                var Beat = authContext.BeatEditConfigs.Where(y => y.IsDeleted == false && y.IsActive == true && storeIds.Contains(y.StoreId)).ToList();

                if (Beat != null && Beat.Count > 0 && Beat.Any(x => x.FromDate > 0 && x.ToDate > 0))
                {
                    if (currentday >= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).FromDate && currentday <= Beat.FirstOrDefault(x => x.IsAnytime == false && x.FromDate > 0 && x.ToDate > 0).ToDate)
                    {
                        BeatEdit = true;
                    }
                    else
                    {
                        BeatEdit = false;
                    }
                }
                else
                {
                    BeatEdit = true;
                }
                #endregion


                if (authContext.Database.Connection.State != ConnectionState.Open)
                    authContext.Database.Connection.Open();

                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var today = DateTime.Now.Date;
                var todayBeat = new ExecutiveBeats();
                if(obj.Day.ToUpper() == "ALL" || obj.Day.ToUpper() == today.DayOfWeek.ToString().ToUpper())
                    todayBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate == today).FirstOrDefault();

                var ActualRoutes = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.ToList() : null; //TODO:SalesAppMarch2023


                string Sp = "GetExecutiveAllBeat";
                //if (Isdigitalexecutive)
                //    Sp = "GetExecutiveAllBeatDigital";
                var peopleId = new SqlParameter("@peopleId", obj.PeopleId);
                VisitCustList = authContext.Database.SqlQuery<AllBeatCustomerDc>("exec " + Sp + " @peopleId", peopleId).ToList();

                if (VisitCustList.Count == 0)
                {
                    res.MyBeatDCs = new List<MyBeatDC>();
                    res.NoVisitMyBeatDCs = new List<MyBeatDC>();
                    return res;
                }

                List<int> searchCustomerIds = new List<int>();

                if (obj.Day.ToUpper() == "SEARCH")
                {
                    res.MyBeatDCs = new List<MyBeatDC>();
                    res.NoVisitMyBeatDCs = new List<MyBeatDC>();
                    return res;
                }

                if (today.ToString("dddd").ToUpper() != obj.Day.ToUpper())
                {
                    if (obj.Day.ToUpper() == "ALL")
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day != "NoBeat" && x.Day.ToUpper() != today.ToString("dddd").ToUpper()).Select(x => x.CustomerId).Distinct().ToList();
                        // searchCustomerIds.AddRange(todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList());
                        searchCustomerIds.AddRange(todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>());
                    }
                    else if (obj.Day.ToUpper() == "NO BEAT")
                    {
                        var allcustomers = VisitCustList.Select(x => x.CustomerId).Distinct().ToList();
                        searchCustomerIds = VisitCustList.Where(x => x.Day == "NoBeat").Select(x => x.CustomerId).Distinct().ToList();
                    }
                    else if (obj.Day.ToUpper() == "SEARCH")
                    {
                    }
                    else
                    {
                        searchCustomerIds = VisitCustList.Where(x => x.Day.ToUpper() == obj.Day.ToUpper()).Select(x => x.CustomerId).ToList();
                    }
                }
                else
                {
                    searchCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                }


                List<SalesGroupDc> CustSalesGrouplist = new List<SalesGroupDc>();
                List<InsertCustomerRemarksDC> CustomerRemarkList = new List<InsertCustomerRemarksDC>();
                List<BeatCustomers> BeatCustomers = new List<BeatCustomers>();
                if (obj.APIType.ToLower() == ("both").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    var NotvisitedCustids = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                    BeatCustomers.Add(new DataContracts.External.SalesAppDc.BeatCustomers
                    {
                        Customertype = 1,
                        customers = visitedCustids
                    });
                    BeatCustomers.Add(new DataContracts.External.SalesAppDc.BeatCustomers
                    {
                        Customertype = 0,
                        customers = NotvisitedCustids
                    });
                }
                else if (obj.APIType.ToLower() == ("Visit").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any()  ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    BeatCustomers.Add(new DataContracts.External.SalesAppDc.BeatCustomers
                    {
                        Customertype = 1,
                        customers = visitedCustids
                    });
                }
                else if (obj.APIType.ToLower() == ("NotVisit").ToLower())
                {
                    var visitedCustids = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Where(x => x.IsVisited).Select(x => x.CustomerId).Distinct().ToList() : new List<int>();

                    var NotvisitedCustids = searchCustomerIds.Where(x => !visitedCustids.Contains(x)).Distinct().ToList();
                    BeatCustomers.Add(new DataContracts.External.SalesAppDc.BeatCustomers
                    {
                        Customertype = 0,
                        customers = NotvisitedCustids
                    });
                }
                ParallelLoopResult parellelResult = Parallel.ForEach(BeatCustomers, (BeatCustomer) =>
                {
                    List<MyBeatDC> MyBeatDCs = new List<MyBeatDC>();
                    if (BeatCustomer.customers != null && BeatCustomer.customers.Any())
                    {
                        DataTable NotvisitedCustdt = new DataTable();
                        NotvisitedCustdt.Columns.Add("IntValue");
                        foreach (var item in BeatCustomer.customers)
                        {
                            DataRow dr = NotvisitedCustdt.NewRow();
                            dr[0] = item;
                            NotvisitedCustdt.Rows.Add(dr);
                        }
                        //DataTable orderdays = new DataTable();
                        //orderdays.Columns.Add("IntValue");
                        //foreach (var item in obj.OrderDays)
                        //{
                        //    DataRow dr = orderdays.NewRow();
                        //    dr[0] = item;
                        //    orderdays.Rows.Add(dr);
                        //}

                        var param1 = new SqlParameter("peopleid", obj.PeopleId);
                        var param2 = new SqlParameter("warehouseId", obj.warehouseId);
                        var param3 = new SqlParameter("Day", obj.Day);
                        var param4 = new SqlParameter("KeyValue", obj.KeyValue);
                        var param5 = new SqlParameter("GroupId", obj.GroupId);
                        var param6 = new SqlParameter("SubGroupId", obj.SubGroupId);
                        var param7 = new SqlParameter("OrderDays", obj.OrderDays);
                        //var param7 = new SqlParameter("OrderDays", orderdays);
                        //param7.SqlDbType = SqlDbType.Structured;
                        //param7.TypeName = "dbo.IntValues";

                        var param8 = new SqlParameter("skip", obj.skip);
                        var param9 = new SqlParameter("take", obj.take);
                        var param10 = new SqlParameter("ExecutiveLat", obj.lat);
                        var param11 = new SqlParameter("ExecutiveLg", obj.lg);
                        var param12 = new SqlParameter("BeatAllCustomers", NotvisitedCustdt);
                        param12.SqlDbType = SqlDbType.Structured;
                        param12.TypeName = "dbo.IntValues";

                        var cmd = authContext.Database.Connection.CreateCommand();
                        //cmd.CommandText = Isdigitalexecutive ? "GetExecutiveMyBeatDigital" : "[dbo].[GetExecutiveMyBeat]";
                        cmd.CommandText = "[dbo].[GetExecutiveMyBeat]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add(param1);
                        cmd.Parameters.Add(param2);
                        cmd.Parameters.Add(param3);
                        cmd.Parameters.Add(param4);
                        cmd.Parameters.Add(param5);
                        cmd.Parameters.Add(param6);
                        cmd.Parameters.Add(param7);
                        cmd.Parameters.Add(param8);
                        cmd.Parameters.Add(param9);
                        cmd.Parameters.Add(param10);
                        cmd.Parameters.Add(param11);
                        cmd.Parameters.Add(param12);
                        var reader = cmd.ExecuteReader();
                        MyBeatDCs = ((IObjectContextAdapter)authContext)
                        .ObjectContext
                        .Translate<MyBeatDC>(reader).ToList();
                        reader.NextResult();
                        if (reader.Read())
                        {
                            if (BeatCustomer.Customertype == 0)
                            {
                                res.NonVisitCount = Convert.ToInt32(reader["Totalcount"]);
                                res.NoVisitMyBeatDCs = MyBeatDCs;
                            }
                            else
                            {
                                res.VisitCount = Convert.ToInt32(reader["Totalcount"]);
                                res.MyBeatDCs = MyBeatDCs;
                            }
                        }

                    }
                });



                if (parellelResult.IsCompleted)
                {
                    List<int> CustomerIds = new List<int>();
                    if (BeatCustomers.Any(x => x.Customertype == 1))
                        CustomerIds.AddRange(res.MyBeatDCs.Select(x => x.CustomerId).ToList());

                    if (BeatCustomers.Any(x => x.Customertype == 0))
                        CustomerIds.AddRange(res.NoVisitMyBeatDCs.Select(x => x.CustomerId).ToList());
                    CustomerIds = CustomerIds.Distinct().ToList();
                    var CustomerIdslist = new System.Data.DataTable();
                    var CustIds = new System.Data.DataTable();
                    CustomerIdslist.Columns.Add("IntValue");
                    CustIds.Columns.Add("IntValue");
                    foreach (var item in CustomerIds)
                    {
                        var dr = CustomerIdslist.NewRow();
                        dr["IntValue"] = item;
                        CustomerIdslist.Rows.Add(dr);

                        var dr1 = CustIds.NewRow();
                        dr1["IntValue"] = item;
                        CustIds.Rows.Add(dr1);
                    }
                    var CIds = new SqlParameter("CustomerIds", CustomerIdslist);
                    CIds.SqlDbType = System.Data.SqlDbType.Structured;
                    CIds.TypeName = "dbo.IntValues";

                    var CustIdParam = new SqlParameter("CustomerIds", CustIds);
                    CustIdParam.SqlDbType = System.Data.SqlDbType.Structured;
                    CustIdParam.TypeName = "dbo.IntValues";
                    CustSalesGrouplist = await authContext.Database.SqlQuery<SalesGroupDc>("exec GetGroupListByCustomerIDList  @CustomerIds", CIds).ToListAsync();
                    CustomerRemarkList = await authContext.Database.SqlQuery<InsertCustomerRemarksDC>("exec GetCutomerRemarkByCustomerIDList  @CustomerIds", CustIdParam).ToListAsync();

                    List<string> SkCodeList = new List<string>();

                    if (BeatCustomers.Any(x => x.Customertype == 1))
                        SkCodeList.AddRange(res.MyBeatDCs.Select(y => y.Skcode).ToList());
                    if (BeatCustomers.Any(x => x.Customertype == 0))
                        SkCodeList.AddRange(res.NoVisitMyBeatDCs.Select(y => y.Skcode).ToList());

                    SkCodeList = SkCodeList.Distinct().ToList();
                    var TagData = await CRMCustomerTag(SkCodeList);

                    if (BeatCustomers.Any(x => x.Customertype == 1))
                    {
                        res.MyBeatDCs = res.MyBeatDCs.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                        {
                            Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                            CustomerId = x.FirstOrDefault().CustomerId,
                            CustomerName = x.FirstOrDefault().CustomerName,
                            OrderCount = x.FirstOrDefault().OrderCount,
                            MTDSales = x.FirstOrDefault().MTDSales,
                            PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                            Skcode = x.FirstOrDefault().Skcode,
                            Mobile = x.FirstOrDefault().Mobile,
                            ShopName = x.FirstOrDefault().ShopName,
                            ShippingAddress = x.FirstOrDefault().ShippingAddress,
                            CustomerVerify = x.FirstOrDefault().CustomerVerify,
                            lat = x.FirstOrDefault().lat,
                            lg = x.FirstOrDefault().lg,
                            Active = x.FirstOrDefault().Active,
                            LastOrderDate = x.FirstOrDefault().LastOrderDate,
                            LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                            WarehouseId = x.FirstOrDefault().WarehouseId,
                            Distance = x.FirstOrDefault().Distance,
                            IsReschedule = x.FirstOrDefault().IsReschedule,
                            IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                            CheckIn = x.FirstOrDefault().CheckIn,
                            IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                            IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                            IsBeatEdit = BeatEdit,
                            SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<SalesGroupDc>(),
                            CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<InsertCustomerRemarksDC>(),
                            IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false,
                            IsVisited = false,
                            CRMTag = TagData.FirstOrDefault(y => y.Skcode == x.FirstOrDefault().Skcode)?.CRMTags,
                            LastVisitDaysAgo = (todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null) != null ?
                                            (DateTime.Now.Date - Convert.ToDateTime(todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null).Date).Days :
                                            x.FirstOrDefault().CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(x.FirstOrDefault().CheckIn).Date).Days : 90, //TODO:SalesAppMarch2023
                            CustomerType = x.FirstOrDefault().CustomerType,
                        }).ToList();

                        //if (obj.VisitDays != null && obj.VisitDays.Any())
                        //{
                        //    res.MyBeatDCs = res.MyBeatDCs.Where(x =>
                        //                           (obj.VisitDays.Contains(10) && x.LastVisitDaysAgo >= 0 && x.LastVisitDaysAgo <= 10)
                        //                        || (obj.VisitDays.Contains(30) && x.LastVisitDaysAgo >= 11 && x.LastVisitDaysAgo <= 30)
                        //                        || (obj.VisitDays.Contains(60) && x.LastVisitDaysAgo >= 31 && x.LastVisitDaysAgo <= 60)
                        //                        || (obj.VisitDays.Any(y => y >= 61) && x.LastVisitDaysAgo >= 61)).ToList();
                        //    res.VisitCount = res.MyBeatDCs.Any() && res.MyBeatDCs.Count > 0 ? res.VisitCount : 0;
                        //}

                    }

                    if (BeatCustomers.Any(x => x.Customertype == 0))
                    {
                        res.NoVisitMyBeatDCs = res.NoVisitMyBeatDCs.GroupBy(x => x.CustomerId).Select(x => new MyBeatDC
                        {
                            Day = VisitCustList.Any(y => y.CustomerId == x.Key) ? VisitCustList.FirstOrDefault(y => y.CustomerId == x.Key).Day : "NoBeat",
                            CustomerId = x.FirstOrDefault().CustomerId,
                            CustomerName = x.FirstOrDefault().CustomerName,
                            OrderCount = x.FirstOrDefault().OrderCount,
                            MTDSales = x.FirstOrDefault().MTDSales,
                            PendingOrderCount = x.FirstOrDefault().PendingOrderCount,
                            Skcode = x.FirstOrDefault().Skcode,
                            Mobile = x.FirstOrDefault().Mobile,
                            ShopName = x.FirstOrDefault().ShopName,
                            ShippingAddress = x.FirstOrDefault().ShippingAddress,
                            CustomerVerify = x.FirstOrDefault().CustomerVerify,
                            lat = x.FirstOrDefault().lat,
                            lg = x.FirstOrDefault().lg,
                            Active = x.FirstOrDefault().Active,
                            LastOrderDate = x.FirstOrDefault().LastOrderDate,
                            LastOrderDaysAgo = x.FirstOrDefault().LastOrderDaysAgo,
                            WarehouseId = x.FirstOrDefault().WarehouseId,
                            Distance = x.FirstOrDefault().Distance,
                            IsReschedule = x.FirstOrDefault().IsReschedule,
                            IsCustomerUpdate = x.FirstOrDefault().IsCustomerUpdate,
                            CheckIn = x.FirstOrDefault().CheckIn,
                            IsVerifyRequestPending = x.FirstOrDefault().IsVerifyRequestPending,
                            IsCustomerProfileEdit = x.FirstOrDefault().IsCustomerProfileEdit,
                            IsBeatEdit = BeatEdit,
                            SalesGroupDcs = CustSalesGrouplist.Any(y => y.CustomerId == x.Key) ? CustSalesGrouplist.Where(y => y.CustomerId == x.Key).ToList() : new List<SalesGroupDc>(),
                            CustomerRemarksDCs = CustomerRemarkList.Any(y => y.CustomerId == x.Key) ? CustomerRemarkList.Where(y => y.CustomerId == x.Key).ToList() : new List<InsertCustomerRemarksDC>(),
                            IsBeat = (today.ToString("dddd").ToUpper() == obj.Day.ToUpper()) ? true : false,
                            IsVisited = false,
                            CRMTag = TagData.FirstOrDefault(y => y.Skcode == x.FirstOrDefault().Skcode)?.CRMTags,
                            LastVisitDaysAgo = (todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null) != null ?
                                                (DateTime.Now.Date - Convert.ToDateTime(todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? ActualRoutes.FirstOrDefault(y => y.CustomerId == x.FirstOrDefault().CustomerId)?.CheckIn : null).Date).Days :
                                                x.FirstOrDefault().CheckIn != null ? (DateTime.Now.Date - Convert.ToDateTime(x.FirstOrDefault().CheckIn).Date).Days : 90, //TODO:SalesAppMarch2023
                            CustomerType = x.FirstOrDefault().CustomerType,
                        }).ToList();

                        //if (obj.VisitDays != null && obj.VisitDays.Any())
                        //{
                        //    res.NoVisitMyBeatDCs = res.NoVisitMyBeatDCs.Where(x =>
                        //                           (obj.VisitDays.Contains(10) && x.LastVisitDaysAgo >= 0 && x.LastVisitDaysAgo <= 10)
                        //                        || (obj.VisitDays.Contains(30) && x.LastVisitDaysAgo >= 11 && x.LastVisitDaysAgo <= 30)
                        //                        || (obj.VisitDays.Contains(60) && x.LastVisitDaysAgo >= 31 && x.LastVisitDaysAgo <= 60)
                        //                        || (obj.VisitDays.Any(y => y >= 61) && x.LastVisitDaysAgo >= 61)).ToList();
                        //    res.NonVisitCount = res.NoVisitMyBeatDCs.Any() && res.NoVisitMyBeatDCs.Count > 0 ? res.NonVisitCount : 0;
                        //}


                    }
                }
                res.IsBeatEdit = BeatEdit;
            }
            return res;
        }

        [Route("GetTargetBeatDashboard")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<MainDashboardDc> GetTargetBeatDashboard(int PeopleId, int WarehouseId)
        {
            BeatsManager manager = new BeatsManager();
            MainDashboardDc dash = new MainDashboardDc();

            using (var Context = new AuthContext())
            {
                MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                var today = DateTime.Now.Date;
                var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
                var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == today);
                var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == today.AddDays(-1)).FirstOrDefault();


                SalesAppManager salesAppManager = new SalesAppManager();

                //if (Context.Database.Connection.State != ConnectionState.Open)
                //    Context.Database.Connection.Open();

                //var peopleId = new SqlParameter("@peopleId", PeopleId);
                //List<SalesAllBeatDc> allBeat = Context.Database.SqlQuery<SalesAllBeatDc>("exec GetExecutiveAllBeat @peopleId", peopleId).ToList();

                var customerids = MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => x.CustomerId).ToList();
                var Todaycustomerids = todayBeat != null && todayBeat.PlannedRoutes != null ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                var res = salesAppManager.GetBeatTargetDashboardData(PeopleId, WarehouseId, customerids, Todaycustomerids);


                //-----------------mtd data----
                List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                //MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                //list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);

                MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();

                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = Context.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));


                if (Isdigitalexecutive)
                {
                    //List<DigitalSalesBeatDSR> DigitalSaleslist = new List<DigitalSalesBeatDSR>();
                    //MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
                    var digitallist = DigitalDSRmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                    list = Mapper.Map(digitallist).ToANew<List<SalesDashboardTodayMTDData>>();
                }
                else
                {
                    //List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                    //MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                    list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                }


                var yesterdaydt = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd 23:59:59");
                var yesterdayBeatDashboard = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate >= (today.AddDays(-1)) && x.CreatedDate <= Convert.ToDateTime(yesterdaydt)).FirstOrDefault();

                TodaySaleDc todayObj = new TodaySaleDc();
                todayObj.TodaySales = res.sales.TodaySales == 0 ? 0 : res.sales.TodaySales;
                todayObj.TodayTargetSales = res.TargetSales == null ? 0 : res.TargetSales.TodayTargetSales;
                if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any())
                {
                    todayObj.TodayTotalVisitBeatCustomer = res.sales.TotalProductiveCustomer;// todayBeat.PlannedRoutes.Where(x => x.IsVisited).Count(); 
                    todayObj.TodayTotalBeatCustomer = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                }

                MTDSaleDc MTDObj = new MTDSaleDc();
                MTDObj.MTDSales = res.sales.MTDSales;
                MTDObj.MTDTargetSales = res.TargetSales == null ? 0 : res.TargetSales.MTDTargetSales;
                if (MonthBeat.Count > 0 && MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Any())
                {
                    MTDObj.MTDTotalVisitBeatCustomer = list.Select(x => x.ProductiveCall).Sum() + res.sales.TotalProductiveCustomer;// MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Where(x => x.IsVisited).Select(x => x.CustomerId).Count();
                    MTDObj.MTDTotalBeatCustomer = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count() + list.Select(x => x.VisitPlanned).Sum() : list.Select(x => x.VisitPlanned).Sum();   // MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes.Select(y => y.CustomerId)).Distinct().Count();
                }

                YesterdaySaleDC Yesobj = new YesterdaySaleDC();
                Yesobj.YesterdaySales = res.sales.YesterdaySales == 0 ? 0 : res.sales.YesterdaySales;
                Yesobj.YesterdayTargetSales = YesterdayBeat != null && YesterdayBeat.TodayTarget.HasValue ? YesterdayBeat.TodayTarget.Value : 0;
                if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any())
                {
                    Yesobj.YesterdayTotalVisitBeatCustomer = yesterdayBeatDashboard != null ? yesterdayBeatDashboard.ProductiveCall : 0;
                    Yesobj.YesterdayTotalBeatCustomer = YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                }
                dash.TodaySaleDcs = todayObj;
                dash.MTDSaleDcs = MTDObj;
                dash.YesterdaySaleDCs = Yesobj;
            }
            return dash;
        }

        [Route("BeatDashboardDetail")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<DashboardDc> BeatDashboardDetail(int PeopleId, int flag, int WarehouseId, bool IsJobflag = false)
        {
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            DigitalSalesBeatDSR DSR = new DigitalSalesBeatDSR();

            long? storeId = 0;

            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DashboardDc dash = new DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date.AddDays(1).AddMilliseconds(-1);
            var currentDate = DateTime.Now.Date;
            //var today = temp;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
            var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == currentDate);
            var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == currentDate.AddDays(-1)).FirstOrDefault();

            //---- get dashboard data from mongo---
            List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
            // MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
            // list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);

            using (var Context = new AuthContext())
            {

                var channeldata = (from cs in Context.ClusterStoreExecutives
                                   join c in Context.ChannelMasters
                                   on cs.ChannelMasterId equals c.ChannelMasterId
                                   where cs.IsActive == true && cs.IsDeleted == false && c.Active == true && c.Deleted == false
                                   && cs.ExecutiveId == PeopleId
                                   select new
                                   {
                                       c.ChannelMasterId,c.ChannelType
                                   }).FirstOrDefault();

                string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                var role = Context.Database.SqlQuery<string>(query).ToList();
                bool Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));

                if (Isdigitalexecutive && channeldata.ChannelType.ToUpper() == "DIGITAL")
                {
                    //List<DigitalSalesBeatDSR> DigitalSaleslist = new List<DigitalSalesBeatDSR>();
                    MongoDbHelper<DigitalSalesBeatDSR> DigitalDSRmongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
                    var digitallist = DigitalDSRmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                    list = Mapper.Map(digitallist).ToANew<List<SalesDashboardTodayMTDData>>();
                }
                else if (!Isdigitalexecutive && channeldata.ChannelType.ToUpper() != "DIGITAL")
                {
                    //List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                    MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                    list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == PeopleId && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);
                }

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                //var peopleId = new SqlParameter("@peopleId", PeopleId);
                //List<SalesAllBeatDc> allBeat = Context.Database.SqlQuery<SalesAllBeatDc>("exec GetExecutiveAllBeat @peopleId", peopleId).ToList();
                BeatCustomerDc Beat = new BeatCustomerDc();

                Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();
                Beat.YesterdayBeatCustomerIds = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ?
                        YesterdayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                Beat.MonthBeatCustomerIds = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ?
                        MonthBeat.SelectMany(x => x.PlannedRoutes).Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();


                // repeat: //goto statment for job

                DataTable IdDt = new DataTable();
                List<int> ActualCustomerVisited = new List<int>();
                IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");


                DataTable VisitedCustomersdt = new DataTable();
                VisitedCustomersdt = new DataTable();
                VisitedCustomersdt.Columns.Add("IntValue");

                if (flag == 1)
                {
                    if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any() && Beat.TodayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();

                }
                MTDSaleDc mtdObj = new MTDSaleDc();
                if (flag == 2)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any() && Beat.TodayBeatCustomerIds.Count > 0)
                    {

                        foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    //ActualCustomerVisited = MonthBeat != null && MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes) != null && MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).Any() ? MonthBeat.Where(x => x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).Select(x => x.CustomerId).ToList() : new List<int>();
                    ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();


                }
                YesterdaySaleDC YestObj = new YesterdaySaleDC();
                if (flag == 3)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                    if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any() && Beat.YesterdayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }

                    ActualCustomerVisited = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                }

                if (IdDt == null)
                {
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");
                }
                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 1200;
                cmd.CommandText = "[dbo].[SpDashBoardDetailNew]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var param4 = new SqlParameter("PersonId", PeopleId);
                var param5 = new SqlParameter("CustIdDs", IdDt);
                var param6 = new SqlParameter("Flag", flag);
                var param8 = new SqlParameter("WarehouseId", WarehouseId);
                //var param9 = new SqlParameter("Temp", temp);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param6);
                cmd.Parameters.Add(param8);
                //cmd.Parameters.Add(param9);


                var reader = cmd.ExecuteReader();
                dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                if (dashboardDetail != null && flag == 1)
                {
                    TodayDashboardDc ToObj = new TodayDashboardDc();
                    ToObj.TodayBeatSales = dashboardDetail.BeatSales;
                    ToObj.TodayExtraSales = dashboardDetail.ExtraSales;
                    ToObj.TodayBeatOrder = dashboardDetail.BeatOrder;
                    ToObj.TodayTotalSales = dashboardDetail.TotalSales;
                    ToObj.TodayProductiveCall = dashboardDetail.ProductiveCall;
                    int SuccessPhoneOrder = 0;
                    if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                    {
                        SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                        ToObj.TodayVisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                        ToObj.TodayTotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                        ToObj.TodayOutletCoverage = Math.Round((Convert.ToDouble(ToObj.TodayTotalCall) / ToObj.TodayVisitPlanned) * 100, 2);
                        ToObj.PhoneOrder = SuccessPhoneOrder;
                    }
                    else
                    {
                        ToObj.TodayVisitPlanned = 0;
                        ToObj.TodayTotalCall = 0;
                        ToObj.TodayOutletCoverage = 0;
                    }
                    if (ToObj.TodayTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        ToObj.TodayStrikeRate = Math.Round((Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100, 2);
                    }
                    //var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    // ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                    List<int> PlanCustIds = new List<int>();
                    if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = todayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }
                    ToObj.TodayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0;
                    ToObj.TodayExtraCall = dashboardDetail.ExtraCall;
                    ToObj.TodayExtraOrder = dashboardDetail.ExtraOrder;
                    ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                    ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                    ToObj.Eco = dashboardDetail.Eco;
                    ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                    ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;

                    dash.TodayDashboardDcs = ToObj;
                }
                if (dashboardDetail != null && flag == 2)
                {
                    MTDDashboardDc MTDObj = new MTDDashboardDc();
                    MTDObj.MTDBeatSales = list.Select(x => x.BeatSales).Sum() + dashboardDetail.BeatSales;
                    MTDObj.MTDBeatOrder = list.Select(x => x.BeatOrder).Sum() + dashboardDetail.BeatOrder;
                    MTDObj.MTDExtraSales = list.Select(x => x.ExtraSales).Sum() + dashboardDetail.ExtraSales;
                    MTDObj.MTDTotalSales = list.Select(x => x.TotalSales).Sum() + dashboardDetail.TotalSales;
                    MTDObj.MTDProductiveCall = list.Select(x => x.ProductiveCall).Sum() + dashboardDetail.ProductiveCall;

                    int SuccessPhoneOrder = 0;
                    if (MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any())
                    {
                        SuccessPhoneOrder = list.Select(x => x.PhoneOrder).Sum();
                        MTDObj.MTDVisitPlanned = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? (list.Select(x => x.VisitPlanned).Sum() + todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count()) : list.Select(x => x.VisitPlanned).Sum();
                        MTDObj.MTDTotalCall = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? (list.Select(x => x.TotalCall).Sum() + todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count()) : list.Select(x => x.TotalCall).Sum();
                        MTDObj.MTDOutletCoverage = Math.Round((Convert.ToDouble(MTDObj.MTDTotalCall) / MTDObj.MTDVisitPlanned) * 100, 2);
                    }
                    else
                    {
                        MTDObj.MTDVisitPlanned = 0;
                        MTDObj.MTDTotalCall = 0;
                        MTDObj.MTDOutletCoverage = 0;
                    }
                    if (MTDObj.MTDTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        MTDObj.MTDStrikeRate = Math.Round(Convert.ToDouble(MTDObj.MTDProductiveCall) / (MTDObj.MTDTotalCall + SuccessPhoneOrder) * 100, 2);
                    }
                    //var planCustomers = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ? MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => new { CustomerId=x.CustomerId }).Distinct().ToList() : new List<int>();
                    //var planCustomers = MonthBeat.Where(x => x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).Select(x => new { CustomerId=x.CustomerId }).ToList();
                    List<int> PlanCustIds = new List<int>();
                    if (todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = todayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }

                    MTDObj.MTDExtraVisit = list.Select(x => x.ExtraVisit).Sum() + (ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0); //ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                    MTDObj.MTDExtraCall = list.Select(x => x.ExtraCall).Sum() + dashboardDetail.ExtraCall;
                    MTDObj.MTDExtraOrder = list.Select(x => x.ExtraOrder).Sum() + dashboardDetail.ExtraOrder;
                    MTDObj.MTDAvgOrderValue = dashboardDetail.AvgOrderValue;
                    MTDObj.MTDAvgLineItem = dashboardDetail.AvgLineItem;
                    MTDObj.MTDEco = dashboardDetail.Eco;
                    MTDObj.MTDPerfactOrder = list.Select(x => x.TodayPerfactOrder).Sum() + dashboardDetail.PerfactOrder;
                    MTDObj.MTDSupperOrder = list.Select(x => x.TodaySupperOrder).Sum() + dashboardDetail.SupperOrder;
                    dash.MTDDashboardDcs = MTDObj;
                }
                if (dashboardDetail != null && flag == 3)
                {
                    YesterdayDashboardDc YesObj = new YesterdayDashboardDc();
                    YesObj.YesterdayBeatSales = dashboardDetail.BeatSales;
                    YesObj.YesterdayBeatOrder = dashboardDetail.BeatOrder;
                    YesObj.YesterdayExtraSales = dashboardDetail.ExtraSales;
                    YesObj.YesterdayTotalSales = dashboardDetail.TotalSales;
                    YesObj.YesterdayProductiveCall = dashboardDetail.ProductiveCall;
                    int SuccessPhoneOrder = 0;
                    if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes.Count() > 0)
                    {
                        SuccessPhoneOrder = YesterdayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder == true).Count();

                        YesObj.YesterdayVisitPlanned = YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                        YesObj.YesterdayTotalCall = YesterdayBeat.PlannedRoutes.Where(y => y.IsVisited == true).Count();
                        YesObj.YesterdayOutletCoverage = Math.Round((Convert.ToDouble(YesObj.YesterdayTotalCall) / YesObj.YesterdayVisitPlanned) * 100, 2);
                    }
                    else
                    {
                        YesObj.YesterdayVisitPlanned = 0;
                        YesObj.YesterdayTotalCall = 0;
                        YesObj.YesterdayOutletCoverage = 0;
                    }
                    if (YesObj.YesterdayTotalCall > 0 || SuccessPhoneOrder > 0)
                    {
                        YesObj.YesterdayStrikeRate = Math.Round(Convert.ToDouble(YesObj.YesterdayProductiveCall) / (YesObj.YesterdayTotalCall + SuccessPhoneOrder) * 100, 2);
                    }
                    //var planCustomers = YesterdayBeat != null && YesterdayBeat.PlannedRoutes.Any() ? YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                    List<int> PlanCustIds = new List<int>();
                    if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Count > 0)
                    {
                        var planCustomers = YesterdayBeat.PlannedRoutes.Select(x => new { CustomerId = x.CustomerId }).ToList();
                        PlanCustIds = planCustomers.Where(x => x.CustomerId > 0).Select(x => x.CustomerId).ToList();
                    }

                    YesObj.YesterdayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !PlanCustIds.Contains(x)) : 0;
                    YesObj.YesterdayExtraCall = dashboardDetail.ExtraCall;
                    YesObj.YesterdayExtraOrder = dashboardDetail.ExtraOrder;
                    YesObj.YesterdayPerfactOrder = dashboardDetail.PerfactOrder;
                    YesObj.YesterdaySupperOrder = dashboardDetail.SupperOrder;
                    dash.YesterdayDashboardDcs = YesObj;
                }
                if (IsJobflag)
                {
                    ////------------------job----------------

                    mongoObj.WarehouseId = WarehouseId;
                    mongoObj.SalesPersonId = PeopleId;
                    mongoObj.ChannelMatserId = channeldata.ChannelMasterId;
                    mongoObj.ChannelName = channeldata.ChannelType;
                    mongoObj.StoreId = Convert.ToInt32(storeId);
                    mongoObj.BeatSales = dash.TodayDashboardDcs.TodayBeatSales;
                    mongoObj.VisitPlanned = dash.TodayDashboardDcs.TodayVisitPlanned;
                    mongoObj.TotalCall = dash.TodayDashboardDcs.TodayTotalCall;
                    mongoObj.ProductiveCall = dash.TodayDashboardDcs.TodayProductiveCall;
                    mongoObj.BeatOrder = dash.TodayDashboardDcs.TodayBeatOrder;
                    mongoObj.ExtraVisit = dash.TodayDashboardDcs.TodayExtraVisit;
                    mongoObj.ExtraCall = dash.TodayDashboardDcs.TodayExtraCall;
                    mongoObj.ExtraOrder = dash.TodayDashboardDcs.TodayExtraOrder;
                    mongoObj.ExtraSales = dash.TodayDashboardDcs.TodayExtraSales;
                    mongoObj.OutletCoverage = dash.TodayDashboardDcs.TodayOutletCoverage;
                    mongoObj.StrikeRate = dash.TodayDashboardDcs.TodayStrikeRate;
                    mongoObj.TotalSales = dash.TodayDashboardDcs.TodayTotalSales;
                    mongoObj.TodayTarget = todayBeat != null ? todayBeat.TodayTarget : 0;
                    mongoObj.TodayPerfactOrder = dash.TodayDashboardDcs.TodayPerfactOrder;
                    mongoObj.TodaySupperOrder = dash.TodayDashboardDcs.TodaySupperOrder;
                    mongoObj.PhoneOrder = dash.TodayDashboardDcs.PhoneOrder;
                    mongoObj.ECO = dash.TodayDashboardDcs.Eco;
                    mongoObj.AvgLineItem = dash.TodayDashboardDcs.AvgLineItem;
                    mongoObj.AvgOrderValue = dash.TodayDashboardDcs.AvgOrderValue;
                    mongoObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;
                    var res = InsertDashboardJobinMongo(mongoObj, Context);
                    ////------------------job----------------
                }

            }
            return dash;
        }

        [HttpGet]
        [Route("ClusterCityWise")]
        [AllowAnonymous]
        public List<ClusterDc> GetClusterCityWise(int cityid)
        {
            using (AuthContext db = new AuthContext())
            {
                List<ClusterDc> cluster = new List<ClusterDc>();
                cluster = db.Clusters.Where(a => a.CityId == cityid && a.Deleted == false && a.Active == true).Select(x => new ClusterDc
                {
                    ClusterId = x.ClusterId,
                    ClusterName = x.ClusterName
                }).ToList();
                return cluster;
            }
        }

        [Route("BeatReSchedule")]
        [HttpPost]
        public APIResponse BeatReschedule(RescheduleBeatDC obj)
        {
            APIResponse res = new APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsReschedule k = new CustomerExecutiveMappingsReschedule();

                var today = DateTime.Now.Date;
                string DayChk = today.DayOfWeek.ToString();
                if (DayChk == obj.Day)
                {
                    res.Status = false;
                    res.Message = "Please select different day";
                    return res;
                }
                //var query = string.Format("exec IsSalesAppLead {0}", obj.ExecutiveId);
                //var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                long? storeId = null;
                //if (isSalesLead == 0)
                {
                    storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.ExecutiveId && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                    if (!storeId.HasValue)
                    {
                        res.Status = false;
                        res.Message = "Store not assign.";
                        return res;
                    }
                }
                //else
                //    storeId = 1;

                var BeatCheck = context.CustomerExecutiveMappingsRescheduleDb.FirstOrDefault(x => x.CustomerId == obj.CustomerID && x.StoreId == storeId.Value);
                if (BeatCheck == null)
                {
                    k.CustomerId = obj.CustomerID;
                    k.ExecutiveId = obj.ExecutiveId;
                    k.StartDate = obj.StartDate;
                    k.StoreId = Convert.ToInt32(storeId.Value);
                    k.IsReschedule = true;
                    k.IsActive = true;
                    k.IsDeleted = false;
                    k.CreatedDate = DateTime.Now;
                    k.ModifiedDate = DateTime.Now;
                    k.CreatedBy = obj.ExecutiveId;
                    k.ModifiedBy = obj.ExecutiveId;
                    k.Day = obj.StartDate.ToString("dddd");

                    context.CustomerExecutiveMappingsRescheduleDb.Add(k);
                    if (context.Commit() > 0)
                    {
                        res.Status = true;
                        res.Message = "Saved Successfully";
                    }
                }
                else
                {
                    BeatCheck.StartDate = obj.StartDate;
                    BeatCheck.StoreId = Convert.ToInt32(storeId.Value);
                    BeatCheck.IsReschedule = true;
                    BeatCheck.IsActive = true;
                    BeatCheck.IsDeleted = false;
                    BeatCheck.ModifiedDate = DateTime.Now;
                    BeatCheck.ModifiedBy = obj.ExecutiveId;
                    BeatCheck.Day = obj.StartDate.ToString("dddd");
                    context.Entry(BeatCheck).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Status = true;
                        res.Message = "Saved Successfully";
                    }
                }
                return res;
            }
        }

        [Route("BulkBeatEdit")]
        [HttpPost]
        public bool BulkBeatEdit(List<BeatEditDc> obj)
        {
            bool result = false;
            //APIResponse res = new APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsBeatEdit k = new CustomerExecutiveMappingsBeatEdit();
                if (obj != null)
                {
                    var executiveid = obj.FirstOrDefault().ExecutiveId;
                    //var query = string.Format("exec IsSalesAppLead {0}", executiveid);
                    //var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();
                    List<long> storeIds = new List<long>();
                    //if (isSalesLead == 0)
                    {
                        long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == executiveid && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                        if (!storeId.HasValue)
                        {
                            return false;
                        }
                        storeIds.Add(storeId.Value);
                    }
                    //else
                    //{
                    //    storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList();
                    //}
                    var Customerids = obj.Select(x => x.CustomerID).ToList();
                    var ExecutiveBeatEdits = context.CustomerExecutiveMappingsBeatEditDb.Where(x => Customerids.Contains(x.CustomerId) && x.ExecutiveId == executiveid && storeIds.Contains(x.StoreId)).ToList();
                    foreach (var item in obj)
                    {
                        var BeatCheck = ExecutiveBeatEdits.Where(x => x.CustomerId == item.CustomerID).FirstOrDefault();
                        if (BeatCheck == null)
                        {
                            k = new CustomerExecutiveMappingsBeatEdit();
                            k.CustomerId = item.CustomerID;
                            k.ExecutiveId = item.ExecutiveId;
                            k.StartDate = DateTime.Now; //item.StartDate;
                            k.SkipDays = 0;
                            k.SkipWeeks = 0;
                            k.EvenOrOddWeek = "";
                            k.MonthWeek = 0;
                            k.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                            k.IsBeatEdit = true;
                            k.Day = item.Day.ToUpper() == "NOBEAT" ? "NoBeat" : item.Day;
                            k.IsActive = true;
                            k.IsDeleted = false;
                            k.CreatedDate = DateTime.Now;
                            k.ModifiedDate = DateTime.Now;
                            k.CreatedBy = item.ExecutiveId;
                            k.ModifiedBy = item.ExecutiveId;
                            context.CustomerExecutiveMappingsBeatEditDb.Add(k);
                        }
                        else
                        {
                            BeatCheck.StartDate = DateTime.Now; //item.StartDate;
                            BeatCheck.SkipDays = 0;
                            BeatCheck.SkipWeeks = 0;
                            BeatCheck.EvenOrOddWeek = "";
                            BeatCheck.MonthWeek = 0;
                            BeatCheck.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                            BeatCheck.IsActive = true;
                            BeatCheck.IsDeleted = false;
                            BeatCheck.IsBeatEdit = true;
                            BeatCheck.Day = item.Day.ToUpper() == "NOBEAT" ? "NoBeat" : item.Day; ;
                            BeatCheck.ModifiedDate = DateTime.Now;
                            BeatCheck.ModifiedBy = item.ExecutiveId;
                            context.Entry(BeatCheck).State = EntityState.Modified;
                        }
                        context.Commit();
                    }
                    result = true;
                }
                else
                {
                    result = false;
                }
                return result;
            }
        }
        [Route("UpdateBeat")]
        [HttpPost]
        public bool UpdateBeat(BeatEditDc obj)
        {
            bool result = false;
            //APIResponse res = new APIResponse();
            using (AuthContext context = new AuthContext())
            {
                CustomerExecutiveMappingsBeatEdit k = new CustomerExecutiveMappingsBeatEdit();
                if (obj != null)
                {
                    var query = string.Format("exec IsSalesAppLead {0}", obj.ExecutiveId);
                    var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();

                    List<long> storeIds = new List<long>();
                    if (isSalesLead == 0)
                    {
                        long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.ExecutiveId && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                        if (!storeId.HasValue)
                        {
                            return false;
                        }
                        storeIds.Add(storeId.Value);
                    }
                    else
                    {
                        storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList();
                    }
                    var BeatCheck = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerID && x.ExecutiveId == obj.ExecutiveId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    if (BeatCheck == null)
                    {
                        k.CustomerId = obj.CustomerID;
                        k.ExecutiveId = obj.ExecutiveId;
                        k.StartDate = DateTime.Now; //item.StartDate;
                        k.StoreId = Convert.ToInt32(storeIds.FirstOrDefault());
                        k.IsBeatEdit = true;
                        k.Day = obj.Day;
                        k.IsActive = true;
                        k.IsDeleted = false;
                        k.CreatedDate = DateTime.Now;
                        k.ModifiedDate = DateTime.Now;
                        k.CreatedBy = obj.ExecutiveId;
                        k.ModifiedBy = obj.ExecutiveId;
                        context.CustomerExecutiveMappingsBeatEditDb.Add(k);
                    }
                    else
                    {
                        BeatCheck.StartDate = DateTime.Now; //item.StartDate;
                        BeatCheck.Day = obj.Day;
                        BeatCheck.ModifiedDate = DateTime.Now;
                        BeatCheck.ModifiedBy = obj.ModifiedBy;
                        context.Entry(BeatCheck).State = EntityState.Modified;
                    }
                    context.Commit();
                    result = true;
                }
                else
                {
                    result = false;
                }
                return result;
            }
        }

        [Route("BulkBeatRemove")]
        [HttpPost]
        public APIResponse BulkBeatRemove(List<BeatEditDc> obj)
        {
            APIResponse res = new APIResponse();

            using (AuthContext context = new AuthContext())
            {
                if (obj != null)
                {
                    var customerids = obj.Select(x => x.CustomerID).ToList().Distinct();
                    var ExecutiveId = obj.FirstOrDefault().ExecutiveId;
                    var query = string.Format("exec IsSalesAppLead {0}", ExecutiveId);
                    var isSalesLead = context.Database.SqlQuery<int>(query).FirstOrDefault();

                    List<int> storeIds = new List<int>();
                    if (isSalesLead == 0)
                    {
                        var storeId = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == ExecutiveId && x.IsDeleted == false && x.IsActive == true).Select(x => x.StoreId).FirstOrDefault();
                        storeIds.Add(Convert.ToInt32(storeId));
                    }
                    else
                    {
                        storeIds = context.StoreDB.Where(x => x.IsActive).Select(x => x.Id).ToList().Select(x => Convert.ToInt32(x)).ToList();
                    }
                    //var StoreId = obj.FirstOrDefault().StoreID;
                    var Beatlist = context.CustomerExecutiveMappingsBeatEditDb.Where(x => customerids.Contains(x.CustomerId) && storeIds.Contains(x.StoreId) && ExecutiveId == x.ExecutiveId && x.IsActive == true && x.IsDeleted == false).ToList();
                    Beatlist = Beatlist.Count > 0 ? Beatlist : new List<CustomerExecutiveMappingsBeatEdit>();
                    #region previous process sales app face 1

                    //if (Beatlist.Count > 0)
                    //{
                    //    foreach (var BeatCheck in Beatlist)
                    //    {
                    //        if (BeatCheck != null)
                    //        {
                    //            BeatCheck.IsActive = false;
                    //            BeatCheck.IsDeleted = true;
                    //            BeatCheck.ModifiedDate = DateTime.Now;
                    //            BeatCheck.ModifiedBy = ExecutiveId;
                    //            context.Entry(BeatCheck).State = EntityState.Modified;
                    //        }
                    //    }
                    //    if (context.Commit() > 0)
                    //    {
                    //        res.Status = true;
                    //        res.Message = "Success";
                    //        return res;
                    //    }
                    //}
                    //else if (storeIds != null && storeIds.Any())
                    //{
                    //    var SystemBeatlist = context.CustomerExecutiveMappings.Where(x => storeIds.Contains(x.StoreId) && customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                    //    if (SystemBeatlist != null && SystemBeatlist.Any())
                    //    {
                    //        var insertobj = SystemBeatlist.GroupBy(x => x.CustomerId).Select(x => new CustomerExecutiveMappingsBeatEdit
                    //        {
                    //            Day = "Sunday",
                    //            CreatedBy = ExecutiveId,
                    //            CreatedDate = DateTime.Now,
                    //            CustomerId = x.Key,
                    //            ExecutiveId = ExecutiveId,
                    //            IsActive = true,
                    //            IsBeatEdit = true,
                    //            IsDeleted = false,
                    //            StartDate = DateTime.Now,
                    //            StoreId = Convert.ToInt32(x.FirstOrDefault().StoreId)
                    //        });
                    //        context.CustomerExecutiveMappingsBeatEditDb.AddRange(insertobj);
                    //        if (context.Commit() > 0)
                    //        {
                    //            res.Status = true;
                    //            res.Message = "Success";
                    //            return res;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        res.Status = false;
                    //        res.Message = "Beat Not Found";
                    //        return res;
                    //    }
                    //}
                    #endregion
                    #region sales app face 2


                    /*   if (Beatlist.Count > 0)
                       {
                           foreach (var BeatCheck in Beatlist)
                           {
                               if (BeatCheck != null)
                               {
                                   //BeatCheck.IsActive = false;
                                   //BeatCheck.IsDeleted = true;
                                   BeatCheck.Day = "NoBeat";
                                   BeatCheck.ModifiedDate = DateTime.Now;
                                   BeatCheck.ModifiedBy = ExecutiveId;
                                   context.Entry(BeatCheck).State = EntityState.Modified;
                               }
                           }*/
                    foreach (var beat in obj)
                    {
                        var BeatCheck = Beatlist.Where(x => x.CustomerId == beat.CustomerID && storeIds.Contains(x.StoreId)).FirstOrDefault();
                        if (BeatCheck == null)
                        {
                            CustomerExecutiveMappingsBeatEdit custExecMapBeatEdit = new CustomerExecutiveMappingsBeatEdit();
                            custExecMapBeatEdit.CustomerId = beat.CustomerID;
                            custExecMapBeatEdit.Day = "NoBeat";
                            custExecMapBeatEdit.ExecutiveId = beat.ExecutiveId;
                            custExecMapBeatEdit.StoreId = storeIds.FirstOrDefault();
                            custExecMapBeatEdit.StartDate = DateTime.Now;
                            custExecMapBeatEdit.IsBeatEdit = false;
                            custExecMapBeatEdit.IsActive = true;
                            custExecMapBeatEdit.IsDeleted = false;
                            custExecMapBeatEdit.CreatedBy = beat.ExecutiveId;
                            custExecMapBeatEdit.CreatedDate = DateTime.Now;
                            context.CustomerExecutiveMappingsBeatEditDb.Add(custExecMapBeatEdit);
                        }
                        else if (BeatCheck != null)
                        {
                            //BeatCheck.IsActive = false;
                            //BeatCheck.IsDeleted = true;
                            BeatCheck.Day = "NoBeat";
                            BeatCheck.ModifiedDate = DateTime.Now;
                            BeatCheck.ModifiedBy = ExecutiveId;
                            context.Entry(BeatCheck).State = EntityState.Modified;
                        }
                        context.Commit();
                    }
                    res.Status = true;
                    res.Message = "Success";
                    return res;

                    //}
                    /*else if (storeIds != null && storeIds.Any())
                    {
                        foreach (var sid in storeIds)
                        {
                            *//*var SystemBeatlist = context.CustomerExecutiveMappings.Where(x => x.StoreId == sid && customerids.Contains(x.CustomerId) && x.IsActive).ToList();
                            if (SystemBeatlist != null && SystemBeatlist.Any())
                            {
                                foreach (var item in SystemBeatlist)
                                {
                                    item.Day = "NoBeat";
                                    item.ModifiedDate = DateTime.Now;
                                    item.ModifiedBy = ExecutiveId;
                                    context.Entry(item).State = EntityState.Modified;
                                }

                            }*//*
                            //var re = Beatlist.ForEach();
                        }
                        if (context.Commit() > 0)
                        {
                            res.Status = true;
                            res.Message = "Success";
                            return res;
                        }
                    }*/
                    #endregion
                }
                else
                {
                    res.Status = false;
                    res.Message = "somthing went wrong";
                    return res;
                }
            }
            return res;
        }

        [Route("DayWiseShopCount")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<DayWiseShopCountDc>> DayWiseShopCount(int PeopleId)
        {
            List<DayWiseShopCountDc> DayWiseShop = new List<DayWiseShopCountDc>();
            var dayIndex = new List<string> { "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "NO BEAT" };
            using (var Context = new AuthContext())
            {
                //var query = string.Format("exec IsSalesAppLead {0}", PeopleId);
                //var isSalesLead = Context.Database.SqlQuery<int>(query).FirstOrDefault();
                //string SP = isSalesLead > 0 ? "GetExecutiveAllBeatDigital" : "GetExecutiveAllBeat";
                string SP = "GetExecutiveAllBeat";

                var peopleId = new SqlParameter("@peopleId", PeopleId);
                List<ExecutiveAllBeatDc> allBeat = Context.Database.SqlQuery<ExecutiveAllBeatDc>("exec " + SP + " @peopleId", peopleId).ToList();
                DayWiseShop = allBeat.GroupBy(x => x.day.ToUpper().Trim()).Select(x => new DayWiseShopCountDc { Day = x.Key, ShopCount = x.Count() }).OrderBy(e => dayIndex.IndexOf(e.Day.ToUpper())).ToList();
            }
            return DayWiseShop;
        }

        [HttpGet]
        [Route("ShowTargetData")]
        [AllowAnonymous]
        public List<SalesPersonTargetDc> salespersondashboard()
        {
            SalesPersonTargetDc salesPersonTargetData = new SalesPersonTargetDc();
            List<SalesPersonTargetDc> salesPersonTarget = new List<SalesPersonTargetDc>();
            using (var context = new AuthContext())
            {
                salesPersonTarget = context.Database.SqlQuery<SalesPersonTargetDc>("EXEC sp_SalesTargetupload").ToList();
                var peopleid = salesPersonTarget.Select(x => x.PeopleID).Distinct().ToList();
                foreach (var PId in peopleid)
                {
                    foreach (var item in salesPersonTarget)
                    {
                        if (PId == item.PeopleID)
                        {
                            salesPersonTargetData.PeopleID = item.PeopleID;
                            salesPersonTargetData.Name = item.Name;
                            salesPersonTargetData.NumPer = item.NumPer;
                            salesPersonTargetData.ClusterId = item.ClusterId;
                        }
                    }
                    salesPersonTarget.Add(salesPersonTargetData);
                }
                return salesPersonTarget;
            }
        }

        [HttpGet]
        [Route("GetCheckInStatus")]
        [AllowAnonymous]
        public async Task<APIResponse> GetCheckInStatus(int peopleId)
        {
            APIResponse res = new APIResponse();
            CheckInStatuDc obj = new CheckInStatuDc();
            res.Status = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            var todayBeats = mongoDbHelper.Select(x => x.PeopleId == peopleId && x.AssignmentDate == today);

            if (todayBeats != null && todayBeats.Count > 0 && todayBeats.FirstOrDefault().ActualRoutes != null)
            {
                var actualroute = todayBeats.FirstOrDefault().ActualRoutes.FirstOrDefault(x => x.CheckIn.HasValue && !x.CheckOut.HasValue);
                if (actualroute != null)
                {
                    obj.customerId = actualroute.CustomerId;
                    obj.SKCode = actualroute.Skcode;
                    obj.ShopName = actualroute.ShopName;
                    obj.CustomerType = actualroute.CustomerType;
                    res.Data = actualroute;
                    res.Status = true;
                    return res;
                }

            }
            return res;
        }

        [Route("DownloadTargetFileOld")]
        [HttpPost]
        public DataTable DownloadTargetFileOld(uploadtargetDTOdc obj)
        {
            using (var myContext = new AuthContext())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                DataTable DT = new DataTable();
                using (var connection = new SqlConnection(connectionString))
                {
                    if (obj.IsMonth == true)
                    {
                        using (var command = new SqlCommand("EXEC SpDownloadTargetFile @warehouseid,@storeid,@Month", connection))
                        {
                            command.Parameters.AddWithValue("@warehouseid", obj.warehouseid);
                            command.Parameters.AddWithValue("@storeid", obj.storeid);
                            command.Parameters.AddWithValue("@Month", obj.StartDate);

                            if (connection.State != ConnectionState.Open)
                                connection.Open();
                            SqlDataAdapter da = new SqlDataAdapter(command);
                            da.Fill(DT);
                            da.Dispose();
                            connection.Close();
                            return DT;
                        }
                    }
                    else
                    {
                        using (var command = new SqlCommand("EXEC SpDownloadDailytarget @warehouseid,@storeid,@startdate,@enddate", connection))
                        {
                            command.Parameters.AddWithValue("@warehouseid", obj.warehouseid);
                            command.Parameters.AddWithValue("@storeid", obj.storeid);
                            command.Parameters.AddWithValue("@startdate", obj.StartDate);
                            command.Parameters.AddWithValue("@enddate", obj.EndDate);
                            if (connection.State != ConnectionState.Open)
                                connection.Open();

                            SqlDataAdapter da = new SqlDataAdapter(command);
                            da.Fill(DT);
                            da.Dispose();
                            connection.Close();

                            return DT;
                        }
                    }
                }
            }
        }


        [Route("DownloadTargetFileOld2")]
        [HttpPost]
        public async Task<DataTable> DownloadTargetFileOld2s(uploadtargetDTOdc obj)
        {
            using (var myContext = new AuthContext())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                DataTable DT = new DataTable();
                using (var connection = new SqlConnection(connectionString))
                {
                    using (var command = new SqlCommand("EXEC DownloadSalesKpiFile @month,@year", connection))
                    {

                        command.Parameters.AddWithValue("@month", obj.StartDate.Month);
                        command.Parameters.AddWithValue("@year", obj.StartDate.Year);

                        if (connection.State != ConnectionState.Open)
                            connection.Open();

                        SqlDataAdapter da = new SqlDataAdapter(command);
                        da.Fill(DT);
                        da.Dispose();
                        connection.Close();
                        /*
                        if (DT != null && DT.Rows != null)
                        {

                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                int ExecutiveId = Convert.ToInt16(DT.Rows[i]["ExecutiveId"]);
                                string KpiName = Convert.ToString(DT.Rows[i]["SalesKpi"]);
                                int WarehouseId = Convert.ToInt16(DT.Rows[i]["WarehouseId"]);
                                var salesPeopleAchivement = await GetSalesPersonKPIAchievment(ExecutiveId, WarehouseId, obj.StartDate.Month, obj.StartDate.Year, KpiName);
                                if (salesPeopleAchivement != null)
                                {
                                    DT.Rows[i]["Achievement"] = Convert.ToString(salesPeopleAchivement);
                                }
                            }
                        }
                        */
                        return DT;
                    }
                }
            }
        }

        [Route("DownloadTargetFile")]
        [HttpPost]
        public async Task<List<DownloadTargetDataDC>> DownloadTargetFileAsync(uploadtargetDTOdc obj)
        {
            List<DownloadTargetDC> DownloadTargetList = new List<DownloadTargetDC>();
            List<DownloadTargetDataDC> downloadTargetDataList = new List<DownloadTargetDataDC>();
            ElasticSqlHelper<ElascticTargetMTD> elasticSqlMTDHelper = new ElasticSqlHelper<ElascticTargetMTD>();
            //ElasticSqlHelper<ElasticTargetMAC> elasticSqlMACHelper = new ElasticSqlHelper<ElasticTargetMAC>();
            ElasticSqlHelper<SalesPersonKpiElasticSuccssStoreData> elasticSqlSuccssStoreHelper = new ElasticSqlHelper<SalesPersonKpiElasticSuccssStoreData>();

            using (var myContext = new AuthContext())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                DataTable DT = new DataTable();
                using (var connection = new SqlConnection(connectionString))
                {
                    if (myContext.Database.Connection.State != ConnectionState.Open)
                        myContext.Database.Connection.Open();

                    var paramMonth = new SqlParameter("@month", obj.StartDate.Month);
                    var paramYear = new SqlParameter("@year", obj.StartDate.Year);


                    var cmd = myContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[DownloadSalesKpiFile]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(paramMonth);
                    cmd.Parameters.Add(paramYear);


                    var reader = cmd.ExecuteReader();
                    DownloadTargetList = ((IObjectContextAdapter)myContext).ObjectContext.Translate<DownloadTargetDC>(reader).ToList();

                }
            }
            if (DownloadTargetList != null && DownloadTargetList.Any())
            {

                var ExecutiveIds = DownloadTargetList.Select(x => x.ExecutiveId).Distinct().ToList();
                var StoreIds = DownloadTargetList.Select(x => x.StoreId).Distinct().ToList();

                DateTime startDate = new DateTime(obj.StartDate.Year, obj.StartDate.Month, 1);
                string sDate = startDate.ToString("yyyy-MM-dd");
                string eDate = startDate.Date.AddMonths(1).AddDays(1).ToString("yyyy-MM-dd");

                var achievedValMTD = (await elasticSqlMTDHelper.GetListAsync($"select count(distinct custid) custCount, sum(dispatchqty*price) dispatchamt,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  group by executiveid,storeid,clusterid")).ToList();
                //var achievedValMAC = (await elasticSqlMACHelper.GetListAsync($"select count(distinct custid) custCount,executiveid,storeid,clusterid from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  group by executiveid,storeid,clusterid")).ToList();

                achievedValMTD = achievedValMTD.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();
                //achievedValMAC = achievedValMAC.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();


                //success store
                var date = DateTime.Now;
                var isMonthComplete = false;
                if (date.Day < 6)
                {
                    isMonthComplete = true;
                    date = DateTime.Now.AddMonths(-1);
                }
                var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);
                var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();

                var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                            && s.TargetOnStores.Count > 0
                                            && s.TargetOnStores.Any(d => d.StoreId != -1),collectionName: DocumentName).ToList();
                List<CustStoreTargets> mongotargetOnStores = new List<CustStoreTargets>();
                foreach (var item in allTarget)
                {
                    foreach (var storeTarget in item.TargetOnStores)
                    {
                        mongotargetOnStores.Add(new CustStoreTargets
                        {
                            skcode = item.Skcode,
                            StoreId = storeTarget.StoreId,
                            Target = storeTarget.Target,
                            TargetLineItem = storeTarget.TargetLineItem
                        });
                    }

                }
               
                //mongoHelper.GetWithProjection(s => s.TargetOnStores!=null 
                //                        && s.TargetOnStores.Count>0 
                //                        && s.TargetOnStores.Any(d => d.StoreId != -1),
                //                       s => s.TargetOnStores.Select(d => new CustStoreTargets
                //                       {
                //                           skcode = s.Skcode,
                //                           StoreId = d.StoreId,
                //                           Target = d.Target,
                //                           TargetLineItem = d.TargetLineItem
                //                       }).ToList(), DocumentName).SelectMany(d => d).ToList();


                var querySuccessStore = $"select skcode, storeid,executiveid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') group by skcode,storeid,executiveid";
                var skCodeDataListSuccessStore = await elasticSqlSuccssStoreHelper.GetListAsync(querySuccessStore);
                skCodeDataListSuccessStore = skCodeDataListSuccessStore.Where(s => ExecutiveIds.Contains(s.executiveid)).ToList();


                ItemMasterManager manager = new ItemMasterManager();
                var configs = await manager.GetSalesPersonKPIConfigsForAchievement(obj.StartDate.Month, obj.StartDate.Year);
                foreach (var target in DownloadTargetList)
                {
                    target.Achievement = await GetSalesPersonKPIAchievment(target.StoreId, target.ExecutiveId, target.ClusterId, target.WarehouseId, target.SalesKpi, obj.StartDate.Month, obj.StartDate.Year, achievedValMTD, skCodeDataListSuccessStore.Where(d => d.executiveid == target.ExecutiveId && d.storeid == target.StoreId).ToList(), configs.Where(x => x.ExecutiveId == target.ExecutiveId && x.StoreId == target.StoreId && x.ClusterId == target.ClusterId && x.KpiName == target.SalesKpi).ToList(), mongotargetOnStores);

                }
                downloadTargetDataList = Mapper.Map(DownloadTargetList).ToANew<List<DownloadTargetDataDC>>();
            }
            return downloadTargetDataList;
        }
        public async Task<double?> GetSalesPersonKPIAchievment(long storeId, int peopleId, int clusterId, int warehouseId, string salesKpiName, int month, int year, List<ElascticTargetMTD> elasticTargetMtd, List<SalesPersonKpiElasticSuccssStoreData> elacticTargetSuccess, List<DataContracts.External.MobileExecutiveDC.SalesPersonKpiAndIncentiveAchivement> configs, List<CustStoreTargets> mongotargetOnStores)
        {
            List<SalesPersonKpiAchivementResponse> salesPersonKpi = new List<SalesPersonKpiAchivementResponse>();

            double achievedVal = 0;

            if (configs != null && configs.Any())
            {
                foreach (var item in configs.Where(x => x.ExecutiveId == peopleId && x.KpiName == salesKpiName && x.ClusterId == clusterId).GroupBy(s => new { s.KpiName, s.DisplayName, s.Type })) //configs.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type })
                {
                    SalesPersonKpiAchivementResponse kpi = new SalesPersonKpiAchivementResponse
                    {
                        ExecutiveId = item.FirstOrDefault().ExecutiveId,
                        Month = month,
                        Year = year,
                        KpiName = item.Key.KpiName,
                        DisplayName = string.IsNullOrEmpty(item.Key.DisplayName) ? item.Key.KpiName : item.Key.DisplayName,
                        Type = item.Key.Type
                    };

                    switch (item.Key.KpiName)
                    {
                        case "MTD":

                            achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.clusterid == clusterId && x.storeid == storeId).Select(y => new { targetamt = y.dispatchamt }).Sum(y => y.targetamt);


                            //foreach (var store in item.GroupBy(d => d.StoreId))
                            //{
                            //    var achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.clusterid == clusterId && x.storeid == store.Key).Select(y => new { targetamt = y.dispatchamt }).Sum(y => y.targetamt);

                            //    var Achievement = achievedVal;
                            //    kpi.Achievement += Math.Round(Achievement, 0);
                            //}
                            break;


                        case "MAC":

                            achievedVal = elasticTargetMtd.Where(x => x.executiveid == peopleId && x.storeid == storeId && x.clusterid == clusterId).Select(y => y.custCount).FirstOrDefault();
                            //foreach (var store in item.GroupBy(d => d.StoreId))
                            //{
                            //    var achievedValMAC = elascticTargetMAC.Where(x => x.executiveid == peopleId && x.storeid == store.Key).Select(y => y.custCount).FirstOrDefault();

                            //    var Achievement = achievedValMAC;
                            //    kpi.Achievement += Achievement;
                            //}
                            break;

                        case "Success Stores":

                            var targetonStore = mongotargetOnStores.Where(s => s.StoreId == storeId).Select(d => new CustStoreTargets
                            {
                                skcode = d.skcode,
                                StoreId = d.StoreId,
                                Target = d.Target,
                                TargetLineItem = d.TargetLineItem
                            }).ToList();
                            int Achievement = 0;

                            Parallel.ForEach(targetonStore, s =>
                            //targetonStore.ForEach(s =>
                            {
                                var skcodeData = elacticTargetSuccess.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                    s.Target <= a.dispatchamount &&
                                    (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                                );

                                if (skcodeData != null)
                                    Achievement++;

                            });

                            achievedVal = Achievement;

                            break;

                    }
                    //salesPersonKpi.Add(kpi);

                }
            }
            //if (configs != null && configs.Any() && salesPersonKpi != null && salesPersonKpi.Any() && salesPersonKpi.Count > 0)
            //{
            //    return salesPersonKpi.FirstOrDefault().Achievement;
            //}

            return achievedVal;

            //return null;
        }


        [HttpGet]
        [Route("PerformanceDashboard")]
        [AllowAnonymous]
        public DataTable PerformanceDashboard(int peopleId, int warehouseId, bool flag = false)
        {
            PerformanceDashboardDc data = new PerformanceDashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var today = DateTime.Now.Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == peopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
            var MonthBeatCustomerIds = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ?
                             MonthBeat.SelectMany(x => x.PlannedRoutes).Select(x => x.CustomerId).ToList() : new List<int>();

            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                DataTable IdDt = new DataTable();
                IdDt.Columns.Add("IntValue");

                foreach (var id in MonthBeatCustomerIds)
                {
                    int cid = id;
                    var dr = IdDt.NewRow();
                    dr["IntValue"] = cid;
                    IdDt.Rows.Add(dr);
                }
                var param5 = new SqlParameter("CustIdDs", IdDt);
                var param8 = new SqlParameter("Warehouseid", warehouseId);
                var param1 = new SqlParameter("peopleId", peopleId);

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[SpPerformanceDashboard]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param8);
                cmd.Parameters.Add(param5);

                var reader = cmd.ExecuteReader();
                data = ((IObjectContextAdapter)context).ObjectContext.Translate<PerformanceDashboardDc>(reader).FirstOrDefault();

                // data = context.Database.SqlQuery<PerformanceDashboardDc>("exec SpPerformanceDashboard @peopleId,@Warehouseid,@CustIdDs", param1, param8, param5).FirstOrDefault();

                var param2 = new SqlParameter("@peopleId", peopleId);
                // dt = context.Database.SqlQuery<DataTable>("exec SpPerformanceTarget @peopleId", param2);

                SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString);
                DataTable dt = new DataTable();

                SqlCommand cmd2 = new SqlCommand("SpPerformanceTarget", con);
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Parameters.AddWithValue("@peopleId", peopleId);

                SqlDataAdapter da = new SqlDataAdapter(cmd2);
                dt = new DataTable();
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add("Achivement");
                    if (flag == false)
                        foreach (DataRow row in dt.Rows)
                        {
                            if (row.ItemArray[0].ToString() == "New Customer")
                            {
                                row["Achivement"] = data.NewCustomer;
                            }
                            else if (row.ItemArray[0].ToString() == "Total Verified Retailers")
                            {
                                row["Achivement"] = data.VerifiedRetailer;
                            }
                            else if (row.ItemArray[0].ToString() == "Active Retailers")
                            {
                                row["Achivement"] = data.ActiveRetailers;
                            }
                            else if (row.ItemArray[0].ToString() == "Sales")
                            {
                                row["Achivement"] = data.SalesValue;
                            }
                            else if (row.ItemArray[0].ToString() == "Dispatch")
                            {
                                row["Achivement"] = data.MTDDispatchValue;
                            }
                            else if (row.ItemArray[0].ToString() == "Cancellation")
                            {
                                row["Achivement"] = data.Cancellation;
                            }
                            else if (row.ItemArray[0].ToString() == "QoQ Retention")
                            {
                                row["Achivement"] = data.QoQ;
                            }
                            else if (row.ItemArray[0].ToString() == "Customer Percentage")
                            {
                                row["Achivement"] = data.CustomerPercentage;
                            }
                            else if (row.ItemArray[0].ToString() == "Product Percentage")
                            {
                                row["Achivement"] = data.ProductPercentage;
                            }
                        }
                    else
                    {
                        var SalesPerson = context.Peoples.FirstOrDefault(x => x.PeopleID == peopleId && x.Active == true && x.Deleted == false);
                        if (SalesPerson != null)
                        {
                            MongoDbHelper<PerformanceDashboardMongo> PerformanceMongoDbHelper = new MongoDbHelper<PerformanceDashboardMongo>();
                            PerformanceDashboardMongo obj = new PerformanceDashboardMongo();
                            foreach (DataRow rw in dt.Rows)
                            {

                                if (rw.ItemArray[0].ToString() == "New Customer")
                                {
                                    obj.NewCustomer = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveNewCustomer = data.NewCustomer;
                                }

                                else if (rw.ItemArray[0].ToString() == "Total Verified Retailers")
                                {
                                    obj.VerifiedRetailer = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveVerifiedRetailer = data.VerifiedRetailer;
                                }
                                else if (rw.ItemArray[0].ToString() == "Active Retailers")
                                {
                                    obj.ActiveRetailers = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveActiveRetailers = data.ActiveRetailers;
                                }
                                else if (rw.ItemArray[0].ToString() == "Sales")
                                {
                                    obj.SalesValue = Convert.ToInt64(rw.ItemArray[1]);
                                    obj.AchieveSalesValue = data.SalesValue;
                                }
                                else if (rw.ItemArray[0].ToString() == "Dispatch")
                                {
                                    obj.MTDDispatchValue = Convert.ToInt64(rw.ItemArray[1]);
                                    obj.AchieveMTDDispatchValue = data.MTDDispatchValue;
                                }
                                else if (rw.ItemArray[0].ToString() == "Cancellation")
                                {
                                    obj.Cancellation = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveCancellation = data.Cancellation;
                                }
                                else if (rw.ItemArray[0].ToString() == "QoQ Retention")
                                {
                                    obj.QoQ = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveQoQ = data.QoQ;
                                }
                                else if (rw.ItemArray[0].ToString() == "Customer Percentage")
                                {
                                    obj.CustomerPercentage = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveCustomerPercentage = data.CustomerPercentage;
                                }
                                else if (rw.ItemArray[0].ToString() == "Product Percentage")
                                {
                                    obj.ProductPercentage = Convert.ToInt32(rw.ItemArray[1]);
                                    obj.AchieveProductPercentage = data.ProductPercentage;
                                }
                            }

                            long? storeId = context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == peopleId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                            var ClusterIds = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == peopleId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                            var ClusterNames = context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();
                            var StoreName = context.StoreDB.FirstOrDefault(x => x.Id == storeId).Name;
                            var WarehouseName = context.Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseId && x.active == true && x.Deleted == false).WarehouseName;

                            obj.WarehouseId = warehouseId;
                            obj.SalesPersonId = peopleId;
                            obj.StoreId = Convert.ToInt32(storeId);
                            obj.ClusterIds = string.Join(",", ClusterIds);
                            obj.ClusterName = string.Join(",", ClusterNames);
                            obj.StoreId = Convert.ToInt32(storeId);
                            obj.StoreName = StoreName;
                            obj.WarehouseName = WarehouseName;
                            obj.SalesPerson = SalesPerson.DisplayName;
                            obj.CreatedDate = DateTime.Now.Date;
                            obj.ModifiedDate = DateTime.Now.Date;
                            obj.IsActive = true;
                            obj.IsDelete = false;
                            var res = PerformanceMongoDbHelper.Insert(obj);
                        }
                    }
                }

                return dt;
            }
        }

        [Route("GetTargetDataOld")]
        [HttpGet]
        public List<TargetDataDc> GetTargetDataOld(int warehouseid, int storeid, DateTime? month)
        {
            List<ListData> targetDataDc = new List<ListData>();
            List<TargetDataDc> tdData = new List<TargetDataDc>();

            using (var myContext = new AuthContext())
            {
                var param1 = new SqlParameter("@warehouseid", warehouseid);
                var param2 = new SqlParameter("@storeid", storeid);
                var param3 = new SqlParameter("@month", month);

                targetDataDc = myContext.Database.SqlQuery<ListData>("EXEC spGetTargetData @warehouseid,@storeid,@month", param1, param2, param3).ToList();

                var targethead = myContext.TargetHeads.Where(x => x.IsActive == true && x.IsDeleted == false).Select(x => new { x.Name, x.Id }).ToList();

                foreach (var head in targethead)
                {
                    List<TargetList> TargetList = new List<TargetList>();
                    TargetDataDc obj = new TargetDataDc();
                    foreach (var item in targetDataDc)
                    {
                        if (head.Id == item.HeadId)
                        {
                            TargetList lt = new TargetList();
                            lt.ClusterId = item.ClusterId;
                            lt.ClusterName = item.ClusterName;
                            lt.ExecutiveId = item.ExecutiveId;
                            lt.ExecutiveName = item.ExecutiveName;
                            lt.StoreId = item.StoreId;
                            lt.StoreName = item.StoreName;
                            lt.WarehouseId = item.WarehouseId;
                            lt.NumPer = item.NumPer;
                            TargetList.Add(lt);
                        }
                    }
                    obj.HeadName = head.Name;
                    obj.HeadId = head.Id;
                    obj.TargetListData = TargetList;
                    tdData.Add(obj);
                }
            }
            return tdData;
        }

        [Route("GetTargetData")]
        [HttpGet]
        public List<SalesKpiDataDC> GetTargetData(int warehouseid, int storeid, DateTime? month, int skip, int take)
        {
            List<SalesKpiDataDC> SalesKpiData = new List<SalesKpiDataDC>();
            // List<TargetDataDc> tdData = new List<TargetDataDc>();
            int pMonth = month != null && month.HasValue ? Convert.ToDateTime(month).Month : 0;
            using (var myContext = new AuthContext())
            {
                var param1 = new SqlParameter("@warehouseid", warehouseid);
                var param2 = new SqlParameter("@storeid", storeid);
                var param3 = new SqlParameter("@month", pMonth);
                var param4 = new SqlParameter("@skip", skip);
                var param5 = new SqlParameter("@take", take);

                SalesKpiData = myContext.Database.SqlQuery<SalesKpiDataDC>("EXEC GetSalesKpiData @warehouseid,@storeid,@month,@skip,@take", param1, param2, param3, param4, param5).ToList();
            }
            return SalesKpiData;
        }

        [Route("UploadMonthTargetFileOld")]
        [HttpPost]
        public IHttpActionResult UploadMonthTargetFileOld(DateTime StartDate, DateTime EndDate, bool IsMonth)
        {
            APIResponse res = new APIResponse();


            DateTime now = StartDate;
            var startDate = new DateTime(now.Year, now.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);

            List<TargetDetails> target = new List<TargetDetails>();
            if (HttpContext.Current.Request.Files.Count > 0)
            {
                using (AuthContext context = new AuthContext())
                {
                    var WarehouseList = context.Warehouses.Where(x => x.active == true && x.Deleted == false).Select(y => new { y.WarehouseId, y.WarehouseName }).Distinct().ToList();
                    var StoreList = context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new { y.Id, y.Name }).Distinct().ToList();
                    var PeopleList = context.Peoples.Where(x => x.Active == true && x.Deleted == false).Select(y => new { y.PeopleID, y.DisplayName }).Distinct().ToList();
                    var ClusterList = context.Clusters.Where(x => x.Active == true && x.Deleted == false).Select(y => new { y.ClusterId, y.ClusterName }).Distinct().ToList();

                    //using (var dbContextTransaction = context.Database.BeginTransaction())
                    //{
                    var httpPostedFile = HttpContext.Current.Request.Files["file"];
                    if (httpPostedFile != null)
                    {
                        string path = HttpContext.Current.Server.MapPath("~/Upload/MonthTarget");
                        string a1, b;
                        if (!Directory.Exists(path))
                        {
                            Directory.CreateDirectory(path);
                        }
                        a1 = DateTime.Now.ToString("ddMMyyyyHHmmss") + "_" + httpPostedFile.FileName;
                        b = Path.Combine(HttpContext.Current.Server.MapPath("~/Upload/MonthTarget"), a1);
                        httpPostedFile.SaveAs(b);
                        byte[] buffer = new byte[httpPostedFile.ContentLength];
                        using (BinaryReader br = new BinaryReader(File.OpenRead(b)))
                        {
                            br.Read(buffer, 0, buffer.Length);
                        }
                        XSSFWorkbook hssfwb;
                        List<targetUploadDc> uploaditemlist = new List<targetUploadDc>();
                        using (MemoryStream memStream = new MemoryStream())
                        {
                            BinaryFormatter binForm = new BinaryFormatter();
                            memStream.Write(buffer, 0, buffer.Length);
                            memStream.Seek(0, SeekOrigin.Begin);
                            hssfwb = new XSSFWorkbook(memStream);
                            string sSheetName = hssfwb.GetSheetName(0);
                            ISheet sheet = hssfwb.GetSheet(sSheetName);
                            IRow rowData;
                            ICell cellData = null;
                            for (int iRowIdx = 0; iRowIdx <= sheet.LastRowNum; iRowIdx++)  //  iRowIdx = 0; HeaderRow
                            {
                                if (IsMonth == true)
                                {
                                    if (iRowIdx == 0)
                                    {
                                        rowData = sheet.GetRow(iRowIdx);
                                        if (rowData != null)
                                        {
                                            string field = string.Empty;
                                            field = rowData.GetCell(0).ToString();
                                            if (field != "Store") //Store
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(1).ToString();
                                            if (field != "Warehouse") //Warehouse
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(2).ToString();
                                            if (field != "Cluster") //Cluster
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(3).ToString();
                                            if (field != "Salesperson") //Salesperson
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(4).ToString();
                                            if (field != "New Customer") //New Customer
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(5).ToString();
                                            if (field != "Total Verified Retailers") //Total Verified Retailers
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(6).ToString();
                                            if (field != "Active Retailers") //Active Retailers
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(7).ToString();
                                            if (field != "Sales") //Sales
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(8).ToString();
                                            if (field != "Dispatch") //Dispatch
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(9).ToString();
                                            if (field != "Cancellation") //Cancellation
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(10).ToString();
                                            if (field != "QoQ Retention") //QoQ Retention
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(11).ToString();
                                            if (field != "Customer Percentage") //Customer Percentage
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(12).ToString();
                                            if (field != "Product Percentage") //Product Percentage
                                            {

                                            }
                                        }
                                    }
                                    else
                                    {
                                        targetUploadDc additem = new targetUploadDc();
                                        rowData = sheet.GetRow(iRowIdx);
                                        if (rowData != null)
                                        {
                                            if (rowData.GetCell(0) != null)
                                            {
                                                if (rowData.GetCell(0).ToString().Trim() != "")
                                                {
                                                    cellData = rowData.GetCell(0);
                                                    rowData = sheet.GetRow(iRowIdx);
                                                    if (rowData != null && cellData != null)
                                                    {
                                                        string col = null;
                                                        cellData = rowData.GetCell(0);
                                                        col = cellData == null ? "" : cellData.ToString();
                                                        additem.StoreId = Convert.ToInt32(StoreList.Where(x => x.Name == col.Trim()).Select(x => x.Id).FirstOrDefault());

                                                        string col1 = null;
                                                        cellData = rowData.GetCell(1);
                                                        col1 = cellData == null ? "" : cellData.ToString();

                                                        if (col1 != "")
                                                        {
                                                            additem.WarehouseId = Convert.ToInt32(WarehouseList.Where(x => x.WarehouseName == col1.Trim()).Select(x => x.WarehouseId).FirstOrDefault());
                                                        }

                                                        string col2 = null;
                                                        cellData = rowData.GetCell(2);
                                                        col2 = cellData == null ? "" : cellData.ToString();

                                                        if (col2 != "")
                                                        {
                                                            additem.ClusterId = Convert.ToInt32(ClusterList.Where(x => x.ClusterName == col2.Trim()).Select(x => x.ClusterId).FirstOrDefault());
                                                        }


                                                        string col3 = null;
                                                        cellData = rowData.GetCell(3);
                                                        col3 = cellData == null ? "" : cellData.ToString();

                                                        additem.SalesPersonId = Convert.ToInt32(PeopleList.Where(x => x.DisplayName == col3.Trim()).Select(x => x.PeopleID).FirstOrDefault());

                                                        cellData = rowData.GetCell(4);
                                                        additem.NewCustomer = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.NewCustomer = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.NewCustomer = 0;
                                                        //}
                                                        cellData = rowData.GetCell(5);
                                                        additem.TotalVerifiedRetailers = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.TotalVerifiedRetailers = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.TotalVerifiedRetailers = 0;
                                                        //}
                                                        cellData = rowData.GetCell(6);
                                                        additem.ActiveRetailers = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.ActiveRetailers = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.ActiveRetailers = 0;
                                                        //}
                                                        cellData = rowData.GetCell(7);
                                                        additem.Sales = Convert.ToInt64(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.Sales = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.Sales = 0;
                                                        //}
                                                        cellData = rowData.GetCell(8);
                                                        additem.Dispatch = Convert.ToInt64(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.Dispatch = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.Dispatch = 0;
                                                        //}
                                                        cellData = rowData.GetCell(9);
                                                        additem.Cancellation = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.Cancellation = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.Cancellation = 0;
                                                        //}
                                                        cellData = rowData.GetCell(10);
                                                        additem.QoQRetention = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.QoQRetention = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.QoQRetention = 0;
                                                        //}
                                                        cellData = rowData.GetCell(11);
                                                        additem.CustomerPercentage = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.CustomerPercentage = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.CustomerPercentage = 0;
                                                        //}

                                                        cellData = rowData.GetCell(12);
                                                        additem.ProductPercentage = Convert.ToInt32(cellData.NumericCellValue);
                                                        //if (cellData.NumericCellValue != 0)
                                                        //{
                                                        //    additem.ProductPercentage = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.ProductPercentage = 0;
                                                        //}
                                                        uploaditemlist.Add(additem);
                                                        //if (additem.NewCustomer != 0 && additem.TotalVerifiedRetailers != 0 && additem.ActiveRetailers != 0 && additem.Sales != 0 && additem.Dispatch != 0 && additem.Cancellation != 0 && additem.QoQRetention != 0 && additem.CustomerPercentage != 0 && additem.ProductPercentage != 0)
                                                        //{
                                                        //    uploaditemlist.Add(additem);
                                                        //}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (iRowIdx == 0)
                                    {
                                        rowData = sheet.GetRow(iRowIdx);
                                        if (rowData != null)
                                        {
                                            string field = string.Empty;
                                            field = rowData.GetCell(0).ToString();
                                            if (field != "Store") //Store
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(1).ToString();
                                            if (field != "Warehouse") //Warehouse
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(2).ToString();
                                            if (field != "Cluster") //Cluster
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(3).ToString();
                                            if (field != "Salesperson") //Salesperson
                                            {

                                            }
                                            field = string.Empty;
                                            field = rowData.GetCell(4).ToString();
                                            if (field != "Daily Target") //Daily Target
                                            {

                                            }
                                        }
                                    }
                                    else
                                    {
                                        targetUploadDc additem = new targetUploadDc();
                                        rowData = sheet.GetRow(iRowIdx);
                                        if (rowData != null)
                                        {
                                            if (rowData.GetCell(0) != null)
                                            {
                                                if (rowData.GetCell(0).ToString().Trim() != "")
                                                {
                                                    cellData = rowData.GetCell(0);
                                                    rowData = sheet.GetRow(iRowIdx);
                                                    if (rowData != null && cellData != null)
                                                    {
                                                        string col = null;
                                                        cellData = rowData.GetCell(0);
                                                        col = cellData == null ? "" : cellData.ToString();
                                                        additem.StoreId = Convert.ToInt32(StoreList.Where(x => x.Name == col.Trim()).Select(x => x.Id).FirstOrDefault());

                                                        string col1 = null;
                                                        cellData = rowData.GetCell(1);
                                                        col1 = cellData == null ? "" : cellData.ToString();
                                                        additem.WarehouseId = Convert.ToInt32(WarehouseList.Where(x => x.WarehouseName == col1.Trim()).Select(x => x.WarehouseId).FirstOrDefault());

                                                        string col2 = null;
                                                        cellData = rowData.GetCell(2);
                                                        col2 = cellData == null ? "" : cellData.ToString();
                                                        additem.ClusterId = Convert.ToInt32(ClusterList.Where(x => x.ClusterName == col2.Trim()).Select(x => x.ClusterId).FirstOrDefault());


                                                        string col3 = null;
                                                        cellData = rowData.GetCell(3);
                                                        col3 = cellData == null ? "" : cellData.ToString();
                                                        additem.SalesPersonId = Convert.ToInt32(PeopleList.Where(x => x.DisplayName == col3.Trim()).Select(x => x.PeopleID).FirstOrDefault());

                                                        cellData = rowData.GetCell(4);
                                                        additem.Sales = Convert.ToInt64(cellData.NumericCellValue);
                                                        //if (rowData.GetCell(4).ToString() != "")
                                                        //{
                                                        //    if (cellData.NumericCellValue != 0)
                                                        //        additem.Sales = Convert.ToInt32(cellData.NumericCellValue);
                                                        //}
                                                        //else
                                                        //{
                                                        //    additem.Sales = 0;
                                                        //}
                                                        uploaditemlist.Add(additem);
                                                        //if (additem.Sales != 0)
                                                        //{
                                                        //    uploaditemlist.Add(additem);
                                                        //}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            var headIds = context.TargetHeads.Select(x => new { x.Id, x.Name }).ToList();
                            //var num = uploaditemlist.Select(x => x.NewCustomer).FirstOrDefault();
                            //var validheadIds = headIds.FirstOrDefault();//context.TargetDetailss.Select(x => x.HeadId).FirstOrDefault();
                            using (var dbContextTransaction = context.Database.BeginTransaction())
                            {
                                if (IsMonth == true)
                                {
                                    if (uploaditemlist.Count > 0)
                                    {
                                        foreach (var y in uploaditemlist)
                                        {
                                            // if (y.NewCustomer != 0 && y.TotalVerifiedRetailers != 0 && y.ActiveRetailers != 0 && y.Sales != 0 && y.Dispatch != 0 && y.Cancellation != 0 && y.QoQRetention != 0 && y.CustomerPercentage != 0 && y.ProductPercentage != 0)
                                            {
                                                var param1 = new SqlParameter("@clusterid", y.ClusterId);
                                                var param2 = new SqlParameter("@warehouseid", y.WarehouseId);
                                                var param3 = new SqlParameter("@storeid", y.StoreId);
                                                var param4 = new SqlParameter("@startdate", startDate);
                                                var param5 = new SqlParameter("@enddate", endDate);
                                                context.Database.ExecuteSqlCommand("exec DeleteUploadedData  @clusterid,@warehouseid,@storeid,@startdate,@enddate", param1, param2, param3, param4, param5);
                                                //for (int i = 1; i <= headIds.Count; i++)
                                                //{
                                                //    TargetDetails targetDetails = new TargetDetails();
                                                //    targetDetails.HeadId = i;
                                                //    targetDetails.StoreID = y.StoreId;
                                                //    targetDetails.Warehouseid = y.WarehouseId;
                                                //    targetDetails.PeopleID = y.SalesPersonId;
                                                //    targetDetails.ClusterId = y.ClusterId;
                                                //    targetDetails.CreatedDate = DateTime.Now;
                                                //    targetDetails.ModifiedDate = DateTime.Now;
                                                //    targetDetails.StartDate = startDate;
                                                //    targetDetails.EndDate = endDate;
                                                //    targetDetails.IsActive = true;
                                                //    targetDetails.IsDeleted = false;
                                                //    targetDetails.CreatedBy = 1;
                                                //    targetDetails.ModifiedBy = 1;
                                                //    if (i == 1)
                                                //        targetDetails.NumPer = y.NewCustomer;
                                                //    if (i == 2)
                                                //        targetDetails.NumPer = y.TotalVerifiedRetailers;
                                                //    if (i == 3)
                                                //        targetDetails.NumPer = y.ActiveRetailers;
                                                //    if (i == 4)
                                                //        targetDetails.NumPer = y.Sales;
                                                //    if (i == 5)
                                                //        targetDetails.NumPer = y.Dispatch;
                                                //    if (i == 6)
                                                //        targetDetails.NumPer = y.Cancellation;
                                                //    if (i == 7)
                                                //        targetDetails.NumPer = y.QoQRetention;
                                                //    if (i == 8)
                                                //        targetDetails.NumPer = y.CustomerPercentage;
                                                //    if (i == 9)
                                                //        targetDetails.NumPer = y.ProductPercentage;

                                                //    target.Add(targetDetails);
                                                //}
                                                foreach (var item in headIds)
                                                {
                                                    TargetDetails targetDetails = new TargetDetails();
                                                    targetDetails.HeadId = Convert.ToInt32(item.Id);
                                                    targetDetails.StoreID = y.StoreId;
                                                    targetDetails.Warehouseid = y.WarehouseId;
                                                    targetDetails.PeopleID = y.SalesPersonId;
                                                    targetDetails.ClusterId = y.ClusterId;
                                                    targetDetails.CreatedDate = DateTime.Now;
                                                    targetDetails.ModifiedDate = DateTime.Now;
                                                    targetDetails.StartDate = startDate;
                                                    targetDetails.EndDate = endDate;
                                                    targetDetails.IsActive = true;
                                                    targetDetails.IsDeleted = false;
                                                    targetDetails.CreatedBy = 1;
                                                    targetDetails.ModifiedBy = 1;
                                                    if (item.Name == "New Customer")
                                                        targetDetails.NumPer = y.NewCustomer;
                                                    if (item.Name == "Total Verified Retailers")
                                                        targetDetails.NumPer = y.TotalVerifiedRetailers;
                                                    if (item.Name == "Active Retailers")
                                                        targetDetails.NumPer = y.ActiveRetailers;
                                                    if (item.Name == "Sales")
                                                        targetDetails.NumPer = y.Sales;
                                                    if (item.Name == "Dispatch")
                                                        targetDetails.NumPer = y.Dispatch;
                                                    if (item.Name == "Cancellation")
                                                        targetDetails.NumPer = y.Cancellation;
                                                    if (item.Name == "QoQ Retention")
                                                        targetDetails.NumPer = y.QoQRetention;
                                                    if (item.Name == "Customer Percentage")
                                                        targetDetails.NumPer = y.CustomerPercentage;
                                                    if (item.Name == "Product Percentage")
                                                        targetDetails.NumPer = y.ProductPercentage;

                                                    target.Add(targetDetails);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (uploaditemlist.Count > 0)
                                    {
                                        foreach (var y in uploaditemlist)
                                        {
                                            // if (y.Sales != 0)
                                            {
                                                var param1 = new SqlParameter("@clusterid", y.ClusterId);
                                                var param2 = new SqlParameter("@warehouseid", y.WarehouseId);
                                                var param3 = new SqlParameter("@storeid", y.StoreId);
                                                var param4 = new SqlParameter("@startdate", StartDate);
                                                var param5 = new SqlParameter("@enddate", EndDate);
                                                context.Database.ExecuteSqlCommand("exec DeleteUploadedData  @clusterid,@warehouseid,@storeid,@startdate,@enddate", param1, param2, param3, param4, param5);

                                                long headid = headIds.Where(x => x.Name == "Sales").Select(x => x.Id).FirstOrDefault();
                                                TargetDetails targetDetails = new TargetDetails();
                                                targetDetails.HeadId = Convert.ToInt32(headid);
                                                targetDetails.StoreID = y.StoreId;
                                                targetDetails.Warehouseid = y.WarehouseId;
                                                targetDetails.PeopleID = y.SalesPersonId;
                                                targetDetails.ClusterId = y.ClusterId;
                                                targetDetails.CreatedDate = DateTime.Now;
                                                targetDetails.ModifiedDate = DateTime.Now;
                                                targetDetails.StartDate = StartDate;
                                                targetDetails.EndDate = EndDate;
                                                targetDetails.IsActive = true;
                                                targetDetails.IsDeleted = false;
                                                targetDetails.CreatedBy = 1;
                                                targetDetails.ModifiedBy = 1;

                                                targetDetails.NumPer = y.Sales;
                                                target.Add(targetDetails);
                                            }
                                        }
                                    }
                                }
                                if (target != null && target.Any())
                                {
                                    context.TargetDetailss.AddRange((IEnumerable<TargetDetails>)target);
                                    if (context.Commit() > 0)
                                    {
                                        dbContextTransaction.Commit();
                                    }
                                    res.Message = "Upload Successfully";
                                }
                                else
                                {
                                    res.Message = "something went wrong";
                                }
                            }
                        }
                    }
                    else
                    {
                        res.Message = "something went wrong";
                        res.Status = false;
                    }

                }
            }
            return Created(res.Message, res.Message);
        }

        [Route("UploadMonthTargetFile")]
        [HttpPost]
        public IHttpActionResult UploadMonthTargetFile(DateTime StartDate, DateTime EndDate, bool IsMonth)
        {
            //DateTime StartDate, DateTime EndDate, bool IsMonth            
            APIResponse res = new APIResponse();
            DateTime now = StartDate;
            var startDate = new DateTime(now.Year, now.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);
            int Month = StartDate.Month;
            int Year = StartDate.Year;
            List<TargetDetails> target = new List<TargetDetails>();
            List<SalesPersonKPI> salesPersonKPI = new List<SalesPersonKPI>();
            if (HttpContext.Current.Request.Files.Count > 0)
            {
                using (AuthContext context = new AuthContext())
                {

                    //using (var dbContextTransaction = context.Database.BeginTransaction())
                    //{
                    var httpPostedFile = HttpContext.Current.Request.Files["file"];
                    if (httpPostedFile != null)
                    {
                        //Check uploaded file extenstion
                        var supportedTypes = new[] { "xls", "xlsx" };
                        string fileExtension = Path.GetExtension(httpPostedFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExtension))
                        {
                            res.Status = false;
                            res.Message = "Extension Is InValid - Only Upload EXCEL/xls/xlsx File.";
                            return Created(res.Message, res.Message);
                        }

                        string uploadPath = HttpContext.Current.Server.MapPath("~/Upload/MonKPI");
                        if (!Directory.Exists(uploadPath))
                        {
                            Directory.CreateDirectory(uploadPath);
                        }
                        string fileName = DateTime.Now.ToString("ddMMyyyyHHmmss") + "_" + httpPostedFile.FileName;
                        string filePath = Path.Combine(uploadPath, fileName);
                        httpPostedFile.SaveAs(filePath);

                        DataTable KpiDataTable = ExcelFileHelper.GetRequestsDataFromExcel(filePath);
                        //Validate column count
                        if (KpiDataTable.Columns.Count != 6)
                        {
                            res.Status = false;
                            res.Message = "Invalid data, Due to column count is mismatched.";
                            return Created(res.Message, res.Message);
                        }

                        var WarehouseList = context.Warehouses.Where(x => x.active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.WarehouseList { WarehouseId = y.WarehouseId, WarehouseName = y.WarehouseName }).Distinct().ToList();
                        var StoreList = context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.StoreList { StoreId = y.Id, StoreName = y.Name }).Distinct().ToList();
                        var PeopleList = context.Peoples.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.PeopleList { PeopleID = y.PeopleID, PeopleName = y.DisplayName }).Distinct().ToList();
                        var ClusterList = context.Clusters.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.ClusterList { ClusterId = y.ClusterId, ClusterName = y.ClusterName }).Distinct().ToList();
                        var SalesKpiList = context.SalesKPIs.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.SalesKpiList { KpiName = y.Name, KpiId = y.Id }).Distinct().ToList();
                        List<SalesPersonKPI> SalesPersonKpiList = SalesKpiManager.GetSalesPersonKPIDetails(Month, Year, WarehouseList, StoreList, PeopleList, ClusterList, SalesKpiList, KpiDataTable);

                        using (var dbContextTransaction = context.Database.BeginTransaction())
                        {
                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                /*
                                if (IsMonth == true)
                                {
                                    //---Delete Existing
                                    var CurrentMonthSalesPersonKpis = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive).ToList();
                                    if (CurrentMonthSalesPersonKpis != null && CurrentMonthSalesPersonKpis.Any())
                                    {
                                        foreach (var item in CurrentMonthSalesPersonKpis)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsDeleted = true);// && x.ModifiedDate=DateTime.Now );
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsActive = false);//&& x.IsDeleted = Convert.ToBoolean(false)
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.ModifiedDate = DateTime.Now);
                                    }
                                }
                                */
                                //--Remove existing Cluster and Stored data for same month
                                var existingClusterStore = SalesPersonKpiList.Select(x => new { x.ClusterId, x.StoreId }).Distinct().ToList();
                                foreach (var salesPersonItem in SalesPersonKpiList)
                                {
                                    var existingClusterStoreItems = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive && x.ClusterId == salesPersonItem.ClusterId && x.StoreId == salesPersonItem.StoreId).ToList();
                                    if (existingClusterStoreItems != null && existingClusterStoreItems.Any())
                                    {
                                        foreach (var item in existingClusterStoreItems)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                    }
                                }

                                context.SalesPersonKPIs.AddRange(SalesPersonKpiList);
                            }

                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                if (context.Commit() > 0)
                                {
                                    dbContextTransaction.Commit();
                                }
                                res.Message = "Upload Successfully";
                            }
                            else
                            {
                                res.Message = "something went wrong";
                            }
                        }

                    }
                    else
                    {
                        res.Message = "something went wrong";
                        res.Status = false;
                    }

                }
            }
            return Created(res.Message, res.Message);
        }


        [Route("TargetTestData")]
        [HttpPost]
        public IHttpActionResult TargetTestData()
        {
            //DateTime StartDate, DateTime EndDate, bool IsMonth            
            APIResponse res = new APIResponse();
            DateTime StartDate = DateTime.Now.AddMonths(1);
            DateTime EndDate = DateTime.Now.AddMonths(1).AddDays(31);
            bool IsMonth = false;
            DateTime now = StartDate;
            var startDate = new DateTime(now.Year, now.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);
            int Month = StartDate.Month;
            int Year = StartDate.Year;
            List<TargetDetails> target = new List<TargetDetails>();
            List<SalesPersonKPI> salesPersonKPI = new List<SalesPersonKPI>();
            if (HttpContext.Current.Request.Files.Count > 0)
            {
                using (AuthContext context = new AuthContext())
                {

                    //using (var dbContextTransaction = context.Database.BeginTransaction())
                    //{
                    var httpPostedFile = HttpContext.Current.Request.Files["file"];
                    if (httpPostedFile != null)
                    {
                        //Check uploaded file extenstion
                        var supportedTypes = new[] { "xls", "xlsx" };
                        string fileExtension = Path.GetExtension(httpPostedFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExtension))
                        {
                            res.Status = false;
                            res.Message = "Extension Is InValid - Only Upload EXCEL/xls/xlsx File.";
                            return Created(res.Message, res.Message);
                        }

                        string uploadPath = HttpContext.Current.Server.MapPath("~/Upload/MonKPI");
                        if (!Directory.Exists(uploadPath))
                        {
                            Directory.CreateDirectory(uploadPath);
                        }
                        string fileName = DateTime.Now.ToString("ddMMyyyyHHmmss") + "_" + httpPostedFile.FileName;
                        string filePath = Path.Combine(uploadPath, fileName);
                        httpPostedFile.SaveAs(filePath);


                        DataTable KpiDataTable = ExcelFileHelper.GetRequestsDataFromExcel(filePath);

                        //.GetDataTableFromExcel(filePath);
                        //ExcelFileHelper.ConvertExcelToDataTable(filePath, buffer);
                        //Validate column count
                        if (KpiDataTable.Columns.Count != 8)
                        {
                            res.Status = false;
                            res.Message = "Invalid data, Due to column count is mismatched.";
                            return Created(res.Message, res.Message);
                        }

                        var WarehouseList = context.Warehouses.Where(x => x.active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.WarehouseList { WarehouseId = y.WarehouseId, WarehouseName = y.WarehouseName }).Distinct().ToList();
                        var StoreList = context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.StoreList { StoreId = y.Id, StoreName = y.Name }).Distinct().ToList();
                        var PeopleList = context.Peoples.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.PeopleList { PeopleID = y.PeopleID, PeopleName = y.DisplayName }).Distinct().ToList();
                        var ClusterList = context.Clusters.Where(x => x.Active == true && x.Deleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.ClusterList { ClusterId = y.ClusterId, ClusterName = y.ClusterName }).Distinct().ToList();
                        var SalesKpiList = context.SalesKPIs.Where(x => x.IsActive == true && x.IsDeleted == false).Select(y => new DataContracts.External.MobileExecutiveDC.SalesKpiList { KpiName = y.Name, KpiId = y.Id }).Distinct().ToList();
                        List<SalesPersonKPI> SalesPersonKpiList = SalesKpiManager.GetSalesPersonKPIDetails(Month, Year, WarehouseList, StoreList, PeopleList, ClusterList, SalesKpiList, KpiDataTable);

                        using (var dbContextTransaction = context.Database.BeginTransaction())
                        {
                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                if (IsMonth == true)
                                {
                                    //---Delete Existing
                                    var CurrentMonthSalesPersonKpis = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive).ToList();
                                    if (CurrentMonthSalesPersonKpis != null && CurrentMonthSalesPersonKpis.Any())
                                    {
                                        foreach (var item in CurrentMonthSalesPersonKpis)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsDeleted = true);// && x.ModifiedDate=DateTime.Now );
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.IsActive = false);//&& x.IsDeleted = Convert.ToBoolean(false)
                                        //CurrentMonthSalesPersonKpis.ForEach(x => x.ModifiedDate = DateTime.Now);
                                    }
                                }
                                //--Remove existing Cluster and Stored data for same month
                                var existingClusterStore = SalesPersonKpiList.Select(x => new { x.ClusterId, x.StoreId }).Distinct().ToList();
                                foreach (var salesPersonItem in SalesPersonKpiList)
                                {
                                    var existingClusterStoreItems = context.SalesPersonKPIs.Where(x => x.Month == Month && x.Year == Year && x.IsActive && x.ClusterId == salesPersonItem.ClusterId && x.StoreId == salesPersonItem.StoreId).ToList();
                                    if (existingClusterStoreItems != null && existingClusterStoreItems.Any())
                                    {
                                        foreach (var item in existingClusterStoreItems)
                                        {
                                            item.IsDeleted = true;
                                            item.IsActive = false;
                                            item.ModifiedBy = 1;
                                            item.ModifiedDate = DateTime.Now;
                                        }
                                    }
                                }

                                context.SalesPersonKPIs.AddRange(SalesPersonKpiList);
                            }

                            if (SalesPersonKpiList != null && SalesPersonKpiList.Any())
                            {
                                if (context.Commit() > 0)
                                {
                                    dbContextTransaction.Commit();
                                }
                                res.Message = "Upload Successfully";
                            }
                            else
                            {
                                res.Message = "something went wrong";
                            }
                        }

                    }
                    else
                    {
                        res.Message = "something went wrong";
                        res.Status = false;
                    }

                }
            }
            return Created(res.Message, res.Message);
        }


        [Route("SalesProfile")]
        [HttpGet]
        [Authorize]
        public HttpResponseMessage SalesProfile(int PeopleId)
        {
            PeopleLoginDCs res;
            PeopleLoginDC person = new PeopleLoginDC();
            if (PeopleId > 0)
            {
                using (var db = new AuthContext())
                {
                    var p = db.Peoples.FirstOrDefault(u => u.PeopleID == PeopleId);
                    person = Mapper.Map(p).ToANew<PeopleLoginDC>();
                    #region TODO:SalesAppMarch2023              
                    //var cluserDetail = db.Clusters.Where(x => x.WarehouseId == person.WarehouseId && x.Active == true && x.Deleted == false).FirstOrDefault();
                    //person.clusterId = cluserDetail != null ? cluserDetail.ClusterId : 0;
                    //person.clusterName = cluserDetail != null ? cluserDetail.ClusterName : string.Empty;


                    var StoerClusterIds = db.ClusterStoreExecutives.Where(x => x.ExecutiveId == PeopleId && x.IsActive == true && x.IsDeleted == false).Select(x => new { x.ClusterId, x.StoreId }).Distinct().ToList();
                    if (StoerClusterIds.Count > 0)
                    {
                        var ClusterIds = StoerClusterIds.Select(x => x.ClusterId).Distinct().ToList();
                        var StoreIds = StoerClusterIds.Select(x => x.StoreId).Distinct().ToList();
                        if (ClusterIds.Count > 0)
                        {
                            var ClusterNames = db.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();
                            person.clusterId = string.Join(",", ClusterIds);
                            person.clusterName = string.Join(",", ClusterNames);
                        }
                        if (StoreIds.Count > 0)
                        {
                            var StoreNames = db.StoreDB.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).Distinct().ToList();
                            person.StoreId = string.Join(",", StoreIds);
                            person.StoreName = string.Join(",", StoreNames);
                        }
                    }


                    #endregion
                    if (person != null)
                    {
                        if (p.WarehouseId > 0)
                            person.WarehouseName = db.Warehouses.FirstOrDefault(x => x.WarehouseId == p.WarehouseId).WarehouseName;

                        if (person.IsLocation == null)
                        {
                            person.IsLocation = false;
                        }
                        if (person.IsRecording == null)
                        {
                            person.IsRecording = false;

                        }
                        if (person.LocationTimer == null)
                        {
                            person.LocationTimer = 0;
                        }
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + PeopleId + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = db.Database.SqlQuery<string>(query).ToList();
                        var IsRole = role.Any(x => x.Contains("Hub sales lead"));
                        if (IsRole)
                        {
                            person.Role = "Hub sales lead";
                        }
                        else if (role.Any(x => x.Contains("Digital sales executive")))
                            person.Role = "Digital sales executive";
                        else if (role.Any(x => x.Contains("Telecaller")))
                            person.Role = "Telecaller";
                        else
                        {
                            person.Role = "";
                        }

                        var data = db.LocationResumeDetails.Where(z => z.PeopleId == PeopleId).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                        if (data != null)
                        {

                            person.Status = data.Status;
                        }
                        AppVisits appVisit = new AppVisits();

                        var CurrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                        MongoDbHelper<AppVisits> mongoDbHelper = new MongoDbHelper<AppVisits>();
                        appVisit.UserName = p.Mobile;
                        appVisit.UserName = p.Mobile;
                        appVisit.UserId = PeopleId;
                        appVisit.AppType = "SalesApp";
                        appVisit.VisitedOn = DateTime.Now;
                        var Status = mongoDbHelper.InsertAsync(appVisit);

                        res = new PeopleLoginDCs()
                        {
                            people = person,
                            Status = true,
                            message = "Success."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                    else
                    {
                        res = new PeopleLoginDCs()
                        {
                            people = person,
                            Status = false,
                            message = "People not exist."
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, res);
                    }
                }
            }
            res = new PeopleLoginDCs()
            {
                people = person,
                Status = false,
                message = "Something went wrong."
            };
            return Request.CreateResponse(HttpStatusCode.OK, res);
        }

        [Route("IsPhoneOrder")]
        [HttpGet]
        public bool PhoneOrder(int PeopleId, int CustomerId)
        {
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            {
                var today = DateTime.Now.Date;
                var data = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == today).FirstOrDefault();

                if (data != null && data.PlannedRoutes != null && data.PlannedRoutes.Any(x => x.CustomerId == CustomerId))
                {
                    data.PlannedRoutes.FirstOrDefault(x => x.CustomerId == CustomerId).IsPhoneOrder = true;
                    result = mongoDbHelper.Replace(data.Id, data);

                    //ExecutiveAttendenceMongoHelper attendanceHelper = new ExecutiveAttendenceMongoHelper();
                    //updateAttendanceDc obj = new updateAttendanceDc();
                    //obj.ExecutiveId = PeopleId;
                    //obj.IsBeatShop = true;
                    //obj.IsPhoneOrder = true;
                    //var res = attendanceHelper.UpdateExecutiveAttendance(obj);
                }
            }
            return result;
        }
        #region sales app Job
        public bool InsertDashboardJobinMongo(SalesDashboardTodayMTDData obj, AuthContext authContext)
        {
            bool flag = false;

            DateTime now = DateTime.Now;
            //var startDate = new DateTime(now.Year, now.Month, 1);
            //var endDate = startDate.AddMonths(1).AddDays(-1);
            try
            {
                var SalesPerson = authContext.Peoples.FirstOrDefault(x => x.PeopleID == obj.SalesPersonId && x.Active == true && x.Deleted == false);
                if (SalesPerson != null)
                {
                    MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();

                    SalesDashboardTodayMTDData data = new SalesDashboardTodayMTDData
                    {
                        WarehouseId = obj.WarehouseId,
                        SalesPersonId = obj.SalesPersonId,
                        StoreId = obj.StoreId,
                        BeatSales = obj.BeatSales,
                        VisitPlanned = obj.VisitPlanned,
                        TotalCall = obj.TotalCall,
                        ProductiveCall = obj.ProductiveCall,
                        BeatOrder = obj.BeatOrder,
                        ExtraVisit = obj.ExtraVisit,
                        ExtraCall = obj.ExtraCall,
                        ExtraOrder = obj.ExtraOrder,
                        ExtraSales = obj.ExtraSales,
                        OutletCoverage = obj.OutletCoverage,
                        StrikeRate = obj.StrikeRate,
                        TodayTarget = obj.TodayTarget,
                        TodayPerfactOrder = obj.TodayPerfactOrder,
                        TodaySupperOrder = obj.TodaySupperOrder,
                        PhoneOrder = obj.PhoneOrder,
                        AvgLineItem = obj.AvgLineItem,
                        AvgOrderValue = obj.AvgOrderValue,
                        ECO = obj.ECO,
                        TotalSales = obj.TotalSales,
                        CheckIn = obj.CheckIn,
                        CheckOut = obj.CheckOut,
                        CreatedDate = DateTime.Now.AddDays(-1),
                        ModifiedDate = DateTime.Now,
                        IsActive = true,
                        IsDelete = false
                    };

                    var param1 = new SqlParameter("PeopleID", obj.SalesPersonId);

                    var cmd = authContext.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[SpPerformanceTarget]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param1);

                    var reader = cmd.ExecuteReader();
                    var dd = ((IObjectContextAdapter)authContext).ObjectContext.Translate<PerformanceTargetDc>(reader).ToList();

                    var ClusterStoreData = (from cs in authContext.ClusterStoreExecutives
                                            join c in authContext.Clusters
                                            on cs.ClusterId equals c.ClusterId
                                            join s in authContext.StoreDB
                                            on cs.StoreId equals s.Id
                                            join ch in authContext.ChannelMasters
                                            on cs.ChannelMasterId equals ch.ChannelMasterId
                                            where cs.IsActive == true && cs.IsDeleted == false && c.Active == true && c.Deleted == false
                                            && s.IsActive == true && s.IsDeleted == false && ch.Active == true && ch.Deleted == false
                                            && cs.ExecutiveId == obj.SalesPersonId
                                            select new
                                            {
                                                cs.StoreId,
                                                cs.ClusterId,
                                                c.ClusterName,
                                                cs.ChannelMasterId,
                                                ch.ChannelType
                                            }).ToList();



                    var WarehouseName = authContext.Warehouses.FirstOrDefault(x => x.WarehouseId == obj.WarehouseId && x.active == true && x.Deleted == false).WarehouseName;
                    //long? storeId = authContext.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.SalesPersonId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                    //var ClusterIds = authContext.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.SalesPersonId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                    //var ClusterNames = authContext.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                    var ClusterIds = ClusterStoreData.Select(x => x.ClusterId).Distinct().ToList();
                    var ClusterNames = string.Join(",",ClusterStoreData.Select(x => x.ClusterName).Distinct().ToList());
                   

                    data.ClusterIds = string.Join(",", ClusterIds);
                    data.ClusterName = string.Join(",", ClusterNames);
                    //data.StoreId = Convert.ToInt32(storeId);
                    data.StoreId = Convert.ToInt32(ClusterStoreData.Select(x => x.StoreId).FirstOrDefault());
                    data.StoreIds = ClusterStoreData.Any(x=>x.StoreId > 0) ? ClusterStoreData.Select(x => x.StoreId).Distinct().ToList() : new List<long>();
                    data.ChannelMatserId = ClusterStoreData.Select(x => x.ChannelMasterId).FirstOrDefault();
                    data.ChannelName = ClusterStoreData.Select(x => x.ChannelType).FirstOrDefault();
                    data.SalesPerson = SalesPerson.DisplayName;
                    data.WarehouseName = WarehouseName;
                    data.MtdMonthlyTarget = dd.Count > 0 ? dd.FirstOrDefault(x => x.Name == "Sales").NumPer : 0;

                    flag = mongoDbHelper.Insert(data);
                }
            }
            catch (Exception ex)
            {
                var res = ex.Message;
            }
            return flag;
        }



        [Route("InsertDashoardInMongoJob")]
        [HttpGet]
        public bool GetExecutiveList()
        {
            using (var db = new AuthContext())
            {
                //var list = (from e in db.ClusterStoreExecutives
                //            join p in db.Peoples on e.ExecutiveId equals p.PeopleID
                //            where e.IsActive == true && e.IsDeleted == false
                //            select new
                //            {
                //                p.PeopleID,
                //                p.WarehouseId
                //            }).Distinct().ToList();
                //if (list != null && list.Any())
                //{
                //    //foreach (var item in list)
                //    //{
                //    //    //var dd = BeatDashboardDetail(item.PeopleID, 1, item.WarehouseId, true);
                //    //}
                //    //foreach (var item in list)
                //    //{
                //    //    var dd = PerformanceDashboard(item.PeopleID, item.WarehouseId, true);
                //    //}
                //}
                return true;
            }
        }

        // Dashboard mail job run after 12:00 AM
        [Route("DashboardExcel")]
        [HttpGet]
        public IHttpActionResult GetTodayMTDDashboardDataFromMongo()
        {
            MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();

            var today = DateTime.Now.Date.AddDays(-1);
            var previousEndDate = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd 23:59:59");
            var searchpredictor = PredicateBuilder.New<SalesDashboardTodayMTDData>(x => x.CreatedDate >= (today) && x.CreatedDate <= Convert.ToDateTime(previousEndDate) && x.IsDelete == false);
            List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
            List<People> peopledata = new List<People>();

            List<SalesDashboardExportData> Export = new List<SalesDashboardExportData>();
            List<SalesDashboardExportDataDc> ExportList = new List<SalesDashboardExportDataDc>();

            using (var context = new AuthContext())
            {
                list = mongoDbHelper.Select(searchpredictor);

                if (list != null && list.Count() > 0)
                {
                    var Peopleids = list.Select(x => x.SalesPersonId).Distinct().ToList();
                    if(Peopleids.Count() >0)
                    {
                        peopledata = context.Peoples.Where(x => Peopleids.Contains(x.PeopleID)).Distinct().ToList();
                    }

                    var storeid = list.Select(x => x.StoreId).Distinct().ToList();
                    var Storelist = context.StoreDB.Where(x => storeid.Contains((int)x.Id)).ToList();

                    Export = Mapper.Map(list).ToANew<List<SalesDashboardExportData>>();

                    Export.ForEach(x =>
                    {
                        x.StoreName = Storelist != null && Storelist.Any(y => y.Id == x.StoreId) ? Storelist.FirstOrDefault(y => y.Id == x.StoreId).Name : "";
                        x.EmpCode = peopledata != null && peopledata.Any(y => y.PeopleID == x.SalesPersonId) ? peopledata.FirstOrDefault(y => y.PeopleID == x.SalesPersonId).Empcode : "";
                    });

                    ExportList = Mapper.Map(Export).ToANew<List<SalesDashboardExportDataDc>>();
                    var dashboardDt = ClassToDataTable.CreateDataTable(ExportList);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "SalesPersonBeatDSR" + DateTime.Now.ToString("ddMMyy") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);
                    string dd = filePath;

                    string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                    string To = "", From = "", Bcc = "";
                    DataTable emaildatatable = new DataTable();
                    using (var connection = new SqlConnection(connectionString))
                    {
                        using (var command = new SqlCommand("Select * from EmailRecipients where EmailType='SalesAppDashboard'", connection))
                        {

                            if (connection.State != ConnectionState.Open)
                                connection.Open();

                            SqlDataAdapter da = new SqlDataAdapter(command);
                            da.Fill(emaildatatable);
                            da.Dispose();
                            connection.Close();
                        }
                    }
                    if (emaildatatable.Rows.Count > 0)
                    {
                        To = !string.IsNullOrEmpty(emaildatatable.Rows[0]["To"].ToString()) ? emaildatatable.Rows[0]["To"].ToString() : To;
                        From = !string.IsNullOrEmpty(emaildatatable.Rows[0]["From"].ToString()) ? emaildatatable.Rows[0]["From"].ToString() : From;
                        Bcc = !string.IsNullOrEmpty(emaildatatable.Rows[0]["Bcc"].ToString()) ? emaildatatable.Rows[0]["Bcc"].ToString() : "";
                    }
                    string subject = DateTime.Now.ToString("dd MMM yyyy") + " SalesPerson Beat DSR ";
                    string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                    , HttpContext.Current.Request.Url.DnsSafeHost
                                                                    , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                    , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);
                    string message = "Please find below link for Daily SalesApp dashboard Report :" + FileUrl;
                    if (!string.IsNullOrEmpty(To) && !string.IsNullOrEmpty(From))
                        EmailHelper.SendMail(From, To, Bcc, subject, message, "");
                    else
                        logger.Error("SalesApp dashboard Report To and From empty");
                }
            }
            return Ok();
        }

        // Update Warehouse cluster Item Index once in a month.
        [Route("WarehouseClusterItemIndexing")]
        [HttpGet]
        public IHttpActionResult WarehouseClusterItemIndexingAsync()
        {
            using (var context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetWarehouseClusterItemIndexing]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Execute Stored Procedure..
                cmd.ExecuteNonQuery();
            }
            return Ok();
        }

        // Dashboard mail job run after 12:00 AM
        [Route("PerformanceDataExcel")]
        [HttpGet]
        public IHttpActionResult GetPerformancaDataExcel()
        {
            MongoDbHelper<PerformanceDashboardMongo> mongoDbHelper = new MongoDbHelper<PerformanceDashboardMongo>();

            var today = DateTime.Now.Date.AddDays(-1);

            var searchpredictor = PredicateBuilder.New<PerformanceDashboardMongo>(x => x.CreatedDate == today && x.IsDelete == false);
            List<PerformanceDashboardMongo> list = new List<PerformanceDashboardMongo>();

            List<PerformanceDashboardMongoDc> ExportList = new List<PerformanceDashboardMongoDc>();

            using (var context = new AuthContext())
            {
                list = mongoDbHelper.Select(searchpredictor);

                if (list != null && list.Count > 0)
                {
                    ExportList = Mapper.Map(list).ToANew<List<PerformanceDashboardMongoDc>>();

                    var dashboardDt = ClassToDataTable.CreateDataTable(ExportList);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/PerformanceDashboardExcel");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "SalesPersonMTDPerformance" + DateTime.Now.ToString("ddMMyy") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(dashboardDt, "PerformanceDashBoardData", filePath);
                    string dd = filePath;

                    string connectionString = ConfigurationManager.ConnectionStrings["AuthContext"].ConnectionString;
                    string To = "", From = "", Bcc = "";
                    DataTable emaildatatable = new DataTable();
                    using (var connection = new SqlConnection(connectionString))
                    {
                        using (var command = new SqlCommand("Select * from EmailRecipients where EmailType='SalesAppDashboard'", connection))
                        {

                            if (connection.State != ConnectionState.Open)
                                connection.Open();

                            SqlDataAdapter da = new SqlDataAdapter(command);
                            da.Fill(emaildatatable);
                            da.Dispose();
                            connection.Close();
                        }
                    }
                    if (emaildatatable.Rows.Count > 0)
                    {
                        To = !string.IsNullOrEmpty(emaildatatable.Rows[0]["To"].ToString()) ? emaildatatable.Rows[0]["To"].ToString() : To;
                        From = !string.IsNullOrEmpty(emaildatatable.Rows[0]["From"].ToString()) ? emaildatatable.Rows[0]["From"].ToString() : From;
                        Bcc = !string.IsNullOrEmpty(emaildatatable.Rows[0]["Bcc"].ToString()) ? emaildatatable.Rows[0]["Bcc"].ToString() : "";
                    }
                    string subject = DateTime.Now.ToString("dd MMM yyyy") + " SalesPerson MTD Performance ";
                    string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                    , HttpContext.Current.Request.Url.DnsSafeHost
                                                                    , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                    , "/SalesAppDashboardFile/PerformanceDashboardExcel/" + fileName);
                    string message = "Please find below link for Daily SalesApp Performance Dashboard Report :" + FileUrl;
                    if (!string.IsNullOrEmpty(To) && !string.IsNullOrEmpty(From))
                        EmailHelper.SendMail(From, To, Bcc, subject, message, "");
                    else
                        logger.Error("SalesApp Performance Dashboard Report To and From empty");
                }
            }
            return Ok();
        }
        #endregion

        [Route("GetHighestSellingItem")]
        [HttpGet]
        public async Task<ItemListForAgent> GetHighestSellingItem(int PeopleId, int warehouseId, int skip, int take, string lang)
        {
            ItemListForAgent ItemListForAgent = new ItemListForAgent();
            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<ItemDataDC>() };

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var context = new AuthContext())
            {
                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                {
                    var IdDt = new DataTable();
                    SqlParameter param = null;

                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }
                    param = new SqlParameter("CatCompanyBrand", IdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.CatCompanyBrand";
                    //ItemListForAgent item = new ItemListForAgent();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 900;
                    cmd.CommandText = "[dbo].[GetHighestSellingItemNew]";
                    cmd.Parameters.Add(new SqlParameter("@WarehouseId", warehouseId));
                    cmd.Parameters.Add(new SqlParameter("@PeopleId", PeopleId));
                    cmd.Parameters.Add(new SqlParameter("@skip", skip));
                    cmd.Parameters.Add(new SqlParameter("@take", take));
                    cmd.Parameters.Add(param);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                    var reader = cmd.ExecuteReader();
                    var newdata = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<Itemdata>(reader).ToList();
                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                    List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                    if (newdata != null && newdata.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, newdata.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    }

                    foreach (var it in newdata)
                    {

                        it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                        it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;


                        if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                        {
                            it.IsOffer = false;
                        }
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }


                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        if (ItemListForAgent.ItemMasters == null)
                        {
                            ItemListForAgent.ItemMasters = new List<Itemdata>();
                        }
                        try
                        {/// Dream Point Logic && Margin Point
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //salesman 0.2=(0.02 * 10=0.2)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }

                        }
                        catch { }
                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }

                        ItemListForAgent.ItemMasters.Add(it);
                    }
                    if (ItemListForAgent.ItemMasters != null && ItemListForAgent.ItemMasters.Any())
                    {
                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        var itemMultiMRPIds = ItemListForAgent.ItemMasters.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                        List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                        ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);

                        foreach (var itm in ItemListForAgent.ItemMasters)
                        {
                            if (itm.price > itm.UnitPrice)
                            {
                                itm.marginPoint = itm.UnitPrice > 0 ? (((itm.price - itm.UnitPrice) * 100) / itm.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                                if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == itm.ItemMultiMRPId && x.PTR > 0))
                                {
                                    var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == itm.ItemMultiMRPId);
                                    var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                    var UPMRPMargin = itm.marginPoint.Value;
                                    if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                        itm.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                                }
                            }
                            else
                            {
                                itm.marginPoint = 0;
                            }
                        }
                        ItemListForAgent.Message = "Success";
                        ItemListForAgent.Status = true;
                        ItemListForAgent.ItemMasters.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                        ItemListForAgent.ItemMasters = ItemListForAgent.ItemMasters.OrderByDescending(x => x.marginPoint).ToList();
                        return ItemListForAgent;
                    }
                    else
                    {
                        ItemListForAgent.Message = "Item Not found";
                        ItemListForAgent.Status = false;
                    }
                }
                return ItemListForAgent;
            }

        }

        [Route("GetTopHighMarginItem")]
        [HttpGet]
        public async Task<ItemResponseDc> GetTopHighMarginItem(int PeopleId, int warehouseId, int skip, int take, string lang)
        {

            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<ItemDataDC>() };
            using (var context = new AuthContext())
            {
                List<ItemDataDC> items = new List<ItemDataDC>();
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();
                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 900;
                cmd.CommandText = "[dbo].[GetTopHighMarginItem]";
                cmd.Parameters.Add(new SqlParameter("@peopleid", PeopleId));
                cmd.Parameters.Add(new SqlParameter("@warehouseid", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@skip", skip));
                cmd.Parameters.Add(new SqlParameter("@take", take));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                var reader = cmd.ExecuteReader();
                var newdata = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<ItemDataDC>(reader).ToList();

                reader.NextResult();
                while (reader.Read())
                {
                    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                }

                var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();

                foreach (var it in newdata)
                {

                    if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                    {
                        it.IsOffer = false;
                    }
                    if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                        it.IsOffer = true;
                    else
                        it.IsOffer = false;

                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }
                    }


                    if (it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;
                    }

                    try
                    {/// Dream Point Logic && Margin Point
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //salesman 0.2=(0.02 * 10=0.2)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }

                        }
                        else
                        {
                            it.dreamPoint = 0;
                        }
                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }

                    }
                    catch { }
                    if (lang.Trim() == "hi")
                    {
                        if (!string.IsNullOrEmpty(it.HindiName))
                        {
                            if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                            }
                            else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                            }

                            else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                            {
                                it.itemname = it.HindiName; //item display name
                            }
                            else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                            {
                                it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                            }
                        }
                    }

                    items.Add(it);
                }


                if (items != null && items.Any())
                {
                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    var itemMultiMRPIds = items.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);

                    foreach (var itm in items)
                    {
                        if (itm.price > itm.UnitPrice)
                        {
                            itm.marginPoint = itm.UnitPrice > 0 ? (((itm.price - itm.UnitPrice) * 100) / itm.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == itm.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == itm.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = itm.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    itm.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }
                        }
                        else
                        {
                            itm.marginPoint = 0;
                        }
                    }
                    items.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                    itemResponseDc.ItemDataDCs = items.OrderBy(x => x.marginPoint).ToList();
                    return itemResponseDc;
                }
                else
                {
                    itemResponseDc.TotalItem = 0;
                    itemResponseDc.ItemDataDCs = new List<ItemDataDC>();
                    return itemResponseDc;
                }
            }


        }

        [HttpGet]
        [Route("CustomerRemarkUopdate")]
        public async Task<bool> CustomerRemarkUopdate(int CustomerId, string Remark)
        {
            bool result = false;
            using (AuthContext context = new AuthContext())
            {
                if (CustomerId != 0 && Remark != null)
                {
                    var customers = await context.Customers.Where(x => x.CustomerId == CustomerId && x.Active == true && x.Deleted == false).FirstOrDefaultAsync();
                    if (customers != null)
                    {

                        customers.Remark = Remark;
                        customers.UpdatedDate = DateTime.Now;
                        context.Entry(customers).State = EntityState.Modified;
                        context.Commit();
                        result = true;

                    }
                    else
                    {
                        result = false;
                    }
                }
            }
            return result;
        }

        [HttpPost]
        [Route("InsertCatalogConfiguration")]
        public async Task<APIResponse> InsertCatalogConfiguration(InsertCatalogConfigDc insertCatalogConfigDc)
        {
            try
            {
                if (1 == (insertCatalogConfigDc.Frequency + insertCatalogConfigDc.CustomerReach + insertCatalogConfigDc.Amount))
                {
                    using (AuthContext context = new AuthContext())
                    {
                        var identity = User.Identity as ClaimsIdentity;
                        int userid = 0;
                        foreach (Claim claim in identity.Claims)
                        {
                            if (claim.Type == "userid")
                            {
                                userid = int.Parse(claim.Value);
                            }
                        }
                        insertCatalogConfigDc.listingConfigurationDCs = insertCatalogConfigDc.listingConfigurationDCs.OrderBy(x => x.Sequence).ToList();
                        foreach (var x in insertCatalogConfigDc.listingConfigurationDCs)
                        {
                            var Checkdata = false;
                            CatelogConfig catelogConfig = new CatelogConfig();
                            if (x.Id > 0)
                            {
                                catelogConfig = context.CatelogConfigs.Where(y => y.Id == x.Id && y.CityId == insertCatalogConfigDc.CityId && y.IsActive == true && y.IsDeleted == false).FirstOrDefault();
                                Checkdata = catelogConfig != null ? true : false;
                                catelogConfig = catelogConfig != null ? catelogConfig : new CatelogConfig();
                            }
                            catelogConfig.CityId = insertCatalogConfigDc.CityId;
                            catelogConfig.Frequency = insertCatalogConfigDc.Frequency;
                            catelogConfig.CustomerReach = insertCatalogConfigDc.CustomerReach;
                            catelogConfig.Amount = insertCatalogConfigDc.Amount;
                            catelogConfig.IsRepeat = insertCatalogConfigDc.IsRepeat;
                            catelogConfig.ConfigName = x.ConfigName;
                            catelogConfig.ItemCount = x.ItemCount;
                            catelogConfig.Status = x.Status;
                            catelogConfig.Sequence = x.Sequence;
                            catelogConfig.Sort = x.Sort;
                            catelogConfig.Unbilled = x.Unbilled;
                            catelogConfig.IsScoreCheck = x.IsScoreCheck;
                            catelogConfig.ScoreFrom = x.ScoreFrom;
                            catelogConfig.ScoreTo = x.ScoreTo;
                            catelogConfig.NewLaunch = x.NewLaunch;
                            catelogConfig.PromotionalItems = x.PromotionalItems;
                            catelogConfig.IsActive = true;
                            catelogConfig.IsDeleted = false;

                            if (x.Id > 0 && Checkdata)
                            {
                                catelogConfig.ModifiedBy = userid;
                                catelogConfig.ModifiedDate = DateTime.Now;
                                context.Entry(catelogConfig).State = EntityState.Modified;
                            }
                            else
                            {
                                catelogConfig.IsDisable = true;
                                catelogConfig.CreatedBy = userid;
                                catelogConfig.CreatedDate = DateTime.Now;
                                context.CatelogConfigs.Add(catelogConfig);
                            }
                            context.Commit();
                        }
                    }
                    return new APIResponse { Status = true, Message = "Data Saved" };
                }
                else
                    return new APIResponse { Status = false, Message = "Sum Of Frequency, CustomerReach and Amount Should be 1" };
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [HttpPost]
        [Route("InsertUpdateCustomerRemark")]
        public async Task<APIResponse> InsertUpdateCustomerRemarkAsync(InsertCustomerRemarksDC res)
        {
            try
            {
                CustomerRemark customerRemark = new CustomerRemark();
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    var userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    if (res.Id > 0)
                    {
                        customerRemark = context.CustomerRemarks.Where(x => x.Id == res.Id).FirstOrDefault();
                        customerRemark.ExecutiveId = res.ExecutiveId;
                        customerRemark.CustomerId = res.CustomerId;
                        customerRemark.Remark = res.Remark;
                        customerRemark.IsActive = res.IsDelete ? false : true;
                        customerRemark.IsDeleted = res.IsDelete;
                        customerRemark.ModifiedBy = userid;
                        customerRemark.ModifiedDate = DateTime.Now;
                        context.Entry(customerRemark).State = EntityState.Modified;
                    }
                    else
                    {
                        customerRemark.ExecutiveId = res.ExecutiveId;
                        customerRemark.CustomerId = res.CustomerId;
                        customerRemark.Remark = res.Remark;
                        customerRemark.IsActive = true;
                        customerRemark.IsDeleted = false;
                        customerRemark.CreatedBy = userid;
                        customerRemark.CreatedDate = DateTime.Now;
                        context.CustomerRemarks.Add(customerRemark);
                    }
                    if (context.Commit() > 0)
                    {
                        return new APIResponse { Status = true, Message = "Data Saved Successfully", Data = customerRemark.Id };
                    }
                    else
                    {
                        return new APIResponse { Status = false, Message = "Data Not Save" };
                    }

                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        //--------------------Report section-----------------
        #region Report section
        [Route("ActualAndPlannedRouteData")]
        [HttpGet]
        [AllowAnonymous]
        public string ActualAndPlannedRouteData(DateTime Date, string Route)
        {
            List<TodayDashboardDc> AllTodayData = new List<TodayDashboardDc>();
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DashboardDc dash = new DashboardDc();
            string FileUrl = "";
            string filename = "";
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

            var today = Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.AssignmentDate == today);
            using (var Context = new AuthContext())
            {
                var peopleIds = MonthBeat.Select(x => x.PeopleId).Distinct().ToList();
                var PeopleWarehouseId = Context.Peoples.Where(x => peopleIds.Contains(x.PeopleID)).Select(x => new { x.PeopleID, x.WarehouseId, x.DisplayName }).ToList();

                var OrderIdList = Context.DbOrderMaster.Where(x => peopleIds.Contains(x.OrderTakenSalesPersonId ?? 0) && EntityFunctions.TruncateTime(x.CreatedDate) == Date).Select(x => new { x.OrderId, x.Skcode, x.OrderTakenSalesPersonId }).ToList();
                var orderids = OrderIdList.Select(x => x.OrderId).Distinct().ToList();
                var orderdetails = Context.DbOrderDetails.Where(x => orderids.Contains(x.OrderId)).Select(x => new { x.OrderId, x.StoreId, x.ExecutiveId, x.ExecutiveName }).ToList();

                var stores = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
                var ClusterStoreExecutives = Context.ClusterStoreExecutives.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                List<actualrouteNew> ActualRoutes = new List<actualrouteNew>();
                List<actualrouteNew> PlannedRoutes = new List<actualrouteNew>();
                foreach (var item in MonthBeat)
                {
                    var todayBeat = item;

                    int WarehouseId = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).WarehouseId : 0;
                    string ExecutiveName = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).DisplayName : "";

                    BeatCustomerDc Beat = new BeatCustomerDc();
                    if (Route == "A")
                    {
                        var ActualRouteslist = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => new
                        {
                            SkCode = x.Skcode,
                            Warehouse = x.WarehouseName,
                            ExecutiveName = ExecutiveName,// OrderIdList.FirstOrDefault(z => z.Skcode == x.Skcode) != null ? orderdetails.FirstOrDefault(y => y.ExecutiveId == OrderIdList.FirstOrDefault(z => z.Skcode == x.Skcode).OrderTakenSalesPersonId).ExecutiveName : "",
                            Visited = x.IsVisited,
                            CheckIn = x.CheckIn,
                            CheckOut = x.CheckOut,
                            StoreId = ClusterStoreExecutives.FirstOrDefault(y => y.ExecutiveId == x.ExecutiveId && y.ClusterId == x.ClusterId)?.StoreId,
                            ClusterName = x.ClusterName,
                            IsOrdered = OrderIdList.FirstOrDefault(y => y.Skcode == x.Skcode) == null ? "NO" : "YES",
                        }).ToList() : null;

                        if (ActualRouteslist != null && ActualRouteslist.Any())
                        {
                            filename = "ActualRoutes";
                            foreach (var i in ActualRouteslist.Distinct())
                            {
                                actualrouteNew obj = new actualrouteNew();
                                obj.SkCode = i.SkCode;
                                obj.Warehouse = i.Warehouse;
                                obj.ExecutiveName = i.ExecutiveName;
                                obj.Visited = i.Visited;
                                obj.CheckIn = i.CheckIn;
                                obj.CheckOut = i.CheckOut;
                                obj.StoreName = i.StoreId != null ? stores.FirstOrDefault(y => y.Id == i.StoreId).Name : ""; //Context.StoreDB.FirstOrDefault(x => x.Id == i.StoreId)?.Name;
                                obj.ClusterName = i.ClusterName;
                                obj.IsOrdered = i.IsOrdered;
                                ActualRoutes.Add(obj);
                            }
                        }
                    }
                    else
                    {
                        var PlannedRouteslist = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new
                        {
                            SkCode = x.Skcode,
                            Warehouse = x.WarehouseName,
                            ExecutiveName = ExecutiveName,
                            StoreId = ClusterStoreExecutives.FirstOrDefault(y => y.ExecutiveId == item.PeopleId && y.ClusterId == x.ClusterId && y.IsDeleted == false && y.IsActive == true)?.StoreId,
                            ClusterName = x.ClusterName,
                        }).ToList() : null;

                        if (PlannedRouteslist != null && PlannedRouteslist.Any())
                        {
                            filename = "PlannedRoutes";
                            foreach (var i in PlannedRouteslist.Distinct())
                            {
                                actualrouteNew obj = new actualrouteNew();
                                obj.SkCode = i.SkCode;
                                obj.Warehouse = i.Warehouse;
                                obj.ExecutiveName = i.ExecutiveName;
                                obj.StoreName = i.StoreId != null ? stores.FirstOrDefault(y => y.Id == i.StoreId).Name : "";//Context.StoreDB.FirstOrDefault(x => x.Id == i.StoreId)?.Name;
                                obj.ClusterName = i.ClusterName;
                                PlannedRoutes.Add(obj);
                            }
                        }
                    }
                }

                var dashboardDt = ClassToDataTable.CreateDataTable(ActualRoutes);

                string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
                if (!Directory.Exists(ExcelSavePath))
                    Directory.CreateDirectory(ExcelSavePath);

                var fileName = filename + Date.ToString("ddMMyyyy") + ".xlsx";
                string filePath = ExcelSavePath + "\\" + fileName;

                ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

                FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);
            }
            return FileUrl; ;
        }

        [Route("DayWiseBeatShopCountRpt")]
        [HttpGet]
        public string DayWiseBeatShopCountRpt(string ReportType)
        {
            List<DayWiseBeatShopCountByExecutiveDc> beatlist = new List<DayWiseBeatShopCountByExecutiveDc>();
            string FileUrl = "";
            using (var db = new AuthContext())
            {
                var list = (from e in db.ClusterStoreExecutives
                            join p in db.Peoples on e.ExecutiveId equals p.PeopleID
                            where e.IsActive == true && e.IsDeleted == false
                            select new
                            {
                                p.PeopleID,
                                p.WarehouseId
                            }).Distinct().ToList();


                if (list != null && list.Any())
                {


                    foreach (var item in list)
                    {

                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();
                        List<DayWiseBeatShopCountByExecutiveDc> dt = new List<DayWiseBeatShopCountByExecutiveDc>();
                        var cmd = db.Database.Connection.CreateCommand();
                        cmd.CommandTimeout = 1200;
                        if (ReportType == "Day")
                        {
                            cmd.CommandText = "[dbo].[DayWiseBeatShopCountByExecutive]";
                        }
                        else if (ReportType == "Cluster")
                        {
                            cmd.CommandText = "[dbo].[ClusterWiseBeatShopCountByExecutive]";
                            //DayShopCountNew
                        }
                        else if (ReportType == "")
                        {
                            cmd.CommandText = "[dbo].[TotalBeatClusterWise]";
                        }

                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        var param1 = new SqlParameter("peopleId", item.PeopleID);
                        cmd.Parameters.Add(param1);
                        var reader = cmd.ExecuteReader();
                        //dt = ((IObjectContextAdapter)db).ObjectContext.Translate<DayWiseBeatShopCountByExecutiveDc>(reader).FirstOrDefault();

                        dt = ((IObjectContextAdapter)db).ObjectContext.Translate<DayWiseBeatShopCountByExecutiveDc>(reader).ToList();
                        if (dt != null)
                        {
                            foreach (var m in dt)
                            {
                                //var storeId = db.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.SalesPersonId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                                DayWiseBeatShopCountByExecutiveDc obj = new DayWiseBeatShopCountByExecutiveDc();

                                obj.ExecutiveID = m.ExecutiveID;
                                obj.ExecutiveName = m.ExecutiveName;
                                obj.WarehouseName = m.WarehouseName;
                                obj.ClusterName = m.ClusterName;
                                obj.Store = m.Store;
                                obj.Monday = m.Monday;
                                obj.Tuesday = m.Tuesday;
                                obj.Wednesday = m.Wednesday;
                                obj.Thursday = m.Thursday;
                                obj.Friday = m.Friday;
                                obj.Saturday = m.Saturday;
                                obj.Sunday = m.Sunday;

                                obj.TotalCustomer = m.TotalCustomer;
                                beatlist.Add(obj);
                            }

                        }

                        db.Database.Connection.Close();
                    }

                    var dashboardDt = ClassToDataTable.CreateDataTable(beatlist);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/DayBeatShopCount");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "DayBeatShopCount" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

                    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                  , HttpContext.Current.Request.Url.DnsSafeHost
                                                                  , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                  , "/SalesAppDashboardFile/DayBeatShopCount/" + fileName);
                }
                return FileUrl;
            }
        }

        [Route("GetPlannedRouteByExecutive")]
        [HttpGet]
        [AllowAnonymous]
        public bool GetPlannedRouteByExecutive(int PeopleId, DateTime Date)
        {
            string FileUrl = "";
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            //var today = DateTime.Now.Date;
            var today = Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
            var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == today);

            var PlannedRouteslist = todayBeat.PlannedRoutes.Select(x => new { x.CustomerId, x.Skcode, x.ExecutiveId }).ToList();
            var dashboardDt = ClassToDataTable.CreateDataTable(PlannedRouteslist);

            string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesAppInternalData");
            if (!Directory.Exists(ExcelSavePath))
                Directory.CreateDirectory(ExcelSavePath);

            var fileName = "CustomerDetail" + Date.ToString("ddMMyyyy") + ".xlsx";
            string filePath = ExcelSavePath + "\\" + fileName;

            ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

            FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                          , HttpContext.Current.Request.Url.DnsSafeHost
                                                          , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                          , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);
            return true;
        }



        [Route("ManualBeatDashboardDetail")]
        [HttpGet]
        [AllowAnonymous]
        public string ManualBeatDashboardDetail(DateTime Date)
        {
            List<TodayDashboardDataInternalDc> AllTodayData = new List<TodayDashboardDataInternalDc>();
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DashboardDc dash = new DashboardDc();
            string FileUrl = "";
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            //var today = DateTime.Now.Date;
            var today = Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.AssignmentDate == today);
            using (var Context = new AuthContext())
            {
                var PeopleWarehouseId = (from e in Context.ClusterStoreExecutives
                                         join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                         where e.IsActive == true && e.IsDeleted == false
                                         select new
                                         {
                                             p.PeopleID,
                                             p.WarehouseId,
                                             p.DisplayName,
                                             e.StoreId
                                         }).Distinct().ToList();

                var Stores = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
                // var peopleIds = MonthBeat.Select(x => x.PeopleId).Distinct().ToList();
                //var PeopleWarehouseId = Context.Peoples.Where(x => peopleIds.Contains(x.PeopleID)).Select(x => new { x.PeopleID, x.WarehouseId, x.DisplayName }).ToList();

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                foreach (var item in MonthBeat)
                {
                    var IsExisit = PeopleWarehouseId.Where(x => x.PeopleID == item.PeopleId).FirstOrDefault() != null ? true : false;
                    if (!IsExisit)
                    {
                        continue;
                    }
                    ExecutiveBeats todayBeat = new ExecutiveBeats();

                    todayBeat = item;

                    int WarehouseId = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).WarehouseId : 0;
                    string ExecutiveName = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).DisplayName : "";

                    if (todayBeat != null)
                    {
                        //int WarehouseId = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).WarehouseId : 0;
                        //string ExecutiveName = PeopleWarehouseId.Any(x => x.PeopleID == item.PeopleId) ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).DisplayName : "";

                        var WarehouseName = WarehouseId > 0 ? Context.Warehouses.FirstOrDefault(x => x.WarehouseId == WarehouseId && x.active == true && x.Deleted == false).WarehouseName : "";
                        //long? storeId = Context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == item.PeopleId && x.IsDeleted==false && x.IsActive==true)?.StoreId;
                        long? storeId = PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId) != null ? PeopleWarehouseId.FirstOrDefault(x => x.PeopleID == item.PeopleId).StoreId : 0;

                        var ClusterIds = Context.ClusterStoreExecutives.Where(x => x.ExecutiveId == item.PeopleId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                        var ClusterNames = Context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                        var StoreName = storeId > 0 ? Stores.FirstOrDefault(x => x.Id == storeId).Name : "";

                        BeatCustomerDc Beat = new BeatCustomerDc();

                        Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                        DataTable IdDt = new DataTable();
                        List<int> ActualCustomerVisited = new List<int>();
                        IdDt = new DataTable();
                        IdDt.Columns.Add("IntValue");
                        DataTable VisitedCustomersdt = new DataTable();
                        VisitedCustomersdt = new DataTable();
                        VisitedCustomersdt.Columns.Add("IntValue");
                        if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any())
                        {
                            if (Beat.TodayBeatCustomerIds.Count > 0)
                            {
                                foreach (var id in Beat.TodayBeatCustomerIds)
                                {
                                    int cid = id.Customerid;
                                    var dr = IdDt.NewRow();
                                    dr["IntValue"] = cid;
                                    IdDt.Rows.Add(dr);
                                }
                            }
                            else
                            {
                                IdDt = null;
                            }

                            ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                        }
                        var cmd = Context.Database.Connection.CreateCommand();
                        cmd.CommandTimeout = 1200;
                        cmd.CommandText = "[dbo].[SpDashBoardDetailNew]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        var param4 = new SqlParameter("PersonId", todayBeat.PeopleId);
                        var param5 = new SqlParameter("CustIdDs", IdDt);
                        var param6 = new SqlParameter("Flag", 1);
                        var param8 = new SqlParameter("WarehouseId", WarehouseId);
                        cmd.Parameters.Add(param4);
                        cmd.Parameters.Add(param5);
                        cmd.Parameters.Add(param6);
                        cmd.Parameters.Add(param8);
                        var reader = cmd.ExecuteReader();
                        dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();
                        if (dashboardDetail != null)
                        {
                            TodayDashboardDataInternalDc ToObj = new TodayDashboardDataInternalDc();
                            // ToObj.ExecutiveName = ExecutiveName;
                            ToObj.TodayBeatSales = dashboardDetail.BeatSales;
                            ToObj.TodayExtraSales = dashboardDetail.ExtraSales;
                            ToObj.TodayBeatOrder = dashboardDetail.BeatOrder;
                            ToObj.TodayTotalSales = dashboardDetail.TotalSales;
                            ToObj.TodayProductiveCall = dashboardDetail.ProductiveCall;
                            int SuccessPhoneOrder = 0;
                            if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                            {
                                SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                ToObj.TodayVisitPlanned = todayBeat.PlannedRoutes.Count();
                                ToObj.TodayTotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                ToObj.TodayOutletCoverage = (Convert.ToDouble(ToObj.TodayTotalCall) / ToObj.TodayVisitPlanned) * 100;
                                ToObj.PhoneOrder = SuccessPhoneOrder;
                            }
                            else
                            {
                                ToObj.TodayVisitPlanned = 0;
                                ToObj.TodayTotalCall = 0;
                                ToObj.TodayOutletCoverage = 0;
                            }
                            if (ToObj.TodayTotalCall > 0 || SuccessPhoneOrder > 0)
                            {
                                ToObj.TodayStrikeRate = (Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100;
                            }
                            var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                            // ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                            ToObj.TodayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                            ToObj.TodayExtraCall = dashboardDetail.ExtraCall;
                            ToObj.TodayExtraOrder = dashboardDetail.ExtraOrder;
                            ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                            ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                            ToObj.Eco = dashboardDetail.Eco;
                            ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                            ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                            ToObj.ExecutiveName = ExecutiveName;
                            ToObj.ClusterName = string.Join(",", ClusterNames); ;
                            ToObj.StoreName = StoreName;
                            AllTodayData.Add(ToObj);
                        }
                    }
                }
                var dashboardDt = ClassToDataTable.CreateDataTable(AllTodayData);

                string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
                if (!Directory.Exists(ExcelSavePath))
                    Directory.CreateDirectory(ExcelSavePath);

                var fileName = "Manual_SalesPersonBeat_DSR" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
                string filePath = ExcelSavePath + "\\" + fileName;

                ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

                FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                              , HttpContext.Current.Request.Url.DnsSafeHost
                                                              , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                              , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);

            }
            return FileUrl; ;
        }

        [Route("TodayBeatDSR")]
        [HttpGet]
        [AllowAnonymous]
        public string TodayBeatDSR()
        {

            string FileUrl = "";
            List<TodayDSRDc> TodayDSRDcs = new List<TodayDSRDc>();
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            //var today = DateTime.Now.Date;
            var today = DateTime.Now.Date;
            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            var MonthBeat = mongoDbHelper.Select(x => x.AssignmentDate == today);
            using (var Context = new AuthContext())
            {
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 1200;
                cmd.CommandText = "[dbo].[GetTodaySKExecutivePerformance]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var reader = cmd.ExecuteReader();
                TodayDSRDcs = ((IObjectContextAdapter)Context).ObjectContext.Translate<TodayDSRDc>(reader).ToList();
            }
            foreach (var item in TodayDSRDcs)
            {
                var todayBeat = MonthBeat.FirstOrDefault(x => x.PeopleId == item.PeopleId);
                if (todayBeat != null)
                {
                    item.BeatIn = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                    item.BeatOut = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;
                    if (todayBeat.PlannedRoutes != null)
                    {
                        var plannCids = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
                        if (plannCids.Count() > 0 && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any())
                        {
                            item.TotalCall = todayBeat.ActualRoutes.Where(x => plannCids.Contains(x.CustomerId)).Select(x => x.CustomerId).Distinct().Count();
                            item.ExtraVisit = todayBeat.ActualRoutes.Where(x => !plannCids.Contains(x.CustomerId)).Count();
                        }
                    }
                }
            }

            var dashboardDt = ClassToDataTable.CreateDataTable(TodayDSRDcs);

            string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
            if (!Directory.Exists(ExcelSavePath))
                Directory.CreateDirectory(ExcelSavePath);

            var fileName = "Today_SalesPersonBeat_DSR" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
            string filePath = ExcelSavePath + "\\" + fileName;

            ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

            FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                          , HttpContext.Current.Request.Url.DnsSafeHost
                                                          , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                          , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);

            return FileUrl;
        }

        [Route("GetCatalogConfigByCityId")]
        [HttpGet]
        public async Task<InsertCatalogConfigDc> GetCatalogConfigurationByCityIdAsync(long CityId)
        {
            using (AuthContext context = new AuthContext())
            {
                var CatConfigData = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsActive == true && x.IsDeleted == false).ToList();
                var insertCatalogConfigDc = Mapper.Map(CatConfigData[0]).ToANew<InsertCatalogConfigDc>();
                insertCatalogConfigDc.listingConfigurationDCs = Mapper.Map(CatConfigData).ToANew<List<ListingConfigurationDC>>().OrderBy(x => x.Sequence).ToList();
                return insertCatalogConfigDc;
            }
        }

        //[Route("test")]
        //[HttpPost]
        //[AllowAnonymous]
        //public bool test(BeatCustomerDTOdc obj)
        //{
        //    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
        //    var today = DateTime.Now.Date;
        //    var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
        //    var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == obj.PeopleId && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);

        //    var dd = MonthBeat.Where(x => x.AssignmentDate.DayOfWeek.ToString() == obj.Day.ToString()).SelectMany(x => x.PlannedRoutes).ToList();
        //    var ff = MonthBeat.Where(x => x.AssignmentDate.DayOfWeek.ToString() == obj.Day.ToString()).Select(x => x.PlannedRoutes).ToList();

        //    int IsVisit = 0; int NonVisit = 0;
        //    if (dd.Count > 0)
        //    {
        //        IsVisit = dd.Where(x => x.IsVisited == true).Distinct().Count();
        //        NonVisit = dd.Where(x => x.IsVisited == false).Distinct().Count();
        //    }

        //    return true;
        //}

        //[Route("TodayBeatDSR")]
        //[HttpGet]
        //[AllowAnonymous]
        //public string TodayBeatDSR()
        //{
        //    string FileUrl = "";
        //    List<TodayDSRDc> TodayDSRDcs = new List<TodayDSRDc>();
        //    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
        //    //var today = DateTime.Now.Date;
        //    var today = DateTime.Now.Date;
        //    var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
        //    var MonthBeat = mongoDbHelper.Select(x => x.AssignmentDate == today);
        //    using (var Context = new AuthContext())
        //    {
        //        if (Context.Database.Connection.State != ConnectionState.Open)
        //            Context.Database.Connection.Open();

        //        var cmd = Context.Database.Connection.CreateCommand();
        //        cmd.CommandTimeout = 1200;
        //        cmd.CommandText = "[dbo].[GetTodaySKExecutivePerformance]";
        //        cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //        var reader = cmd.ExecuteReader();
        //        TodayDSRDcs = ((IObjectContextAdapter)Context).ObjectContext.Translate<TodayDSRDc>(reader).ToList();
        //    }
        //    foreach (var item in TodayDSRDcs)
        //    {
        //        var todayBeat = MonthBeat.FirstOrDefault(x => x.PeopleId == item.PeopleId);
        //        if (todayBeat != null)
        //        {
        //            item.BeatIn = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
        //            item.BeatOut = todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;
        //            if (todayBeat.PlannedRoutes != null)
        //            {
        //                var plannCids = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList();
        //                if (plannCids.Count() > 0 && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any())
        //                {
        //                    item.TotalCall = todayBeat.ActualRoutes.Where(x => plannCids.Contains(x.CustomerId)).Select(x => x.CustomerId).Distinct().Count();
        //                }
        //            }
        //        }
        //    }


        //    var dashboardDt = ClassToDataTable.CreateDataTable(TodayDSRDcs);

        //    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
        //    if (!Directory.Exists(ExcelSavePath))
        //        Directory.CreateDirectory(ExcelSavePath);

        //    var fileName = "Today_SalesPersonBeat_DSR" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
        //    string filePath = ExcelSavePath + "\\" + fileName;

        //    ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

        //    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
        //                                                  , HttpContext.Current.Request.Url.DnsSafeHost
        //                                                  , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
        //                                                  , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);

        //    return FileUrl;
        //}
        #endregion

        [Route("InsertProductCatalog")]
        [HttpPost]
        public APIResponse AddProductCatalog(List<InsertProductCatalogDataDC> insertProductCatalogDataDCs)
        {

            APIResponse res = new APIResponse();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                if (insertProductCatalogDataDCs.Count > 0)
                {
                    foreach (var obj in insertProductCatalogDataDCs)
                    {
                        ProductCatalog catalog = new ProductCatalog();
                        if (obj.Id > 0)
                            catalog = context.ProductCatalogs.Where(x => x.Id == obj.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        catalog.SectionName = obj.SectionName;
                        catalog.SectionHindiName = obj.SectionHindiName;
                        catalog.Sequence = obj.Sequence;
                        catalog.Type = obj.Type;
                        catalog.WarehouseId = obj.WarehouseId;
                        catalog.IsPromotional = false;
                        catalog.URL = obj.URL;
                        catalog.CustomList = obj.CustomList;
                        catalog.IsActive = true;
                        catalog.IsDeleted = false;
                        if (obj.Id > 0)
                        {
                            catalog.ModifiedBy = userid;
                            catalog.ModifiedDate = DateTime.Now;
                            context.Entry(catalog).State = EntityState.Modified;
                        }
                        else
                        {
                            catalog.CreatedBy = userid;
                            catalog.CreatedDate = DateTime.Now;
                            context.ProductCatalogs.Add(catalog);
                            context.Commit();
                        }
                        if (obj.ItemNumber != null)
                        {
                            if (obj.Type == "CustomItem" && obj.ItemNumber.Count > 0)
                            {
                                foreach (var res1 in obj.ItemNumber)
                                {
                                    var data = context.ProductCatalogItems.Where(x => x.SectionId == catalog.Id && x.ItemNumber == res1.ItemNumber && x.WarehouseId == obj.WarehouseId).FirstOrDefault();
                                    if (data == null)
                                    {
                                        ProductCatalogItem catalogItem = new ProductCatalogItem();
                                        catalogItem.WarehouseId = (int)obj.WarehouseId;
                                        catalogItem.ItemNumber = res1.ItemNumber;
                                        catalogItem.StoreId = res1.StoreId;
                                        catalogItem.Sequence = res1.Sequence;
                                        catalogItem.SectionId = catalog.Id;
                                        catalogItem.IsPromotional = false;
                                        catalogItem.IsActive = true;
                                        catalogItem.IsDeleted = false;
                                        catalogItem.CreatedBy = userid;
                                        catalogItem.CreatedDate = DateTime.Now;
                                        context.ProductCatalogItems.Add(catalogItem);
                                    }
                                    else
                                    {
                                        data.Sequence = res1.Sequence;
                                        data.IsActive = true;
                                        data.IsDeleted = false;
                                        data.ModifiedBy = userid;
                                        data.ModifiedDate = DateTime.Now;
                                        context.Entry(data).State = EntityState.Modified;
                                    }
                                }
                            }
                        }
                    }

                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Saved";
                        res.Status = true;
                    }
                }
                else
                {
                    res.Message = "Object Null";
                    res.Status = false;
                }
            }
            return res;
        }

        [Route("InsertProductCatalogItem")]
        [HttpPost]
        public APIResponse AddProductCatalogItem(List<UpdateProductCatalogItemDc> ProductCatalogItems)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    if (ProductCatalogItems.Count > 0 || ProductCatalogItems.Any())
                    {
                        var warehouseId = ProductCatalogItems.FirstOrDefault().WarehouseId;
                        var catelogs = context.ProductCatalogs.FirstOrDefault(x => x.WarehouseId == warehouseId && x.IsActive && !x.IsDeleted.Value);
                        if (catelogs != null)
                        {
                            catelogs = new ProductCatalog
                            {
                                CreatedBy = userid,
                                CreatedDate = DateTime.Now,
                                CustomList = "Promotional",
                                IsActive = true,
                                IsDeleted = false,
                                IsPromotional = true,
                                SectionHindiName = "",
                                SectionName = "Promotional",
                                Sequence = 0,
                                WarehouseId = warehouseId,
                                Type = "CustomList"
                            };
                            context.ProductCatalogs.Add(catelogs);
                            context.Commit();
                        }
                        foreach (var item in ProductCatalogItems)
                        {
                            ProductCatalogItem catalogItem = new ProductCatalogItem();
                            if (item.Id > 0)
                                catalogItem = context.ProductCatalogItems.Where(x => x.Id == item.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                            catalogItem.ItemNumber = item.ItemNumber;
                            catalogItem.WarehouseId = item.WarehouseId;
                            catalogItem.StoreId = item.StoreId;
                            catalogItem.Sequence = item.Sequence;
                            catalogItem.IsPromotional = item.IsPromotional;
                            catalogItem.SectionId = catelogs.Id;
                            catalogItem.IsActive = true;
                            catalogItem.IsDeleted = false;
                            if (item.Id > 0)
                            {
                                catalogItem.ModifiedBy = userid;
                                catalogItem.ModifiedDate = DateTime.Now;
                                context.Entry(catalogItem).State = EntityState.Modified;
                            }
                            else
                            {
                                catalogItem.SectionId = catelogs.Id;
                                catalogItem.CreatedBy = userid;
                                catalogItem.CreatedDate = DateTime.Now;
                                context.ProductCatalogItems.Add(catalogItem);

                            }
                        }
                        if (context.Commit() > 0)
                        {
                            res.Message = "Item Saved";
                            res.Status = true;
                        }
                        else
                        {
                            res.Message = "Item Not Save";
                            res.Status = false;
                        }
                    }
                    else
                    {
                        res.Message = "Object Null";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Message = ex.Message;
                res.Status = false;
            }
            return res;
        }

        [Route("UpdateProductCatalogItem")]
        [HttpPost]
        public APIResponse UpdateProductCatalogItem(UpdateProductCatalogItemDc obj)
        {
            APIResponse res = new APIResponse();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                ProductCatalogItem catalogItem = context.ProductCatalogItems.Where(x => x.Id == obj.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();

                catalogItem.StoreId = obj.StoreId;
                catalogItem.ItemNumber = obj.ItemNumber;
                catalogItem.IsPromotional = obj.IsPromotional;
                catalogItem.WarehouseId = obj.WarehouseId;
                catalogItem.ModifiedBy = userid;
                catalogItem.ModifiedDate = DateTime.Now;
                context.Entry(catalogItem).State = EntityState.Modified;
                if (context.Commit() > 0)
                {
                    res.Message = "Item Saved";
                    res.Status = true;
                }
            }
            return res;
        }

        [HttpGet]
        [Route("GetSearchHistory")]
        public async Task<PopularRecentSearchDc> GetSearchHistory(int PeopleId, int WarehouseId, int customerId, int skip, int take, string lang)
        {
            PopularRecentSearchDc res = new PopularRecentSearchDc();

            MongoDbHelper<CustomerProductSearch> mongoDbHelper = new MongoDbHelper<CustomerProductSearch>();
            MongoDbHelper<ExecutiveProductSearch> ExecutivemongoDbHelper = new MongoDbHelper<ExecutiveProductSearch>();

            List<string> recentsearch = ExecutivemongoDbHelper.Select(x => x.PeopleId == PeopleId && x.IsDeleted == false, x => x.OrderByDescending(y => y.CreatedDate), skip, take).ToList().Select(x => x.keyword).ToList();
            List<string> popularSearch = mongoDbHelper.Select(x => x.customerId == customerId && x.IsDeleted == false, x => x.OrderByDescending(y => y.CreatedDate), skip, take).ToList().Select(x => x.keyword).ToList();

            recentsearch = recentsearch.Distinct().ToList();
            if (!string.IsNullOrEmpty(lang) && lang != "en")
            {
                Annotate annotate = new Annotate();
                var converttext = string.Join("|", recentsearch);
                var hindiText = await annotate.GetTranslatedText(converttext, lang);
                recentsearch = hindiText.Split('|').ToList();
            }


            popularSearch = popularSearch.Distinct().ToList();
            if (!string.IsNullOrEmpty(lang) && lang != "en")
            {
                Annotate annotate = new Annotate();
                var converttext = string.Join("|", popularSearch);
                var hindiText = await annotate.GetTranslatedText(converttext, lang);
                popularSearch = hindiText.Split('|').ToList();
            }

            res.RecentSearch = recentsearch;
            res.PopularSearch = popularSearch;
            return res;
        }

        [Route("GetSectionList")]
        [HttpGet]
        public async Task<APIResponse> GetSectionList(int PeopleId, int WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                    #region block Barnd
                    RetailerAppManager retailerAppManager = new RetailerAppManager();
                    var custtype = 4;
                    var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                    if (blockBarnds != null && blockBarnds.Any())
                    {
                        StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                    }
                    #endregion

                    var IdDt = new DataTable();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }

                    //var res = context.ProductCatalogs.Where(x => x.IsActive == true && x.IsDeleted == false && x.WarehouseId == WarehouseId && !x.IsPromotional).Select(x => new GetProductCatalogDC { Id = x.Id, SectionName = x.SectionName, SectionHindiName = x.SectionHindiName, Type = x.Type, URL = x.URL }).ToList();
                    //var res = context.Database.SqlQuery<GetProductCatalogDC>("exec GetProductCatalogByWId " + WarehouseId).ToList();

                    var Warehouseid = new SqlParameter("WarehouseId", WarehouseId);
                    var Peopleid = new SqlParameter("PeopleId", PeopleId);
                    var Brandlist = new SqlParameter("CatCompanyBrand", IdDt);
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetProductCatalogByWId]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(Warehouseid);
                    cmd.Parameters.Add(Peopleid);
                    cmd.Parameters.Add(Brandlist);

                    var reader = cmd.ExecuteReader();
                    List<GetProductCatalogDC> ItemData = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<GetProductCatalogDC>(reader).ToList();

                    return new APIResponse { Status = true, Data = ItemData.OrderBy(x => x.Sequence).ToList() };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("GetProductCatalogByWId")]
        [HttpGet]
        public async Task<APIResponse> GetProductCatalogAsync(long WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.ProductCatalogs.Where(x => x.WarehouseId == WarehouseId && x.IsActive == true && x.IsDeleted == false && !x.IsPromotional)
                      .Select(x =>
                      new GetProductCatalogDC
                      {
                          Id = x.Id,
                          SectionName = x.SectionName,
                          SectionHindiName = x.SectionHindiName,
                          CustomList = x.CustomList,
                          Type = x.Type,
                          URL = x.URL,
                          WarehouseId = x.WarehouseId,
                          IsPromotional = x.IsPromotional,
                          Sequence = x.Sequence
                      }).OrderBy(x => x.Sequence).ToList();
                    return new APIResponse { Status = true, Data = res };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetProductCatalogItems")]
        [HttpGet]
        public async Task<List<CatalogItemListDc>> GetProductCatalogItems(int PeopleId, int WarehouseId, int SectionId, string lang, int skip, int take)
        {

            List<CatalogItemListDc> ItemDataDCs = new List<CatalogItemListDc>();
            using (AuthContext context = new AuthContext())
            {
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                // int take = 20, skip = 0;

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                var IdDt = new DataTable();
                IdDt = new DataTable();
                IdDt.Columns.Add("categoryId");
                IdDt.Columns.Add("companyId");
                IdDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = IdDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    IdDt.Rows.Add(dr);
                }

                var param1 = new SqlParameter("WarehouseId", WarehouseId);
                var param2 = new SqlParameter("SectionId", SectionId);
                var param3 = new SqlParameter("CatCompanyBrand", IdDt);
                var param4 = new SqlParameter("skip", skip);
                var param5 = new SqlParameter("take", take);

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetProductCatalogItems]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                var reader = cmd.ExecuteReader();
                List<CatalogItemListDc> ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<CatalogItemListDc>(reader).ToList();
                reader.NextResult();
                var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (ItemData != null && ItemData.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(WarehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }


                foreach (var it in ItemData)
                {
                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;

                    //Condition for offer end
                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        else if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }
                    else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;

                    }

                    if (it.OfferCategory == 1)
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }

                    if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                    {
                        if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                        }
                        else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                        }

                        else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName; //item display name
                        }
                        else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                        }
                    }

                    it.Itemtype = 1;
                    ItemDataDCs.Add(it);

                    var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, WarehouseId, context);

                    foreach (var item in ItemDataDCs)
                    {
                        if (item.price > item.UnitPrice)
                        {
                            item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = item.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }
                        }
                        else
                        {
                            item.marginPoint = 0;
                        }
                    }
                }

                return ItemDataDCs.OrderBy(x => x.marginPoint).ToList();
            }
        }
        [Route("UpdateProductCatalog")]
        [HttpPost]
        public async Task<APIResponse> UpdateProductCatalog(List<GetProductCatalogDC> data)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    foreach (var obj in data)
                    {
                        ProductCatalog catalog = context.ProductCatalogs.Where(x => x.Id == obj.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        catalog.SectionName = obj.SectionName;
                        catalog.SectionHindiName = obj.SectionHindiName;
                        catalog.Sequence = obj.Sequence;
                        catalog.Type = obj.Type;
                        catalog.WarehouseId = obj.WarehouseId;
                        catalog.IsPromotional = obj.IsPromotional;
                        catalog.URL = obj.URL;
                        catalog.CustomList = obj.CustomList;
                        catalog.ModifiedBy = userid;
                        catalog.ModifiedDate = DateTime.Now;
                        if (catalog != null)
                            context.Entry(catalog).State = EntityState.Modified;
                    }
                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Updated";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "Item Not Updated";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }
        [Route("DeleteProductCatalogById")]
        [HttpGet]
        public async Task<APIResponse> DeleteProductCatalogById(long Id)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    ProductCatalog catalog = context.ProductCatalogs.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    catalog.IsActive = false;
                    catalog.IsDeleted = true;
                    catalog.ModifiedBy = userid;
                    catalog.ModifiedDate = DateTime.Now;
                    context.Entry(catalog).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "Item Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }
        [Route("GetAllProductCatalog")]
        [HttpGet]
        public async Task<APIResponse> GetAllProductCatalog(int skip, int take)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var result = context.ProductCatalogs.Where(x => x.IsActive == true && x.IsDeleted == false).OrderByDescending(x => x.CreatedDate).Skip(skip).Take(take).ToList();
                    var catalog = Mapper.Map(result).ToANew<List<UpdateProductCatalogDc>>();
                    var TotalCount = context.ProductCatalogs.Where(x => x.IsActive == true && x.IsDeleted == false).Count();
                    if (catalog.Count > 0)
                    {
                        res.Status = true;
                        res.Data = new Get_ProductCatalogDC { TotalCount = TotalCount, GetAllProductCatalog = catalog };
                    }
                    else
                    {
                        res.Message = "Data Not Found";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }
        [Route("DeleteCatalogConfigByCityId")]
        [HttpGet]
        public async Task<APIResponse> DeleteCatalogConfigByCityId(long CityId)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {

                            userid = int.Parse(claim.Value);
                        }
                    }
                    var catalogConfig = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var catalog in catalogConfig)
                    {
                        catalog.IsActive = false;
                        catalog.IsDeleted = true;
                        catalog.ModifiedBy = userid;
                        catalog.ModifiedDate = DateTime.Now;
                        context.Entry(catalog).State = EntityState.Modified;
                    }
                    if (context.Commit() > 0)
                    {
                        res.Message = "City Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "City Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {

                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }

        [Route("GetItemClassification")]
        [HttpGet]
        public async Task<ItemResponseDc> GetItemClassification(int PeopleId, int customerId, int warehouseId, string lang, int skip, int take, string Classification)
        {
            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<ItemDataDC>() };
            using (var context = new AuthContext())
            {

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                List<ItemDataDC> ItemDataDCs = new List<ItemDataDC>();
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var catsubcatDt = new DataTable();
                SqlParameter categorysubcatParam = null;

                catsubcatDt = new DataTable();
                catsubcatDt.Columns.Add("categoryId");
                catsubcatDt.Columns.Add("companyId");
                catsubcatDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = catsubcatDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    catsubcatDt.Rows.Add(dr);
                }

                categorysubcatParam = new SqlParameter("CatCompanyBrand", catsubcatDt);
                categorysubcatParam.SqlDbType = SqlDbType.Structured;
                categorysubcatParam.TypeName = "dbo.CatCompanyBrand";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetItemClassificationForSales]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@CustomerId", customerId));
                cmd.Parameters.Add(new SqlParameter("@Classification", Classification));
                cmd.Parameters.Add(categorysubcatParam);
                cmd.Parameters.Add(new SqlParameter("@Skip", skip));
                cmd.Parameters.Add(new SqlParameter("@Take", take));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<ItemDataDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                }


                itemResponseDc.ItemDataDCs = await ItemAdditionalFilters(warehouseId, ItemData, context, lang, customerId);

            }

            return itemResponseDc;
        }


        [Route("AddCheckOutComment")]
        [HttpPost]
        public async Task<APIResponse> AddCheckOutCommentAsync(List<UpdateCheckOutDC> updateCheckOut)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    foreach (var res in updateCheckOut)
                    {
                        CheckOut checkOut = new CheckOut();
                        if (res.Id > 0)
                            checkOut = context.CheckOuts.Where(x => x.Id == res.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        checkOut.Comment = res.Comment;
                        checkOut.Sequence = res.Sequence;
                        checkOut.IsActive = true;
                        checkOut.IsDeleted = false;
                        if (res.Id > 0)
                        {
                            checkOut.ModifiedBy = userid;
                            checkOut.ModifiedDate = DateTime.Now;
                            context.Entry(checkOut).State = EntityState.Modified;
                        }
                        else
                        {
                            checkOut.CreatedBy = userid;
                            checkOut.CreatedDate = DateTime.Now;
                            context.CheckOuts.Add(checkOut);
                        }
                    }
                    if (context.Commit() > 0)
                    {
                        return new APIResponse { Status = true, Message = "Data Saved" };
                    }
                    else
                        return new APIResponse { Status = false, Message = "Data Not Save" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("DeleteCheckOutComment")]
        [HttpGet]
        public async Task<APIResponse> DeleteCheckoutCommentAsync(long Id)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    var res = context.CheckOuts.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    if (res != null)
                    {
                        res.IsActive = false;
                        res.IsDeleted = true;
                        res.ModifiedBy = userid;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                        context.Commit();
                        return new APIResponse { Status = true, Message = "Data Deleted Successfully" };
                    }
                    else
                    {
                        return new APIResponse { Status = false, Message = "Data Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("GetAllComment")]
        [HttpGet]

        public async Task<UdharOverDueResponse> GetAllCommentAsync(int customerId = 0, int FormType = 0, int ExecutiveId = 0)
        {
            try
            {
                bool IsUdharOverDue = false;

                using (AuthContext context = new AuthContext())
                {

                    MongoDbHelper<UdharOverDueDayValidation> UdharOverDueDay = new MongoDbHelper<UdharOverDueDayValidation>();
                    var duelist = UdharOverDueDay.GetAll();
                    if (customerId > 0 && duelist != null && duelist.Any(x => x.MinOverDueDay > 0))
                    {
                        var minDay = duelist.Min(x => x.MinOverDueDay);
                        var SalesMinDay = duelist.Select(x => x.SalesMinDay).FirstOrDefault();

                        Customer customers = context.Customers.FirstOrDefault(a => a.CustomerId == customerId);
                        if (customers.UdharDueDays > 0)
                        {
                            var param1 = new SqlParameter("@CustomerId", customerId);
                            var UDData = context.Database.SqlQuery<CheckDueAmtDc>("Exec CheckDueAmt @CustomerId ", param1).FirstOrDefault();
                            if (UDData != null && UDData.Amount >= 1)
                            {
                                IsUdharOverDue = UDData.OverDueDays > (minDay - SalesMinDay) ? true : false;
                            }
                        }
                    }
                    var LastPhysicalvisit = context.CheckOutReasons.Where(x => x.CustomerId == customerId && x.ExecutiveId == ExecutiveId).OrderByDescending(x => x.Id).Select(x => x.IsPhysicalVisit).FirstOrDefault();
                    var data = context.CheckOuts.Where(x => x.IsActive == true && x.IsDeleted == false && x.FormType == FormType).ToList();
                    var res = Mapper.Map(data).ToANew<List<UpdateCheckOutDC>>().OrderBy(y => y.Sequence).ToList();
                    if (data.Count > 0)
                    {
                        return new UdharOverDueResponse { Status = true, Data = res, IsUdharOverDue = IsUdharOverDue, LastPhysicalvisit = LastPhysicalvisit };
                    }
                    else
                    {
                        return new UdharOverDueResponse { Status = false, Message = "Data Not Found", IsUdharOverDue = IsUdharOverDue };
                    }
                }
            }
            catch (Exception ex)
            {
                return new UdharOverDueResponse { Status = false, Message = ex.Message, IsUdharOverDue = false };
            }
        }
        [Route("AddCheckOutReason")]
        [HttpPost]
        public async Task<APIResponse> AddCheckOutReasonAsync(AddCheckOutReason obj)
        {

            using (AuthContext context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                CheckOutReason checkOutReason = new CheckOutReason();
                checkOutReason = Mapper.Map(obj).ToANew<CheckOutReason>();
                checkOutReason.IsActive = true;
                checkOutReason.IsDeleted = false;
                checkOutReason.CreatedBy = userid;
                checkOutReason.CreatedDate = DateTime.Now;
                checkOutReason.TimeIn = obj.StartDateTime;
                checkOutReason.TimeOut = obj.EndDateTime;
                context.CheckOutReasons.Add(checkOutReason);
                if (context.Commit() > 0)
                {
                    BeatsManager manager = new BeatsManager();
                    DateTime? CheckIn = await manager.BeatStart(obj.ExecutiveId, obj.CustomerId);
                    DataContracts.External.MobileExecutiveDC.SalesAppRouteParam param = new DataContracts.External.MobileExecutiveDC.SalesAppRouteParam();
                    param.Comment = obj.Comment;
                    param.CurrentAddress = obj.CurrentAddress;
                    param.CurrentLat = obj.CurrentLat;
                    param.CurrentLng = obj.CurrentLng;
                    param.CustomerId = obj.CustomerId;
                    param.Distance = obj.Distance;
                    param.EndDateTime = obj.EndDateTime;
                    param.IsEnd = obj.IsEnd;
                    param.PeopleId = obj.ExecutiveId;
                    param.ShopCloseImage = obj.ShopCloseImage;
                    param.StartDateTime = obj.StartDateTime;
                    CheckIn = await manager.BeatActualRoute(param);


                    if (obj.FormType == 1)
                    {
                        var peopleid = new SqlParameter("@ExecutiveId", obj.ExecutiveId);
                        var peoplelist = context.Database.SqlQuery<int>("EXEC GetDigitalExecutiveId @ExecutiveId", peopleid).ToList();

                        if (obj.IsPhysicalVisit == true)
                        {
                            if (peoplelist != null && peoplelist.Any())
                            {
                                var PeopleData = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerId && peoplelist.Contains(x.ExecutiveId) && x.IsActive == true && x.IsDeleted == false).ToList();

                                peoplelist.ForEach(x =>
                                {
                                    if (!PeopleData.Any(y => y.ExecutiveId == x))
                                    {
                                        context.CustomerExecutiveMappingsBeatEditDb.Add(new CustomerExecutiveMappingsBeatEdit
                                        {
                                            ExecutiveId = x,
                                            StoreId = 1,
                                            CustomerId = (int)obj.CustomerId,
                                            Day = "NoBeat",
                                            StartDate = DateTime.Now,
                                            CreatedDate = DateTime.Now,
                                            IsActive = true,
                                            IsDeleted = false,
                                            CreatedBy = userid,
                                        });
                                    }
                                });
                                context.Commit();
                            }
                        }
                        else
                        {
                            //foreach (var PID in peoplelist)
                            peoplelist.ForEach(y =>
                            {
                                var PeopleData = context.CustomerExecutiveMappingsBeatEditDb.Where(x => x.CustomerId == obj.CustomerId && x.ExecutiveId == y && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                if (PeopleData != null)
                                {
                                    PeopleData.IsActive = false;
                                    PeopleData.IsDeleted = true;
                                    PeopleData.ModifiedBy = userid;
                                    PeopleData.ModifiedDate = DateTime.Now;
                                    context.Entry(PeopleData).State = EntityState.Modified;
                                    context.Commit();
                                }
                            });
                        }
                    }
                    //return CheckIn.Value;
                    return new APIResponse { Status = true, Message = "Data Saved" };
                }
                else
                {
                    return new APIResponse { Status = false, Message = "Data Not Save" };
                }
            }

        }

        [Route("GetProdCatItemByWareId")]
        [HttpGet]
        public async Task<APIResponse> GetProdCatItemByWareIdAsync(long Warehouseid)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var param = new SqlParameter("WarehouseId", Warehouseid);
                    var data = context.Database.SqlQuery<UpdateProductCatalogItemDc>("exec GetProductCatItems @WarehouseId", param).ToList();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("DeleteProductCatalogItemById")]
        [HttpGet]
        public async Task<APIResponse> DeleteProductCatalogItemById(long Id)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (var context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    ProductCatalogItem catalog = context.ProductCatalogItems.Where(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    catalog.IsActive = false;
                    catalog.IsDeleted = true;
                    catalog.ModifiedBy = userid;
                    catalog.ModifiedDate = DateTime.Now;
                    context.Entry(catalog).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res.Message = "Item Deleted";
                        res.Status = true;
                    }
                    else
                    {
                        res.Message = "Item Not Delete";
                        res.Status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                res.Status = false;
                res.Message = ex.Message;
            }
            return res;
        }

        [Route("GetOrderStatusList")]
        [HttpGet]
        public async Task<APIResponse> GetOrderStatusList(int OrderId)
        {
            APIResponse res = new APIResponse();
            using (var context = new AuthContext())
            {
                var statusList = await context.OrderMasterHistoriesDB.Where(x => x.orderid == OrderId).Select(x => new { x.CreatedDate, x.Status }).ToListAsync();
                res.Data = statusList;
            }
            return res;
        }

        [Route("GetCityList")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<GetCityListDc>> GetCityList()
        {
            using (AuthContext context = new AuthContext())
            {
                var res = context.Database.SqlQuery<GetCityListDc>("GetCityListCatConfig").ToList();
                return res;
            }
        }
        [Route("GetConfigCityList")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<List<GetCityListDc>> GetConfigCityList()
        {
            using (AuthContext context = new AuthContext())
            {
                var res = context.Database.SqlQuery<GetCityListDc>("ConfigCityList").ToList();
                return res;
            }
        }

        [Route("CityStatusChange")]
        [HttpGet]
        public async Task<APIResponse> ChengeCityStatus(long CityId, bool IsActive)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    var data = context.CatelogConfigs.Where(x => x.CityId == CityId && x.IsDeleted == false).ToList();
                    foreach (var res in data)
                    {
                        res.IsActive = IsActive;
                        res.ModifiedBy = userid;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                    }
                    if (context.Commit() > 0)
                    {
                        return new APIResponse { Status = true };
                    }
                    else
                    {
                        return new APIResponse { Status = false };
                    }
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = true, Message = ex.Message };
            }
        }

        [Route("GetProdCatItemById")]
        [HttpGet]
        public async Task<APIResponse> GetProdCatItemByIdAsync(long Warehouseid, long SectionId)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var param1 = new SqlParameter("WarehouseId", Warehouseid);
                    var param2 = new SqlParameter("SectionId", SectionId);
                    var data = context.Database.SqlQuery<UpdateProductCatalogItemDc>("exec GetProductCatItemsBySection @WarehouseId,@SectionId", param1, param2).ToList();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("GetNewLaunchItems")]
        [HttpGet]
        public async Task<APIResponse> GetNewLaunchItemsAsync(int Warehouseid, int Skip, int Take)
        {
            APIResponse res = new APIResponse();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var warehouseid = new SqlParameter("WarehouseId", Warehouseid);
                    var skip = new SqlParameter("Skip", Skip);
                    var take = new SqlParameter("Take", Take);
                    var data = context.Database.SqlQuery<NewLaunchesItemNotificationDC>("exec NewLaunchItemNotificationForSalesApp  @WarehouseId,@Skip,@Take", warehouseid, skip, take).ToList();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("GetItemPriceDropByWId")]
        [HttpGet]
        public async Task<APIResponse> GetItemPriceDropByWIdAsync(int Warehouseid, int Skip, int Take)
        {
            APIResponse res = new APIResponse();
            try
            {
                var date = DateTime.Now.AddDays(-2).Date;
                using (AuthContext context = new AuthContext())
                {
                    var data = (from x in context.ItemPriceDrops
                                join y in context.itemMasters
                                on x.ItemId equals y.ItemId
                                where x.WarehouseId == Warehouseid && x.IsActive == true && x.IsDeleted == false
                                && y.active == true && y.Deleted == false
                                && x.CreatedDate >= date
                                select new
                                {
                                    y.itemname,
                                    y.LogoUrl,
                                    x.UnitPrice,
                                    x.OldUnitPrice,
                                    x.CreatedDate
                                }).OrderByDescending(z => z.CreatedDate).Skip(Skip).Take(Take).ToList();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        [Route("GetNotificationByPeopleId")]
        [HttpGet]
        public async Task<APIResponse> GetNotificationByPeopleIdAsync(int WarehouseId, int PeopleId, int Skip, int Take)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var warehouseid = new SqlParameter("WarehouseId", WarehouseId);
                    var peopleid = new SqlParameter("PeopleId", PeopleId);
                    var skip = new SqlParameter("Skip", Skip);
                    var take = new SqlParameter("Take", Take);
                    var data = context.Database.SqlQuery<GetNotificationByPeopleDc>("exec GetNotificationBypeopleId @PeopleId,@WarehouseId,@Skip,@Take", peopleid, warehouseid, skip, take).ToList();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("CustomerCheckInData")]
        [HttpGet]
        [AllowAnonymous]
        public bool CustomerCheckInData()
        {
            bool result = false;
            //MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var mongoHelper = new MongoHelper<ExecutiveBeats>();
            List<actualrouteNew> ActualRoutes = new List<actualrouteNew>();
            var startdate = DateTime.Now.AddDays(-2).Date.ToString("yyyy-MM-dd 23:59:59");
            var Enddate = DateTime.Now.Date.ToString("yyyy-MM-dd 23:59:59");
            var predicate = PredicateBuilder.New<ExecutiveBeats>(x => x.PeopleId > 0 && x.AssignmentDate >= Convert.ToDateTime(startdate) && x.AssignmentDate <= Convert.ToDateTime(Enddate));

            //var MonthBeat = mongoDbHelper.Select(predicate, null, null, null, false, null, "ExecutiveBeats").ToList();
            var MonthBeat = mongoHelper.GetWithProjection(x => x.PeopleId > 0 && x.ActualRoutes != null && x.ActualRoutes.Any(),
                                       s => s.ActualRoutes.Select(d => new CustomerCheckInDc
                                       {
                                           CustomerId = d.CustomerId,
                                           CheckIn = d.CheckIn,
                                           CheckOut = d.CheckOut
                                       }).ToList(), "ExecutiveBeats").SelectMany(d => d).ToList();



            using (var Context = new AuthContext())
            {
                if (MonthBeat != null && MonthBeat.Any())
                {
                    if (Context.Database.Connection.State != ConnectionState.Open)
                        Context.Database.Connection.Open();

                    foreach (var item in MonthBeat)
                    {
                        var cmd = Context.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[UpdateCustomerCheckInData]";
                        cmd.Parameters.Add(new SqlParameter("@CustomerId", item.CustomerId));
                        cmd.Parameters.Add(new SqlParameter("@CheckIn", item.CheckIn));
                        cmd.Parameters.Add(new SqlParameter("@CheckOut", item.CheckOut));
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        var res = cmd.ExecuteNonQuery();
                    }
                    Context.Commit();
                    result = true;
                }
            }
            return result;
        }

        [Route("YesterdayDashboardRpt")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<string> YesterdayDashboardRpt()
        {
            string FileUrl = "";
            List<SalesDashboardTodayMTDData> finaldata = new List<SalesDashboardTodayMTDData>();
            using (var Context = new AuthContext())
            {
                var Peoplelist = (from e in Context.ClusterStoreExecutives
                                  join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                  join ch in Context.ChannelMasters on e.ChannelMasterId equals ch.ChannelMasterId
                                  where e.IsActive == true && e.IsDeleted == false && ch.Active == true && ch.Deleted == false
                                  && p.Active == true && p.Deleted == false
                                  select new
                                  {
                                      p.PeopleID,
                                      p.WarehouseId,
                                      ch.ChannelMasterId,
                                      ch.ChannelType,
                                      p.DisplayName
                                  }).Distinct().ToList();

                if (Peoplelist != null && Peoplelist.Any())
                {
                    var PeopleIdList = Peoplelist.Select(x => x.PeopleID).Distinct().ToList();
                    var StoreIds = Context.ClusterStoreExecutives.Where(x => x.IsActive == true && x.IsDeleted == false && PeopleIdList.Contains(x.ExecutiveId)).GroupBy(x=>new { x.ExecutiveId,x.StoreId }).Select(x=> new { x.Key.ExecutiveId,x.Key.StoreId }).Distinct().ToList();

                    foreach (var item in Peoplelist)
                    {
                        //var SalesPerson = Context.Peoples.FirstOrDefault(x => x.PeopleID == item.PeopleID && x.Active == true && x.Deleted == false);
                        //if (SalesPerson != null)
                        {
                            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
                            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
                            BeatsManager manager = new BeatsManager();
                            DashboardDc dash = new DashboardDc();

                            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                            var today = DateTime.Now.Date;
                            //var today = temp;
                            var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                            var MonthBeat = mongoDbHelper.Select(x => x.PeopleId == item.PeopleID && x.AssignmentDate <= today && x.AssignmentDate >= firstDayOfMonth);
                            //var todayBeat = MonthBeat.FirstOrDefault(x => x.AssignmentDate == today);
                            var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == item.PeopleID && x.AssignmentDate == today.AddDays(-1)).FirstOrDefault();

                            //---- get dashboard data from mongo---
                            List<SalesDashboardTodayMTDData> list = new List<SalesDashboardTodayMTDData>();
                            MongoDbHelper<SalesDashboardTodayMTDData> DashboardmongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
                            list = DashboardmongoDbHelper.Select(x => x.SalesPersonId == item.PeopleID && x.CreatedDate <= today && x.CreatedDate >= firstDayOfMonth);


                            if (Context.Database.Connection.State != ConnectionState.Open)
                                Context.Database.Connection.Open();



                            BeatCustomerDc Beat = new BeatCustomerDc();

                            //Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();
                            Beat.YesterdayBeatCustomerIds = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ?
                                    YesterdayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                            Beat.MonthBeatCustomerIds = MonthBeat != null && MonthBeat.SelectMany(x => x.PlannedRoutes).Any() ?
                                    MonthBeat.SelectMany(x => x.PlannedRoutes).Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                            // repeat: //goto statment for job

                            DataTable IdDt = new DataTable();
                            List<int> ActualCustomerVisited = new List<int>();
                            IdDt = new DataTable();
                            IdDt.Columns.Add("IntValue");

                            DataTable VisitedCustomersdt = new DataTable();
                            VisitedCustomersdt = new DataTable();
                            VisitedCustomersdt.Columns.Add("IntValue");

                            YesterdaySaleDC YestObj = new YesterdaySaleDC();
                            if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any())
                            {
                                IdDt = new DataTable();
                                IdDt.Columns.Add("IntValue");
                                if (Beat.YesterdayBeatCustomerIds.Count > 0)
                                {
                                    foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                                    {
                                        int cid = id;
                                        var dr = IdDt.NewRow();
                                        dr["IntValue"] = cid;
                                        IdDt.Rows.Add(dr);
                                    }
                                }
                                else
                                {
                                    IdDt = null;
                                }

                                ActualCustomerVisited = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                            }
                            var cmd = Context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 1200;
                            cmd.CommandText = "[dbo].[SpDashBoardDetailYesterday]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var param4 = new SqlParameter("PersonId", item.PeopleID);
                            var param5 = new SqlParameter("CustIdDs", IdDt);
                            var param8 = new SqlParameter("WarehouseId", item.WarehouseId);
                            cmd.Parameters.Add(param4);
                            cmd.Parameters.Add(param5);
                            cmd.Parameters.Add(param8);

                            var reader = cmd.ExecuteReader();
                            dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                            if (dashboardDetail != null)
                            {
                                TodayDashboardDc ToObj = new TodayDashboardDc();
                                ToObj.TodayBeatSales = dashboardDetail.BeatSales;
                                ToObj.TodayExtraSales = dashboardDetail.ExtraSales;
                                ToObj.TodayBeatOrder = dashboardDetail.BeatOrder;
                                ToObj.TodayTotalSales = dashboardDetail.TotalSales;
                                ToObj.TodayProductiveCall = dashboardDetail.ProductiveCall;
                                int SuccessPhoneOrder = 0;
                                if (YesterdayBeat != null && YesterdayBeat.PlannedRoutes.Count() > 0)
                                {
                                    SuccessPhoneOrder = YesterdayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                    ToObj.TodayVisitPlanned = YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                                    ToObj.TodayTotalCall = YesterdayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                    ToObj.TodayOutletCoverage = (Convert.ToDouble(ToObj.TodayTotalCall) / ToObj.TodayVisitPlanned) * 100;
                                    ToObj.PhoneOrder = SuccessPhoneOrder;
                                }
                                else
                                {
                                    ToObj.TodayVisitPlanned = 0;
                                    ToObj.TodayTotalCall = 0;
                                    ToObj.TodayOutletCoverage = 0;
                                }
                                if (ToObj.TodayTotalCall > 0 || SuccessPhoneOrder > 0)
                                {
                                    ToObj.TodayStrikeRate = (Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100;
                                }
                                var planCustomers = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ? YesterdayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                                // ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                                ToObj.TodayExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                                ToObj.TodayExtraCall = dashboardDetail.ExtraCall;
                                ToObj.TodayExtraOrder = dashboardDetail.ExtraOrder;
                                ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                                ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                                ToObj.Eco = dashboardDetail.Eco;
                                ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                                ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;

                                dash.TodayDashboardDcs = ToObj;
                            }

                            long? storeId = Context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == item.PeopleID && x.IsDeleted == false && x.IsActive == true)?.StoreId;

                            ////------------------job----------------
                            var StoreID = StoreIds.Where(x => x.ExecutiveId == item.PeopleID).Select(x => x.StoreId).Distinct().ToList();

                            mongoObj.WarehouseId = item.WarehouseId;
                            mongoObj.SalesPersonId = item.PeopleID;
                            mongoObj.ChannelMatserId = item.ChannelMasterId;
                            mongoObj.ChannelName = item.ChannelType;
                            mongoObj.StoreIds = StoreID;
                            mongoObj.StoreId = Convert.ToInt32(storeId);
                            mongoObj.BeatSales = dash.TodayDashboardDcs.TodayBeatSales;
                            mongoObj.VisitPlanned = dash.TodayDashboardDcs.TodayVisitPlanned;
                            mongoObj.TotalCall = dash.TodayDashboardDcs.TodayTotalCall;
                            mongoObj.ProductiveCall = dash.TodayDashboardDcs.TodayProductiveCall;
                            mongoObj.BeatOrder = dash.TodayDashboardDcs.TodayBeatOrder;
                            mongoObj.ExtraVisit = dash.TodayDashboardDcs.TodayExtraVisit;
                            mongoObj.ExtraCall = dash.TodayDashboardDcs.TodayExtraCall;
                            mongoObj.ExtraOrder = dash.TodayDashboardDcs.TodayExtraOrder;
                            mongoObj.ExtraSales = dash.TodayDashboardDcs.TodayExtraSales;
                            mongoObj.OutletCoverage = dash.TodayDashboardDcs.TodayOutletCoverage;
                            mongoObj.StrikeRate = dash.TodayDashboardDcs.TodayStrikeRate;
                            mongoObj.TotalSales = dash.TodayDashboardDcs.TodayTotalSales;
                            mongoObj.TodayTarget = YesterdayBeat != null ? YesterdayBeat.TodayTarget : 0;
                            mongoObj.TodayPerfactOrder = dash.TodayDashboardDcs.TodayPerfactOrder;
                            mongoObj.TodaySupperOrder = dash.TodayDashboardDcs.TodaySupperOrder;
                            mongoObj.PhoneOrder = dash.TodayDashboardDcs.PhoneOrder;
                            mongoObj.ECO = dash.TodayDashboardDcs.Eco;
                            mongoObj.AvgLineItem = dash.TodayDashboardDcs.AvgLineItem;
                            mongoObj.AvgOrderValue = dash.TodayDashboardDcs.AvgOrderValue;
                            mongoObj.CheckIn = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                            mongoObj.CheckOut = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Max(x => x.CheckOut) : null;
                            var res = InsertDashboardJobinMongo(mongoObj, Context);
                            ////------------------job----------------



                            SalesDashboardTodayMTDData data = new SalesDashboardTodayMTDData
                            {
                                WarehouseId = mongoObj.WarehouseId,
                                SalesPersonId = mongoObj.SalesPersonId,
                                StoreId = mongoObj.StoreId,
                                BeatSales = mongoObj.BeatSales,
                                VisitPlanned = mongoObj.VisitPlanned,
                                TotalCall = mongoObj.TotalCall,
                                ProductiveCall = mongoObj.ProductiveCall,
                                BeatOrder = mongoObj.BeatOrder,
                                ExtraVisit = mongoObj.ExtraVisit,
                                ExtraCall = mongoObj.ExtraCall,
                                ExtraOrder = mongoObj.ExtraOrder,
                                ExtraSales = mongoObj.ExtraSales,
                                OutletCoverage = mongoObj.OutletCoverage,
                                StrikeRate = mongoObj.StrikeRate,
                                TodayTarget = mongoObj.TodayTarget,
                                TodayPerfactOrder = mongoObj.TodayPerfactOrder,
                                TodaySupperOrder = mongoObj.TodaySupperOrder,
                                PhoneOrder = mongoObj.PhoneOrder,
                                AvgLineItem = mongoObj.AvgLineItem,
                                AvgOrderValue = mongoObj.AvgOrderValue,
                                ECO = mongoObj.ECO,
                                TotalSales = mongoObj.TotalSales,
                                CheckIn = mongoObj.CheckIn,
                                CheckOut = mongoObj.CheckOut,
                                CreatedDate = DateTime.Now,
                                ModifiedDate = DateTime.Now,
                                IsActive = true,
                                IsDelete = false
                            };

                            var param1 = new SqlParameter("PeopleID", mongoObj.SalesPersonId);

                            var cmd2 = Context.Database.Connection.CreateCommand();
                            cmd2.CommandText = "[dbo].[SpPerformanceTarget]";
                            cmd2.CommandType = System.Data.CommandType.StoredProcedure;
                            cmd2.Parameters.Add(param1);

                            var reader2 = cmd2.ExecuteReader();
                            var dd = ((IObjectContextAdapter)Context).ObjectContext.Translate<PerformanceTargetDc>(reader2).ToList();


                            var WarehouseName = Context.Warehouses.FirstOrDefault(x => x.WarehouseId == mongoObj.WarehouseId && x.active == true && x.Deleted == false).WarehouseName;
                            var ClusterIds = Context.ClusterStoreExecutives.Where(x => x.ExecutiveId == mongoObj.SalesPersonId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                            var ClusterNames = Context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                            data.ClusterIds = string.Join(",", ClusterIds);
                            data.ClusterName = string.Join(",", ClusterNames);
                            data.StoreId = Convert.ToInt32(storeId);
                            data.SalesPerson = item.DisplayName != null ? item.DisplayName : "";
                            data.WarehouseName = WarehouseName;
                            data.MtdMonthlyTarget = dd.Count > 0 ? dd.FirstOrDefault(x => x.Name == "Sales").NumPer : 0;

                            finaldata.Add(data);
                        }
                        var dashboardDt = ClassToDataTable.CreateDataTable(finaldata);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/SalesDashboardExcel");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "YesterDay_SalesPersonBeat_DSR" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "SalesDashBoardData", filePath);

                        FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/SalesDashboardExcel/" + fileName);
                    }
                }
            }
            return FileUrl;
        }

        //[Route("InsertMissingMTDData")]
        //[HttpGet]
        //public bool InsertMissingMTDData(DateTime TargetDate)
        //{
        //    MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper2 = new MongoDbHelper<SalesDashboardTodayMTDData>();
        //    MongoDbHelper<ExecutiveBeats> mongoDbHelperBeats = new MongoDbHelper<ExecutiveBeats>();

        //    var today = TargetDate;
        //    var previousEndDate = TargetDate.ToString("yyyy-MM-dd 23:59:59");
        //    var searchpredictor = PredicateBuilder.New<SalesDashboardTodayMTDData>(x => x.CreatedDate >= (today) && x.CreatedDate <= Convert.ToDateTime(previousEndDate) && x.IsDelete == false);

        //    var SalesData = mongoDbHelper2.Select(searchpredictor);
        //    foreach (var item in SalesData)
        //    {
        //        var mongoOrder = mongoDbHelper2.Select(x => x.Id == item.Id, collectionName: "SalesDashboardTodayMTDData").FirstOrDefault();
        //        //mongoDbHelper.Delete(mongoOrder.Id, collectionName: "SalesDashboardTodayMTDData");
        //    }

        //    return true;
        //}

        [Route("CheckCustomer")]
        [HttpGet]
        [AllowAnonymous]
        public CheckCustomerSalesAppDc CheckCustomer(string MobileNumber)
        {
            CheckCustomerSalesAppDc b = new CheckCustomerSalesAppDc();
            List<string> CustomerStatus = new List<string>();
            CustomerStatus.Add("Not Verified");
            CustomerStatus.Add("Pending For Submitted");
            CustomerStatus.Add("Pending For Activation");
            CustomerStatus.Add("Temporary Active");
            using (var context = new AuthContext())
            {
                if (MobileNumber != "")
                {
                    Customer cust = context.Customers.Where(c => c.Mobile.Trim().Equals(MobileNumber.Trim()) && !c.Deleted).FirstOrDefault();
                    if (cust != null)
                    {
                        b = new CheckCustomerSalesAppDc()
                        {
                            Status = true,
                            Message = "This mobile no already registered with " + cust.CustomerVerify + " Status.",
                            CustomerId = cust.CustomerId,
                            SkCode = cust.Skcode,
                            CanUpdateCustomer = (cust.CustomerVerify == "Full Verified" || cust.CustomerVerify == "Pending For Submitted" || cust.CustomerVerify == "Partial Verified") ? false : true
                        };
                        return b;
                    }
                    else
                    {
                        b = new CheckCustomerSalesAppDc()
                        {
                            Status = false,
                            Message = "Customer Not Found",
                            CustomerId = 0,
                            SkCode = "",
                            CanUpdateCustomer = false
                        };
                        return b;
                    }
                }
            }
            return b;
        }

        [Route("BeatDumpReport")]
        [HttpGet]
        public string BeatDumpReport(int storeid)
        {
            string FileUrl = "";
            using (var db = new AuthContext())
            {
                var list = (from e in db.ClusterStoreExecutives
                            join p in db.Peoples on e.ExecutiveId equals p.PeopleID
                            where e.IsActive == true && e.IsDeleted == false
                            select new
                            {
                                p.PeopleID,
                                p.WarehouseId
                            }).Distinct().ToList();

                List<GroupWiseBeatReportDc> datalist = new List<GroupWiseBeatReportDc>();
                if (list != null && list.Any())
                {
                    foreach (var item in list)
                    {
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();
                        List<GroupWiseBeatReportDc> dt = new List<GroupWiseBeatReportDc>();
                        var cmd = db.Database.Connection.CreateCommand();
                        cmd.CommandTimeout = 1200;
                        cmd.CommandText = "[dbo].[GetGroupWiseBeatReport]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        var param1 = new SqlParameter("peopleId", item.PeopleID);
                        var param2 = new SqlParameter("StoreId", storeid);
                        cmd.Parameters.Add(param1);
                        cmd.Parameters.Add(param2);
                        var reader = cmd.ExecuteReader();

                        dt = ((IObjectContextAdapter)db).ObjectContext.Translate<GroupWiseBeatReportDc>(reader).ToList();

                        datalist.AddRange(dt);
                    }
                    var dashboardDt = ClassToDataTable.CreateDataTable(datalist);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/BeatDumpReport");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "BeatDump" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(dashboardDt, "BeatDumpData", filePath);

                    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                  , HttpContext.Current.Request.Url.DnsSafeHost
                                                                  , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                  , "/SalesAppDashboardFile/BeatDumpReport/" + fileName);

                }
                return FileUrl;
            }
        }

        //TODO:SalesAppMarch2023
        [Route("BeatEditConfig")]
        [HttpPost]
        public APIResponse BeatEditConfigAsync(List<BeatEditDC> beatEditDCs)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;
                    foreach (Claim claim in identity.Claims)
                    {
                        if (claim.Type == "userid")
                        {
                            userid = int.Parse(claim.Value);
                        }
                    }
                    foreach (var beat in beatEditDCs)
                    {
                        var res = context.BeatEditConfigs.FirstOrDefault(x => x.Id == beat.BeatEditId && x.StoreId == beat.StoreId && x.IsActive == true && x.IsDeleted == false);
                        if (res != null)
                        {
                            res.IsAnytime = beat.IsAnytime;
                            res.FromDate = beat.FromDate;
                            res.ToDate = beat.ToDate;
                            res.ModifiedBy = userid;
                            res.ModifiedDate = DateTime.Now;
                            context.Entry(res).State = EntityState.Modified;
                        }
                    }
                    if (context.Commit() > 0)
                    {
                        return new APIResponse { Status = true, Message = "Data Saved SuccessFully" };
                    }
                    else
                        return new APIResponse { Status = false, Message = "Data Not Save" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        //TODO:SalesAppMarch2023
        [Route("GetBeatEditConfig")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse GetBeatEditConfigAsync()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = (from b in context.BeatEditConfigs
                               join s in context.StoreDB
                               on b.StoreId equals s.Id
                               where s.IsActive == true && s.IsDeleted == false
                               && b.IsActive == true && b.IsDeleted == false
                               select new BeatEditDC
                               {
                                   BeatEditId = b.Id,
                                   StoreId = b.StoreId,
                                   StoreName = s.Name,
                                   IsAnytime = b.IsAnytime,
                                   FromDate = b.FromDate,
                                   ToDate = b.ToDate
                               }).ToList();
                    return new APIResponse { Status = true, Data = res };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ItemClassificationIncentiveReport")]
        [HttpPost]
        public List<ItemClassificationReportDc> ItemClassificationInsentiveReport(ReportFilterDc obj)
        {
            List<ItemClassificationReportDc> list = new List<ItemClassificationReportDc>();
            using (var Context = new AuthContext())
            {
                DataTable wid = new DataTable();
                wid.Columns.Add("IntValue");

                if (obj.warehouseids != null && obj.warehouseids.Count > 0)
                {
                    foreach (var id in obj.warehouseids)
                    {
                        var dr = wid.NewRow();
                        dr["IntValue"] = id;
                        wid.Rows.Add(dr);
                    }
                }

                DataTable sid = new DataTable();
                sid.Columns.Add("IntValue");

                if (obj.storeids != null && obj.storeids.Count > 0)
                {
                    foreach (var id in obj.storeids)
                    {
                        var dr = sid.NewRow();
                        dr["IntValue"] = id;
                        sid.Rows.Add(dr);
                    }
                }
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 900;
                cmd.CommandText = "[dbo].[GetItemClassificationIncentiveReport]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var WarehouseId = new SqlParameter("WarehouseId", wid);
                var StoreId = new SqlParameter("StoreId", sid);
                var month = new SqlParameter("month", obj.Month);
                var year = new SqlParameter("year", obj.Year);

                cmd.Parameters.Add(WarehouseId);
                cmd.Parameters.Add(StoreId);
                cmd.Parameters.Add(month);
                cmd.Parameters.Add(year);

                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)Context).ObjectContext.Translate<ItemClassificationReportDc>(reader).ToList();
            }
            return list;
        }
        [Route("GetItemClassificationIncentiveAllExport")]
        [HttpPost]
        public List<ItemClassificationReportDc> GetItemClassificationIncentiveAllExport(ReportFilterDc obj)
        {
            List<ItemClassificationReportDc> list = new List<ItemClassificationReportDc>();
            using (var Context = new AuthContext())
            {

                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();
                //var sList = new DataTable();
                //sList.Columns.Add("intValue");
                //foreach (var item in obj.warehouseids)
                //{
                //    var dr = sList.NewRow();
                //    dr["intValue"] = item;
                //    sList.Rows.Add(dr);
                //}
                //var WarehouseIds = new SqlParameter("WarehousIds", sList);
                //WarehouseIds.SqlDbType = SqlDbType.Structured;
                //WarehouseIds.TypeName = "dbo.intValues";

                //var sListt = new DataTable();
                //sListt.Columns.Add("intValue");
                //foreach (var item in obj.storeids)
                //{
                //    var dr = sListt.NewRow();
                //    dr["intValue"] = item;
                //    sListt.Rows.Add(dr);
                //}
                //var SID = new SqlParameter("StoreId", sListt);
                //SID.SqlDbType = SqlDbType.Structured;
                //SID.TypeName = "dbo.intValues";

                var cmd = Context.Database.Connection.CreateCommand();
                cmd.CommandTimeout = 900;
                cmd.CommandText = "[dbo].[GetItemClassificationIncentiveAllExport]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                var month = new SqlParameter("month", obj.Month);
                var year = new SqlParameter("year", obj.Year);
                cmd.Parameters.Add(month);
                cmd.Parameters.Add(year);

                var reader = cmd.ExecuteReader();
                list = ((IObjectContextAdapter)Context).ObjectContext.Translate<ItemClassificationReportDc>(reader).ToList();
            }
            return list;
        }


        [Route("CreateItemIncentiveClassificationLog")]
        [HttpPost]
        public async Task<bool> CreateItemIncentiveClassificationLogAsync()
        {
            DateTime TodayDate = DateTime.Today;
            var lastDayOfMonth = DateTime.DaysInMonth(TodayDate.Year, TodayDate.Month);

            DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
            string sDate = startDate.ToString("yyyy-MM-dd");
            string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");
            string folderPath = HttpContext.Current.Server.MapPath("~/Reports/ItemClassificationIncentive");
            bool isLogInserted = false;
            if (TodayDate.Day == lastDayOfMonth)
            {
                using (var context = new AuthContext())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();

                    ReportFilterDc reportFilterDc = new ReportFilterDc();
                    reportFilterDc.Month = TodayDate.Month;
                    reportFilterDc.Year = TodayDate.Year;
                    string filename = "ItemClassificationIncentive_" + reportFilterDc.Month + "_" + reportFilterDc.Year + ".csv";
                    List<ItemClassificationReportDc> itemClassificationList = GetItemClassificationIncentiveAllExport(reportFilterDc);
                    if (itemClassificationList != null && itemClassificationList.Any())
                    {
                        //-- Create a excel file of current month.
                        DataTable dt = ListtoDataTableConverter.ToDataTable(itemClassificationList);
                        if (!Directory.Exists(folderPath))
                        {
                            Directory.CreateDirectory(folderPath);
                        }
                        string path = Path.Combine(folderPath, filename);
                        dt.WriteToCsvFile(path);

                        //--- Create log of --ItemIncentiveClassificationMasters and ItemCityWiseIncentiveClassifications in table
                        isLogInserted = await itemMasterManager.CreateItemIncentivetableLogAsync();
                    }

                }
            }
            else
                return false;
            return true;
        }

        //[Route("hello")]
        //[HttpGet]
        //[AllowAnonymous]
        //public async Task<APIResponse> RedispatchOrderDataBPL_Temp(DateTime StartDate, DateTime EndDate, String Skcode) //RedispatchOrderDataBPL_TempListDC
        //{
        //    MongoDbHelper<ExecutiveBeats> mongoDbBeatHelper = new MongoDbHelper<ExecutiveBeats>();
        //    using (var Context = new AuthContext())
        //    {
        //        var List = mongoDbBeatHelper.Select(x => x.AssignmentDate >= StartDate && x.AssignmentDate <= EndDate).ToList();
        //        //var peopleid = Context.Peoples.Select(x => x.PeopleId && x.Active== true && x.Deleted == false).ToList();  
        //        //foreach(var s in List)
        //        //{
        //        //    foreach(var t in s.ActualRoutes)
        //        //    {

        //        //    }
        //        //}
        //        var startdatee = new SqlParameter("@startDate", StartDate);
        //        var EndDatee = new SqlParameter("@endDate", EndDate);
        //        var Skcodee = new SqlParameter("@skcode", Skcode);

        //        var res = Context.Database.SqlQuery<RedispatchOrderDataBPL_TempListDC>("RedispatchOrderDataBPL_Temp @startDate ,@endDate ,@skcode ", startdatee, EndDatee, Skcodee);
        //        if(res!=null )
        //        {
        //            return new APIResponse
        //            {
        //                Status = true,
        //                Message = "Found Successfully!"
        //            };
        //        }
        //        else
        //        {
        //            return new APIResponse
        //            {
        //                Status = false,
        //                Message = "No data found!"
        //            };
        //        }


        //    }

        //    return res;
        //}


        [Route("SearchBeatDSR")] 
        [HttpPost]
        [AllowAnonymous]
        public BeatDSRReportResponseDc BeatDSRRR(beatDSRRR beatDSR)
        {
            MongoDbHelper<SalesDashboardTodayMTDData> mongoDbHelper = new MongoDbHelper<SalesDashboardTodayMTDData>();
            MongoDbHelper<ExecutiveBeats> ExecutiveMongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

            List<salesDashboardTodayDC> TodaySales = new List<salesDashboardTodayDC>();
            List<SalesDashboardTodayMTDData> DSRResult = new List<SalesDashboardTodayMTDData>();
            BeatDSRReportResponseDc res = new BeatDSRReportResponseDc();

            using (var Context = new AuthContext())
            {
                var today = DateTime.Now.Date;
                if (beatDSR.EndDate >= today || (beatDSR.EndDate == null && beatDSR.StartDate == null) || (beatDSR.EndDate == today && beatDSR.StartDate == today))
                {
                    var listt = (from e in Context.ClusterStoreExecutives 
                                 join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                 join c in Context.Clusters on e.ClusterId equals c.ClusterId
                                 join s in Context.StoreDB on e.StoreId equals s.Id
                                 where e.IsActive == true && e.IsDeleted == false && p.Active == true && p.Deleted == false && c.Active == true && c.Deleted == false  // && e.ExecutiveId == 1539
                                 select new
                                 {
                                     p.PeopleID,
                                     p.WarehouseId,
                                     p.DisplayName,
                                     c.WarehouseName,
                                     s.Id,
                                     s.Name,
                                     c.ClusterName,
                                     e.ChannelMasterId
                                 }).Distinct().OrderBy(x => x.PeopleID).ToList();
                    var PeopleIds = listt.Select(x => x.PeopleID).Distinct().ToList();
                    var Channeltype = Context.ChannelMasters.Where(x=>x.Active  && !x.Deleted).ToList();

                    List<peopleData> pList = new List<peopleData>();
                    foreach (var id in PeopleIds)
                    {
                        var data = listt.Where(x => x.PeopleID == id).FirstOrDefault();
                        var ChannelId = listt.Where(x=>x.PeopleID == id).Select(x => x.ChannelMasterId).FirstOrDefault();

                        peopleData obj = new peopleData();
                        obj.WarehouseId = data.WarehouseId;
                        obj.WarehouseName = data.WarehouseName;
                        obj.DisplayName = data.DisplayName;
                        obj.PeopleID = data.PeopleID;
                        obj.StoreId = data.Id;
                        obj.StoreName = string.Join(",", listt.Where(x => x.PeopleID == id).Select(x => x.Name).Distinct().ToList());//data.Name;
                        obj.ClusterName = string.Join(",", listt.Where(x => x.PeopleID == id).Select(x => x.ClusterName).Distinct().ToList());
                        obj.ChannelMasterId = ChannelId;
                        obj.ChannelType = Channeltype.Where(x => x.ChannelMasterId == ChannelId).Select(x => x.ChannelType).FirstOrDefault(); //string.Join(",", Channeltype.Where(x => Channels.Contains(x.ChannelMasterId)).Select(x => x.ChannelType).ToList());

                        pList.Add(obj);
                       
                    }

                    //var list = pList.Where(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.StoreId.Contains((int)x.StoreId)).Select(x => x).Distinct().ToList();
                    var list = pList.Where(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.ChannelMasterId.Contains(x.ChannelMasterId)).Select(x => x).Distinct().ToList();
                    var peoplelist = list.OrderBy(x => x.PeopleID).Skip(beatDSR.skip).Take(beatDSR.take);
                    var totcount = list.Count();
                    if (peoplelist != null && peoplelist.Any())
                    {
                        var peopleids = list.Select(x => x.PeopleID).ToList();
                        MongoDbHelper<ExecutiveBeats> mongoDbBeatHelper = new MongoDbHelper<ExecutiveBeats>();
                        var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);

                        if (Context.Database.Connection.State != ConnectionState.Open)
                            Context.Database.Connection.Open();

                        foreach (var item in peoplelist)
                        {
                            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
                            var MonthBeat = mongoDbBeatHelper.Select(x => x.AssignmentDate == today && peopleids.Contains(x.PeopleId));
                            var todayBeat = MonthBeat.Where(x => x.PeopleId == item.PeopleID).FirstOrDefault();
                            BeatCustomerDc Beat = new BeatCustomerDc();

                            Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                            //if (Context.Database.Connection.State != ConnectionState.Open)
                            //    Context.Database.Connection.Open();

                            DataTable IdDt = new DataTable();
                            List<int> ActualCustomerVisited = new List<int>();
                            IdDt = new DataTable();
                            IdDt.Columns.Add("IntValue");

                            if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any())
                            {
                                if (Beat.TodayBeatCustomerIds.Count > 0)
                                {
                                    foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                                    {
                                        int cid = id;
                                        var dr = IdDt.NewRow();
                                        dr["IntValue"] = cid;
                                        IdDt.Rows.Add(dr);
                                    }
                                }
                                else
                                {
                                    IdDt = null;
                                }

                                ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                            }
                            var cmd = Context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 1200;
                            cmd.CommandText = "[dbo].[TodayDashBoardDetail]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var param4 = new SqlParameter("PersonId", item.PeopleID);
                            var param5 = new SqlParameter("CustIdDs", IdDt);
                            var param8 = new SqlParameter("WarehouseId", item.WarehouseId);
                            cmd.Parameters.Add(param4);
                            cmd.Parameters.Add(param5);
                            cmd.Parameters.Add(param8);

                            var reader = cmd.ExecuteReader();
                            dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                            if (dashboardDetail != null)
                            {
                                salesDashboardTodayDC ToObj = new salesDashboardTodayDC();
                                ToObj.BeatSales = dashboardDetail.BeatSales;
                                ToObj.ExtraSales = dashboardDetail.ExtraSales;
                                ToObj.BeatOrder = dashboardDetail.BeatOrder;
                                ToObj.TotalSales = dashboardDetail.TotalSales;
                                ToObj.ProductiveCall = dashboardDetail.ProductiveCall;
                                int SuccessPhoneOrder = 0;
                                if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                                {
                                    SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                    ToObj.VisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                                    ToObj.TotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                    ToObj.TodayOutletCoverage = (Convert.ToDouble(ToObj.TodayTotalCall) / (Convert.ToDouble(ToObj.TodayVisitPlanned))) * 100;
                                    ToObj.PhoneOrder = SuccessPhoneOrder;
                                }
                                else
                                {
                                    ToObj.VisitPlanned = 0;
                                    ToObj.TotalCall = 0;
                                    ToObj.TodayOutletCoverage = 0;
                                }
                                if (ToObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                                {
                                    ToObj.TodayStrikeRate = (Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100;
                                }
                                var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                                ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                                ToObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                                ToObj.ExtraCall = dashboardDetail.ExtraCall;
                                ToObj.ExtraOrder = dashboardDetail.ExtraOrder;
                                ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                                ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                                ToObj.Eco = dashboardDetail.Eco;
                                ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                                ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                                ToObj.SalesPerson = item.DisplayName;
                                ToObj.ClusterName = item.ClusterName;
                                ToObj.ChannelName = item.ChannelType;
                                ToObj.StoreName = item.StoreName;
                                ToObj.WarehouseName = item.WarehouseName;
                                ToObj.SalesPersonId = item.PeopleID;
                                ToObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                                ToObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;

                                TodaySales.Add(ToObj);
                                res.salesTodayDC = TodaySales;
                                res.Totalcount = totcount;
                            }
                        }
                    }
                }
                if (beatDSR.EndDate != null && beatDSR.StartDate != null && beatDSR.StartDate != today)
                {
                    beatDSR.EndDate = beatDSR.EndDate.Value.AddDays(1).AddMilliseconds(-1);
                    var store = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
                   
                    DSRResult = mongoDbHelper.Select(x => beatDSR.WarehouseId.Contains(x.WarehouseId) && beatDSR.ChannelMasterId.Contains(x.ChannelMatserId) && x.CreatedDate >= beatDSR.StartDate && x.CreatedDate <= beatDSR.EndDate).ToList(); //&& beatDSR.StoreId.Contains(x.StoreId)
                    if ((TodaySales != null && TodaySales.Count > 0) && DSRResult != null && DSRResult.Count > 0)
                    {
                        var data = Mapper.Map(TodaySales).ToANew<List<SalesDashboardTodayMTDData>>();
                        DSRResult.AddRange(data);
                    }
                    if (DSRResult != null)
                    {
                        var result = DSRResult
                        .GroupBy(ac => new
                        {
                            ac.SalesPersonId,
                            ac.SalesPerson,
                            ac.StoreId,
                            ac.ClusterIds,
                            ac.ClusterName,
                            ac.StoreName,
                            ac.WarehouseId,
                            ac.WarehouseName,
                            ac.ChannelMatserId,
                            ac.ChannelName
                        })
                        .Select(ac => new SalesDashboardTodayMTDData
                        {
                            SalesPerson = ac.Key.SalesPerson,
                            SalesPersonId = ac.Key.SalesPersonId,
                            StoreId = ac.Key.StoreId,
                            ClusterIds = ac.Key.ClusterIds,
                            ClusterName = ac.Key.ClusterName,
                            StoreName = ac.Key.StoreName,
                            WarehouseId = ac.Key.WarehouseId,
                            WarehouseName = ac.Key.WarehouseName,
                            ChannelMatserId = ac.Key.ChannelMatserId,
                            ChannelName = ac.Key.ChannelName,
                            BeatSales = ac.Sum(acs => acs.BeatSales),
                            BeatOrder = ac.Sum(acs => acs.BeatOrder),
                            ExtraCall = ac.Sum(acs => acs.ExtraCall),
                            TotalCall = ac.Sum(acs => acs.TotalCall),
                            TodayTotalCall = ac.Sum(acs => acs.TodayTotalCall),
                            ExtraOrder = ac.Sum(acs => acs.ExtraOrder),
                            ExtraSales = ac.Sum(acs => acs.ExtraSales),
                            ExtraVisit = ac.Sum(acs => acs.ExtraVisit),
                            VisitPlanned = ac.Sum(acs => acs.VisitPlanned),
                            TodayVisitPlanned = ac.Sum(acs => acs.TodayVisitPlanned),
                            TodayStrikeRate = ac.Sum(acs => acs.TodayStrikeRate),
                            TodaySupperOrder = ac.Sum(acs => acs.TodaySupperOrder),
                            PhoneOrder = ac.Sum(acs => acs.PhoneOrder),
                            //TodayTarget = ac.Sum(acs => acs.TodayTarget),
                            //MtdMonthlyTarget = ac.Sum(acs => acs.MtdMonthlyTarget),
                            TodayProductiveCall = ac.Sum(acs => acs.TodayProductiveCall),
                            ProductiveCall = ac.Sum(acs => acs.ProductiveCall),
                            TotalSales = ac.Sum(acs => acs.TotalSales),
                            OutletCoverage = ac.Average(acs => acs.OutletCoverage),
                            StrikeRate = ac.Average(acs => acs.StrikeRate),
                            Eco = ac.Average(acs => acs.Eco),
                            AvgOrderValue = ac.Average(acs => acs.AvgOrderValue),
                            AvgLineItem = ac.Average(acs => acs.AvgLineItem),
                        }).ToList();


                        res.SalesDashboardTodayMTDData = Mapper.Map(result).ToANew<List<SalesDashboardTodayMTDDataa>>();
                        res.SalesDashboardTodayMTDData.ForEach(y =>
                        {
                            var clusterids = string.Join(",", DSRResult.Where(x => x.SalesPersonId == y.SalesPersonId).Select(x => x.ClusterIds).Distinct().ToList());
                            y.ClusterIds = string.Join(",", clusterids.ToLower().Split(',').Distinct().ToList());
                            var clustername = string.Join(",", DSRResult.Where(x => x.SalesPersonId == y.SalesPersonId).Select(x => x.ClusterName).Distinct().ToList());
                            y.ClusterName = string.Join(",", clustername.ToLower().Split(',').Distinct().ToList());
                            y.StartDate = beatDSR.StartDate.Value.ToString("dd/MM/yyyy");
                            y.EndDate = beatDSR.EndDate.Value.ToString("dd/MM/yyyy"); ;
                        });
                        res.SalesDashboardTodayMTDData = res.SalesDashboardTodayMTDData.OrderBy(x => x.Id).Skip(beatDSR.skip).Take(beatDSR.take).ToList();
                        res.SalesDashboardTodayMTDData = res.SalesDashboardTodayMTDData.Count > 0 ? res.SalesDashboardTodayMTDData : null;
                        res.Totalcount = result.Count();
                    }
                }
            }
            return res;
        }

        #region Executive Attendance

        #region Executive Attendance Config
        [Route("GetAttendanceConfigListByStoreId")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse GetAttendanceConfigListByStoreIdAsync(int ChannelMasterId)
        {
            try
            {
                List<AttendanceConfigCityDC> AttendanceConfigdata = new List<AttendanceConfigCityDC>();
                using (AuthContext context = new AuthContext())
                {
                    AttendanceConfigdata = (from a in context.AttendanceRuleConfigs
                                            join c in context.Cities on a.IsDeleted equals false
                                            where c.active == true && c.Deleted == false
                                            && a.ChannelMasterId == ChannelMasterId && a.CityId == c.Cityid
                                            select new AttendanceConfigCityDC
                                            {
                                                AttendaceConfigId = a.Id,
                                                CityId = a.CityId,
                                                CityName = c.CityName,
                                                CreatedDate = a.CreatedDate,
                                                IsActive = a.IsActive
                                            }).ToList();
                    var Globaldata = context.AttendanceRuleConfigs.Where(x => x.ChannelMasterId == ChannelMasterId && x.CityId == 0 && x.IsActive == true && x.IsDeleted == false)
                                .Select(x => new AttendanceConfigCityDC { AttendaceConfigId = x.Id, CityId = x.CityId, CityName = "Global", CreatedDate = x.CreatedDate, IsActive = x.IsActive }).FirstOrDefault();
                    if (Globaldata != null) AttendanceConfigdata.Insert(0, Globaldata);
                    return new APIResponse { Status = true, Data = AttendanceConfigdata };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ActiveInactiveCityAttendance")]
        [HttpGet]
        public APIResponse ActiveInactiveCityAttendanceAsync(long AttendaceConfigId, bool IsActive)
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (AuthContext context = new AuthContext())
                {
                    var data = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    if (data != null)
                    {
                        data.IsActive = IsActive;
                        data.ModifiedBy = userid;
                        data.ModifiedDate = DateTime.Now;
                        context.Entry(data).State = EntityState.Modified;
                        context.Commit();
                        return new APIResponse { Status = true, Message = "Data Updated Successfully" };
                    }
                    else
                    {
                        return new APIResponse { Status = false, Message = "Data Not Updated" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("InsertUpdateAttendanceConfig")]
        [HttpPost]
        public APIResponse InsertUpdateAttendanceConfig(AttendanceRuleConfigDC attendanceRuleConfig)
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;
                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                }
                using (AuthContext context = new AuthContext())
                {
                    
                    if (attendanceRuleConfig.Id > 0)
                    {
                        var data = context.AttendanceRuleConfigs.Where(x => x.Id == attendanceRuleConfig.Id && x.IsDeleted == false).FirstOrDefault();
                        if (data != null)
                        {
                            data.IsCheckinBeatShop = attendanceRuleConfig.IsCheckinBeatShop;
                            data.CheckInTime = attendanceRuleConfig.CheckInTime;
                            data.IsCheckOutBeatShop = attendanceRuleConfig.IsCheckOutBeatShop;
                            data.IsFullDayBeatShop = attendanceRuleConfig.IsFullDayBeatShop;
                            data.IsMinimumVisit = attendanceRuleConfig.IsMinimumVisit;
                            data.DayMinVisits = attendanceRuleConfig.DayMinVisits;
                            data.IsTADABeatShop = attendanceRuleConfig.IsTADABeatShop;
                            data.IsTADARequired = attendanceRuleConfig.IsTADARequired;
                            data.TADACalls = attendanceRuleConfig.TADACalls;
                            data.Description = attendanceRuleConfig.Description;
                            data.ModifiedBy = userid;
                            data.ModifiedDate = DateTime.Now;
                            context.Entry(data).State = EntityState.Modified;
                            context.Commit();
                            return new APIResponse { Status = true, Message = "Data Updated Successfully" };
                        }
                        else
                            return new APIResponse { Status = false, Message = "Data Not Found" };
                    }
                    else
                    {
                        var Attendance = context.AttendanceRuleConfigs.FirstOrDefault(x => x.ChannelMasterId == attendanceRuleConfig.ChannelMasterId
                                    && x.CityId == attendanceRuleConfig.CityId && x.IsActive == true && x.IsDeleted == false);
                        if (Attendance == null)
                        {
                            AttendanceRuleConfig attendanceConfig = new AttendanceRuleConfig();
                            attendanceConfig = Mapper.Map(attendanceRuleConfig).ToANew<AttendanceRuleConfig>();
                            attendanceConfig.IsActive = true;
                            attendanceConfig.IsDeleted = false;
                            attendanceConfig.CreatedBy = userid;
                            attendanceConfig.CreatedDate = DateTime.Now;
                            attendanceConfig.ModifiedBy = userid;
                            attendanceConfig.ModifiedDate = DateTime.Now;
                            context.AttendanceRuleConfigs.Add(attendanceConfig);
                            context.Commit();
                            return new APIResponse { Status = true, Message = "Data Saved Successfully" };
                        }
                        else
                        {
                            return new APIResponse { Status = false, Message = "Data Already Exists" };
                        }
                    }
                    
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetAttendanceConfigById")]
        [HttpGet]
        public APIResponse GetAttendanceConfigById(long AttendaceConfigId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    var data = Mapper.Map(res).ToANew<AttendanceRuleConfigDC>();
                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("DeleteAttendanceConfigById")]
        [HttpGet]
        public APIResponse DeleteAttendanceConfigById(long AttendaceConfigId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var res = context.AttendanceRuleConfigs.Where(x => x.Id == AttendaceConfigId && x.IsDeleted == false).FirstOrDefault();
                    if (res != null)
                    {
                        res.IsActive = false;
                        res.IsDeleted = true;
                        res.ModifiedBy = 1;
                        res.ModifiedDate = DateTime.Now;
                        context.Entry(res).State = EntityState.Modified;
                        context.Commit();
                    }
                    return new APIResponse { Status = true, Message = "Data Deleted Successfully" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetCityListForAttendanceConfig")]
        [HttpGet]
        public APIResponse GetCityListForAttendanceConfig(long ChannelId, bool IsEdit)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    //var storeid = new SqlParameter("StoreId", StoreId);
                    var channelid = new SqlParameter("ChannelMasterId", ChannelId);
                    var isedit = new SqlParameter("IsEdit", IsEdit);
                    //var res = context.Database.SqlQuery<GetCityListDc>("GetCityListAttendanceConfig @StoreId,@IsEdit", StoreId, isedit).ToList();
                    var res = context.Database.SqlQuery<GetCityListDc>("GetCityListAttendanceConfig @ChannelMasterId,@IsEdit", channelid, isedit).ToList();
                    if (res != null)
                    {
                        return new APIResponse { Status = true, Data = res };
                    }
                    else
                    {
                        return new APIResponse { Status = false, Message = "Data Deleted Successfully" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }


        [Route("GetAttendanceConfigLog")]
        [HttpGet]
        public APIResponse GetAttendanceConfigLogAsync(int AttendanceRuleConfigId, int Skip, int Take)
        {
            AttendanceRuleEditLog attendanceRuleEditLog = new AttendanceRuleEditLog();
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    /*
                    var AttendanceRuleConfigIdParam = new SqlParameter("AttendanceRuleConfigId", AttendanceRuleConfigId);
                    var SkipParam = new SqlParameter("Skip", Skip);
                    var TakeParam = new SqlParameter("Take", Take);
                    var res = context.Database.SqlQuery("GetAttendanceConfigLogAsync @AttendanceRuleConfigId,@Skip,@Take", AttendanceRuleConfigIdParam, SkipParam, TakeParam);
                   */
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 900;
                    cmd.CommandText = "[dbo].[GetAttendanceConfigLogAsync]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@AttendanceRuleConfigId", AttendanceRuleConfigId));
                    cmd.Parameters.Add(new SqlParameter("@Skip", Skip));
                    cmd.Parameters.Add(new SqlParameter("@Take", Take));

                    // cmd.Parameters.Add(new SqlParameter("@Status", getPoOrderListDc.Status));

                    var reader = cmd.ExecuteReader();
                    var data = ((IObjectContextAdapter)context).ObjectContext.Translate<AttendanceRuleConfigLogDC>(reader).ToList();
                    attendanceRuleEditLog.AttendanceRuleConfigLog = data;
                    reader.NextResult();
                    if (reader.Read())
                    {
                        attendanceRuleEditLog.TotalRecords = reader["TotalRecords"] is DBNull ? 0 : Convert.ToInt64(reader["TotalRecords"]);

                        if (attendanceRuleEditLog.AttendanceRuleConfigLog != null && attendanceRuleEditLog.AttendanceRuleConfigLog.Any())
                        {
                            var AttendanceConfig = context.AttendanceRuleConfigs.Where(x => x.Id == AttendanceRuleConfigId).FirstOrDefault();
                            //foreach (var item in attendanceRuleEditLog.AttendanceRuleConfigLog)
                            //for (int i = 0; i < attendanceRuleEditLog.AttendanceRuleConfigLog.Count; i++)
                            //{
                            //    item.IsCheckinBeatShopUpdated = AttendanceConfig.IsCheckinBeatShop == item.IsCheckinBeatShop ? false : true;
                            //    item.IsCheckInTimeUpdated = AttendanceConfig.CheckInTime == item.CheckInTime ? false : true;
                            //    item.IsCheckOutBeatShopUpdated = AttendanceConfig.IsCheckOutBeatShop == item.IsCheckOutBeatShop ? false : true;
                            //    item.IsFullDayBeatShopUpdated = AttendanceConfig.IsFullDayBeatShop == item.IsFullDayBeatShop ? false : true;
                            //    item.IsMinimumVisitUpdated = AttendanceConfig.IsMinimumVisit == item.IsMinimumVisit ? false : true;
                            //    item.DayMinVisitsUpdated = AttendanceConfig.DayMinVisits == item.DayMinVisits ? false : true;
                            //    item.IsTADABeatShopUpdated = AttendanceConfig.IsTADABeatShop == item.IsTADABeatShop ? false : true;
                            //    item.IsTADARequiredUpdated = AttendanceConfig.IsTADARequired == item.IsTADARequired ? false : true;
                            //    item.TADACallsUpdated = AttendanceConfig.TADACalls == item.TADACalls ? false : true;
                            //    item.DescriptionUpdated = AttendanceConfig.Description == item.Description ? false : true;
                            //}

                            for (int i = 0; i < attendanceRuleEditLog.AttendanceRuleConfigLog.Count; i++)
                            {

                                if (i == 0)
                                {
                                    var attendanceCurrent = attendanceRuleEditLog.AttendanceRuleConfigLog[i];
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckinBeatShopUpdated = attendanceCurrent.IsCheckinBeatShop == AttendanceConfig.IsCheckinBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckInTimeUpdated = attendanceCurrent.CheckInTime == AttendanceConfig.CheckInTime ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckOutBeatShopUpdated = attendanceCurrent.IsCheckOutBeatShop == AttendanceConfig.IsCheckOutBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsFullDayBeatShopUpdated = attendanceCurrent.IsFullDayBeatShop == AttendanceConfig.IsFullDayBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsMinimumVisitUpdated = attendanceCurrent.IsMinimumVisit == AttendanceConfig.IsMinimumVisit ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DayMinVisitsUpdated = attendanceCurrent.DayMinVisits == AttendanceConfig.DayMinVisits ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADABeatShopUpdated = attendanceCurrent.IsTADABeatShop == AttendanceConfig.IsTADABeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADARequiredUpdated = attendanceCurrent.IsTADARequired == AttendanceConfig.IsTADARequired ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].TADACallsUpdated = attendanceCurrent.TADACalls == AttendanceConfig.TADACalls ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DescriptionUpdated = attendanceCurrent.Description == AttendanceConfig.Description ? false : true;
                                }
                                else
                                {
                                    var attendanceCurrent = attendanceRuleEditLog.AttendanceRuleConfigLog[i];
                                    var attendanceNext = attendanceRuleEditLog.AttendanceRuleConfigLog[i - 1];

                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckinBeatShopUpdated = attendanceCurrent.IsCheckinBeatShop == attendanceNext.IsCheckinBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckInTimeUpdated = attendanceCurrent.CheckInTime == attendanceNext.CheckInTime ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsCheckOutBeatShopUpdated = attendanceCurrent.IsCheckOutBeatShop == attendanceNext.IsCheckOutBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsFullDayBeatShopUpdated = attendanceCurrent.IsFullDayBeatShop == attendanceNext.IsFullDayBeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsMinimumVisitUpdated = attendanceCurrent.IsMinimumVisit == attendanceNext.IsMinimumVisit ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DayMinVisitsUpdated = attendanceCurrent.DayMinVisits == attendanceNext.DayMinVisits ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADABeatShopUpdated = attendanceCurrent.IsTADABeatShop == attendanceNext.IsTADABeatShop ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].IsTADARequiredUpdated = attendanceCurrent.IsTADARequired == attendanceNext.IsTADARequired ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].TADACallsUpdated = attendanceCurrent.TADACalls == attendanceNext.TADACalls ? false : true;
                                    attendanceRuleEditLog.AttendanceRuleConfigLog[i].DescriptionUpdated = attendanceCurrent.Description == attendanceNext.Description ? false : true;

                                }
                            }
                        }

                        return new APIResponse { Status = true, Data = attendanceRuleEditLog };
                    }
                    else
                    {
                        return new APIResponse { Status = false, Message = "No Data Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        #endregion

        #region Executive Attendance App Api

        //[Route("GetTodaysAttendenceDetailByExecutive")]
        //[HttpGet]
        //[AllowAnonymous]
        //public APIResponse GetTodaysAttendenceDetailByExecutiveAsync(int ExecutiveId, int WarehouseId)
        //{
        //    try
        //    {
        //        using (AuthContext context = new AuthContext())
        //        {
        //            var today = DateTime.Now.Date;

        //            var ClusterStore = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == ExecutiveId && x.IsDeleted == false && x.IsActive == true).OrderBy(x => x.Id).ToList();
        //            var storeId = ClusterStore.Select(x => x.StoreId).FirstOrDefault();
        //            var cityId = context.Warehouses.FirstOrDefault(x => x.WarehouseId == WarehouseId && x.active && !x.Deleted)?.Cityid;
        //            var ExecutiveDetails = context.ExecutiveAttendances.Where(x => x.ExecutiveId == ExecutiveId && EntityFunctions.TruncateTime(x.CreatedDate) == today).FirstOrDefault();


        //            //get attendance rule
        //            AttendanceRuleConfigsLogDc configs = new AttendanceRuleConfigsLogDc();
        //            AttendenceDetailDC obj = new AttendenceDetailDC();

        //            // city wise config
        //            var store = new SqlParameter("@StoreId", storeId);
        //            var city = new SqlParameter("@CityId", cityId);

        //            var RuleConfigs = context.Database.SqlQuery<AttendanceRuleConfigsLogDc>("EXEC GetAttendanceRuleConfig @StoreId,@CityId", store, city).FirstOrDefault();

        //            //context.AttendanceRuleConfigs.Where(x => x.IsActive == true && x.IsDeleted == false && x.StoreId == storeId && x.CityId == cityId).FirstOrDefault();

        //            if (RuleConfigs != null && RuleConfigs.StoreId > 0)
        //            {
        //                configs = RuleConfigs;
        //            }
        //            else
        //            {
        //                configs = context.AttendanceRuleConfigs.Where(x => x.IsActive == true && x.IsDeleted == false && x.StoreId == storeId && x.CityId == 0)
        //                    .Select(x => new AttendanceRuleConfigsLogDc
        //                    {
        //                        CheckInTime = x.CheckInTime,
        //                        DayMinVisits = x.DayMinVisits,
        //                        Description = x.Description,
        //                        IsCheckinBeatShop = x.IsCheckinBeatShop,
        //                        IsCheckOutBeatShop = x.IsCheckOutBeatShop,
        //                        IsFullDayBeatShop = x.IsFullDayBeatShop,
        //                        IsMinimumVisit = x.IsMinimumVisit,
        //                        IsTADABeatShop = x.IsTADABeatShop,
        //                        IsTADARequired = x.IsTADARequired,
        //                        TADACalls = x.TADACalls,
        //                        CreatedDate = x.CreatedDate
        //                    }).FirstOrDefault();
        //            }
        //            if (configs != null)
        //            {
        //                MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

        //                var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == ExecutiveId).FirstOrDefault();
        //                var PlannedRoute = TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
        //                var ActualRoute = TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

        //                var totalcall = TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;

        //                var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
        //                var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

        //                var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
        //                var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

        //                bool BeatShop = false;
        //                if (configs.IsTADABeatShop)
        //                {
        //                    BeatShop = true;
        //                }

        //                DataTable IdDt = new DataTable();
        //                IdDt.Columns.Add("IntValue");
        //                if (ActualRoute != null && ActualRoute.Count > 0)
        //                {
        //                    foreach (var id in ActualRoute.Where(x => x.IsBeat == BeatShop).Select(x => x.CustomerId).Distinct())
        //                    {
        //                        var dr = IdDt.NewRow();
        //                        dr["IntValue"] = id;
        //                        IdDt.Rows.Add(dr);
        //                    }
        //                }
        //                else
        //                {
        //                    IdDt = null;
        //                }

        //                if (context.Database.Connection.State != ConnectionState.Open)
        //                    context.Database.Connection.Open();

        //                var cmd = context.Database.Connection.CreateCommand();
        //                cmd.CommandTimeout = 100;
        //                cmd.CommandText = "[dbo].[ExecutiveProductiveCall]";
        //                cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //                var param4 = new SqlParameter("PersonId", ExecutiveId);
        //                var param5 = new SqlParameter("CustIdDs", IdDt);
        //                var param8 = new SqlParameter("WarehouseId", WarehouseId);
        //                cmd.Parameters.Add(param4);
        //                cmd.Parameters.Add(param5);
        //                cmd.Parameters.Add(param8);

        //                var reader = cmd.ExecuteReader();
        //                var ProductiveCall = ((IObjectContextAdapter)context).ObjectContext.Translate<ProductiveCallDc>(reader).FirstOrDefault();
        //                context.Database.Connection.Close();


        //                //string query = $" SELECT top 10 orderid from skorderdata_{AppConstants.Environment} where custid={customerId} and whid='{warehouseId}'  and catid in ({ string.Join(",", categoryIds) }) and compid in ({ string.Join(",", companyIds) }) and brandid in ({ string.Join(",", brandIds) })  group by orderid order by orderid desc";

        //                //ElasticSqlHelper<DataContracts.External.LastPOOrderData> elasticSqlHelperData = new ElasticSqlHelper<DataContracts.External.LastPOOrderData>();

        //                //var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(query)).ToList());

        //                // any shop first checkin
        //                if (FirstCheckIn != null)
        //                {
        //                    if (!configs.IsCheckinBeatShop)
        //                    {
        //                        if (ExecutiveDetails.FirstCheckIn == null)
        //                        {
        //                            ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
        //                        }
        //                        if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
        //                        {
        //                            //present
        //                            ExecutiveDetails.IsPresent = true;
        //                            ExecutiveDetails.IsLate = false;
        //                        }
        //                        else
        //                        {
        //                            ExecutiveDetails.IsPresent = true;
        //                            ExecutiveDetails.IsLate = true;
        //                        }
        //                    }
        //                    if (BeatFirstCheckIn != null)
        //                    {
        //                        if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
        //                        {
        //                            if (ExecutiveDetails.FirstCheckIn == null)
        //                            {
        //                                ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
        //                            }
        //                            if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
        //                            {
        //                                //present
        //                                ExecutiveDetails.IsPresent = true;
        //                                ExecutiveDetails.IsLate = false;
        //                            }
        //                            else
        //                            {
        //                                ExecutiveDetails.IsPresent = true;
        //                                ExecutiveDetails.IsLate = true;
        //                            }
        //                        }
        //                    }

        //                    //check out
        //                    if (!configs.IsCheckOutBeatShop) //any shop check out
        //                    {
        //                        ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
        //                    }
        //                    else // beat shop check out
        //                    {
        //                        ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
        //                    }
        //                }

        //                // status - full day half day
        //                if (PlannedRoute != null && PlannedRoute.Count > 0)
        //                {
        //                    if (configs.IsFullDayBeatShop)
        //                    {
        //                        // beat shop visit count check
        //                        if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
        //                        {
        //                            ExecutiveDetails.Status = "Full Day";
        //                        }
        //                        else if (!configs.IsMinimumVisit)
        //                        {
        //                            ExecutiveDetails.Status = "Full Day";
        //                        }
        //                    }
        //                }
        //                // Any shop visit count check
        //                if (ActualRoute != null && ActualRoute.Count > 0)
        //                {
        //                    if (!configs.IsFullDayBeatShop)
        //                    {
        //                        if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
        //                        {
        //                            //full day
        //                            ExecutiveDetails.Status = "Full Day";
        //                        }
        //                        else if (!configs.IsMinimumVisit)
        //                        {
        //                            ExecutiveDetails.Status = "Full Day";
        //                        }
        //                    }
        //                }
        //                int PC = 0;
        //                // TADA approve
        //                if (!configs.IsTADARequired && ExecutiveDetails.IsPresent)
        //                {
        //                    ExecutiveDetails.TADA = "Approved";
        //                }
        //                if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.ProductiveCall >= configs.TADACalls)
        //                {
        //                    ExecutiveDetails.TADA = "Approved";
        //                    PC = ProductiveCall.ProductiveCall;
        //                }
        //                if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.TotalProductiveCall >= configs.TADACalls)
        //                {
        //                    ExecutiveDetails.TADA = "Approved";
        //                    PC = ProductiveCall.TotalProductiveCall;
        //                }

        //                obj.ExecutiveId = ExecutiveId;
        //                obj.IsPresent = ExecutiveDetails.IsPresent;
        //                obj.IsLate = ExecutiveDetails.IsLate;
        //                obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
        //                obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
        //                obj.Status = ExecutiveDetails.Status;
        //                obj.TADA = ExecutiveDetails.TADA;
        //                obj.Description = configs.Description;

        //                if (ExecutiveDetails != null)
        //                {
        //                    if (ExecutiveDetails.ClusterIds == null)
        //                    {
        //                        ExecutiveDetails.ClusterIds = string.Join(",", ClusterStore.Select(x => x.ClusterId).Distinct().ToList());
        //                    }
        //                    if (ExecutiveDetails.StoreIds == null)
        //                    {
        //                        ExecutiveDetails.StoreIds = string.Join(",", ClusterStore.Select(x => x.StoreId).Distinct().ToList());
        //                    }
        //                    if (ExecutiveDetails.CityId == 0)
        //                    {
        //                        ExecutiveDetails.CityId = (int)cityId;
        //                    }

        //                }
        //                ExecutiveDetails.TC = totalcall;
        //                //ExecutiveDetails.LastCheckOut = LastCheckOut != null ? LastCheckOut.CheckOut : null;
        //                ExecutiveDetails.PC = PC;

        //                context.Entry(ExecutiveDetails).State = EntityState.Modified;
        //                context.Commit();
        //            }
        //            return new APIResponse { Status = true, Data = obj };
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return new APIResponse
        //        {
        //            Status = false,
        //            Message = ex.Message
        //        };
        //    }
        //}



        [Route("GetMonthlyAttendenceDetailByExecutive")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse GetMonthlyAttendenceDetailByExecutiveAsync(int ExecutiveId, int Month, int Year)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var TodayDate = DateTime.Today;
                    List<AttendenceDetailDC> AttendenceDetailList = new List<AttendenceDetailDC>();
                    ExecutiveAttendanceLogListDC AttendanceLogList = new ExecutiveAttendanceLogListDC();

                    var executiveid = new SqlParameter("ExecutiveId", ExecutiveId);
                    var month = new SqlParameter("Month", Month);
                    var year = new SqlParameter("Year", Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<ExecutiveAttendanceMonthReportDC>("GetExecutiveAttendanceMonthReportForApp @ExecutiveId,@Month,@Year", executiveid, month, year).ToList();
                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                    {
                        AttendenceDetailList = ExecutiveMonthData.Select(x => new AttendenceDetailDC
                        {
                            ExecutiveId = x.ExecutiveId,
                            FirstCheckIn = x.FirstCheckIn != null ? (TimeSpan?)x.FirstCheckIn.Value.TimeOfDay : null,
                            LastCheckOut = x.LastCheckOut != null ? (TimeSpan?)x.LastCheckOut.Value.TimeOfDay : null,
                            Date = x.CreatedDate,
                            TADA = x.TADA,
                            Status = x.Status,
                            IsLate = x.IsLate,
                            IsPresent = x.IsPresent,
                            CityId = x.CityId,
                            Description = x.Description
                        }).ToList();
                        var HalfDayCount = AttendenceDetailList.Where(x => x.IsPresent == true && x.Status == "Half Day" && x.Date < TodayDate).Count();
                        var FullDayCount = AttendenceDetailList.Where(x => x.IsPresent == true && x.Status == "Full Day").Count();

                        AttendanceLogList.PresentDay = FullDayCount > 0 ? FullDayCount + (HalfDayCount > 0 ? Convert.ToDouble(HalfDayCount) / 2 : 0) : (HalfDayCount > 0 ? Convert.ToDouble(HalfDayCount) / 2 : 0);
                        AttendanceLogList.AbsentDay = AttendenceDetailList.Where(x => x.IsPresent == false).Count();
                        AttendanceLogList.TADADay = AttendenceDetailList.Where(x => x.IsPresent == true && x.TADA == "Approved").Count();
                    }
                    AttendanceLogList.AttendenceDetailList = AttendenceDetailList.Count > 0 && AttendenceDetailList.Any() ? AttendenceDetailList : new List<AttendenceDetailDC>();

                    return new APIResponse { Status = true, Data = AttendanceLogList };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }
        #endregion

        #region Executive Attendance Backend Report
        [Route("GetAllExecutiveAttendenceForReport")]
        [HttpPost]
        public APIResponse GetAllExecutiveAttendenceForReportAsync(AllExecutiveAttendanceReportFilter executiveAttendanceReportFilter)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<ExecutiveAttendanceReportDC> executiveAttendanceLogDCList = new List<ExecutiveAttendanceReportDC>();
                    ExecutiveAttendanceReportDCs execAttendanceLogDCList = new ExecutiveAttendanceReportDCs();
                    MongoDbHelper<ExecutiveAttendanceLog> mongoDbHelper = new MongoDbHelper<ExecutiveAttendanceLog>();
                    var Firstdate = new DateTime(executiveAttendanceReportFilter.Year, executiveAttendanceReportFilter.Month, 1);
                    var LastDate = Firstdate.AddMonths(1).AddMilliseconds(-1);

                    DataTable citydt = new DataTable();
                    citydt.Columns.Add("intValue");
                    foreach (var cityid in executiveAttendanceReportFilter.CityIds)
                    {
                        var dr = citydt.NewRow();
                        dr["intValue"] = cityid;
                        citydt.Rows.Add(dr);
                    }
                    var Cityid = new SqlParameter("CityId", citydt);
                    Cityid.SqlDbType = SqlDbType.Structured;
                    Cityid.TypeName = "dbo.intValues";

                    //DataTable strdt = new DataTable();
                    //strdt.Columns.Add("intValue");
                    //foreach (var strid in executiveAttendanceReportFilter.StoreIds)
                    //{
                    //    var dr = strdt.NewRow();
                    //    dr["intValue"] = strid;
                    //    strdt.Rows.Add(dr);
                    //}
                    //var storeid = new SqlParameter("StoreId", strdt);
                    //storeid.SqlDbType = SqlDbType.Structured;
                    //storeid.TypeName = "dbo.intValues";

                    DataTable chdt = new DataTable();
                    chdt.Columns.Add("intValue");
                    foreach (var chid in executiveAttendanceReportFilter.ChannelMasterId)
                    {
                        var dr = chdt.NewRow();
                        dr["intValue"] = chid;
                        chdt.Rows.Add(dr);
                    }
                    var Channelid = new SqlParameter("ChannelMasterId", chdt);
                    Channelid.SqlDbType = SqlDbType.Structured;
                    Channelid.TypeName = "dbo.intValues";

                    DataTable Waredt = new DataTable();
                    Waredt.Columns.Add("intValue");
                    foreach (var wareid in executiveAttendanceReportFilter.WarehouseIds)
                    {
                        var dr = Waredt.NewRow();
                        dr["intValue"] = wareid;
                        Waredt.Rows.Add(dr);
                    }
                    var warehouseid = new SqlParameter("WarehouseId", Waredt);
                    warehouseid.SqlDbType = SqlDbType.Structured;
                    warehouseid.TypeName = "dbo.intValues";

                    var month = new SqlParameter("Month", executiveAttendanceReportFilter.Month);
                    var year = new SqlParameter("Year", executiveAttendanceReportFilter.Year);
                    var skip = new SqlParameter("Skip", executiveAttendanceReportFilter.Skip);
                    var take = new SqlParameter("Take", executiveAttendanceReportFilter.Take);

                    var ExecutiveData = context.Database.SqlQuery<ExecutiveAttendanceReportDC>("GetExecutiveAttendanceReport @ChannelMasterId,@CityId,@WarehouseId,@Month,@Year,@Skip,@Take", Channelid, Cityid, warehouseid, month, year, skip, take).ToList();

                    if (ExecutiveData.Any() && ExecutiveData.Count > 0)
                    {
                        execAttendanceLogDCList.TotalRecords = ExecutiveData[0].TotalRecords;
                        execAttendanceLogDCList.executiveAttendanceLogDCs = ExecutiveData;
                    }
                    return new APIResponse { Status = true, Data = execAttendanceLogDCList };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("GetExecutiveAttendenceMonthViewForReport")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse GetExecutiveAttendenceMonthViewForReportAsync(int ExecutiveId, int Month, int Year)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var executiveid = new SqlParameter("ExecutiveId", ExecutiveId);
                    var month = new SqlParameter("Month", Month);
                    var year = new SqlParameter("Year", Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<ExecutiveAttendanceMonthReportDC>("GetExecutiveAttendanceMonthReport @ExecutiveId,@Month,@Year", executiveid, month, year).ToList();


                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                    {
                        return new APIResponse { Status = true, Data = ExecutiveMonthData };
                    }
                    else
                        return new APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportAllExecutiveAttendenceForReport")]
        [HttpPost]
        [AllowAnonymous]
        public APIResponse ExportAllExecutiveAttendenceForReportAsync(ExportAllExecutiveAttendenceForReportDC ExportAllExecutiveAttendenceForReportDC)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var sList = new DataTable();
                    sList.Columns.Add("intValue");
                    foreach (var item in ExportAllExecutiveAttendenceForReportDC.WarehousIds)
                    {
                        var dr = sList.NewRow();
                        dr["intValue"] = item;
                        sList.Rows.Add(dr);
                    }
                    var WarehouseIds = new SqlParameter("WarehousIds", sList);
                    WarehouseIds.SqlDbType = SqlDbType.Structured;
                    WarehouseIds.TypeName = "dbo.intValues";

                    //var sListt = new DataTable();
                    //sListt.Columns.Add("intValue");
                    //foreach (var item in ExportAllExecutiveAttendenceForReportDC.StoreIDs)
                    //{
                    //    var dr = sListt.NewRow();
                    //    dr["intValue"] = item;
                    //    sListt.Rows.Add(dr);
                    //}
                    //var SID = new SqlParameter("StoreId", sListt);
                    //SID.SqlDbType = SqlDbType.Structured;
                    //SID.TypeName = "dbo.intValues";

                    var ChannelListt = new DataTable();
                    ChannelListt.Columns.Add("intValue");
                    foreach (var item in ExportAllExecutiveAttendenceForReportDC.ChannelMasterId)
                    {
                        var dr = ChannelListt.NewRow();
                        dr["intValue"] = item;
                        ChannelListt.Rows.Add(dr);
                    }
                    var CHID = new SqlParameter("ChannelMasterId", ChannelListt);
                    CHID.SqlDbType = SqlDbType.Structured;
                    CHID.TypeName = "dbo.intValues";

                    var month = new SqlParameter("Month", ExportAllExecutiveAttendenceForReportDC.Month);
                    var year = new SqlParameter("Year", ExportAllExecutiveAttendenceForReportDC.Year);

                    var ExecutiveMonthData = context.Database.SqlQuery<ExecutiveAttendanceReportDC>("ExportAllExecutiveAttendanceReport @Month,@Year,@WarehousIds,@ChannelMasterId", month, year, WarehouseIds, CHID).ToList();
                    if (ExecutiveMonthData.Any() && ExecutiveMonthData.Count > 0)
                        return new APIResponse { Status = true, Data = ExecutiveMonthData };
                    else
                        return new APIResponse { Status = false, Message = "Data Not Found" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportExecutiveAttendenceMonthViewForReport")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse ExportExecutiveAttendenceMonthViewForReportAsync(int ExecutiveId, int Month, int Year)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    DateTime TodayDate = DateTime.Now;
                    List<ExecutiveAttendanceLogDC> executiveAttendanceLogDCList = new List<ExecutiveAttendanceLogDC>();
                    var Firstdate = new DateTime(Year, Month, 1);
                    var LastDate = Firstdate.AddMonths(1).AddMilliseconds(-1);

                    MongoDbHelper<ExecutiveAttendanceLog> mongoDbHelper = new MongoDbHelper<ExecutiveAttendanceLog>();
                    var AttendanceList = mongoDbHelper.Select(x => x.ExecutiveId == ExecutiveId && x.CreatedDate >= Firstdate && x.CreatedDate <= LastDate).ToList();

                    return new APIResponse { Status = true, Data = null };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportExecutiveAttendenceRowDetails")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse ExportExecutiveAttendenceDayCustomerDetailsAsync(int ExecutiveId, DateTime date)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<ExecutiveAttendanceRowDetailsDC> RowDataList = new List<ExecutiveAttendanceRowDetailsDC>();

                    var Actualdate = date.AddDays(1).AddMilliseconds(-1);
                    var ExecutiveData = context.Peoples.Where(x => x.PeopleID == ExecutiveId && x.Active == true && x.Deleted == false).FirstOrDefault();
                    var StoreId = context.ClusterStoreExecutives.Where(x => x.ExecutiveId == ExecutiveId && x.IsActive == true && x.IsDeleted == false).Select(x => x.StoreId).FirstOrDefault();
                    var StoreName = context.StoreDB.Where(x => StoreId == x.Id && x.IsActive == true && x.IsDeleted == false).Select(x => x.Name).FirstOrDefault();
                    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                    var AttendanceData = mongoDbHelper.Select(x => x.PeopleId == ExecutiveId && x.CreatedDate >= date && x.CreatedDate <= Actualdate).FirstOrDefault();
                    if (AttendanceData != null && AttendanceData.ActualRoutes != null)
                    {
                        RowDataList = AttendanceData.ActualRoutes.Select(x => new ExecutiveAttendanceRowDetailsDC
                        {
                            EmployeeCode = ExecutiveData.Empcode,
                            ExecuitveName = ExecutiveData.DisplayName,
                            Store = StoreName,
                            Channel = x.ChannelName,
                            Warehouse = x.WarehouseName,
                            Cluster = x.ClusterName,
                            Date = AttendanceData.CreatedDate.Date,
                            Day = x.Day,
                            SkCode = x.Skcode,
                            CheckIn = x.CheckIn != null ? TimeSpan.Parse(x.CheckIn.Value.ToString("hh:mm:ss")) : x.CheckIn.Value.TimeOfDay,
                            CheckOut = x.CheckOut != null ? TimeSpan.Parse(x.CheckOut.Value.ToString("hh:mm:ss")) : x.CheckOut.Value.TimeOfDay,
                            BeatCustomer = x.IsBeat == true ? "Yes" : "No"
                        }).ToList();
                    }
                    //Get Selft Orders for 
                    return new APIResponse { Status = true, Data = RowDataList };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        [Route("ExportAllExecutiveAttendenceRowDetails")]
        [HttpGet]
        [AllowAnonymous]
        public APIResponse ExportAllExecutiveAttendenceRowsDetailsAsync(DateTime date)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    List<ExecutiveAttendanceRowDetailsDC> RowDataList = new List<ExecutiveAttendanceRowDetailsDC>();

                    var Actualdate = date.AddDays(1).AddMilliseconds(-1);
                    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
                    var AttendanceData = mongoDbHelper.Select(x => x.AssignmentDate >= date && x.AssignmentDate <= Actualdate).ToList();
                    var ExecutiveAllIds = AttendanceData.GroupBy(x => x.PeopleId).Select(x => x.Key).ToList();

                    DataTable dt = new DataTable();
                    dt.Columns.Add("intValue");
                    foreach (var id in ExecutiveAllIds)
                    {
                        var dr = dt.NewRow();
                        dr["intValue"] = id;
                        dt.Rows.Add(dr);
                    }
                    var param = new SqlParameter("ExecutiveIds", dt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.intValues";

                    var ExecutiveAllData = context.Database.SqlQuery<ExecutiveDataList>("ExecutiveDataListByIds @ExecutiveIds", param).ToList();

                    foreach (var exec in AttendanceData)
                    {

                        if (exec.ActualRoutes != null && exec.ActualRoutes.Count > 0)
                        {
                            var data = exec.ActualRoutes.Select(x => new ExecutiveAttendanceRowDetailsDC
                            {
                                EmployeeCode = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId)?.Empcode,
                                ExecuitveName = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId)?.ExecutiveName,
                                Store = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId)?.StoreName,
                                Warehouse = ExecutiveAllData.FirstOrDefault(e => e.ExecutiveId == exec.PeopleId)?.WarehouseName,
                                Cluster = x.ClusterName,
                                Date = exec.AssignmentDate.Date,
                                Day = x.Day,
                                SkCode = x.Skcode,
                                CheckIn = x.CheckIn != null ? TimeSpan.Parse(x.CheckIn.Value.ToString("hh:mm:ss")) : TimeSpan.Parse(DateTime.Now.Date.ToString("hh:mm:ss")),
                                CheckOut = x.CheckOut != null ? TimeSpan.Parse(x.CheckOut.Value.ToString("hh:mm:ss")) : TimeSpan.Parse(DateTime.Now.Date.ToString("hh:mm:ss")),
                                BeatCustomer = x.IsBeat == true ? "Yes" : "No"
                            }).ToList();
                            RowDataList.AddRange(data);
                        }
                    }
                    if (RowDataList.Any() && RowDataList.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(RowDataList);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/AllExecutiveDayReport");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "AllExecutiveDay_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "AllExecutiveDay_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/AllExecutiveDayReport/" + fileName);
                        return new APIResponse { Status = true, Data = FileUrl };
                    }
                    //Get Selft Orders for 
                    return new APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        //[HttpGet]
        //[AllowAnonymous]
        //[Route("DefaultExecutiveInsert")]
        //public bool InsertExecutiveInAttendance()
        //{
        //    using (AuthContext context = new AuthContext())
        //    {
        //        var res = context.Database.SqlQuery<dynamic>("EXEC InsertExecutiveInExecutiveAttendances").ToList();
        //    }

        //    return true;
        //}
        #endregion

        #region Executive Attendance Calculation

        [Route("ExecutiveAttendenceUpdateJob")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<bool> ExecutiveAttendenceUpdateJobAsync()
        {
            ExecutiveAttendenceMongoHelper executiveAttendenceHelper = new ExecutiveAttendenceMongoHelper();
            bool response = false;
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    //Insert into Executive Attendence Mongo 
                    response = await executiveAttendenceHelper.InsertExecutiveAttendanceInMongo();
                    //if (response)
                    //{
                    //    //Delete from Executive Attendence
                    //    DeleteResponse = await executiveAttendenceHelper.DeleteExecutiveAttendanceFromTable();
                    //}
                    if (response)
                    {
                        //Insert new records for next day in Executive Attendence Table
                        response = await executiveAttendenceHelper.InsertExecutiveInAttendance();
                    }
                    return response;
                }
            }
            catch (Exception ex)
            {
                return response;
            }
        }

        [Route("GetTodaysAttendenceDetailByExecutive")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<APIResponse> TodaysAttendence(int ExecutiveId, int WarehouseId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    ExecutiveAttendenceMongoHelper executiveAttendenceHelper = new ExecutiveAttendenceMongoHelper();
                    bool response = false;

                    response = await executiveAttendenceHelper.InsertMissingExecutiveAttendances(ExecutiveId);
                    var today = DateTime.Now.Date;

                    AttendanceRuleConfigsLogDc configs = new AttendanceRuleConfigsLogDc();
                    // AttendanceRuleConfigsLogDc RuleConfigs = new AttendanceRuleConfigsLogDc();
                    ExecutiveAttendanceDetailDc ExecutiveDetails = new ExecutiveAttendanceDetailDc();

                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 100;
                    cmd.CommandText = "[dbo].[GetExecutiveDetailAndAttendanceConfigRule]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var ExecutiveIdParam = new SqlParameter("ExecutiveId", ExecutiveId);
                    var WarehouseIdParam = new SqlParameter("WarehouseId", WarehouseId);
                    cmd.Parameters.Add(ExecutiveIdParam);
                    cmd.Parameters.Add(WarehouseIdParam);

                    var reader = cmd.ExecuteReader();

                    ExecutiveDetails = ((IObjectContextAdapter)context).ObjectContext.Translate<ExecutiveAttendanceDetailDc>(reader).FirstOrDefault();

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        configs = ((IObjectContextAdapter)context)
                                            .ObjectContext
                                            .Translate<AttendanceRuleConfigsLogDc>(reader).FirstOrDefault();
                    }

                    context.Database.Connection.Close();

                    //get attendance rule

                    AttendenceDetailDC obj = new AttendenceDetailDC();

                    if (configs != null && configs.ChannelMasterId > 0)
                    {
                        MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                        var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == ExecutiveId).FirstOrDefault();
                        var PlannedRoute = TodayBeat != null && TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
                        var ActualRoute = TodayBeat != null && TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

                        var totalcall = TodayBeat != null && TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;
                        var TotalcallAnyCluster = TodayBeat != null && TodayBeat.ActualRoutes != null ? ActualRoute.Count(x => x.IsVisited) : 0;

                        var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                        var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                        var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                        var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;



                        DateTime TodayDate = DateTime.Today;
                        DateTime startDate = new DateTime(TodayDate.Year, TodayDate.Month, TodayDate.Day);
                        string sDate = startDate.ToString("yyyy-MM-dd");
                        string query = $" select custid  from {platformIdxName} where cast(createddate as date)= cast('{sDate}' as date) and  executiveid = { ExecutiveId } group by custid ";

                        ElasticSqlHelper<ElasticOrderData> elasticSqlHelperData = new ElasticSqlHelper<ElasticOrderData>();
                        var orderdetails = AsyncContext.Run(async () => (await elasticSqlHelperData.GetListAsync(query)).ToList());

                        List<int> custids = new List<int>();
                        if (configs.IsTADABeatShop)
                        {
                            custids = PlannedRoute != null ? PlannedRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                        }
                        else
                        {
                            //custids = ActualRoute != null ? ActualRoute.Select(x => x.CustomerId).Distinct().ToList() : null;
                            custids = orderdetails.Select(x => x.custid).Distinct().ToList();
                        }

                        int ProductiveCall = custids != null ? orderdetails.Where(x => custids.Contains(x.custid)).Distinct().Count() : 0;
                        //int ProductiveCall2 = orderdetails != null ? custids.Where(x => orderdetails.Contains(x)).Distinct().Count() : 0;

                        // any shop first checkin

                        if (FirstCheckIn != null)
                        {
                            if (!configs.IsCheckinBeatShop)
                            {
                                if (ExecutiveDetails.FirstCheckIn == null)
                                {
                                    ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
                                }
                                if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                {
                                    //present
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = false;
                                }
                                else
                                {
                                    ExecutiveDetails.IsPresent = true;
                                    ExecutiveDetails.IsLate = true;
                                }
                            }
                            if (BeatFirstCheckIn != null)
                            {
                                if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
                                {
                                    if (ExecutiveDetails.FirstCheckIn == null)
                                    {
                                        ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
                                    }
                                    if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                    {
                                        //present
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = false;
                                    }
                                    else
                                    {
                                        ExecutiveDetails.IsPresent = true;
                                        ExecutiveDetails.IsLate = true;
                                    }
                                }
                            }

                            //check out
                            if (!configs.IsCheckOutBeatShop) //any shop check out
                            {
                                ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
                            }
                            else // beat shop check out
                            {
                                ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
                            }
                        }

                        int TC = 0;
                        // status - full day half day
                        if (PlannedRoute != null && PlannedRoute.Count > 0)
                        {
                            if (configs.IsFullDayBeatShop)
                            {
                                // beat shop visit count check
                                if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = totalcall;
                            }
                        }
                        // Any shop visit count check
                        if (ActualRoute != null && ActualRoute.Count > 0)
                        {
                            if (!configs.IsFullDayBeatShop)
                            {
                                if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                {
                                    //full day
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                else if (!configs.IsMinimumVisit)
                                {
                                    ExecutiveDetails.Status = "Full Day";
                                }
                                TC = TotalcallAnyCluster;
                            }
                        }
                        //int PC = 0;
                        // TADA approve
                        if (!configs.IsTADARequired && ExecutiveDetails.IsPresent)
                        {
                            ExecutiveDetails.TADA = "Approved";
                        }
                        if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }
                        if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall >= configs.TADACalls)
                        {
                            ExecutiveDetails.TADA = "Approved";
                            //PC = ProductiveCall;
                        }

                        obj.ExecutiveId = ExecutiveId;
                        obj.IsPresent = ExecutiveDetails.IsPresent;
                        obj.IsLate = ExecutiveDetails.IsLate;
                        obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
                        obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
                        obj.Status = ExecutiveDetails.Status;
                        obj.TADA = ExecutiveDetails.TADA;
                        obj.Description = configs.Description;

                        var executive = context.ExecutiveAttendances.Where(x => x.Id == ExecutiveDetails.Id).FirstOrDefault();
                        if (executive != null)
                        {
                            executive.CityId = ExecutiveDetails.CityId;
                            executive.FirstCheckIn = ExecutiveDetails.FirstCheckIn;
                            executive.IsLate = ExecutiveDetails.IsLate;
                            executive.IsPresent = ExecutiveDetails.IsPresent;
                            executive.LastCheckOut = LastCheckOut != null ? LastCheckOut.CheckOut : null;
                            executive.PC = ProductiveCall;
                            executive.Status = ExecutiveDetails.Status;
                            executive.TADA = ExecutiveDetails.TADA;
                            executive.TC = TC;
                            executive.CreatedDate = ExecutiveDetails.CreatedDate;
                            executive.ModifiedDate = DateTime.Now;

                            executive.ConfigCheckInTime = configs.CheckInTime;
                            executive.ConfigDayMinVisits = configs.DayMinVisits;
                            executive.ConfigIsCheckinBeatShop = configs.IsCheckinBeatShop;
                            executive.ConfigIsCheckOutBeatShop = configs.IsCheckOutBeatShop;
                            executive.ConfigIsTADABeatShop = configs.IsTADABeatShop;
                            executive.ConfigTADACalls = configs.TADACalls;
                            executive.ConfigIsFullDayBeatShop = configs.IsFullDayBeatShop;
                            executive.ConfigIsMinimumVisit = configs.IsMinimumVisit;
                            executive.ConfigIsTADARequired = configs.IsTADARequired;
                            if (executive.ConfigId == 0)
                            {
                                executive.ConfigId = configs.ConfigId;
                            }

                            context.Entry(executive).State = EntityState.Modified;
                            context.Commit();
                        }
                    }
                    return new APIResponse { Status = true, Data = obj };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse
                {
                    Status = false,
                    Message = ex.Message
                };
            }
        }

        //[HttpGet]
        //[Route("AttendenceCalculationJob")]
        //public bool AttendenceCalculationJob()
        //{
        //    using (var db = new AuthContext())
        //    {
        //        var list = (from e in db.ClusterStoreExecutives
        //                    join p in db.Peoples on e.ExecutiveId equals p.PeopleID
        //                    where e.IsActive == true && e.IsDeleted == false
        //                    select new
        //                    {
        //                        p.PeopleID,
        //                        p.WarehouseId
        //                    }).Distinct().ToList();
        //        if (list != null && list.Any())
        //        {
        //            Parallel.ForEach(list, item =>
        //            {
        //                var job = TodaysAttendence(item.PeopleID, item.WarehouseId);
        //            });
        //        }
        //        return true;
        //    }
        //}

        [HttpGet]
        [Route("IsBeatAddTemp")]
        [AllowAnonymous]
        public async Task<bool> IsBeatAddTemp(int peopleId)
        {
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            {
                var today = DateTime.Now.Date;
                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate == today).ToList();
                foreach (var data in executiveBeats)
                {
                    if (data != null && data.ActualRoutes != null)
                    {
                        foreach (var item in data.ActualRoutes)
                        {
                            item.IsBeat = item.IsBeat != null ? item.IsBeat : false;
                        }
                        result = mongoDbHelper.Replace(data.Id, data);
                    }
                }
            }
            return result;
        }

        [HttpGet]
        [Route("ExecutiveTCUpdate")]
        public bool ExecutiveTCUpdate(DateTime today, int ExecutiveId)
        {
            using (AuthContext context = new AuthContext())
            {
                MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                var executiveBeats = MongoDbHelper.Select(x => x.AssignmentDate == today).ToList();
                foreach (var route in executiveBeats)
                {
                    var totalcall = route != null && route.PlannedRoutes != null ? route.PlannedRoutes.Count(x => x.IsVisited) : 0;
                    var TotalcallAnyCluster = route != null && route.ActualRoutes != null ? route.ActualRoutes.Count(x => x.IsVisited) : 0;

                    var executive = context.ExecutiveAttendances.Where(x => x.ExecutiveId == route.PeopleId && EntityFunctions.TruncateTime(x.CreatedDate) == today).FirstOrDefault();
                    if (executive != null)
                    {
                        executive.TC = TotalcallAnyCluster;
                        context.Entry(executive).State = EntityState.Modified;
                    }

                }
                context.Commit();
                return true;
            }
        }

        [HttpPost]
        [Route("ExecutiveAttendanceReportDateWise")]
        public async Task<APIResponse> ExecutiveAttendanceReportDateWiseAsync(DateTime date, List<int> Warehousids)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var Date = new SqlParameter("@date", date);

                    var sList = new DataTable();
                    sList.Columns.Add("intValue");
                    foreach (var item in Warehousids)
                    {
                        var dr = sList.NewRow();
                        dr["intValue"] = item;
                        sList.Rows.Add(dr);
                    }
                    var WarehouseIds = new SqlParameter("warehouseids", sList);
                    WarehouseIds.SqlDbType = SqlDbType.Structured;
                    WarehouseIds.TypeName = "dbo.intValues";

                    var data = context.Database.SqlQuery<ExecutiveAttendanceReportDateWiseDC>("ExecutiveAttendanceReportDateWise @date,@warehouseids", Date, WarehouseIds).ToList();

                    if (data.Any() && data.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(data);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/ExecutiveAttendanceReport");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "ExecutiveAttendance_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "ExecutiveAttendance_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/ExecutiveAttendanceReport/" + fileName);
                        return new APIResponse { Status = true, Data = FileUrl };
                    }
                    return new APIResponse { Status = false, Message = "Data Not Found!" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message };
            }
        }

        #endregion

        #region SalesTargetDashboardReport API
        [HttpGet]
        [Route("SalesTargetDashboardReport")]
        public async Task<APIResponse> SalesTargetDashboardReportAsync()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var data = context.Database.SqlQuery<SalesTargetDashboardReportDC>("SalesTargetDashboardReport").ToList();
                    if (data.Any() && data.Count > 0)
                        return new APIResponse { Status = true, Data = data };
                    else
                        return new APIResponse { Status = false, Message = "Data Not Found" };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Message = ex.Message }; ;
            }
        }

        [HttpGet]
        [Route("AttendenceCalculationJob")]
        [AllowAnonymous]
        public async Task<bool> AttendenceCalculationJob()
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var list = (from e in context.ClusterStoreExecutives
                                join p in context.Peoples on e.ExecutiveId equals p.PeopleID
                                where e.IsActive == true && e.IsDeleted == false
                                select new
                                {
                                    p.PeopleID,
                                    p.WarehouseId
                                }).Distinct().ToList();
                    if (list != null && list.Any())
                    {


                        var today = DateTime.Now.Date;
                        foreach (var people in list)
                        {
                            ExecutiveAttendenceMongoHelper executiveAttendenceHelper = new ExecutiveAttendenceMongoHelper();

                            AttendanceRuleConfigsLogDc configs = new AttendanceRuleConfigsLogDc();
                            // AttendanceRuleConfigsLogDc RuleConfigs = new AttendanceRuleConfigsLogDc();
                            ExecutiveAttendanceDetailDc ExecutiveDetails = new ExecutiveAttendanceDetailDc();
                            if (context.Database.Connection.State != ConnectionState.Open)
                                context.Database.Connection.Open();
                            var cmd = context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 100;
                            cmd.CommandText = "[dbo].[GetExecutiveDetailAndAttendanceConfigRule]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var ExecutiveIdParam = new SqlParameter("ExecutiveId", people.PeopleID);
                            var WarehouseIdParam = new SqlParameter("WarehouseId", people.WarehouseId);
                            cmd.Parameters.Add(ExecutiveIdParam);
                            cmd.Parameters.Add(WarehouseIdParam);
                            var reader = cmd.ExecuteReader();
                            ExecutiveDetails = ((IObjectContextAdapter)context).ObjectContext.Translate<ExecutiveAttendanceDetailDc>(reader).FirstOrDefault();

                            reader.NextResult();
                            if (reader.HasRows)
                            {
                                configs = ((IObjectContextAdapter)context)
                                                    .ObjectContext
                                                    .Translate<AttendanceRuleConfigsLogDc>(reader).FirstOrDefault();
                            }
                            context.Database.Connection.Close();
                            if (ExecutiveDetails != null)
                            {
                                AttendenceDetailDC obj = new AttendenceDetailDC();

                                if (configs != null && configs.ChannelMasterId > 0)
                                {
                                    MongoDbHelper<ExecutiveBeats> MongoDbHelper = new MongoDbHelper<ExecutiveBeats>();

                                    var TodayBeat = MongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == people.PeopleID).FirstOrDefault();
                                    var PlannedRoute = TodayBeat != null && TodayBeat.PlannedRoutes != null ? TodayBeat.PlannedRoutes.ToList() : null;
                                    var ActualRoute = TodayBeat != null && TodayBeat.ActualRoutes != null ? TodayBeat.ActualRoutes.ToList() : null;

                                    var totalcall = TodayBeat != null && TodayBeat.PlannedRoutes != null ? PlannedRoute.Count(x => x.IsVisited) : 0;
                                    var TotalcallAnyCluster = TodayBeat != null && TodayBeat.ActualRoutes != null ? ActualRoute.Count(x => x.IsVisited) : 0;

                                    var FirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                                    var LastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                                    var BeatFirstCheckIn = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckIn }).OrderBy(x => x.CheckIn).FirstOrDefault() : null;
                                    var BeatLastCheckOut = (ActualRoute != null && ActualRoute.Any()) ? ActualRoute.Where(x => x.IsBeat == true).Select(x => new { x.CustomerId, x.IsBeat, x.CheckOut }).OrderByDescending(x => x.CheckOut).FirstOrDefault() : null;

                                    bool BeatShop = false;
                                    DataTable IdDt = new DataTable();
                                    if (configs.IsTADABeatShop)
                                    {
                                        BeatShop = true;

                                        IdDt.Columns.Add("IntValue");
                                        if (ActualRoute != null && ActualRoute.Count > 0)
                                        {
                                            foreach (var id in ActualRoute.Where(x => x.IsBeat == BeatShop).Select(x => x.CustomerId).Distinct())
                                            {
                                                var dr = IdDt.NewRow();
                                                dr["IntValue"] = id;
                                                IdDt.Rows.Add(dr);
                                            }
                                        }
                                        else
                                        {
                                            IdDt = null;
                                        }
                                    }
                                    else
                                    {
                                        IdDt = null;
                                    }
                                    ProductiveCallDc ProductiveCall = new ProductiveCallDc();
                                    using (var db = new AuthContext())
                                    {
                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();
                                        var cmd1 = db.Database.Connection.CreateCommand();
                                        cmd1.CommandTimeout = 100;
                                        cmd1.CommandText = "[dbo].[ExecutiveProductiveCall]";
                                        cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                                        var param4 = new SqlParameter("PersonId", people.PeopleID);
                                        var param5 = new SqlParameter("CustIdDs", IdDt);
                                        var param8 = new SqlParameter("WarehouseId", people.WarehouseId);
                                        var param9 = new SqlParameter("IsBeat", BeatShop);
                                        cmd1.Parameters.Add(param4);
                                        cmd1.Parameters.Add(param5);
                                        cmd1.Parameters.Add(param8);
                                        cmd1.Parameters.Add(param9);

                                        var readerData = cmd1.ExecuteReader();
                                        ProductiveCall = ((IObjectContextAdapter)db).ObjectContext.Translate<ProductiveCallDc>(readerData).FirstOrDefault();
                                        db.Database.Connection.Close();
                                    }
                                    // any shop first checkin
                                    if (FirstCheckIn != null)
                                    {
                                        if (!configs.IsCheckinBeatShop)
                                        {
                                            if (ExecutiveDetails.FirstCheckIn == null)
                                            {
                                                ExecutiveDetails.FirstCheckIn = FirstCheckIn.CheckIn != null ? FirstCheckIn.CheckIn : null;
                                            }
                                            if (Convert.ToDateTime(FirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                            {
                                                //present
                                                ExecutiveDetails.IsPresent = true;
                                                ExecutiveDetails.IsLate = false;
                                            }
                                            else
                                            {
                                                ExecutiveDetails.IsPresent = true;
                                                ExecutiveDetails.IsLate = true;
                                            }
                                        }
                                        if (BeatFirstCheckIn != null)
                                        {
                                            if (configs.IsCheckinBeatShop == BeatFirstCheckIn.IsBeat)
                                            {
                                                if (ExecutiveDetails.FirstCheckIn == null)
                                                {
                                                    ExecutiveDetails.FirstCheckIn = BeatFirstCheckIn.CheckIn != null ? BeatFirstCheckIn.CheckIn : null; //CheckInData.CheckIn != null ? CheckInData.CheckIn : null;
                                                }
                                                if (Convert.ToDateTime(BeatFirstCheckIn.CheckIn).TimeOfDay <= configs.CheckInTime)
                                                {
                                                    //present
                                                    ExecutiveDetails.IsPresent = true;
                                                    ExecutiveDetails.IsLate = false;
                                                }
                                                else
                                                {
                                                    ExecutiveDetails.IsPresent = true;
                                                    ExecutiveDetails.IsLate = true;
                                                }
                                            }
                                        }

                                        //check out
                                        if (!configs.IsCheckOutBeatShop) //any shop check out
                                        {
                                            ExecutiveDetails.LastCheckOut = LastCheckOut != null && LastCheckOut.CheckOut != null ? LastCheckOut.CheckOut : null;
                                        }
                                        else // beat shop check out
                                        {
                                            ExecutiveDetails.LastCheckOut = BeatLastCheckOut != null && BeatLastCheckOut.CheckOut != null ? BeatLastCheckOut.CheckOut : null;
                                        }
                                    }

                                    int TC = 0;
                                    // status - full day half day
                                    if (PlannedRoute != null && PlannedRoute.Count > 0)
                                    {
                                        if (configs.IsFullDayBeatShop)
                                        {
                                            // beat shop visit count check
                                            if (configs.IsMinimumVisit && PlannedRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            else if (!configs.IsMinimumVisit)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            TC = totalcall;
                                        }
                                    }
                                    // Any shop visit count check
                                    if (ActualRoute != null && ActualRoute.Count > 0)
                                    {
                                        if (!configs.IsFullDayBeatShop)
                                        {
                                            if (configs.IsMinimumVisit && ActualRoute.Count(x => x.IsVisited) >= configs.DayMinVisits)
                                            {
                                                //full day
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            else if (!configs.IsMinimumVisit)
                                            {
                                                ExecutiveDetails.Status = "Full Day";
                                            }
                                            TC = TotalcallAnyCluster;
                                        }
                                    }
                                    //int PC = 0;
                                    // TADA approve
                                    if (!configs.IsTADARequired && ExecutiveDetails.IsPresent)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                    }
                                    if (configs.IsTADARequired && configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.ProductiveCall >= configs.TADACalls)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                        //PC = ProductiveCall;
                                    }
                                    if (configs.IsTADARequired && !configs.IsTADABeatShop && ExecutiveDetails.IsPresent && ProductiveCall.ProductiveCall >= configs.TADACalls)
                                    {
                                        ExecutiveDetails.TADA = "Approved";
                                        //PC = ProductiveCall;
                                    }

                                    obj.ExecutiveId = people.PeopleID;
                                    obj.IsPresent = ExecutiveDetails.IsPresent;
                                    obj.IsLate = ExecutiveDetails.IsLate;
                                    obj.FirstCheckIn = ExecutiveDetails.FirstCheckIn != null ? (TimeSpan?)ExecutiveDetails.FirstCheckIn.Value.TimeOfDay : null;
                                    obj.LastCheckOut = ExecutiveDetails.LastCheckOut != null ? (TimeSpan?)ExecutiveDetails.LastCheckOut.Value.TimeOfDay : null; //LastCheckOut != null && LastCheckOut.CheckOut != null && LastCheckOut.CheckOut.HasValue ? (TimeSpan?)LastCheckOut.CheckOut.Value.TimeOfDay : null;
                                    obj.Status = ExecutiveDetails.Status;
                                    obj.TADA = ExecutiveDetails.TADA;
                                    obj.Description = configs.Description;

                                    var executive = context.ExecutiveAttendances.Where(x => x.Id == ExecutiveDetails.Id).FirstOrDefault();
                                    if (executive != null)
                                    {
                                        executive.CityId = ExecutiveDetails.CityId;
                                        executive.FirstCheckIn = ExecutiveDetails.FirstCheckIn;
                                        executive.IsLate = ExecutiveDetails.IsLate;
                                        executive.IsPresent = ExecutiveDetails.IsPresent;
                                        executive.LastCheckOut = LastCheckOut != null ? LastCheckOut.CheckOut : null;
                                        executive.PC = ProductiveCall.ProductiveCall;
                                        executive.Status = ExecutiveDetails.Status;
                                        executive.TADA = ExecutiveDetails.TADA;
                                        executive.TC = TC;
                                        executive.CreatedDate = ExecutiveDetails.CreatedDate;
                                        executive.ModifiedDate = DateTime.Now;

                                        executive.ConfigCheckInTime = configs.CheckInTime;
                                        executive.ConfigDayMinVisits = configs.DayMinVisits;
                                        executive.ConfigIsCheckinBeatShop = configs.IsCheckinBeatShop;
                                        executive.ConfigIsCheckOutBeatShop = configs.IsCheckOutBeatShop;
                                        executive.ConfigIsTADABeatShop = configs.IsTADABeatShop;
                                        executive.ConfigTADACalls = configs.TADACalls;
                                        executive.ConfigIsFullDayBeatShop = configs.IsFullDayBeatShop;
                                        executive.ConfigIsMinimumVisit = configs.IsMinimumVisit;
                                        executive.ConfigIsTADARequired = configs.IsTADARequired;
                                        if (executive.ConfigId == 0)
                                        {
                                            executive.ConfigId = configs.ConfigId;
                                        }

                                        context.Entry(executive).State = EntityState.Modified;
                                        context.Commit();
                                    }
                                }
                            }
                        }
                        context.Database.Connection.Close();
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }


        //[HttpGet]
        //[Route("WarehouseUpdateTemp")]
        //[AllowAnonymous]
        //public async Task<bool> WarehouseUpdateTemp()
        //{
        //    bool result = false;
        //    MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
        //    {
        //        using (AuthContext context = new AuthContext())
        //        {
        //            var peoples = context.Database.SqlQuery<int>("select PeopleId from PeopleWarehouseTransferHis").ToList();
        //            var today = DateTime.Now.Date;
        //            foreach (var m in peoples)
        //            {
        //                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate == today && x.PeopleId == m).FirstOrDefault();
        //                {
        //                    if (executiveBeats != null && executiveBeats.PlannedRoutes != null)
        //                    {
        //                        foreach (var item in executiveBeats.PlannedRoutes)
        //                        {
        //                            item.WarehouseId = 7;
        //                        }
        //                        result = mongoDbHelper.Replace(executiveBeats.Id, executiveBeats);
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    return result;
        //}
        #endregion
        #endregion

        public List<SalesPerformanceDashbordWarehouseDC> WarehouseDashboardDataAsync(List<int> Warehouseids, List<SalesPerformanceDashbordListDC> Datalist, List<DashBoardColourCode> ColourCode)
        {
            try
            {
                List<SalesPerformanceDashbordWarehouseDC> salesPerformanceDataList = new List<SalesPerformanceDashbordWarehouseDC>();
                foreach (var warehouseid in Warehouseids)
                {
                    SalesPerformanceDashbordWarehouseDC salesPerformanceDashbordListDC = new SalesPerformanceDashbordWarehouseDC();
                    var warehouseData = Datalist.Where(x => x.WarehouseId == warehouseid).ToList();
                    if (warehouseData != null && warehouseData.Count > 0)
                    {
                        salesPerformanceDashbordListDC.CityName = warehouseData.Where(x => x.CityName != null).Select(x => x.CityName).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseName = warehouseData[0].WarehouseName;
                        var beatSales = warehouseData.Sum(x => x.BeatSales);
                        salesPerformanceDashbordListDC.Sales = warehouseData.Sum(x => x.Sales);
                        var beatsalespercent = salesPerformanceDashbordListDC.Sales > 0 ? (Math.Round(beatSales) / salesPerformanceDashbordListDC.Sales) * 100 : 0;
                        salesPerformanceDashbordListDC.SalesColour = ColourCode.Where(x => beatsalespercent > 0 && x.SalesFrom <= beatsalespercent && x.SalesTo >= beatsalespercent).Select(x => x.Colour).FirstOrDefault();
                        salesPerformanceDashbordListDC.Dispatch = warehouseData.Sum(x => x.Dispatch);
                        var beatpercent = warehouseData.Sum(x => x.BeatVisitPercent);
                        var beatcount = warehouseData.Count(x => x.BeatVisitPercent > 0);
                        salesPerformanceDashbordListDC.BeatVisitPercent = beatcount > 0 ? Math.Round(beatpercent / beatcount, 2) : 0;

                        var BeatTC = warehouseData.Sum(x => x.BeatTC);
                        salesPerformanceDashbordListDC.TC = warehouseData.Sum(x => x.TC);
                        var BeatTcPercent = salesPerformanceDashbordListDC.TC > 0 ? (Convert.ToDouble(BeatTC) / Convert.ToDouble(salesPerformanceDashbordListDC.TC)) * 100 : 0;
                        salesPerformanceDashbordListDC.TCColour = ColourCode.Where(x => BeatTcPercent > 0 && x.TCFrom <= BeatTcPercent && x.TCTo >= BeatTcPercent).Select(x => x.Colour).FirstOrDefault();

                        var BeatPC = warehouseData.Sum(x => x.BeatPC);
                        salesPerformanceDashbordListDC.ProductiveCall = warehouseData.Sum(x => x.ProductiveCall);
                        var BeatPCPercent = salesPerformanceDashbordListDC.ProductiveCall > 0 ? (Convert.ToDouble(BeatPC) / salesPerformanceDashbordListDC.ProductiveCall) * 100 : 0;
                        salesPerformanceDashbordListDC.PCColour = ColourCode.Where(x => BeatPCPercent > 0 && x.PCFrom <= BeatPCPercent && x.PCTo >= BeatPCPercent).Select(x => x.Colour).FirstOrDefault();

                        salesPerformanceDashbordListDC.ActiveRetailer = warehouseData.Sum(x => x.ActiveRetailer);
                        salesPerformanceDashbordListDC.AvgLineItem = warehouseData.Sum(x => x.AvgLineItem) > 0 ? Math.Round(warehouseData.Sum(x => x.AvgLineItem) / warehouseData.Count(), 2) : 0;
                        salesPerformanceDashbordListDC.PerfactOrder = warehouseData.Sum(x => x.PerfactOrder);
                        salesPerformanceDashbordListDC.Range = warehouseData.Sum(x => x.Range) > 0 ? Math.Round(Convert.ToDouble(warehouseData.Sum(x => x.Range)) / warehouseData.Count(), 2) : 0;
                        salesPerformanceDashbordListDC.ActualTimeSpend = warehouseData.Sum(x => x.ActualTimeSpend) > 0 ? Math.Round(Convert.ToDouble(warehouseData.Sum(x => x.ActualTimeSpend)) / warehouseData.Count(x => x.ActualTimeSpend > 0), 2) : 0;

                        salesPerformanceDataList.Add(salesPerformanceDashbordListDC);
                    }
                }
                return salesPerformanceDataList;
            }
            catch
            {
                return null;
            }
        }
        [HttpGet]
        [Route("GetItemIncentiveClassificationMasters")]//Back end Api
        public List<ClassificationMastersDc> GetItemIncentiveClassificationMasters()
        {
            List<ClassificationMastersDc> list = new List<ClassificationMastersDc>();
            using (var db = new AuthContext())
            {
                //IsSystem=0 and
                var query = @"SELECT MIN(id) as Id, Classification
                              FROM ItemIncentiveClassificationMasters where  IsActive=1 and IsDeleted=0
                              GROUP BY Classification
                              ORDER BY MIN(id)";
                list = db.Database.SqlQuery<ClassificationMastersDc>(query).ToList();
            }
            return list;
        }
        [HttpGet]
        [Route("GetSalesIncentiveClassificationStoreWise")]//mobile App Api
        public List<ClassificationMastersDc> GetSalesIncentiveClassificationStoreWise(int PeopleId)
        {
            List<ClassificationMastersDc> list = new List<ClassificationMastersDc>();
            using (var db = new AuthContext())
            {
                var peopleId = new SqlParameter("peopleid", PeopleId);
                list = db.Database.SqlQuery<ClassificationMastersDc>("EXEC GetSalesIncentiveClassificationStoreWise @peopleid", peopleId).ToList();
            }
            return list;
        }
        #region SalesDashboard
        [HttpPost]
        [Route("GetSalesPerformanceDashbord")]
        [AllowAnonymous]
        public APIResponse GetSalesPerformanceDashbordAsync(SalesPerformanceDashbordFilter obj)
        {
            try
            {
                obj.LastDate = obj.LastDate.AddDays(1).AddMilliseconds(-1);
                List<ExecutiveDatas> executiveDatas = new List<ExecutiveDatas>();
                SalesPerformanceDashbordExecDC salesPerformanceDashbordExecDC = new SalesPerformanceDashbordExecDC();
                List<ActualRouteCustomerDC> ActualRouteCustomers = new List<ActualRouteCustomerDC>();
                List<SalesPerformanceDashbordListDC> salesPerformanceDashbordListDCs = new List<SalesPerformanceDashbordListDC>();
                List<PerformanceDashBoardData> performanceDashBoardDataList = new List<PerformanceDashBoardData>();
                MongoHelper<ExecutiveBeats> mongoHelperBeat = new MongoHelper<ExecutiveBeats>();
                MongoHelper<DashBoardColourCode> mongoHelperColourCode = new MongoHelper<DashBoardColourCode>();
                AngularJSAuthentication.API.Helper.Elastic.ElasticHelper elasticHelper = new AngularJSAuthentication.API.Helper.Elastic.ElasticHelper();

                using (var context = new AuthContext())
                {

                    var StoreData = context.StoreDB.Where(x => obj.StoreIds.Contains((int)x.Id)).ToList();
                    var ColourCode = mongoHelperColourCode.GetAll().ToList();
                    var PerfactLineItem = context.StoreProductiveOrders.Select(x => x.PerfactLineItem).FirstOrDefault();

                    #region ElasticOrderData

                    string sDate = obj.FirstDate.Date.ToString("yyyy-MM-dd");
                    string eDate = obj.LastDate.Date.AddDays(1).ToString("yyyy-MM-dd");
                    var warehouseid = string.Join(",", obj.WarehouseIds);
                    var storeid = string.Join(",", obj.StoreIds);
                    var query = $"SELECT executiveid,custid,orderid,whid,ordqty,price,storeid,createddate,isnull(dispatchqty,0) dispatchqty,clustername,whname,cityname,brandid from  {platformIdxName} " +
                        $"where  createddate>='" + sDate + "' and createddate<'" + eDate + "' and whid in (" + warehouseid + ") and storeid in (" + storeid + ") and status not in ('Payment Pending','Inactive','Failed','Dummy Order Cancelled','Order Canceled')";

                    List<DataContracts.External.MobileExecutiveDC.OrderElasticDataDC> OrderMasters = elasticHelper.GetList(query);
                    #endregion
                    #region B

                    List<int> executiveids = new List<int>();
                    if (OrderMasters.Count > 0 && OrderMasters.Any())
                    {
                        executiveids = OrderMasters.Where(x => x.executiveid > 0).GroupBy(x => x.executiveid).Select(x => x.Key).ToList();
                    }
                    var ExecutiveBeats = mongoHelperBeat.GetWithProjection(x => x.AssignmentDate >= obj.FirstDate && x.AssignmentDate <= obj.LastDate,
                                            x => new ExecutiveBeats
                                            {
                                                PeopleId = x.PeopleId,
                                                AssignmentDate = x.AssignmentDate,
                                                ActualRoutes = x.ActualRoutes,
                                                PlannedRoutes = x.PlannedRoutes
                                            }, "ExecutiveBeats").ToList();
                    var BeatExecutiveIds = ExecutiveBeats.Where(x => !executiveids.Contains(x.PeopleId) && x.ActualRoutes != null && x.ActualRoutes.Any(y => obj.WarehouseIds.Contains((int)y.WarehouseId))).Select(x => x.PeopleId).Distinct().ToList();

                    if (BeatExecutiveIds.Count > 0)
                    {
                        executiveids.AddRange(BeatExecutiveIds);
                    }
                    #region ExecutiveData

                    var waredt = new DataTable();
                    waredt.Columns.Add("intValue");
                    foreach (var wareid in obj.WarehouseIds)
                    {
                        var dr = waredt.NewRow();
                        dr["intValue"] = wareid;
                        waredt.Rows.Add(dr);
                    }
                    var WareIds = new SqlParameter("@WarehouseIds", waredt);
                    WareIds.SqlDbType = SqlDbType.Structured;
                    WareIds.TypeName = "dbo.intValues";

                    var Storedt = new DataTable();
                    Storedt.Columns.Add("intValue");
                    foreach (var strid in obj.StoreIds)
                    {
                        var dr = Storedt.NewRow();
                        dr["intValue"] = strid;
                        Storedt.Rows.Add(dr);
                    }
                    var strids = new SqlParameter("@StoreIds", Storedt);
                    strids.SqlDbType = SqlDbType.Structured;
                    strids.TypeName = "dbo.intValues";

                    var AllExecutiveIds = context.Database.SqlQuery<int>("GetWarehoseStoreExecutive @StoreIds,@WarehouseIds", strids, WareIds).ToList();


                    if (AllExecutiveIds != null && AllExecutiveIds.Any() && AllExecutiveIds.Any(x => !executiveids.Contains(x)))
                        executiveids.AddRange(AllExecutiveIds.Where(x => !executiveids.Contains(x)));

                    //executiveids = executiveids.Distinct().ToList();

                    WareIds = new SqlParameter("@WarehouseIds", waredt);
                    WareIds.SqlDbType = SqlDbType.Structured;
                    WareIds.TypeName = "dbo.intValues";

                    strids = new SqlParameter("@StoreIds", Storedt);
                    strids.SqlDbType = SqlDbType.Structured;
                    strids.TypeName = "dbo.intValues";

                    var peopleids = new DataTable();
                    peopleids.Columns.Add("intValue");
                    foreach (var execid in executiveids)
                    {
                        var dr = peopleids.NewRow();
                        dr["intValue"] = execid;
                        peopleids.Rows.Add(dr);
                    }
                    var execids = new SqlParameter("@PeopleIds", peopleids);
                    execids.SqlDbType = SqlDbType.Structured;
                    execids.TypeName = "dbo.intValues";

                    executiveDatas = context.Database.SqlQuery<ExecutiveDatas>("GetExecutiveName @PeopleIds,@StoreIds,@WarehouseIds", execids, strids, WareIds).ToList();

                    #endregion

                    var dates = new List<DateTime>();

                    for (var dt = obj.FirstDate; dt <= obj.LastDate; dt = dt.AddDays(1))
                    {
                        dates.Add(dt);
                    }

                    foreach (var executiveid in executiveids)
                    {
                        SalesPerformanceDashbordListDC salesPerformanceDashbordListDC = new SalesPerformanceDashbordListDC();
                        salesPerformanceDashbordListDC.ExecutiveId = executiveid;
                        salesPerformanceDashbordListDC.ExecutiveName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.DisplayName).FirstOrDefault();
                        salesPerformanceDashbordListDC.CityName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.city).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseId = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.WarehouseId).FirstOrDefault();
                        salesPerformanceDashbordListDC.StoreName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.StoreName).FirstOrDefault();
                        salesPerformanceDashbordListDC.ClusterName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.ClusterName).FirstOrDefault();
                        salesPerformanceDashbordListDC.WarehouseName = executiveDatas.Where(x => x.ExecutiveId == executiveid).Select(x => x.WarehouseName).FirstOrDefault();

                        var PlannedRoutes = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.PlannedRoutes != null).SelectMany(x => x.PlannedRoutes).ToList();
                        var PlannedRoutess = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.PlannedRoutes != null).Select(x => new { x.AssignmentDate, x.PlannedRoutes }).ToList();

                        var orderdetail = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.executiveid == executiveid).ToList();

                        if (PlannedRoutes != null && PlannedRoutes.Any())
                        {

                            var ActualData = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.ActualRoutes != null).SelectMany(x => x.ActualRoutes).ToList();
                            var ActualDatass = ExecutiveBeats.Where(x => x.PeopleId == executiveid && x.ActualRoutes != null).Select(x => new { x.AssignmentDate, x.ActualRoutes }).ToList();
                            foreach (var AD in ActualDatass)
                            {
                                var res = AD.ActualRoutes.Select(x => new ActualRouteCustomerDC
                                {
                                    CreatedDate = AD.AssignmentDate,
                                    ExecutiveId = executiveid,
                                    CustomerId = x.CustomerId,
                                    IsVisited = x.IsVisited,
                                    IsBeat = x.IsBeat ?? false
                                });
                                ActualRouteCustomers.AddRange(res);
                            }


                            var ActualTimeSpendCustomer = ActualData != null && ActualData.Any() ?
                                     ActualData.Where(x => x.CustomerCheckInOutHistories != null && x.CustomerCheckInOutHistories.Any(y => y.CheckOut.HasValue)).GroupBy(x => x.CustomerId).Select(x =>
                                     new
                                     {
                                         Customer = x.Key,
                                         totaltime = x.SelectMany(y => y.CustomerCheckInOutHistories)
                                         .Where(y => y.CheckIn.HasValue && y.CheckOut.HasValue)
                                         .Sum(y => y.CheckOut.Value.Subtract(y.CheckIn.Value).TotalMilliseconds)
                                     }) : null;
                            double ActualTimeSpend = ActualTimeSpendCustomer != null && ActualTimeSpendCustomer.Any() ? Math.Round(Convert.ToDouble((ActualTimeSpendCustomer.Sum(y => y.totaltime) / 3600000) / ActualTimeSpendCustomer.Count()), 2) : 0;
                            salesPerformanceDashbordListDC.ActualTimeSpend = ActualTimeSpend;

                            var AllCustids = new List<int>();
                            var BeatCustids = new List<int>();
                            var ExtraCustids = new List<int>();
                            //List<int> PRCustIds = new List<int>();

                            double BeatSales = 0;
                            double ExtraSales = 0;
                            salesPerformanceDashbordListDC.ProductiveCall = 0;

                            foreach (var dt in dates)
                            {
                                if (PlannedRoutess.All(y => y.AssignmentDate.Date != dt.Date))
                                {
                                    var pr = new
                                    {
                                        AssignmentDate = dt.Date,
                                        PlannedRoutes = new List<PlannedRoute>()
                                    };
                                    PlannedRoutess.Add(pr);
                                }
                            }

                            foreach (var pd in PlannedRoutess)
                            {
                                var planCustId = pd.PlannedRoutes.Where(x => x.ExecutiveId == executiveid).Select(x => x.CustomerId).Distinct().ToList();
                                var extraCust = ActualRouteCustomers.Where(x => !planCustId.Contains(x.CustomerId) && x.ExecutiveId == executiveid && x.IsBeat == false).Select(x => x.CustomerId).Distinct().ToList();
                                var beatsales = orderdetail.Where(x => planCustId.Contains(x.custid) && x.createddate.Date == pd.AssignmentDate.Date).Sum(x => x.ordqty * x.price);
                                if (beatsales > 0) BeatSales = BeatSales + beatsales;
                                var extrasales = orderdetail.Where(x => !planCustId.Contains(x.custid) && x.createddate.Date == pd.AssignmentDate.Date).Sum(x => x.ordqty * x.price);
                                if (extrasales > 0) ExtraSales = ExtraSales + extrasales;
                                //PRCustIds = planCustId.ToList();
                                //if (extraCust.Count > 0 && extraCust.Any()) PRCustIds.AddRange(extraCust);
                                salesPerformanceDashbordListDC.ProductiveCall += OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.createddate.Date == pd.AssignmentDate.Date && x.executiveid == executiveid).Select(x => x.custid).Distinct().Count();
                                var CustIds = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.createddate.Date == pd.AssignmentDate.Date && x.executiveid == executiveid).Select(x => x.custid).Distinct().ToList();
                                if (CustIds.Any()) AllCustids.AddRange(CustIds.Where(x => !AllCustids.Contains(x)).ToList());
                            }

                            salesPerformanceDashbordListDC.BeatSales = BeatSales;
                            salesPerformanceDashbordListDC.Sales = Math.Round(BeatSales + ExtraSales);
                            var SalesbeatPercent = salesPerformanceDashbordListDC.Sales > 0 ? (Math.Round(BeatSales) / salesPerformanceDashbordListDC.Sales) * 100 : 0;
                            salesPerformanceDashbordListDC.SalesColour = ColourCode.Where(x => SalesbeatPercent > 0 && x.SalesFrom <= SalesbeatPercent && x.SalesTo >= SalesbeatPercent).Select(x => x.Colour).FirstOrDefault();
                            salesPerformanceDashbordListDC.BeatVisitPercent = Math.Round((Convert.ToDouble(ActualData.Where(x => x.IsBeat == true).Select(x => x.CustomerId).Distinct().Count()) / PlannedRoutes.Select(x => x.CustomerId).Distinct().Count()) * 100, 2);

                            var BeatTCCount = ActualData.Where(x => x.IsBeat == true).Count();
                            salesPerformanceDashbordListDC.BeatTC = BeatTCCount;
                            salesPerformanceDashbordListDC.TC = ActualData.Count();
                            var TCColourPercent = salesPerformanceDashbordListDC.TC > 0 ? Math.Round((Convert.ToDouble(BeatTCCount) / salesPerformanceDashbordListDC.TC) * 100) : 0;
                            salesPerformanceDashbordListDC.TCColour = ColourCode.Where(x => TCColourPercent > 0 && x.TCFrom <= TCColourPercent && x.TCTo >= TCColourPercent).Select(x => x.Colour).FirstOrDefault();


                            var BeatPCCount = orderdetail.Where(x => BeatCustids.Contains(x.custid)).Select(x => x.custid).Distinct().Count();
                            var BeatPCPercent = salesPerformanceDashbordListDC.ProductiveCall > 0 ? Math.Round((Convert.ToDouble(BeatPCCount) / salesPerformanceDashbordListDC.ProductiveCall) * 100) : 0;
                            salesPerformanceDashbordListDC.PCColour = ColourCode.Where(x => BeatPCPercent > 0 && x.PCFrom <= BeatPCPercent && x.PCTo >= BeatPCPercent).Select(x => x.Colour).FirstOrDefault();
                            salesPerformanceDashbordListDC.BeatPC = BeatPCCount;

                            var orderdetailId = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.orderid).Count();
                            var TotalOrderId = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.orderid).Distinct().Count();
                            salesPerformanceDashbordListDC.AvgLineItem = salesPerformanceDashbordListDC.Sales > 0 ? Math.Round((Convert.ToDouble(orderdetailId) / TotalOrderId), 2) : 0;
                            salesPerformanceDashbordListDC.ActiveRetailer = AllCustids.Distinct().Count();
                            salesPerformanceDashbordListDC.Range = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.brandid).Distinct().Count();

                            var LineItemCount = orderdetail.GroupBy(x => x.orderid).Select(x => new { OrderId = x.Key, count = x.Count() });
                            salesPerformanceDashbordListDC.PerfactOrder = LineItemCount.Where(x => x.count >= PerfactLineItem).Count();

                            salesPerformanceDashbordListDC.Dispatch = Math.Round(orderdetail.Sum(x => x.dispatchqty * x.price));
                            if (orderdetail.Count > 0)
                            {
                                var StoreIds = orderdetail.Where(x => AllCustids.Contains(x.custid)).Select(x => x.storeid).Distinct().ToList();
                                salesPerformanceDashbordListDC.StoreName = string.Join(",", StoreData.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).ToList());
                                salesPerformanceDashbordListDC.ClusterName = string.Join(",", orderdetail.Select(x => x.clustername).Distinct().ToList());
                                salesPerformanceDashbordListDC.CityName = salesPerformanceDashbordListDC.CityName ?? orderdetail.Where(x => x.cityname != null).Select(x => x.cityname).FirstOrDefault();
                                salesPerformanceDashbordListDC.WarehouseName = salesPerformanceDashbordListDC.WarehouseName ?? orderdetail.Where(x => AllCustids.Contains(x.custid) && x.whname != null).Select(x => x.whname).FirstOrDefault();
                            }
                        }

                        else if (orderdetail.Count > 0)
                        {
                            salesPerformanceDashbordListDC.Sales = Math.Round(orderdetail.Sum(x => x.ordqty * x.price));
                            salesPerformanceDashbordListDC.ProductiveCall = OrderMasters.Where(x => obj.StoreIds.Contains((int)x.storeid) && x.executiveid == executiveid).Select(x => x.custid).Distinct().Count();
                            var StoreIds = orderdetail.Select(x => x.storeid).Distinct().ToList();
                            salesPerformanceDashbordListDC.StoreName = string.Join(",", StoreData.Where(x => StoreIds.Contains(x.Id)).Select(x => x.Name).ToList());
                            salesPerformanceDashbordListDC.ClusterName = string.Join(",", orderdetail.Select(x => x.clustername).Distinct().ToList());
                            salesPerformanceDashbordListDC.CityName = salesPerformanceDashbordListDC.CityName ?? orderdetail.Where(x => x.cityname != null).Select(x => x.cityname).FirstOrDefault();
                            salesPerformanceDashbordListDC.WarehouseName = salesPerformanceDashbordListDC.WarehouseName ?? orderdetail.Where(x => x.whname != null).Select(x => x.whname).FirstOrDefault();

                        }
                        salesPerformanceDashbordListDCs.Add(salesPerformanceDashbordListDC);

                    }
                    if (obj.KeyWord != null && obj.KeyWord != "")
                    {
                        salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Where(x => x.ExecutiveName.Contains(obj.KeyWord)).ToList();
                        //salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Where(x => SqlMethods.Like(x.ExecutiveName, "%" + obj.KeyWord + "%")).ToList();
                    }
                    salesPerformanceDashbordExecDC.salesPerformanceDashbordListDCs = salesPerformanceDashbordListDCs.Skip(obj.Skip).Take(obj.Take).ToList();
                    salesPerformanceDashbordExecDC.TotalRecords = salesPerformanceDashbordListDCs.Count();
                    if (obj.WarehouseData)
                    {
                        salesPerformanceDashbordExecDC.WarehouseDataList = WarehouseDashboardDataAsync(obj.WarehouseIds, salesPerformanceDashbordListDCs, ColourCode);
                        //return new APIResponse { Status = true, Data = WarehouseData };
                    }
                    #endregion
                }
                return new APIResponse { Status = true, Data = salesPerformanceDashbordExecDC };
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Data = ex.Message };
            }
        }

        #endregion

        #region YesterdayJob 
        [Route("YesterdayBeatDSRJob")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<SalesDashboardTodayMTDData> YesterdayBeatDSRJob()
        {
            SalesDashboardTodayMTDData mongoObj = new SalesDashboardTodayMTDData();
            long? storeId = 0;

            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DashboardDc dash = new DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var Yesterday = DateTime.Now.AddDays(-1).Date;
            //var today = temp;
            //var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
            //var YesterdayBeat = mongoDbHelper.Select(x => x.PeopleId == PeopleId && x.AssignmentDate == Yesterday).FirstOrDefault();
            var YesterdayAllBeat = mongoDbHelper.Select(x => x.AssignmentDate == Yesterday).ToList();

            //---- get dashboard data from mongo---


            using (var Context = new AuthContext())
            {
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var ExecutiveDatalist = (from e in Context.ClusterStoreExecutives
                                         join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                                         join ch in Context.ChannelMasters on e.ChannelMasterId equals ch.ChannelMasterId
                                         where e.IsActive == true && e.IsDeleted == false && ch.Active && !ch.Deleted
                                         select new
                                         {
                                             p.PeopleID,
                                             p.WarehouseId,
                                             ch.ChannelMasterId,
                                             ch.ChannelType
                                         }).Distinct().ToList();

                foreach (var data in ExecutiveDatalist)
                {
                    BeatCustomerDc Beat = new BeatCustomerDc();

                    //Beat.YesterdayBeatCustomerIds = YesterdayBeat != null && YesterdayBeat.PlannedRoutes != null && YesterdayBeat.PlannedRoutes.Any() ? YesterdayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();
                    var planroute = YesterdayAllBeat.Where(x => x.PeopleId == data.PeopleID).FirstOrDefault();
                    Beat.YesterdayBeatCustomerIds = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(y => new ExecutiveBeatCustomerDc { Customerid = y.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                    DataTable IdDt = new DataTable();
                    List<int> ActualCustomerVisited = new List<int>();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");

                    DataTable VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt.Columns.Add("IntValue");

                    if (Beat.YesterdayBeatCustomerIds != null && Beat.YesterdayBeatCustomerIds.Any() && Beat.YesterdayBeatCustomerIds.Count > 0)
                    {
                        foreach (var id in Beat.YesterdayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }
                    //ActualCustomerVisited = YesterdayBeat != null && YesterdayBeat.ActualRoutes != null && YesterdayBeat.ActualRoutes.Any() ? YesterdayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                    ActualCustomerVisited = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Select(y => y.CustomerId).ToList() : new List<int>();

                    if (IdDt == null)
                    {
                        IdDt = new DataTable();
                        IdDt.Columns.Add("IntValue");
                    }
                    var cmd = Context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 1200;
                    cmd.CommandText = "[dbo].[YesterdayBeatDSRJob]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var param4 = new SqlParameter("PersonId", data.PeopleID);
                    var param5 = new SqlParameter("CustIdDs", IdDt);
                    var param8 = new SqlParameter("WarehouseId", data.WarehouseId);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);
                    cmd.Parameters.Add(param8);


                    var reader = cmd.ExecuteReader();
                    dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                    if (dashboardDetail != null)
                    {
                        // YesterdayDashboardDcsList ToObj = new YesterdayDashboardDcsList();
                        mongoObj.BeatSales = dashboardDetail.BeatSales;
                        mongoObj.ExtraSales = dashboardDetail.ExtraSales;
                        mongoObj.BeatOrder = dashboardDetail.BeatOrder;
                        mongoObj.TotalSales = dashboardDetail.TotalSales;
                        mongoObj.ProductiveCall = dashboardDetail.ProductiveCall;
                        int SuccessPhoneOrder = 0;
                        if (planroute != null && planroute.PlannedRoutes.Count() > 0)
                        {
                            SuccessPhoneOrder = planroute.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                            mongoObj.VisitPlanned = planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                            mongoObj.TotalCall = planroute.PlannedRoutes.Where(y => y.IsVisited).Count();
                            mongoObj.OutletCoverage = (Convert.ToDouble(mongoObj.TotalCall) / mongoObj.VisitPlanned) * 100;
                            mongoObj.PhoneOrder = SuccessPhoneOrder;
                        }
                        else
                        {
                            mongoObj.VisitPlanned = 0;
                            mongoObj.TotalCall = 0;
                            mongoObj.OutletCoverage = 0;
                        }
                        if (mongoObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                        {
                            mongoObj.StrikeRate = (Convert.ToDouble(mongoObj.TodayProductiveCall) / (mongoObj.TotalCall + SuccessPhoneOrder)) * 100;
                        }
                        var planCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                        mongoObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                        mongoObj.ExtraCall = dashboardDetail.ExtraCall;
                        mongoObj.ExtraOrder = dashboardDetail.ExtraOrder;
                        mongoObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                        mongoObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                        mongoObj.Eco = dashboardDetail.Eco;
                        mongoObj.AvgLineItem = dashboardDetail.AvgLineItem;
                        mongoObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                    }

                    mongoObj.WarehouseId = data.WarehouseId;
                    mongoObj.SalesPersonId = data.PeopleID;
                    mongoObj.ChannelMatserId = data.ChannelMasterId;
                    mongoObj.ChannelName = data.ChannelType;
                    mongoObj.SalesPersonId = data.PeopleID;
                    mongoObj.StoreId = Convert.ToInt32(storeId);
                    mongoObj.TodayTarget = planroute != null ? planroute.TodayTarget : 0;
                    //mongoObj.PerfactOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.TodayPerfactOrder : 0;
                    //mongoObj.TodaySupperOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.TodaySupperOrder : 0;
                    //mongoObj.PhoneOrder = dash.TodayDashboardDcs != null ? dash.TodayDashboardDcs.PhoneOrder : 0;
                    mongoObj.CheckIn = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Max(x => x.CheckOut) : null;
                    var res = InsertDashboardJobinMongo(mongoObj, Context);
                }
            }
            return mongoObj;
        }

        [Route("DigitalSalesDSRJob")]
        [HttpGet]
        [AllowAnonymous]
        public async Task<bool> DigitalSalesDSRJob()
        {
            DigitalSalesBeatDSR mongoObj = new DigitalSalesBeatDSR();
            long? storeId = 0;
            bool flag = false;
            DashboardDetailDc dashboardDetail = new DashboardDetailDc();
            BeatsManager manager = new BeatsManager();
            DashboardDc dash = new DashboardDc();

            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            var YesterDay = DateTime.Now.AddDays(-1).Date;

            var YesterDayAllBeat = mongoDbHelper.Select(x => x.AssignmentDate == YesterDay).ToList();

            using (var Context = new AuthContext())
            {
                if (Context.Database.Connection.State != ConnectionState.Open)
                    Context.Database.Connection.Open();

                var ExecutiveDatalist = Context.Database.SqlQuery<PeopleData>("GetDigitalExecutiveList").ToList();
                var PeopleIDs = ExecutiveDatalist.Select(x => x.PeopleID).Distinct().ToList();
                var StoreData = Context.ClusterStoreExecutives.Where(x => x.IsActive == true && x.IsDeleted == false && PeopleIDs.Contains(x.ExecutiveId))
                                .Select(x => new { x.ExecutiveId, x.StoreId,x.ClusterId }).ToList();

                foreach (var people in ExecutiveDatalist)
                {
                    var planroute = YesterDayAllBeat.Where(x => x.PeopleId == people.PeopleID).FirstOrDefault();
                    var BeatCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(y => new ExecutiveBeatCustomerDc { Customerid = y.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                    DataTable IdDt = new DataTable();
                    List<int> ActualCustomerVisited = new List<int>();
                    IdDt = new DataTable();
                    IdDt.Columns.Add("IntValue");

                    DataTable VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt = new DataTable();
                    VisitedCustomersdt.Columns.Add("IntValue");

                    if (BeatCustomers != null && BeatCustomers.Any() && BeatCustomers.Count > 0)
                    {
                        foreach (var id in BeatCustomers.Select(x => x.Customerid).Distinct())
                        {
                            int cid = id;
                            var dr = IdDt.NewRow();
                            dr["IntValue"] = cid;
                            IdDt.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        IdDt = null;
                    }
                    ActualCustomerVisited = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Select(y => y.CustomerId).ToList() : new List<int>();

                    if (IdDt == null)
                    {
                        IdDt = new DataTable();
                        IdDt.Columns.Add("IntValue");
                    }
                    var cmd = Context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 1200;
                    cmd.CommandText = "[dbo].[DigitalSalesBeatDSRJob]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var param4 = new SqlParameter("PersonId", people.PeopleID);
                    var param5 = new SqlParameter("CustIdDs", IdDt);
                    cmd.Parameters.Add(param4);
                    cmd.Parameters.Add(param5);


                    var reader = cmd.ExecuteReader();
                    dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                    if (dashboardDetail != null)
                    {
                        mongoObj.BeatSales = dashboardDetail.BeatSales;
                        mongoObj.ExtraSales = dashboardDetail.ExtraSales;
                        mongoObj.BeatOrder = dashboardDetail.BeatOrder;
                        mongoObj.TotalSales = dashboardDetail.TotalSales;
                        mongoObj.ProductiveCall = dashboardDetail.ProductiveCall;
                        int SuccessPhoneOrder = 0;
                        if (planroute != null && planroute.PlannedRoutes.Count() > 0)
                        {
                            SuccessPhoneOrder = planroute.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                            mongoObj.VisitPlanned = planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                            mongoObj.TotalCall = planroute.PlannedRoutes.Where(y => y.IsVisited).Count();
                            mongoObj.OutletCoverage = (Convert.ToDouble(mongoObj.TotalCall) / mongoObj.VisitPlanned) * 100;
                            mongoObj.PhoneOrder = SuccessPhoneOrder;
                        }
                        else
                        {
                            mongoObj.VisitPlanned = 0;
                            mongoObj.TotalCall = 0;
                            mongoObj.OutletCoverage = 0;
                        }
                        if (mongoObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                        {
                            mongoObj.StrikeRate = (Convert.ToDouble(mongoObj.ProductiveCall) / (mongoObj.TotalCall + SuccessPhoneOrder)) * 100;
                        }
                        var planCustomers = planroute != null && planroute.PlannedRoutes != null && planroute.PlannedRoutes.Any() ? planroute.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                        mongoObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                        mongoObj.ExtraCall = dashboardDetail.ExtraCall;
                        mongoObj.ExtraOrder = dashboardDetail.ExtraOrder;
                        mongoObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                        mongoObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                        mongoObj.Eco = dashboardDetail.Eco;
                        mongoObj.AvgLineItem = dashboardDetail.AvgLineItem;
                        mongoObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                        mongoObj.WarehouseName = dashboardDetail.WarehouseName;
                    }

                    mongoObj.WarehouseId = people.WarehouseId;
                    mongoObj.SalesPersonId = people.PeopleID;
                    mongoObj.StoreIds = StoreData.Count>0 ? StoreData.Where(x=>x.ExecutiveId == people.PeopleID).Select(x=>x.StoreId).Distinct().ToList() : new List<long>();
                    mongoObj.ChannelMasterId = people.ChannelMasterId;
                    mongoObj.ChannelName = people.ChannelName;
                    mongoObj.TodayTarget = planroute != null ? planroute.TodayTarget : 0;
                    mongoObj.CheckIn = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Min(x => x.CheckIn) : null;
                    mongoObj.CheckOut = planroute != null && planroute.ActualRoutes != null && planroute.ActualRoutes.Any() ? planroute.ActualRoutes.Max(x => x.CheckOut) : null;
                    mongoObj.IsActive = true;
                    mongoObj.IsDelete = false;
                    mongoObj.CreatedDate = DateTime.Now.AddDays(-1);
                    mongoObj.ModifiedDate = DateTime.Now;

                    #region DataInsertInMongo

                    MongoDbHelper<DigitalSalesBeatDSR> DSRMongoHelper = new MongoDbHelper<DigitalSalesBeatDSR>();

                    var param1 = new SqlParameter("PeopleID", people.PeopleID);

                    var cmd1 = Context.Database.Connection.CreateCommand();
                    cmd1.CommandText = "[dbo].[SpPerformanceTarget]";
                    cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd1.Parameters.Add(param1);

                    var reader1 = cmd1.ExecuteReader();
                    var dd = ((IObjectContextAdapter)Context).ObjectContext.Translate<PerformanceTargetDc>(reader1).ToList();


                    //var WarehouseName = Context.Warehouses.FirstOrDefault(x => x.WarehouseId == obj.WarehouseId && x.active == true && x.Deleted == false).WarehouseName;
                    //long? storeId = Context.ClusterStoreExecutives.FirstOrDefault(x => x.ExecutiveId == obj.SalesPersonId && x.IsDeleted == false && x.IsActive == true)?.StoreId;
                    //var ClusterIds = Context.ClusterStoreExecutives.Where(x => x.ExecutiveId == obj.SalesPersonId && x.IsActive == true && x.IsDeleted == false).Select(x => x.ClusterId).Distinct().ToList();
                    //var ClusterNames = Context.Clusters.Where(x => ClusterIds.Contains(x.ClusterId)).Select(x => x.ClusterName).Distinct().ToList();

                    mongoObj.ClusterIds = StoreData.Count>0 ? string.Join(",", StoreData.Where(x => x.ExecutiveId == people.PeopleID).Select(x => x.ClusterId).Distinct().ToList()) : "";
                    mongoObj.ClusterName = null;
                    mongoObj.StoreId = 1;
                    mongoObj.StoreName = "All";
                    mongoObj.SalesPerson = people.DisplayName;
                    mongoObj.MtdMonthlyTarget = dd.Count > 0 ? dd.FirstOrDefault(x => x.Name == "Sales").NumPer : 0;

                    flag = DSRMongoHelper.Insert(mongoObj);

                    #endregion

                }
            }
            return flag;
        }
        #endregion


        #region Filter Api V2

        [Route("GetHighestSellingItemV2")]
        [HttpGet]
        public async Task<ItemListForAgent> GetHighestSellingItemV2(int PeopleId, int warehouseId, int skip, int take, string lang, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            ItemListForAgent ItemListForAgent = new ItemListForAgent();
            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<ItemDataDC>() };

            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

            using (var context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId && x.Active == true && x.Deleted == false);
                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any())
                {
                    var IdDt = new DataTable();
                    SqlParameter param = null;

                    IdDt = new DataTable();
                    IdDt.Columns.Add("categoryId");
                    IdDt.Columns.Add("companyId");
                    IdDt.Columns.Add("brandId");
                    foreach (var item in StoreCategorySubCategoryBrands)
                    {
                        var dr = IdDt.NewRow();
                        dr["categoryId"] = item.Categoryid;
                        dr["companyId"] = item.SubCategoryId;
                        dr["brandId"] = item.BrandId;
                        IdDt.Rows.Add(dr);
                    }
                    param = new SqlParameter("CatCompanyBrand", IdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.CatCompanyBrand";

                    var IdDt1 = new DataTable();
                    SqlParameter param1 = null;

                    IdDt1 = new DataTable();
                    IdDt1.Columns.Add("stringValue");
                    foreach (var item in IncentiveClassificationList)
                    {
                        var dr = IdDt1.NewRow();
                        dr["stringValue"] = item;
                        IdDt1.Rows.Add(dr);
                    }
                    param1 = new SqlParameter("Classification", IdDt1);
                    param1.SqlDbType = SqlDbType.Structured;
                    param1.TypeName = "dbo.stringValues";


                    //ItemListForAgent item = new ItemListForAgent();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandTimeout = 900;
                    cmd.CommandText = "[dbo].[GetHighestSellingItemNewV2]";
                    cmd.Parameters.Add(new SqlParameter("@WarehouseId", warehouseId));
                    cmd.Parameters.Add(new SqlParameter("@PeopleId", PeopleId));
                    cmd.Parameters.Add(new SqlParameter("@skip", skip));
                    cmd.Parameters.Add(new SqlParameter("@take", take));
                    cmd.Parameters.Add(param);
                    cmd.Parameters.Add(param1);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                    var reader = cmd.ExecuteReader();
                    var newdata = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<Itemdata>(reader).ToList();
                    var offerids = newdata.Where(x => x.OfferId > 0).Select(x => x.OfferId).Distinct().ToList();
                    var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                    List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                    if (newdata != null && newdata.Any())
                    {
                        ItemMasterManager itemMasterManager = new ItemMasterManager();
                        itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(warehouseId, newdata.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                    }
                    BackendOrderController backendOrderController = new BackendOrderController();
                    foreach (var it in newdata)
                    {

                        it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                        it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                        if (customerId > 0)
                        {
                            double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price,it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                            it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0,cprice);
                        }
                            

                        if (!it.OfferId.HasValue || it.OfferId.Value == 0)
                        {
                            it.IsOffer = false;
                        }
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;

                        if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                        {
                            if (it.OfferCategory == 1)
                            {
                                it.IsOffer = false;
                                it.OfferCategory = 0;
                            }
                        }


                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        if (ItemListForAgent.ItemMasters == null)
                        {
                            ItemListForAgent.ItemMasters = new List<Itemdata>();
                        }
                        try
                        {/// Dream Point Logic && Margin Point
                            if (!it.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point
                                int? MP, PP;
                                double xPoint = xPointValue * 10;
                                //salesman 0.2=(0.02 * 10=0.2)
                                if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = it.promoPerItems;
                                }
                                if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    it.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    it.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    it.dreamPoint = PP;
                                }
                                else
                                {
                                    it.dreamPoint = 0;
                                }

                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                            // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                            if (it.price > it.UnitPrice)
                            {
                                it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                            }
                            else
                            {
                                it.marginPoint = 0;
                            }

                        }
                        catch { }
                        if (lang.Trim() == "hi")
                        {
                            if (!string.IsNullOrEmpty(it.HindiName))
                            {
                                if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                                }
                                else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                                }

                                else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                                {
                                    it.itemname = it.HindiName; //item display name
                                }
                                else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                                {
                                    it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                                }
                            }
                        }

                        ItemListForAgent.ItemMasters.Add(it);
                    }
                    if (ItemListForAgent.ItemMasters != null && ItemListForAgent.ItemMasters.Any())
                    {
                        RetailerAppManager retailerAppManager = new RetailerAppManager();
                        var itemMultiMRPIds = ItemListForAgent.ItemMasters.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                        List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                        ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, warehouseId, context);

                        foreach (var itm in ItemListForAgent.ItemMasters)
                        {
                            if (itm.price > itm.UnitPrice)
                            {
                                itm.marginPoint = itm.UnitPrice > 0 ? (((itm.price - itm.UnitPrice) * 100) / itm.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                                if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == itm.ItemMultiMRPId && x.PTR > 0))
                                {
                                    var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == itm.ItemMultiMRPId);
                                    var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                    var UPMRPMargin = itm.marginPoint.Value;
                                    if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                        itm.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                                }
                            }
                            else
                            {
                                itm.marginPoint = 0;
                            }
                        }
                        ItemListForAgent.Message = "Success";
                        ItemListForAgent.Status = true;
                        ItemListForAgent.ItemMasters.Where(x => !x.marginPoint.HasValue).ToList().ForEach(x => x.marginPoint = 0);
                        ItemListForAgent.ItemMasters = ItemListForAgent.ItemMasters.OrderByDescending(x => x.marginPoint).ToList();
                        return ItemListForAgent;
                    }
                    else
                    {
                        ItemListForAgent.Message = "Item Not found";
                        ItemListForAgent.Status = false;
                    }
                }
                return ItemListForAgent;
            }

        }

        [Route("GetItemClassificationV2")]
        [HttpGet]
        public async Task<ItemResponseDc> GetItemClassificationV2(int PeopleId, int customerId, int warehouseId, string lang, int skip, int take, string Classification, string IncentiveClassifications)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            var itemResponseDc = new ItemResponseDc { TotalItem = 0, ItemDataDCs = new List<ItemDataDC>() };
            using (var context = new AuthContext())
            {

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);

                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, warehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                List<ItemDataDC> ItemDataDCs = new List<ItemDataDC>();
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId);

                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();


                var catsubcatDt = new DataTable();
                SqlParameter categorysubcatParam = null;

                catsubcatDt = new DataTable();
                catsubcatDt.Columns.Add("categoryId");
                catsubcatDt.Columns.Add("companyId");
                catsubcatDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = catsubcatDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    catsubcatDt.Rows.Add(dr);
                }

                categorysubcatParam = new SqlParameter("CatCompanyBrand", catsubcatDt);
                categorysubcatParam.SqlDbType = SqlDbType.Structured;
                categorysubcatParam.TypeName = "dbo.CatCompanyBrand";

                var IdDt1 = new DataTable();
                SqlParameter param1 = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var item in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = item;
                    IdDt1.Rows.Add(dr);
                }
                param1 = new SqlParameter("IncentiveClassification", IdDt1);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.stringValues";

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetItemClassificationForSalesV2]";
                cmd.Parameters.Add(new SqlParameter("@warehouseId", warehouseId));
                cmd.Parameters.Add(new SqlParameter("@CustomerId", customerId));
                cmd.Parameters.Add(new SqlParameter("@Classification", Classification));
                cmd.Parameters.Add(categorysubcatParam);
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(new SqlParameter("@Skip", skip));
                cmd.Parameters.Add(new SqlParameter("@Take", take));
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                // Run the sproc
                var reader = cmd.ExecuteReader();
                var ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<ItemDataDC>(reader).ToList();
                reader.NextResult();
                if (reader.Read())
                {
                    itemResponseDc.TotalItem = Convert.ToInt32(reader["itemCount"]);
                }


                itemResponseDc.ItemDataDCs = await ItemAdditionalFilters(warehouseId, ItemData, context, lang, customerId);

            }

            return itemResponseDc;
        }

        [Route("GetProductCatalogItemsV2")]
        [HttpGet]
        public async Task<List<CatalogItemListDc>> GetProductCatalogItemsV2(int PeopleId, int WarehouseId, int SectionId, string lang, int skip, int take, string IncentiveClassifications, int customerId = 0)
        {
            List<string> IncentiveClassificationList = IncentiveClassifications != null && IncentiveClassifications != "" ? IncentiveClassifications.Split(',').ToList() : new List<string>();
            List<CatalogItemListDc> ItemDataDCs = new List<CatalogItemListDc>();
            using (AuthContext context = new AuthContext())
            {
                var ActiveCustomer = context.Customers.FirstOrDefault(x => x.CustomerId == customerId && x.Active == true && x.Deleted == false);
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                // int take = 20, skip = 0;

                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = GetCatSubCatwithStores(PeopleId);
                #region block Barnd
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                var custtype = 4;
                var blockBarnds = retailerAppManager.GetBlockBrand(custtype, 2, WarehouseId);
                if (blockBarnds != null && blockBarnds.Any())
                {
                    StoreCategorySubCategoryBrands = StoreCategorySubCategoryBrands.Where(x => !(blockBarnds.Select(y => y.CatId + " " + y.SubCatId + " " + y.SubSubCatId).Contains(x.Categoryid + " " + x.SubCategoryId + " " + x.BrandId))).ToList();
                }
                #endregion

                var IdDt1 = new DataTable();
                SqlParameter param = null;

                IdDt1 = new DataTable();
                IdDt1.Columns.Add("stringValue");
                foreach (var item in IncentiveClassificationList)
                {
                    var dr = IdDt1.NewRow();
                    dr["stringValue"] = item;
                    IdDt1.Rows.Add(dr);
                }
                param = new SqlParameter("IncentiveClassification", IdDt1);
                param.SqlDbType = SqlDbType.Structured;
                param.TypeName = "dbo.stringValues";

                var IdDt = new DataTable();
                IdDt = new DataTable();
                IdDt.Columns.Add("categoryId");
                IdDt.Columns.Add("companyId");
                IdDt.Columns.Add("brandId");
                foreach (var item in StoreCategorySubCategoryBrands)
                {
                    var dr = IdDt.NewRow();
                    dr["categoryId"] = item.Categoryid;
                    dr["companyId"] = item.SubCategoryId;
                    dr["brandId"] = item.BrandId;
                    IdDt.Rows.Add(dr);
                }
                var param3 = new SqlParameter("CatCompanyBrand", IdDt);
                param3.SqlDbType = SqlDbType.Structured;
                param3.TypeName = "dbo.CatCompanyBrand";

                var param1 = new SqlParameter("WarehouseId", WarehouseId);
                var param2 = new SqlParameter("SectionId", SectionId);
                var param4 = new SqlParameter("skip", skip);
                var param5 = new SqlParameter("take", take);

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetProductCatalogItemsV2]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(param1);
                cmd.Parameters.Add(param2);
                cmd.Parameters.Add(param3);
                cmd.Parameters.Add(param4);
                cmd.Parameters.Add(param5);
                cmd.Parameters.Add(param);
                var reader = cmd.ExecuteReader();
                List<CatalogItemListDc> ItemData = ((IObjectContextAdapter)context)
                .ObjectContext
                .Translate<CatalogItemListDc>(reader).ToList();
                reader.NextResult();
                var offerids = ItemData.Where(x => x.OfferId > 0 && (x.ItemAppType == 0 || x.ItemAppType == 1)).Select(x => x.OfferId).Distinct().ToList();
                var activeOfferids = offerids != null && offerids.Any() ? context.OfferDb.Where(x => offerids.Contains(x.OfferId) && x.IsActive && !x.IsDeleted && (x.OfferAppType == "Sales App" || x.OfferAppType == "Both")).Select(x => x.OfferId).ToList() : new List<int>();


                List<ItemIncentiveClassification> itemsIncentiveClassification = new List<ItemIncentiveClassification>();

                if (ItemData != null && ItemData.Any())
                {
                    ItemMasterManager itemMasterManager = new ItemMasterManager();
                    itemsIncentiveClassification = await itemMasterManager.GetItemIncentiveClassification(WarehouseId, ItemData.Select(s => s.ItemMultiMRPId).Distinct().ToList());

                }

                BackendOrderController backendOrderController = new BackendOrderController();
                foreach (var it in ItemData)
                {
                    it.Classification = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.Classification;
                    it.BackgroundRgbColor = itemsIncentiveClassification.FirstOrDefault(s => s.ItemMultiMrpId == it.ItemMultiMRPId)?.BackgroundRgbColor;
                    if (customerId > 0)
                    {
                        double cprice = backendOrderController.GetConsumerPrice(context, it.ItemMultiMRPId, it.price,it.UnitPrice, Convert.ToInt16(ActiveCustomer.Warehouseid));
                        it.UnitPrice = SkCustomerType.GetPriceFromType(ActiveCustomer.CustomerType, it.UnitPrice, it.WholeSalePrice ?? 0, it.TradePrice ?? 0,cprice);
                    }
                        
                    //Condition for offer end
                    if (!(it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now))
                    {
                        if (it.OfferCategory == 2)
                        {
                            it.IsOffer = false;
                            it.FlashDealSpecialPrice = 0;
                            it.OfferCategory = 0;
                        }
                        else if (it.OfferCategory == 1)
                        {
                            it.IsOffer = false;
                            it.OfferCategory = 0;
                        }

                    }
                    else if ((it.OfferStartTime <= DateTime.Now && it.OfferEndTime >= DateTime.Now) && it.OfferCategory == 2)
                    {
                        it.IsOffer = false;
                        it.FlashDealSpecialPrice = 0;
                        it.OfferCategory = 0;

                    }

                    if (it.OfferCategory == 1)
                    {
                        if (activeOfferids.Any() && activeOfferids.Any(x => x == it.OfferId) && it.IsOffer)
                            it.IsOffer = true;
                        else
                            it.IsOffer = false;
                    }

                    try
                    {
                        if (!it.IsOffer)
                        {
                            /// Dream Point Logic && Margin Point
                            int? MP, PP;
                            double xPoint = xPointValue * 10;
                            //Customer (0.2 * 10=1)
                            if (it.promoPerItems.Equals(null) && it.promoPerItems == null)
                            {
                                PP = 0;
                            }
                            else
                            {
                                PP = it.promoPerItems;
                            }
                            if (it.marginPoint.Equals(null) && it.promoPerItems == null)
                            {
                                MP = 0;
                            }
                            else
                            {
                                double WithTaxNetPurchasePrice = Math.Round(it.NetPurchasePrice * (1 + (it.TotalTaxPercentage / 100)), 3);//With tax
                                MP = Convert.ToInt32((it.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                            }
                            if (PP > 0 && MP > 0)
                            {
                                int? PP_MP = PP + MP;
                                it.dreamPoint = PP_MP;
                            }
                            else if (MP > 0)
                            {
                                it.dreamPoint = MP;
                            }
                            else if (PP > 0)
                            {
                                it.dreamPoint = PP;
                            }
                            else
                            {
                                it.dreamPoint = 0;
                            }
                        }
                        else { it.dreamPoint = 0; }

                        // Margin % On app site logic ((MRP-UnitPrice)*100)/UnitPrice
                        if (it.price > it.UnitPrice)
                        {
                            it.marginPoint = ((it.price - it.UnitPrice) * 100) / it.UnitPrice;//MP;  we replce marginpoint value by margin for app here 
                        }
                        else
                        {
                            it.marginPoint = 0;
                        }
                    }
                    catch { }

                    if (it.HindiName != null && !string.IsNullOrEmpty(lang) && lang == "hi")
                    {
                        if (it.IsSensitive == true && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP " + it.UnitofQuantity + " " + it.UOM;
                        }
                        else if (it.IsSensitive == true && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName + " " + it.UnitofQuantity + " " + it.UOM; //item display name 
                        }

                        else if (it.IsSensitive == false && it.IsSensitiveMRP == false)
                        {
                            it.itemname = it.HindiName; //item display name
                        }
                        else if (it.IsSensitive == false && it.IsSensitiveMRP == true)
                        {
                            it.itemname = it.HindiName + " " + it.price + " MRP";//item display name 
                        }
                    }

                    it.Itemtype = 1;
                    ItemDataDCs.Add(it);

                    var itemMultiMRPIds = ItemDataDCs.Select(x => x.ItemMultiMRPId).Distinct().ToList();
                    List<ItemScheme> ItemSchemes = new List<ItemScheme>();
                    ItemSchemes = retailerAppManager.GetItemScheme(itemMultiMRPIds, WarehouseId, context);

                    foreach (var item in ItemDataDCs)
                    {
                        if (item.price > item.UnitPrice)
                        {
                            item.marginPoint = item.UnitPrice > 0 ? (((item.price - item.UnitPrice) * 100) / item.UnitPrice) : 0;//MP;  we replce marginpoint value by margin for app here 

                            if (ItemSchemes != null && ItemSchemes.Any(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.PTR > 0))
                            {
                                var scheme = ItemSchemes.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId);
                                var ptrPercent = Math.Round((scheme.PTR - 1) * 100, 2);
                                var UPMRPMargin = item.marginPoint.Value;
                                if (UPMRPMargin - (ptrPercent + scheme.BaseScheme) > 0)
                                    item.Scheme = ptrPercent + "% PTR + " + Math.Round(UPMRPMargin - ptrPercent, 2) + "% Extra";
                            }
                        }
                        else
                        {
                            item.marginPoint = 0;
                        }
                    }
                }

                return ItemDataDCs.OrderBy(x => x.marginPoint).ToList();
            }
        }
        #endregion

        public async Task<List<CRMCustomerWithTag>> CRMCustomerTag(List<string> SkCoddeList)
        {
            //List<CRMCustomerWithTag> list = new List<CRMCustomerWithTag>();
            string CrmPlatformId = CRMPlatformConstants.SalesApp;
            CRMManager manager = new CRMManager();
            var list = await manager.GetCRMCustomerWithTag(SkCoddeList, CrmPlatformId);
            return list;
        }

        [HttpGet]
        [Route("ExecutiveBeatHistoryJob")]
        [AllowAnonymous]
        public async Task<bool> ExecutiveBeatHistoryJob()
        {
            // remove old doc and insert in ExecutiveBeats_History collection 
            bool result = false;
            MongoDbHelper<ExecutiveBeats> mongoDbHelper = new MongoDbHelper<ExecutiveBeats>();
            MongoDbHelper<ExecutiveBeats_History> BeatHistoryMongoDbHelper = new MongoDbHelper<ExecutiveBeats_History>();
            {
                var today = DateTime.Now.Date.AddDays(-60);
                var executiveBeats = mongoDbHelper.Select(x => x.AssignmentDate < today).ToList();
                if (executiveBeats.Count() > 0)
                {
                    foreach (var data in executiveBeats)
                    {
                        if (data != null)
                        {
                            var Beatdoc = Mapper.Map(data).ToANew<ExecutiveBeats_History>();
                            var IsInsertDoc = BeatHistoryMongoDbHelper.Insert(Beatdoc);
                            if (IsInsertDoc)
                            {
                                var IsRemoveDoc = mongoDbHelper.Delete(data.Id);
                            }
                        }
                    }
                }
            }
            return result;
        }
        [Route("ShoppingCartHistoryJob")]
        [AllowAnonymous]
        public async Task<bool> ShoppingCartHistoryJob()
        {
            // remove old doc and insert in ExecutiveBeats_History collection 
            bool result = false;
            MongoDbHelper<CustomerShoppingCart> mongoDbHelper = new MongoDbHelper<CustomerShoppingCart>();
            MongoDbHelper<CustomerShoppingCart_History> ShoppingCartHistoryMongoDbHelper = new MongoDbHelper<CustomerShoppingCart_History>();
            {
                var today = DateTime.Now.Date.AddDays(-60);
                var customerShoppingCarts = mongoDbHelper.Select(x => x.CreatedDate < today).ToList();
                if (customerShoppingCarts.Count() > 0)
                {
                    foreach (var data in customerShoppingCarts)
                    {
                        if (data != null)
                        {
                            var CartDoc = Mapper.Map(data).ToANew<CustomerShoppingCart_History>();
                            var IsInsertDoc = ShoppingCartHistoryMongoDbHelper.Insert(CartDoc);
                            if (IsInsertDoc)
                            {
                                var IsRemoveDoc = mongoDbHelper.Delete(data.Id);
                            }
                        }
                    }
                }
            }
            return result;
        }


        [HttpPost]
        [Route("GetTelecallerBeatDSR")]
        public BeatDSRReportResponseDCs GetTelecallerBeatDSR(BeatDSR beatDSR)
        {
            MongoDbHelper<DigitalSalesBeatDSR> mongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
            List<DigitalSalesBeatDSRDC> DSRResult = new List<DigitalSalesBeatDSRDC>();
            BeatDSRReportResponseDCs res = new BeatDSRReportResponseDCs();

            using (var Context = new AuthContext())
            {
                #region PeopleList Role wise
                DataTable CityDt = new DataTable();
                CityDt.Columns.Add("IntValue");
                if (beatDSR.CityIds.Count > 0)
                {
                    foreach (var id in beatDSR.CityIds)
                    {
                        var dr = CityDt.NewRow();
                        dr["IntValue"] = id;
                        CityDt.Rows.Add(dr);
                    }
                }
                var cityid = new SqlParameter("@CityIds", CityDt);
                cityid.SqlDbType = SqlDbType.Structured;
                cityid.TypeName = "dbo.intValues";

                var role = new SqlParameter("@Role", beatDSR.Type);

                var PeopleData = Context.Database.SqlQuery<PeopleDataDC>("DigitalSalesPeopleList @CityIds,@Role", cityid, role).ToList();
                #endregion
                var peoplelist = PeopleData.OrderBy(x => x.PeopleID).Skip(beatDSR.skip).Take(beatDSR.take);
                var peopleids = PeopleData.Select(x => x.PeopleID).ToList();
                var totcount = PeopleData.Count();
                var today = DateTime.Now.Date;
                if (beatDSR.EndDate >= today || (beatDSR.EndDate == null && beatDSR.StartDate == null) || (beatDSR.EndDate == today && beatDSR.StartDate == today))
                {
                    if (peoplelist != null && peoplelist.Any())
                    {
                        MongoDbHelper<ExecutiveBeats> mongoDbBeatHelper = new MongoDbHelper<ExecutiveBeats>();
                        var firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
                        var MonthBeat = mongoDbBeatHelper.Select(x => x.AssignmentDate == today && peopleids.Contains(x.PeopleId));

                        if (Context.Database.Connection.State != ConnectionState.Open)
                            Context.Database.Connection.Open();

                        foreach (var item in peoplelist)
                        {
                            DashboardDetailDc dashboardDetail = new DashboardDetailDc();

                            var todayBeat = MonthBeat.Where(x => x.PeopleId == item.PeopleID).FirstOrDefault();
                            BeatCustomerDc Beat = new BeatCustomerDc();

                            Beat.TodayBeatCustomerIds = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => new ExecutiveBeatCustomerDc { Customerid = x.CustomerId }).ToList() : new List<ExecutiveBeatCustomerDc>();

                            DataTable IdDt = new DataTable();
                            List<int> ActualCustomerVisited = new List<int>();
                            IdDt = new DataTable();
                            IdDt.Columns.Add("IntValue");

                            if (Beat.TodayBeatCustomerIds != null && Beat.TodayBeatCustomerIds.Any())
                            {
                                if (Beat.TodayBeatCustomerIds.Count > 0)
                                {
                                    foreach (var id in Beat.TodayBeatCustomerIds.Select(x => x.Customerid).Distinct())
                                    {
                                        int cid = id;
                                        var dr = IdDt.NewRow();
                                        dr["IntValue"] = cid;
                                        IdDt.Rows.Add(dr);
                                    }
                                }
                                else
                                {
                                    IdDt = null;
                                }

                                ActualCustomerVisited = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Select(x => x.CustomerId).ToList() : new List<int>();
                            }
                            var cmd = Context.Database.Connection.CreateCommand();
                            cmd.CommandTimeout = 1200;
                            cmd.CommandText = "[dbo].[TodayDashBoardDetail]";
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            var param4 = new SqlParameter("PersonId", item.PeopleID);
                            var param5 = new SqlParameter("CustIdDs", IdDt);
                            var param8 = new SqlParameter("WarehouseId", item.WarehouseId);
                            cmd.Parameters.Add(param4);
                            cmd.Parameters.Add(param5);
                            cmd.Parameters.Add(param8);

                            var reader = cmd.ExecuteReader();
                            dashboardDetail = ((IObjectContextAdapter)Context).ObjectContext.Translate<DashboardDetailDc>(reader).FirstOrDefault();

                            if (dashboardDetail != null)
                            {
                                DigitalSalesBeatDSRDC ToObj = new DigitalSalesBeatDSRDC();
                                //DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC ToObj1 = new DataContracts.External.MobileExecutiveDC.salesDashboardTodayDC();
                                ToObj.BeatSales = dashboardDetail.BeatSales;
                                ToObj.ExtraSales = dashboardDetail.ExtraSales;
                                ToObj.BeatOrder = dashboardDetail.BeatOrder;
                                ToObj.TotalSales = dashboardDetail.TotalSales;
                                ToObj.ProductiveCall = dashboardDetail.ProductiveCall;
                                int SuccessPhoneOrder = 0;
                                if (todayBeat != null && todayBeat.PlannedRoutes.Count() > 0)
                                {
                                    SuccessPhoneOrder = todayBeat.PlannedRoutes.Where(y => y.IsPhoneOrder).Count();
                                    ToObj.VisitPlanned = todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().Count();
                                    ToObj.TotalCall = todayBeat.PlannedRoutes.Where(y => y.IsVisited).Count();
                                    ToObj.TodayOutletCoverage = Math.Round((Convert.ToDouble(ToObj.TodayTotalCall) / (Convert.ToDouble(ToObj.TodayVisitPlanned))) * 100, 2);
                                    ToObj.PhoneOrder = SuccessPhoneOrder;
                                }
                                else
                                {
                                    ToObj.VisitPlanned = 0;
                                    ToObj.TotalCall = 0;
                                    ToObj.TodayOutletCoverage = 0;
                                }
                                if (ToObj.TotalCall > 0 || SuccessPhoneOrder > 0)
                                {
                                    ToObj.TodayStrikeRate = Math.Round((Convert.ToDouble(ToObj.TodayProductiveCall) / (ToObj.TodayTotalCall + SuccessPhoneOrder)) * 100, 2);
                                }
                                var planCustomers = todayBeat != null && todayBeat.PlannedRoutes != null && todayBeat.PlannedRoutes.Any() ? todayBeat.PlannedRoutes.Select(x => x.CustomerId).Distinct().ToList() : new List<int>();
                                ToObj.TodayStrikeRate = dashboardDetail.StrikeRate;
                                ToObj.ExtraVisit = ActualCustomerVisited.Any() ? ActualCustomerVisited.Count(x => !planCustomers.Contains(x)) : 0;
                                ToObj.ExtraCall = dashboardDetail.ExtraCall;
                                ToObj.ExtraOrder = dashboardDetail.ExtraOrder;
                                ToObj.TodayPerfactOrder = dashboardDetail.PerfactOrder;
                                ToObj.TodaySupperOrder = dashboardDetail.SupperOrder;
                                ToObj.Eco = dashboardDetail.Eco;
                                ToObj.AvgLineItem = dashboardDetail.AvgLineItem;
                                ToObj.AvgOrderValue = dashboardDetail.AvgOrderValue;
                                ToObj.SalesPerson = item.DisplayName;
                                ToObj.ClusterName = dashboardDetail.ClusterName;
                                ToObj.ChannelName = dashboardDetail.ChannelName;
                                ToObj.StoreName = dashboardDetail.StoreName;
                                ToObj.CityName = item.CityName;
                                ToObj.SalesPersonId = item.PeopleID;
                                ToObj.CheckIn = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Min(x => x.CheckIn) : null;
                                ToObj.CheckOut = todayBeat != null && todayBeat.ActualRoutes != null && todayBeat.ActualRoutes.Any() ? todayBeat.ActualRoutes.Max(x => x.CheckOut) : null;

                                DSRResult.Add(ToObj);
                                res.DigitalSalesBeatDSRMTDData = DSRResult;
                                res.Totalcount = totcount;
                            }
                        }

                    }
                }
                if ((beatDSR.EndDate != null && beatDSR.StartDate != null) && (beatDSR.StartDate != today))
                {
                    beatDSR.EndDate = beatDSR.EndDate.Value.AddDays(1).AddMilliseconds(-1);
                    var DSRResultList = mongoDbHelper.Select(x => peopleids.Contains(x.SalesPersonId) && x.CreatedDate >= beatDSR.StartDate && x.CreatedDate <= beatDSR.EndDate).ToList();
                    if (res.DigitalSalesBeatDSRMTDData != null && res.DigitalSalesBeatDSRMTDData.Count > 0)
                    {
                        DSRResultList.AddRange(res.DigitalSalesBeatDSRMTDData);
                    }
                    var result = DSRResultList
                    .GroupBy(ac => new
                    {
                        ac.SalesPersonId,
                        ac.SalesPerson,
                        ac.ChannelName
                    })
                    .Select(ac => new DigitalSalesBeatDSR
                    {
                        SalesPerson = ac.Key.SalesPerson,
                        SalesPersonId = ac.Key.SalesPersonId,
                        ChannelName = ac.Key.ChannelName,
                        BeatSales = ac.Sum(acs => acs.BeatSales),
                        BeatOrder = ac.Sum(acs => acs.BeatOrder),
                        ExtraCall = ac.Sum(acs => acs.ExtraCall),
                        TotalCall = ac.Sum(acs => acs.TotalCall),
                        TodayTotalCall = ac.Sum(acs => acs.TodayTotalCall),
                        ExtraOrder = ac.Sum(acs => acs.ExtraOrder),
                        ExtraSales = ac.Sum(acs => acs.ExtraSales),
                        ExtraVisit = ac.Sum(acs => acs.ExtraVisit),
                        VisitPlanned = ac.Sum(acs => acs.VisitPlanned),
                        TodayVisitPlanned = ac.Sum(acs => acs.TodayVisitPlanned),
                        TodayStrikeRate = ac.Sum(acs => acs.TodayStrikeRate),
                        TodaySupperOrder = ac.Sum(acs => acs.TodaySupperOrder),
                        PhoneOrder = ac.Sum(acs => acs.PhoneOrder),
                        //TodayTarget = ac.Sum(acs => acs.TodayTarget),
                        //MtdMonthlyTarget = ac.Sum(acs => acs.MtdMonthlyTarget),
                        TodayProductiveCall = ac.Sum(acs => acs.TodayProductiveCall),
                        ProductiveCall = ac.Sum(acs => acs.ProductiveCall),
                        TotalSales = ac.Sum(acs => acs.TotalSales),
                        OutletCoverage = ac.Average(acs => acs.OutletCoverage),
                        StrikeRate = ac.Average(acs => acs.StrikeRate),
                        Eco = ac.Average(acs => acs.Eco),
                        AvgOrderValue = ac.Average(acs => acs.AvgOrderValue),
                        AvgLineItem = ac.Average(acs => acs.AvgLineItem),
                        CheckIn = beatDSR.EndDate.Value.Date == beatDSR.StartDate.Value.Date ? ac.FirstOrDefault()?.CheckIn : null,
                        CheckOut = beatDSR.EndDate.Value.Date == beatDSR.StartDate.Value.Date ? ac.FirstOrDefault()?.CheckOut : null
                    }).ToList();


                    res.DigitalSalesBeatDSRMTDData = Mapper.Map(result).ToANew<List<DigitalSalesBeatDSRDC>>();
                    res.DigitalSalesBeatDSRMTDData.ForEach(y =>
                    {
                        y.CityName = PeopleData.FirstOrDefault(x => x.PeopleID == y.SalesPersonId)?.CityName;
                        y.StartDate = beatDSR.StartDate.Value.ToString("dd/MM/yyyy");
                        y.EndDate = beatDSR.EndDate.Value.ToString("dd/MM/yyyy"); ;
                    });
                    res.DigitalSalesBeatDSRMTDData = res.DigitalSalesBeatDSRMTDData.OrderBy(x => x.Id).Skip(beatDSR.skip).Take(beatDSR.take).ToList();
                    res.Totalcount = result.Count();
                }

                return res;
            }
        }

        #region Digital RowData
        [HttpGet]
        [Route("GetCheckOutReasonRowData")]
        [AllowAnonymous]
        public APIResponse GetTelecallerRowData(DateTime Startdate, DateTime Enddate, int FormType)
        {
            try
            {
                using (var Context = new AuthContext())
                {
                    var type = new SqlParameter("@FormType", FormType);
                    var startdate = new SqlParameter("@StartDate", Startdate);
                    var enddate = new SqlParameter("@EndDate", Enddate);
                    var data = Context.Database.SqlQuery<CheckOutReasonRowDataDC>("GetCheckOutReasonRawData @FormType,@StartDate,@EndDate", type, startdate, enddate).ToList();

                    if (data != null && data.Any() && data.Count > 0)
                    {
                        var dashboardDt = ClassToDataTable.CreateDataTable(data);

                        string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/CheckOutReasonRawData");
                        if (!Directory.Exists(ExcelSavePath))
                            Directory.CreateDirectory(ExcelSavePath);

                        var fileName = "CheckOut_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                        string filePath = ExcelSavePath + "\\" + fileName;

                        ExcelGenerator.DataTable_To_Excel(dashboardDt, "CheckOut_Report", filePath);

                        string FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                      , HttpContext.Current.Request.Url.DnsSafeHost
                                                                      , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                      , "/SalesAppDashboardFile/CheckOutReasonRawData/" + fileName);
                        return new APIResponse { Status = true, Data = FileUrl };
                    }

                    return new APIResponse { Status = true, Data = data };
                }
            }
            catch (Exception ex)
            {
                return new APIResponse { Status = false, Data = ex.Message };
            }
        }
        #endregion

        [HttpGet]
        [Route("DSRDateChangeTemp")]
        [AllowAnonymous]
        public async Task<bool> DSRDateChangeTemp()
        {
            bool result = false;
            MongoDbHelper<DigitalSalesBeatDSR> mongoDbHelper = new MongoDbHelper<DigitalSalesBeatDSR>();
            {
                var today = DateTime.Now.Date;
                var DSRdata = mongoDbHelper.Select(x => x.IsActive == true).ToList();
                foreach (var data in DSRdata)
                {
                    if (data.CreatedDate == data.ModifiedDate)
                    {
                        data.CreatedDate = data.CreatedDate.AddDays(-1);
                        result = mongoDbHelper.Replace(data.Id, data);
                    }
                }
            }
            return result;
        }
        
        [Route("GetAllSalesPersonKPI")]
        [HttpGet]
        public async Task<string> GetSalesPersonKPI(int month, int year)
        {
            string FileUrl = "";
            List<SalesPersonKpiListDc> salesPersonKpiList = new List<SalesPersonKpiListDc>();
            using (var Context = new AuthContext())
            {
                var listt = (from e in Context.ClusterStoreExecutives
                             join p in Context.Peoples on e.ExecutiveId equals p.PeopleID
                             //join c in Context.Clusters on e.ClusterId equals c.ClusterId
                             //join s in Context.StoreDB on e.StoreId equals s.Id
                             where e.IsActive == true && e.IsDeleted == false && p.Active == true && p.Deleted == false   //&& e.ExecutiveId == 3751
                             select new
                             {
                                 p.PeopleID,
                                 p.WarehouseId,
                                 p.DisplayName,
                                 //c.WarehouseName,
                                 //s.Id,
                                 //s.Name,
                                 //c.ClusterName
                             }).Distinct().OrderBy(x => x.PeopleID).ToList();
                //var PeopleIds = listt.Select(x => x.PeopleID).Distinct().ToList();
                var storelist = Context.StoreDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
                foreach (var p in listt)
                {
                    List<SalesPersonKpiListDc> salesPersonKpi = new List<SalesPersonKpiListDc>();

                    ItemMasterManager manager = new ItemMasterManager();
                    var configs = await manager.GetSalesPersonKPIConfigs(p.PeopleID, p.WarehouseId, month, year);

                    DateTime startDate = new DateTime(year, month, 1);
                    string sDate = startDate.ToString("yyyy-MM-dd");
                    string eDate = startDate.Date.AddMonths(1).ToString("yyyy-MM-dd");

                    bool Isdigitalexecutive = false;


                    using (var authContext = new AuthContext())
                    {
                        string query = "select distinct r.Name as Role from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where PeopleID='" + p.PeopleID + "'and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                        var role = authContext.Database.SqlQuery<string>(query).ToList();
                        Isdigitalexecutive = role.Any(x => x.Contains("Digital sales executive") || x.Contains("Telecaller"));
                    }


                    foreach (var item in configs.GroupBy(s => new { s.KpiName, s.DisplayName, s.Type }))
                    {
                        SalesPersonKpiListDc kpi = new SalesPersonKpiListDc
                        {
                            Month = month,
                            Year = year,
                            KpiName = item.Key.KpiName,
                            DisplayName = string.IsNullOrEmpty(item.Key.DisplayName) ? item.Key.KpiName : item.Key.DisplayName,
                            Type = item.Key.Type
                        };
                        ElasticSqlHelper<SalesPersonKPIOrderData> elasticSqlHelperOrdeData = new ElasticSqlHelper<SalesPersonKPIOrderData>();
                        ElasticSqlHelper<doubleVal> elasticSqlHelper = new ElasticSqlHelper<doubleVal>();
                        ElasticSqlHelper<SalesPersonKpiElasticData> skcodeElasticHelper = new ElasticSqlHelper<SalesPersonKpiElasticData>();

                        //var clusterIds = string.Join(",", item.Select(s => s.ClusterId).Distinct().ToList());


                        var Targets = item.GroupBy(s => s.KPIId).Select(d => new { KPIID = d.Key, Target = d.FirstOrDefault().Target, IncentiveAmount = d.FirstOrDefault().IncentiveAmount });
                        double incentiveAmount = 0;
                        var queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from skorderdata_prod where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and executiveid = '" + p.PeopleID + "' and IIF(isdigitalorder is null, false, isdigitalorder) = false";

                        if (Isdigitalexecutive)
                            queryOrderData = $"select skcode, storeid, itemnumber, dispatchqty , price,custid  from skorderdata_prod where createddate>= '{sDate}' and createddate<'{eDate}' and status in ('Delivered', 'sattled') and ordertakensalespersonid = '" + p.PeopleID + "' and IIF(isdigitalorder is null, false, isdigitalorder) = true";

                        var OrderData = (await elasticSqlHelperOrdeData.GetListAsync(queryOrderData)).ToList();
                        switch (item.Key.KpiName)
                        {
                            case "MTD":

                                incentiveAmount = 0;
                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());
                                    //Old Query: var achievedVal = (await elasticSqlHelper.GetListAsync($"select sum(dispatchqty * price) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}'  and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                    var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(y => new { y.dispatchqty, y.price }).Sum(y => y.dispatchqty * y.price);
                                    var Achievement = achievedVal;
                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    // var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    // var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();
                                    // kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Math.Round(Achievement, 0);
                                    kpi.Target += Target.Sum(d => d.Target);
                                }
                                break;


                            case "MAC":
                                incentiveAmount = 0;

                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    //var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                    // var achievedVal = (await elasticSqlHelper.GetListAsync($"select count(distinct custid) as val from {platformIdxName} where createddate>='{sDate}' and status in ('Delivered','sattled') and createddate<'{eDate}' and storeid={store.Key} and executiveid ={peopleId} ")).FirstOrDefault();
                                    var achievedVal = OrderData.Where(x => x.storeid == store.Key).Select(x => x.custid).Distinct().Count();
                                    var Achievement = achievedVal;//achievedVal.val;
                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();
                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                    //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Achievement;//Math.Round(Achievement, 0);
                                    kpi.Target += Target.Sum(d => d.Target);
                                }

                                break;

                            case "Success Stores":
                                incentiveAmount = 0;

                                var date = DateTime.Now;
                                var isMonthComplete = false;
                                if (date.Day < 3)
                                {
                                    isMonthComplete = true;
                                    date = DateTime.Now.AddMonths(-1);
                                }
                                var lastDayOfMonth = DateTime.DaysInMonth(date.Year, date.Month);

                                var mongoHelper = new MongoHelper<CustomersTargets.MonthlyCustomerTarget>();
                                string DocumentName = "MonthlyTargetData_" + date.Month.ToString() + date.Year.ToString();
                                var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from skorderdata_prod where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and executiveid ='" + p.PeopleID + "' group by skcode,storeid";
                                var skCodeDataLists = await skcodeElasticHelper.GetListAsync(query);
                                foreach (var store in item.GroupBy(d => d.StoreId))
                                {
                                    // var clusterIds = string.Join(",", store.Select(s => s.ClusterId).Distinct().ToList());

                                    //var query = $"select skcode, storeid, count(distinct itemnumber) linecount,  sum(dispatchqty * price) dispatchamount   from {platformIdxName} where createddate>='{sDate}' and createddate<'{eDate}' and status in ('Delivered','sattled') and storeid={store.Key} and executiveid ={peopleId} group by skcode,storeid";
                                    //var skCodeDataList = await skcodeElasticHelper.GetListAsync(query);

                                    var skCodeDataList = skCodeDataLists.Where(x => x.storeid == store.Key).ToList();

                                    var allTarget = mongoHelper.Select(s => s.TargetOnStores != null
                                           && s.TargetOnStores.Count > 0
                                           && s.TargetOnStores.Any(d => d.StoreId == store.Key), collectionName: DocumentName).ToList();
                                    List<CustStoreTargets> targetOnStores = new List<CustStoreTargets>();
                                    foreach (var data in allTarget)
                                    {
                                        foreach (var storeTarget in data.TargetOnStores)
                                        {
                                            targetOnStores.Add(new CustStoreTargets
                                            {
                                                skcode = data.Skcode,
                                                StoreId = storeTarget.StoreId,
                                                Target = storeTarget.Target,
                                                TargetLineItem = storeTarget.TargetLineItem
                                            });
                                        }

                                    }

                                    //var targetOnStores = mongoHelper.GetWithProjection(s => s.TargetOnStores.Any(d => d.StoreId == store.Key),
                                    //           s => s.TargetOnStores.Select(d => new CustStoreTargets
                                    //           {
                                    //               skcode = s.Skcode,
                                    //               StoreId = d.StoreId,
                                    //               Target = d.Target,
                                    //               TargetLineItem = d.TargetLineItem
                                    //           }).ToList(), DocumentName).SelectMany(d => d).ToList();

                                    int Achievement = 0;

                                    targetOnStores.ForEach(s =>
                                    {
                                        var skcodeData = skCodeDataList.FirstOrDefault(a => a.skcode == s.skcode && a.storeid == s.StoreId &&
                                            s.Target <= a.dispatchamount &&
                                            (!s.TargetLineItem.HasValue || (s.TargetLineItem.HasValue && s.TargetLineItem.Value <= a.linecount))
                                        );

                                        if (skcodeData != null)
                                            Achievement++;

                                    });


                                    var Target = Targets.Where(s => store.Select(d => d.KPIId).Contains(s.KPIID)).ToList();

                                    incentiveAmount += Target.Sum(d => d.IncentiveAmount);

                                    //var AchievementPercent = 100 * (Achievement / Target.Sum(d => d.Target));
                                    //var incentivePercent = item.Where(s => Target.Select(a => a.KPIID).Contains(s.KPIId) && s.AchievePercent <= AchievementPercent).OrderByDescending(s => s.AchievePercent).FirstOrDefault();

                                    //kpi.Earning += incentivePercent == null ? 0 : Math.Round((incentivePercent.IncentiveAmount * incentivePercent.IncentivePercent) / 100, 0);
                                    kpi.Achievement += Achievement;
                                    kpi.Target += Target.Sum(d => d.Target);
                                }

                                break;

                        }

                        //kpi.AchievementPercent = Math.Round(100 * (kpi.Achievement / kpi.Target), 0);
                        kpi.AchievementPercent = kpi.Target > 0 ? Math.Round(100 * (kpi.Achievement / kpi.Target), 0) : 0;
                        var incentives = item.GroupBy(d => new { d.AchievePercent, d.IncentivePercent });
                        var incentivePercent = incentives.Where(s => s.Key.AchievePercent <= kpi.AchievementPercent).OrderByDescending(s => s.Key.AchievePercent)?.FirstOrDefault()?.Key?.IncentivePercent ?? 0;
                        kpi.Earning += incentivePercent == 0 ? 0 : Math.Round((incentiveAmount * incentivePercent) / 100, 0);

                        var storeid = configs.FirstOrDefault(x => x.ExecutiveName == p.DisplayName)?.StoreId;
                        kpi.ExecutiveName = p.DisplayName;
                        kpi.StoreName = storeid > 0 ? storelist.FirstOrDefault(x => x.Id == storeid).Name : "";
                        salesPersonKpi.Add(kpi);
                    }
                    salesPersonKpiList.AddRange(salesPersonKpi);
                }
                if (salesPersonKpiList.Any() && salesPersonKpiList.Count > 0)
                {
                    var Dt = ClassToDataTable.CreateDataTable(salesPersonKpiList);

                    string ExcelSavePath = HttpContext.Current.Server.MapPath("~/SalesAppDashboardFile/salesPersonKpiReport");
                    if (!Directory.Exists(ExcelSavePath))
                        Directory.CreateDirectory(ExcelSavePath);

                    var fileName = "salesPersonKpi_Report" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xlsx";
                    string filePath = ExcelSavePath + "\\" + fileName;

                    ExcelGenerator.DataTable_To_Excel(Dt, "salesPersonKpi_Report", filePath);

                    FileUrl = string.Format("{0}://{1}{2}/{3}", new Uri((HttpContext.Current.Request.UrlReferrer != null ? HttpContext.Current.Request.UrlReferrer.AbsoluteUri : HttpContext.Current.Request.Url.AbsoluteUri)).Scheme
                                                                 , HttpContext.Current.Request.Url.DnsSafeHost
                                                                 , (HttpContext.Current.Request.Url.Port != 80 && HttpContext.Current.Request.Url.Port != 443 ? ":" + HttpContext.Current.Request.Url.Port : "")
                                                                 , "/SalesAppDashboardFile/AllExecutiveDayReport/" + fileName);
                }
            }
            return FileUrl;
        }


    }
}

#region DC

#region DigitalBeatDSR

public class SalesPersonKpiListDc
{
    public string KpiName { get; set; }
    public string DisplayName { get; set; }
    public int Month { get; set; }
    public int Year { get; set; }
    public string Type { get; set; }
    public double Target { get; set; }
    public double Achievement { get; set; }
    public double AchievementPercent { get; set; }
    public double Earning { get; set; }
    public string ExecutiveName { get; set; }
    public string StoreName { get; set; }


}
public class GetElsaticOrderIdDC
{
    public int orderid { get; set; }
    public string status { get; set; }
}
public class peopleData
{
    public int PeopleID { get; set; }
    public string WarehouseName { get; set; }
    public string DisplayName { get; set; }
    public long StoreId { get; set; }
    public string StoreName { get; set; }
    public string ClusterName { get; set; }
    public int WarehouseId { get; set; }
    public long ChannelMasterId { get; set; }
    public string ChannelType { get; set; }

}
public class BeatDSRReportResponseDCs
{
    public List<DigitalSalesBeatDSRDC> DigitalSalesBeatDSRMTDData { get; set; }
    public int Totalcount { get; set; }
}
public class DigitalSalesBeatDSRDC : DigitalSalesBeatDSR
{
    public string CityName { get; set; }
    public string StartDate { get; set; }
    public string EndDate { get; set; }
}
public class BeatDSR
{
    public List<int> CityIds { get; set; }
    public string Type { get; set; }
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public int skip { get; set; }
    public int take { get; set; }

}
public class PeopleDataDC
{
    public int PeopleID { get; set; }
    public int WarehouseId { get; set; }
    public string DisplayName { get; set; }
    public string CityName { get; set; }
}

public class CheckOutReasonRowDataDC
{
    public long Id { get; set; }
    public DateTime Date { get; set; }
    public int FormType { get; set; }
    public string ExecutiveCode { get; set; }
    public string ExecutiveName { get; set; }
    public DateTime? TimeIn { get; set; }
    public DateTime? TimeOut { get; set; }
    public string Duration { get; set; }
    public string ActualCallDuration { get; set; }
    public string CallConnected { get; set; }
    public string Warehouse { get; set; }
    public string Cluster { get; set; }
    public string Skcode { get; set; }
    public string CustomerName { get; set; }
    public string ShopName { get; set; }
    public string PhysicalVisitToggle { get; set; }
    public string Comment { get; set; }
    public string OtherComment { get; set; }
    public string IsCustInterested { get; set; }
    public string OrderTaken { get; set; }
    public long? OrderId { get; set; }
    public double? OrderAmount { get; set; }
    public string TechProductInquiry { get; set; }
    public string SKUInquiry { get; set; }
    public string RequiredItemInquiry { get; set; }
    public string OfferExplain { get; set; }
    public string MyTargetExplain { get; set; }
    public string GameSectionExplain { get; set; }
}

#endregion

public class TeleCallerDC
{
    public long CustomerId { get; set; }
    public long ExecutiveId { get; set; }
    public string Reason { get; set; }
    public string Comment { get; set; }
    public TimeSpan? TimeIn { get; set; }
    public TimeSpan? TimeOut { get; set; }
    public bool IsCustInterested { get; set; }
    public bool OrderTaken { get; set; }
    public long? OrderId { get; set; }
    public double? OrderAmount { get; set; }
    public string TechProductInquiry { get; set; }
    public string SKUInquiry { get; set; }
    public string RequiredItemInquiry { get; set; }
    public bool OfferExplain { get; set; }
    public bool MyTargetExplain { get; set; }
    public bool GameSectionExplain { get; set; }
    public bool IsPhysicalVisit { get; set; }
    public int FormType { get; set; }
    public bool IsCall { get; set; }
    public TimeSpan? Duration { get; set; }
    public TimeSpan? ActualCallDuration { get; set; }
}


public class PeopleData
{
    public int PeopleID { get; set; }
    public string DisplayName { get; set; }
    public long ChannelMasterId { get; set; }
    public string ChannelName { get; set; }
    public int WarehouseId { get; set; }
}


public class ClassificationMastersDc
{
    public long Id { get; set; }
    public string Classification { get; set; }
    //public long? StoreId { get; set; }
}

public class ExecutiveDatas
{
    public int ExecutiveId { get; set; }
    public string DisplayName { get; set; }
    public string StoreName { get; set; }
    public string city { get; set; }
    public int WarehouseId { get; set; }
    public string WarehouseName { get; set; }
    public string ClusterName { get; set; }
}
public class PerformanceDashBoardData
{
    public int ExecutiveId { get; set; }
    public int ActiveRetailer { get; set; }
    public double BeatVisitPercent { get; set; }
    public int TC { get; set; }
}
public class ActualRouteCustomerDC
{
    public int ExecutiveId { get; set; }
    public int CustomerId { get; set; }
    public bool IsVisited { get; set; }
    public DateTime CreatedDate { get; set; }
    public bool IsBeat { get; set; }
}

public class ElasticOrderData
{
    public int custid { get; set; }
}
public class CheckCustomerSalesAppDc
{
    public bool Status { get; set; }
    public string Message { get; set; }
    public int? CustomerId { get; set; }
    public string SkCode { get; set; }
    public bool? CanUpdateCustomer { get; set; }
}
public class CustDc
{
    public int CustomerId { get; set; }
}

public class RedispatchOrderDataBPL_TempListDC
{
    public string SKCode { get; set; }
    public int WarehouseId { get; set; }
    public int ClusterId { get; set; }
    public int OrderID { get; set; }
    public DateTime CreatedDate { get; set; }
    public double TotalAmount { get; set; }
    public int RedispatchCount { get; set; }
    public string Status { get; set; }
    public int OrderTakenSalesPersonId { get; set; }
    public string orderby { get; set; }
    public int ExecutiveId { get; set; }
    public string ExecutiveName { get; set; }
    public long StoreId { get; set; }
    public int visited { get; set; }

}

public class beatDSRRR  //aartimukati
{
    public List<int> WarehouseId { get; set; }
    public List<int> StoreId { get; set; }
    public List<long> ChannelMasterId { get; set; }
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public int skip { get; set; }
    public int take { get; set; }

}
public class DayWiseBeatShopCountByExecutiveDc
{
    public int ExecutiveID { get; set; }
    public string ExecutiveName { get; set; }
    public string WarehouseName { get; set; }
    public string Store { get; set; }
    public string ClusterName { get; set; }
    public int Sunday { get; set; }
    public int Monday { get; set; }
    public int Tuesday { get; set; }
    public int Wednesday { get; set; }
    public int Thursday { get; set; }
    public int Friday { get; set; }
    public int Saturday { get; set; }
    public int TotalCustomer { get; set; }
}

public class CustomerCheckInDc
{
    public int CustomerId { get; set; }
    public DateTime? CheckIn { get; set; }
    public DateTime? CheckOut { get; set; }
    public DateTime ModifiedDate { get; set; }
}
public class PersonDetail
{
    public string WarehouseName { get; set; }
    public string Mobile { get; set; }
}
public class actualrouteNew
{
    public int CustomerId { get; set; }
    public string SkCode { get; set; }
    public string Warehouse { get; set; }
    public string ExecutiveName { get; set; }
    public string ClusterName { get; set; }
    public DateTime? CheckIn { get; set; }
    public DateTime? CheckOut { get; set; }
    public bool Visited { get; set; }
    public long StoreId { get; set; }
    public string StoreName { get; set; }
    public string IsOrdered { get; set; }
}
public class AllBeatCustomerDc
{
    public int CustomerId { get; set; }
    public bool IsVisited { get; set; }
    public string Day { get; set; }
    public DateTime CreatedDate { get; set; }
}
public class GroupList
{
    // u.GroupName, u.Id, u.StoreId
    public long Id { get; set; }
    public long StoreId { get; set; }
    public string GroupName { get; set; }
}
public class ResMsg
{
    public string Message { get; set; }
    public bool Status { get; set; }
    public AgentPitchMasterDc AgentPitchMasters { get; set; }
}

public class AgentPitchMasterDc
{
    public long Id { get; set; }
    public int CustomerId { get; set; }
    public int ExecutiveId { get; set; }
    public DateTime StartDate { get; set; }
    public string ShopImageUrl { get; set; }//imageurl
    public string lat { get; set; }
    public string lg { get; set; }
    public string AudioUrl { get; set; }  //MP3
    public string Conversation { get; set; }//text
    public DateTime EndDate { get; set; }
    public string Skcode { get; set; }
    public string Name { get; set; }
    public bool Active { get; set; }

}
public class OrderDetailForOTPTemplateDc
{
    public int OrderId { get; set; }
    public int TotalQty { get; set; }
    public double OrderAmount { get; set; }
    public int OrderType { get; set; }
    public string invoice_no { get; set; }
}

public class InsertTopSkUItems
{
    public List<TopSKUsItemDc> topSKUsItemDcs { get; set; }
    public bool IsPromotional { get; set; }
}
public class SalesIntentRequestDC
{
    public long ItemForecastDetailId { get; set; }

    public ItemForecastDetail ItemForecastDetail { get; set; }

    public int PeopleId { get; set; }
    public int ItemMultiMRPId { get; set; }
    public int RequestQty { get; set; }
    public double RequestPrice { get; set; }
    public int SalesLeadApproveID { get; set; }
    public DateTime? SalesApprovedDate { get; set; }
    public int BuyerApproveID { get; set; }
    public DateTime? BuyerApprovedDate { get; set; }
    public int Status { get; set; }  // Pending for Lead = 0, Pending for buyer = 1, Rejected = 2, Approved = 3  
    public int Warehouseid { get; set; }
    public int CreatedBy { get; set; }
    public int? MinOrderQty { get; set; } // TO Do..New Change
    public int? NoOfSet { get; set; } //TO Do.. New Change
    public string ETADate { get; set; } //TO Do.. New Change datetime to string


}

public class GroupWiseBeatReportDc
{
    public string WarehouseName { get; set; }
    public string ClusterName { get; set; }
    public string Skcode { get; set; }
    public string ShopName { get; set; }
    public string ExecutiveName { get; set; }
    public string BeatDay { get; set; }
    public string StoreName { get; set; }
}

public class ItemClassificationReportDc
{
    public int ExecutiveId { get; set; }
    public string ExecutiveName { get; set; }
    public string StoreName { get; set; }
    public string WarehouseName { get; set; }
    public double SaleValue { get; set; }
    public long ItemIncentiveClassificationId { get; set; }
    public string ItemClassification { get; set; }
    public double CommissionPercentage { get; set; }
    public double Earning { get; set; }
}

public class ReportFilterDc
{
    public int cityid { get; set; }
    public List<int> warehouseids { get; set; }
    public List<int> storeids { get; set; }
    public int Month { get; set; }
    public int Year { get; set; }
}
public class ExportAllExecutiveAttendenceForReportDC
{
    public int Year { get; set; }
    public int Month { get; set; }
    public List<int> StoreIDs { get; set; }
    public List<int> ChannelMasterId { get; set; }
    public List<int> WarehousIds { get; set; }
}
public class UdharOverDueResponse
{
    public bool IsUdharOverDue { get; set; }

    public string Message { get; set; }
    public bool Status { get; set; }
    public object Data { get; set; }
    public bool LastPhysicalvisit { get; set; }
}

public class ChannelTypeListDc
{
    public int PeopleID { get; set; }
    public long ChannelMasterId { get; set; }
}
#endregion