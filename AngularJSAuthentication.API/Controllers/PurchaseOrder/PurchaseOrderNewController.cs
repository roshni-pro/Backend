using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using AgileObjects.AgileMapper;
using AngularJSAuthentication.API.Helper;
using AngularJSAuthentication.API.Helper.AdjustmentPO;
using AngularJSAuthentication.BusinessLayer.Managers.Reports;
using AngularJSAuthentication.BusinessLayer.PackingMaterial.BO;
using AngularJSAuthentication.Common.Enums;
using AngularJSAuthentication.DataContracts.ROC;
using AngularJSAuthentication.DataContracts.Shared;
using AngularJSAuthentication.DataContracts.Transaction.PurchaseOrder;
using AngularJSAuthentication.Model;
using AngularJSAuthentication.Model.GDN;
using AngularJSAuthentication.Model.PurchaseOrder;
using NLog;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Transactions;
using System.Web.Http;
using AngularJSAuthentication.DataContracts.External.SalesAppDc;
using AngularJSAuthentication.Model.JustInTime;
using AngularJSAuthentication.Common.Helpers;
using System.Text;
using AngularJSAuthentication.API.ControllersReports;
using AngularJSAuthentication.Model.Base.Audit;
using AngularJSAuthentication.API.Helpers;
using LinqKit;
using System.Web;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Web.Script.Serialization;

namespace AngularJSAuthentication.API.Controllers.PurchaseOrder
{
    [RoutePrefix("api/PurchaseOrderNew")]
    public class PurchaseOrderNewController : ApiController
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();
        private static TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime indianTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, INDIAN_ZONE);

        /// <summary>
        /// Add PO as Draft Manual PO
        /// </summary>
        /// <param name="pdata"></param>
        /// <returns></returns>
        [Route("SavePO")]
        [AcceptVerbs("POST")]
        public POResult SavePO(List<POdata> pdata)
        {
            POResult pOResult = new POResult();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (AuthContext db = new AuthContext())
            {
                using (var dbContextTransaction = db.Database.BeginTransaction())
                {

                    #region get Estimate amount
                    /// Get Estimate amount
                    People p = db.Peoples.Where(a => a.PeopleID == userid).FirstOrDefault();
                    var ItemIds = pdata.Select(x => x.ItemId).ToList();
                    var warehouseId = pdata.FirstOrDefault().WarehouseId;
                    bool IsDraft = pdata.FirstOrDefault().IsDraft;
                    var buyerId = pdata.FirstOrDefault().BuyerId;
                    var supplierId = pdata.FirstOrDefault().SupplierId;
                    var warehouse = db.Warehouses.Where(a => a.WarehouseId == warehouseId).SingleOrDefault();
                    People buyer = db.Peoples.Where(a => a.PeopleID == buyerId).SingleOrDefault();
                    var depoId = pdata.FirstOrDefault().DepoId;
                    DepoMaster Depo = db.DepoMasters.Where(d => d.DepoId == depoId).FirstOrDefault();
                    List<ItemMaster> Items = new List<ItemMaster>();
                    var supplier = db.Suppliers.Where(s => s.SupplierId == supplierId).SingleOrDefault();

                    if (ItemIds != null && ItemIds.Any())
                    {
                        Items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == warehouseId).ToList();
                        foreach (var data in pdata)
                        {
                            var item = Items.FirstOrDefault(x => x.ItemId == data.ItemId);
                            int qty = data.Noofset * item.PurchaseMinOrderQty;
                            // ETtlamt += (Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3) * qty);
                            ETtlamt += Convert.ToDouble(item.POPurchasePrice) * qty;
                        }
                    }
                    #endregion

                    PurchaseOrderMaster pm = new PurchaseOrderMaster();
                    pm.SupplierId = supplier.SupplierId;
                    pm.SupplierName = supplier.Name;
                    pm.CreationDate = indianTime;
                    pm.WarehouseId = warehouse.WarehouseId;
                    pm.CompanyId = compid;
                    pm.WarehouseName = warehouse.WarehouseName;
                    pm.Status = IsDraft ? "Draft" : "pending";
                    pm.progress = "0";
                    pm.PoType = "Manual";
                    pm.ETotalAmount = ETtlamt;
                    pm.BuyerId = buyer.PeopleID;
                    pm.BuyerName = buyer.DisplayName;
                    pm.Active = true;
                    pm.SupplierCreditDay = pdata.FirstOrDefault().SupplierCreditDay;
                    pm.PickerType = pdata.FirstOrDefault().PickerType;
                    pm.IsCashPurchase = pdata.FirstOrDefault().IsCashPurchase;
                    pm.CashPurchaseName = pdata.FirstOrDefault().CashPurchaseName;
                    pm.Advance_Amt = pdata.FirstOrDefault().Advance_Amt;
                    pm.DepoId = Depo != null ? Depo.DepoId : 0;
                    pm.DepoName = Depo != null ? Depo.DepoName : null;
                    pm.CreatedBy = p.PeopleFirstName + " " + p.PeopleLastName;
                    pm.PurchaseOrderDetail = new List<PurchaseOrderDetail>();
                    for (var i = 0; i < pdata.ToList().Count(); i++)
                    {
                        int supplierid = Convert.ToInt32(pdata[i].SupplierId);
                        int itemid = Convert.ToInt32(pdata[i].ItemId);
                        var item = Items.Where(z => z.ItemId == itemid).FirstOrDefault();

                        PurchaseOrderDetail pd = new PurchaseOrderDetail();
                        int qty = 0;
                        if (item.Type == 2)
                        {
                            int ConvertInPieces = Conversion(item.Number, pdata[i].ConvertPurchaseOrder, db);
                            qty = pdata[i].Noofset * ConvertInPieces;
                        }
                        else
                        {
                            qty = pdata[i].Noofset * pdata[i].PurchaseMinOrderQty;
                        }
                        pd.ItemId = item.ItemId;
                        pd.ItemNumber = item.Number;
                        pd.itemBaseName = item.itemBaseName;
                        pd.ItemMultiMRPId = item.ItemMultiMRPId;
                        pd.HSNCode = item.HSNCode;
                        pd.MRP = item.price;
                        pd.SellingSku = item.SellingSku;
                        pd.ItemName = item.itemname;
                        pd.PurchaseQty = qty;
                        pd.CreationDate = indianTime;
                        pd.Status = "ordered";
                        pd.MOQ = item.PurchaseMinOrderQty;

                        if (item.POPurchasePrice == null || item.POPurchasePrice == 0)
                        {
                            pd.Price = Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3); //With tax net purchase price add by raj   
                        }
                        else
                        {
                            pd.Price = item.POPurchasePrice ?? 0;
                        }
                        pd.WarehouseId = item.WarehouseId;
                        pd.CompanyId = item.CompanyId;
                        pd.WarehouseName = item.WarehouseName;
                        pd.SupplierId = supplier.SupplierId;
                        pd.SupplierName = supplier.Name;
                        pd.TotalQuantity = Convert.ToInt32(pd.PurchaseQty);
                        pd.PurchaseName = item.PurchaseUnitName;
                        pd.PurchaseSku = item.PurchaseSku;
                        pd.DepoId = Depo != null ? Depo.DepoId : 0; ;
                        pd.DepoName = Depo != null ? Depo.DepoName : null;
                        pd.ConversionFactor = item.PurchaseMinOrderQty;
                        pm.PurchaseOrderDetail.Add(pd);
                    }


                    #region level allocation
                    if (!IsDraft)
                    {
                        PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == warehouseId).FirstOrDefault();
                        if (get_approvalz != null)
                        {
                            if (get_approvalz.Level == "Level1")  /// Self Approved
                            {
                                pm.Status = "Self Approved";
                                pm.progress = "50";
                                pm.Level = "Level1";
                                pm.Approval1 = 0;
                                pm.Approval2 = 0;
                                pm.Approval3 = 0;
                                pm.Approval4 = 0;
                                pm.Approval5 = 0;
                                pm.ApprovalName1 = pm.CreatedBy;
                                pm.Rewiever1 = 0;
                                pm.Rewiever2 = 0;
                                pm.Rewiever3 = 0;
                                pm.Rewiever4 = 0;
                                pm.Rewiever5 = 0;
                                pm.ApprovedBy = pm.CreatedBy;

                            }
                            else /// Send for approval
                            {
                                pm.Status = "Send for Approval";
                                pm.progress = "20";
                                pm.Level = get_approvalz.Level;
                                pm.Approval1 = get_approvalz.Approval1;
                                pm.Approval2 = get_approvalz.Approval2;
                                pm.Approval3 = get_approvalz.Approval3;
                                pm.Approval4 = get_approvalz.Approval4;
                                pm.Approval5 = get_approvalz.Approval5;
                                pm.Rewiever1 = get_approvalz.Reviewer1;
                                pm.Rewiever2 = get_approvalz.Reviewer2;
                                pm.Rewiever3 = get_approvalz.Reviewer3;
                                pm.Rewiever4 = get_approvalz.Reviewer4;
                                pm.Rewiever5 = get_approvalz.Reviewer5;
                                pm.ApprovalName1 = get_approvalz.ApprovalName1;
                                pm.ApprovalName2 = get_approvalz.ApprovalName2;
                                pm.ApprovalName3 = get_approvalz.ApprovalName3;
                                pm.ApprovalName4 = get_approvalz.ApprovalName4;
                                pm.ApprovalName5 = get_approvalz.ApprovalName5;
                                pm.RewieverName1 = get_approvalz.ReviewerName1;
                                pm.RewieverName2 = get_approvalz.ReviewerName2;
                                pm.RewieverName3 = get_approvalz.ReviewerName3;
                                pm.RewieverName4 = get_approvalz.ReviewerName4;
                                pm.RewieverName5 = get_approvalz.ReviewerName5;
                            }
                        }
                    }
                    #endregion

                    db.DPurchaseOrderMaster.Add(pm);
                    string potype = (IsDraft ? "draft" : "");
                    if (db.Commit() > 0)
                    {
                        dbContextTransaction.Commit();

                        if (pm.Level != "Level1" && !IsDraft)
                        {
                            Sms s = new Sms();
                            //ShopKirana PR id: {#var#} are waiting for your approval.
                            // string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + " is waiting for your approval. ShopKirana";
                            string msg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            msg = dltSMS == null ? "" : dltSMS.Template;
                            msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                            string Mob = db.Peoples.Where(q => q.PeopleID == pm.Approval1).Select(q => q.Mobile).SingleOrDefault();
                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                        }
                        else if (pm.Level == "Level1" && !IsDraft)
                        {
                            ///Send SMS & Notification To Supplier
                            Sms s = new Sms();
                            // string msg = " ShopKirana raise New PO " + pm.PurchaseOrderId + " : for amount " + Math.Round(ETtlamt, 2) + " : In Hub: " + pm.WarehouseName + ".ShopKirana ";
                            string msg = ""; //"ShopKirana raise New PO {#var1#} : for amount {#var2#} : In Hub: {#var3#}.ShopKirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PO_Raise");
                            msg = dltSMS == null ? "" : dltSMS.Template;
                            msg = msg.Replace("{#var1#}", pm.PurchaseOrderId.ToString());
                            msg = msg.Replace("{#var2#}", Math.Round(ETtlamt, 2).ToString());
                            msg = msg.Replace("{#var3#}", pm.WarehouseName.ToString());
                            string Mob = supplier?.MobileNo;
                            string FCMID = supplier?.fcmId;
                            string FCMNotification = "{title:'New PO Generated',body:'" + msg + "',icon:'',notify_type:'PO',ObjectId:" + pm.PurchaseOrderId + "}";

                            if (!string.IsNullOrEmpty(Mob) && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                            if (!string.IsNullOrEmpty(FCMID)) { s.SupplierSendNotification(FCMID, FCMNotification); }
                        }
                        pOResult.Status = true;
                        pOResult.Message = "PO save " + potype + " successfuly. PO # " + pm.PurchaseOrderId;
                    }
                    else
                    {
                        dbContextTransaction.Rollback();
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during save po " + potype;
                    }
                }
            }

            return pOResult;
        }

        /// <summary>
        /// Add PO as Draft Manual PO
        /// </summary>
        /// <param name="pdata"></param>
        /// <returns></returns>
        [Route("SavePR")]
        [AcceptVerbs("POST")]
        public POResult SavePR(List<POdata> pdata)
        {
            POResult pOResult = new POResult();
            pOResult.Status = true;
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (AuthContext db = new AuthContext())
            {
                PurchaseOrderMaster poinvoicedata = new PurchaseOrderMaster();
                var warehouseids = pdata.Select(x => x.WarehouseId).Distinct().ToList();
                List<Warehouse> WHIDS = db.Warehouses.Where(x => warehouseids.Contains(x.WarehouseId)).ToList();
                string PRId = "";
                foreach (var wH in WHIDS)
                {

                    using (var dbContextTransaction = db.Database.BeginTransaction())
                    {
                        var pdList = pdata.Where(x => x.WarehouseId == wH.WarehouseId).ToList();
                        var prpaymenttype = pdata.FirstOrDefault().PRPaymentType;
                        var supplierId = pdList.FirstOrDefault().SupplierId;
                        var supplier = db.Suppliers.Where(s => s.SupplierId == supplierId).SingleOrDefault();
                        if (supplier != null &&
                            ((supplier.IsStopAdvancePr.HasValue && supplier.IsStopAdvancePr.Value)
                            || (supplier.CibilScore.HasValue && supplier.CibilScore.Value < 699))
                            && prpaymenttype == "AdvancePR")
                        {
                            pOResult.Status = false;
                            pOResult.Message = "Advance PR can't generated for this supplier due to less Cibil Score (Less than 700) Or Stop Advance PR.";
                        }

                        //if (supplier != null && (!string.IsNullOrEmpty(supplier.TINNo) && (supplier.TINNo == "09BWHPG7063H2ZA" || supplier.GstInNumber == "09BWHPG7063H2ZA")))
                        //{
                        //    pOResult.Status = false;
                        //    pOResult.Message = "PR can't generated for this supplier due block this supplier.";
                        //}
                        if (pOResult.Status)
                        {
                            #region get Estimate amount
                            /// Get Estimate amount
                            double ETtlamt = 0;

                            People p = db.Peoples.Where(a => a.PeopleID == userid).FirstOrDefault();
                            var ItemIds = pdList.Select(x => x.ItemId).ToList();
                            var buyerId = pdata.FirstOrDefault().BuyerId;

                            People buyer = db.Peoples.Where(a => a.PeopleID == buyerId).SingleOrDefault();
                            var warehouse = db.Warehouses.Where(a => a.WarehouseId == wH.WarehouseId).SingleOrDefault();
                            var depoId = pdList.FirstOrDefault().DepoId;
                            DepoMaster Depo = db.DepoMasters.Where(d => d.DepoId == depoId).FirstOrDefault();
                            List<ItemMaster> Items = new List<ItemMaster>();

                            #region Stop New PR on Buyer wise 

                            SqlParameter param = new SqlParameter()
                            {
                                ParameterName = "@buyerid",
                                Value = buyer.PeopleID
                            };
                            int setPOcloseCnt = Convert.ToInt32(ConfigurationManager.AppSettings["OpenPOcountBuyerforClose"]);
                            int DaysofPOcountBuyerforClose = Convert.ToInt32(ConfigurationManager.AppSettings["DaysofPOcountBuyerforClose"]);
                            int cnt = db.Database.SqlQuery<int>("getOpenPOcountBuyerWise @buyerid", param).FirstOrDefault();
                            if (cnt >= setPOcloseCnt && cnt > 0)
                            {
                                pOResult.Status = false;
                                pOResult.Message = "Your " + cnt + " PO are open more than " + DaysofPOcountBuyerforClose + " days so you can't create new PO ";
                                return pOResult;
                            }
                            #endregion 


                            if (ItemIds != null && ItemIds.Any())
                            {
                                Items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == wH.WarehouseId).ToList();
                            }
                            #endregion

                            PurchaseOrderMaster pm = new PurchaseOrderMaster();
                            pm.SupplierId = supplier.SupplierId;
                            pm.SupplierName = supplier.Name;
                            pm.CreationDate = indianTime;
                            pm.WarehouseId = warehouse.WarehouseId;
                            pm.CompanyId = compid;
                            pm.WarehouseName = warehouse.WarehouseName;
                            pm.Status = "pending";
                            pm.progress = "0";
                            pm.PRType = 1;
                            pm.PRStatus = 1;
                            pm.PoType = pdata.FirstOrDefault().YesDemandId > 0 ? "Auto PR" : "Manual";
                            pm.IsPR = true;
                            pm.BuyerId = buyer.PeopleID;
                            pm.BuyerName = buyer.DisplayName;
                            pm.Active = true;

                            // pm.SupplierCreditDay = pdata.FirstOrDefault().SupplierCreditDay;
                            pm.PickerType = pdata.FirstOrDefault().PickerType;
                            pm.IsCashPurchase = pdList.FirstOrDefault().IsCashPurchase;
                            pm.CashPurchaseName = pdList.FirstOrDefault().CashPurchaseName;
                            pm.Advance_Amt = pdata.FirstOrDefault().Advance_Amt;
                            pm.DepoId = Depo != null ? Depo.DepoId : 0;
                            pm.DepoName = Depo != null ? Depo.DepoName : null;
                            pm.CreatedBy = p.PeopleFirstName + " " + p.PeopleLastName;
                            pm.PRPaymentType = pdata.FirstOrDefault().PRPaymentType;
                            pm.FreightCharge = pdata.FirstOrDefault().FreightCharge;

                            pm.IsDirectSupplier = pdata.FirstOrDefault().BusinessType;
                            //pm.ExpiryDays = db.Suppliers.Where(x => x.SupplierId == supplier.SupplierId).Select(y => y.ExpiryDays).FirstOrDefault();
                            pm.ExpiryDays = supplier.ExpiryDays > 0 ? supplier.ExpiryDays : 7;
                            //pm.Status = "PR Send for Approval";
                            pm.PurchaseOrderDetail = new List<PurchaseOrderDetail>();

                            for (var i = 0; i < pdList.ToList().Count(); i++)
                            {

                                PurchaseOrderDetail pd = new PurchaseOrderDetail();
                                int supplierid = Convert.ToInt32(pdata[i].SupplierId);
                                int itemid = Convert.ToInt32(pdList[i].ItemId);
                                var item = Items.Where(z => z.ItemId == itemid).FirstOrDefault();
                                int qty = 0;
                                // ETtlamt += (Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3) * qty);

                                if (item.Type == 2)
                                {
                                    int ConvertInPieces = Conversion(item.Number, pdata[i].PurchaseMinOrderQty, db);
                                    qty = pdata[i].Noofset * ConvertInPieces;
                                }
                                else
                                {
                                    qty = pdata[i].Noofset * pdata[i].PurchaseMinOrderQty;
                                }
                                #region forecast
                                if (db.ItemForeCastCitys.Any(x => x.WarehouseId == pm.WarehouseId && x.IsActive == true && x.IsDeleted == false))
                                {
                                    var forecastitem = GetEligibleQtyForPo(pm.WarehouseId, item.ItemMultiMRPId);
                                    if (forecastitem != null)
                                    {
                                        if (forecastitem.QtyForAction < qty && forecastitem.QtyForAction > 0)
                                        {
                                            pOResult.Message = "you can purchase item qty upto : " + forecastitem.QtyForAction + "For item " + item.itemname;
                                            pOResult.Status = false;
                                            return pOResult;
                                        }
                                        else if (forecastitem.QtyForAction < 0)
                                        {
                                            pOResult.Message = "you can't purchase item " + item.itemname + " (forecast item)";
                                            pOResult.Status = false;
                                            return pOResult;
                                        }
                                    }
                                }
                                #endregion

                                //var qty = pdList[i].Noofset * pdList[i].PurchaseMinOrderQty;
                                ETtlamt += Convert.ToDouble(item.POPurchasePrice) * qty;

                                pd.ItemId = item.ItemId;
                                pd.ItemNumber = item.Number;
                                pd.itemBaseName = item.itemBaseName;
                                pd.ItemMultiMRPId = item.ItemMultiMRPId;
                                pd.HSNCode = item.HSNCode;
                                pd.MRP = item.price;
                                pd.SellingSku = item.SellingSku;
                                pd.ItemName = item.itemname;
                                pd.PurchaseQty = qty;
                                pd.CreationDate = indianTime;
                                pd.Status = "ordered";
                                pd.MOQ = item.PurchaseMinOrderQty;

                                if (item.POPurchasePrice == null || item.POPurchasePrice == 0)
                                {
                                    pd.Price = Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3); //With tax net purchase price add by raj   
                                }
                                else
                                {
                                    pd.Price = item.POPurchasePrice ?? 0;
                                }


                                pd.WarehouseId = item.WarehouseId;
                                pd.CompanyId = item.CompanyId;
                                pd.WarehouseName = item.WarehouseName;
                                pd.SupplierId = supplier.SupplierId;
                                pd.SupplierName = supplier.Name;
                                pd.TotalQuantity = Convert.ToInt32(pd.PurchaseQty);
                                pd.PurchaseName = item.PurchaseUnitName;
                                pd.PurchaseSku = item.PurchaseSku;
                                pd.DepoId = Depo != null ? Depo.DepoId : 0;
                                pd.DepoName = Depo != null ? Depo.DepoName : null;
                                pd.ConversionFactor = item.PurchaseMinOrderQty;
                                pd.Category = pdList[i].Category;
                                pd.Weight = pdList[i].Weight;
                                pd.WeightType = pdList[i].WeightType;
                                pd.WeightInGram = pdList[i].WeightInGram;
                                pm.PurchaseOrderDetail.Add(pd);

                                if (pdata[i].YesDemandId > 0)
                                {
                                    var ydid = pdata[i].YesDemandId;

                                    var yesterdaydemand = db.YesterdayDemandForPRDB.Where(x => x.Id == ydid).FirstOrDefault();
                                    if (yesterdaydemand != null)
                                    {
                                        int remainingqty = Math.Abs(yesterdaydemand.Demand) - qty;
                                        yesterdaydemand.Demand = remainingqty <= 0 ? remainingqty : (-1) * remainingqty;
                                        yesterdaydemand.IsPRcreated = remainingqty <= 0 ? true : false;
                                        yesterdaydemand.IsUpdated = remainingqty <= 0 ? true : false;
                                        db.Entry(yesterdaydemand).State = EntityState.Modified;
                                    }
                                }
                            }

                            pm.ETotalAmount = ETtlamt;


                            var settledAmt = pdata.LastOrDefault().PRCloseDc != null && pdata.LastOrDefault().PRCloseDc.Any() ? pdata.LastOrDefault().PRCloseDc.Sum(x => x.Total) : 0;
                            if (pm.ETotalAmount <= settledAmt)
                            {
                                pm.PRPaymentType = "AdvancePR";
                            }

                            if (prpaymenttype == "AdvancePR")
                            {
                                pm.SupplierCreditDay = 0;
                            }
                            else
                            {
                                pm.SupplierCreditDay = pdata.FirstOrDefault().SupplierCreditDay;

                            }
                            pm.IsAdjustmentPo = pdata.LastOrDefault().PRCloseDc != null && pdata.LastOrDefault().PRCloseDc.Any() && WHIDS.Count == 1 ? true : false;
                            pm.ETADate = pdata.FirstOrDefault(x => x.WarehouseId == wH.WarehouseId)?.ETAdate;



                            db.DPurchaseOrderMaster.Add(pm);



                            #region level allocation
                            if (ETtlamt >= 0)
                            {
                                PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == wH.WarehouseId).FirstOrDefault();
                                if (get_approvalz != null)
                                {
                                    if (get_approvalz.Level == "Level1")  /// Self Approved
                                    {
                                        pm.Status = "PR Send for Approval";
                                        pm.progress = "50";
                                        pm.Level = "Level1";
                                        pm.Approval1 = 0;
                                        pm.Approval2 = 0;
                                        pm.Approval3 = 0;
                                        pm.Approval4 = 0;
                                        pm.Approval5 = 0;
                                        pm.ApprovalName1 = pm.CreatedBy;
                                        pm.Rewiever1 = 0;
                                        pm.Rewiever2 = 0;
                                        pm.Rewiever3 = 0;
                                        pm.Rewiever4 = 0;
                                        pm.Rewiever5 = 0;
                                        // pm.ApprovedBy = pm.CreatedBy;
                                    }
                                    else /// Send for approval
                                    {
                                        pm.Status = "PR Send for Approval";
                                        pm.progress = "20";
                                        pm.Level = get_approvalz.Level;
                                        pm.Approval1 = get_approvalz.Approval1;
                                        pm.Approval2 = get_approvalz.Approval2;
                                        pm.Approval3 = get_approvalz.Approval3;
                                        pm.Approval4 = get_approvalz.Approval4;
                                        pm.Approval5 = get_approvalz.Approval5;
                                        pm.Rewiever1 = get_approvalz.Reviewer1;
                                        pm.Rewiever2 = get_approvalz.Reviewer2;
                                        pm.Rewiever3 = get_approvalz.Reviewer3;
                                        pm.Rewiever4 = get_approvalz.Reviewer4;
                                        pm.Rewiever5 = get_approvalz.Reviewer5;
                                        pm.ApprovalName1 = get_approvalz.ApprovalName1;
                                        pm.ApprovalName2 = get_approvalz.ApprovalName2;
                                        pm.ApprovalName3 = get_approvalz.ApprovalName3;
                                        pm.ApprovalName4 = get_approvalz.ApprovalName4;
                                        pm.ApprovalName5 = get_approvalz.ApprovalName5;
                                        pm.RewieverName1 = get_approvalz.ReviewerName1;
                                        pm.RewieverName2 = get_approvalz.ReviewerName2;
                                        pm.RewieverName3 = get_approvalz.ReviewerName3;
                                        pm.RewieverName4 = get_approvalz.ReviewerName4;
                                        pm.RewieverName5 = get_approvalz.ReviewerName5;
                                    }
                                }
                            }
                            #endregion

                            if (db.Commit() > 0)
                            {


                                if (pdata.Any(x => x.YesDemandId > 0))
                                {
                                    List<YesterdayDemandPO_Mapping> yesMappings = new List<YesterdayDemandPO_Mapping>();
                                    foreach (var item in pdata.Where(x => x.YesDemandId > 0))
                                    {
                                        YesterdayDemandPO_Mapping mapping = new YesterdayDemandPO_Mapping()
                                        {
                                            PurchaseOrderId = pm.PurchaseOrderId,
                                            Qty = item.Noofset * item.PurchaseMinOrderQty,
                                            YesterdayDemandForPRId = item.YesDemandId,
                                            IsActive = true,
                                            IsDeleted = false,
                                            CreatedBy = userid,
                                            CreatedDate = DateTime.Now
                                        };
                                        yesMappings.Add(mapping);
                                    }
                                    db.YesterdayDemandPO_MappingDB.AddRange(yesMappings);
                                    db.Commit();
                                }

                                dbContextTransaction.Commit();
                                #region ClosedPOClosed
                                var PRCloseDcList = pdata.LastOrDefault().PRCloseDc;
                                if (PRCloseDcList != null && PRCloseDcList.Count > 0 && pm.IsAdjustmentPo)
                                {

                                    AdjustmentPOHelper pOHelper = new AdjustmentPOHelper();
                                    int i = pOHelper.Adjustment(PRCloseDcList, ETtlamt, pm.PurchaseOrderId, userid);
                                }
                                #endregion
                                var POrderId = new SqlParameter("@Poid", pm.PurchaseOrderId);
                                poinvoicedata = db.Database.SqlQuery<PurchaseOrderMaster>("exec Sp_getpoinvoicenumber @Poid", POrderId).FirstOrDefault();
                                pm.PoInvoiceNo = poinvoicedata.PoInvoiceNo;
                                db.Entry(pm).State = EntityState.Modified;
                                pOResult.Status = true;
                                PRId += string.IsNullOrEmpty(PRId) ? pm.PurchaseOrderId.ToString() : "," + pm.PurchaseOrderId.ToString();
                                pOResult.Message = "PR save successfuly. PR # " + pm.PurchaseOrderId;
                            }

                            if (pOResult.Status == true)
                            {
                                var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                                var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                                if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                                {
                                    var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                                    var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                                    //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                                    ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                                    var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                    if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                                    }

                                    if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();
                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                            foreach (var item in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = item;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var item in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = item;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion

                                        var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();
                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = item.PeopleId;
                                                //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pm.Status = "Approved";
                                                pm.PRStatus = 3;
                                                pm.BuyerId = BuyerId;
                                                pm.BuyerName = buyerName;
                                                db.Entry(pm).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (check == null)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            foreach (var item in createPRAppovers)
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }
                                        }

                                    }
                                    else
                                    {
                                        string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                        var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                        smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                        smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                                        var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                        ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                                        if (ApprovePersonss != null && ApprovePersonss.Any())
                                        {
                                            var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                            List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                            // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                            List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                            if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                            {
                                                //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                                finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                            }
                                            else
                                            {
                                                //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                                finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                            }

                                            if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                            {
                                                #region getPeople
                                                DataTable dtemail = new DataTable();
                                                dtemail.Columns.Add("stringValue");
                                                DataTable dtrole = new DataTable();
                                                dtrole.Columns.Add("stringValue");
                                                if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                                {
                                                    List<string> emaillst = new List<string>();

                                                    string EmailIds = "";
                                                    EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                    emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                    foreach (var item in emaillst)
                                                    {
                                                        var dr = dtemail.NewRow();
                                                        dr["stringValue"] = item;
                                                        dtemail.Rows.Add(dr);
                                                    }

                                                }
                                                else
                                                {
                                                    List<string> rolelst = new List<string>();
                                                    string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                                    rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                    foreach (var item in rolelst)
                                                    {
                                                        var dr = dtrole.NewRow();
                                                        dr["stringValue"] = item;
                                                        dtrole.Rows.Add(dr);
                                                    }
                                                }


                                                var paremail = new SqlParameter("emailIds", dtemail);
                                                paremail.SqlDbType = SqlDbType.Structured;
                                                paremail.TypeName = "dbo.StringValues";

                                                var pareroles = new SqlParameter("roles", dtemail);
                                                paremail.SqlDbType = SqlDbType.Structured;
                                                paremail.TypeName = "dbo.StringValues";
                                                var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                                if (db.Database.Connection.State != ConnectionState.Open)
                                                    db.Database.Connection.Open();

                                                var cmd = db.Database.Connection.CreateCommand();
                                                cmd.CommandText = "GetCreatePRApprovallist";
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.CommandTimeout = 600;
                                                cmd.Parameters.Add(paremail);
                                                cmd.Parameters.Add(pareroles);
                                                cmd.Parameters.Add(pareWh);

                                                var reader = cmd.ExecuteReader();
                                                List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                    .ObjectContext
                                                                    .Translate<BuyerMinDc>(reader).ToList();
                                                db.Database.Connection.Close();
                                                #endregion
                                                var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                                if (data.Count > 0 && data != null)
                                                {
                                                    foreach (var item in createPRAppovers)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                        var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                        string querys1 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                        List<int> Ids = db.Database.SqlQuery<int>(querys1).ToList();
                                                        if (Ids.Count > 0)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = item.PeopleId;
                                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                            pr.IsApprove = 1;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.Comments = "Approved By :" + name;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }
                                                        else
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = item.PeopleId;
                                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }

                                                        //if (!PRStatusData)
                                                        //{
                                                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        //    pr.ApprovalID = item.PeopleId;
                                                        //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        //    pr.IsApprove = 1;
                                                        //    pr.IsActive = true;
                                                        //    pr.IsDeleted = false;
                                                        //    pr.Comments = "Approved By :" + name;
                                                        //    pr.CreatedDate = DateTime.Now;
                                                        //    db.PRApprovelsStatus.Add(pr);
                                                        //    db.Commit();
                                                        //}
                                                    }
                                                    var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                                    if (prapprov.All(x => x.IsApprove == 1))
                                                    {
                                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                        pm.Status = "Approved";
                                                        pm.PRStatus = 3;
                                                        pm.BuyerId = BuyerId;
                                                        pm.BuyerName = buyerName;
                                                        db.Entry(pm).State = EntityState.Modified;

                                                        if (db.Commit() > 0)
                                                        {
                                                            //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                            //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                            var roleName = "";
                                                            foreach (var store in storeIds)
                                                            {
                                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                            }
                                                            if (!string.IsNullOrEmpty(roleName))
                                                            {
                                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                          roleName);

                                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                                if (!check)
                                                                {
                                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                    pRPaymentAppoved.CreatedBy = userid;
                                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                    pRPaymentAppoved.IsApproved = false;
                                                                    pRPaymentAppoved.IsActive = true;
                                                                    pRPaymentAppoved.IsDeleted = false;
                                                                    pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                                }
                                                                Sms s = new Sms();
                                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                                db.Commit();
                                                            }

                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    foreach (var item in createPRAppovers)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!PRStatusData)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = item.PeopleId;
                                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }
                                                }


                                            }
                                            else
                                            {
                                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                                var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                                if (BDs == null)
                                                    BDs = new List<BuyerMinDc>();
                                                BDs.AddRange(buyerMinDcs);


                                                if (BDs != null && BDs.Any())
                                                {
                                                    foreach (var BD in BDs)
                                                    {
                                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                        if (ActivePeople != null && WarePermission != null)
                                                        {
                                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                            if (PRStatusData == null)
                                                            {
                                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                                pr.IsApprove = 0;
                                                                pr.IsActive = true;
                                                                pr.IsDeleted = false;
                                                                pr.CreatedDate = DateTime.Now;
                                                                pr.ModifiedDate = DateTime.Now;
                                                                db.PRApprovelsStatus.Add(pr);
                                                                Sms s = new Sms();
                                                                string msg = smsTempmsg;
                                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                                db.Commit();
                                                            }
                                                        }
                                                        else
                                                        {

                                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                            if (PRStatusData == null)
                                                            {
                                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                                pr.ApprovalID = pm.BuyerId.Value;
                                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                                pr.IsApprove = 0;
                                                                pr.IsActive = true;
                                                                pr.IsDeleted = false;
                                                                pr.CreatedDate = DateTime.Now;
                                                                pr.ModifiedDate = DateTime.Now;
                                                                db.PRApprovelsStatus.Add(pr);
                                                                Sms s = new Sms();
                                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                                db.Commit();
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pm.BuyerId.Value;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                        db.Commit();
                                                    }
                                                }
                                            }

                                        }

                                    }

                                }
                                else
                                {
                                    string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                    smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                    smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                                    var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                                    ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();

                                    if (ApprovePersons != null && ApprovePersons.Any())
                                    {
                                        var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                        List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                        // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                        List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                        if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                        {
                                            //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                        }
                                        else
                                        {
                                            //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                        }

                                        if (finalApprovePersons != null && finalApprovePersons.Any())
                                        {
                                            #region getPeople
                                            DataTable dtemail = new DataTable();
                                            dtemail.Columns.Add("stringValue");
                                            DataTable dtrole = new DataTable();
                                            dtrole.Columns.Add("stringValue");
                                            if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                            {
                                                List<string> emaillst = new List<string>();

                                                string EmailIds = "";
                                                EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                foreach (var item in emaillst)
                                                {
                                                    var dr = dtemail.NewRow();
                                                    dr["stringValue"] = item;
                                                    dtemail.Rows.Add(dr);
                                                }

                                            }
                                            else
                                            {
                                                List<string> rolelst = new List<string>();
                                                string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                                rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                foreach (var item in rolelst)
                                                {
                                                    var dr = dtrole.NewRow();
                                                    dr["stringValue"] = item;
                                                    dtrole.Rows.Add(dr);
                                                }
                                            }


                                            var paremail = new SqlParameter("emailIds", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";

                                            var pareroles = new SqlParameter("roles", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";
                                            var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                            if (db.Database.Connection.State != ConnectionState.Open)
                                                db.Database.Connection.Open();

                                            var cmd = db.Database.Connection.CreateCommand();
                                            cmd.CommandText = "GetCreatePRApprovallist";
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.CommandTimeout = 600;
                                            cmd.Parameters.Add(paremail);
                                            cmd.Parameters.Add(pareroles);
                                            cmd.Parameters.Add(pareWh);

                                            var reader = cmd.ExecuteReader();
                                            List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                .ObjectContext
                                                                .Translate<BuyerMinDc>(reader).ToList();
                                            db.Database.Connection.Close();
                                            #endregion
                                            var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                            if (data.Count > 0 && data != null)
                                            {
                                                foreach (var item in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    string querys2 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                    List<int> Ids = db.Database.SqlQuery<int>(querys2).ToList();

                                                    if (Ids.Count > 0)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 1;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.Comments = "Approved By :" + name;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    else
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    //if (!PRStatusData)
                                                    //{
                                                    //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //    pr.ApprovalID = item.PeopleId;
                                                    //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    //    pr.IsApprove = 1;
                                                    //    pr.IsActive = true;
                                                    //    pr.IsDeleted = false;
                                                    //    pr.Comments = "Approved By :" + name;
                                                    //    pr.CreatedDate = DateTime.Now;
                                                    //    db.PRApprovelsStatus.Add(pr);
                                                    //    db.Commit();
                                                    //}
                                                }
                                                var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                                if (prapprov.All(x => x.IsApprove == 1))
                                                {
                                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                    pm.Status = "Approved";
                                                    pm.PRStatus = 3;
                                                    pm.BuyerId = BuyerId;
                                                    pm.BuyerName = buyerName;
                                                    db.Entry(pm).State = EntityState.Modified;

                                                    if (db.Commit() > 0)
                                                    {
                                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                        //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                        var roleName = "";
                                                        foreach (var store in storeIds)
                                                        {
                                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                        }
                                                        if (!string.IsNullOrEmpty(roleName))
                                                        {
                                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                      roleName);

                                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                            if (!check)
                                                            {
                                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                pRPaymentAppoved.CreatedBy = userid;
                                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                pRPaymentAppoved.IsApproved = false;
                                                                pRPaymentAppoved.IsActive = true;
                                                                pRPaymentAppoved.IsDeleted = false;
                                                                pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                            }
                                                            Sms s = new Sms();
                                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                            msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                            db.Commit();
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var item in createPRAppovers)
                                                {
                                                    //if (ETtlamt <= 2500000)
                                                    //{
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!PRStatusData)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    //}
                                                    //else
                                                    //{
                                                    //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    //    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    //    if (!PRStatusData)
                                                    //    {
                                                    //        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //        pr.ApprovalID = item.PeopleId;
                                                    //        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    //        pr.IsApprove = 1;
                                                    //        pr.Comments = "Approved By :" + name;
                                                    //        pr.IsActive = true;
                                                    //        pr.IsDeleted = false;
                                                    //        pr.CreatedDate = DateTime.Now;
                                                    //        db.PRApprovelsStatus.Add(pr);
                                                    //        db.Commit();
                                                    //    }
                                                    //}
                                                }
                                            }


                                        }

                                        if (ETtlamt > 2500000)
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pm.Status = "Approved";
                                            pm.PRStatus = 3;
                                            pm.BuyerId = BuyerId;
                                            pm.BuyerName = buyerName;
                                            db.Entry(pm).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                        if (BDs == null)
                                            BDs = new List<BuyerMinDc>();
                                        BDs.AddRange(buyerMinDcs);


                                        if (BDs != null && BDs.Any())
                                        {
                                            foreach (var BD in BDs)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (ActivePeople != null && WarePermission != null)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                                else
                                                {

                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pm.BuyerId.Value;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pm.BuyerId.Value;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                        }
                                    }

                                }

                                /*
                                List<classification> ABCClassification = new List<classification>();
                                var dCategory = pdList.Where(x => x.Category == "D").Select(x => x.ItemId).ToList();
                                var cCategories = pdList.Where(x => x.Category == "C").Select(x => x.ItemId).ToList();
                                var itemids = Items.Where(x => cCategories.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                                bool ABCvalue = false;
                                foreach (var cat in itemids)
                                {
                                    var query = "select itemNumber,warehouseid,Category,Qty from ItemsClassification Where itemNumber = '" + cat.itemNumber + "' and warehouseid = " + cat.warehouseid;
                                    var ABCClass = db.Database.SqlQuery<classification>(query).ToList();
                                    ABCClassification.AddRange(ABCClass);
                                }

                                foreach (var abc in ABCClassification)
                                {

                                    var Podetail = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId && x.ItemNumber == abc.itemNumber).FirstOrDefault();
                                    if (Podetail.PurchaseQty > abc.Qty)
                                    {
                                        ABCvalue = true;
                                    }

                                }

                                if (dCategory.Count > 0 || ABCvalue == true)
                                {
                                    if (ETtlamt < 1000000)
                                    {
                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                                        "Supplier Payment Approver");

                                        List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                        foreach (var BD in buyerMinDcss)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (WarePermission != null && ActivePeople != null)
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    //ShopKirana PR id: {#var#} are waiting for your approval.
                                                    //  string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + " is waiting for your approval. ShopKirana";
                                                    string msg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }

                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                        "Supplier Payment Approver");

                                        BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                        People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);

                                        PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pm.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                        if (poid != null)
                                        {
                                            var itemIds = pm.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                            var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();

                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                            poid.Status = "Approved";
                                            poid.PRStatus = 3;
                                            poid.BuyerId = BuyerId;
                                            poid.BuyerName = Name.DisplayName;
                                            db.Entry(poid).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string query = string.Empty;
                                                var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                    if (check == null)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;

                                                        pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    else
                                                    {

                                                        check.IsApproved = false;
                                                        check.IsActive = true;
                                                        check.IsDeleted = false;
                                                        check.ModifiedDate = DateTime.Now;
                                                        db.Entry(check).State = EntityState.Modified;

                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                }
                                // string smsTempmsg = " is waiting for your approval. ShopKirana";
                                string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                if (ETtlamt <= 300000)
                                {

                                    List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                    var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                    if (BDs == null)
                                        BDs = new List<BuyerMinDc>();
                                    BDs.AddRange(buyerMinDcs);


                                    if (BDs != null && BDs.Any())
                                    {
                                        foreach (var BD in BDs)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (ActivePeople != null && WarePermission != null)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                            else
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pm.BuyerId.Value;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = pm.BuyerId.Value;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            db.Commit();
                                        }
                                    }

                                }
                                else if (ETtlamt > 300000 && ETtlamt < 1000000)
                                {
                                    #region Code Commnets
                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                    "Zonal Sourcing lead");

                                    List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                    foreach (var BD in buyerMinDcs)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (WarePermission != null && ActivePeople != null)
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                                                db.Commit();
                                            }
                                        }

                                    }
                                    #endregion
                                    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pm.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                    if (poid != null)
                                    {
                                        var itemIds = pm.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryid = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        //List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                        //int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                        List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                        var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();
                                        foreach (var st in store)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == st.OwnerId && x.Active == true).FirstOrDefault();
                                            // var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == st.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (ActivePeople != null)
                                            {
                                                var PRStatusData1 = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == st.OwnerId).FirstOrDefault();
                                                if (PRStatusData1 == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = st != null ? st.OwnerId : 0;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    //ShopKirana PR id: {#var#} are waiting for your approval.
                                                    string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == st.OwnerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                        if (store.Count == 0)
                                        {
                                            string queryNew = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                                                  "Zonal Sourcing lead", "Region sales lead");

                                            List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(queryNew).ToList();

                                            foreach (var BD in buyerMinDcss)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (WarePermission != null && ActivePeople != null)
                                                {

                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                                                        db.Commit();
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                                else if (ETtlamt >= 1000000)
                                {


                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                    "Supplier Payment Approver");

                                    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);

                                        PurchaseOrderMaster poids = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pm.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                        if (poids != null)
                                        {
                                            var itemIds = pm.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                            var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();

                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                            poids.Status = "Approved";
                                            poids.PRStatus = 3;
                                            poids.BuyerId = BuyerId;
                                            poids.BuyerName = Name.DisplayName;
                                            db.Entry(poids).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string query = string.Empty;
                                                var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poids.ETotalAmount && x.AmountlmtMax >= poids.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poids.PurchaseOrderId).FirstOrDefault();
                                                    if (check == null)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.PRId = poids.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    else
                                                    {

                                                        check.IsApproved = false;
                                                        check.IsActive = true;
                                                        check.IsDeleted = false;
                                                        check.ModifiedDate = DateTime.Now;
                                                        db.Entry(check).State = EntityState.Modified;

                                                    }
                                                    Sms s = new Sms();
                                                    //string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS == null ? "" : dltSMS.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                }
                                */
                            }
                            else
                            {
                                dbContextTransaction.Rollback();
                                pOResult.Status = false;
                                pOResult.Message = "Some error occurred during save PR ";
                            }

                        }
                    }
                }

                if (pOResult.Status)
                {
                    pOResult.Message = "PR save successfuly. PR # " + PRId;
                }
            }

            return pOResult;
        }


        [Route("GetPRlist")]
        [HttpGet]

        public PaggingData GetPRlist(int list, int page, int Warehouseid)

        {
            logger.Info("start ItemMaster: ");
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                int CompanyId = compid;
                logger.Info("User ID : {0} , Company Id : {1}", compid, userid, Warehouseid);
                using (var context = new AuthContext())
                {
                    if (Warehouseid > 0)
                    {
                        // var itemPagedListWid = context.AllPOMasterWid(list, page, Warehouseid, CompanyId);
                        PaggingData Result = new PaggingData();
                        Result.total_count = context.DPurchaseOrderMaster.Where(x => x.WarehouseId == Warehouseid && x.PRType == 1).Count();
                        Result.ordermaster = context.DPurchaseOrderMaster.Where(x => x.WarehouseId == Warehouseid && x.PRType == 1).OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();
                        var listOrders = Result.ordermaster;
                        // var listOrders = context.FreeStockHistoryDB.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.WarehouseId == WarehouseId && x.FreeStockId == FreeStockId).OrderByDescending(x => x.CreationDate).Skip((page - 1) * list).Take(list).ToList();
                        foreach (var item in listOrders)
                        {
                            int PurchaseOrderId = item.PurchaseOrderId;
                            var POMaster = context.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == PurchaseOrderId && x.PRPaymentType == "AdvancePR").FirstOrDefault();
                            if (POMaster != null)
                            {
                                var Payment = context.PRPaymentAppoved.Where(x => x.PRId == POMaster.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();
                                if (Payment != null)
                                {
                                    if (Payment.IsPaymentDone == true)
                                    {

                                        item.IsAdvancePayment = true;
                                    }
                                    else
                                    {
                                        item.IsAdvancePayment = false;
                                    }
                                }
                            }
                        }
                        Result.ordermaster = listOrders;

                        return Result;
                    }
                    else
                    {
                        // var itemPagedList = context.AllPOMasterWid(list, page, Warehouseid, CompanyId);
                        PaggingData Result = new PaggingData();
                        Result.total_count = context.DPurchaseOrderMaster.Where(x => x.WarehouseId == Warehouseid && x.Status != "Blank PO" && x.PRType == 1).Count();
                        Result.ordermaster = context.DPurchaseOrderMaster.Where(x => x.WarehouseId == Warehouseid && x.Status != "Blank PO" && x.PRType == 1).OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();

                        logger.Info("End ItemMaster: ");
                        var listOrders = Result.ordermaster;
                        // var listOrders = context.FreeStockHistoryDB.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.WarehouseId == WarehouseId && x.FreeStockId == FreeStockId).OrderByDescending(x => x.CreationDate).Skip((page - 1) * list).Take(list).ToList();
                        foreach (var item in listOrders)
                        {
                            int PurchaseOrderId = item.PurchaseOrderId;
                            var POMaster = context.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == PurchaseOrderId && x.PRPaymentType == "AdvancePR").FirstOrDefault();
                            if (POMaster != null)
                            {
                                var Payment = context.PRPaymentAppoved.Where(x => x.PRId == POMaster.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();
                                if (Payment != null)
                                {
                                    if (Payment.IsPaymentDone == true)
                                    {

                                        item.IsAdvancePayment = true;
                                    }
                                    else
                                    {
                                        item.IsAdvancePayment = false;
                                    }
                                }
                            }
                        }
                        Result.ordermaster = listOrders;
                        return Result;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in ItemMaster " + ex.Message);
                logger.Info("End  ItemMaster: ");
                return null;
            }
        }

        [Route("PRCancel")]
        [HttpPost]
        public CancelPR PRCancel(CancelPR cancelPR)
        {
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);


            using (AuthContext db = new AuthContext())
            {
                PurchaseOrderMaster pr = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == cancelPR.PurchaseOrderId).FirstOrDefault();

                if (pr != null)
                {
                    pr.Comment = cancelPR.Comment;
                    pr.CanceledById = userid;
                    pr.PRStatus = 2;
                    db.Entry(pr).State = EntityState.Modified;
                    db.Commit();
                    #region If AdjustmentPO use
                    if (pr.IsAdjustmentPo)
                    {
                        string query = "exec ClosedPORevertonCancelPR @PurchaseOrderID";

                        var PurchaseOrderId = new SqlParameter
                        {
                            ParameterName = "@PurchaseOrderID",
                            Value = cancelPR.PurchaseOrderId
                        };
                        var rowsaffected = db.Database.ExecuteSqlCommand(query, PurchaseOrderId);
                    }
                    #endregion

                }
                return cancelPR;
            }
        }

        [Route("SearchPR")]
        [HttpGet]
        public dynamic SearchPR(string PoId)
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                int Warehouse_id = 0;

                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "Warehouseid")
                    {
                        Warehouse_id = int.Parse(claim.Value);
                    }
                }

                int poid = 0;
                string Suplliername = "";
                bool bNum = false;
                if (PoId != null)
                {
                    int i;
                    bNum = int.TryParse(PoId, out i);
                    if (bNum)
                    {
                        poid = Convert.ToInt32(PoId);
                    }
                    else
                    {
                        Suplliername = PoId;//if search by name
                    }
                }
                using (var db = new AuthContext())
                {
                    var Podata = new List<PurchaseOrderMaster>();
                    if (Warehouse_id > 0)
                    {

                        if (bNum)
                        {
                            Podata = db.DPurchaseOrderMaster.Where(x => x.CompanyId == compid && x.WarehouseId == Warehouse_id && x.PurchaseOrderId == poid && x.PRType == 1 && x.Status != "Blank PO").OrderByDescending(x => x.CreationDate).ToList();

                        }
                        else
                        {
                            Podata = db.DPurchaseOrderMaster.Where(x => x.CompanyId == compid && x.WarehouseId == Warehouse_id && x.PRType == 1 && x.SupplierName.ToLower().Contains(Suplliername.Trim().ToLower()) && x.Status != "Blank PO").OrderByDescending(x => x.CreationDate).Take(10).ToList();
                        }
                        foreach (var item in Podata)
                        {
                            int PurchaseOrderId = item.PurchaseOrderId;
                            var POMaster = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == PurchaseOrderId && x.PRPaymentType == "AdvancePR").FirstOrDefault();
                            if (POMaster != null)
                            {
                                var Payment = db.PRPaymentAppoved.Where(x => x.PRId == POMaster.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();
                                if (Payment != null)
                                {
                                    if (Payment.IsPaymentDone == true)
                                    {

                                        item.IsAdvancePayment = true;
                                    }
                                    else
                                    {
                                        item.IsAdvancePayment = false;
                                    }
                                }
                            }
                        }

                        return Podata;
                    }
                    else
                    {
                        if (bNum)
                        {
                            Podata = db.DPurchaseOrderMaster.Where(x => x.CompanyId == compid && x.PurchaseOrderId == poid && x.PRType == 1 && x.Status != "Blank PO").OrderByDescending(x => x.CreationDate).ToList();
                        }
                        else
                        {
                            Podata = db.DPurchaseOrderMaster.Where(x => x.CompanyId == compid && x.PRType == 1 && x.SupplierName.ToLower().Contains(Suplliername.Trim().ToLower()) && x.Status != "Blank PO").OrderByDescending(x => x.CreationDate).Take(10).ToList();
                        }
                        foreach (var item in Podata)
                        {
                            int PurchaseOrderId = item.PurchaseOrderId;
                            var POMaster = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == PurchaseOrderId && x.PRPaymentType == "AdvancePR").FirstOrDefault();
                            if (POMaster != null)
                            {
                                var Payment = db.PRPaymentAppoved.Where(x => x.PRId == POMaster.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();
                                if (Payment != null)
                                {
                                    if (Payment.IsPaymentDone == true)
                                    {

                                        item.IsAdvancePayment = true;
                                    }
                                    else
                                    {
                                        item.IsAdvancePayment = false;
                                    }
                                }
                            }
                        }
                        return Podata;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in PurchaseOrderMaster " + ex.Message);
                logger.Info("End  PurchaseOrderMaster: ");
                return null;
            }
        }

        [Route("")]
        [HttpGet]
        public PaggingData GetPurchaseOrderList(int list, int page, int Warehouseid)
        {
            logger.Info("start ItemMaster: ");
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                int CompanyId = compid;
                logger.Info("User ID : {0} , Company Id : {1}", compid, userid, Warehouseid);
                using (var context = new AuthContext())
                {
                    if (Warehouseid > 0)
                    {
                        PaggingData Result = new PaggingData();
                        Result.total_count = context.DbPurchaseOrder.Where(x => x.WarehouseId == Warehouseid && x.IsDeleted == false).Count();
                        Result.ordermaster = context.DbPurchaseOrder.Where(x => x.WarehouseId == Warehouseid && x.IsDeleted == false).OrderByDescending(x => x.Id).Skip((page - 1) * list).Take(list).ToList();
                        return Result;
                    }
                    else
                    {
                        PaggingData Result = new PaggingData();
                        Result.total_count = context.DbPurchaseOrder.Where(x => x.CompanyId == compid && x.IsDeleted == false).Count();
                        Result.ordermaster = context.DbPurchaseOrder.Where(x => x.CompanyId == compid && x.IsDeleted == false).OrderByDescending(x => x.Id).Skip((page - 1) * list).Take(list).ToList();
                        logger.Info("End ItemMaster: ");
                        return Result;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in ItemMaster " + ex.Message);
                logger.Info("End  ItemMaster: ");
                return null;
            }
        }

        [Route("GetPOWithDetial")]
        [HttpGet]
        public PurchaseOrderNewDc GetPOWithDetial(int id)
        {
            PurchaseOrderNewDc purchaseOrderDc = new PurchaseOrderNewDc();
            List<GetDemandQtyDC> addDemandQtylist = new List<GetDemandQtyDC>();
            using (var db = new AuthContext())
            {
                purchaseOrderDc.Totalweight = 0;
                var PO = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == id).Include(x => x.PurchaseOrderDetail).FirstOrDefault();
                purchaseOrderDc = Mapper.Map(PO).ToANew<PurchaseOrderNewDc>();
                //List<ItemClassificationDC> ABCitemsList = PO.PurchaseOrderDetail.Select(item => new ItemClassificationDC { ItemNumber = item.ItemNumber, WarehouseId = item.WarehouseId.Value }).ToList();
                //var manager = new ItemLedgerManager();
                //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                purchaseOrderDc.IsGrnDone = db.GoodsReceivedDetail.Any(x => x.PurchaseOrderDetail.PurchaseOrderId == PO.PurchaseOrderId);

                var gdn = db.GoodsDescripancyNoteMasterDB.Where(x => x.PurchaseOrderId == PO.PurchaseOrderId && x.IsGDNGenerate == true && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                if (gdn != null)
                {
                    purchaseOrderDc.isGDN = gdn.Status == "Approved" ? "Yes" : "No";
                }
                else
                {
                    purchaseOrderDc.isGDN = "NA";
                }

                if (PO.PurchaseOrderDetail != null && PO.PurchaseOrderDetail.Any())
                {
                    var itemNumberList = PO.PurchaseOrderDetail.Select(x => x.ItemNumber);
                    var itemList = PO.PurchaseOrderDetail.Select(x => new { x.ItemNumber, x.ItemMultiMRPId });
                    var barcodes = db.ItemBarcodes.Where(c => itemNumberList.Contains(c.ItemNumber) && c.IsDeleted == false && c.IsActive).Distinct().ToList();

                    var Centralitem = db.ItemMasterCentralDB.Where(c => itemNumberList.Contains(c.Number)).Select(c => new { c.IsSensitive, c.IsSensitiveMRP, c.Number }).Distinct().ToList();

                    var MultiMrpList = db.ItemMultiMRPDB.Where(c => itemNumberList.Contains(c.ItemNumber)).ToList();
                    //foreach (var item in itemList)
                    //{
                    //    var demandQty = GetDemandQty(PO.WarehouseId, item.ItemNumber, item.ItemMultiMRPId, db);
                    //    if (demandQty != null)
                    //    {
                    //        addDemandQtylist.Add(demandQty);
                    //    }
                    //}
                    if (itemList != null && itemList.Any())
                    {
                        var mrpitemId = new DataTable();
                        var itemnumbers = new DataTable();
                        mrpitemId.Columns.Add("IntValue");
                        itemnumbers.Columns.Add("stringValue");
                        foreach (var i in itemList)
                        {
                            if (i.ItemMultiMRPId > 0)
                            {
                                var dr = mrpitemId.NewRow();
                                dr["IntValue"] = i.ItemMultiMRPId;
                                mrpitemId.Rows.Add(dr);
                            }
                            if (!string.IsNullOrEmpty(i.ItemNumber))
                            {
                                var dr = itemnumbers.NewRow();
                                dr["stringValue"] = i.ItemNumber;
                                itemnumbers.Rows.Add(dr);
                            }
                        }
                        var param = new SqlParameter("ItemMultiMRPId", mrpitemId);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.IntValues";

                        var param1 = new SqlParameter("ItemNumber", itemnumbers);
                        param1.SqlDbType = SqlDbType.Structured;
                        param1.TypeName = "dbo.stringValues";

                        var param2 = new SqlParameter("@WareHouseId", PO.WarehouseId);
                        addDemandQtylist = db.Database.SqlQuery<GetDemandQtyDC>("Sp_GetDemandQty @WareHouseId,@ItemNumber,@ItemMultiMRPId", param, param1, param2).ToList();

                    }
                    foreach (var d in purchaseOrderDc.PurchaseOrderDetail)
                    {

                        var dqty = addDemandQtylist.Where(x => x.ItemNumber == d.ItemNumber && x.ItemMultiMrpId == d.ItemMultiMRPId).FirstOrDefault()?.DemandQty;
                        var openpoqty = addDemandQtylist.Where(x => x.ItemNumber == d.ItemNumber && x.ItemMultiMrpId == d.ItemMultiMRPId).FirstOrDefault()?.OpenPOQTy;
                        d.CompanyStockCode = MultiMrpList.FirstOrDefault(y => y.ItemMultiMRPId == d.ItemMultiMRPId).CompanyStockCode;
                        d.DemandQty = dqty == null ? 0 : dqty.Value;
                        d.OpenPOQTy = openpoqty == null ? 0 : openpoqty.Value;
                        var item = Centralitem.Where(c => c.Number == d.ItemNumber).FirstOrDefault();
                        d.Barcode = (barcodes != null && barcodes.Any(c => c.ItemNumber == d.ItemNumber)) ? barcodes.FirstOrDefault(c => c.ItemNumber == d.ItemNumber).Barcode : null;
                        d.IsCommodity = false;

                        if (item.IsSensitive == true && item.IsSensitiveMRP == true)
                        {
                            d.IsCommodity = false;
                        }
                        else if (item.IsSensitive == true && item.IsSensitiveMRP == false)
                        {
                            d.IsCommodity = true;
                        }
                        d.multiMrpIds = MultiMrpList.Where(a => a.ItemNumber == d.ItemNumber).Select(x => new ItemMultiMRPDc
                        {
                            ItemMultiMRPId = x.ItemMultiMRPId,
                            ItemNumber = x.ItemNumber,
                            MRP = x.MRP,
                            CompanyStockCode = x.CompanyStockCode
                        }).ToList();

                        if (d.Price == 0.01) { d.IsFreeItem = true; } else { d.IsFreeItem = false; };
                        // d.Category = GetItem.Where(x => x.ItemNumber == d.ItemNumber).Select(x => x.Category).FirstOrDefault() != null ? GetItem.Where(x => x.ItemNumber == d.ItemNumber).Select(x => x.Category).FirstOrDefault() : "D";
                        if (d.WeightType == "Gm")
                        {
                            if (d.Weight > 0)
                            {
                                d.TotalItemWeight = (d.Weight * d.TotalQuantity) / 1000;
                                purchaseOrderDc.Totalweight = Convert.ToDouble(purchaseOrderDc.Totalweight) + d.TotalItemWeight;
                            }
                            else
                            {
                                d.Weight = 0;
                                d.TotalItemWeight = 0;
                                purchaseOrderDc.Totalweight = Convert.ToDouble(purchaseOrderDc.Totalweight) + d.TotalItemWeight;
                            }
                        }
                        if (d.WeightType == "Kg")
                        {
                            if (d.Weight > 0)
                            {
                                d.TotalItemWeight = d.Weight * d.TotalQuantity;
                                purchaseOrderDc.Totalweight = Convert.ToDouble(purchaseOrderDc.Totalweight) + d.TotalItemWeight;
                            }
                            else
                            {
                                d.Weight = 0;
                                d.TotalItemWeight = 0;
                                purchaseOrderDc.Totalweight = Convert.ToDouble(purchaseOrderDc.Totalweight) + d.TotalItemWeight;
                            }
                        }
                        if (d.WeightType == null)
                        {
                            d.Weight = 0;
                            d.TotalItemWeight = 0;
                            purchaseOrderDc.Totalweight = Convert.ToDouble(purchaseOrderDc.Totalweight) + d.TotalItemWeight;
                        }

                    }
                }
            }
            if (purchaseOrderDc.PurchaseOrderDetail != null)
            {
                TripPlannerHelper tripPlannerHelper = new TripPlannerHelper();
                List<ItemWarehouseDc> itemWarehouseDcs = new List<ItemWarehouseDc>();
                var itemWarehouse = purchaseOrderDc.PurchaseOrderDetail.Select(x => new ItemWarehouseDc { WarehouseId = x.WarehouseId.Value, ItemMultiMRPId = x.ItemMultiMRPId }).ToList();
                var list = tripPlannerHelper.RocTagValueGet(itemWarehouse);
                if (list != null)
                {
                    foreach (var da in purchaseOrderDc.PurchaseOrderDetail)
                    {
                        da.Tag = list.Result.Where(x => x.ItemMultiMRPId == da.ItemMultiMRPId && x.WarehouseId == da.WarehouseId).Select(x => x.Tag).FirstOrDefault();
                    }
                }
            }

            return purchaseOrderDc;

        }

        [Route("GetPRWithDetial")]
        [HttpGet]
        public PurchaseRequestNewDC GetPRWithDetial(int id)
        {
            PurchaseRequestNewDC PurchaseRequestDc = new PurchaseRequestNewDC();

            using (var db = new AuthContext())
            {

                var PO = db.PurchaseRequestMasterDB.Where(x => x.PurchaseOrderId == id).Include(x => x.PurchaseOrderRequestDetail).FirstOrDefault();
                PurchaseRequestDc = Mapper.Map(PO).ToANew<PurchaseRequestNewDC>();
                if (PO.PurchaseOrderRequestDetail != null && PO.PurchaseOrderRequestDetail.Any())
                {
                    //List<ItemClassificationDC> ABCitemsList = PO.PurchaseOrderRequestDetail.Select(item => new ItemClassificationDC { ItemNumber = item.ItemNumber, WarehouseId = item.WarehouseId.Value }).ToList();

                    //var manager = new ItemLedgerManager();
                    //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);
                    var itemNumberList = PO.PurchaseOrderRequestDetail.Select(x => x.ItemNumber);
                    var Centralitem = db.ItemMasterCentralDB.Where(c => itemNumberList.Contains(c.Number)).ToList();
                    var barcodes = db.ItemBarcodes.Where(c => itemNumberList.Contains(c.ItemNumber) && c.IsDeleted == false && c.IsActive).Distinct().ToList();

                    var MultiMrpList = db.ItemMultiMRPDB.Where(c => itemNumberList.Contains(c.ItemNumber)).ToList();
                    foreach (var d in PurchaseRequestDc.PurchaseOrderRequestDetail)
                    {
                        var item = Centralitem.Where(c => c.Number == d.ItemNumber).FirstOrDefault();
                        d.Barcode = (barcodes != null && barcodes.Any(c => c.ItemNumber == d.ItemNumber)) ? barcodes.FirstOrDefault(c => c.ItemNumber == d.ItemNumber).Barcode : null;
                        d.IsCommodity = false;
                        if (item.IsSensitive == true && item.IsSensitiveMRP == true)
                        {
                            d.IsCommodity = false;
                        }
                        else if (item.IsSensitive == true && item.IsSensitiveMRP == false)
                        {
                            d.IsCommodity = true;
                        }
                        d.multiMrpIds = db.ItemMultiMRPDB.Where(a => a.ItemNumber == d.ItemNumber).Select(x => new ItemMultiMRPDc
                        {
                            ItemMultiMRPId = x.ItemMultiMRPId,
                            ItemNumber = x.ItemNumber,
                            MRP = x.MRP
                        }).ToList();

                        if (d.Price == 0.01) { d.IsFreeItem = true; } else { d.IsFreeItem = false; }
                        //  d.Category = GetItem.Where(x => x.ItemNumber == d.ItemNumber).Select(x => x.Category).FirstOrDefault() != null ? GetItem.Where(x => x.ItemNumber == d.ItemNumber).Select(x => x.Category).FirstOrDefault() : "D";
                    }
                }
            }
            return PurchaseRequestDc;

        }

        [Route("AddItemInPo")]
        [AcceptVerbs("POST")]
        public POResult AddItemInPo(PurchaseList temppo)
        {
            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {

                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();
                    var supplier1 = db.Suppliers.Where(s => s.SupplierId == temppo.SupplierId).SingleOrDefault();
                    People buyer = db.Peoples.Where(q => q.PeopleID == supplier1.PeopleID).SingleOrDefault();
                    var POItem = db.DPurchaseOrderDeatil.Where(x => x.ItemId == temppo.ItemId && x.PurchaseOrderId == temppo.PurchaseOrderId && x.ItemNumber == temppo.itemNumber).FirstOrDefault();

                    if (pom == null)
                    {
                        POResult.Status = false;
                        POResult.Message = "Please first create PO then add item.";
                        return POResult;
                    }
                    if (POItem != null)
                    {
                        POResult.Status = false;
                        POResult.Message = "Item Already Added in the list";
                        return POResult;
                    }

                    var item = db.itemMasters.Where(z => z.ItemId == temppo.ItemId && z.CompanyId == compid && z.WarehouseId == pom.WarehouseId).FirstOrDefault();

                    #region check allowed Quantity
                    if (item.ItemMultiMRPId > 0 && pom.PoType == "Auto PR")
                    {
                        int Purchaseorderdetailid = 0;
                        var WarehouseId = new SqlParameter("@warehouseIds", pom.WarehouseId);
                        var ItemMultiMRPId = new SqlParameter("@itemmultimrpid", item.ItemMultiMRPId);
                        var Moq = new SqlParameter("@Moq", item.PurchaseMinOrderQty);
                        var NoofCases = new SqlParameter("@NoofCases", (double)(temppo.qty / item.PurchaseMinOrderQty));
                        var PurchaseorderDetailId = new SqlParameter("@PurchaseorderDetailId", Purchaseorderdetailid);
                        var IsEdit = new SqlParameter("@IsEdit", false);
                        bool res = db.Database.SqlQuery<bool>(" exec Sp_getAllowedQuantityCheck @warehouseIds,@itemmultimrpid,@Moq,@NoofCases,@PurchaseorderDetailId,@IsEdit", WarehouseId, ItemMultiMRPId, Moq, NoofCases, PurchaseorderDetailId, IsEdit).FirstOrDefault();
                        if (res == false)
                        {
                            POResult.Status = false;
                            POResult.Message = "Require Quantity is greater then Allowed Quantity";
                            return POResult;
                        }

                    }
                    #endregion

                    #region forecast
                    if (pom.IsPR && db.ItemForeCastCitys.Any(x => x.WarehouseId == pom.WarehouseId && x.IsActive == true && x.IsDeleted == false))
                    {
                        var forecastitem = GetEligibleQtyForPo(pom.WarehouseId, item.ItemMultiMRPId);
                        if (forecastitem != null)
                        {
                            if (forecastitem.QtyForAction < int.Parse(temppo.qty.ToString()) && forecastitem.QtyForAction > 0)
                            {
                                POResult.Message = "you can purchase item qty upto : " + forecastitem.QtyForAction + " For item " + item.itemname;
                                POResult.Status = false;
                                return POResult;
                            }
                            else if (forecastitem.QtyForAction < 0)
                            {
                                POResult.Message = "you can't purchase item " + item.itemname + " (forecast item)";
                                POResult.Status = false;
                                return POResult;
                            }
                        }
                    }
                    #endregion

                    PurchaseOrderDetail pd = new PurchaseOrderDetail();
                    pd.ItemId = item.ItemId;
                    pd.ItemMultiMRPId = item.ItemMultiMRPId;//for multimrp
                    pd.ItemName = item.itemname;
                    pd.itemBaseName = item.itemBaseName;
                    pd.ItemNumber = item.Number;
                    pd.MRP = item.price;
                    pd.TotalQuantity = int.Parse(temppo.qty.ToString());
                    pd.CreationDate = indianTime;
                    pd.Status = "ordered";
                    pd.MOQ = item.PurchaseMinOrderQty;
                    pd.Price = Convert.ToDouble(item.POPurchasePrice);
                    pd.WarehouseId = pom.WarehouseId;
                    pd.CompanyId = compid;
                    pd.WarehouseName = temppo.WareHouseName;
                    pd.SupplierId = temppo.SupplierId.GetValueOrDefault();
                    pd.SupplierName = temppo.Supplier;
                    pd.PurchaseName = temppo.name;
                    pd.PurchaseSku = temppo.PurchaseSku;
                    pd.ConversionFactor = Convert.ToInt32(temppo.conversionfactor);
                    pd.PurchaseQty = temppo.finalqty;
                    pd.Weight = temppo.Weight;
                    pd.WeightType = temppo.WeightType;
                    pd.WeightInGram = temppo.WeightInGram;
                    pom.PurchaseOrderDetail.Add(pd);

                    #region get Estimate amount and update level

                    /// Get Estimate amount                  
                    if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                    {
                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                        foreach (var data in pom.PurchaseOrderDetail)
                        {
                            // var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                            int qty = data.TotalQuantity;
                            double POPrice = data.Price;
                            ETtlamt += Convert.ToDouble(POPrice) * qty;
                        }
                    }
                    pom.ETotalAmount = ETtlamt;
                    //pom.ModifiedBy = userid;
                    //pom.ModifiedDate = indianTime;
                    db.Entry(pom).State = EntityState.Modified;

                    ///  End ///
                    #endregion

                    #region Level allocation 
                    if (pom.Status != "Draft")
                    {
                        PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                        if (get_approvalz != null)
                        {
                            if (get_approvalz.Level == "Level1")  /// Self Approved
                            {
                                pom.Status = "Self Approved";
                                pom.progress = "50";
                                pom.Level = "Level1";
                                pom.Approval1 = 0;
                                pom.Approval2 = 0;
                                pom.Approval3 = 0;
                                pom.Approval4 = 0;
                                pom.Approval5 = 0;
                                pom.ApprovalName1 = pom.CreatedBy;
                                pom.Rewiever1 = 0;
                                pom.Rewiever2 = 0;
                                pom.Rewiever3 = 0;
                                pom.Rewiever4 = 0;
                                pom.Rewiever5 = 0;
                                pom.ApprovedBy = pom.CreatedBy;
                            }
                            else /// Send for approval
                            {
                                pom.Status = "Send for Approval";
                                pom.progress = "20";
                                pom.Level = get_approvalz.Level;
                                pom.Approval1 = get_approvalz.Approval1;
                                pom.Approval2 = get_approvalz.Approval2;
                                pom.Approval3 = get_approvalz.Approval3;
                                pom.Approval4 = get_approvalz.Approval4;
                                pom.Approval5 = get_approvalz.Approval5;
                                pom.Rewiever1 = get_approvalz.Reviewer1;
                                pom.Rewiever2 = get_approvalz.Reviewer2;
                                pom.Rewiever3 = get_approvalz.Reviewer3;
                                pom.Rewiever4 = get_approvalz.Reviewer4;
                                pom.Rewiever5 = get_approvalz.Reviewer5;
                                pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                pom.RewieverName1 = get_approvalz.ReviewerName1;
                                pom.RewieverName2 = get_approvalz.ReviewerName2;
                                pom.RewieverName3 = get_approvalz.ReviewerName3;
                                pom.RewieverName4 = get_approvalz.ReviewerName4;
                                pom.RewieverName5 = get_approvalz.ReviewerName5;
                            }
                        }
                    }
                    #endregion


                    if (db.Commit() > 0)
                    {
                        if (pom.Level != "Level1" && pom.Status != "Draft")
                        {
                            Sms s = new Sms();
                            //  string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + " is waiting for your approval. ShopKirana";
                            string msg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            msg = dltSMS == null ? "" : dltSMS.Template;

                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.Approval1).Select(q => q.Mobile).SingleOrDefault();
                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                        }
                        if (pom.IsPR == true)
                        {
                            var PRApproval = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();

                            Sms s = new Sms();
                            //string msg = "ShopKirana PR Id: " + pom.PurchaseOrderId + " Approved by you has been Changed. Shopkirana";
                            // string msg = "ShopKirana PR No " + pom.PurchaseOrderId + " Approved by you has been Changed. Shopkirana";
                            string msg = ""; //"ShopKirana PR Id: {#var#} Approved by you has been Changed. Shopkirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Updation");
                            msg = dltSMS == null ? "" : dltSMS.Template;

                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                            string Mob = db.Peoples.Where(q => q.PeopleID == PRApproval.ApprovedBY).Select(q => q.Mobile).SingleOrDefault();
                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                        }
                        POResult.Status = true;
                        POResult.Message = "PO item added successfuly. PO # " + pom.PurchaseOrderId;

                        #region Create History

                        PoEditHistory Hisdata = new PoEditHistory()
                        {
                            PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                            CreateDate = indianTime,
                            UserId = userid,
                            ModificationType = "Add Item"
                        };
                        var result = GenratHistory(Hisdata);
                        #endregion
                    }
                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Some error occurred during save PO item. PO # " + pom.PurchaseOrderId;
                    }

                }

            }
            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }

        /// <summary>
        /// Add Item In PR
        /// </summary>
        /// <param name="temppo"></param>
        /// <returns></returns>
        [Route("AddItemInPR")]
        [AcceptVerbs("POST")]
        public POResult AddItemInPR(PurchaseList temppo)
        {
            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {
                    List<ItemMaster> Items = new List<ItemMaster>();
                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();
                    var supplier1 = db.Suppliers.Where(s => s.SupplierId == temppo.SupplierId).SingleOrDefault();
                    People buyer = db.Peoples.Where(q => q.PeopleID == supplier1.PeopleID).SingleOrDefault();
                    var POItem = db.DPurchaseOrderDeatil.Where(x => x.ItemId == temppo.ItemId && x.PurchaseOrderId == temppo.PurchaseOrderId && x.ItemNumber == temppo.itemNumber).FirstOrDefault();

                    if (pom.PRStatus != 5)
                    {

                        if (pom == null)
                        {
                            POResult.Status = false;
                            POResult.Message = "Please first create PO then add item.";
                            return POResult;
                        }
                        if (POItem != null)
                        {
                            POResult.Status = false;
                            POResult.Message = "Item Already Added in the list";
                            return POResult;
                        }
                        var item = db.itemMasters.Where(z => z.ItemId == temppo.ItemId && z.CompanyId == compid && z.WarehouseId == pom.WarehouseId).FirstOrDefault();

                        #region forecast
                        if (db.ItemForeCastCitys.Any(x => x.WarehouseId == pom.WarehouseId && x.IsActive == true && x.IsDeleted == false))
                        {
                            var forecastitem = GetEligibleQtyForPo(pom.WarehouseId, item.ItemMultiMRPId);
                            if (forecastitem != null)
                            {
                                if (forecastitem.QtyForAction < int.Parse(temppo.qty.ToString()) && forecastitem.QtyForAction > 0)
                                {
                                    POResult.Message = "you can purchase item qty upto : " + forecastitem.QtyForAction + " For item " + item.itemname;
                                    POResult.Status = false;
                                    return POResult;
                                }
                                else if (forecastitem.QtyForAction < 0)
                                {
                                    POResult.Message = "you can't purchase item " + item.itemname + " (forecast item)";
                                    POResult.Status = false;
                                    return POResult;
                                }
                            }
                        }
                        #endregion


                        PurchaseOrderDetail pd = new PurchaseOrderDetail();
                        pd.ItemId = item.ItemId;
                        pd.ItemMultiMRPId = item.ItemMultiMRPId;//for multimrp
                        pd.ItemName = item.itemname;
                        pd.itemBaseName = item.itemBaseName;
                        pd.ItemNumber = item.Number;
                        pd.MRP = item.price;
                        pd.TotalQuantity = int.Parse(temppo.qty.ToString());
                        pd.CreationDate = indianTime;
                        pd.Status = "ordered";
                        pd.MOQ = item.PurchaseMinOrderQty;
                        pd.Price = Convert.ToDouble(item.POPurchasePrice);
                        pd.WarehouseId = pom.WarehouseId;
                        pd.CompanyId = compid;
                        pd.WarehouseName = temppo.WareHouseName;
                        pd.SupplierId = temppo.SupplierId.GetValueOrDefault();
                        pd.SupplierName = temppo.Supplier;
                        pd.PurchaseName = temppo.name;
                        pd.PurchaseSku = temppo.PurchaseSku;
                        pd.ConversionFactor = Convert.ToInt32(temppo.conversionfactor);
                        pd.PurchaseQty = temppo.finalqty;
                        pd.Category = temppo.Category;
                        pd.Weight = temppo.Weight;
                        pd.WeightType = temppo.WeightType;
                        pd.WeightInGram = temppo.WeightInGram;
                        pom.PurchaseOrderDetail.Add(pd);

                        #region get Estimate amount and update level

                        /// Get Estimate amount                  
                        if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                        {
                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                            foreach (var data in pom.PurchaseOrderDetail)
                            {
                                // var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                                int qty = data.TotalQuantity;
                                double POPrice = data.Price;
                                ETtlamt += Convert.ToDouble(POPrice) * qty;
                            }
                        }
                        pom.ETotalAmount = ETtlamt;
                        pom.PRStatus = 1;
                        //pom.ModifiedBy = userid;
                        //pom.ModifiedDate = indianTime;
                        db.Entry(pom).State = EntityState.Modified;

                        ///  End ///
                        #endregion
                        #region Level allocation 
                        if (pom.Status != "Draft")
                        {
                            PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                            if (get_approvalz != null)
                            {
                                if (get_approvalz.Level == "Level1")  /// Self Approved
                                {
                                    pom.Status = "PR Send for Approval";
                                    pom.progress = "50";
                                    pom.Level = "Level1";
                                    pom.Approval1 = 0;
                                    pom.Approval2 = 0;
                                    pom.Approval3 = 0;
                                    pom.Approval4 = 0;
                                    pom.Approval5 = 0;
                                    pom.ApprovalName1 = pom.CreatedBy;
                                    pom.Rewiever1 = 0;
                                    pom.Rewiever2 = 0;
                                    pom.Rewiever3 = 0;
                                    pom.Rewiever4 = 0;
                                    pom.Rewiever5 = 0;
                                    //  pom.ApprovedBy = pom.CreatedBy;
                                }
                                else /// Send for approval
                                {
                                    pom.Status = "PR Send for Approval";
                                    pom.progress = "20";
                                    pom.Level = get_approvalz.Level;
                                    pom.Approval1 = get_approvalz.Approval1;
                                    pom.Approval2 = get_approvalz.Approval2;
                                    pom.Approval3 = get_approvalz.Approval3;
                                    pom.Approval4 = get_approvalz.Approval4;
                                    pom.Approval5 = get_approvalz.Approval5;
                                    pom.Rewiever1 = get_approvalz.Reviewer1;
                                    pom.Rewiever2 = get_approvalz.Reviewer2;
                                    pom.Rewiever3 = get_approvalz.Reviewer3;
                                    pom.Rewiever4 = get_approvalz.Reviewer4;
                                    pom.Rewiever5 = get_approvalz.Reviewer5;
                                    pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                    pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                    pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                    pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                    pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                    pom.RewieverName1 = get_approvalz.ReviewerName1;
                                    pom.RewieverName2 = get_approvalz.ReviewerName2;
                                    pom.RewieverName3 = get_approvalz.ReviewerName3;
                                    pom.RewieverName4 = get_approvalz.ReviewerName4;
                                    pom.RewieverName5 = get_approvalz.ReviewerName5;
                                }
                            }
                        }
                        #endregion

                        if (db.Commit() > 0)
                        {

                            POResult.Status = true;
                            POResult.Message = "PR item added successfuly. PR # " + pom.PurchaseOrderId;

                            #region Create History

                            PoEditHistory Hisdata = new PoEditHistory()
                            {
                                PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                                CreateDate = indianTime,
                                UserId = userid,
                                ModificationType = "Add Item"
                            };
                            var result = GenratHistory(Hisdata);
                            #endregion
                        }
                        if (POResult.Status == true)
                        {
                            //---
                            //var pdList = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == temppo.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == temppo.WareHouseId).ToList();
                            //var Itemss = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == temppo.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == temppo.WareHouseId).Select(x => x.ItemId).ToList();
                            //var SubsubCategoryid = db.itemMasters.Where(x => x.CompanyId == compid && x.WarehouseId == temppo.WareHouseId && Itemss.Contains(x.ItemId)).ToList();
                            var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();
                            foreach (var a in prapprovs)
                            {
                                a.IsActive = false;
                                a.IsDeleted = true;
                                a.Comments = "";
                                db.Entry(a).State = EntityState.Modified;
                                db.Commit();
                            }
                            PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                            if (PRPA != null)
                            {
                                PRPA.IsApproved = false;
                                PRPA.IsActive = false;
                                PRPA.IsDeleted = true;
                                PRPA.ModifiedDate = DateTime.Now;
                                db.Entry(PRPA).State = EntityState.Modified;
                                db.Commit();
                            }
                            var pdList = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).ToList();
                            var Itemids = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).Select(x => x.ItemId).Distinct().ToList();
                            if (Itemids != null && Itemids.Any())
                            {
                                Items = db.itemMasters.Where(z => Itemids.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == pom.WarehouseId).ToList();
                            }

                            var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                            var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                            if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                            {
                                var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                                var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                                //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                                ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                                }
                                else
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                                }

                                if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                                {
                                    #region getPeople
                                    DataTable dtemail = new DataTable();
                                    dtemail.Columns.Add("stringValue");
                                    DataTable dtrole = new DataTable();
                                    dtrole.Columns.Add("stringValue");
                                    if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                    {
                                        List<string> emaillst = new List<string>();
                                        string EmailIds = "";
                                        EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                        emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                        foreach (var i in emaillst)
                                        {
                                            var dr = dtemail.NewRow();
                                            dr["stringValue"] = i;
                                            dtemail.Rows.Add(dr);
                                        }

                                    }
                                    else
                                    {
                                        List<string> rolelst = new List<string>();
                                        string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                        rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                        foreach (var i in rolelst)
                                        {
                                            var dr = dtrole.NewRow();
                                            dr["stringValue"] = i;
                                            dtrole.Rows.Add(dr);
                                        }
                                    }


                                    var paremail = new SqlParameter("emailIds", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";

                                    var pareroles = new SqlParameter("roles", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";
                                    var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                    if (db.Database.Connection.State != ConnectionState.Open)
                                        db.Database.Connection.Open();

                                    var cmd = db.Database.Connection.CreateCommand();
                                    cmd.CommandText = "GetCreatePRApprovallist";
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 600;
                                    cmd.Parameters.Add(paremail);
                                    cmd.Parameters.Add(pareroles);
                                    cmd.Parameters.Add(pareWh);

                                    var reader = cmd.ExecuteReader();
                                    List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                        .ObjectContext
                                                        .Translate<BuyerMinDc>(reader).ToList();
                                    db.Database.Connection.Close();
                                    #endregion
                                    var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                    if (data.Count > 0 && data != null)
                                    {
                                        foreach (var i in createPRAppovers)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + i.PeopleId + ")";
                                            List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();
                                            if (Ids.Count > 0)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = i.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 1;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.Comments = "Approved By :" + name;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = i.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }

                                            //if (!PRStatusData)
                                            //{
                                            //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //    pr.ApprovalID = i.PeopleId;
                                            //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            //    pr.IsApprove = 1;
                                            //    pr.IsActive = true;
                                            //    pr.IsDeleted = false;
                                            //    pr.Comments = "Approved By :" + name;
                                            //    pr.CreatedDate = DateTime.Now;
                                            //    db.PRApprovelsStatus.Add(pr);
                                            //    db.Commit();
                                            //}
                                        }
                                        var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                        if (prapprov.All(x => x.IsApprove == 1))
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pom.Status = "Approved";
                                            pom.PRStatus = 3;
                                            pom.BuyerId = BuyerId;
                                            pom.BuyerName = buyerName;
                                            db.Entry(pom).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (var i in createPRAppovers)
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            if (!PRStatusData)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = i.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            Sms s = new Sms();
                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                            string Mob = db.Peoples.Where(q => q.PeopleID == i.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                            db.Commit();
                                        }
                                    }

                                }
                                else
                                {
                                    string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                    smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                    smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                    var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                    ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                    if (ApprovePersonss != null && ApprovePersonss.Any())
                                    {
                                        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                        List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                        // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                        List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                        if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                        {
                                            //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                        }
                                        else
                                        {
                                            //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                        }

                                        if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                        {
                                            #region getPeople
                                            DataTable dtemail = new DataTable();
                                            dtemail.Columns.Add("stringValue");
                                            DataTable dtrole = new DataTable();
                                            dtrole.Columns.Add("stringValue");
                                            if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                            {
                                                List<string> emaillst = new List<string>();

                                                string EmailIds = "";
                                                EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                foreach (var i in emaillst)
                                                {
                                                    var dr = dtemail.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtemail.Rows.Add(dr);
                                                }

                                            }
                                            else
                                            {
                                                List<string> rolelst = new List<string>();
                                                string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                                rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                foreach (var i in rolelst)
                                                {
                                                    var dr = dtrole.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtrole.Rows.Add(dr);
                                                }
                                            }


                                            var paremail = new SqlParameter("emailIds", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";

                                            var pareroles = new SqlParameter("roles", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";
                                            var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                            if (db.Database.Connection.State != ConnectionState.Open)
                                                db.Database.Connection.Open();

                                            var cmd = db.Database.Connection.CreateCommand();
                                            cmd.CommandText = "GetCreatePRApprovallist";
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.CommandTimeout = 600;
                                            cmd.Parameters.Add(paremail);
                                            cmd.Parameters.Add(pareroles);
                                            cmd.Parameters.Add(pareWh);

                                            var reader = cmd.ExecuteReader();
                                            List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                .ObjectContext
                                                                .Translate<BuyerMinDc>(reader).ToList();
                                            db.Database.Connection.Close();
                                            #endregion
                                            var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                            if (data.Count > 0 && data != null)
                                            {
                                                foreach (var i in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    string querys6 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + i.PeopleId + ")";
                                                    List<int> Ids = db.Database.SqlQuery<int>(querys6).ToList();

                                                    if (Ids.Count > 0)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = i.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 1;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.Comments = "Approved By :" + name;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    else
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = i.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    //if (!PRStatusData)
                                                    //{
                                                    //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //    pr.ApprovalID = i.PeopleId;
                                                    //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    //    pr.IsApprove = 1;
                                                    //    pr.IsActive = true;
                                                    //    pr.IsDeleted = false;
                                                    //    pr.Comments = "Approved By :" + name;
                                                    //    pr.CreatedDate = DateTime.Now;
                                                    //    db.PRApprovelsStatus.Add(pr);
                                                    //    db.Commit();
                                                    //}
                                                }
                                                var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();
                                                if (prapprov.All(x => x.IsApprove == 1))
                                                {
                                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                    pom.Status = "Approved";
                                                    pom.PRStatus = 3;
                                                    pom.BuyerId = BuyerId;
                                                    pom.BuyerName = buyerName;
                                                    db.Entry(pom).State = EntityState.Modified;

                                                    if (db.Commit() > 0)
                                                    {
                                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                        var roleName = "";
                                                        foreach (var store in storeIds)
                                                        {
                                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                        }
                                                        if (!string.IsNullOrEmpty(roleName))
                                                        {
                                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                      roleName);

                                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                            if (!check)
                                                            {
                                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                pRPaymentAppoved.CreatedBy = userid;
                                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                pRPaymentAppoved.IsApproved = false;
                                                                pRPaymentAppoved.IsActive = true;
                                                                pRPaymentAppoved.IsDeleted = false;
                                                                pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                            }
                                                            Sms s = new Sms();
                                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                            db.Commit();
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var i in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!PRStatusData)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = i.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                }
                                            }


                                        }
                                        else
                                        {
                                            List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                            var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                            if (BDs == null)
                                                BDs = new List<BuyerMinDc>();
                                            BDs.AddRange(buyerMinDcs);


                                            if (BDs != null && BDs.Any())
                                            {
                                                foreach (var BD in BDs)
                                                {
                                                    var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                    var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                    if (ActivePeople != null && WarePermission != null)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (PRStatusData == null)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            pr.ModifiedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            Sms s = new Sms();
                                                            string msg = smsTempmsg;
                                                            string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                            db.Commit();
                                                        }
                                                    }
                                                    else
                                                    {

                                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (PRStatusData == null)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = pom.BuyerId.Value;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            pr.ModifiedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            Sms s = new Sms();
                                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                            db.Commit();
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pom.BuyerId.Value;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                    db.Commit();
                                                }
                                            }
                                        }

                                    }

                                }

                            }
                            else
                            {
                                string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                                ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();

                                if (ApprovePersons != null && ApprovePersons.Any())
                                {
                                    var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                    if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                    }

                                    if (finalApprovePersons != null && finalApprovePersons.Any())
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();

                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                            foreach (var i in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = i;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var i in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = i;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion
                                        var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var i in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + i.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();

                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = i.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = i.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = i.PeopleId;
                                                //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pom.Status = "Approved";
                                                pom.PRStatus = 3;
                                                pom.BuyerId = BuyerId;
                                                pom.BuyerName = buyerName;
                                                db.Entry(pom).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!check)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            foreach (var i in createPRAppovers)
                                            {
                                                //if (ETtlamt <= 2500000)
                                                //{
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = i.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //}
                                                //else
                                                //{
                                                //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                //    var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                //    if (!PRStatusData)
                                                //    {
                                                //        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //        pr.ApprovalID = i.PeopleId;
                                                //        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                //        pr.IsApprove = 1;
                                                //        pr.Comments = "Approved By :" + name;
                                                //        pr.IsActive = true;
                                                //        pr.IsDeleted = false;
                                                //        pr.CreatedDate = DateTime.Now;
                                                //        db.PRApprovelsStatus.Add(pr);
                                                //        db.Commit();
                                                //    }
                                                //}
                                            }
                                        }



                                    }

                                    if (ETtlamt > 2500000)
                                    {
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                        pom.Status = "Approved";
                                        pom.PRStatus = 3;
                                        pom.BuyerId = BuyerId;
                                        pom.BuyerName = buyerName;
                                        db.Entry(pom).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            var roleName = "";
                                            foreach (var store in storeIds)
                                            {
                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                            }
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                if (!check)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;
                                                    pRPaymentAppoved.IsDeleted = false;
                                                    pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                    var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                    if (BDs == null)
                                        BDs = new List<BuyerMinDc>();
                                    BDs.AddRange(buyerMinDcs);


                                    if (BDs != null && BDs.Any())
                                    {
                                        foreach (var BD in BDs)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (ActivePeople != null && WarePermission != null)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                            else
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pom.BuyerId.Value;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = pom.BuyerId.Value;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            db.Commit();
                                        }
                                    }
                                }

                            }


                            //---

                            /*
                            int PurchaseOrderId = pom.PurchaseOrderId;
                            var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == PurchaseOrderId).ToList();
                            foreach (var a in prapprovs)
                            {
                                a.IsActive = false;
                                a.IsDeleted = true;
                                a.Comments = "";
                                db.Entry(a).State = EntityState.Modified;
                                db.Commit();
                            }

                            List<classification> ABCClassification = new List<classification>();
                            var dCategory = pom.PurchaseOrderDetail.Where(x => x.Category == "D").Select(x => x.ItemId).ToList();
                            var cCategories = pom.PurchaseOrderDetail.Where(x => x.Category == "C").Select(x => new classification { itemNumber = x.ItemNumber, warehouseid = x.WarehouseId.Value }).ToList();
                            // var itemids = Items.Where(x => cCategories.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                            bool ABCvalue = false;
                            foreach (var cat in cCategories)
                            {
                                var query = "select itemNumber,warehouseid,Category,Qty from ItemsClassification Where itemNumber = '" + cat.itemNumber + "' and warehouseid = " + cat.warehouseid;
                                var ABCClass = db.Database.SqlQuery<classification>(query).ToList();
                                ABCClassification.AddRange(ABCClass);
                            }

                            foreach (var abc in ABCClassification)
                            {

                                var Podetail = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.ItemNumber == abc.itemNumber).FirstOrDefault();
                                if (Podetail.PurchaseQty > abc.Qty)
                                {
                                    ABCvalue = true;
                                }

                            }
                            //string smstempmsg = " is waiting for your approval. ShopKirana";
                            string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                            smstempmsg = smstempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                            if (dCategory.Count > 0 || ABCvalue == true)
                            {
                                if (ETtlamt < 1000000)
                                {
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }

                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                                    "Supplier Payment Approver");

                                    List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                    foreach (var BD in buyerMinDcss)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (WarePermission != null && ActivePeople != null)
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                //string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string msg = smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                                db.Commit();
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }
                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                    "Supplier Payment Approver");

                                    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 1;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                    }
                                    db.Commit();

                                    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                    if (poid != null)
                                    {
                                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                        poid.Status = "Approved";
                                        poid.PRStatus = 3;
                                        poid.BuyerId = BuyerId;
                                        poid.BuyerName = Name.DisplayName;
                                        db.Entry(poid).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //string query = string.Empty;
                                            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                if (check == null)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;

                                                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                else
                                                {

                                                    check.IsApproved = false;
                                                    check.IsActive = true;
                                                    check.IsDeleted = false;
                                                    check.ModifiedDate = DateTime.Now;
                                                    db.Entry(check).State = EntityState.Modified;

                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS == null ? "" : dltSMS.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                            }



                            if (ETtlamt <= 300000)
                            {
                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();


                                var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();

                                if (BDs == null)
                                    BDs = new List<BuyerMinDc>();
                                BDs.AddRange(buyerMinDcs);


                                if (BDs != null && BDs.Any())
                                {
                                    foreach (var BD in BDs)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();

                                        if (ActivePeople != null && WarePermission != null)
                                        {
                                            var PRStatusData = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == BD.PeopleId) : null;
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                            }
                                            db.Commit();

                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pom.BuyerId.Value;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = pom.BuyerId.Value;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 0;
                                        pr.IsActive = true;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        Sms s = new Sms();
                                        string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                        string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        db.Commit();
                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 0;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                        db.Commit();
                                    }
                                }

                                PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                if (PRPA != null)
                                {
                                    PRPA.IsApproved = false;
                                    PRPA.IsActive = false;
                                    PRPA.IsDeleted = true;
                                    PRPA.ModifiedDate = DateTime.Now;
                                    db.Entry(PRPA).State = EntityState.Modified;
                                    db.Commit();
                                }
                            }
                            else if (ETtlamt > 300000 && ETtlamt < 1000000)
                            {
                                #region Code Comments
                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                "Zonal Sourcing lead");

                                List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();
                                foreach (var BD in buyerMinDcs)
                                {
                                    var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                    var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                    if (WarePermission != null && ActivePeople != null)
                                    {
                                        var PRStatusData = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == BD.PeopleId) : null;
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        }
                                        else
                                        {
                                            PRStatusData.IsApprove = 0;
                                            PRStatusData.IsActive = true;
                                            PRStatusData.IsDeleted = false;
                                            PRStatusData.ModifiedDate = DateTime.Now;
                                            db.Entry(PRStatusData).State = EntityState.Modified;
                                        }
                                        db.Commit();

                                    }
                                }
                                #endregion
                                PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                if (PRPA != null)
                                {
                                    PRPA.IsApproved = false;
                                    PRPA.IsActive = false;
                                    PRPA.IsDeleted = true;
                                    PRPA.ModifiedDate = DateTime.Now;
                                    db.Entry(PRPA).State = EntityState.Modified;
                                    db.Commit();
                                }
                                if (pom != null)
                                {
                                    var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                    var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                    var SubsubCategoryid = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    //List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                    //int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();
                                    foreach (var st in store)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == st.OwnerId && x.Active == true).FirstOrDefault();
                                        // var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == st.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (ActivePeople != null)
                                        {
                                            // var PRStatusData1 = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == st.OwnerId).FirstOrDefault();
                                            var PRStatusData1 = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == st.OwnerId) : null;
                                            if (PRStatusData1 == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = st != null ? st.OwnerId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                //ShopKirana PR id: {#var#} are waiting for your approval.
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == st.OwnerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            }
                                            else
                                            {
                                                PRStatusData1.IsApprove = 0;
                                                PRStatusData1.IsActive = true;
                                                PRStatusData1.IsDeleted = false;
                                                PRStatusData1.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData1).State = EntityState.Modified;
                                            }
                                            db.Commit();
                                        }
                                    }
                                    if (store.Count == 0)
                                    {
                                        string Newquery = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                                      "Zonal Sourcing lead", "Region sales lead");

                                        List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(Newquery).ToList();
                                        foreach (var BD in buyerMinDcss)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (WarePermission != null && ActivePeople != null)
                                            {
                                                var PRStatusData = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == BD.PeopleId) : null;
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                }
                                                else
                                                {
                                                    PRStatusData.IsApprove = 0;
                                                    PRStatusData.IsActive = true;
                                                    PRStatusData.IsDeleted = false;
                                                    PRStatusData.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData).State = EntityState.Modified;
                                                }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                            }
                            else if (ETtlamt >= 1000000)
                            {

                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active=1",
                                                "Supplier Payment Approver");

                                BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();

                                var PRStatusEntryCheck = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();

                                if (PRStatusEntryCheck == null)
                                {

                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }

                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId).FirstOrDefault();
                                    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();


                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        //Sms s = new Sms();
                                        //string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your approval.";
                                        //string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                        //if (Mob != null) { s.sendOtp(Mob, msg); }
                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 1;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                    }
                                    db.Commit();

                                    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                    if (poid != null)
                                    {
                                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                        poid.Status = "Approved";
                                        poid.PRStatus = 3;
                                        poid.BuyerId = BuyerId;
                                        poid.BuyerName = Name.DisplayName;
                                        db.Entry(poid).State = EntityState.Modified;
                                        if (db.Commit() > 0)
                                        {
                                            //string query = string.Empty;
                                            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                if (check == null)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;

                                                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                else
                                                {

                                                    check.IsApproved = false;
                                                    check.IsActive = true;
                                                    check.IsDeleted = false;
                                                    check.ModifiedDate = DateTime.Now;
                                                    db.Entry(check).State = EntityState.Modified;

                                                }
                                                Sms s = new Sms();
                                                //  string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS == null ? "" : dltSMS.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }

                            }
                            */
                            // db.Commit();

                        }
                        else
                        {
                            POResult.Status = false;
                            POResult.Message = "Some error occurred during save PR item. PR # " + pom.PurchaseOrderId;
                        }

                    }

                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Cannot be Remove All Items";

                    }

                }
            }

            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }

        /// <summary>
        /// Edit item
        /// </summary>
        /// <param name="temppo"></param>        
        /// <returns></returns>
        [Route("edit")]
        [AcceptVerbs("PUT")]
        public POResult EditItem(PurchaseList temppo)
        {

            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {
                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();

                    if (pom.Status == "Draft" || pom.Status == "Self Approved" || pom.Status == "Send for Approval" || pom.Status == "Approved")
                    {
                        PurchaseOrderDetail pd = pom.PurchaseOrderDetail.Where(q => q.PurchaseOrderDetailId == temppo.OrderDetailsId).SingleOrDefault();
                        if (pd != null && pom.PoType == "Auto PR")
                        {


                            if (temppo.qty > pd.TotalQuantity)
                            {
                                var WarehouseId = new SqlParameter("@warehouseIds", pd.WarehouseId);
                                var ItemMultiMRPId = new SqlParameter("@itemmultimrpid", pd.ItemMultiMRPId);
                                var Moq = new SqlParameter("@Moq", pd.MOQ);
                                var NoofCases = new SqlParameter("@NoofCases", (double)(temppo.qty / pd.MOQ));
                                var PurchaseorderDetailId = new SqlParameter("@PurchaseorderDetailId", pd.PurchaseOrderDetailId);
                                var IsEdit = new SqlParameter("@IsEdit", true);
                                bool res = db.Database.SqlQuery<bool>(" exec Sp_getAllowedQuantityCheck @warehouseIds,@itemmultimrpid,@Moq,@NoofCases,@PurchaseorderDetailId,@IsEdit", WarehouseId, ItemMultiMRPId, Moq, NoofCases, PurchaseorderDetailId, IsEdit).FirstOrDefault();
                                if (res == false)
                                {
                                    POResult.Status = false;
                                    POResult.Message = "Require Quantity is greater then Allowed Quantity";
                                    return POResult;
                                }
                            }

                        }
                        //#region CheckIsAdjustmentPOforStopDecreaseQty

                        //if (pom.IsAdjustmentPo && pd.TotalQuantity > temppo.qty)
                        //{
                        //    POResult.Status = false;
                        //    POResult.Message = "Qty Can not be Decrease for Adjustment PO";
                        //    return POResult;
                        //}
                        //#endregion


                        pd.TotalQuantity = int.Parse(temppo.qty.ToString());
                        pd.PurchaseQty = int.Parse(temppo.qty.ToString());

                        #region forecast
                        if (pom.IsPR && db.ItemForeCastCitys.Any(x => x.WarehouseId == pom.WarehouseId && x.IsActive == true && x.IsDeleted == false))
                        {
                            var forecastitem = GetEligibleQtyForPo(pom.WarehouseId, pd.ItemMultiMRPId);
                            if (forecastitem != null)
                            {
                                if (forecastitem.QtyForAction < int.Parse(temppo.qty.ToString()) && forecastitem.QtyForAction > 0)
                                {
                                    POResult.Message = "you can purchase item qty upto : " + forecastitem.QtyForAction + " For item " + pd.ItemName;
                                    POResult.Status = false;
                                    return POResult;
                                }
                                else if (forecastitem.QtyForAction < 0)
                                {
                                    POResult.Message = "you can't purchase item " + pd.ItemName + " (forecast item)";
                                    POResult.Status = false;
                                    return POResult;
                                }
                            }
                        }
                        #endregion


                        #region get Estimate amount and update level

                        /// Get Estimate amount                  
                        if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                        {
                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                            foreach (var data in pom.PurchaseOrderDetail)
                            {
                                // var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                                int qty = data.TotalQuantity;
                                double POPrice = data.Price;
                                ETtlamt += Convert.ToDouble(POPrice) * qty;
                            }
                        }
                        pom.ETotalAmount = ETtlamt;

                        //pom.ModifiedBy = userid;
                        //pom.ModifiedDate = indianTime;
                        db.Entry(pom).State = EntityState.Modified;

                        ///  End ///
                        #endregion

                        #region Level allocation 
                        if (pom.Status != "Draft")
                        {
                            PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                            if (get_approvalz != null)
                            {
                                if (get_approvalz.Level == "Level1")  /// Self Approved
                                {
                                    pom.Status = "Self Approved";
                                    pom.progress = "50";
                                    pom.Level = "Level1";
                                    pom.Approval1 = 0;
                                    pom.Approval2 = 0;
                                    pom.Approval3 = 0;
                                    pom.Approval4 = 0;
                                    pom.Approval5 = 0;
                                    pom.ApprovalName1 = pom.CreatedBy;
                                    pom.Rewiever1 = 0;
                                    pom.Rewiever2 = 0;
                                    pom.Rewiever3 = 0;
                                    pom.Rewiever4 = 0;
                                    pom.Rewiever5 = 0;
                                    pom.ApprovedBy = pom.CreatedBy;
                                }
                                else /// Send for approval
                                {
                                    pom.Status = "Send for Approval";
                                    pom.progress = "20";
                                    pom.Level = get_approvalz.Level;
                                    pom.Approval1 = get_approvalz.Approval1;
                                    pom.Approval2 = get_approvalz.Approval2;
                                    pom.Approval3 = get_approvalz.Approval3;
                                    pom.Approval4 = get_approvalz.Approval4;
                                    pom.Approval5 = get_approvalz.Approval5;
                                    pom.Rewiever1 = get_approvalz.Reviewer1;
                                    pom.Rewiever2 = get_approvalz.Reviewer2;
                                    pom.Rewiever3 = get_approvalz.Reviewer3;
                                    pom.Rewiever4 = get_approvalz.Reviewer4;
                                    pom.Rewiever5 = get_approvalz.Reviewer5;
                                    pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                    pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                    pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                    pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                    pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                    pom.RewieverName1 = get_approvalz.ReviewerName1;
                                    pom.RewieverName2 = get_approvalz.ReviewerName2;
                                    pom.RewieverName3 = get_approvalz.ReviewerName3;
                                    pom.RewieverName4 = get_approvalz.ReviewerName4;
                                    pom.RewieverName5 = get_approvalz.ReviewerName5;
                                }
                            }
                        }
                        #endregion

                        // string smstempmsg = " is waiting for your approval. ShopKirana";
                        string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                        var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                        smstempmsg = dltSMS == null ? "" : dltSMS.Template;
                        smstempmsg = smstempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                        if (db.Commit() > 0)
                        {
                            if (pom.Level != "Level1" && pom.Status != "Draft")
                            {
                                Sms s = new Sms();
                                // string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                string msg = smstempmsg;
                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.Approval1).Select(q => q.Mobile).SingleOrDefault();
                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                            }
                            if (pom.IsPR == true)
                            {
                                var PRApproval = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();

                                Sms s = new Sms();
                                //string msg = "ShopKirana PR Id: " + pom.PurchaseOrderId + " Approved by you has been Changed. Shopkirana";
                                // string msg = "ShopKirana PR No " + pom.PurchaseOrderId + " Approved by you has been Changed. ShopKirana";
                                string msg = ""; //"ShopKirana PR Id: {#var#} Approved by you has been Changed. Shopkirana";
                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Updation");
                                msg = dltSMS == null ? "" : dltSMS.Template;
                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                string Mob = db.Peoples.Where(q => q.PeopleID == PRApproval.ApprovedBY).Select(q => q.Mobile).SingleOrDefault();
                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                            }
                            POResult.Status = true;
                            POResult.Message = "PO item updated successfuly. PO # " + pom.PurchaseOrderId;

                            #region Create History

                            PoEditHistory Hisdata = new PoEditHistory()
                            {
                                PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                                CreateDate = indianTime,
                                UserId = userid,
                                ModificationType = "Update Item"
                            };
                            var result = GenratHistory(Hisdata);
                            #endregion
                        }
                        else
                        {
                            POResult.Status = false;
                            POResult.Message = "Some error occurred during save PO item. PO # " + pom.PurchaseOrderId;
                        }
                    }
                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Cannot be Change on this Status ";
                    }

                }
            }

            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }

        /// <summary>
        /// EDit Quantity in PR
        /// </summary>
        /// <param name="temppo"></param>
        /// <returns></returns>
        [Route("PRedit")]
        [AcceptVerbs("PUT")]
        public POResult PREditItem(PurchaseList temppo)
        {

            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {
                    List<ItemMaster> Items = new List<ItemMaster>();
                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();

                    if (pom.PRStatus != 5)
                    {

                        PurchaseOrderDetail pd = pom.PurchaseOrderDetail.Where(q => q.PurchaseOrderDetailId == temppo.OrderDetailsId).SingleOrDefault();
                        #region forecast
                        if (db.ItemForeCastCitys.Any(x => x.WarehouseId == pom.WarehouseId && x.IsActive == true && x.IsDeleted == false))
                        {
                            var forecastitem = GetEligibleQtyForPo(pom.WarehouseId, pd.ItemMultiMRPId);
                            if (forecastitem != null)
                            {
                                if (forecastitem.QtyForAction < int.Parse(temppo.qty.ToString()) && forecastitem.QtyForAction > 0)
                                {
                                    POResult.Message = "you can purchase item qty upto : " + forecastitem.QtyForAction + " For item " + pd.ItemName;
                                    POResult.Status = false;
                                    return POResult;
                                }
                                else if (forecastitem.QtyForAction < 0)
                                {
                                    POResult.Message = "you can't purchase item " + pd.ItemName + " (forecast item)";
                                    POResult.Status = false;
                                    return POResult;
                                }
                            }
                        }
                        #endregion
                        pd.TotalQuantity = int.Parse(temppo.qty.ToString());
                        pd.PurchaseQty = int.Parse(temppo.qty.ToString());

                        #region get Estimate amount and update level

                        /// Get Estimate amount                  
                        if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                        {
                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                            foreach (var data in pom.PurchaseOrderDetail)
                            {
                                //var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                                int qty = data.TotalQuantity;
                                double POPrice = data.Price;
                                ETtlamt += Convert.ToDouble(POPrice) * qty;
                            }
                        }
                        pom.ETotalAmount = ETtlamt;

                        #region CheckIsAdjustmentPOforStopDecreaseQty
                        if (pom.IsAdjustmentPo)
                        {
                            var adjustmentAmt = db.AdjustmentPODetails.Where(x => x.PurchaseRequestId == temppo.PurchaseOrderId).Sum(x => x.Amount);

                            if (adjustmentAmt > pom.ETotalAmount)
                            {
                                POResult.Status = false;
                                POResult.Message = "Amount Can not be Decrease for Adjustment PO";
                                return POResult;
                            }
                        }
                        #endregion

                        pom.PRStatus = 1;
                        db.Entry(pom).State = EntityState.Modified;

                        ///  End ///
                        #endregion
                        #region Level allocation 
                        if (pom.Status != "Draft")
                        {
                            PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                            if (get_approvalz != null)
                            {
                                if (get_approvalz.Level == "Level1")  /// Self Approved
                                {
                                    pom.Status = "PR Send for Approval";
                                    pom.progress = "50";
                                    pom.Level = "Level1";
                                    pom.Approval1 = 0;
                                    pom.Approval2 = 0;
                                    pom.Approval3 = 0;
                                    pom.Approval4 = 0;
                                    pom.Approval5 = 0;
                                    pom.ApprovalName1 = pom.CreatedBy;
                                    pom.Rewiever1 = 0;
                                    pom.Rewiever2 = 0;
                                    pom.Rewiever3 = 0;
                                    pom.Rewiever4 = 0;
                                    pom.Rewiever5 = 0;
                                    // pom.ApprovedBy = pom.CreatedBy;
                                }
                                else /// Send for approval
                                {
                                    pom.Status = "PR Send for Approval";
                                    pom.progress = "20";
                                    pom.Level = get_approvalz.Level;
                                    pom.Approval1 = get_approvalz.Approval1;
                                    pom.Approval2 = get_approvalz.Approval2;
                                    pom.Approval3 = get_approvalz.Approval3;
                                    pom.Approval4 = get_approvalz.Approval4;
                                    pom.Approval5 = get_approvalz.Approval5;
                                    pom.Rewiever1 = get_approvalz.Reviewer1;
                                    pom.Rewiever2 = get_approvalz.Reviewer2;
                                    pom.Rewiever3 = get_approvalz.Reviewer3;
                                    pom.Rewiever4 = get_approvalz.Reviewer4;
                                    pom.Rewiever5 = get_approvalz.Reviewer5;
                                    pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                    pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                    pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                    pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                    pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                    pom.RewieverName1 = get_approvalz.ReviewerName1;
                                    pom.RewieverName2 = get_approvalz.ReviewerName2;
                                    pom.RewieverName3 = get_approvalz.ReviewerName3;
                                    pom.RewieverName4 = get_approvalz.ReviewerName4;
                                    pom.RewieverName5 = get_approvalz.ReviewerName5;
                                }
                            }
                        }
                        #endregion
                        //  string smstempmsg = " is waiting for your approval. ShopKirana";
                        //string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                        // var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                        //smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                        // smstempmsg = smstempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                        if (db.Commit() > 0)
                        {

                            POResult.Status = true;
                            POResult.Message = "PR item updated successfuly. PR # " + pom.PurchaseOrderId;

                            #region Create History

                            PoEditHistory Hisdata = new PoEditHistory()
                            {
                                PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                                CreateDate = indianTime,
                                UserId = userid,
                                ModificationType = "Update Item"
                            };
                            var result = GenratHistory(Hisdata);
                            #endregion
                        }

                        if (POResult.Status == true)
                        {
                            //---

                            var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();
                            foreach (var a in prapprovs)
                            {
                                a.IsActive = false;
                                a.IsDeleted = true;
                                a.Comments = "";
                                db.Entry(a).State = EntityState.Modified;
                                db.Commit();
                            }
                            PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                            if (PRPA != null)
                            {
                                PRPA.IsApproved = false;
                                PRPA.IsActive = false;
                                PRPA.IsDeleted = true;
                                PRPA.ModifiedDate = DateTime.Now;
                                db.Entry(PRPA).State = EntityState.Modified;
                                db.Commit();
                            }
                            var pdList = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).ToList();
                            var Itemids = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).Select(x => x.ItemId).Distinct().ToList();
                            if (Itemids != null && Itemids.Any())
                            {
                                Items = db.itemMasters.Where(z => Itemids.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == pom.WarehouseId).ToList();
                            }

                            var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                            var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                            if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                            {
                                var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                                var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                                //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                                ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                                }
                                else
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                                }

                                if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                                {
                                    #region getPeople
                                    DataTable dtemail = new DataTable();
                                    dtemail.Columns.Add("stringValue");
                                    DataTable dtrole = new DataTable();
                                    dtrole.Columns.Add("stringValue");
                                    if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                    {
                                        List<string> emaillst = new List<string>();
                                        string EmailIds = "";
                                        EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                        emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                        foreach (var i in emaillst)
                                        {
                                            var dr = dtemail.NewRow();
                                            dr["stringValue"] = i;
                                            dtemail.Rows.Add(dr);
                                        }

                                    }
                                    else
                                    {
                                        List<string> rolelst = new List<string>();
                                        string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                        rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                        foreach (var i in rolelst)
                                        {
                                            var dr = dtrole.NewRow();
                                            dr["stringValue"] = i;
                                            dtrole.Rows.Add(dr);
                                        }
                                    }


                                    var paremail = new SqlParameter("emailIds", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";

                                    var pareroles = new SqlParameter("roles", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";
                                    var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                    if (db.Database.Connection.State != ConnectionState.Open)
                                        db.Database.Connection.Open();

                                    var cmd = db.Database.Connection.CreateCommand();
                                    cmd.CommandText = "GetCreatePRApprovallist";
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 600;
                                    cmd.Parameters.Add(paremail);
                                    cmd.Parameters.Add(pareroles);
                                    cmd.Parameters.Add(pareWh);

                                    var reader = cmd.ExecuteReader();
                                    List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                        .ObjectContext
                                                        .Translate<BuyerMinDc>(reader).ToList();
                                    db.Database.Connection.Close();
                                    #endregion
                                    var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                    if (data.Count > 0 && data != null)
                                    {
                                        foreach (var item in createPRAppovers)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            string querys3 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                            List<int> Ids = db.Database.SqlQuery<int>(querys3).ToList();

                                            if (Ids.Count > 0)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 1;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.Comments = "Approved By :" + name;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            //if (!PRStatusData)
                                            //{
                                            //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //    pr.ApprovalID = item.PeopleId;
                                            //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            //    pr.IsApprove = 1;
                                            //    pr.IsActive = true;
                                            //    pr.IsDeleted = false;
                                            //    pr.Comments = "Approved By :" + name;
                                            //    pr.CreatedDate = DateTime.Now;
                                            //    db.PRApprovelsStatus.Add(pr);
                                            //    db.Commit();
                                            //}
                                        }
                                        var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                        if (prapprov.All(x => x.IsApprove == 1))
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pom.Status = "Approved";
                                            pom.PRStatus = 3;
                                            pom.BuyerId = BuyerId;
                                            pom.BuyerName = buyerName;
                                            db.Entry(pom).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (var i in createPRAppovers)
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            if (!PRStatusData)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = i.PeopleId;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            Sms s = new Sms();
                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                            string Mob = db.Peoples.Where(q => q.PeopleID == i.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                            db.Commit();
                                        }
                                    }

                                }
                                else
                                {
                                    string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                    smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                    smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                    var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                    ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                    if (ApprovePersonss != null && ApprovePersonss.Any())
                                    {
                                        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                        List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                        // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                        List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                        if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                        {
                                            //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                        }
                                        else
                                        {
                                            //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                        }

                                        if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                        {
                                            #region getPeople
                                            DataTable dtemail = new DataTable();
                                            dtemail.Columns.Add("stringValue");
                                            DataTable dtrole = new DataTable();
                                            dtrole.Columns.Add("stringValue");
                                            if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                            {
                                                List<string> emaillst = new List<string>();

                                                string EmailIds = "";
                                                EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                foreach (var i in emaillst)
                                                {
                                                    var dr = dtemail.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtemail.Rows.Add(dr);
                                                }

                                            }
                                            else
                                            {
                                                List<string> rolelst = new List<string>();
                                                string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                                rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                foreach (var i in rolelst)
                                                {
                                                    var dr = dtrole.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtrole.Rows.Add(dr);
                                                }
                                            }


                                            var paremail = new SqlParameter("emailIds", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";

                                            var pareroles = new SqlParameter("roles", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";
                                            var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                            if (db.Database.Connection.State != ConnectionState.Open)
                                                db.Database.Connection.Open();

                                            var cmd = db.Database.Connection.CreateCommand();
                                            cmd.CommandText = "GetCreatePRApprovallist";
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.CommandTimeout = 600;
                                            cmd.Parameters.Add(paremail);
                                            cmd.Parameters.Add(pareroles);
                                            cmd.Parameters.Add(pareWh);

                                            var reader = cmd.ExecuteReader();
                                            List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                .ObjectContext
                                                                .Translate<BuyerMinDc>(reader).ToList();
                                            db.Database.Connection.Close();
                                            #endregion
                                            var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                            if (data.Count > 0 && data != null)
                                            {
                                                foreach (var item in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    string querys4 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                    List<int> Ids = db.Database.SqlQuery<int>(querys4).ToList();

                                                    if (Ids.Count > 0)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 1;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.Comments = "Approved By :" + name;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    else
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }

                                                    //if (!PRStatusData)
                                                    //{
                                                    //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //    pr.ApprovalID = item.PeopleId;
                                                    //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    //    pr.IsApprove = 1;
                                                    //    pr.IsActive = true;
                                                    //    pr.IsDeleted = false;
                                                    //    pr.Comments = "Approved By :" + name;
                                                    //    pr.CreatedDate = DateTime.Now;
                                                    //    db.PRApprovelsStatus.Add(pr);
                                                    //    db.Commit();
                                                    //}
                                                }

                                                var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();
                                                if (prapprov.All(x => x.IsApprove == 1))
                                                {

                                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                    pom.Status = "Approved";
                                                    pom.PRStatus = 3;
                                                    pom.BuyerId = BuyerId;
                                                    pom.BuyerName = buyerName;
                                                    db.Entry(pom).State = EntityState.Modified;

                                                    if (db.Commit() > 0)
                                                    {
                                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                        var roleName = "";
                                                        foreach (var store in storeIds)
                                                        {
                                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                        }
                                                        if (!string.IsNullOrEmpty(roleName))
                                                        {
                                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                      roleName);

                                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                            if (!check)
                                                            {
                                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                pRPaymentAppoved.CreatedBy = userid;
                                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                pRPaymentAppoved.IsApproved = false;
                                                                pRPaymentAppoved.IsActive = true;
                                                                pRPaymentAppoved.IsDeleted = false;
                                                                pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                            }
                                                            Sms s = new Sms();
                                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                            db.Commit();
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var i in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!PRStatusData)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = i.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                }
                                            }


                                        }
                                        else
                                        {
                                            List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                            var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                            if (BDs == null)
                                                BDs = new List<BuyerMinDc>();
                                            BDs.AddRange(buyerMinDcs);


                                            if (BDs != null && BDs.Any())
                                            {
                                                foreach (var BD in BDs)
                                                {
                                                    var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                    var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                    if (ActivePeople != null && WarePermission != null)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (PRStatusData == null)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            pr.ModifiedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            Sms s = new Sms();
                                                            string msg = smsTempmsg;
                                                            string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                            db.Commit();
                                                        }
                                                    }
                                                    else
                                                    {

                                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (PRStatusData == null)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = pom.BuyerId.Value;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            pr.ModifiedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            Sms s = new Sms();
                                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                            db.Commit();
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pom.BuyerId.Value;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                    db.Commit();
                                                }
                                            }
                                        }

                                    }


                                }

                            }
                            else
                            {
                                string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                                ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();

                                if (ApprovePersons != null && ApprovePersons.Any())
                                {
                                    var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                    if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                    }

                                    if (finalApprovePersons != null && finalApprovePersons.Any())
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();

                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                            foreach (var i in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = i;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var i in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = i;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion

                                        var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string querys5 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(querys5).ToList();

                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = item.PeopleId;
                                                //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pom.Status = "Approved";
                                                pom.PRStatus = 3;
                                                pom.BuyerId = BuyerId;
                                                pom.BuyerName = buyerName;
                                                db.Entry(pom).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!check)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            foreach (var i in createPRAppovers)
                                            {
                                                //if (ETtlamt <= 2500000)
                                                //{
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = i.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //}
                                                //else
                                                //{
                                                //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                //var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = i.PeopleId;
                                                //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                                //}
                                            }
                                        }


                                    }

                                    if (ETtlamt > 2500000)
                                    {
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                        pom.Status = "Approved";
                                        pom.PRStatus = 3;
                                        pom.BuyerId = BuyerId;
                                        pom.BuyerName = buyerName;
                                        db.Entry(pom).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            var roleName = "";
                                            foreach (var store in storeIds)
                                            {
                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                            }
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                if (!check)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;
                                                    pRPaymentAppoved.IsDeleted = false;
                                                    pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                    var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                    if (BDs == null)
                                        BDs = new List<BuyerMinDc>();
                                    BDs.AddRange(buyerMinDcs);


                                    if (BDs != null && BDs.Any())
                                    {
                                        foreach (var BD in BDs)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (ActivePeople != null && WarePermission != null)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                            else
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pom.BuyerId.Value;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = pom.BuyerId.Value;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            db.Commit();
                                        }
                                    }
                                }

                            }


                            //---
                            /*
                            int PurchaseOrderId = pom.PurchaseOrderId;
                            var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == PurchaseOrderId).ToList();
                            foreach (var a in prapprovs)
                            {
                                a.IsActive = false;
                                a.IsDeleted = true;
                                a.Comments = "";
                                db.Entry(a).State = EntityState.Modified;
                                db.Commit();
                            }


                            List<classification> ABCClassification = new List<classification>();
                            var dCategory = pom.PurchaseOrderDetail.Where(x => x.Category == "D").Select(x => x.ItemId).ToList();
                            var cCategories = pom.PurchaseOrderDetail.Where(x => x.Category == "C").Select(x => new classification { itemNumber = x.ItemNumber, warehouseid = x.WarehouseId.Value }).ToList();
                            // var itemids = Items.Where(x => cCategories.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                            bool ABCvalue = false;
                            foreach (var cat in cCategories)
                            {
                                var query = "select itemNumber,warehouseid,Category,Qty from ItemsClassification Where itemNumber = '" + cat.itemNumber + "' and warehouseid = " + cat.warehouseid;
                                var ABCClass = db.Database.SqlQuery<classification>(query).ToList();
                                ABCClassification.AddRange(ABCClass);
                            }

                            foreach (var abc in ABCClassification)
                            {

                                var Podetail = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.ItemNumber == abc.itemNumber).FirstOrDefault();
                                if (Podetail.PurchaseQty > abc.Qty)
                                {
                                    ABCvalue = true;
                                }

                            }

                            if (dCategory.Count > 0 || ABCvalue == true)
                            {
                                if (ETtlamt < 1000000)
                                {
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }


                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                                    "Supplier Payment Approver");

                                    List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                    foreach (var BD in buyerMinDcss)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (WarePermission != null && ActivePeople != null)
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                //string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string msg = smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                                db.Commit();
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }

                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                    "Supplier Payment Approver");

                                    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 1;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                    }
                                    db.Commit();

                                    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                    if (poid != null)
                                    {
                                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                        poid.Status = "Approved";
                                        poid.PRStatus = 3;
                                        poid.BuyerId = BuyerId;
                                        poid.BuyerName = Name.DisplayName;
                                        db.Entry(poid).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //string query = string.Empty;
                                            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                if (check == null)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;

                                                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                else
                                                {

                                                    check.IsApproved = false;
                                                    check.IsActive = true;
                                                    check.IsDeleted = false;
                                                    check.ModifiedDate = DateTime.Now;
                                                    db.Entry(check).State = EntityState.Modified;

                                                }
                                                Sms s = new Sms();
                                                //  string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                            }


                            if (ETtlamt <= 300000)
                            {
                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();

                                if (BDs == null)
                                    BDs = new List<BuyerMinDc>();
                                BDs.AddRange(buyerMinDcs);

                                if (BDs != null && BDs.Any())
                                {
                                    foreach (var BD in BDs)
                                    {
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        if (ActivePeople != null && WarePermission != null)
                                        {
                                            var PRStatusData = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == BD.PeopleId) : null;
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                            }
                                            db.Commit();
                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pom.BuyerId.Value;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                                db.Commit();
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = pom.BuyerId.Value;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 0;
                                        pr.IsActive = true;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        Sms s = new Sms();
                                        string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                        string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        db.Commit();
                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 0;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                        db.Commit();
                                    }
                                }
                                PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                if (PRPA != null)
                                {
                                    PRPA.IsApproved = false;
                                    PRPA.IsActive = false;
                                    PRPA.IsDeleted = true;
                                    PRPA.ModifiedDate = DateTime.Now;
                                    db.Entry(PRPA).State = EntityState.Modified;
                                    db.Commit();
                                }
                            }
                            else if (ETtlamt > 300000 && ETtlamt < 1000000)
                            {
                                #region code Comments
                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                "Zonal Sourcing lead");

                                List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                foreach (var BD in buyerMinDcs)
                                {
                                    var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                    var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                    if (WarePermission != null && ActivePeople != null)
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        }
                                        else
                                        {
                                            PRStatusData.IsApprove = 0;
                                            PRStatusData.IsActive = true;
                                            PRStatusData.IsDeleted = false;
                                            PRStatusData.ModifiedDate = DateTime.Now;
                                            db.Entry(PRStatusData).State = EntityState.Modified;
                                        }
                                        db.Commit();

                                    }
                                }
                                #endregion
                                PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                if (PRPA != null)
                                {
                                    PRPA.IsApproved = false;
                                    PRPA.IsActive = false;
                                    PRPA.IsDeleted = true;
                                    PRPA.ModifiedDate = DateTime.Now;
                                    db.Entry(PRPA).State = EntityState.Modified;
                                    db.Commit();
                                }
                                if (pom != null)
                                {
                                    var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                    var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                    var SubsubCategoryid = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    //List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                    //int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();
                                    foreach (var st in store)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == st.OwnerId && x.Active == true).FirstOrDefault();
                                        // var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == st.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (ActivePeople != null)
                                        {
                                            // var PRStatusData1 = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == st.OwnerId).FirstOrDefault();
                                            var PRStatusData1 = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == st.OwnerId) : null;
                                            if (PRStatusData1 == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = st != null ? st.OwnerId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                //ShopKirana PR id: {#var#} are waiting for your approval.
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == st.OwnerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            }
                                            else
                                            {
                                                PRStatusData1.IsApprove = 0;
                                                PRStatusData1.IsActive = true;
                                                PRStatusData1.IsDeleted = false;
                                                PRStatusData1.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData1).State = EntityState.Modified;
                                            }
                                            db.Commit();
                                        }
                                    }
                                    if (store.Count == 0)
                                    {
                                        string Nquery = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                                               "Zonal Sourcing lead", "Region sales lead");

                                        List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(Nquery).ToList();

                                        foreach (var BD in buyerMinDcss)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (WarePermission != null && ActivePeople != null)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                }
                                                else
                                                {
                                                    PRStatusData.IsApprove = 0;
                                                    PRStatusData.IsActive = true;
                                                    PRStatusData.IsDeleted = false;
                                                    PRStatusData.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData).State = EntityState.Modified;
                                                }
                                                db.Commit();

                                            }
                                        }
                                    }
                                }
                            }
                            else if (ETtlamt >= 1000000)
                            {


                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active=1",
                                            "Supplier Payment Approver");

                                BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                //People HQ = db.Peoples.Where(x => x.PeopleID == 420).SingleOrDefault();
                                People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                var PRStatusEntryCheck = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();

                                if (PRStatusEntryCheck == null)
                                {

                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }


                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = buyerMinDc.PeopleId;
                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                        pr.IsApprove = 1;
                                        pr.IsActive = true;
                                        pr.Comments = "Approved By :" + people.DisplayName;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        //Sms s = new Sms();
                                        //string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your approval.";
                                        //string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                        //if (Mob != null) { s.sendOtp(Mob, msg); }

                                    }
                                    else
                                    {
                                        PRStatusData.IsApprove = 1;
                                        PRStatusData.IsActive = true;
                                        PRStatusData.IsDeleted = false;
                                        PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                        PRStatusData.ModifiedDate = DateTime.Now;
                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                    }
                                    db.Commit();

                                    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                    if (poid != null)
                                    {
                                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                        poid.Status = "Approved";
                                        poid.PRStatus = 3;
                                        poid.BuyerId = BuyerId;
                                        poid.BuyerName = Name.DisplayName;
                                        db.Entry(poid).State = EntityState.Modified;
                                        if (db.Commit() > 0)
                                        {
                                            //string query = string.Empty;
                                            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                if (check == null)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;

                                                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                else
                                                {

                                                    check.IsApproved = false;
                                                    check.IsActive = true;
                                                    check.IsDeleted = false;
                                                    check.ModifiedDate = DateTime.Now;
                                                    db.Entry(check).State = EntityState.Modified;

                                                }
                                                Sms s = new Sms();
                                                //  string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS == null ? "" : dltSMS.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }


                            }

                            */

                        }
                        else
                        {
                            POResult.Status = false;
                            POResult.Message = "Some error occurred during save PR item. PR # " + pom.PurchaseOrderId;
                        }
                    }
                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Cannot be Change on this Status ";
                    }

                }
            }

            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }

        /// <summary>
        /// Remove Item in PR
        /// </summary>
        /// <param name="temppo"></param>        
        /// <returns></returns>
        [Route("PRRemove")]
        [AcceptVerbs("PUT")]
        public POResult PRRemoveItem(PurchaseList temppo)
        {

            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {
                    List<ItemMaster> Items = new List<ItemMaster>();
                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();

                    List<PurchaseOrderDetail> Itemcount = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == temppo.PurchaseOrderId).ToList();
                    if (pom.PRStatus != 5)
                    {
                        if (Itemcount.Count > 1)
                        {

                            PurchaseOrderDetail pd = pom.PurchaseOrderDetail.Where(q => q.PurchaseOrderDetailId == temppo.OrderDetailsId).SingleOrDefault();
                            db.Entry(pd).State = EntityState.Deleted;

                            #region get Estimate amount and update level

                            /// Get Estimate amount                  
                            if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                            {
                                var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                foreach (var data in pom.PurchaseOrderDetail)
                                {
                                    //var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                                    int qty = data.TotalQuantity;
                                    double POPrice = data.Price;
                                    ETtlamt += Convert.ToDouble(POPrice) * qty;
                                }
                            }
                            pom.ETotalAmount = ETtlamt;
                            pom.PRStatus = 1;

                            db.Entry(pom).State = EntityState.Modified;

                            #region CheckIsAdjustmentPOforStopDecreaseQty
                            if (pom.IsAdjustmentPo)
                            {
                                var adjustmentAmt = db.AdjustmentPODetails.Where(x => x.PurchaseRequestId == temppo.PurchaseOrderId).Sum(x => x.Amount);

                                if (adjustmentAmt > pom.ETotalAmount)
                                {
                                    POResult.Status = false;
                                    POResult.Message = "Amount Can not be Decrease for Adjustment PO";
                                    return POResult;
                                }
                            }
                            #endregion

                            ///  End ///
                            ///  
                            #endregion
                            #region Level allocation 
                            if (pom.Status != "Draft")
                            {
                                PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                                if (get_approvalz != null)
                                {
                                    if (get_approvalz.Level == "Level1")  /// Self Approved
                                    {
                                        pom.Status = "PR Send for Approval";
                                        pom.progress = "50";
                                        pom.Level = "Level1";
                                        pom.Approval1 = 0;
                                        pom.Approval2 = 0;
                                        pom.Approval3 = 0;
                                        pom.Approval4 = 0;
                                        pom.Approval5 = 0;
                                        pom.ApprovalName1 = pom.CreatedBy;
                                        pom.Rewiever1 = 0;
                                        pom.Rewiever2 = 0;
                                        pom.Rewiever3 = 0;
                                        pom.Rewiever4 = 0;
                                        pom.Rewiever5 = 0;
                                        //pom.ApprovedBy = pom.CreatedBy;
                                    }
                                    else /// Send for approval
                                    {
                                        pom.Status = "PR Send for Approval";
                                        pom.progress = "20";
                                        pom.Level = get_approvalz.Level;
                                        pom.Approval1 = get_approvalz.Approval1;
                                        pom.Approval2 = get_approvalz.Approval2;
                                        pom.Approval3 = get_approvalz.Approval3;
                                        pom.Approval4 = get_approvalz.Approval4;
                                        pom.Approval5 = get_approvalz.Approval5;
                                        pom.Rewiever1 = get_approvalz.Reviewer1;
                                        pom.Rewiever2 = get_approvalz.Reviewer2;
                                        pom.Rewiever3 = get_approvalz.Reviewer3;
                                        pom.Rewiever4 = get_approvalz.Reviewer4;
                                        pom.Rewiever5 = get_approvalz.Reviewer5;
                                        pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                        pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                        pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                        pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                        pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                        pom.RewieverName1 = get_approvalz.ReviewerName1;
                                        pom.RewieverName2 = get_approvalz.ReviewerName2;
                                        pom.RewieverName3 = get_approvalz.ReviewerName3;
                                        pom.RewieverName4 = get_approvalz.ReviewerName4;
                                        pom.RewieverName5 = get_approvalz.ReviewerName5;
                                    }
                                }
                            }
                            #endregion
                            string smstempmsg = " are waiting for your approval. Shopkirana";

                            if (db.Commit() > 0)
                            {

                                POResult.Status = true;
                                POResult.Message = "PO item removed successfuly. PR # " + pom.PurchaseOrderId;

                                #region Create History

                                PoEditHistory Hisdata = new PoEditHistory()
                                {
                                    PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                                    CreateDate = indianTime,
                                    UserId = userid,
                                    ModificationType = "Delete Item"
                                };
                                var result = GenratHistory(Hisdata);
                                #endregion
                            }

                            if (POResult.Status == true)
                            {
                                //---
                                var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();
                                foreach (var a in prapprovs)
                                {
                                    a.IsActive = false;
                                    a.IsDeleted = true;
                                    a.Comments = "";
                                    db.Entry(a).State = EntityState.Modified;
                                    db.Commit();
                                }
                                PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                if (PRPA != null)
                                {
                                    PRPA.IsApproved = false;
                                    PRPA.IsActive = false;
                                    PRPA.IsDeleted = true;
                                    PRPA.ModifiedDate = DateTime.Now;
                                    db.Entry(PRPA).State = EntityState.Modified;
                                    db.Commit();
                                }
                                var pdList = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).ToList();
                                var Itemids = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.IsDeleted == false && x.WarehouseId == pom.WarehouseId).Select(x => x.ItemId).Distinct().ToList();
                                if (Itemids != null && Itemids.Any())
                                {
                                    Items = db.itemMasters.Where(z => Itemids.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == pom.WarehouseId).ToList();
                                }

                                var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                                var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                                if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                                {
                                    var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                                    var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                                    //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                                    ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                    var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                    List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                    if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                                    }

                                    if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();
                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                            foreach (var i in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = i;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var i in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = i;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion
                                        var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();

                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = item.PeopleId;
                                                //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pom.Status = "Approved";
                                                pom.PRStatus = 3;
                                                pom.BuyerId = BuyerId;
                                                pom.BuyerName = buyerName;
                                                db.Entry(pom).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!check)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            foreach (var i in createPRAppovers)
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = i.PeopleId;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == i.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }
                                        }

                                    }
                                    else
                                    {
                                        string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                        var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                        smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                        smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                        var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                        ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();
                                        if (ApprovePersonss != null && ApprovePersonss.Any())
                                        {
                                            var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                            List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                            // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                            List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                            if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                            {
                                                //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                                finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                            }
                                            else
                                            {
                                                //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                                finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                            }

                                            if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                            {
                                                #region getPeople
                                                DataTable dtemail = new DataTable();
                                                dtemail.Columns.Add("stringValue");
                                                DataTable dtrole = new DataTable();
                                                dtrole.Columns.Add("stringValue");
                                                if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                                {
                                                    List<string> emaillst = new List<string>();

                                                    string EmailIds = "";
                                                    EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                    emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                    foreach (var i in emaillst)
                                                    {
                                                        var dr = dtemail.NewRow();
                                                        dr["stringValue"] = i;
                                                        dtemail.Rows.Add(dr);
                                                    }

                                                }
                                                else
                                                {
                                                    List<string> rolelst = new List<string>();
                                                    string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                                    rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                    foreach (var i in rolelst)
                                                    {
                                                        var dr = dtrole.NewRow();
                                                        dr["stringValue"] = i;
                                                        dtrole.Rows.Add(dr);
                                                    }
                                                }


                                                var paremail = new SqlParameter("emailIds", dtemail);
                                                paremail.SqlDbType = SqlDbType.Structured;
                                                paremail.TypeName = "dbo.StringValues";

                                                var pareroles = new SqlParameter("roles", dtemail);
                                                paremail.SqlDbType = SqlDbType.Structured;
                                                paremail.TypeName = "dbo.StringValues";
                                                var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                                if (db.Database.Connection.State != ConnectionState.Open)
                                                    db.Database.Connection.Open();

                                                var cmd = db.Database.Connection.CreateCommand();
                                                cmd.CommandText = "GetCreatePRApprovallist";
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.CommandTimeout = 600;
                                                cmd.Parameters.Add(paremail);
                                                cmd.Parameters.Add(pareroles);
                                                cmd.Parameters.Add(pareWh);

                                                var reader = cmd.ExecuteReader();
                                                List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                    .ObjectContext
                                                                    .Translate<BuyerMinDc>(reader).ToList();
                                                db.Database.Connection.Close();
                                                #endregion
                                                var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                                if (data.Count > 0 && data != null)
                                                {
                                                    foreach (var item in createPRAppovers)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                        var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                        string querys7 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                        List<int> Ids = db.Database.SqlQuery<int>(querys7).ToList();

                                                        if (Ids.Count > 0)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = item.PeopleId;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 1;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.Comments = "Approved By :" + name;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }
                                                        else
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = item.PeopleId;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }
                                                        //if (!PRStatusData)
                                                        //{
                                                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        //    pr.ApprovalID = item.PeopleId;
                                                        //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        //    pr.IsApprove = 1;
                                                        //    pr.IsActive = true;
                                                        //    pr.IsDeleted = false;
                                                        //    pr.Comments = "Approved By :" + name;
                                                        //    pr.CreatedDate = DateTime.Now;
                                                        //    db.PRApprovelsStatus.Add(pr);
                                                        //    db.Commit();
                                                        //}
                                                    }

                                                    var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                                    if (prapprov.All(x => x.IsApprove == 1))
                                                    {
                                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                        pom.Status = "Approved";
                                                        pom.PRStatus = 3;
                                                        pom.BuyerId = BuyerId;
                                                        pom.BuyerName = buyerName;
                                                        db.Entry(pom).State = EntityState.Modified;

                                                        if (db.Commit() > 0)
                                                        {
                                                            //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                            var roleName = "";
                                                            foreach (var store in storeIds)
                                                            {
                                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                            }
                                                            if (!string.IsNullOrEmpty(roleName))
                                                            {
                                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                          roleName);

                                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                                if (!check)
                                                                {
                                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                    pRPaymentAppoved.CreatedBy = userid;
                                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                    pRPaymentAppoved.IsApproved = false;
                                                                    pRPaymentAppoved.IsActive = true;
                                                                    pRPaymentAppoved.IsDeleted = false;
                                                                    pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                                }
                                                                Sms s = new Sms();
                                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                                db.Commit();
                                                            }

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var i in createPRAppovers)
                                                    {
                                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!PRStatusData)
                                                        {
                                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                                            pr.ApprovalID = i.PeopleId;
                                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                            pr.IsApprove = 0;
                                                            pr.IsActive = true;
                                                            pr.IsDeleted = false;
                                                            pr.CreatedDate = DateTime.Now;
                                                            db.PRApprovelsStatus.Add(pr);
                                                            db.Commit();
                                                        }
                                                    }
                                                }


                                            }
                                            else
                                            {
                                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                                var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                                if (BDs == null)
                                                    BDs = new List<BuyerMinDc>();
                                                BDs.AddRange(buyerMinDcs);


                                                if (BDs != null && BDs.Any())
                                                {
                                                    foreach (var BD in BDs)
                                                    {
                                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                        if (ActivePeople != null && WarePermission != null)
                                                        {
                                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                            if (PRStatusData == null)
                                                            {
                                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                                pr.IsApprove = 0;
                                                                pr.IsActive = true;
                                                                pr.IsDeleted = false;
                                                                pr.CreatedDate = DateTime.Now;
                                                                pr.ModifiedDate = DateTime.Now;
                                                                db.PRApprovelsStatus.Add(pr);
                                                                Sms s = new Sms();
                                                                string msg = smsTempmsg;
                                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                                db.Commit();
                                                            }
                                                        }
                                                        else
                                                        {

                                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                            if (PRStatusData == null)
                                                            {
                                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                                pr.ApprovalID = pom.BuyerId.Value;
                                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                                pr.IsApprove = 0;
                                                                pr.IsActive = true;
                                                                pr.IsDeleted = false;
                                                                pr.CreatedDate = DateTime.Now;
                                                                pr.ModifiedDate = DateTime.Now;
                                                                db.PRApprovelsStatus.Add(pr);
                                                                Sms s = new Sms();
                                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                                db.Commit();
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pom.BuyerId.Value;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                        db.Commit();
                                                    }
                                                }
                                            }

                                        }

                                    }

                                }
                                else
                                {
                                    string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                    smsTempmsg = dltSMS == null ? "" : dltSMS.Template;

                                    smsTempmsg = smsTempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());
                                    var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                                    ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pom.WarehouseId))).ToList();

                                    if (ApprovePersons != null && ApprovePersons.Any())
                                    {
                                        var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                        List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                        // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                        List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                        if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                        {
                                            //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                        }
                                        else
                                        {
                                            //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                            finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                        }

                                        if (finalApprovePersons != null && finalApprovePersons.Any())
                                        {
                                            #region getPeople
                                            DataTable dtemail = new DataTable();
                                            dtemail.Columns.Add("stringValue");
                                            DataTable dtrole = new DataTable();
                                            dtrole.Columns.Add("stringValue");
                                            if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                            {
                                                List<string> emaillst = new List<string>();

                                                string EmailIds = "";
                                                EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                                emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                                foreach (var i in emaillst)
                                                {
                                                    var dr = dtemail.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtemail.Rows.Add(dr);
                                                }

                                            }
                                            else
                                            {
                                                List<string> rolelst = new List<string>();
                                                string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                                rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                                foreach (var i in rolelst)
                                                {
                                                    var dr = dtrole.NewRow();
                                                    dr["stringValue"] = i;
                                                    dtrole.Rows.Add(dr);
                                                }
                                            }


                                            var paremail = new SqlParameter("emailIds", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";

                                            var pareroles = new SqlParameter("roles", dtemail);
                                            paremail.SqlDbType = SqlDbType.Structured;
                                            paremail.TypeName = "dbo.StringValues";
                                            var pareWh = new SqlParameter("@warehouseId", pom.WarehouseId);

                                            if (db.Database.Connection.State != ConnectionState.Open)
                                                db.Database.Connection.Open();

                                            var cmd = db.Database.Connection.CreateCommand();
                                            cmd.CommandText = "GetCreatePRApprovallist";
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.CommandTimeout = 600;
                                            cmd.Parameters.Add(paremail);
                                            cmd.Parameters.Add(pareroles);
                                            cmd.Parameters.Add(pareWh);

                                            var reader = cmd.ExecuteReader();
                                            List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                                .ObjectContext
                                                                .Translate<BuyerMinDc>(reader).ToList();
                                            db.Database.Connection.Close();
                                            #endregion
                                            var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                            if (data.Count > 0 && data != null)
                                            {
                                                foreach (var item in createPRAppovers)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                    List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();

                                                    if (Ids.Count > 0)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 1;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.Comments = "Approved By :" + name;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    else
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = item.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    //if (!PRStatusData)
                                                    //{
                                                    //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //    pr.ApprovalID = item.PeopleId;
                                                    //    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    //    pr.IsApprove = 1;
                                                    //    pr.IsActive = true;
                                                    //    pr.IsDeleted = false;
                                                    //    pr.Comments = "Approved By :" + name;
                                                    //    pr.CreatedDate = DateTime.Now;
                                                    //    db.PRApprovelsStatus.Add(pr);
                                                    //    db.Commit();
                                                    //}
                                                }
                                                var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.IsActive == true).ToList();

                                                if (prapprov.All(x => x.IsApprove == 1))
                                                {
                                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                    pom.Status = "Approved";
                                                    pom.PRStatus = 3;
                                                    pom.BuyerId = BuyerId;
                                                    pom.BuyerName = buyerName;
                                                    db.Entry(pom).State = EntityState.Modified;

                                                    if (db.Commit() > 0)
                                                    {
                                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                        var roleName = "";
                                                        foreach (var store in storeIds)
                                                        {
                                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                        }
                                                        if (!string.IsNullOrEmpty(roleName))
                                                        {
                                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                      roleName);

                                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                            if (!check)
                                                            {
                                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                                pRPaymentAppoved.CreatedBy = userid;
                                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                                pRPaymentAppoved.IsApproved = false;
                                                                pRPaymentAppoved.IsActive = true;
                                                                pRPaymentAppoved.IsDeleted = false;
                                                                pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                            }
                                                            Sms s = new Sms();
                                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                            msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                            db.Commit();
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var i in createPRAppovers)
                                                {
                                                    //if (ETtlamt <= 2500000)
                                                    //{
                                                    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!PRStatusData)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = i.PeopleId;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        db.Commit();
                                                    }
                                                    //}
                                                    //else
                                                    //{
                                                    //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == i.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                    //    var name = db.Peoples.Where(x => x.PeopleID == i.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                    //    if (!PRStatusData)
                                                    //    {
                                                    //        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    //        pr.ApprovalID = i.PeopleId;
                                                    //        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    //        pr.IsApprove = 1;
                                                    //        pr.Comments = "Approved By :" + name;
                                                    //        pr.IsActive = true;
                                                    //        pr.IsDeleted = false;
                                                    //        pr.CreatedDate = DateTime.Now;
                                                    //        db.PRApprovelsStatus.Add(pr);
                                                    //        db.Commit();
                                                    //    }
                                                    //}
                                                }
                                            }


                                        }

                                        if (ETtlamt > 2500000)
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pom.Status = "Approved";
                                            pom.PRStatus = 3;
                                            pom.BuyerId = BuyerId;
                                            pom.BuyerName = buyerName;
                                            db.Entry(pom).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pom.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pom.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                        if (BDs == null)
                                            BDs = new List<BuyerMinDc>();
                                        BDs.AddRange(buyerMinDcs);


                                        if (BDs != null && BDs.Any())
                                        {
                                            foreach (var BD in BDs)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (ActivePeople != null && WarePermission != null)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                                else
                                                {

                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pom.BuyerId.Value;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pom.BuyerId.Value;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                        }
                                    }

                                }

                                //---
                                /*
                                int PurchaseOrderId = pom.PurchaseOrderId;
                                var prapprovs = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == PurchaseOrderId).ToList();
                                foreach (var a in prapprovs)
                                {
                                    a.IsActive = false;
                                    a.IsDeleted = true;
                                    a.Comments = "";
                                    db.Entry(a).State = EntityState.Modified;
                                    db.Commit();
                                }


                                List<classification> ABCClassification = new List<classification>();
                                var dCategory = pom.PurchaseOrderDetail.Where(x => x.Category == "D").Select(x => x.ItemId).ToList();
                                var cCategories = pom.PurchaseOrderDetail.Where(x => x.Category == "C").Select(x => new classification { itemNumber = x.ItemNumber, warehouseid = x.WarehouseId.Value }).ToList();
                                // var itemids = Items.Where(x => cCategories.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                                bool ABCvalue = false;
                                foreach (var cat in cCategories)
                                {
                                    var query = "select itemNumber,warehouseid,Category,Qty from ItemsClassification Where itemNumber = '" + cat.itemNumber + "' and warehouseid = " + cat.warehouseid;
                                    var ABCClass = db.Database.SqlQuery<classification>(query).ToList();
                                    ABCClassification.AddRange(ABCClass);
                                }

                                foreach (var abc in ABCClassification)
                                {

                                    var Podetail = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && x.ItemNumber == abc.itemNumber).FirstOrDefault();
                                    if (Podetail.PurchaseQty > abc.Qty)
                                    {
                                        ABCvalue = true;
                                    }

                                }

                                if (dCategory.Count > 0 || ABCvalue == true)
                                {
                                    if (ETtlamt < 1000000)
                                    {
                                        PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                        if (PRPA != null)
                                        {
                                            PRPA.IsApproved = false;
                                            PRPA.IsActive = false;
                                            PRPA.IsDeleted = true;
                                            PRPA.ModifiedDate = DateTime.Now;
                                            db.Entry(PRPA).State = EntityState.Modified;
                                            db.Commit();
                                        }

                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                                        "Supplier Payment Approver");

                                        List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                        foreach (var BD in buyerMinDcss)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (WarePermission != null && ActivePeople != null)
                                            {

                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRStatusData.IsApprove = 0;
                                                    PRStatusData.IsActive = true;
                                                    PRStatusData.IsDeleted = false;
                                                    PRStatusData.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData).State = EntityState.Modified;
                                                    db.Commit();
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                        if (PRPA != null)
                                        {
                                            PRPA.IsApproved = false;
                                            PRPA.IsActive = false;
                                            PRPA.IsDeleted = true;
                                            PRPA.ModifiedDate = DateTime.Now;
                                            db.Entry(PRPA).State = EntityState.Modified;
                                            db.Commit();
                                        }
                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                                                        "Supplier Payment Approver");

                                        BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                        People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = buyerMinDc.PeopleId;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 1;
                                            pr.IsActive = true;
                                            pr.Comments = "Approved By :" + people.DisplayName;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                        }
                                        else
                                        {
                                            PRStatusData.IsApprove = 1;
                                            PRStatusData.IsActive = true;
                                            PRStatusData.IsDeleted = false;
                                            PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                            PRStatusData.ModifiedDate = DateTime.Now;
                                            db.Entry(PRStatusData).State = EntityState.Modified;
                                        }
                                        db.Commit();

                                        PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                        if (poid != null)
                                        {
                                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                            var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                            poid.Status = "Approved";
                                            poid.PRStatus = 3;
                                            poid.BuyerId = BuyerId;
                                            poid.BuyerName = Name.DisplayName;
                                            db.Entry(poid).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string query = string.Empty;
                                                var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                    if (check == null)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;

                                                        pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    else
                                                    {

                                                        check.IsApproved = false;
                                                        check.IsActive = true;
                                                        check.IsDeleted = false;
                                                        check.ModifiedDate = DateTime.Now;
                                                        db.Entry(check).State = EntityState.Modified;

                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS == null ? "" : dltSMS.Template;

                                                    msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                }

                                if (ETtlamt <= 300000)
                                {
                                    List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                    var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                    var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                    var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();

                                    if (BDs == null)
                                        BDs = new List<BuyerMinDc>();
                                    BDs.AddRange(buyerMinDcs);
                                    if (BDs != null && BDs.Any())
                                    {

                                        foreach (var BD in BDs)
                                        {
                                            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId).FirstOrDefault();
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                            if (ActivePeople != null && WarePermission != null)
                                            {
                                                var PRStatusData = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == BD.PeopleId) : null;
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                }
                                                else
                                                {
                                                    PRStatusData.IsApprove = 0;
                                                    PRStatusData.IsActive = true;
                                                    PRStatusData.IsDeleted = false;
                                                    PRStatusData.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData).State = EntityState.Modified;

                                                }
                                                db.Commit();
                                            }
                                            else
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                                if (PRStatusData == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = pom.BuyerId.Value;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRStatusData.IsApprove = 0;
                                                    PRStatusData.IsActive = true;
                                                    PRStatusData.IsDeleted = false;
                                                    PRStatusData.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData).State = EntityState.Modified;
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == pom.BuyerId).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = pom.BuyerId.Value;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            Sms s = new Sms();
                                            string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                            string Mob = db.Peoples.Where(q => q.PeopleID == pom.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            db.Commit();
                                        }
                                        else
                                        {
                                            PRStatusData.IsApprove = 0;
                                            PRStatusData.IsActive = true;
                                            PRStatusData.IsDeleted = false;
                                            PRStatusData.ModifiedDate = DateTime.Now;
                                            db.Entry(PRStatusData).State = EntityState.Modified;
                                            db.Commit();
                                        }
                                    }
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }
                                }
                                else if (ETtlamt > 300000 && ETtlamt < 1000000)
                                {
                                    #region code Comments
                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active =1 ",
                                                    "Zonal Sourcing lead");
                                    List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                                    foreach (var BD in buyerMinDcs)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId).FirstOrDefault();
                                        if (WarePermission != null && ActivePeople != null)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                            }
                                            else
                                            {
                                                PRStatusData.IsApprove = 0;
                                                PRStatusData.IsActive = true;
                                                PRStatusData.IsDeleted = false;
                                                PRStatusData.ModifiedDate = DateTime.Now;
                                                db.Entry(PRStatusData).State = EntityState.Modified;
                                            }
                                            db.Commit();
                                        }
                                    }
                                    #endregion
                                    PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                    if (PRPA != null)
                                    {
                                        PRPA.IsApproved = false;
                                        PRPA.IsActive = false;
                                        PRPA.IsDeleted = true;
                                        PRPA.ModifiedDate = DateTime.Now;
                                        db.Entry(PRPA).State = EntityState.Modified;
                                        db.Commit();
                                    }
                                    if (pom != null)
                                    {
                                        var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                        var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                        var SubsubCategoryid = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        //List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                        //int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                        List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                        var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();
                                        foreach (var st in store)
                                        {
                                            var ActivePeople = db.Peoples.Where(x => x.PeopleID == st.OwnerId && x.Active == true).FirstOrDefault();
                                            // var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == st.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                            if (ActivePeople != null)
                                            {
                                                // var PRStatusData1 = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == st.OwnerId).FirstOrDefault();
                                                var PRStatusData1 = prapprovs != null ? prapprovs.FirstOrDefault(x => x.ApprovalID == st.OwnerId) : null;
                                                if (PRStatusData1 == null)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = st != null ? st.OwnerId : 0;
                                                    pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.CreatedDate = DateTime.Now;
                                                    pr.ModifiedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    Sms s = new Sms();
                                                    //ShopKirana PR id: {#var#} are waiting for your approval.
                                                    string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                    string Mob = db.Peoples.Where(q => q.PeopleID == st.OwnerId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                }
                                                else
                                                {
                                                    PRStatusData1.IsApprove = 0;
                                                    PRStatusData1.IsActive = true;
                                                    PRStatusData1.IsDeleted = false;
                                                    PRStatusData1.ModifiedDate = DateTime.Now;
                                                    db.Entry(PRStatusData1).State = EntityState.Modified;
                                                }
                                                db.Commit();
                                            }
                                        }
                                        if (store.Count == 0)
                                        {
                                            string nquery = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                                                   "Zonal Sourcing lead", "Region sales lead");

                                            List<BuyerMinDc> buyerMinDcss = db.Database.SqlQuery<BuyerMinDc>(nquery).ToList();

                                            foreach (var BD in buyerMinDcss)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pom.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (WarePermission != null && ActivePeople != null)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pom.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                    }
                                                    else
                                                    {
                                                        PRStatusData.IsApprove = 0;
                                                        PRStatusData.IsActive = true;
                                                        PRStatusData.IsDeleted = false;
                                                        PRStatusData.ModifiedDate = DateTime.Now;
                                                        db.Entry(PRStatusData).State = EntityState.Modified;
                                                    }
                                                    db.Commit();

                                                }
                                            }
                                        }
                                    }
                                }
                                else if (ETtlamt >= 1000000)
                                {

                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active=1",
                                               "Supplier Payment Approver");

                                    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();
                                    var PRStatusEntryCheck = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId && x.IsActive == true).FirstOrDefault();

                                    if (PRStatusEntryCheck == null)
                                    {
                                        PRPaymentAppoved PRPA = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsActive == true).FirstOrDefault();
                                        if (PRPA != null)
                                        {
                                            PRPA.IsApproved = false;
                                            PRPA.IsActive = false;
                                            PRPA.IsDeleted = true;
                                            PRPA.ModifiedDate = DateTime.Now;
                                            db.Entry(PRPA).State = EntityState.Modified;
                                            db.Commit();
                                        }

                                        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pom.PurchaseOrderId && x.ApprovalID == buyerMinDc.PeopleId).FirstOrDefault();
                                        if (PRStatusData == null)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = buyerMinDc.PeopleId;
                                            pr.PurchaseOrderID = pom.PurchaseOrderId;
                                            pr.IsApprove = 1;
                                            pr.IsActive = true;
                                            pr.Comments = "Approved By :" + people.DisplayName;
                                            pr.CreatedDate = DateTime.Now;
                                            pr.ModifiedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            //Sms s = new Sms();
                                            //string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your approval.";
                                            //string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            //if (Mob != null) { s.sendOtp(Mob, msg); }

                                        }
                                        else
                                        {
                                            PRStatusData.IsApprove = 1;
                                            PRStatusData.IsActive = true;
                                            PRStatusData.IsDeleted = false;
                                            PRStatusData.Comments = "Approved By :" + people.DisplayName;
                                            PRStatusData.ModifiedDate = DateTime.Now;
                                            db.Entry(PRStatusData).State = EntityState.Modified;
                                        }
                                        db.Commit();

                                        PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pom.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                                        if (poid != null)
                                        {
                                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                                            var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pom.WarehouseId).ToList();

                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                                            poid.Status = "Approved";
                                            poid.PRStatus = 3;
                                            poid.BuyerId = BuyerId;
                                            poid.BuyerName = Name.DisplayName;
                                            db.Entry(poid).State = EntityState.Modified;
                                            if (db.Commit() > 0)
                                            {
                                                //string query = string.Empty;
                                                var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                                                    if (check == null)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;

                                                        pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    else
                                                    {

                                                        check.IsApproved = false;
                                                        check.IsActive = true;
                                                        check.IsDeleted = false;
                                                        check.ModifiedDate = DateTime.Now;
                                                        db.Entry(check).State = EntityState.Modified;

                                                    }
                                                    Sms s = new Sms();
                                                    //  string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pom.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS == null ? "" : dltSMS.Template;

                                                    msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                    db.Commit();
                                                }
                                            }
                                        }
                                    }
                                }
                                */
                            }
                            else
                            {
                                POResult.Status = false;
                                POResult.Message = "Some error occurred during save PR item. PR # " + pom.PurchaseOrderId;
                            }
                        }
                        else
                        {
                            POResult.Status = false;
                            POResult.Message = "Cannot be Remove All Items";

                        }
                    }
                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Cannot be Remove All Items";
                    }
                }

            }
            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }
        /// <summary>
        /// Edit item
        /// </summary>
        /// <param name="temppo"></param>        
        /// <returns></returns>
        [Route("Remove")]
        [AcceptVerbs("PUT")]
        public POResult RemoveItem(PurchaseList temppo)
        {

            POResult POResult = new POResult();

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            double ETtlamt = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            if (temppo != null)
            {
                using (AuthContext db = new AuthContext())
                {
                    PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == temppo.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();

                    List<PurchaseOrderDetail> Itemcount = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == temppo.PurchaseOrderId).ToList();
                    //  string smstempmsg = " is waiting for your approval. ShopKirana";
                    string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                    smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                    smstempmsg = smstempmsg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                    if (Itemcount.Count > 1)
                    {

                        PurchaseOrderDetail pd = pom.PurchaseOrderDetail.Where(q => q.PurchaseOrderDetailId == temppo.OrderDetailsId).SingleOrDefault();
                        db.Entry(pd).State = EntityState.Deleted;

                        #region get Estimate amount and update level

                        /// Get Estimate amount                  
                        if (pom.PurchaseOrderDetail != null && pom.PurchaseOrderDetail.Any())
                        {
                            var itemIds = pom.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                            var items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId)).ToList();
                            foreach (var data in pom.PurchaseOrderDetail)
                            {
                                // var item1 = items.FirstOrDefault(x => x.ItemId == data.ItemId);
                                int qty = data.TotalQuantity;
                                double POPrice = data.Price;
                                ETtlamt += Convert.ToDouble(POPrice) * qty;
                            }
                        }
                        pom.ETotalAmount = ETtlamt;
                        //pom.ModifiedBy = userid;
                        //pom.ModifiedDate = indianTime;
                        db.Entry(pom).State = EntityState.Modified;

                        ///  End ///
                        #endregion

                        #region Level allocation 
                        if (pom.Status != "Draft")
                        {
                            PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == pom.WarehouseId).FirstOrDefault();
                            if (get_approvalz != null)
                            {
                                if (get_approvalz.Level == "Level1")  /// Self Approved
                                {
                                    pom.Status = "Self Approved";
                                    pom.progress = "50";
                                    pom.Level = "Level1";
                                    pom.Approval1 = 0;
                                    pom.Approval2 = 0;
                                    pom.Approval3 = 0;
                                    pom.Approval4 = 0;
                                    pom.Approval5 = 0;
                                    pom.ApprovalName1 = pom.CreatedBy;
                                    pom.Rewiever1 = 0;
                                    pom.Rewiever2 = 0;
                                    pom.Rewiever3 = 0;
                                    pom.Rewiever4 = 0;
                                    pom.Rewiever5 = 0;
                                    pom.ApprovedBy = pom.CreatedBy;
                                }
                                else /// Send for approval
                                {
                                    pom.Status = "Send for Approval";
                                    pom.progress = "20";
                                    pom.Level = get_approvalz.Level;
                                    pom.Approval1 = get_approvalz.Approval1;
                                    pom.Approval2 = get_approvalz.Approval2;
                                    pom.Approval3 = get_approvalz.Approval3;
                                    pom.Approval4 = get_approvalz.Approval4;
                                    pom.Approval5 = get_approvalz.Approval5;
                                    pom.Rewiever1 = get_approvalz.Reviewer1;
                                    pom.Rewiever2 = get_approvalz.Reviewer2;
                                    pom.Rewiever3 = get_approvalz.Reviewer3;
                                    pom.Rewiever4 = get_approvalz.Reviewer4;
                                    pom.Rewiever5 = get_approvalz.Reviewer5;
                                    pom.ApprovalName1 = get_approvalz.ApprovalName1;
                                    pom.ApprovalName2 = get_approvalz.ApprovalName2;
                                    pom.ApprovalName3 = get_approvalz.ApprovalName3;
                                    pom.ApprovalName4 = get_approvalz.ApprovalName4;
                                    pom.ApprovalName5 = get_approvalz.ApprovalName5;
                                    pom.RewieverName1 = get_approvalz.ReviewerName1;
                                    pom.RewieverName2 = get_approvalz.ReviewerName2;
                                    pom.RewieverName3 = get_approvalz.ReviewerName3;
                                    pom.RewieverName4 = get_approvalz.ReviewerName4;
                                    pom.RewieverName5 = get_approvalz.ReviewerName5;
                                }
                            }
                        }
                        #endregion


                        if (db.Commit() > 0)
                        {
                            if (pom.Level != "Level1" && pom.Status != "Draft")
                            {
                                Sms s = new Sms();
                                //string msg = "ShopKirana PR id: " + pom.PurchaseOrderId + smstempmsg;
                                string msg = smstempmsg;
                                string Mob = db.Peoples.Where(q => q.PeopleID == pom.Approval1).Select(q => q.Mobile).SingleOrDefault();
                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                            }
                            if (pom.IsPR == true)
                            {
                                var PRApproval = db.PRPaymentAppoved.Where(x => x.PRId == pom.PurchaseOrderId && x.IsApproved == true && x.IsActive == true).FirstOrDefault();

                                Sms s = new Sms();
                                //string msg = "ShopKirana PR Id: " + pom.PurchaseOrderId + " Approved by you has been Changed. Shopkirana";
                                // string msg = "ShopKirana PR No " + pom.PurchaseOrderId + " Approved by you has been Changed. ShopKirana";
                                string msg = ""; //"ShopKirana PR Id: {#var#} Approved by you has been Changed. Shopkirana";
                                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Updation");
                                msg = dltSMS == null ? "" : dltSMS.Template;

                                msg = msg.Replace("{#var#}", pom.PurchaseOrderId.ToString());

                                string Mob = db.Peoples.Where(q => q.PeopleID == PRApproval.ApprovedBY).Select(q => q.Mobile).SingleOrDefault();
                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }

                            }

                            POResult.Status = true;
                            POResult.Message = "PO item removed successfuly. PO # " + pom.PurchaseOrderId;

                            #region Create History

                            PoEditHistory Hisdata = new PoEditHistory()
                            {
                                PurchaseOrderId = Convert.ToInt32(pom.PurchaseOrderId),
                                CreateDate = indianTime,
                                UserId = userid,
                                ModificationType = "Delete Item"
                            };
                            var result = GenratHistory(Hisdata);
                            #endregion
                        }
                        else
                        {
                            POResult.Status = false;
                            POResult.Message = "Some error occurred during save PO item. PO # " + pom.PurchaseOrderId;
                        }
                    }
                    else
                    {
                        POResult.Status = false;
                        POResult.Message = "Cannot be Remove All Items";

                    }
                }

            }
            else
            {
                POResult.Status = false;
                POResult.Message = "Please add atleast one item in PO.";
            }

            return POResult;

        }

        [Route("savechangebuyer")]
        [HttpPut]
        public string savechangebuyer(putbuyerIdPo data)
        {
            string result = "";
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            if (data != null && userid > 0)
            {
                using (var context = new AuthContext())
                {
                    //People p = context.Peoples.Where(q => q.PeopleID == data.PeopleID).SingleOrDefault();
                    PurchaseOrderMaster pom = context.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == data.PurchaseOrderId).SingleOrDefault();
                    //&& !context.GoodsReceivedDetail.Any(x => x.PurchaseOrderDetail.PurchaseOrderId == pom.PurchaseOrderId)
                    if (pom != null)
                    {
                        pom.PickerType = data.PickerType;
                        pom.FreightCharge = data.FreightCharge;
                        context.Entry(pom).State = EntityState.Modified;
                        if (context.Commit() > 0) { result = "record updated successfully"; };
                        //pom.BuyerId = p.PeopleID;
                        //pom.BuyerName = p.DisplayName;
                        //// pom.ModifiedBy = userid;
                        //context.Entry(pom).State = EntityState.Modified;
                        //context.Commit();
                    }
                    else
                    {
                        result = "record can't update due grn done";
                    }
                }
            }
            return result;
        }

        [Route("Export")]
        [HttpPost]
        public HttpResponseMessage getExports(objDTO obj) //get search orders for delivery
        {
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                int Warehouse_id = 0;

                foreach (Claim claim in identity.Claims)
                {
                    if (claim.Type == "compid")
                    {
                        compid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "userid")
                    {
                        userid = int.Parse(claim.Value);
                    }
                    if (claim.Type == "Warehouseid")
                    {
                        Warehouse_id = int.Parse(claim.Value);
                    }
                }
                //Warehouse_id = wid;
                using (var db = new AuthContext())
                {

                    //if (Warehouse_id > 0)
                    //{

                    List<PurchaseOrderDetailRecived> newdata = new List<PurchaseOrderDetailRecived>();
                    List<PurchaseOrderDetailRecivedDTM> newResultdata = new List<PurchaseOrderDetailRecivedDTM>();
                    foreach (var item in obj.ids)
                    {
                        var newdatareport = db.PurchaseOrderRecivedDetails.Where(x => x.CompanyId == compid && x.WarehouseId == item.id && x.CreationDate > obj.From && x.CreationDate <= obj.TO).OrderByDescending(x => x.PurchaseOrderId).ToList();

                        newdata.AddRange(newdatareport);
                    }

                    if (newdata.Count > 0)
                    {

                        foreach (var ipO in newdata)
                        {

                            var ItemQT = ipO.QtyRecived1 + ipO.QtyRecived2 + ipO.QtyRecived3 + ipO.QtyRecived4 + ipO.QtyRecived5;

                            double ItemFIlRate = Convert.ToDouble(ItemQT) * 100 / Convert.ToDouble(ipO.TotalQuantity);
                            var GRdata = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == ipO.PurchaseOrderId).FirstOrDefault();// add by raj,this is add because we required gr date

                            PurchaseOrderDetailRecivedDTM b = new PurchaseOrderDetailRecivedDTM();
                            b.PurchaseOrderId = ipO.PurchaseOrderId;
                            b.QtyRecivedTotal = ipO.QtyRecived;
                            b.PriceRecived = ipO.PriceRecived;
                            b.WarehouseName = ipO.WarehouseName;
                            b.QtyRecived1 = ipO.QtyRecived1;
                            b.Price1 = ipO.Price1;
                            b.Gr1Date = GRdata?.Gr1_Date;// GR1 date add by raj
                            b.QtyRecived2 = ipO.QtyRecived2;
                            b.Price2 = ipO.Price2;
                            b.Gr2Date = GRdata?.Gr2_Date;// GR2 date add by raj
                            b.QtyRecived3 = ipO.QtyRecived3;
                            b.Price3 = ipO.Price3;
                            b.Gr3Date = GRdata?.Gr3_Date;// GR3 date add by raj
                            b.QtyRecived4 = ipO.QtyRecived4;
                            b.Price4 = ipO.Price4;
                            b.Gr4Date = GRdata?.Gr4_Date;// GR4 date add by raj
                            b.QtyRecived5 = ipO.QtyRecived5;
                            b.Price5 = ipO.Price5;
                            b.Gr5Date = GRdata?.Gr5_Date;// GR5 date add by raj
                            b.ItemName = ipO.ItemName;
                            //b.ItemId = ipO.ItemId;
                            b.ItemNumber = ipO.ItemNumber;
                            b.MRP = ipO.MRP;
                            b.CreationDate = GRdata?.CreationDate;
                            b.SupplierName = GRdata.SupplierName;
                            b.Status = GRdata.Status;
                            b.POItemFillRate = ItemFIlRate;
                            #region  Po to GR TAT  add by raj
                            try

                            {
                                string DiffDate = null;
                                if (GRdata != null)
                                {
                                    if (GRdata.Gr5_Date != null && GRdata.Status == "Received")
                                    {
                                        DiffDate = Convert.ToString(GRdata.Gr5_Date - GRdata.CreationDate);
                                    }
                                    else if (GRdata.Gr4_Date != null && GRdata.Status == "Received")
                                    {
                                        DiffDate = Convert.ToString(GRdata.Gr4_Date - GRdata.CreationDate);
                                    }
                                    else if (GRdata.Gr3_Date != null && GRdata.Status == "Received")
                                    {
                                        DiffDate = Convert.ToString(GRdata.Gr3_Date - GRdata.CreationDate);
                                    }
                                    else if (GRdata.Gr2_Date != null && GRdata.Status == "Received")
                                    {
                                        DiffDate = Convert.ToString(GRdata.Gr2_Date - GRdata.CreationDate);
                                    }
                                    else if (GRdata.Gr1_Date != null && GRdata.Status == "Received")
                                    {
                                        DiffDate = Convert.ToString(GRdata.Gr1_Date - GRdata.CreationDate);
                                    }
                                    if (GRdata.Gr1_Date != null && GRdata.Status == "Received")
                                    {
                                        double pogrdifftime = TimeSpan.Parse(DiffDate).TotalMinutes;
                                        TimeSpan timeSpan = TimeSpan.FromMinutes(pogrdifftime);
                                        var hours = Math.Floor(pogrdifftime / 60);
                                        int tt = Convert.ToInt16(hours);
                                        var minutes = Math.Round(pogrdifftime - (hours * 60), 2);
                                        var TotalPOGRhm = String.Format("{0:%h}", hours.ToString()) + ":" + String.Format("{0:%m}", minutes.ToString());

                                    }
                                }
                            }
                            catch (Exception Ex)
                            {

                            }
                            #endregion
                            #region  GR TAT add by raj 
                            try
                            {


                                double AverageTAT = 0;
                                double TATGR1 = 0;
                                double TATGR2 = 0;
                                double TATGR3 = 0;
                                double TATGR4 = 0;
                                double TATGR5 = 0;
                                if (GRdata != null)
                                {
                                    if (GRdata.Gr1_Date != null)
                                    {
                                        string GR1date = Convert.ToString(GRdata.Gr1_Date - GRdata.CreationDate);
                                        TATGR1 = TimeSpan.Parse(GR1date).TotalMinutes;
                                        AverageTAT = TATGR1;
                                    }
                                    if (GRdata.Gr2_Date != null)
                                    {
                                        string GR2date = Convert.ToString(GRdata.Gr2_Date - GRdata.Gr1_Date);
                                        TATGR2 = TimeSpan.Parse(GR2date).TotalMinutes;
                                        AverageTAT = (TATGR1 + TATGR2) / 2;
                                    }
                                    if (GRdata.Gr3_Date != null)
                                    {
                                        string GR3date = Convert.ToString(GRdata.Gr3_Date - GRdata.Gr2_Date);
                                        TATGR3 = TimeSpan.Parse(GR3date).TotalMinutes;
                                        AverageTAT = (TATGR1 + TATGR2 + TATGR3) / 3;
                                    }
                                    if (GRdata.Gr4_Date != null)
                                    {
                                        string GR4date = Convert.ToString(GRdata.Gr4_Date - GRdata.Gr3_Date);
                                        TATGR4 = TimeSpan.Parse(GR4date).TotalMinutes;
                                        AverageTAT = (TATGR1 + TATGR2 + TATGR3 + TATGR4) / 4;
                                    }
                                    if (GRdata.Gr5_Date != null)
                                    {
                                        string GR5date = Convert.ToString(GRdata.Gr5_Date - GRdata.Gr4_Date);
                                        TATGR5 = TimeSpan.Parse(GR5date).TotalMinutes;
                                        AverageTAT = (TATGR1 + TATGR2 + TATGR3 + TATGR4 + TATGR5) / 5;
                                    }
                                    if (GRdata.Gr1_Date != null)
                                    {
                                        TimeSpan timeSpan = TimeSpan.FromMinutes(AverageTAT);
                                        var hours = Math.Floor(AverageTAT / 60);
                                        var minutes = Math.Round(AverageTAT - (hours * 60), 2);
                                        var AverageTAThm = String.Format("{0:%h}", hours.ToString()) + ":" + String.Format("{0:%m}", minutes.ToString());
                                        b.AverageTAT = AverageTAThm;
                                    }
                                }
                            }
                            catch (Exception Ex)
                            {

                            }
                            #endregion




                            newResultdata.Add(b);

                        }
                    }
                    else
                    {

                        return Request.CreateResponse(HttpStatusCode.OK, "No Record Found");

                    }
                    return Request.CreateResponse(HttpStatusCode.OK, newResultdata);



                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);
            }

        }
        public bool GenratHistory(PoEditHistory obj)
        {
            using (AuthContext db = new AuthContext())
            {
                PoEditHistory peh = new PoEditHistory();
                db.PoEditHistoryDB.Add(obj);
                db.Commit();
                return true;
            }
        }


        [Route("POWithGRDetails")]
        [HttpGet]
        public List<GoodsReceivedDc> GetPOGRDetailsRecived(long id)
        {
            logger.Info("start : ");
            var GoodsReceived = new List<GoodsReceivedDc>();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (var db = new AuthContext())
            {

                var Gr = db.GoodsReceivedDetail.Where(x => x.PurchaseOrderDetail.PurchaseOrderId == id && x.IsDeleted == false && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).Include(x => x.PurchaseOrderDetail).ToList();
                var _result = Mapper.Map(Gr).ToANew<List<GoodsReceivedDetailDc>>();
                if (_result != null && _result.Any())
                {
                    List<long> grids = Gr.Select(x => x.Id).Distinct().ToList();
                    List<GrQualityInvoice> grQualityInvoices = db.GrQualityInvoices.Where(x => grids.Contains(x.GoodsReceivedDetailId) && x.IsActive == true && x.IsDeleted == false).ToList();
                    //List<ItemClassificationDC> ABCitemsList = Gr.Select(item => new ItemClassificationDC { ItemNumber = item.PurchaseOrderDetail.ItemNumber, WarehouseId = item.PurchaseOrderDetail.WarehouseId.Value }).ToList();

                    //var manager = new ItemLedgerManager();
                    //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                    //var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                    //var multimrp = db.ItemMultiMRPDB.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId)).ToList();
                    var warehouseId = Gr.FirstOrDefault().PurchaseOrderDetail.WarehouseId;
                    var CreatedBy = Gr.Select(x => x.CreatedBy).Distinct().ToList();
                    var ApprovedBy = Gr.Select(x => x.ApprovedBy).Distinct().ToList();
                    var peopleIds = CreatedBy.Concat(ApprovedBy);
                    var people = db.Peoples.Where(x => peopleIds.Contains(x.PeopleID)).ToList();
                    var itemnumbers = Gr.Select(x => x.PurchaseOrderDetail.ItemNumber).Distinct().ToList();
                    var items = db.itemMasters.Where(x => x.WarehouseId == warehouseId && itemnumbers.Contains(x.Number)).Select(x => new { x.Number, x.TotalTaxPercentage, x.TotalCessPercentage, x.HSNCode }).Distinct().ToList();
                    var GDNList = db.GoodsDescripancyNoteMasterDB.Where(x => x.PurchaseOrderId == id && x.IsActive == true && x.IsDeleted == false && x.IsGDNGenerate == true).Include(x => x.goodsDescripancyNoteDetail).ToList();


                    //List<string> ItemNumber = Gr.Select(q => q.PurchaseOrderDetail.ItemNumber).ToList();
                    //var qaCheckerList = db.GrQualityConfigurations.Where(q => itemnumbers.Contains(q.ItemNumber) && q.IsActive == true && q.IsDeleted == false).ToList();
                    var checkerids = grQualityInvoices.Select(x => x.GrQualityCheckerId).Distinct().ToList();
                    var pList = db.Peoples.Where(a => checkerids.Contains(a.PeopleID)).ToList();



                    GoodsReceived = _result.GroupBy(x => new
                    {
                        x.GrSerialNumber,
                        x.Status,
                        x.ApprovedBy,
                        x.VehicleType,
                        x.VehicleNumber,
                        x.CreatedDate,
                        x.ModifiedDate,
                        x.CreatedBy,

                        x.ModifiedBy,
                    }).Select(y => new GoodsReceivedDc
                    {
                        GrPersonName = people.Where(p => p.PeopleID == y.Key.CreatedBy).Select(p => p.DisplayName).FirstOrDefault(),
                        CreatedBy = y.Key.CreatedBy,
                        CreatedDate = y.Key.CreatedDate,
                        GrSerialNumber = y.Key.GrSerialNumber,
                        ModifiedBy = y.Key.ModifiedBy,
                        ApproverName = y.Key.ApprovedBy > 0 ? people.Where(p => p.PeopleID == y.Key.ApprovedBy).Select(p => p.DisplayName).FirstOrDefault() : null,
                        ModifiedDate = y.Key.ModifiedDate,
                        Status = y.Key.Status,
                        VehicleNumber = y.Key.VehicleNumber,
                        VehicleType = y.Key.VehicleType,
                        GRAmount = y.Sum(z => z.Qty * z.Price),
                        GoodsReceivedItemDcs = y.Select(x => new GoodsReceivedItemDc
                        {
                            Id = x.Id,
                            PurchaseOrderDetailId = x.PurchaseOrderDetailId,
                            ItemName = Gr.Any(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId) ? Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.ItemName : "",
                            Itemnumber = Gr.Any(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId) ? Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.ItemNumber : "",
                            TotalQuantity = Gr.Any(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId) ? Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail.TotalQuantity : 0,
                            ItemMultiMRPId = x.ItemMultiMRPId,
                            Qty = x.Qty,
                            DamageQty = x.DamageQty,
                            ExpiryQty = x.ExpiryQty,
                            ShortQty = x.ShortQty,
                            Price = x.Price,
                            CurrentStockHistoryId = x.CurrentStockHistoryId,
                            BatchNo = x.BatchNo,
                            MFGDate = x.MFGDate,
                            Barcode = x.Barcode,
                            IsFreeItem = x.IsFreeItem,
                            HSNCode = items.FirstOrDefault(q => q.Number == Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.ItemNumber).HSNCode,
                            MOQ = Gr.Any(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId) ? Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.MOQ : 0,
                            //Category = GetItem.Where(q => q.ItemNumber == Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.ItemNumber).Select(q => q.Category).FirstOrDefault() != null ? GetItem.Where(q => q.ItemNumber == Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.ItemNumber).Select(q => q.Category).FirstOrDefault() : "D",
                            Category = Gr.Any(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId) ? Gr.FirstOrDefault(p => p.PurchaseOrderDetailId == x.PurchaseOrderDetailId).PurchaseOrderDetail?.Category : "",
                            IsDamageExpiryPhysical = x.IsDamageExpiryPhysical,
                            BatchMasterDC = GetBatchMasterData(x.Id).ToList(),
                            QualityImage = grQualityInvoices != null && grQualityInvoices.Any(g => g.GoodsReceivedDetailId == x.Id) ? grQualityInvoices.FirstOrDefault(g => g.GoodsReceivedDetailId == x.Id).Image : null,
                            QualityComment = grQualityInvoices != null && grQualityInvoices.Any(g => g.GoodsReceivedDetailId == x.Id) ? grQualityInvoices.FirstOrDefault(g => g.GoodsReceivedDetailId == x.Id).Comment : null,
                            GrQualityInvoiceList = GrQualityInvoiceList(x.Id).ToList(),
                            QaCheckerId = grQualityInvoices != null && grQualityInvoices.Any(q => q.GoodsReceivedDetailId == x.Id) ? grQualityInvoices.Where(q => q.GoodsReceivedDetailId == x.Id).Select(z => z.GrQualityCheckerId).FirstOrDefault() : 0,
                        }).ToList()
                    }).ToList();

                    if (GoodsReceived != null && GoodsReceived.Any())
                    {
                        var ItemnumberList = GoodsReceived.SelectMany(x => x.GoodsReceivedItemDcs.Select(i => i.Itemnumber)).ToList();
                        var itemMultiMrpdetail = db.ItemMultiMRPDB.Where(a => ItemnumberList.Contains(a.ItemNumber) && a.Deleted == false).Select(x => new ItemMultiMRPDc { ItemNumber = x.ItemNumber, ItemMultiMRPId = x.ItemMultiMRPId, MRP = x.MRP, CompanyStockCode = x.CompanyStockCode }).ToList();
                        GoodsReceived.ForEach(x =>
                        {
                            x.IsGDN = GDNList != null ? GDNList.Any(y => y.GrSerialNo == x.GrSerialNumber) : false;

                            x.GoodsReceivedItemDcs.ForEach(i =>
                            {
                                //i.CompanyStockCode = itemMultiMrpdetail.FirstOrDefault(y => y.ItemMultiMRPId == i.ItemMultiMRPId).CompanyStockCode;
                                if (x.IsGDN)
                                {
                                    var gdnitem = GDNList.FirstOrDefault(q => q.GrSerialNo == x.GrSerialNumber).goodsDescripancyNoteDetail.Where(g => g.GoodsReceivedDetailId == i.Id).FirstOrDefault();
                                    if (gdnitem != null)
                                    {
                                        i.ShortQty = gdnitem.ShortQty;
                                        i.DamageQty = gdnitem.DamageQty;
                                        i.ExpiryQty = gdnitem.ExpiryQty;
                                        i.QaName = pList.FirstOrDefault(b => b.PeopleID == i.QaCheckerId).DisplayName;
                                        i.QaPhoneNo = pList.FirstOrDefault(b => b.PeopleID == i.QaCheckerId).Mobile;
                                    }
                                }
                                if (itemMultiMrpdetail != null && itemMultiMrpdetail.Any(y => y.ItemNumber == i.Itemnumber))
                                {
                                    i.MRP = itemMultiMrpdetail.Where(c => c.ItemNumber == i.Itemnumber && c.ItemMultiMRPId == i.ItemMultiMRPId).Select(c => c.MRP).FirstOrDefault();
                                    i.CompanyStockCode = itemMultiMrpdetail.Where(c => c.ItemNumber == i.Itemnumber && c.ItemMultiMRPId == i.ItemMultiMRPId).Select(c => c.CompanyStockCode).FirstOrDefault();
                                }
                                if (i.IsDamageExpiryPhysical == true)
                                {
                                    i.TotalAmount = i.Price * (i.Qty + i.DamageQty + i.ExpiryQty);

                                }
                                else
                                {
                                    i.TotalAmount = i.Price * i.Qty;
                                }

                            });
                        });
                    }

                }
            }
            return GoodsReceived;
        }

        [Authorize]
        [Route("GetBatchMasterData")]
        [HttpGet]
        [AllowAnonymous]
        public List<BatchMasterDC> GetBatchMasterData(long GoodRecievedDetailId)
        {
            using (var myContext = new AuthContext())
            {
                var itemNumberParam = new SqlParameter("@GoodRecievedDetailId", GoodRecievedDetailId);

                try
                {
                    var result = myContext.Database.SqlQuery<BatchMasterDC>("BatchMasterDataSP @GoodRecievedDetailId", itemNumberParam).ToList();
                    return result;
                }
                catch (Exception ex)
                {
                    throw ex;
                }


            }
        }

        public List<GrQualityList> GrQualityInvoiceList(long GoodRecievedDetailId)
        {
            using (var context = new AuthContext())
            {
                try
                {
                    string query = "select  GoodsReceivedDetailId,Image,g.Comment,g.ModifiedDate  , g.IsApproved ,p.DisplayName" +
                        ",case when g.IsApproved = 2 then 'Rejected' else 'Approved' end as Status ,pg.DisplayName  as QaName,pg.Mobile as QaPhoneNo " +
                        "from GrQualityInvoices g inner join People p on p.PeopleID = g.ModifiedBy inner join People pg on pg.PeopleID = g.GrQualityCheckerId " +
                        "where GoodsReceivedDetailId =" + GoodRecievedDetailId;
                    var GrQualityList = context.Database.SqlQuery<GrQualityList>(query).ToList();
                    return GrQualityList;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }


        #region ETA Count Get by WH
        [Authorize]
        [Route("GetETADateCountWHWise")]
        [HttpPost]
        public List<ETADetailsDC> GetETADateCountWHWise(ETADC eTADC)
        {
            List<ETADetailsDC> eTADetails = new List<ETADetailsDC>();
            //int etacnt = 0;
            using (var context = new AuthContext())
            {
                var etacnt = context.DPurchaseOrderMaster.Where(x => x.WarehouseId == eTADC.WarehouseId && x.ETADate == eTADC.ETADate)
                    .Select(y => new ETADetailsDC()
                    {
                        BuyerName = y.BuyerName,
                        PurchaseOrderId = y.PurchaseOrderId,
                        ETADate = y.ETADate,
                        SupplierName = y.SupplierName,
                        WarehouseName = y.WarehouseName
                    }).ToList();
                if (etacnt != null)
                {
                    eTADetails = Mapper.Map(etacnt).ToANew<List<ETADetailsDC>>();
                }
            }
            return eTADetails;
        }
        #endregion

        #region IR Method

        [Route("GetGRRemainingDetail")]
        [HttpGet]

        public IRMasterDc GetGRRemainingDetail(long id)
        {
            var IRMasterDc = new IRMasterDc();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (id > 0 && userid > 0)
            {
                using (var db = new AuthContext())
                {
                    var IrMasters = db.IRMasterDB.Where(x => x.PurchaseOrderId == id && x.Deleted == false).Include(x => x.InvoiceReceiptDetails).ToList();
                    foreach (var item in IrMasters)
                    {
                        item.InvoiceReceiptDetails = item.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).ToList();
                    }
                    var Gr = db.GoodsReceivedDetail.Where(x => x.PurchaseOrderDetail.PurchaseOrderId == id && x.IsDeleted == false && x.Status == 2 && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).Include(x => x.PurchaseOrderDetail).ToList();

                    #region GDN
                    var grids = Gr.Select(x => x.Id).Distinct().ToList();
                    List<GDNItemforIRDc> GdnList = new List<GDNItemforIRDc>();
                    if (db.Database.Connection.State != ConnectionState.Open)
                        db.Database.Connection.Open();

                    var Gdndt = new DataTable();
                    Gdndt.Columns.Add("IntValue");
                    foreach (var item in grids)
                    {
                        var dr = Gdndt.NewRow();
                        dr["IntValue"] = item;
                        Gdndt.Rows.Add(dr);
                    }
                    var gdnparam = new SqlParameter("GoodsReceivedDetailIds", Gdndt);
                    gdnparam.SqlDbType = SqlDbType.Structured;
                    gdnparam.TypeName = "dbo.IntValues";
                    var gdncmd = db.Database.Connection.CreateCommand();
                    gdncmd.CommandText = "[dbo].[GetGDNItemforIR]";
                    gdncmd.CommandType = System.Data.CommandType.StoredProcedure;
                    gdncmd.Parameters.Add(gdnparam);
                    // Run the sproc
                    using (var reader = gdncmd.ExecuteReader())
                    {
                        GdnList = ((IObjectContextAdapter)db)
                        .ObjectContext
                        .Translate<GDNItemforIRDc>(reader).ToList();
                    }
                    #endregion
                    if (Gr != null && Gr.Any())
                    {
                        //List<ItemClassificationDC> ABCitemsList = Gr.Select(item => new ItemClassificationDC { ItemNumber = item.PurchaseOrderDetail.ItemNumber, WarehouseId = item.PurchaseOrderDetail.WarehouseId.Value }).ToList();

                        //var manager = new ItemLedgerManager();
                        //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                        int PositionSno = Gr.Count() - 1;
                        int GrSerialNumber = Gr[PositionSno].GrSerialNumber;


                        var warehouseId = Gr.FirstOrDefault().PurchaseOrderDetail.WarehouseId;

                        int? DepoId = db.DPurchaseOrderMaster.FirstOrDefault(a => a.PurchaseOrderId == id).DepoId;
                        if (DepoId.HasValue && DepoId > 0)
                        {
                            DepoMaster DepoDetail = db.DepoMasters.Where(a => a.DepoId == DepoId.Value).SingleOrDefault();

                            //for igst case if true then apply condion to hide column of cgst sgst cess
                            if (!string.IsNullOrEmpty(DepoDetail.GSTin) && DepoDetail.GSTin.Length >= 11)
                            {
                                string DepoTin_No = DepoDetail.GSTin.Substring(0, 2);
                                IRMasterDc.IsIgstIR = !db.Warehouses.Any(x => x.GSTin != null && x.WarehouseId == warehouseId && x.GSTin.Substring(0, 2) == DepoTin_No);

                            }
                        }

                        //var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                        var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).ToList();
                        var multimrp = db.ItemMultiMRPDB.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId)).ToList();
                        List<ItemWithMRPDc> items = new List<ItemWithMRPDc>();
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();

                        var orderIdDt = new DataTable();
                        orderIdDt.Columns.Add("IntValue");
                        foreach (var item in itemMultiMRPIds)
                        {
                            var dr = orderIdDt.NewRow();
                            dr["IntValue"] = item;
                            orderIdDt.Rows.Add(dr);
                        }
                        var param = new SqlParameter("itemMultiMRPIds", orderIdDt);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.IntValues";
                        var cmd = db.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[GetItemWithMRPDetail]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add(param);
                        cmd.Parameters.Add(new SqlParameter("warehouseId", warehouseId));

                        // Run the sproc
                        using (var reader = cmd.ExecuteReader())
                        {
                            items = ((IObjectContextAdapter)db)
                            .ObjectContext
                            .Translate<ItemWithMRPDc>(reader).ToList();
                        }
                        IRMasterDc.IRSerialNumber = IrMasters != null && IrMasters.Any() ? IrMasters.Max(x => x.IrSerialNumber) + 1 : 1;
                        IRMasterDc.PurchaseOrderId = id;
                        IRMasterDc.distype = "";
                        var InvoiceDetails = IrMasters != null ? IrMasters.SelectMany(x => x.InvoiceReceiptDetails) : new List<InvoiceReceiptDetail>();
                        var IRItemDcs = Gr.GroupBy(x => new { x.ItemMultiMRPId, x.Price, x.PurchaseOrderDetailId, x.IsFreeItem })
                            .Select(x => new IRItemDc
                            {
                                DamageQty = x.Sum(y => y.DamageQty),
                                ExpiryQty = x.Sum(y => y.ExpiryQty),
                                ShortQuantity = InvoiceDetails.Any(y => y.GoodsReceivedDetail.ItemMultiMRPId == x.Key.ItemMultiMRPId && y.GoodsReceivedDetail.IsFreeItem == x.Key.IsFreeItem) ? InvoiceDetails.Where(y => y.GoodsReceivedDetail.ItemMultiMRPId == x.Key.ItemMultiMRPId && y.GoodsReceivedDetail.IsFreeItem == x.Key.IsFreeItem).Sum(y => y.IRExcludedquantity) : 0,

                                PurchaseOrderDetailId = x.Key.PurchaseOrderDetailId,
                                Price = x.Key.Price,
                                Qty = x.Sum(y => y.Qty + y.DamageQty + y.ExpiryQty),

                                ItemMultiMRPId = x.Key.ItemMultiMRPId,
                                IRQuantity = InvoiceDetails.Any(y => y.GoodsReceivedDetail.ItemMultiMRPId == x.Key.ItemMultiMRPId && y.GoodsReceivedDetail.IsFreeItem == x.Key.IsFreeItem) ? InvoiceDetails.Where(y => y.GoodsReceivedDetail.ItemMultiMRPId == x.Key.ItemMultiMRPId && y.GoodsReceivedDetail.IsFreeItem == x.Key.IsFreeItem).Sum(y => y.IRQuantity) : 0,
                                ItemName = x.FirstOrDefault().PurchaseOrderDetail.ItemName,
                                Itemnumber = x.FirstOrDefault().PurchaseOrderDetail.ItemNumber,
                                HSNCode = items.Any(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)) ? items.FirstOrDefault(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)).HSNCode : "",
                                TotalCessPercentage = items.Any(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)) ? items.FirstOrDefault(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)).TotalCessPercentage : 0,
                                TotalTaxPercentage = items.Any(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)) ? items.FirstOrDefault(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)).TotalTaxPercentage : 0,
                                //MRP = items.Any(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)) ? items.FirstOrDefault(p => p.ItemMultiMRPId == (Gr.FirstOrDefault(q => q.PurchaseOrderDetailId == x.Key.PurchaseOrderDetailId).ItemMultiMRPId)).MRP : 0,
                                MRP = items.Where(z => z.ItemMultiMRPId == x.Key.ItemMultiMRPId).Select(z => z.MRP).FirstOrDefault(),
                                distype = "Amount",
                                IsFreeItem = x.Key.IsFreeItem,
                                DamageExpiryDC = GetDamageExpiryDC(x.Key.ItemMultiMRPId, Convert.ToInt32(id), x.Key.IsFreeItem),
                                //Category = GetItem.Where(q => q.ItemNumber == x.FirstOrDefault().PurchaseOrderDetail.ItemNumber).Select(q => q.Category).FirstOrDefault() != null ? GetItem.Where(q => q.ItemNumber == x.FirstOrDefault().PurchaseOrderDetail.ItemNumber).Select(q => q.Category).FirstOrDefault() : "D"
                                Category = x.FirstOrDefault().PurchaseOrderDetail.Category,


                            }).ToList();

                        foreach (var x in IRItemDcs)
                        {
                            x.CompanyStockCode = multimrp.FirstOrDefault(y => y.ItemMultiMRPId == x.ItemMultiMRPId).CompanyStockCode;

                            int TotalPoQuantity = db.DPurchaseOrderDeatil.Where(z => z.PurchaseOrderDetailId == x.PurchaseOrderDetailId).Select(z => z.TotalQuantity).FirstOrDefault();

                            x.TotalPoQuantity = TotalPoQuantity;
                            int GrQuantity = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.Qty);
                            int GRDamageQty = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.DamageQty);
                            int GRExpireQty = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.ExpiryQty);

                            long GoodsReceivedDetailId = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem && z.PurchaseOrderDetailId == x.PurchaseOrderDetailId && z.IsDamageExpiryPhysical == x.ISDamageExpiryPhysical).Select(z => z.Id).LastOrDefault();
                            x.GoodsReceivedDetailId = GoodsReceivedDetailId;

                            x.GoodsDescripancyNoteDetails = GdnList.Where(y => y.ItemMultiMRPId == x.ItemMultiMRPId && !x.IsFreeItem).ToList();

                            x.FinalGoodRecievedDetailId = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem && z.PurchaseOrderDetailId == x.PurchaseOrderDetailId).Select(z => z.Id).FirstOrDefault();
                            x.UnitGrQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.Qty).FirstOrDefault();
                            x.UnitDamageQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.DamageQty).FirstOrDefault();
                            x.UnitExpiryGrQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.ExpiryQty).FirstOrDefault();

                            x.ISDamageExpiryPhysical = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.IsDamageExpiryPhysical).FirstOrDefault();
                            x.CNDamageQty = x.DamageExpiryDC == null ? 0 : x.DamageExpiryDC.DamageRemainingQty;
                            //x.CNExpiryQty = x.DamageExpiryDC == null ? 0 : x.DamageExpiryDC.ExpiryRemainingQty;
                            if (x.ISDamageExpiryPhysical == true)
                            {
                                x.TotalGRQuantity = GrQuantity + GRDamageQty + GRExpireQty;
                                x.Qty = x.Qty + x.DamageQty + x.ExpiryQty;
                                x.IRRemainingQuantity = x.Qty - x.IRQuantity;
                            }
                            else
                            {
                                if (x.GoodsDescripancyNoteDetails.Any())
                                {
                                    x.TotalGRQuantity = GrQuantity + x.DamageQty;
                                    x.IRRemainingQuantity = x.IRQuantity < x.Qty + x.ShortQuantity ? x.Qty - (x.IRQuantity - x.ShortQuantity) : 0;
                                }
                                else
                                {
                                    x.TotalGRQuantity = GrQuantity + x.DamageQty;
                                    //x.IRRemainingQuantity = x.IRQuantity < x.Qty  ? (x.Qty ) - x.IRQuantity : 0;
                                    x.IRRemainingQuantity = x.IRQuantity < x.Qty + x.ShortQuantity ? (x.Qty + x.ShortQuantity) - x.IRQuantity : 0;
                                    x.IRQuantity = x.ShortQuantity > 0 ? x.IRQuantity - x.ShortQuantity : x.IRQuantity;
                                    // x.IRRemainingQuantity = x.IRQuantity < x.Qty + x.ShortQuantity ? x.Qty - (x.IRQuantity - x.ShortQuantity) : 0;
                                }
                            }

                            x.CESSAmount = x.TotalCessPercentage > 0 ? (x.Price * x.IRRemainingQuantity) * x.TotalCessPercentage / 100 : 0;
                            x.CGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.SGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.GSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * x.TotalTaxPercentage / 100 : 0;
                            x.TaxableAmount = x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) : 0;
                            x.TotalAmount = x.TaxableAmount + x.GSTAmount + x.CESSAmount;
                            x.FinalIrQuantity = x.IRRemainingQuantity;
                            x.ShowShortQty = x.TotalGRQuantity <= x.TotalPoQuantity ? true : false;
                            x.IsVisible = IsVisible(TotalPoQuantity, GrQuantity, x.IRQuantity, x.IRRemainingQuantity, IRMasterDc.IRSerialNumber, x.UnitGrQty, x.UnitDamageQty, x.UnitExpiryGrQty, x.ISDamageExpiryPhysical);


                        }

                        //IRItemDcs.ForEach(x =>
                        //{
                        //    int TotalPoQuantity = db.DPurchaseOrderDeatil.Where(z => z.PurchaseOrderDetailId == x.PurchaseOrderDetailId).Select(z => z.TotalQuantity).FirstOrDefault();

                        //    x.TotalPoQuantity = TotalPoQuantity;
                        //    int GrQuantity = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.Qty);
                        //    int GRDamageQty = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.DamageQty);
                        //    int GRExpireQty = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem).Sum(z => z.ExpiryQty);

                        //    long GoodsReceivedDetailId = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem && z.PurchaseOrderDetailId == x.PurchaseOrderDetailId && z.IsDamageExpiryPhysical == x.ISDamageExpiryPhysical).Select(z => z.Id).LastOrDefault();
                        //    x.GoodsReceivedDetailId = GoodsReceivedDetailId;

                        //    x.GoodsDescripancyNoteDetails = GdnList.Where(y => y.ItemMultiMRPId == x.ItemMultiMRPId && !x.IsFreeItem).ToList();

                        //    x.FinalGoodRecievedDetailId = Gr.Where(z => z.ItemMultiMRPId == x.ItemMultiMRPId && z.IsFreeItem == x.IsFreeItem && z.PurchaseOrderDetailId == x.PurchaseOrderDetailId).Select(z => z.Id).LastOrDefault();
                        //    x.UnitGrQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.Qty).FirstOrDefault();
                        //    x.UnitDamageQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.DamageQty).FirstOrDefault();
                        //    x.UnitExpiryGrQty = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.ExpiryQty).FirstOrDefault();

                        //    x.ISDamageExpiryPhysical = Gr.Where(z => z.Id == GoodsReceivedDetailId).Select(z => z.IsDamageExpiryPhysical).FirstOrDefault();
                        //    x.CNDamageQty = x.DamageExpiryDC == null ? 0 : x.DamageExpiryDC.DamageRemainingQty;
                        //    x.CNExpiryQty = x.DamageExpiryDC == null ? 0 : x.DamageExpiryDC.ExpiryRemainingQty;
                        //    if (x.ISDamageExpiryPhysical == true)
                        //    {
                        //        x.TotalGRQuantity = GrQuantity + GRDamageQty + GRExpireQty;
                        //        x.Qty = x.Qty + x.DamageQty + x.ExpiryQty;
                        //        x.IRRemainingQuantity = x.Qty - x.IRQuantity;
                        //    }
                        //    else
                        //    {
                        //        x.TotalGRQuantity = GrQuantity + x.DamageQty;
                        //        x.IRRemainingQuantity = x.IRQuantity < x.Qty + x.ShortQuantity ? x.Qty - x.IRQuantity : 0;
                        //    }
                        //    x.CESSAmount = x.TotalCessPercentage > 0 ? (x.Price * x.IRRemainingQuantity) * x.TotalCessPercentage / 100 : 0;
                        //    x.CGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * (x.TotalTaxPercentage / 2) / 100 : 0;
                        //    x.SGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * (x.TotalTaxPercentage / 2) / 100 : 0;
                        //    x.GSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) * x.TotalTaxPercentage / 100 : 0;
                        //    x.TaxableAmount = x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity) : 0;
                        //    x.TotalAmount = x.TaxableAmount + x.GSTAmount + x.CESSAmount;
                        //    x.FinalIrQuantity = x.IRRemainingQuantity;
                        //    x.ShowShortQty = x.TotalGRQuantity <= x.TotalPoQuantity ? true : false;
                        //    x.IsVisible = IsVisible(TotalPoQuantity, GrQuantity, x.IRQuantity, x.IRRemainingQuantity, IRMasterDc.IRSerialNumber, x.UnitGrQty, x.UnitDamageQty, x.UnitExpiryGrQty, x.ISDamageExpiryPhysical);

                        //});

                        IRMasterDc.BillAmount = IRItemDcs.Any(x => x.IsVisible == true) ? IRItemDcs.Where(x => x.IsVisible == true).Sum(x => x.TotalAmount) : 0;
                        IRMasterDc.IRItemDcs = IRItemDcs.Where(x => x.IsVisible == true).ToList();
                        //IRMasterDc.BillAmount = IRItemDcs.Any(x => x.IRRemainingQuantity > 0 && x.IsVisible==true) ? IRItemDcs.Where(x => x.IRRemainingQuantity > 0 && x.IsVisible == true).Sum(x => x.TotalAmount) : 0;
                        //IRMasterDc.IRItemDcs = IRItemDcs.Where(x => x.IRRemainingQuantity > 0 && x.IsVisible == true).ToList();
                        //IRMasterDc.IRItemDcs = IRItemDcs;
                        IRMasterDc.TotalPOQuantityMst = IRItemDcs.Sum(x => x.TotalPoQuantity);
                        IRMasterDc.TotalGRQuantityMst = IRItemDcs.Sum(x => x.TotalGRQuantity);

                    }
                }
            }
            return IRMasterDc;
        }
        [HttpGet]
        [Route("GetIRDetailViaIcApprove")]
        public HttpResponseMessage GetIRDetailViaIcApprove(int warehouseid, DateTime? StartDate, DateTime? EndDate)
        {
            using (var context = new AuthContext())
            {
                List<GetIRDetailViaIcApproveDC> GetIRDetailViaIcApproveDC = new List<GetIRDetailViaIcApproveDC>();
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                if (warehouseid > 0)
                {
                    var warehouseidparam = new SqlParameter("warehouseid", warehouseid);
                    var StartDateparam = new SqlParameter("startdate", StartDate != null ? StartDate : (object)DBNull.Value);
                    var EndDateparam = new SqlParameter("enddate", EndDate != null ? EndDate : (object)DBNull.Value);



                    GetIRDetailViaIcApproveDC = context.Database.SqlQuery<GetIRDetailViaIcApproveDC>("IRDetailViaIcApprove @warehouseid,@startdate,@enddate", warehouseidparam, StartDateparam, EndDateparam).ToList();

                }
                return Request.CreateResponse(HttpStatusCode.OK, GetIRDetailViaIcApproveDC);
            }
        }

        [HttpGet]
        [Route("AcceptRejectByIcLeadIR")]
        public APIResponse AcceptRejectByIcLeadIR(int IrMasterID, bool approved)
        {
            using (var context = new AuthContext())
            {
                APIResponse res = new APIResponse();
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                IrExtendInvoiceDateApproval IrExtendInvoiceDateApprovals = new IrExtendInvoiceDateApproval();
                var ExistId = context.IrExtendInvoiceDateApprovals.FirstOrDefault(x => x.IRMasterId == IrMasterID && x.Status == "Pending");
                if (ExistId != null)
                {
                    ExistId.Status = approved ? "Approved" : "Rejected";
                    ExistId.ModifiedDate = indianTime;
                    ExistId.ModifiedBy = userid;
                    context.Entry(ExistId).State = EntityState.Modified;

                }
                if (context.Commit() > 0)
                {
                    res.Status = true;
                    res.Message = "Status Updated Successfully ";
                }
                else
                {
                    res.Status = false;
                    res.Message = "Data Not Saved ";
                }
                return res;
            }
        }

        [HttpGet]
        [Route("GetIRStatus")]
        public string GetIRStatus(int IRMasterID)
        {
            string Message = null;
            using (var context = new AuthContext())
            {
                var ExistId = context.IrExtendInvoiceDateApprovals.Where(x => x.IRMasterId == IRMasterID).Select(x => new { x.Id, x.Status }).OrderByDescending(x => x.Id).FirstOrDefault();
                if (ExistId != null)
                {
                    Message = ExistId.Status;
                }
            }
            return Message;
        }


        [HttpGet]
        [Route("GetIRDetail")]
        public List<GetIRMasterDc> GetIRDetail(int PurchaseOrderId)
        {
            List<GetIRMasterDc> getIRMasterDcs = new List<GetIRMasterDc>();
            using (var context = new AuthContext())
            {
                List<IRMaster> IRRec = new List<IRMaster>();
                IRRec = context.IRMasterDB.Where(a => a.PurchaseOrderId == PurchaseOrderId && a.Deleted == false).Include(x => x.InvoiceReceiptDetails).ToList();

                var BuyerApprovalList = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == PurchaseOrderId & x.IsActive == true).ToList();
                var buyerids = BuyerApprovalList.Select(x => x.BuyerId).ToList();
                var buyernames = context.Peoples.Where(x => buyerids.Contains(x.PeopleID)).Select(x => new { x.PeopleID, x.DisplayName }).ToList();

                getIRMasterDcs = Mapper.Map(IRRec).ToANew<List<GetIRMasterDc>>();
                if (getIRMasterDcs != null && getIRMasterDcs.Any())
                {
                    var irIds = getIRMasterDcs.Select(x => x.Id).ToList();
                    var IRCN = context.IRCreditNoteMaster.Where(a => irIds.Contains(a.IRMasterId) && a.IsActive && (!a.IsDeleted.HasValue || !a.IsDeleted.Value)).Include(x => x.IRCreditNoteDetails).ToList();
                    List<IRCreditNoteMasterDc> iRCreditNoteMasterDcs = Mapper.Map(IRCN).ToANew<List<IRCreditNoteMasterDc>>();

                    //iRCreditNoteMasterDcs.ForEach(x => x.IRCreditNoteDetails = x.IRCreditNoteDetails.Where(y => (!y.IsDeleted.HasValue || !y.IsDeleted.Value) && y.IsActive).ToList());

                    foreach (var item in IRRec)
                    {
                        item.InvoiceReceiptDetails = item.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).ToList();
                    }
                    var Gr = context.GoodsReceivedDetail.Where(x => x.PurchaseOrderDetail.PurchaseOrderId == PurchaseOrderId && x.IsDeleted == false && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).Include(x => x.PurchaseOrderDetail).ToList();

                    var warehouseId = Gr.FirstOrDefault().PurchaseOrderDetail.WarehouseId;

                    //List<ItemClassificationDC> ABCitemsList = Gr.Select(item => new ItemClassificationDC { ItemNumber = item.PurchaseOrderDetail.ItemNumber, WarehouseId = item.PurchaseOrderDetail.WarehouseId.Value }).ToList();

                    //var manager = new ItemLedgerManager();
                    //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                    var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                    var multimrp = context.ItemMultiMRPDB.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId)).ToList();
                    List<ItemWithMRPDc> items = new List<ItemWithMRPDc>();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    var orderIdDt = new DataTable();
                    orderIdDt.Columns.Add("IntValue");
                    foreach (var item in itemMultiMRPIds)
                    {
                        var dr = orderIdDt.NewRow();
                        dr["IntValue"] = item;
                        orderIdDt.Rows.Add(dr);
                    }
                    var param = new SqlParameter("itemMultiMRPIds", orderIdDt);
                    param.SqlDbType = SqlDbType.Structured;
                    param.TypeName = "dbo.IntValues";
                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetItemWithMRPDetail]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(param);
                    cmd.Parameters.Add(new SqlParameter("warehouseId", warehouseId));

                    // Run the sproc
                    using (var reader = cmd.ExecuteReader())
                    {
                        items = ((IObjectContextAdapter)context)
                        .ObjectContext
                        .Translate<ItemWithMRPDc>(reader).ToList();
                    }


                    getIRMasterDcs.ForEach(x =>
                    {
                        int? DepoId = context.DPurchaseOrderMaster.FirstOrDefault(a => a.PurchaseOrderId == x.PurchaseOrderId).DepoId;
                        if (DepoId.HasValue && DepoId > 0)
                        {
                            DepoMaster DepoDetail = context.DepoMasters.Where(a => a.DepoId == DepoId.Value).SingleOrDefault();

                            //for igst case if true then apply condion to hide column of cgst sgst cess
                            if (!string.IsNullOrEmpty(DepoDetail.GSTin) && DepoDetail.GSTin.Length >= 11)
                            {
                                string DepoTin_No = DepoDetail.GSTin.Substring(0, 2);
                                x.IsIgstIR = !context.Warehouses.Any(y => y.GSTin != null && y.WarehouseId == warehouseId && y.GSTin.Substring(0, 2) == DepoTin_No);

                            }
                        }



                        var Buyerids = BuyerApprovalList.Where(r => r.IRMasterId == x.Id).Select(a => a.BuyerId).ToList();
                        var name = buyernames.Where(s => Buyerids.Contains(s.PeopleID)).Select(c => c.DisplayName).ToList();
                        x.BuyerName = name.Any() ? string.Join(",", name) : x.BuyerName;

                        //var data = context.IRCreditNoteMaster.Where(y => y.IRMasterId == x.Id).ToList();
                        //var shortqty = context.IRCreditNoteDetail.Where(a => a.IRCreditNoteMasterId == data.Id).Sum(z => z.ShortQty);
                        //var damageqty = context.IRCreditNoteDetail.Where(b => b.IRCreditNoteMasterId == data.Id).Sum(z => z.DamageQty);
                        //var expiryqty = context.IRCreditNoteDetail.Where(c => c.IRCreditNoteMasterId == data.Id).Sum(z => z.ExpiryQty);
                        //var totalAmountAfterTax = context.IRCreditNoteDetail.Where(c => c.IRCreditNoteMasterId == data.Id).Sum(z => ((z.IRPrice * (z.ShortQty + z.DamageQty + z.ExpiryQty)) - z.Discount) + (((z.IRPrice * (z.ShortQty + z.DamageQty + z.ExpiryQty)) - z.Discount) * (z.TotalTaxPercentage + z.CessTaxPercentage)) / 100);
                        //var totalTaxablevalue = context.IRCreditNoteDetail.Where(c => c.IRCreditNoteMasterId == data.Id).Sum(z => (((z.IRPrice * (z.ShortQty + z.DamageQty + z.ExpiryQty)) - z.Discount) * (z.TotalTaxPercentage + z.CessTaxPercentage)) / 100);
                        //var igstamt = context.IRCreditNoteDetail.Where(c => c.IRCreditNoteMasterId == data.Id).Sum(z => (((z.IRPrice * (z.ShortQty + z.DamageQty + z.ExpiryQty)) - z.Discount) * (z.TotalTaxPercentage)) / 100);
                        //var cessamt = totalTaxablevalue - igstamt;

                        //if (data != null)
                        //{
                        //    x.IRCreditNoteMasterDcs = new List<IRCreditNoteMasterDc>();
                        //    x.IRCreditNoteMasterDcs.Add(new IRCreditNoteMasterDc
                        //    {
                        //        Id = data.Id,
                        //        IRMasterId = data.IRMasterId,
                        //        CNForId = data.CNForId,
                        //        CNForName = data.CNForName,
                        //        CNNumber = data.CNNumber,
                        //        CNGenerateFile = data.CNGenerateFile,
                        //        Comment = data.Comment,
                        //        Message = null,
                        //        IsDebitNoteGenerate = data.IsDebitNoteGenerate,
                        //        CreatedDate = data.CreatedDate,
                        //        TotalShortQty = shortqty,
                        //        TotalDamageQty = damageqty,
                        //        TotalExpiryQty = expiryqty,
                        //        TotalQty = shortqty + damageqty + expiryqty,
                        //        TotalAmountAfterTax = totalAmountAfterTax,
                        //        TotalTaxablevalue = totalTaxablevalue,
                        //        TotalAmountBeforeTax = totalAmountAfterTax - totalTaxablevalue,
                        //        TotalIgstAmount = igstamt,
                        //        TotalCessAmount = cessamt


                        //    });
                        //    x.IRCreditNoteMasterDcs.ForEach(y =>
                        //    {

                        //    });
                        //}

                        x.IRCreditNoteMasterDcs = iRCreditNoteMasterDcs.Where(y => y.IRMasterId == x.Id).ToList();
                        x.IRCreditNoteMasterDcs.ForEach(y =>
                        {
                            var data = context.IRCreditNoteMaster.Where(z => z.Id == y.Id && z.IsActive == true && z.IsDeleted == false).FirstOrDefault();
                            if (data.Type == 3)
                            {
                                y.IRCreditNoteDetails = IRCreditNoteDetailDcForExcess(Convert.ToInt32(y.Id), y.IRMasterId).ToList();
                                y.TotalCgstAmount = y.IRCreditNoteDetails.Sum(z => z.CgstAmount);
                                y.TotalSgstAmount = y.IRCreditNoteDetails.Sum(z => z.SgstAmount);
                                y.TotalIgstAmount = y.IRCreditNoteDetails.Sum(z => z.IgstAmount);
                                y.TotalTaxablevalue = y.IRCreditNoteDetails.Sum(z => z.Taxablevalue);
                                y.TotalAmountBeforeTax = y.IRCreditNoteDetails.Sum(z => z.Amount);
                                y.TotalAmountAfterTax = y.IRCreditNoteDetails.Sum(z => z.TotalAmount);
                                y.TotalShortQty = y.IRCreditNoteDetails.Sum(z => z.ShortQty);
                                y.TotalDamageQty = y.IRCreditNoteDetails.Sum(z => z.DamageQty);
                                y.TotalExpiryQty = y.IRCreditNoteDetails.Sum(z => z.ExpiryQty);
                                y.TotalQty = y.IRCreditNoteDetails.Sum(z => z.Qty);
                                y.TotalDiscount = y.IRCreditNoteDetails.Sum(z => z.ShortQuantityDiscount);
                                y.TotalCessAmount = y.IRCreditNoteDetails.Sum(z => z.CessAmount);
                            }
                            else
                            {
                                y.IRCreditNoteDetails = IRCreditNoteDetailDc(Convert.ToInt32(y.Id), y.IRMasterId).ToList();
                                y.TotalCgstAmount = y.IRCreditNoteDetails.Sum(z => z.CgstAmount);
                                y.TotalSgstAmount = y.IRCreditNoteDetails.Sum(z => z.SgstAmount);
                                y.TotalIgstAmount = y.IRCreditNoteDetails.Sum(z => z.IgstAmount);
                                y.TotalTaxablevalue = y.IRCreditNoteDetails.Sum(z => z.Taxablevalue);
                                y.TotalAmountBeforeTax = y.IRCreditNoteDetails.Sum(z => z.Amount);
                                y.TotalAmountAfterTax = y.IRCreditNoteDetails.Sum(z => z.TotalAmount);
                                y.TotalShortQty = y.IRCreditNoteDetails.Sum(z => z.ShortQty);
                                y.TotalDamageQty = y.IRCreditNoteDetails.Sum(z => z.DamageQty);
                                y.TotalExpiryQty = y.IRCreditNoteDetails.Sum(z => z.ExpiryQty);
                                y.TotalQty = y.IRCreditNoteDetails.Sum(z => z.Qty);
                                y.TotalDiscount = y.IRCreditNoteDetails.Sum(z => z.ShortQuantityDiscount);
                                y.TotalCessAmount = y.IRCreditNoteDetails.Sum(z => z.CessAmount);
                            }
                        });

                        x.IRItemDcs = IRRec.FirstOrDefault(y => y.Id == x.Id).InvoiceReceiptDetails.Select(y => new IRItemDc
                        {
                            Price = y.Price,
                            IRQuantity = y.IRQuantity,
                            DesP = y.DiscountPercent.HasValue ? y.DiscountPercent.Value : 0,
                            DesA = y.DiscountAmount.HasValue ? y.DiscountAmount.Value : 0,
                            GoodsReceivedDetailId = y.GoodsReceivedDetailId

                        }).ToList();

                        // var items = context.itemMasters.Where(g => g.WarehouseId == warehouseId && itemMultiMRPIds.Contains(g.ItemMultiMRPId)).Select(g => new { g.Number, g.TotalTaxPercentage, g.TotalCessPercentage, g.HSNCode, g.price }).Distinct().ToList();
                        // var itemMultiMrpdetail = context.ItemMultiMRPDB.Where(a => itemMultiMRPIds.Contains(a.ItemMultiMRPId) && a.Deleted == false).Select(y => new ItemMultiMRPDc { ItemNumber = y.ItemNumber, ItemMultiMRPId = y.ItemMultiMRPId, MRP = y.MRP }).ToList();
                        x.IRItemDcs.ForEach(y =>
                            {
                                double discountamt = 0;
                                var DesA = IRRec.FirstOrDefault(p => p.Id == x.Id).InvoiceReceiptDetails.FirstOrDefault(p => p.GoodsReceivedDetailId == y.GoodsReceivedDetailId).DiscountAmount;
                                var DesP = IRRec.FirstOrDefault(p => p.Id == x.Id).InvoiceReceiptDetails.FirstOrDefault(p => p.GoodsReceivedDetailId == y.GoodsReceivedDetailId).DiscountPercent;
                                if (DesA.HasValue && DesA.Value > 0)
                                    discountamt = Convert.ToDouble(DesA);
                                else if (DesP.HasValue && DesP.Value > 0)
                                {
                                    discountamt = y.IRQuantity * y.Price * Convert.ToDouble(DesP) / 100;
                                }
                                var grItem = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId);
                                int TotalQuantity = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).Qty;
                                y.Qty = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).PurchaseOrderDetail.TotalQuantity;

                                //
                                bool? IsphysicalExpiryDamage = Gr.Where(z => z.Id == y.GoodsReceivedDetailId).Select(z => z.IsDamageExpiryPhysical).FirstOrDefault();
                                if (IsphysicalExpiryDamage == true)
                                {
                                    int DamageQty = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).DamageQty;
                                    int ExpiryQty = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).ExpiryQty;
                                    y.TotalQuantity = TotalQuantity + DamageQty + ExpiryQty;
                                }
                                else
                                {
                                    y.TotalQuantity = TotalQuantity;
                                }
                                y.TotalCessPercentage = IRRec.FirstOrDefault(p => p.Id == x.Id).InvoiceReceiptDetails.FirstOrDefault(p => p.GoodsReceivedDetailId == y.GoodsReceivedDetailId).CessTaxPercentage.Value;
                                y.TotalTaxPercentage = IRRec.FirstOrDefault(p => p.Id == x.Id).InvoiceReceiptDetails.FirstOrDefault(p => p.GoodsReceivedDetailId == y.GoodsReceivedDetailId).TotalTaxPercentage;
                                y.GSTAmount = ((y.IRQuantity * y.Price) - discountamt) * y.TotalTaxPercentage / 100;
                                y.CESSAmount = ((y.IRQuantity * y.Price) - discountamt) * y.TotalCessPercentage / 100;

                                y.ItemMultiMRPId = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).ItemMultiMRPId;
                                y.ItemName = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).PurchaseOrderDetail.ItemName;
                                y.Itemnumber = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).Number : "";
                                y.HSNCode = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).HSNCode : "";
                                y.DesA = discountamt;
                                y.DesP = DesP;
                                //y.IRItemId= grItem.it 379
                                y.TotalAmount = (y.IRQuantity * y.Price) + y.GSTAmount + y.CESSAmount - Convert.ToDouble(y.DesA.HasValue ? y.DesA.Value : 0);
                                y.IsFreeItem = IRRec.FirstOrDefault(p => p.Id == x.Id).InvoiceReceiptDetails.FirstOrDefault(p => p.GoodsReceivedDetailId == y.GoodsReceivedDetailId).IsFreeItem;
                                y.MRP = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).MRP : 0;
                                // y.Category = GetItem.Where(q => q.ItemNumber == items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).Number).Select(q => q.Category).FirstOrDefault() != null ? GetItem.Where(q => q.ItemNumber == items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).Number).Select(q => q.Category).FirstOrDefault() : "D";
                                y.Category = Gr.FirstOrDefault(p => p.Id == y.GoodsReceivedDetailId).PurchaseOrderDetail.Category;
                                y.CompanyStockCode = multimrp.FirstOrDefault(z => z.ItemMultiMRPId == y.ItemMultiMRPId).CompanyStockCode;


                            });


                    });




                }
                return getIRMasterDcs;

            }
        }

        //[Route("AddIR")]
        //[AcceptVerbs("POST")]
        //public POResult AddIR(GetIRMasterDc iRMasterDc)
        //{
        //    iRMasterDc.IRItemDcs = iRMasterDc.IRItemDcs.Where(x => x.IsVisible == true).ToList();
        //    POResult pOResult = new POResult();
        //    List<GoodsReceivedItemDc> gRItems = new List<GoodsReceivedItemDc>();
        //    using (var context = new AuthContext())
        //    {

        //        var identity = User.Identity as ClaimsIdentity;
        //        int compid = 0, userid = 0, Warehouse_id = 0;
        //        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
        //            compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

        //        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
        //            userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

        //        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
        //            Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);


        //        List<GoodsReceivedItemDc> GoodsReceivedItemDcs = new List<GoodsReceivedItemDc>();
        //        if (context.Database.Connection.State != ConnectionState.Open)
        //            context.Database.Connection.Open();

        //        var cmd = context.Database.Connection.CreateCommand();
        //        cmd.CommandText = "[dbo].[GetRemainningGRDetail]";
        //        cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //        cmd.Parameters.Add(new SqlParameter("PurchaseOrderId", iRMasterDc.PurchaseOrderId));

        //        // Run the sproc
        //        using (var reader = cmd.ExecuteReader())
        //        {
        //            GoodsReceivedItemDcs = ((IObjectContextAdapter)context)
        //            .ObjectContext
        //            .Translate<GoodsReceivedItemDc>(reader).ToList();
        //        }
        //        if (GoodsReceivedItemDcs != null && GoodsReceivedItemDcs.Any())
        //        {
        //            PurchaseOrderMaster poDetails = context.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == iRMasterDc.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();
        //            var purchaseMaster = context.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId);
        //            var maxIrSerialNumber = context.IRMasterDB.Where(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId).OrderByDescending(x => x.IrSerialNumber).FirstOrDefault()?.IrSerialNumber ?? 0;
        //            People people = context.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();


        //            IRMaster IRM = new IRMaster();
        //            //IRM.TotalAmount = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
        //            IRM.TotalAmount = Math.Round(Convert.ToDouble(
        //                iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a =>
        //                   ((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
        //                    + (((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
        //                       * (a.TotalCessPercentage + a.TotalTaxPercentage) / 100)
        //              )
        //               ), 2);
        //            IRM.TotalAmountRemaining = IRM.TotalAmount;
        //            IRM.IRAmountWithTax = IRM.TotalAmount;
        //            IRM.Gstamt = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a => a.GSTAmount)), 2);
        //            IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);

        //            if (iRMasterDc.Discount == null)
        //            {
        //                iRMasterDc.Discount = 0;
        //            }
        //            else
        //            {
        //                IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - iRMasterDc.Discount), 2);
        //                IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
        //                IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
        //            }

        //            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.OtherAmount ?? 0)), 2);
        //            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.ExpenseAmount ?? 0)), 2);
        //            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.RoundofAmount ?? 0)), 2);
        //            IRM.TotalAmountRemaining = IRM.TotalAmount;
        //            IRM.Discount = Math.Round(Convert.ToDouble(iRMasterDc.Discount), 2);
        //            //IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - (IRM.Discount ?? 0)), 2);
        //            if (iRMasterDc.IsDraft)
        //            {
        //                IRM.IRStatus = "IR Posted as a Draft";
        //                IRM.PaymentStatus = "Unpaid";
        //            }
        //            else
        //            {
        //                IRM.IRStatus = "IR Posted";
        //                IRM.PaymentStatus = "Unpaid";
        //            }
        //            IRM.PurchaseOrderId = iRMasterDc.PurchaseOrderId;
        //            IRM.supplierId = purchaseMaster.SupplierId;
        //            IRM.SupplierName = purchaseMaster.SupplierName;
        //            IRM.BuyerId = purchaseMaster.BuyerId;
        //            IRM.BuyerName = purchaseMaster.BuyerName;
        //            IRM.WarehouseId = purchaseMaster.WarehouseId;
        //            IRM.CreationDate = DateTime.Now;
        //            IRM.ExpenseAmount = iRMasterDc.ExpenseAmount;
        //            IRM.OtherAmount = iRMasterDc.OtherAmount;
        //            IRM.ExpenseAmountRemark = iRMasterDc.ExpenseAmountRemark;
        //            IRM.OtherAmountRemark = iRMasterDc.OtherAmountRemark;
        //            IRM.RoundofAmount = iRMasterDc.RoundofAmount;
        //            IRM.ExpenseAmountType = iRMasterDc.ExpenseAmountType;
        //            IRM.OtherAmountType = iRMasterDc.OtherAmountType;
        //            IRM.RoundoffAmountType = iRMasterDc.RoundoffAmountType;
        //            IRM.CreatedBy = people.DisplayName;
        //            IRM.FreightAmount = iRMasterDc.FreightAmount;
        //            IRM.InvoiceDate = iRMasterDc.InvoiceDate;
        //            if (iRMasterDc.DueDays > 0)
        //            {
        //                IRM.DueDays = iRMasterDc.DueDays;
        //            }
        //            else
        //            {
        //                IRM.DueDays = 0;
        //            }

        //            IRM.IRID = iRMasterDc.InvoiceNumber;//
        //            IRM.InvoiceNumber = iRMasterDc.InvoiceNumber;
        //            IRM.IRType = "IR" + (maxIrSerialNumber + 1);
        //            IRM.IrSerialNumber = (maxIrSerialNumber + 1);
        //            maxIrSerialNumber = (maxIrSerialNumber + 1);


        //            List<InvoiceReceiptDetail> invoiceReceiptDetails = new List<InvoiceReceiptDetail>();

        //            foreach (var iRItemDc in iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0))
        //            {
        //                var totalItemQty = iRItemDc.IRRemainingQuantity;
        //                gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty > 0 && x.IsFreeItem == iRItemDc.IsFreeItem && x.Id == iRItemDc.GoodsReceivedDetailId).ToList();

        //                #region OldCode
        //                //if (iRItemDc.IRRemainingQuantity > 0 && iRItemDc.IRQuantity == 0)
        //                //{
        //                //    gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem && x.Id == iRItemDc.GoodsReceivedDetailId).ToList();


        //                //}
        //                //else
        //                //{
        //                //    gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty > 0 && x.IsFreeItem == iRItemDc.IsFreeItem && x.Id == iRItemDc.GoodsReceivedDetailId).ToList();
        //                //}
        //                if (gRItems != null && gRItems.Any())
        //                {
        //                    foreach (var gRItem in gRItems)
        //                    {
        //                        int qty = 0;
        //                        InvoiceReceiptDetail iRItem = new InvoiceReceiptDetail();
        //                        if (iRItemDc.IRRemainingQuantity > 0)
        //                        {
        //                            qty = iRItemDc.IRRemainingQuantity;
        //                            //if (gRItem.Qty > iRItemDc.IRRemainingQuantity)
        //                            //{
        //                            //    qty = iRItemDc.IRRemainingQuantity;
        //                            //    gRItem.Qty = gRItem.Qty - iRItemDc.IRRemainingQuantity;
        //                            //    iRItemDc.IRRemainingQuantity = 0;

        //                            //}
        //                            //else if (gRItem.Qty <= iRItemDc.IRRemainingQuantity)
        //                            //{
        //                            //    qty = gRItem.Qty;
        //                            //    iRItemDc.IRRemainingQuantity = iRItemDc.IRRemainingQuantity - gRItem.Qty;
        //                            //    gRItem.Qty = 0;
        //                            //}

        //                            double discountamt = 0;
        //                            if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
        //                            {
        //                                discountamt = Convert.ToDouble((iRItemDc.DesA) / totalItemQty) * (qty + iRItemDc.CNShortQty);
        //                            }
        //                            else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
        //                            {
        //                                discountamt = qty * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
        //                            }


        //                            iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
        //                            iRItem.CreatedBy = userid;
        //                            iRItem.CreatedDate = DateTime.Now;
        //                            iRItem.DiscountAmount = iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0 ? Convert.ToDecimal(discountamt) : 0;


        //                            iRItem.DiscountPercent = iRItemDc.DesP;
        //                            iRItem.GoodsReceivedDetailId = gRItem.Id;
        //                            iRItem.IRQuantity = qty;
        //                            iRItem.IsActive = true;
        //                            iRItem.IsDeleted = false;
        //                            iRItem.Price = iRItemDc.Price;
        //                            iRItem.Status = 1;
        //                            iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
        //                            iRItem.TotalTaxAmount = (((qty) * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
        //                            iRItem.CessTaxAmount = (((qty) * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
        //                            iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
        //                            iRItem.GSTAmount = iRItem.TotalTaxAmount;
        //                            iRItem.IRExcludedquantity = iRItemDc.CNShortQty;
        //                            invoiceReceiptDetails.Add(iRItem);
        //                            if (iRItemDc.IRRemainingQuantity == 0)
        //                                break;
        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region CommentCode
        //                //int qty = 0;
        //                //InvoiceReceiptDetail iRItem = new InvoiceReceiptDetail();
        //                //if (iRItemDc.IRRemainingQuantity > 0)
        //                //{
        //                //    qty = iRItemDc.IRRemainingQuantity;


        //                //    double discountamt = 0;
        //                //    if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
        //                //    {
        //                //        discountamt = Convert.ToDouble((iRItemDc.DesA) / totalItemQty) * (qty);
        //                //    }
        //                //    else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
        //                //    {
        //                //        discountamt = qty * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
        //                //    }


        //                //    iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
        //                //    iRItem.CreatedBy = userid;
        //                //    iRItem.CreatedDate = DateTime.Now;
        //                //    iRItem.DiscountAmount = iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0 ? Convert.ToDecimal(discountamt) : 0;


        //                //    iRItem.DiscountPercent = iRItemDc.DesP;
        //                //    iRItem.GoodsReceivedDetailId = iRItemDc.GoodsReceivedDetailId;
        //                //    iRItem.IRQuantity = qty;
        //                //    iRItem.IsActive = true;
        //                //    iRItem.IsDeleted = false;
        //                //    iRItem.Price = iRItemDc.Price;
        //                //    iRItem.Status = 1;
        //                //    iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
        //                //    iRItem.TotalTaxAmount = (((qty) * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
        //                //    iRItem.CessTaxAmount = (((qty) * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
        //                //    iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
        //                //    iRItem.GSTAmount = iRItem.TotalTaxAmount;
        //                //    iRItem.IRExcludedquantity = iRItemDc.CNShortQty;
        //                //    iRItem.IsFreeItem = iRItemDc.IsFreeItem;
        //                //    //if (iRItemDc.TotalGRQuantity == 0)
        //                //    //{
        //                //    //    iRItem.GoodsReceivedDetailId = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem && x.Qty == 0).Select(x => x.Id).FirstOrDefault();

        //                //    //}
        //                //    //else
        //                //    //{
        //                //    //    iRItem.GoodsReceivedDetailId = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem && x.Qty > 0).Select(x => x.Id).FirstOrDefault();

        //                //    //}
        //                //    invoiceReceiptDetails.Add(iRItem);
        //                //    if (iRItemDc.IRRemainingQuantity == 0)
        //                //        break;
        //                //}
        //                #endregion
        //            }
        //            IRM.InvoiceReceiptDetails = invoiceReceiptDetails.ToList();



        //            if (iRMasterDc.IRItemDcs.Any(x => x.CNShortQty > 0 || x.CNDamageQty > 0 || x.CNExpiryQty > 0))
        //            {
        //                IRM.IRCreditNoteMasters = new List<IRCreditNoteMaster>();

        //                IRCreditNoteMaster iRCreditNoteMaster = new IRCreditNoteMaster
        //                {
        //                    CreatedBy = userid,
        //                    CreatedDate = indianTime,
        //                    CNForId = purchaseMaster.SupplierId,
        //                    CNForName = purchaseMaster.SupplierName,
        //                    IsActive = true,
        //                    IsDeleted = false,
        //                    IRCreditNoteDetails = new List<IRCreditNoteDetail>()
        //                };
        //                foreach (var item in iRMasterDc.IRItemDcs.Where(x => x.CNShortQty > 0 || x.CNDamageQty > 0 || x.CNExpiryQty > 0))
        //                {
        //                    iRCreditNoteMaster.IRCreditNoteDetails.Add(new IRCreditNoteDetail
        //                    {
        //                        CessTaxPercentage = item.TotalCessPercentage,
        //                        TotalTaxPercentage = item.TotalTaxPercentage,
        //                        IRPrice = item.Price,
        //                        CreatedBy = userid,
        //                        CreatedDate = indianTime,
        //                        ShortQty = item.CNShortQty,
        //                        DamageQty = item.CNDamageQty,
        //                        ExpiryQty = item.CNExpiryQty,
        //                        IsActive = true,
        //                        IsDeleted = false,
        //                        ItemMultiMRPId = item.ItemMultiMRPId,
        //                        ItemName = item.ItemName
        //                    });
        //                }
        //                IRM.IRCreditNoteMasters.Add(iRCreditNoteMaster);
        //            }

        //            context.IRMasterDB.Add(IRM);

        //            if (context.Commit() > 0)
        //            {
        //                pOResult.Status = true;
        //                pOResult.Message = "IR Submitted Successfully.";

        //            }
        //            else
        //            {
        //                pOResult.Status = false;
        //                pOResult.Message = "Issue during save IR detail.";
        //            }


        //        }
        //        else
        //        {
        //            pOResult.Status = false;
        //            pOResult.Message = "Validation- GR and IR Item count are mismatch,\nSo please try again after refresh the page.";

        //        }

        //    }

        //    return pOResult;
        //}

        [Route("AddIR")]
        [AcceptVerbs("POST")]
        public POResult AddIR(GetIRMasterDc iRMasterDc)
        {

            POResult pOResult = new POResult();


            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);


                List<GoodsReceivedItemDc> GoodsReceivedItemDcs = new List<GoodsReceivedItemDc>();
                if (context.Database.Connection.State != ConnectionState.Open)
                    context.Database.Connection.Open();

                var cmd = context.Database.Connection.CreateCommand();
                cmd.CommandText = "[dbo].[GetRemainningGRDetail]";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("PurchaseOrderId", iRMasterDc.PurchaseOrderId));

                // Run the sproc
                using (var reader = cmd.ExecuteReader())
                {

                    // GoodsReceivedItemDcs = ((IObjectContextAdapter)context)
                    //.ObjectContext
                    //.Translate<GoodsReceivedItemDc>(reader).ToList();

                    //to remove zero grn items duplicate
                    List<GoodsReceivedItemDc> GoodsReceivedItems = ((IObjectContextAdapter)context)
                    .ObjectContext
                    .Translate<GoodsReceivedItemDc>(reader).ToList();
                    foreach (var citem in iRMasterDc.IRItemDcs)
                    {
                        var gcItems = GoodsReceivedItems.Where(d => d.Id == citem.FinalGoodRecievedDetailId).FirstOrDefault();
                        if (gcItems != null && !GoodsReceivedItemDcs.Any(e => e.Id == gcItems.Id))
                        {
                            GoodsReceivedItemDcs.Add(gcItems);
                        }
                    }
                    foreach (var gitems in GoodsReceivedItems)
                    {
                        if (GoodsReceivedItemDcs != null && GoodsReceivedItemDcs.Any() && gitems.Qty == 0)
                        {
                            if (!GoodsReceivedItemDcs.Any(x => x.PurchaseOrderDetailId == gitems.PurchaseOrderDetailId && x.Qty == gitems.Qty && x.DamageQty == gitems.DamageQty && x.ExpiryQty == gitems.ExpiryQty))
                            {
                                GoodsReceivedItemDcs.Add(gitems);
                            }
                        }
                        else if (gitems.Qty > 0 && !GoodsReceivedItemDcs.Any(e => e.Id == gitems.Id))
                        {
                            GoodsReceivedItemDcs.Add(gitems);
                        }
                    }
                }
                if (GoodsReceivedItemDcs != null && GoodsReceivedItemDcs.Any())
                {
                    PurchaseOrderMaster poDetails = context.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == iRMasterDc.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();
                    var purchaseMaster = context.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId);
                    var maxIrSerialNumber = context.IRMasterDB.Where(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId).OrderByDescending(x => x.IrSerialNumber).FirstOrDefault()?.IrSerialNumber ?? 0;
                    People people = context.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();
                    bool IsGDNAllow = context.Warehouses.Where(x => x.WarehouseId == poDetails.WarehouseId).FirstOrDefault().IsGDNAllow;
                    // var gdnlist = context.GoodsDescripancyNoteMasterDB.Where(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId && x.IsGDNGenerate == true).Include(x => x.goodsDescripancyNoteDetail).ToList();



                    #region Gdn 


                    List<GoodsDescripancyNoteDetail> gdnitemlist = new List<GoodsDescripancyNoteDetail>();
                    List<GoodsDescripancyNoteDetail> updategdnlist = new List<GoodsDescripancyNoteDetail>();

                    List<long> gdnids = new List<long>();
                    foreach (var gdnit in iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0))
                    {
                        if (gdnit.GoodsDescripancyNoteDetailIds != null && gdnit.GoodsDescripancyNoteDetailIds.Count > 0 && gdnit.GoodsDescripancyNoteDetailIds.Any())
                        {
                            gdnids.AddRange(gdnit.GoodsDescripancyNoteDetailIds);
                        }
                    }

                    var grids = iRMasterDc.IRItemDcs.Select(x => x.FinalGoodRecievedDetailId).ToList();

                    bool GRGDNexists = grids.Any() ? context.GoodsDescripancyNoteDetailDB.Any(x => x.IsDebitNoteGenerated == false && grids.Contains(x.GoodsReceivedDetailId)) : false;

                    if (gdnids != null && gdnids.Any())
                    {
                        gdnitemlist = context.GoodsDescripancyNoteDetailDB.Where(x => gdnids.Contains(x.Id) && x.IsDebitNoteGenerated == false).ToList();
                        if (gdnitemlist != null && gdnitemlist.Any())
                        {
                            //iRMasterDc.IsDebitNoteGenerate = true;
                        }
                    }

                    foreach (var i in iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0))
                    {
                        if (i.GoodsDescripancyNoteDetails != null && i.GoodsDescripancyNoteDetails.Any() && gdnitemlist != null && gdnitemlist.Any())
                        {
                            if (i.GoodsDescripancyNoteDetailIds == null || !i.GoodsDescripancyNoteDetailIds.Any())
                            {
                                pOResult.Status = false;
                                pOResult.Message = "Please select GDN from checkbox for item " + i.ItemName;
                                return pOResult;
                            }
                        }
                    }

                    if (gdnids.Count == 0 && !gdnitemlist.Any() && IsGDNAllow == true && GRGDNexists)
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Please select at least one GDN from checkbox";
                        return pOResult;
                    }


                    //if (gdnids.Count == 0 && IsGDNAllow == true && GRGDNexists)
                    //{
                    //    var gndmater = context.GoodsDescripancyNoteMasterDB.Any(x => x.PurchaseOrderId == purchaseMaster.PurchaseOrderId && x.Status == "Pending");
                    //    if (gndmater)
                    //    {
                    //        pOResult.Status = false;
                    //        pOResult.Message = "Posted IR Failed Stoped due GDN is Pending.";
                    //        return pOResult;
                    //    }
                    //}

                    #endregion


                    IRMaster IRM = new IRMaster();
                    //IRM.TotalAmount = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(
                        iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a =>
                           ((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
                            + (((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
                               * (a.TotalCessPercentage + a.TotalTaxPercentage) / 100)
                      )
                       ), 2);
                    IRM.TotalAmountRemaining = IRM.TotalAmount;
                    IRM.IRAmountWithTax = IRM.TotalAmount;
                    IRM.Gstamt = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a => a.GSTAmount)), 2);
                    IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);

                    if (iRMasterDc.Discount == null)
                    {
                        iRMasterDc.Discount = 0;
                    }
                    else
                    {
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - iRMasterDc.Discount), 2);
                        IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
                        IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
                    }

                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.OtherAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.ExpenseAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.RoundofAmount ?? 0)), 2);
                    IRM.TotalAmountRemaining = IRM.TotalAmount;
                    IRM.Discount = Math.Round(Convert.ToDouble(iRMasterDc.Discount), 2);

                    double tdsper = 0;
                    string TDSdeducationDate = ConfigurationManager.AppSettings["TDSdeducationDate"];
                    DateTime CompairDate = Convert.ToDateTime(TDSdeducationDate, new CultureInfo("en-GB"));
                    DateTime InvoiceDate = Convert.ToDateTime(iRMasterDc.InvoiceDate, new CultureInfo("en-GB"));
                    if (InvoiceDate >= CompairDate)
                    {
                        var supplier = context.Suppliers.Where(x => x.SupplierId == purchaseMaster.SupplierId).FirstOrDefault(); //&& x.Active == true
                        if (supplier != null)
                        {
                            if (!string.IsNullOrEmpty(supplier.TINNo) || !string.IsNullOrEmpty(supplier.Pancard))
                            {
                                var param = new SqlParameter
                                {
                                    ParameterName = "Supplierid",
                                    Value = purchaseMaster.SupplierId
                                };
                                var data = context.Database.SqlQuery<double>("exec SP_GetTotalValuebySupplierId @Supplierid", param).FirstOrDefault();
                                if ((data + IRM.TotalAmount) <= 5000000)
                                {
                                    tdsper = 0;
                                    IRM.TotalTDSAmount = 0;
                                }
                                else
                                {
                                    //tdsper = 0.1;
                                    //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                                    if (data > 5000000)
                                    {
                                        tdsper = 0.1;
                                        IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                    }
                                    else if (data + IRM.TotalAmount > 5000000)
                                    {
                                        tdsper = 0.1;
                                        IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                    }
                                    else
                                    {
                                        tdsper = 0;
                                        IRM.TotalTDSAmount = 0;
                                    }
                                }
                                //tdsper = 0.1;
                            }
                            else
                            {
                                tdsper = 5;
                                IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                            }
                        }
                        else
                        {
                            tdsper = 5;
                            IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                        }
                        //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                        IRM.TotalRemainingTDSAmount = IRM.TotalTDSAmount;
                    }
                    //IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - (IRM.Discount ?? 0)), 2);
                    if (iRMasterDc.IsDraft)
                    {
                        IRM.IRStatus = "IR Posted as a Draft";
                        IRM.PaymentStatus = "Unpaid";
                    }
                    else
                    {
                        IRM.IRStatus = "IR Posted";
                        IRM.PaymentStatus = "Unpaid";
                    }
                    IRM.PurchaseOrderId = iRMasterDc.PurchaseOrderId;
                    IRM.supplierId = purchaseMaster.SupplierId;
                    IRM.SupplierName = purchaseMaster.SupplierName;
                    IRM.BuyerId = purchaseMaster.BuyerId;
                    IRM.BuyerName = purchaseMaster.BuyerName;
                    IRM.WarehouseId = purchaseMaster.WarehouseId;
                    IRM.CreationDate = DateTime.Now;
                    IRM.ExpenseAmount = iRMasterDc.ExpenseAmount;
                    IRM.OtherAmount = iRMasterDc.OtherAmount;
                    IRM.ExpenseAmountRemark = iRMasterDc.ExpenseAmountRemark;
                    IRM.OtherAmountRemark = iRMasterDc.OtherAmountRemark;
                    IRM.RoundofAmount = iRMasterDc.RoundofAmount;
                    IRM.ExpenseAmountType = iRMasterDc.ExpenseAmountType;
                    IRM.OtherAmountType = iRMasterDc.OtherAmountType;
                    IRM.RoundoffAmountType = iRMasterDc.RoundoffAmountType;
                    IRM.CreatedBy = people.DisplayName;
                    IRM.FreightAmount = iRMasterDc.FreightAmount;
                    IRM.InvoiceDate = iRMasterDc.InvoiceDate;
                    IRM.IRNNumber = iRMasterDc.IRNNumber;
                    if (iRMasterDc.DueDays > 0)
                    {
                        IRM.DueDays = iRMasterDc.DueDays;
                    }
                    else
                    {
                        IRM.DueDays = 0;
                    }

                    IRM.IRID = iRMasterDc.InvoiceNumber;//
                    IRM.InvoiceNumber = iRMasterDc.InvoiceNumber;
                    IRM.IRType = "IR" + (maxIrSerialNumber + 1);
                    IRM.IrSerialNumber = (maxIrSerialNumber + 1);
                    maxIrSerialNumber = (maxIrSerialNumber + 1);

                    IRM.wrongGRComment = iRMasterDc.wrongGRComment;

                    List<InvoiceReceiptDetail> invoiceReceiptDetails = new List<InvoiceReceiptDetail>();
                    List<GoodsReceivedItemDc> gRItems = new List<GoodsReceivedItemDc>();
                    foreach (var iRItemDc in iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0 && (x.ExpiryQty <= 0)))
                    {
                        var totalItemQty = iRItemDc.IRRemainingQuantity;
                        if (iRItemDc.TotalGRQuantity > 0)
                        {
                            gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty > 0 && x.IsFreeItem == iRItemDc.IsFreeItem).ToList();
                        }
                        else if (iRItemDc.TotalGRQuantity == 0)
                        {
                            gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty == 0 && x.IsFreeItem == iRItemDc.IsFreeItem).ToList();
                            //if (!gRItems.Any())
                            //{
                            //    gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty > 0 && x.IsFreeItem == iRItemDc.IsFreeItem).ToList();
                            //}
                        }

                        if (gRItems != null && gRItems.Any())
                        {
                            var alreadyIn = new HashSet<int>();
                            var DebitNoteAlreadyIn = new HashSet<int>();
                            foreach (var gRItem in gRItems)
                            {
                                if (iRItemDc.GoodsDescripancyNoteDetailIds != null)
                                {
                                    if (gdnitemlist.Count != 0 && gdnitemlist.Any(x => x.GoodsReceivedDetailId == gRItem.Id))
                                    {
                                        gRItem.DamageQty = gdnitemlist.FirstOrDefault(x => x.GoodsReceivedDetailId == gRItem.Id).DamageQty;
                                        gRItem.ExpiryQty = gdnitemlist.FirstOrDefault(x => x.GoodsReceivedDetailId == gRItem.Id).ExpiryQty;
                                    }
                                }
                                int qty = 0, cNShortQty = 0;
                                int DEIRExcludedquantity = 0;
                                InvoiceReceiptDetail iRItem = new InvoiceReceiptDetail();
                                if (gRItem.Qty > iRItemDc.IRRemainingQuantity)
                                {
                                    qty = iRItemDc.IRRemainingQuantity;
                                    gRItem.Qty = gRItem.Qty - iRItemDc.IRRemainingQuantity;
                                    iRItemDc.IRRemainingQuantity = 0;

                                }
                                else if (gRItem.Qty <= iRItemDc.IRRemainingQuantity)
                                {
                                    if (iRItemDc.TotalGRQuantity == 0)
                                    {
                                        qty = iRItemDc.IRRemainingQuantity;
                                    }
                                    else
                                    {

                                        if (iRItemDc.GoodsDescripancyNoteDetailIds != null && gdnitemlist.Any(x => x.GoodsReceivedDetailId == gRItem.Id))
                                        {
                                            qty = gRItem.Qty;
                                            var gdnit = gdnitemlist.Where(x => x.GoodsReceivedDetailId == gRItem.Id).FirstOrDefault();
                                            DEIRExcludedquantity = gdnit.DamageQty + gdnit.ExpiryQty + gdnit.ShortQty;
                                            qty += gdnit.DamageQty + gdnit.ExpiryQty + gdnit.ShortQty;
                                            iRItemDc.IRRemainingQuantity = iRItemDc.IRRemainingQuantity - gRItem.Qty;
                                            gRItem.Qty = 0;
                                        }
                                        else
                                        {
                                            // yaha code krna h 2 GR 1 IR

                                            if (alreadyIn.Add(gRItem.PurchaseOrderDetailId) && iRItemDc.CNShortQty > 0)
                                            {
                                                qty = gRItem.Qty + iRItemDc.CNShortQty;
                                                cNShortQty = iRItemDc.CNShortQty;
                                            }
                                            else
                                            {
                                                qty = gRItem.Qty;
                                            }
                                            // end 
                                            if (DebitNoteAlreadyIn.Add(gRItem.PurchaseOrderDetailId) && iRItemDc.CNShortQty > 0)
                                            {

                                                iRItemDc.IRRemainingQuantity = (iRItemDc.IRRemainingQuantity + gRItem.DamageQty + gRItem.ExpiryQty) - (gRItem.Qty + iRItemDc.CNShortQty);
                                                gRItem.Qty = 0;
                                            }
                                            else
                                            {
                                                iRItemDc.IRRemainingQuantity = (iRItemDc.IRRemainingQuantity + gRItem.DamageQty + gRItem.ExpiryQty) - (gRItem.Qty);
                                                gRItem.Qty = 0;
                                            }
                                        }
                                    }

                                }

                                double discountamt = 0;
                                if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
                                {
                                    discountamt = Convert.ToDouble((iRItemDc.DesA) / totalItemQty) * qty;
                                }
                                else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
                                {
                                    discountamt = qty * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
                                }
                                iRItem.FinalDiscountAmount = discountamt;
                                iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
                                iRItem.CreatedBy = userid;
                                iRItem.CreatedDate = DateTime.Now;
                                iRItem.DiscountAmount = iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0 ? discountamt : 0;
                                iRItem.DiscountPercent = iRItemDc.DesP;
                                iRItem.GoodsReceivedDetailId = gRItem.Id;
                                int QtyShortQty = 0;

                                iRItem.IRQuantity = qty;
                                QtyShortQty = qty;

                                iRItem.IsActive = true;
                                iRItem.IsDeleted = false;
                                iRItem.Price = iRItemDc.Price;
                                iRItem.Status = 1;
                                iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
                                iRItem.TotalTaxAmount = ((QtyShortQty * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
                                iRItem.CessTaxAmount = ((QtyShortQty * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
                                iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
                                iRItem.GSTAmount = iRItem.TotalTaxAmount;

                                if (DEIRExcludedquantity > 0 && gdnitemlist.Any(x => x.GoodsReceivedDetailId == gRItem.Id))
                                {
                                    iRItem.IRExcludedquantity = DEIRExcludedquantity;
                                }
                                else
                                {
                                    iRItem.IRExcludedquantity = cNShortQty; // iRItemDc.CNShortQty;
                                }
                                //iRItem.IRExcludedquantity = iRItemDc.CNShortQty > 0 ? iRItemDc.CNShortQty : 0;
                                iRItem.IsFreeItem = gRItem.IsFreeItem;
                                invoiceReceiptDetails.Add(iRItem);

                                #region validate  GDN Item

                                var checkgdn = gdnitemlist.Where(x => x.GoodsReceivedDetailId == iRItem.GoodsReceivedDetailId).FirstOrDefault();
                                if (checkgdn != null && !iRItemDc.GoodsDescripancyNoteDetailIds.Contains(checkgdn.Id))
                                {
                                    pOResult.Status = false;
                                    pOResult.Message = "Posted IR Stoped due to GDN is not checked by .";
                                    // return pOResult;
                                }
                                #endregion


                                if (iRItemDc.IRRemainingQuantity == 0)
                                    break;



                            }
                        }
                    }
                    IRM.InvoiceReceiptDetails = invoiceReceiptDetails;

                    context.IRMasterDB.Add(IRM);
                    context.Commit();
                    var irmid = IRM.Id;

                    if (iRMasterDc.IsIrExtendInvoiceDate == true)
                    {
                        IrExtendInvoiceDateApproval IrExtendInvoiceDateApprovals = new IrExtendInvoiceDateApproval();
                        var ExistId = context.IrExtendInvoiceDateApprovals.Any(x => x.IRMasterId == irmid && x.IsActive == true && x.IsDeleted == false);
                        if (!ExistId)
                        {
                            IrExtendInvoiceDateApprovals.IRMasterId = irmid;
                            IrExtendInvoiceDateApprovals.Status = "Pending";
                            IrExtendInvoiceDateApprovals.CreatedDate = indianTime;
                            IrExtendInvoiceDateApprovals.CreatedBy = userid;
                            IrExtendInvoiceDateApprovals.IsActive = true;
                            IrExtendInvoiceDateApprovals.IsDeleted = false;
                            context.IrExtendInvoiceDateApprovals.Add(IrExtendInvoiceDateApprovals);
                            context.Commit();
                        }
                    }

                    if (irmid > 0)
                    {
                        if (iRMasterDc.IRItemDcs.Any(x => x.CNShortQty > 0))
                        {


                            IRCreditNoteMaster iRCreditNoteMasters = new IRCreditNoteMaster();


                            iRCreditNoteMasters.CreatedBy = userid;
                            iRCreditNoteMasters.CreatedDate = indianTime;
                            iRCreditNoteMasters.CNForId = purchaseMaster.SupplierId;
                            iRCreditNoteMasters.CNForName = purchaseMaster.SupplierName;
                            iRCreditNoteMasters.IsActive = true;
                            iRCreditNoteMasters.IsDeleted = false;
                            iRCreditNoteMasters.CreditNoteNumber = iRMasterDc.CNNumber;
                            //iRCreditNoteMasters.CNNumber = result;
                            iRCreditNoteMasters.IsDebitNoteGenerate = iRMasterDc.IsShortDebitNoteGenerate;
                            iRCreditNoteMasters.Type = 2;
                            iRCreditNoteMasters.IRMasterId = irmid;
                            iRCreditNoteMasters.CreditNoteAmount = iRMasterDc.CreditNoteAmount;
                            iRCreditNoteMasters.CreditNoteDate = iRMasterDc.CreditNoteDate;
                            context.IRCreditNoteMaster.Add(iRCreditNoteMasters);
                            context.Commit();
                            var ircreditid = iRCreditNoteMasters.Id;

                            foreach (var item in iRMasterDc.IRItemDcs.Where(x => x.CNShortQty > 0))
                            {
                                double discountamt = 0; int IRqty = 0;
                                var InvoicereceiptdetailsData = invoiceReceiptDetails.Where(y => y.GoodsReceivedDetailId == item.GoodsReceivedDetailId).FirstOrDefault();
                                if (InvoicereceiptdetailsData != null)
                                {
                                    discountamt = InvoicereceiptdetailsData.FinalDiscountAmount;
                                    IRqty = InvoicereceiptdetailsData.IRQuantity;
                                }


                                if (discountamt > 0)
                                {
                                    discountamt = (discountamt / IRqty) * (item.CNShortQty);
                                }

                                IRCreditNoteDetail irdetail = new IRCreditNoteDetail();

                                irdetail.CessTaxPercentage = item.TotalCessPercentage;
                                irdetail.TotalTaxPercentage = item.TotalTaxPercentage;
                                irdetail.IRPrice = item.Price;
                                irdetail.CreatedBy = userid;
                                irdetail.CreatedDate = indianTime;
                                irdetail.ShortQty = item.CNShortQty;
                                irdetail.DamageQty = 0;
                                irdetail.ExpiryQty = 0;
                                irdetail.IsActive = true;
                                irdetail.IsDeleted = false;
                                irdetail.ItemMultiMRPId = item.ItemMultiMRPId;
                                irdetail.ItemName = item.ItemName;
                                irdetail.IsFreeItem = item.IsFreeItem;
                                irdetail.Discount = discountamt;
                                irdetail.IRCreditNoteMasterId = ircreditid;
                                context.IRCreditNoteDetail.Add(irdetail);
                                context.Commit();

                                #region
                                if (item.GoodsDescripancyNoteDetailIds != null && item.GoodsDescripancyNoteDetailIds.Any())
                                {
                                    var isf = gdnitemlist.Where(x => item.GoodsDescripancyNoteDetailIds.Contains(x.Id)).ToList();
                                    if (isf != null)
                                    {
                                        updategdnlist.AddRange(isf);
                                    }
                                }
                                #endregion

                            }

                            //if (updategdnlist != null && updategdnlist.Any())
                            //{
                            //    foreach (var gitem in updategdnlist)
                            //    {
                            //        gitem.IsDebitNoteGenerated = true;
                            //        gitem.ModifiedDate = indianTime;
                            //        gitem.ModifiedBy = userid;
                            //        context.Entry(gitem).State = EntityState.Modified;
                            //    }
                            //}
                        }
                        if (iRMasterDc.IRItemDcs.Any(x => x.CNDamageQty > 0))
                        {
                            //IRMaster irmm = new IRMaster();
                            //irmm.IRCreditNoteMasters = new List<IRCreditNoteMaster>();

                            //IRCreditNoteMaster iRCreditNoteMaster = new IRCreditNoteMaster
                            //{
                            //    CreatedBy = userid,
                            //    CreatedDate = indianTime,
                            //    CNForId = purchaseMaster.SupplierId,
                            //    CNForName = purchaseMaster.SupplierName,
                            //    IsActive = true,
                            //    IsDeleted = false,
                            //    CNNumber = iRMasterDc.CNNumber,
                            //    IsDebitNoteGenerate = iRMasterDc.IsDamageDebitNoteGenerate,
                            //    Type = 1,
                            //    IRCreditNoteDetails = new List<IRCreditNoteDetail>()
                            //};


                            IRCreditNoteMaster iRCreditNoteMasters = new IRCreditNoteMaster();


                            iRCreditNoteMasters.CreatedBy = userid;
                            iRCreditNoteMasters.CreatedDate = indianTime;
                            iRCreditNoteMasters.CNForId = purchaseMaster.SupplierId;
                            iRCreditNoteMasters.CNForName = purchaseMaster.SupplierName;
                            iRCreditNoteMasters.IsActive = true;
                            iRCreditNoteMasters.IsDeleted = false;
                            iRCreditNoteMasters.CreditNoteNumber = iRMasterDc.CNNumber;
                            //iRCreditNoteMasters.CNNumber = result;
                            //iRCreditNoteMasters.CNNumber = iRMasterDc.CNNumber;
                            iRCreditNoteMasters.IsDebitNoteGenerate = iRMasterDc.IsDamageDebitNoteGenerate;
                            iRCreditNoteMasters.Type = 1;
                            iRCreditNoteMasters.IRMasterId = irmid;
                            iRCreditNoteMasters.CreditNoteAmount = iRMasterDc.CreditNoteAmount;
                            iRCreditNoteMasters.CreditNoteDate = iRMasterDc.CreditNoteDate;
                            context.IRCreditNoteMaster.Add(iRCreditNoteMasters);
                            context.Commit();
                            var ircreditid = iRCreditNoteMasters.Id;

                            foreach (var item in iRMasterDc.IRItemDcs.Where(x => x.CNDamageQty > 0))
                            {
                                double discountamt = 0; int IRqty = 0;
                                var InvoicereceiptdetailsData = invoiceReceiptDetails.Where(y => y.GoodsReceivedDetailId == item.GoodsReceivedDetailId).FirstOrDefault();
                                if (InvoicereceiptdetailsData != null)
                                {
                                    discountamt = InvoicereceiptdetailsData.FinalDiscountAmount;
                                    IRqty = InvoicereceiptdetailsData.IRQuantity;
                                }

                                if (discountamt > 0)
                                {
                                    discountamt = (discountamt / IRqty) * (item.CNDamageQty);
                                }

                                IRCreditNoteDetail irdetail = new IRCreditNoteDetail();

                                irdetail.CessTaxPercentage = item.TotalCessPercentage;
                                irdetail.TotalTaxPercentage = item.TotalTaxPercentage;
                                irdetail.IRPrice = item.Price;
                                irdetail.CreatedBy = userid;
                                irdetail.CreatedDate = indianTime;
                                irdetail.ShortQty = 0;
                                irdetail.DamageQty = item.CNDamageQty;
                                irdetail.ExpiryQty = 0;
                                irdetail.IsActive = true;
                                irdetail.IsDeleted = false;
                                irdetail.ItemMultiMRPId = item.ItemMultiMRPId;
                                irdetail.ItemName = item.ItemName;
                                irdetail.IsFreeItem = item.IsFreeItem;
                                irdetail.Discount = discountamt;
                                irdetail.IRCreditNoteMasterId = ircreditid;
                                context.IRCreditNoteDetail.Add(irdetail);
                                context.Commit();

                                //iRCreditNoteMaster.IRCreditNoteDetails.Add(new IRCreditNoteDetail
                                //{
                                //    CessTaxPercentage = item.TotalCessPercentage,
                                //    TotalTaxPercentage = item.TotalTaxPercentage,
                                //    IRPrice = item.Price,
                                //    CreatedBy = userid,
                                //    CreatedDate = indianTime,
                                //    ShortQty = 0,
                                //    DamageQty = item.CNDamageQty,
                                //    ExpiryQty = 0,
                                //    IsActive = true,
                                //    IsDeleted = false,
                                //    ItemMultiMRPId = item.ItemMultiMRPId,
                                //    ItemName = item.ItemName,
                                //    IsFreeItem = item.IsFreeItem,
                                //    Discount = discountamt
                                //});

                                #region
                                if (item.GoodsDescripancyNoteDetailIds != null && item.GoodsDescripancyNoteDetailIds.Any())
                                {
                                    var isf = gdnitemlist.Where(x => item.GoodsDescripancyNoteDetailIds.Contains(x.Id)).ToList();
                                    if (isf != null)
                                    {
                                        updategdnlist.AddRange(isf);
                                    }
                                }
                                #endregion

                            }
                            //irmm.IRCreditNoteMasters.Add(iRCreditNoteMaster);
                            //context.IRMasterDB.Add(irmm);
                            //context.Commit();
                            //if (updategdnlist != null && updategdnlist.Any())
                            //{
                            //    foreach (var gitem in updategdnlist)
                            //    {
                            //        gitem.IsDebitNoteGenerated = true;
                            //        gitem.ModifiedDate = indianTime;
                            //        gitem.ModifiedBy = userid;
                            //        context.Entry(gitem).State = EntityState.Modified;
                            //    }
                            //}
                        }
                        if (iRMasterDc.IRItemDcs.Any(x => x.ExpiryQty > 0))
                        {
                            //IRMaster irmm = new IRMaster();
                            //irmm.IRCreditNoteMasters = new List<IRCreditNoteMaster>();

                            //IRCreditNoteMaster iRCreditNoteMaster = new IRCreditNoteMaster
                            //{
                            //    CreatedBy = userid,
                            //    CreatedDate = indianTime,
                            //    CNForId = purchaseMaster.SupplierId,
                            //    CNForName = purchaseMaster.SupplierName,
                            //    IsActive = true,
                            //    IsDeleted = false,
                            //    CNNumber = iRMasterDc.CNNumber,
                            //    IsDebitNoteGenerate = iRMasterDc.IsExcessDebitNoteGenerate,
                            //    Type = 3,
                            //    IRCreditNoteDetails = new List<IRCreditNoteDetail>()
                            //};
                            IRCreditNoteMaster iRCreditNoteMasters = new IRCreditNoteMaster();


                            iRCreditNoteMasters.CreatedBy = userid;
                            iRCreditNoteMasters.CreatedDate = indianTime;
                            iRCreditNoteMasters.CNForId = purchaseMaster.SupplierId;
                            iRCreditNoteMasters.CNForName = purchaseMaster.SupplierName;
                            iRCreditNoteMasters.IsActive = true;
                            iRCreditNoteMasters.IsDeleted = false;
                            iRCreditNoteMasters.CreditNoteNumber = iRMasterDc.CNNumber;
                            //iRCreditNoteMasters.CNNumber = result;
                            //iRCreditNoteMasters.CNNumber = iRMasterDc.CNNumber;
                            iRCreditNoteMasters.IsDebitNoteGenerate = iRMasterDc.IsExcessDebitNoteGenerate;
                            iRCreditNoteMasters.Type = 3;
                            iRCreditNoteMasters.IRMasterId = irmid;
                            iRCreditNoteMasters.CreditNoteAmount = iRMasterDc.CreditNoteAmount;
                            iRCreditNoteMasters.CreditNoteDate = iRMasterDc.CreditNoteDate;
                            context.IRCreditNoteMaster.Add(iRCreditNoteMasters);
                            context.Commit();
                            var ircreditid = iRCreditNoteMasters.Id;

                            foreach (var item in iRMasterDc.IRItemDcs.Where(x => x.ExpiryQty > 0))
                            {
                                //double discountamt = 0;
                                //var InvoicereceiptdetailsData = invoiceReceiptDetails.Where(y => y.GoodsReceivedDetailId == item.FinalGoodRecievedDetailId).FirstOrDefault();

                                //discountamt = invoiceReceiptDetails.Where(y => y.GoodsReceivedDetailId == item.FinalGoodRecievedDetailId).Select(z => z.FinalDiscountAmount).FirstOrDefault();


                                //int IRqty = invoiceReceiptDetails.Where(y => y.GoodsReceivedDetailId == item.FinalGoodRecievedDetailId).Select(z => z.IRQuantity).FirstOrDefault();

                                //if (discountamt > 0)
                                //{
                                //    discountamt = (discountamt / IRqty) * (item.CNShortQty + item.CNDamageQty + item.CNExpiryQty);
                                //}

                                //iRCreditNoteMaster.IRCreditNoteDetails.Add(new IRCreditNoteDetail
                                //{
                                //    CessTaxPercentage = item.TotalCessPercentage,
                                //    TotalTaxPercentage = item.TotalTaxPercentage,
                                //    IRPrice = item.Price,
                                //    CreatedBy = userid,
                                //    CreatedDate = indianTime,
                                //    ShortQty = 0,
                                //    DamageQty = 0,
                                //    ExpiryQty = item.CNExpiryQty,
                                //    IsActive = true,
                                //    IsDeleted = false,
                                //    ItemMultiMRPId = item.ItemMultiMRPId,
                                //    ItemName = item.ItemName,
                                //    Discount = item.CashDiscount
                                //});


                                IRCreditNoteDetail irdetail = new IRCreditNoteDetail();

                                irdetail.CessTaxPercentage = item.TotalCessPercentage;
                                irdetail.TotalTaxPercentage = item.TotalTaxPercentage;
                                irdetail.IRPrice = item.Price;
                                irdetail.CreatedBy = userid;
                                irdetail.CreatedDate = indianTime;
                                irdetail.ShortQty = 0;
                                irdetail.DamageQty = 0;
                                irdetail.ExpiryQty = item.ExpiryQty;
                                irdetail.IsActive = true;
                                irdetail.IsDeleted = false;
                                irdetail.ItemMultiMRPId = item.ItemMultiMRPId;
                                irdetail.ItemName = item.ItemName;
                                irdetail.IsFreeItem = item.IsFreeItem;
                                irdetail.Discount = item.CashDiscount;
                                irdetail.IRCreditNoteMasterId = ircreditid;
                                context.IRCreditNoteDetail.Add(irdetail);
                                context.Commit();


                                #region
                                //if (item.GoodsDescripancyNoteDetailIds != null && item.GoodsDescripancyNoteDetailIds.Any())
                                //{
                                //    var isf = gdnitemlist.Where(x => item.GoodsDescripancyNoteDetailIds.Contains(x.Id)).ToList();
                                //    if (isf != null)
                                //    {
                                //        updategdnlist.AddRange(isf);
                                //    }
                                //}
                                #endregion

                            }
                            //irmm.IRCreditNoteMasters.Add(iRCreditNoteMaster);
                            //context.IRMasterDB.Add(irmm);
                            //context.Commit();
                            if (updategdnlist != null && updategdnlist.Any())
                            {
                                foreach (var gitem in updategdnlist)
                                {
                                    gitem.IsDebitNoteGenerated = true;
                                    gitem.ModifiedDate = indianTime;
                                    gitem.ModifiedBy = userid;
                                    context.Entry(gitem).State = EntityState.Modified;
                                }
                            }
                        }
                    }


                    context.IRMasterDB.Add(IRM);

                    if (irmid > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Submitted Successfully.";

                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Issue during save IR detail.";
                    }


                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "Validation- GR and IR Item count are mismatch,\nSo please try again after refresh the page.";

                }

            }

            return pOResult;

        }


        [Route("UpdateIRCN")]
        [HttpPost]
        public POResult UpdateIRCN(IRCreditNoteMasterDc iRCreditNoteMasterDc)
        {
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {
                var IRCN = context.IRCreditNoteMaster.FirstOrDefault(a => a.Id == iRCreditNoteMasterDc.Id);
                if (IRCN != null)
                {
                    IRCN.Comment = iRCreditNoteMasterDc.Comment;
                    IRCN.CNNumber = iRCreditNoteMasterDc.CNNumber;
                    IRCN.CNForId = iRCreditNoteMasterDc.CNForId;
                    IRCN.CNForName = iRCreditNoteMasterDc.CNForName;
                    IRCN.ModifiedBy = userid;
                    IRCN.ModifiedDate = DateTime.Now;
                    context.Entry(IRCN).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "Credit Note Generated Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during Generated Credit Note.";
                    }
                }
            }
            return pOResult;
        }

        [Route("addIRReceipt")]
        [AcceptVerbs("POST")]
        public POResult addIRReceipt(InvoiceImageDc IRInvoice)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);


                if (IRInvoice != null)
                {
                    PurchaseOrderMaster pm = context.DPurchaseOrderMaster.Where(q => q.PurchaseOrderId == IRInvoice.PurchaseOrderId).SingleOrDefault();
                    pm.IrStatus = "IR Uploaded";
                    context.Entry(pm).State = EntityState.Modified;

                    IRMaster ir = context.IRMasterDB.Where(a => a.Id == IRInvoice.IRMasterId).SingleOrDefault();
                    ir.IRStatus = "IR Uploaded";
                    ir.Remark = IRInvoice.Remark;
                    context.Entry(ir).State = EntityState.Modified;


                    var invoice = context.InvoiceImageDb.FirstOrDefault(x => x.PurchaseOrderId == IRInvoice.PurchaseOrderId && x.InvoiceNumber == IRInvoice.InvoiceNumber);
                    if (invoice != null && invoice.Id > 0)
                    {
                        invoice.IRAmount = IRInvoice.IRAmount;
                        invoice.IRLogoURL = IRInvoice.IRLogoURL;
                        invoice.InvoiceDate = IRInvoice.InvoiceDate;
                        invoice.Remark = IRInvoice.Remark;
                        context.Entry(invoice).State = EntityState.Modified;
                    }
                    else
                    {
                        invoice = new InvoiceImage
                        {
                            Id = IRInvoice.Id,
                            InvoiceNumber = IRInvoice.InvoiceNumber,
                            PurchaseOrderId = IRInvoice.PurchaseOrderId,
                            WarehouseId = pm.WarehouseId,
                            IRAmount = IRInvoice.IRAmount,
                            IRLogoURL = IRInvoice.IRLogoURL,
                            InvoiceDate = IRInvoice.InvoiceDate,
                            SupplierId = pm.SupplierId,
                            SupplierName = pm.SupplierName,
                            Remark = IRInvoice.Remark,
                            CompanyId = compid,
                            CreationDate = indianTime
                        };

                        context.InvoiceImageDb.Add(invoice);
                    }

                    if (context.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Receipt Save Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during save IR receipt.";
                    }
                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "Please add IR Receipt.";
                }



            }

            return pOResult;
        }


        [Route("sendtoapp")]
        [AcceptVerbs("POST")]
        public POResult sendtoapp(IRMaster pom)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);


                PurchaseOrderMaster pm = context.DPurchaseOrderMaster.Where(q => q.PurchaseOrderId == pom.PurchaseOrderId).SingleOrDefault();
                pm.IrStatus = "pending";
                context.Entry(pm).State = EntityState.Modified;

                IRMaster irm = context.IRMasterDB.Where(q => q.Id == pom.Id && q.PurchaseOrderId == pom.PurchaseOrderId).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                if (irm != null)
                {
                    irm.IRStatus = "Pending from Buyer side";
                    context.Entry(irm).State = EntityState.Modified;
                }
                #region Assign to Brand Buyers
                //PurchaseOrderMaster podetail = context.DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == pom.PurchaseOrderId).Include(x => x.PurchaseOrderDetail).SingleOrDefault();
                string query = "select distinct i.SubsubCategoryid,i.SubsubcategoryName,br.BuyerId from InvoiceReceiptDetails a inner join GoodsReceivedDetails b on a.GoodsReceivedDetailId=b.Id and a.IsActive=1  and a.IRMasterId=" + irm.Id + " inner join PurchaseOrderDetails c on b.PurchaseOrderDetailId=c.PurchaseOrderDetailId inner join ItemMasters i on c.ItemId=i.ItemId inner join BrandBuyers br on i.SubsubCategoryid=br.BrandId and i.WarehouseId=br.WarehosueId and br.Active=1 ";
                var BuyerWithBrands = context.Database.SqlQuery<BuyerWithBrand>(query).ToList();
                //var grids= irm.InvoiceReceiptDetails.Where(x=>x.IsActive).Select(x => x.GoodsReceivedDetailId);
                //var GRs= context.GoodsReceivedDetail.Where(x => grids.Contains(x.Id)).Include(x => x.PurchaseOrderDetail).ToList();
                //var itemIds = GRs.Select(x => x.PurchaseOrderDetail.ItemId); //podetail.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                //var SubsubCategoryids = context.itemMasters.Where(z => itemIds.Contains(z.ItemId)).Select(x => x.SubsubCategoryid).Distinct().ToList();              
                //List<BuyerMinDc> BDs = context.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                if (BuyerWithBrands != null && BuyerWithBrands.Any())
                {
                    foreach (var BD in BuyerWithBrands)
                    {
                        var ActivePeople = context.Peoples.Where(x => x.PeopleID == BD.BuyerId && x.Active == true).FirstOrDefault();
                        var WarePermission = context.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.BuyerId && x.IsDeleted == false).FirstOrDefault();
                        if (ActivePeople != null && WarePermission != null)
                        {
                            var iRStatus = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId && x.BuyerId == BD.BuyerId && x.IRMasterId == pom.Id).FirstOrDefault();
                            if (iRStatus == null)
                            {
                                IRApprovalStatus iR = new IRApprovalStatus();
                                iR.BuyerId = BD != null ? BD.BuyerId : 0;
                                iR.PurchaseOrderId = irm.PurchaseOrderId;
                                iR.IsApprove = 0;
                                iR.IsActive = true;
                                iR.IRMasterId = irm.Id;
                                iR.CreatedDate = DateTime.Now;
                                iR.ModifiedDate = DateTime.Now;
                                context.IRApprovalStatus.Add(iR);
                                context.Commit();
                            }

                            pOResult.Status = true;
                        }
                    }

                }
                else
                {
                    IRApprovalStatus iR = new IRApprovalStatus();
                    iR.BuyerId = irm.BuyerId.Value;
                    iR.PurchaseOrderId = irm.PurchaseOrderId;
                    iR.IsApprove = 0;
                    iR.IsActive = true;
                    iR.IRMasterId = irm.Id;
                    iR.CreatedDate = DateTime.Now;
                    iR.ModifiedDate = DateTime.Now;
                    context.IRApprovalStatus.Add(iR);
                    context.Commit();
                    pOResult.Status = true;
                }

                #endregion
                if (pOResult.Status == true)
                {
                    pOResult.Status = true;
                    pOResult.Message = "IR Send For approval Successfully.";
                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "Data not update.";
                }

            }
            return pOResult;
        }

        [Authorize]
        [Route("GetIRRec")]
        public List<InvoiceImage> GetIRRec(string id, int Poid)//get data from invoice image behalf of irid and poid
        {
            using (var context = new AuthContext())
            {
                List<InvoiceImage> IRRec = new List<InvoiceImage>();

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                int Warehouseid = 0;
                // Access claims
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouseid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                IRRec = context.InvoiceImageDb.Where(q => q.InvoiceNumber == id && q.PurchaseOrderId == Poid && q.IsActive == true).ToList();

                return IRRec;
            }
        }

        [Route("EditIR")]
        [HttpGet]
        public IRMasterDc EditIR(long id)
        {
            var IRMasterDc = new IRMasterDc();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (var db = new AuthContext())
            {
                var IrMasters = db.IRMasterDB.Where(x => x.Id == id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                if (IrMasters != null)
                {
                    var IRCN = db.IRCreditNoteMaster.Where(a => a.IRMasterId == IrMasters.Id && a.IsActive && (!a.IsDeleted.HasValue || !a.IsDeleted.Value)).Include(x => x.IRCreditNoteDetails).ToList();
                    List<IRCreditNoteMasterDc> iRCreditNoteMasterDcs = Mapper.Map(IRCN).ToANew<List<IRCreditNoteMasterDc>>();
                    iRCreditNoteMasterDcs.ForEach(x => x.IRCreditNoteDetails = x.IRCreditNoteDetails.Where(y => (!y.IsDeleted.HasValue || !y.IsDeleted.Value) && y.IsActive).ToList());



                    var GRIds = IrMasters.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).Select(x => x.GoodsReceivedDetailId);
                    var Gr = db.GoodsReceivedDetail.Where(x => GRIds.Contains(x.Id) && x.IsDeleted == false).Include(x => x.PurchaseOrderDetail).ToList();

                    if (Gr != null && Gr.Any())
                    {


                        //List<GoodsReceivedItemDc> RemainingGRItemDcs = new List<GoodsReceivedItemDc>();
                        //if (db.Database.Connection.State != ConnectionState.Open)
                        //    db.Database.Connection.Open();

                        //var cmd = db.Database.Connection.CreateCommand();
                        //cmd.CommandText = "[dbo].[GetRemainningGRDetail]";
                        //cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        //cmd.Parameters.Add(new SqlParameter("PurchaseOrderId", IrMasters.PurchaseOrderId));
                        //using (var reader = cmd.ExecuteReader())
                        //{
                        //    RemainingGRItemDcs = ((IObjectContextAdapter)db)
                        //    .ObjectContext
                        //    .Translate<GoodsReceivedItemDc>(reader).ToList();
                        //}

                        //List<ItemClassificationDC> ABCitemsList = Gr.Select(item => new ItemClassificationDC { ItemNumber = item.PurchaseOrderDetail.ItemNumber, WarehouseId = item.PurchaseOrderDetail.WarehouseId.Value }).ToList();

                        //var manager = new ItemLedgerManager();
                        //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                        var warehouseId = Gr.FirstOrDefault().PurchaseOrderDetail.WarehouseId;

                        var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                        List<ItemWithMRPDc> items = new List<ItemWithMRPDc>();
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();

                        var orderIdDt = new DataTable();
                        orderIdDt.Columns.Add("IntValue");
                        foreach (var item in itemMultiMRPIds)
                        {
                            var dr = orderIdDt.NewRow();
                            dr["IntValue"] = item;
                            orderIdDt.Rows.Add(dr);
                        }
                        var param = new SqlParameter("itemMultiMRPIds", orderIdDt);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.IntValues";
                        var cmd = db.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[GetItemWithMRPDetail]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add(param);
                        cmd.Parameters.Add(new SqlParameter("warehouseId", warehouseId));

                        // Run the sproc
                        using (var reader = cmd.ExecuteReader())
                        {
                            items = ((IObjectContextAdapter)db)
                            .ObjectContext
                            .Translate<ItemWithMRPDc>(reader).ToList();
                        }


                        int? DepoId = db.DPurchaseOrderMaster.FirstOrDefault(a => a.PurchaseOrderId == IrMasters.PurchaseOrderId).DepoId;
                        if (DepoId.HasValue && DepoId > 0)
                        {
                            DepoMaster DepoDetail = db.DepoMasters.Where(a => a.DepoId == DepoId.Value).SingleOrDefault();

                            //for igst case if true then apply condion to hide column of cgst sgst cess
                            if (!string.IsNullOrEmpty(DepoDetail.GSTin) && DepoDetail.GSTin.Length >= 11)
                            {
                                string DepoTin_No = DepoDetail.GSTin.Substring(0, 2);
                                IRMasterDc.IsIgstIR = !db.Warehouses.Any(x => x.GSTin != null && x.WarehouseId == warehouseId && x.GSTin.Substring(0, 2) == DepoTin_No);

                            }
                        }


                        var InvoiceDetails = IrMasters != null ? IrMasters.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive) : new List<InvoiceReceiptDetail>();
                        List<IRItemDc> IRItemDcs = new List<IRItemDc>();
                        foreach (var item in InvoiceDetails)
                        {
                            IRItemDc iRItemDc = new IRItemDc();
                            var grItem = Gr.FirstOrDefault(x => x.Id == item.GoodsReceivedDetailId);
                            iRItemDc.IRItemId = item.Id;
                            iRItemDc.DamageQty = grItem.DamageQty;
                            iRItemDc.ExpiryQty = grItem.ExpiryQty;
                            iRItemDc.Price = item.Price;
                            iRItemDc.Qty = grItem.Qty;
                            iRItemDc.IRQuantity = item.IRQuantity;
                            iRItemDc.ItemMultiMRPId = grItem.ItemMultiMRPId;
                            iRItemDc.ItemName = grItem.PurchaseOrderDetail.ItemName;
                            iRItemDc.Itemnumber = grItem.PurchaseOrderDetail.ItemNumber;
                            iRItemDc.HSNCode = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).HSNCode : "";
                            iRItemDc.TotalCessPercentage = item.CessTaxPercentage ?? 0;
                            iRItemDc.TotalTaxPercentage = item.TotalTaxPercentage;
                            iRItemDc.MRP = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).MRP : 0;
                            iRItemDc.distype = item.DiscountPercent > 0 ? "Percent" : (item.DiscountAmount > 0 ? "Amount" : "");
                            iRItemDc.DesA = item.DiscountAmount;
                            iRItemDc.DesP = item.DiscountPercent;
                            iRItemDc.IsFreeItem = item.IsFreeItem;
                            if (IRItemDcs.Any(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem))
                            {
                                IRItemDcs.FirstOrDefault(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem).DamageQty += iRItemDc.DamageQty;
                                IRItemDcs.FirstOrDefault(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem).ExpiryQty += iRItemDc.ExpiryQty;
                                IRItemDcs.FirstOrDefault(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem).IRQuantity += iRItemDc.IRQuantity;
                                // new code for added qty in edit for 2 gr
                                IRItemDcs.FirstOrDefault(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.IsFreeItem == iRItemDc.IsFreeItem).DesA += iRItemDc.DesA;

                            }
                            else
                            {
                                IRItemDcs.Add(iRItemDc);
                            }
                            // iRItemDc.Category = GetItem.Where(q => q.ItemNumber == items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).Number).Select(q => q.Category).FirstOrDefault() != null ? GetItem.Where(q => q.ItemNumber == items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).Number).Select(q => q.Category).FirstOrDefault() : "D";
                            iRItemDc.Category = grItem.PurchaseOrderDetail.Category;
                        }

                        IRItemDcs.ForEach(x =>
                        {
                            //if (RemainingGRItemDcs != null && RemainingGRItemDcs.Any(y => y.ItemMultiMRPId == x.ItemMultiMRPId && y.IsFreeItem == x.IsFreeItem))
                            //{
                            //    var qty = RemainingGRItemDcs.Where(y => y.ItemMultiMRPId == y.ItemMultiMRPId && y.IsFreeItem == x.IsFreeItem).Sum(y => y.Qty);
                            //    qty += x.IRQuantity;
                            //    x.IRRemainingQuantity = qty;
                            //}
                            //else
                            //{
                            x.IRRemainingQuantity = x.IRQuantity;
                            // }
                            double discountamt = 0;

                            if (x.DesA.HasValue && x.DesA.Value > 0)
                                discountamt = Convert.ToDouble(x.DesA.Value);
                            else if (x.DesP.HasValue && x.DesP.Value > 0)
                            {
                                discountamt = x.IRRemainingQuantity * x.Price * Convert.ToDouble(x.DesP) / 100;
                            }
                            x.CESSAmount = x.TotalCessPercentage > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * x.TotalCessPercentage / 100 : 0;
                            x.CGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.SGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.GSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * x.TotalTaxPercentage / 100 : 0;
                            x.TaxableAmount = x.IRRemainingQuantity > 0 ? (x.Price * x.IRRemainingQuantity - discountamt) : 0;
                            x.TotalAmount = x.TaxableAmount + x.GSTAmount + x.CESSAmount;
                        });
                        IRMasterDc.IRSerialNumber = IrMasters.IrSerialNumber;
                        IRMasterDc.PurchaseOrderId = IrMasters.PurchaseOrderId;
                        IRMasterDc.Id = IrMasters.Id;
                        IRMasterDc.distype = "Amount";
                        IRMasterDc.DesA = IrMasters.Discount;
                        IRMasterDc.DesP = 0;
                        IRMasterDc.DueDays = IrMasters.DueDays;
                        IRMasterDc.ExpenseAmount = IrMasters.ExpenseAmount;
                        IRMasterDc.ExpenseAmountRemark = IrMasters.ExpenseAmountRemark;
                        IRMasterDc.FreightAmount = IrMasters.FreightAmount;
                        IRMasterDc.OtherAmount = IrMasters.OtherAmount;
                        IRMasterDc.OtherAmountRemark = IrMasters.OtherAmountRemark;
                        IRMasterDc.RoundofAmount = IrMasters.RoundofAmount;
                        IRMasterDc.InvoiceNumber = IrMasters.IRID;
                        IRMasterDc.IRNNumber = IrMasters.IRNNumber;
                        IRMasterDc.IRStatus = IrMasters.IRStatus;
                        // IRMasterDc.BillAmount = IrMasters.TotalAmount;
                        IRMasterDc.IRItemDcs = IRItemDcs;

                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount - IRMasterDc.DesA), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.OtherAmount ?? 0)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.ExpenseAmount ?? 0)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.RoundofAmount ?? 0)), 2);
                        double am = Gettotalexcessamount(id);
                        IRMasterDc.BillAmount += am;
                        IRMasterDc.IRCreditNoteMasterDcs = iRCreditNoteMasterDcs.Where(y => y.IRMasterId == IRMasterDc.Id).ToList();//for short qty credit note

                        IRMasterDc.InvoiceDate = db.IRMasterDB.Where(x => x.Id == id).Select(x => x.InvoiceDate).FirstOrDefault();
                    }
                }
            }
            return IRMasterDc;
        }

        [Route("UpdateIR")]
        [AcceptVerbs("POST")]
        public POResult UpdateIR(GetIRMasterDc iRMasterDc)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                IRMaster IRM = context.IRMasterDB.Where(x => x.Id == iRMasterDc.Id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();

                if (iRMasterDc.IsIrExtendInvoiceDate == true)
                {
                    IrExtendInvoiceDateApproval IrExtendInvoiceDateApprovals = new IrExtendInvoiceDateApproval();
                    var ExistId = context.IrExtendInvoiceDateApprovals.Where(x => x.IRMasterId == IRM.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    if (ExistId == null)
                    {
                        IrExtendInvoiceDateApprovals.IRMasterId = IRM.Id;
                        IrExtendInvoiceDateApprovals.Status = "Pending";
                        IrExtendInvoiceDateApprovals.CreatedDate = indianTime;
                        IrExtendInvoiceDateApprovals.CreatedBy = userid;
                        IrExtendInvoiceDateApprovals.IsActive = true;
                        IrExtendInvoiceDateApprovals.IsDeleted = false;
                        context.IrExtendInvoiceDateApprovals.Add(IrExtendInvoiceDateApprovals);
                        context.Commit();
                    }
                    var irId = context.IRMasterDB.Where(x => x.Id == IRM.Id).FirstOrDefault();
                    if (irId != null)
                    {
                        irId.InvoiceDate = iRMasterDc.InvoiceDate;
                        context.Entry(irId).State = EntityState.Modified;
                    }
                }


                if (IRM != null)
                {

                    List<GetIrQuantityDC> GetIrQuantity = new List<GetIrQuantityDC>();
                    List<GoodsReceivedItemDc> GoodsReceivedItemDcs = new List<GoodsReceivedItemDc>();
                    if (context.Database.Connection.State != ConnectionState.Open)
                        context.Database.Connection.Open();

                    var cmd = context.Database.Connection.CreateCommand();
                    cmd.CommandText = "[dbo].[GetRemainningGRDetail]";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("PurchaseOrderId", iRMasterDc.PurchaseOrderId));

                    // Run the sproc
                    using (var reader = cmd.ExecuteReader())
                    {
                        GoodsReceivedItemDcs = ((IObjectContextAdapter)context)
                        .ObjectContext
                        .Translate<GoodsReceivedItemDc>(reader).ToList();
                    }
                    List<InvoiceReceiptDetail> invoiceReceiptDetails = new List<InvoiceReceiptDetail>();
                    List<Irexclusdedqtystore> irexclusdedqtystores = new List<Irexclusdedqtystore>();
                    if (IRM.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive) != null)
                    {
                        if (iRMasterDc.Id > 0)
                        {
                            var param = new SqlParameter
                            {
                                ParameterName = "IrmasterId",
                                Value = iRMasterDc.Id
                            };
                            GetIrQuantity = context.Database.SqlQuery<GetIrQuantityDC>("exec Sp_getIrQuantiy @IrmasterId", param).ToList();
                        }

                        foreach (var item in IRM.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive))
                        {
                            Irexclusdedqtystore ircs = new Irexclusdedqtystore();
                            if (GoodsReceivedItemDcs != null && GoodsReceivedItemDcs.Any(x => x.Id == item.GoodsReceivedDetailId))
                            {
                                GoodsReceivedItemDcs.FirstOrDefault(x => x.Id == item.GoodsReceivedDetailId).Qty += item.IRQuantity;
                            }
                            else
                            {
                                GoodsReceivedItemDcs.Add(new GoodsReceivedItemDc
                                {
                                    Id = item.GoodsReceivedDetailId,
                                    Qty = item.IRQuantity,
                                    IsFreeItem = item.IsFreeItem
                                });
                            }
                            ircs.Id = item.Id;
                            ircs.Irexcluded = item.IRExcludedquantity;
                            irexclusdedqtystores.Add(ircs);
                            item.IsActive = false;
                            item.IsDeleted = true;
                            item.ModifiedBy = userid;
                            item.ModifiedDate = DateTime.Now;
                        }
                        if (GoodsReceivedItemDcs.Any(x => x.Id > 0 && x.ItemMultiMRPId == 0))
                        {
                            var ids = GoodsReceivedItemDcs.Where(x => x.Id > 0 && x.ItemMultiMRPId == 0).Select(x => x.Id).ToList();
                            var GRDetails = context.GoodsReceivedDetail.Where(x => ids.Contains(x.Id) && x.IsDeleted == false).Select(x => new { x.Id, x.ItemMultiMRPId }).ToList();
                            foreach (var item in GoodsReceivedItemDcs.Where(x => x.Id > 0 && x.ItemMultiMRPId == 0))
                            {
                                item.ItemMultiMRPId = GRDetails.FirstOrDefault(x => x.Id == item.Id).ItemMultiMRPId;
                            }
                        }
                    }


                    if (GoodsReceivedItemDcs != null && GoodsReceivedItemDcs.Any())
                    {

                        var purchaseMaster = context.DPurchaseOrderMaster.Include(x => x.PurchaseOrderDetail).FirstOrDefault(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId);
                        People people = context.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();

                        double tamount = Gettotalexcessamount(iRMasterDc.Id);
                        double gsamount = GetGstAmount(iRMasterDc.Id);
                        double taxableamont = Gettotaltaxableamount(iRMasterDc.Id);
                        //IRM.TotalAmount = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(
                        iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a =>
                           ((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
                            + (((a.IRRemainingQuantity * a.Price) - (a.DesP.HasValue && a.DesP.Value > 0 ? (a.IRRemainingQuantity * a.Price) * Convert.ToDouble(a.DesP.Value / 100) : Convert.ToDouble(a.DesA.HasValue ? a.DesA.Value : 0)))
                               * (a.TotalCessPercentage + a.TotalTaxPercentage) / 100)
                      )
                       ), 2);
                        IRM.TotalAmount += tamount;
                        IRM.TotalAmountRemaining = IRM.TotalAmount;
                        IRM.IRAmountWithTax = IRM.TotalAmount;
                        IRM.Gstamt = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0).Sum(a => a.GSTAmount)), 2);
                        IRM.Gstamt += gsamount;
                        IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);

                        if (iRMasterDc.Discount == null)
                        {
                            iRMasterDc.Discount = 0;
                        }
                        else
                        {
                            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - iRMasterDc.Discount), 2);
                            IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
                            IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
                        }

                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.OtherAmount ?? 0)), 2);
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.ExpenseAmount ?? 0)), 2);
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.RoundofAmount ?? 0)), 2);
                        IRM.TotalAmountRemaining = IRM.TotalAmount;
                        IRM.Discount = Math.Round(Convert.ToDouble(iRMasterDc.Discount), 2);

                        double tdsper = 0;
                        string TDSdeducationDate = ConfigurationManager.AppSettings["TDSdeducationDate"];
                        DateTime CompairDate = Convert.ToDateTime(TDSdeducationDate, new CultureInfo("en-GB"));
                        DateTime InvoiceDate = Convert.ToDateTime(IRM.InvoiceDate, new CultureInfo("en-GB"));
                        if (InvoiceDate >= CompairDate)
                        {
                            var supplier = context.Suppliers.Where(x => x.SupplierId == purchaseMaster.SupplierId).FirstOrDefault();   //&& x.Active == true
                            if (supplier != null)
                            {
                                if (!string.IsNullOrEmpty(supplier.TINNo) || !string.IsNullOrEmpty(supplier.Pancard))
                                {
                                    var param = new SqlParameter
                                    {
                                        ParameterName = "Supplierid",
                                        Value = purchaseMaster.SupplierId
                                    };
                                    var data = context.Database.SqlQuery<double>("exec SP_GetTotalValuebySupplierId @Supplierid", param).FirstOrDefault();
                                    //if ((data + IRM.IRAmountWithTax) <= 5000000)
                                    //{
                                    //    tdsper = 0;
                                    //    IRM.TotalTDSAmount = 0;
                                    //}
                                    //else
                                    //{
                                    //    tdsper = 0.1;
                                    //    IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                                    //    //IRM.TotalTDSAmount = (IRM.IRAmountWithOutTax) * tdsper / 100;
                                    //}
                                    if ((data + IRM.TotalAmount) <= 5000000)
                                    {
                                        tdsper = 0;
                                        IRM.TotalTDSAmount = 0;
                                    }
                                    else
                                    {
                                        //tdsper = 0.1;
                                        //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                                        if (data > 5000000)
                                        {
                                            tdsper = 0.1;
                                            double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                            double amoun = taxableamont + am;
                                            IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                        }
                                        else if (data + IRM.TotalAmount > 5000000)
                                        {
                                            tdsper = 0.1;
                                            double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                            double amoun = taxableamont + am;
                                            IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                        }
                                        else
                                        {
                                            tdsper = 0;
                                            IRM.TotalTDSAmount = 0;
                                        }
                                    }
                                    //tdsper = 0.1;
                                }
                                else
                                {
                                    tdsper = 5;
                                    double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                    double amoun = taxableamont + am;
                                    IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                    //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                    //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                                }
                            }
                            else
                            {
                                tdsper = 5;
                                double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                double amoun = taxableamont + am;
                                IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                            }
                            //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                            IRM.TotalRemainingTDSAmount = IRM.TotalTDSAmount;
                        }

                        if (iRMasterDc.IsDraft)
                        {
                            IRM.IRStatus = "IR Posted as a Draft";
                            IRM.PaymentStatus = "Unpaid";
                        }
                        else
                        {
                            IRM.IRStatus = "IR Posted";
                            IRM.PaymentStatus = "Unpaid";
                        }
                        IRM.PurchaseOrderId = iRMasterDc.PurchaseOrderId;
                        IRM.supplierId = purchaseMaster.SupplierId;
                        IRM.SupplierName = purchaseMaster.SupplierName;
                        IRM.BuyerId = purchaseMaster.BuyerId;
                        IRM.BuyerName = purchaseMaster.BuyerName;
                        IRM.WarehouseId = purchaseMaster.WarehouseId;
                        IRM.ExpenseAmount = iRMasterDc.ExpenseAmount;
                        IRM.OtherAmount = iRMasterDc.OtherAmount;
                        IRM.ExpenseAmountRemark = iRMasterDc.ExpenseAmountRemark;
                        IRM.OtherAmountRemark = iRMasterDc.OtherAmountRemark;
                        IRM.RoundofAmount = iRMasterDc.RoundofAmount;
                        IRM.ExpenseAmountType = iRMasterDc.ExpenseAmountType;
                        IRM.OtherAmountType = iRMasterDc.OtherAmountType;
                        IRM.RoundoffAmountType = iRMasterDc.RoundoffAmountType;
                        IRM.IRNNumber = iRMasterDc.IRNNumber;
                        IRM.InvoiceDate = iRMasterDc.InvoiceDate;
                        //IRM.mo = people.DisplayName;
                        IRM.FreightAmount = iRMasterDc.FreightAmount;
                        if (iRMasterDc.DueDays > 0)
                        {
                            IRM.DueDays = iRMasterDc.DueDays;
                        }
                        else
                        {
                            IRM.DueDays = 0;
                        }
                        IRM.IRID = iRMasterDc.InvoiceNumber;



                        foreach (var iRItemDc in iRMasterDc.IRItemDcs.Where(x => x.IRRemainingQuantity > 0))
                        {

                            var gRItems = GoodsReceivedItemDcs.Where(x => x.ItemMultiMRPId == iRItemDc.ItemMultiMRPId && x.Qty > 0 && x.IsFreeItem == iRItemDc.IsFreeItem).ToList();
                            if (gRItems != null && gRItems.Any())
                            {
                                foreach (var gRItem in gRItems)
                                {
                                    int irexcludedqty = 0;
                                    var irexcludedata = irexclusdedqtystores.FirstOrDefault(x => x.Id == iRItemDc.IRItemId);
                                    if (irexcludedata != null && irexcludedata.Irexcluded >= 0)
                                    {
                                        irexcludedqty = irexcludedata.Irexcluded;
                                    }

                                    int qty = 0;
                                    InvoiceReceiptDetail iRItem = new InvoiceReceiptDetail();

                                    if (gRItem.Qty > iRItemDc.IRRemainingQuantity)
                                    {
                                        qty = iRItemDc.IRRemainingQuantity;
                                        gRItem.Qty = gRItem.Qty - iRItemDc.IRRemainingQuantity;
                                        iRItemDc.IRRemainingQuantity = 0;

                                    }
                                    else if (gRItem.Qty <= iRItemDc.IRRemainingQuantity)
                                    {
                                        qty = gRItem.Qty;
                                        iRItemDc.IRRemainingQuantity = iRItemDc.IRRemainingQuantity - gRItem.Qty;
                                        gRItem.Qty = 0;
                                    }
                                    double discountamt = 0;
                                    if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
                                    {
                                        var dataa = GetIrQuantity.FirstOrDefault(x => x.GoodsReceivedDetailId == gRItem.Id);
                                        if (dataa != null)
                                        {
                                            double dis = Convert.ToDouble(iRItemDc.DesA);
                                            double amt = dataa.IRQuantity * dis;
                                            discountamt = Convert.ToDouble(amt / dataa.TotalQty);
                                            //discountamt = Convert.ToDouble(iRItemDc.DesA);
                                        }

                                    }

                                    else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
                                    {
                                        discountamt = qty * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
                                    }

                                    iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
                                    iRItem.CreatedBy = userid;
                                    iRItem.CreatedDate = DateTime.Now;
                                    iRItem.DiscountAmount = discountamt;
                                    iRItem.DiscountPercent = iRItemDc.DesP;
                                    iRItem.GoodsReceivedDetailId = gRItem.Id;
                                    iRItem.IRQuantity = qty;
                                    iRItem.IsActive = true;
                                    iRItem.IsDeleted = false;
                                    iRItem.Price = iRItemDc.Price;
                                    iRItem.Status = 1;
                                    iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
                                    iRItem.TotalTaxAmount = ((qty * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
                                    iRItem.CessTaxAmount = ((qty * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
                                    iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
                                    iRItem.GSTAmount = iRItem.TotalTaxAmount;
                                    iRItem.IsFreeItem = iRItemDc.IsFreeItem;
                                    iRItem.IRExcludedquantity = irexcludedqty;
                                    invoiceReceiptDetails.Add(iRItem);
                                    IRM.InvoiceReceiptDetails.Add(iRItem);
                                    if (iRItemDc.IRRemainingQuantity == 0)
                                        break;
                                }
                            }
                        }
                        //var id = iRMasterDc.IRCreditNoteMasterDcs[0].IRMasterId;

                        if (iRMasterDc.Id > 0)
                        {
                            var data = context.IRCreditNoteMaster.Where(x => x.IRMasterId == iRMasterDc.Id && x.IsActive == true && x.IsDeleted == false && x.Type != 3).ToList();
                            if (data.Count > 0)
                            {
                                foreach (var item in iRMasterDc.IRItemDcs)
                                {
                                    if (item.DesP > 0 || item.DesA > 0)
                                    {
                                        var id = iRMasterDc.Id;
                                        var itemmultimrpid = item.ItemMultiMRPId;
                                        var i = item.Price;
                                        var ircreditdata = context.IRCreditNoteMaster.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false && x.Type != 3).ToList();
                                        foreach (var z in ircreditdata)
                                        {
                                            foreach (var it in context.InvoiceReceiptDetail.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false).ToList())
                                            {
                                                var imrpid = context.GoodsReceivedDetail.Where(x => x.Id == it.GoodsReceivedDetailId && x.IsActive == true && x.IsDeleted == false).Select(y => y.ItemMultiMRPId).FirstOrDefault();
                                                if (imrpid == itemmultimrpid)
                                                {
                                                    if (item.DesP > 0)
                                                    {
                                                        double disc = 0;
                                                        IRCreditNoteDetail dataa = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == z.Id && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (dataa != null)
                                                        {
                                                            disc = ((item.IRQuantity * item.Price) * Convert.ToDouble(item.DesP)) / 100;
                                                            dataa.Discount = (disc / item.IRQuantity) * (dataa.ShortQty + dataa.DamageQty + dataa.ExpiryQty);
                                                            context.Entry(dataa).State = EntityState.Modified;
                                                            context.Commit();
                                                        }

                                                    }
                                                    if (item.DesA > 0)
                                                    {
                                                        IRCreditNoteDetail datas = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == z.Id && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                        if (datas != null)
                                                        {
                                                            datas.Discount = (Convert.ToDouble(item.DesA) / item.IRQuantity) * (datas.ShortQty + datas.DamageQty + datas.ExpiryQty);
                                                            context.Entry(datas).State = EntityState.Modified;
                                                            context.Commit();
                                                        }

                                                    }
                                                }
                                            }
                                        }

                                    }

                                }
                            }
                        }
                        //if(iRMasterDc.IRCreditNoteMasterDcs.Count >0)
                        //{
                        //    foreach (var item in iRMasterDc.IRItemDcs)
                        //    {

                        //        if (item.DesP > 0 || item.DesA > 0)
                        //        {
                        //            var id = iRMasterDc.IRCreditNoteMasterDcs[0].IRMasterId;
                        //            var itemmultimrpid = item.ItemMultiMRPId;
                        //            var i = item.Price;
                        //            var ircreditid = context.IRCreditNoteMaster.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false).Select(y => y.Id).FirstOrDefault();
                        //            foreach (var it in context.InvoiceReceiptDetail.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false).ToList())
                        //            {
                        //                var imrpid = context.GoodsReceivedDetail.Where(x => x.Id == it.GoodsReceivedDetailId && x.IsActive == true && x.IsDeleted == false).Select(y => y.ItemMultiMRPId).FirstOrDefault();
                        //                if (imrpid == itemmultimrpid)
                        //                {
                        //                    if (item.DesP > 0)
                        //                    {
                        //                        double disc = 0;
                        //                        IRCreditNoteDetail data = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == ircreditid && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        //                        if(data != null)
                        //                        {
                        //                            disc = ((item.IRQuantity * item.Price) * Convert.ToDouble(item.DesP)) / 100;
                        //                            data.Discount = (disc / item.IRQuantity) * (data.ShortQty + data.DamageQty + data.ExpiryQty);
                        //                            context.Entry(data).State = EntityState.Modified;
                        //                            context.Commit();
                        //                        }

                        //                    }
                        //                    if (item.DesA > 0)
                        //                    {
                        //                        IRCreditNoteDetail data = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == ircreditid && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        //                        if(data != null)
                        //                        {
                        //                            data.Discount = (Convert.ToDouble(item.DesA) / item.IRQuantity) * (data.ShortQty + data.DamageQty + data.ExpiryQty);
                        //                            context.Entry(data).State = EntityState.Modified;
                        //                            context.Commit();
                        //                        }

                        //                    }
                        //                }
                        //            }
                        //        }

                        //    }
                        //}

                        context.Entry(IRM).State = EntityState.Modified;

                        if (context.Commit() > 0)
                        {
                            pOResult.Status = true;
                            pOResult.Message = "IR Submitted Successfully.";
                        }
                        else
                        {
                            pOResult.Status = false;
                            pOResult.Message = "Issue during save IR detail.";
                        }
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Validation- GR and IR Item count are mismatch,\nSo please try again after refresh the page.";
                    }
                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "IR Data not found.";
                }
            }

            return pOResult;
        }


        [Route("GetIRForApproval")]
        [HttpGet]
        public IRMasterDc GetIRForApproval(long id)
        {
            var IRMasterDc = new IRMasterDc();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            string RoleNames = "";
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "RoleNames"))
                RoleNames = identity.Claims.FirstOrDefault(x => x.Type == "RoleNames").Value;


            using (var db = new AuthContext())
            {
                IRMaster IrMasters = null;
                List<string> lstRoleNames = new List<string>();
                if (!string.IsNullOrEmpty(RoleNames))
                    lstRoleNames = RoleNames.Split(',').ToList();

                if (lstRoleNames.Contains("HQ Master login"))
                    IrMasters = db.IRMasterDB.Where(x => x.Id == id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                else
                    IrMasters = db.IRMasterDB.Where(x => x.Id == id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                if (IrMasters != null)
                {


                    var IRCN = db.IRCreditNoteMaster.Where(a => a.IRMasterId == IrMasters.Id && a.IsActive && (!a.IsDeleted.HasValue || !a.IsDeleted.Value)).Include(x => x.IRCreditNoteDetails).ToList();
                    List<IRCreditNoteMasterDc> iRCreditNoteMasterDcs = Mapper.Map(IRCN).ToANew<List<IRCreditNoteMasterDc>>();
                    iRCreditNoteMasterDcs.ForEach(x => x.IRCreditNoteDetails = x.IRCreditNoteDetails.Where(y => (!y.IsDeleted.HasValue || !y.IsDeleted.Value) && y.IsActive).ToList());


                    var GRIds = IrMasters.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive).Select(x => x.GoodsReceivedDetailId);
                    var Gr = db.GoodsReceivedDetail.Where(x => GRIds.Contains(x.Id) && x.IsDeleted == false).Include(x => x.PurchaseOrderDetail).ToList();

                    if (Gr != null && Gr.Any())
                    {
                        //List<ItemClassificationDC> ABCitemsList = Gr.Select(item => new ItemClassificationDC { ItemNumber = item.PurchaseOrderDetail.ItemNumber, WarehouseId = item.PurchaseOrderDetail.WarehouseId.Value }).ToList();

                        //var manager = new ItemLedgerManager();
                        //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);
                        var warehouseId = Gr.FirstOrDefault().PurchaseOrderDetail.WarehouseId;
                        var itemMultiMRPIds = Gr.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                        var multimrp = db.ItemMultiMRPDB.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId)).ToList();
                        List<ItemWithMRPDc> items = new List<ItemWithMRPDc>();
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();

                        var orderIdDt = new DataTable();
                        orderIdDt.Columns.Add("IntValue");
                        foreach (var item in itemMultiMRPIds)
                        {
                            var dr = orderIdDt.NewRow();
                            dr["IntValue"] = item;
                            orderIdDt.Rows.Add(dr);
                        }
                        var param = new SqlParameter("itemMultiMRPIds", orderIdDt);
                        param.SqlDbType = SqlDbType.Structured;
                        param.TypeName = "dbo.IntValues";
                        var cmd = db.Database.Connection.CreateCommand();
                        cmd.CommandText = "[dbo].[GetItemWithMRPDetail]";
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add(param);
                        cmd.Parameters.Add(new SqlParameter("warehouseId", warehouseId));

                        // Run the sproc
                        using (var reader = cmd.ExecuteReader())
                        {
                            items = ((IObjectContextAdapter)db)
                            .ObjectContext
                            .Translate<ItemWithMRPDc>(reader).ToList();
                        }
                        int? DepoId = db.DPurchaseOrderMaster.FirstOrDefault(a => a.PurchaseOrderId == IrMasters.PurchaseOrderId).DepoId;
                        if (DepoId.HasValue && DepoId > 0)
                        {
                            DepoMaster DepoDetail = db.DepoMasters.Where(a => a.DepoId == DepoId.Value).SingleOrDefault();

                            //for igst case if true then apply condion to hide column of cgst sgst cess
                            if (!string.IsNullOrEmpty(DepoDetail.GSTin) && DepoDetail.GSTin.Length >= 11)
                            {
                                string DepoTin_No = DepoDetail.GSTin.Substring(0, 2);
                                IRMasterDc.IsIgstIR = !db.Warehouses.Any(x => x.GSTin != null && x.WarehouseId == warehouseId && x.GSTin.Substring(0, 2) == DepoTin_No);

                            }
                        }

                        var InvoiceDetails = IrMasters != null ? IrMasters.InvoiceReceiptDetails.Where(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive) : new List<InvoiceReceiptDetail>();
                        List<IRItemDc> IRItemDcs = new List<IRItemDc>();
                        foreach (var item in InvoiceDetails)
                        {
                            IRItemDc iRItemDc = new IRItemDc();
                            var grItem = Gr.FirstOrDefault(x => x.Id == item.GoodsReceivedDetailId);
                            iRItemDc.IRItemId = item.Id;
                            iRItemDc.DamageQty = grItem.DamageQty;
                            iRItemDc.ExpiryQty = grItem.ExpiryQty;
                            iRItemDc.Price = item.Price;
                            iRItemDc.Qty = grItem.Qty;
                            iRItemDc.IRQuantity = item.IRQuantity;
                            iRItemDc.ItemMultiMRPId = grItem.ItemMultiMRPId;
                            iRItemDc.ItemName = grItem.PurchaseOrderDetail.ItemName;
                            iRItemDc.Itemnumber = grItem.PurchaseOrderDetail.ItemNumber;
                            iRItemDc.HSNCode = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).HSNCode : "";
                            iRItemDc.TotalCessPercentage = item.CessTaxPercentage ?? 0;
                            iRItemDc.TotalTaxPercentage = item.TotalTaxPercentage;
                            iRItemDc.MRP = items.Any(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId) ? items.FirstOrDefault(p => p.ItemMultiMRPId == grItem.ItemMultiMRPId).MRP : 0;
                            iRItemDc.distype = item.DiscountPercent > 0 ? "Percent" : (item.DiscountAmount > 0 ? "Amount" : "");
                            iRItemDc.DesA = item.DiscountAmount;
                            iRItemDc.DesP = item.DiscountPercent;
                            iRItemDc.IsFreeItem = item.IsFreeItem;
                            //iRItemDc.Category = GetItem.Where(x => x.ItemNumber == grItem.PurchaseOrderDetail.ItemNumber).Select(x => x.Category).FirstOrDefault() != null ? GetItem.Where(x => x.ItemNumber == grItem.PurchaseOrderDetail.ItemNumber).Select(x => x.Category).FirstOrDefault() : "D";
                            iRItemDc.Category = grItem.PurchaseOrderDetail.Category;

                            IRItemDcs.Add(iRItemDc);
                        }

                        IRItemDcs.ForEach(x =>
                        {
                            x.CompanyStockCode = multimrp.FirstOrDefault(y => y.ItemMultiMRPId == x.ItemMultiMRPId).CompanyStockCode;
                            double discountamt = 0;
                            if (x.DesA.HasValue && x.DesA.Value > 0)
                                discountamt = Convert.ToDouble(x.DesA);
                            else if (x.DesP.HasValue && x.DesP.Value > 0)
                            {
                                discountamt = x.IRQuantity * x.Price * Convert.ToDouble(x.DesP) / 100;
                            }
                            x.IRRemainingQuantity = x.IRQuantity;
                            x.CESSAmount = x.TotalCessPercentage > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * x.TotalCessPercentage / 100 : 0;
                            x.CGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.SGSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * (x.TotalTaxPercentage / 2) / 100 : 0;
                            x.GSTAmount = x.TotalTaxPercentage > 0 && x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) * x.TotalTaxPercentage / 100 : 0;
                            x.TaxableAmount = x.IRRemainingQuantity > 0 ? ((x.Price * x.IRRemainingQuantity) - discountamt) : 0;
                            x.TotalAmount = x.TaxableAmount + x.GSTAmount + x.CESSAmount;

                        });
                        IRMasterDc.IRSerialNumber = IrMasters.IrSerialNumber;
                        IRMasterDc.PurchaseOrderId = IrMasters.PurchaseOrderId;
                        IRMasterDc.Id = IrMasters.Id;
                        IRMasterDc.distype = "Amount";
                        IRMasterDc.DesA = IrMasters.Discount;
                        IRMasterDc.DesP = 0;
                        IRMasterDc.DueDays = IrMasters.DueDays;
                        IRMasterDc.ExpenseAmount = IrMasters.ExpenseAmount;
                        IRMasterDc.ExpenseAmountRemark = IrMasters.ExpenseAmountRemark;
                        IRMasterDc.FreightAmount = IrMasters.FreightAmount;
                        IRMasterDc.OtherAmount = IrMasters.OtherAmount;
                        IRMasterDc.OtherAmountRemark = IrMasters.OtherAmountRemark;
                        IRMasterDc.RoundofAmount = IrMasters.RoundofAmount;
                        IRMasterDc.InvoiceNumber = IrMasters.IRID;
                        IRMasterDc.IRNNumber = IrMasters.IRNNumber;
                        // IRMasterDc.BillAmount = IrMasters.TotalAmount;
                        IRMasterDc.IRStatus = IrMasters.IRStatus;
                        IRMasterDc.IRItemDcs = IRItemDcs;
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount - IRMasterDc.DesA), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.OtherAmount ?? 0)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.ExpenseAmount ?? 0)), 2);
                        IRMasterDc.BillAmount = Math.Round(Convert.ToDouble(IRMasterDc.BillAmount + (IRMasterDc.RoundofAmount ?? 0)), 2);
                        double am = Gettotalexcessamount(id);
                        IRMasterDc.BillAmount += am;

                        IRMasterDc.IRCreditNoteMasterDcs = iRCreditNoteMasterDcs.Where(y => y.IRMasterId == IRMasterDc.Id).ToList();


                    }
                }
            }
            return IRMasterDc;
        }

        [Route("AcceptUpdateIR")]
        [AcceptVerbs("POST")]
        public POResult AcceptUpdateIR(GetIRMasterDc iRMasterDc)
        {

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            POResult pOResult = new POResult();
            People people = null;
            // Supplier supplier = null;

            if (iRMasterDc != null && iRMasterDc.Id > 0 && userid > 0)
            {
                TransactionOptions option = new TransactionOptions();
                option.IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead;
                option.Timeout = TimeSpan.FromSeconds(180);
                using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    using (var context = new AuthContext())
                    {
                        people = context.Peoples.FirstOrDefault(q => q.PeopleID == userid && q.Active == true);
                        // supplier = context.Suppliers.Where(a => a.SupplierId == iRMasterDc.supplierId).SingleOrDefault();
                        IRMaster IRM = context.IRMasterDB.Where(x => x.Id == iRMasterDc.Id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                        //IRMaster IRM = context.IRMasterDB.Where(x => x.Id == iRMasterDc.Id).FirstOrDefault();
                        if (people != null && people.PeopleID > 0 && IRM != null && IRM.IRStatus == "Pending from Buyer side" && IRM.IRStatus != "Approved from Buyer side" && IRM.Progres != 1)
                        {

                            // IRM.IRStatus = "Approved from Buyer side";
                            IRM.Progres = 1;// in process
                            context.Entry(IRM).State = EntityState.Modified;
                            context.Commit();


                            var purchaseMaster = context.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId);
                            double tamount = Gettotalexcessamount(iRMasterDc.Id);
                            double gsamount = GetGstAmount(iRMasterDc.Id);
                            double taxableamont = Gettotaltaxableamount(iRMasterDc.Id);
                            IRM.TotalAmount = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                            IRM.TotalAmount += tamount;
                            IRM.TotalAmountRemaining = IRM.TotalAmount;
                            IRM.IRAmountWithTax = IRM.TotalAmount;
                            IRM.Gstamt = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.GSTAmount)), 2);
                            IRM.Gstamt += gsamount;
                            IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);


                            if (iRMasterDc.Discount == null)
                            {
                                iRMasterDc.Discount = 0;
                            }
                            else
                            {
                                IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - iRMasterDc.Discount), 2);
                                IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
                                IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
                            }

                            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.OtherAmount ?? 0)), 2);
                            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.ExpenseAmount ?? 0)), 2);
                            IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.RoundofAmount ?? 0)), 2);
                            IRM.TotalAmountRemaining = IRM.TotalAmount;
                            IRM.Discount = iRMasterDc.Discount == null ? 0 : Math.Round(Convert.ToDouble(iRMasterDc.Discount), 2);
                            //IRM.IRStatus = "Approved from Buyer side";
                            IRM.ExpenseAmount = iRMasterDc.ExpenseAmount == null ? 0 : iRMasterDc.ExpenseAmount;
                            IRM.OtherAmount = iRMasterDc.OtherAmount == null ? 0 : iRMasterDc.OtherAmount;
                            IRM.ExpenseAmountRemark = iRMasterDc.ExpenseAmountRemark;
                            IRM.OtherAmountRemark = iRMasterDc.OtherAmountRemark;
                            IRM.RoundofAmount = iRMasterDc.RoundofAmount == null ? 0 : iRMasterDc.RoundofAmount;
                            //
                            double tdsper = 0;
                            string TDSdeducationDate = ConfigurationManager.AppSettings["TDSdeducationDate"];
                            DateTime CompairDate = Convert.ToDateTime(TDSdeducationDate, new CultureInfo("en-GB"));
                            DateTime InvoiceDate = Convert.ToDateTime(IRM.InvoiceDate, new CultureInfo("en-GB"));
                            if (InvoiceDate >= CompairDate)
                            {
                                var supplier = context.Suppliers.Where(x => x.SupplierId == purchaseMaster.SupplierId).FirstOrDefault(); //&& x.Active == true
                                if (supplier != null)
                                {
                                    if (!string.IsNullOrEmpty(supplier.TINNo) || !string.IsNullOrEmpty(supplier.Pancard))
                                    {
                                        var param = new SqlParameter
                                        {
                                            ParameterName = "Supplierid",
                                            Value = purchaseMaster.SupplierId
                                        };
                                        var data = context.Database.SqlQuery<double>("exec SP_GetTotalValuebySupplierId @Supplierid", param).FirstOrDefault();
                                        //if ((data + IRM.IRAmountWithTax) <= 5000000)
                                        //{
                                        //    tdsper = 0;
                                        //    IRM.TotalTDSAmount = 0;
                                        //}
                                        //else
                                        //{
                                        //    tdsper = 0.1;
                                        //    IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                                        //    //IRM.TotalTDSAmount = (IRM.IRAmountWithOutTax) * tdsper / 100;
                                        //}
                                        if ((data + IRM.TotalAmount) <= 5000000)
                                        {
                                            tdsper = 0;
                                            IRM.TotalTDSAmount = 0;
                                        }
                                        else
                                        {
                                            //tdsper = 0.1;
                                            //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs[0].TaxableAmount) * tdsper / 100;
                                            if (data > 5000000)
                                            {
                                                tdsper = 0.1;
                                                double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                                double amoun = taxableamont + am;
                                                IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                                //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                            }
                                            else if (data + IRM.TotalAmount > 5000000)
                                            {
                                                tdsper = 0.1;
                                                double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                                double amoun = taxableamont + am;
                                                IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                                //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                            }
                                            else
                                            {
                                                tdsper = 0;
                                                IRM.TotalTDSAmount = 0;
                                            }
                                        }
                                        //tdsper = 0.1;
                                    }
                                    else
                                    {
                                        tdsper = 5;
                                        double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                        double amoun = taxableamont + am;
                                        IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                        //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                        //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                                    }
                                }
                                else
                                {
                                    tdsper = 5;
                                    double am = iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount);
                                    double amoun = taxableamont + am;
                                    IRM.TotalTDSAmount = (amoun) * tdsper / 100;
                                    //IRM.TotalTDSAmount = (iRMasterDc.IRItemDcs.Sum(x => x.TaxableAmount)) * tdsper / 100;
                                    //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                                }
                                //IRM.TotalTDSAmount = IRM.TotalAmount * tdsper / 100;
                                IRM.TotalRemainingTDSAmount = IRM.TotalTDSAmount;
                            }
                            //

                            IRM.IRID = iRMasterDc.InvoiceNumber;
                            IRM.IRApprovedDate = DateTime.Now;



                            IRApprovalStatus PRstatus = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId && x.BuyerId == userid && x.IRMasterId == iRMasterDc.Id && x.IsActive == true).FirstOrDefault();
                            if (PRstatus != null)
                            {
                                PRstatus.IsApprove = 1;
                                PRstatus.ModifiedDate = DateTime.Now;
                                PRstatus.BuyerComments = "Approved By :" + people.DisplayName;
                                context.Entry(PRstatus).State = EntityState.Modified;
                                //context.Commit();
                                //context.Commit();
                            }
                            else
                            {
                                IRApprovalStatus iR = new IRApprovalStatus();
                                iR.BuyerId = IRM.BuyerId.Value;
                                iR.PurchaseOrderId = IRM.PurchaseOrderId;
                                iR.IsApprove = 1;
                                iR.IsActive = true;
                                iR.IRMasterId = IRM.Id;
                                iR.CreatedDate = DateTime.Now;
                                iR.ModifiedDate = DateTime.Now;
                                context.IRApprovalStatus.Add(iR);
                                //context.Commit();
                                //context.Commit();
                            }
                            int PurchaseOrderId = iRMasterDc.PurchaseOrderId;
                            var prapprov = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == PurchaseOrderId && x.BuyerId != userid && x.IRMasterId == iRMasterDc.Id && x.IsActive == true).ToList();
                            if (prapprov == null || !prapprov.Any())
                            {
                                prapprov = new List<IRApprovalStatus> { PRstatus };
                            }
                            if (prapprov.All(x => x.IsApprove == 1))
                            {
                                purchaseMaster.IrStatus = "Approved from Buyer side";
                                context.Entry(purchaseMaster).State = EntityState.Modified;
                                //context.Commit();
                                IRM.IRStatus = "Approved from Buyer side";
                            }


                            foreach (var iRItemDc in iRMasterDc.IRItemDcs)
                            {

                                //InvoiceReceiptDetail iRItem = context.InvoiceReceiptDetail.Where(x => x.Id == iRItemDc.IRItemId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                InvoiceReceiptDetail iRItem = IRM.InvoiceReceiptDetails.First(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive && x.Id == iRItemDc.IRItemId);
                                if (iRItem != null)
                                {
                                    double discountamt = 0;
                                    if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
                                        discountamt = Convert.ToDouble(iRItemDc.DesA);
                                    else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
                                    {
                                        discountamt = iRItem.IRQuantity * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
                                    }
                                    iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
                                    iRItem.ModifiedBy = userid;
                                    iRItem.ModifiedDate = DateTime.Now;
                                    iRItem.DiscountAmount = iRItemDc.DesA;
                                    iRItem.DiscountPercent = iRItemDc.DesP;
                                    iRItem.Price = iRItemDc.Price;
                                    iRItem.Status = 1;
                                    iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
                                    iRItem.TotalTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
                                    iRItem.CessTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
                                    iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
                                    iRItem.GSTAmount = iRItem.TotalTaxAmount;
                                    iRItem.IsFreeItem = iRItem.IsFreeItem;
                                    context.Entry(iRItem).State = EntityState.Modified;

                                }

                            }
                            IRM.Progres = null;
                            context.Entry(IRM).State = EntityState.Modified;
                            if (context.Commit() > 0)
                            {
                                if (iRMasterDc.Id > 0)
                                {
                                    var datas = context.IRMasterDB.Where(x => x.Id == iRMasterDc.Id).FirstOrDefault();
                                    var statedata = context.Warehouses.Where(x => x.WarehouseId == datas.WarehouseId).FirstOrDefault();
                                    string name = "IRDebitNote";
                                    var data = context.IRCreditNoteMaster.Where(x => x.IRMasterId == iRMasterDc.Id).ToList();
                                    foreach (var i in data)
                                    {
                                        if (i.CNNumber == null)
                                        {
                                            var param = new SqlParameter
                                            {
                                                ParameterName = "EntityName",
                                                Value = name
                                            };
                                            var param1 = new SqlParameter
                                            {
                                                ParameterName = "StateId",
                                                Value = statedata.Stateid
                                            };
                                            var result = context.Database.SqlQuery<string>("exec spGetCurrentNumber @EntityName,@StateId", param, param1).FirstOrDefault();
                                            i.CNNumber = result;
                                            context.Entry(i).State = EntityState.Modified;
                                            context.Commit();
                                        }
                                    }
                                }
                                if (iRMasterDc.Id > 0)
                                {
                                    var data = context.IRCreditNoteMaster.Where(x => x.IRMasterId == iRMasterDc.Id && x.IsActive == true && x.IsDeleted == false && x.Type != 3).ToList();
                                    if (data.Count > 0)
                                    {
                                        foreach (var item in iRMasterDc.IRItemDcs)
                                        {
                                            if (item.DesP > 0 || item.DesA > 0)
                                            {
                                                var id = iRMasterDc.Id;
                                                var itemmultimrpid = item.ItemMultiMRPId;
                                                var i = item.Price;
                                                var ircreditdata = context.IRCreditNoteMaster.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false && x.Type != 3).ToList();
                                                foreach (var z in ircreditdata)
                                                {
                                                    foreach (var it in context.InvoiceReceiptDetail.Where(x => x.IRMasterId == id && x.IsActive == true && x.IsDeleted == false).ToList())
                                                    {
                                                        var imrpid = context.GoodsReceivedDetail.Where(x => x.Id == it.GoodsReceivedDetailId && x.IsActive == true && x.IsDeleted == false).Select(y => y.ItemMultiMRPId).FirstOrDefault();
                                                        if (imrpid == itemmultimrpid)
                                                        {
                                                            if (item.DesP > 0)
                                                            {
                                                                double disc = 0;
                                                                IRCreditNoteDetail dataa = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == z.Id && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                                if (dataa != null)
                                                                {
                                                                    disc = ((item.IRQuantity * item.Price) * Convert.ToDouble(item.DesP)) / 100;
                                                                    dataa.Discount = (disc / item.IRQuantity) * (dataa.ShortQty + dataa.DamageQty + dataa.ExpiryQty);
                                                                    context.Entry(dataa).State = EntityState.Modified;
                                                                    context.Commit();
                                                                }

                                                            }
                                                            if (item.DesA > 0)
                                                            {
                                                                IRCreditNoteDetail datas = context.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == z.Id && x.ItemMultiMRPId == imrpid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                                if (datas != null)
                                                                {
                                                                    datas.Discount = (Convert.ToDouble(item.DesA) / item.IRQuantity) * (datas.ShortQty + datas.DamageQty + datas.ExpiryQty);
                                                                    context.Entry(datas).State = EntityState.Modified;
                                                                    context.Commit();
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                                if (prapprov.All(x => x.IsApprove == 1))
                                {
                                    IRHelper.UpdateSupplierDataNew(IRM.Id, IRM.PurchaseOrderId, compid, context, userid);

                                    /////Send SMS & Notification To Supplier      
                                    var supplier = context.Suppliers.Where(a => a.SupplierId == purchaseMaster.SupplierId).SingleOrDefault();
                                    Sms s = new Sms();
                                    //  string msg = "ShopKirana has received Invoice for amount " + Math.Round(IRM.TotalAmount, 2) + " against PO #: " + purchaseMaster.PurchaseOrderId + " In Hub:" + purchaseMaster.WarehouseName;
                                    string msg = ""; //"ShopKirana has received Invoice for amount {#var1#} against PO #: {#var2#} In Hub:{#var3#}";
                                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PO_Invoice_received");
                                    msg = dltSMS == null ? "" : dltSMS.Template;

                                    msg = msg.Replace("{#var1#}", Math.Round(IRM.TotalAmount, 2).ToString());
                                    msg = msg.Replace("{#var2#}", purchaseMaster.PurchaseOrderId.ToString());
                                    msg = msg.Replace("{#var3#}", purchaseMaster.WarehouseName.ToString());
                                    string Mob = supplier?.MobileNo;
                                    string FCMID = supplier?.fcmId;
                                    string FCMNotification = "{title:'New Invoice Received',body:'" + msg + "',icon:'',notify_type:'IR',ObjectId:" + purchaseMaster.PurchaseOrderId + "}";

                                    if (!string.IsNullOrEmpty(Mob) && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                    if (!string.IsNullOrEmpty(FCMID)) { s.SupplierSendNotification(FCMID, FCMNotification); }
                                }

                                pOResult.Status = true;
                                pOResult.Message = "IR Accepted Successfully.";

                                List<int> ItemMultiMrpIds = new List<int>();

                                #region on CalculatePurchasePrice
                                try
                                {
                                    CalculatePurchasePriceHelper helper = new CalculatePurchasePriceHelper();
                                    bool IsUpdate = helper.CalculatePPOnInternalTransferForIR(context, IRM.WarehouseId, 0, Convert.ToInt32(iRMasterDc.Id), people.PeopleID);


                                    ItemMultiMrpIds.AddRange(iRMasterDc.IRItemDcs.Select(x => x.ItemMultiMRPId).Distinct().ToList());
                                    bool IsItemUpdate = helper.GetCalculatePPAndUpdateItemMaster(context, IRM.WarehouseId, ItemMultiMrpIds);
                                }
                                catch (Exception ex)
                                {
                                    string mrpids = string.Join(",", ItemMultiMrpIds);

                                    string error = ex.InnerException != null ? ex.ToString() + Environment.NewLine + ex.InnerException.ToString() : ex.ToString();
                                    TextFileLogHelper.LogError(new StringBuilder("Error On Calculate IR Purchase Approved Update : ").Append(error).Append($"  on : {indianTime}").ToString());
                                    TextFileLogHelper.LogError(new StringBuilder("IR MasterId : ").Append(IRM.Id).Append($" on : {indianTime}").ToString());
                                    TextFileLogHelper.LogError(new StringBuilder("For MRPIds : ").Append(mrpids).Append($" on : {indianTime}").ToString());
                                }
                                #endregion
                            }
                            else
                            {
                                pOResult.Status = false;
                                pOResult.Message = "Issue during save IR detail.";
                            }

                        }
                        else
                        {
                            pOResult.Status = false;
                            pOResult.Message = "IR Data not found.";
                        }
                    }
                    scope.Complete();
                }
            }
            return pOResult;



        }

        [Route("RejectIr")]
        [HttpPost]
        public POResult RejectIr(IrAcRjDto obj)
        {

            POResult pOResult = new POResult();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (var db = new AuthContext())
            {
                PurchaseOrderMaster pom = db.DPurchaseOrderMaster.Where(q => q.PurchaseOrderId == obj.PurchaseOrderId).SingleOrDefault();
                IRMaster irm = db.IRMasterDB.Where(q => q.IRID == obj.IRID && q.PurchaseOrderId == obj.PurchaseOrderId && q.Deleted == false).SingleOrDefault();
                IRApprovalStatus IRstatus = db.IRApprovalStatus.Where(x => x.PurchaseOrderId == obj.PurchaseOrderId && x.BuyerId == userid && x.IRMasterId == irm.Id && x.IsActive == true).FirstOrDefault();
                People people = db.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();

                if (people != null && people.PeopleID > 0 && irm != null && irm.IRStatus == "Pending from Buyer side")
                {
                    if (pom != null)
                    {
                        pom.IrStatus = obj.IrStatus;
                        pom.IrRejectComment = obj.IrRejectComment;
                        //db.DPurchaseOrderMaster.Attach(pom);
                        db.Entry(pom).State = EntityState.Modified;

                    }
                    if (irm != null)
                    {
                        irm.RejectedComment = obj.IrRejectComment;
                        irm.IRStatus = obj.IrStatus;
                        db.IRMasterDB.Attach(irm);
                        db.Entry(irm).State = EntityState.Modified;

                    }
                    if (IRstatus != null)
                    {
                        IRstatus.IsApprove = 2;
                        IRstatus.ModifiedDate = DateTime.Now;
                        IRstatus.BuyerComments = "Rejected By :" + people.DisplayName;
                        db.Entry(IRstatus).State = EntityState.Modified;
                    }
                    if (db.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Rejected Successfully.";
                    }
                    else
                    {
                        pOResult.Status = true;
                        pOResult.Message = "Some error Occurred during IR Reject.";

                    }
                }
            }
            return pOResult;
        }


        [Route("RejectedIRUpdate")]
        [AcceptVerbs("POST")]
        public POResult RejectedIRUpdate(GetIRMasterDc iRMasterDc)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                IRMaster IRM = context.IRMasterDB.Where(x => x.Id == iRMasterDc.Id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();

                if (IRM != null)
                {
                    var purchaseMaster = context.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == iRMasterDc.PurchaseOrderId);
                    People people = context.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();

                    purchaseMaster.IrStatus = "Pending from Buyer side";
                    context.Entry(purchaseMaster).State = EntityState.Modified;

                    IRM.TotalAmount = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                    IRM.TotalAmountRemaining = IRM.TotalAmount;
                    IRM.IRAmountWithTax = IRM.TotalAmount;
                    IRM.Gstamt = Math.Round(Convert.ToDouble(iRMasterDc.IRItemDcs.Sum(a => a.GSTAmount)), 2);
                    IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);

                    if (iRMasterDc.Discount == null)
                    {
                        iRMasterDc.Discount = 0;
                    }
                    else
                    {
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - iRMasterDc.Discount), 2);
                        IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
                        IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
                    }

                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.OtherAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.ExpenseAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (iRMasterDc.RoundofAmount ?? 0)), 2);

                    IRM.Discount = Math.Round(Convert.ToDouble(iRMasterDc.Discount), 2);
                    IRM.IRStatus = "Pending from Buyer side";
                    IRM.PurchaseOrderId = iRMasterDc.PurchaseOrderId;
                    IRM.supplierId = purchaseMaster.SupplierId;
                    IRM.SupplierName = purchaseMaster.SupplierName;
                    IRM.BuyerId = purchaseMaster.BuyerId;
                    IRM.BuyerName = purchaseMaster.BuyerName;
                    IRM.WarehouseId = purchaseMaster.WarehouseId;
                    IRM.ExpenseAmount = iRMasterDc.ExpenseAmount;
                    IRM.OtherAmount = iRMasterDc.OtherAmount;
                    IRM.ExpenseAmountRemark = iRMasterDc.ExpenseAmountRemark;
                    IRM.OtherAmountRemark = iRMasterDc.OtherAmountRemark;
                    IRM.RoundofAmount = iRMasterDc.RoundofAmount;
                    IRM.ExpenseAmountType = iRMasterDc.ExpenseAmountType;
                    IRM.OtherAmountType = iRMasterDc.OtherAmountType;
                    IRM.RoundoffAmountType = iRMasterDc.RoundoffAmountType;
                    //IRM.mo = people.DisplayName;
                    IRM.FreightAmount = iRMasterDc.FreightAmount;
                    if (iRMasterDc.DueDays > 0)
                    {
                        IRM.DueDays = iRMasterDc.DueDays;
                    }
                    else
                    {
                        IRM.DueDays = 0;
                    }
                    IRM.IRID = iRMasterDc.InvoiceNumber;

                    foreach (var iRItemDc in iRMasterDc.IRItemDcs)
                    {
                        InvoiceReceiptDetail iRItem = IRM.InvoiceReceiptDetails.First(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive && x.Id == iRItemDc.IRItemId);
                        if (iRItem != null)
                        {
                            double discountamt = 0;
                            if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
                                discountamt = Convert.ToDouble(iRItemDc.DesA);
                            else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
                            {
                                discountamt = iRItem.IRQuantity * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
                            }
                            iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
                            iRItem.ModifiedBy = userid;
                            iRItem.ModifiedDate = DateTime.Now;
                            iRItem.DiscountAmount = iRItemDc.DesA;
                            iRItem.DiscountPercent = iRItemDc.DesP;
                            iRItem.Price = iRItemDc.Price;
                            iRItem.Status = 1;
                            iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
                            iRItem.TotalTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
                            iRItem.CessTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
                            iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
                            iRItem.GSTAmount = iRItem.TotalTaxAmount;
                            iRItem.IsFreeItem = iRItem.IsFreeItem;
                            context.Entry(iRItem).State = EntityState.Modified;
                        }
                    }
                    #region Assign to Brand Buyers
                    string query = "select distinct i.SubsubCategoryid,i.SubsubcategoryName,br.BuyerId from InvoiceReceiptDetails a inner join GoodsReceivedDetails b on a.GoodsReceivedDetailId=b.Id and a.IsActive=1  and a.IRMasterId=" + IRM.Id + " inner join PurchaseOrderDetails c on b.PurchaseOrderDetailId=c.PurchaseOrderDetailId inner join ItemMasters i on c.ItemId=i.ItemId inner join BrandBuyers br on i.SubsubCategoryid=br.BrandId and i.WarehouseId=br.WarehosueId and br.Active=1 ";
                    var BuyerWithBrands = context.Database.SqlQuery<BuyerWithBrand>(query).ToList();

                    if (BuyerWithBrands != null && BuyerWithBrands.Any())
                    {
                        foreach (var BD in BuyerWithBrands)
                        {
                            var ActivePeople = context.Peoples.Where(x => x.PeopleID == BD.BuyerId && x.Active == true).FirstOrDefault();
                            var WarePermission = context.WarehousePermissionDB.Where(x => x.WarehouseId == IRM.WarehouseId && x.PeopleID == BD.BuyerId && x.IsDeleted == false).FirstOrDefault();
                            if (ActivePeople != null && WarePermission != null)
                            {
                                var iRStatus = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == IRM.PurchaseOrderId && x.BuyerId == BD.BuyerId && x.IRMasterId == IRM.Id).FirstOrDefault();
                                if (iRStatus == null)
                                {
                                    IRApprovalStatus iR = new IRApprovalStatus();
                                    iR.BuyerId = BD != null ? BD.BuyerId : 0;
                                    iR.PurchaseOrderId = IRM.PurchaseOrderId;
                                    iR.IsApprove = 0;
                                    iR.IsActive = true;
                                    iR.IRMasterId = IRM.Id;
                                    iR.CreatedDate = DateTime.Now;
                                    iR.ModifiedDate = DateTime.Now;
                                    context.IRApprovalStatus.Add(iR);
                                    context.Commit();
                                }
                                else
                                {
                                    iRStatus.IsApprove = 0;
                                    iRStatus.IsActive = true;
                                    iRStatus.IsDeleted = false;
                                    iRStatus.ModifiedDate = DateTime.Now;
                                    context.Entry(iRStatus).State = EntityState.Modified;
                                    context.Commit();
                                }
                                pOResult.Status = true;
                            }
                        }

                    }
                    else
                    {
                        IRApprovalStatus iR = new IRApprovalStatus();
                        iR.BuyerId = IRM.BuyerId.Value;
                        iR.PurchaseOrderId = IRM.PurchaseOrderId;
                        iR.IsApprove = 0;
                        iR.IsActive = true;
                        iR.IRMasterId = IRM.Id;
                        iR.CreatedDate = DateTime.Now;
                        iR.ModifiedDate = DateTime.Now;
                        context.IRApprovalStatus.Add(iR);
                        context.Commit();
                        pOResult.Status = true;
                    }

                    #endregion

                    context.Entry(IRM).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Accepted Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Issue during save IR detail.";
                    }

                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "IR Data not found.";
                }
            }

            return pOResult;
        }


        #region cancel PO
        /// <summary>
        /// Cancel PO 
        /// </summary>
        /// <param name="pom"></param>
        /// <returns></returns>
        //[Route("CancelPO")]
        //[AcceptVerbs("Post")]
        //public HttpResponseMessage cancelPO(PurchaseOrderMaster pom)
        //{
        //    try
        //    {
        //        var identity = User.Identity as ClaimsIdentity;
        //        int compid = 0, userid = 0;
        //        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
        //            compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

        //        if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
        //            userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
        //        using (AuthContext db = new AuthContext())
        //        {
        //            logger.Info("Start PurchaseOrderCancel");
        //            People p = db.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();
        //            PurchaseOrderMaster pm = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pom.PurchaseOrderId && (x.Status == "Self Approved" || x.Status == "Approved" || x.Status == "Send for Approval")).FirstOrDefault();
        //            if (pm != null)
        //            {
        //                pm.Status = "Canceled";
        //                pm.CanceledById = p.PeopleID;
        //                pm.CanceledByName = p.DisplayName;
        //                pm.CanceledDate = indianTime;
        //                db.Commit();
        //            }

        //            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error("Error in PurchaseOrderCancel: " + ex.Message);
        //        logger.Info("End PurchaseOrderCancel");
        //        return null;
        //    }
        //}
        #endregion


        [Route("CancelPO")]
        [HttpPost]
        public POResult CancelPo(PurchaseOrderMaster obj)
        {

            POResult pOResult = new POResult();

            pOResult.Status = true;
            pOResult.Message = "PO Cancellation is not allow please close the PO.";
            return pOResult;

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (var db = new AuthContext())
            {
                People p = db.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();
                PurchaseOrderMaster pm = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == obj.PurchaseOrderId && (x.Status == "Self Approved" || x.Status == "Approved" || x.Status == "Send for Approval")).FirstOrDefault();
                if (pm != null)
                {
                    pm.Status = "Canceled";
                    pm.CanceledById = p.PeopleID;
                    pm.CanceledByName = p.DisplayName;
                    pm.CanceledDate = indianTime;
                    pm.Comment = obj.Comment;

                }
                if (db.Commit() > 0)
                {
                    pOResult.Status = true;
                    pOResult.Message = "PO Cancel Successfully.";
                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "Some error Occurred during PO Canceled.";

                }
            }
            return pOResult;
        }


        [Route("MoveGRtoIRImage")]
        [HttpPost]
        public HttpResponseMessage MoveGrDraft(MoveGRtoIRDTO _dataobj)
        {
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                InvoiceImage inv = new InvoiceImage();
                IRMaster ir = context.IRMasterDB.Where(a => a.PurchaseOrderId == _dataobj.PurchaseOrderId && a.IRID == _dataobj.IRID).FirstOrDefault();
                List<InvoiceReceiptImage> invoiceR = context.InvoiceReceiptImage.Where(a => a.PurchaseOrderId == _dataobj.PurchaseOrderId && a.GrSerialNumber == _dataobj.GrSerialNumber).ToList();

                if (ir != null)
                {
                    if (_dataobj.IsIrExtendInvoiceDate == true)
                    {
                        IrExtendInvoiceDateApproval IrExtendInvoiceDateApprovals = new IrExtendInvoiceDateApproval();
                        var ExistId = context.IrExtendInvoiceDateApprovals.Where(x => x.IRMasterId == ir.Id && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        if (ExistId == null)
                        {
                            IrExtendInvoiceDateApprovals.IRMasterId = ir.Id;
                            IrExtendInvoiceDateApprovals.Status = "Pending";
                            IrExtendInvoiceDateApprovals.CreatedDate = indianTime;
                            IrExtendInvoiceDateApprovals.CreatedBy = userid;
                            IrExtendInvoiceDateApprovals.IsActive = true;
                            IrExtendInvoiceDateApprovals.IsDeleted = false;
                            context.IrExtendInvoiceDateApprovals.Add(IrExtendInvoiceDateApprovals);
                            context.Commit();
                        }
                    }
                    if (ir.IRStatus == "IR Posted")
                    {


                        foreach (InvoiceReceiptImage b in invoiceR)
                        {

                            inv = new InvoiceImage();
                            inv.PurchaseOrderId = _dataobj.PurchaseOrderId;
                            inv.InvoiceNumber = _dataobj.IRID;
                            inv.CompanyId = 1;
                            inv.WarehouseId = ir.WarehouseId;
                            inv.IRAmount = ir.TotalAmount;
                            inv.IRLogoURL = b.InvoiceImage;
                            inv.CreationDate = DateTime.Now;
                            inv.InvoiceDate = _dataobj.IRDate;
                            inv.IsActive = true;
                            context.InvoiceImageDb.Add(inv);

                        }
                        ir.IRStatus = "IR Uploaded";

                        if (context.Commit() > 0)
                        {
                            return Request.CreateResponse(HttpStatusCode.OK, "GR draft moved.");
                        }
                        else
                        {
                            return Request.CreateResponse(HttpStatusCode.OK, "Some issue in moving GR draft.");
                        }
                    }
                    else
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, "IR Status should be IR Posted.");
                    }
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.OK, "IR not found.");
                }

            }
        }


        #region Generate Credit Note (Shor qty) Once IR Approved
        /// <summary>
        /// Generate Credit Note (Shor qty)
        /// </summary>
        /// <param name="iRMasterDc"></param>
        /// <returns></returns>
        [Route("GenerateCN")]
        [HttpPost]
        public IRCreditNoteMasterDc GenerateCNPost(IRCreditNoteMasterDc iRMasterDc)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (iRMasterDc != null)
                {
                    var IRCN = context.IRCreditNoteMaster.Where(a => a.IRMasterId == iRMasterDc.IRMasterId && a.IsActive && (!a.IsDeleted.HasValue || !a.IsDeleted.Value)).Include(x => x.IRCreditNoteDetails).SingleOrDefault();
                    if (IRCN != null && IRCN.Comment == null && IRCN.CNNumber == null)
                    {
                        IRCN.Comment = iRMasterDc.Comment;
                        IRCN.CNNumber = iRMasterDc.CNNumber;
                        IRCN.ModifiedBy = userid;
                        IRCN.ModifiedDate = indianTime;
                        context.Entry(IRCN).State = EntityState.Modified;
                        if (context.Commit() > 0)
                        {
                            iRMasterDc.Message = "Credit Note Generated Successfully";
                        }
                        else
                        {
                            iRMasterDc.Message = "Something Went Wrong";
                        }
                    }
                    else { iRMasterDc.Message = "Already Credit Note Generated"; }
                }

            }

            return iRMasterDc;
        }

        #endregion

        #endregion

        #region Get Approvals Name

        [Authorize]
        [Route("GetApprovarName")]
        [HttpGet]
        public dynamic getApprovalNames(int POID)
        {
            try
            {
                using (var db = new AuthContext())
                {

                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;

                    if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                        userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                    string sqlquery = "SELECT PD.DisplayName,PR.IsApprove,PR.ApprovalID,PR.Comments FROM PRApprovelsStatus PR INNER JOIN People PD "
                                    + " ON PR.ApprovalID = PD.PeopleID where"
                                    + " PR.PurchaseOrderId =" + POID + "and PR.IsActive = 1 and PD.Deleted=0 ";
                    List<Display> PRSts = db.Database.SqlQuery<Display>(sqlquery).ToList();
                    return PRSts;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion
        #region Get Approvals Name
        [Authorize]
        [Route("GetPaymentApproval")]
        [HttpGet]
        public dynamic getPaymentApproval(int POID)
        {
            try
            {
                using (var db = new AuthContext())
                {

                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;

                    if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                        userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                    string sqlquery = "SELECT PD.DisplayName,PR.IsApproved,PR.Comment FROM PRPaymentAppoveds PR INNER JOIN People PD "
                                    + " ON PR.ApprovedBY = PD.PeopleID where" + " PR.IsActive = 1 "
                                    + "and PR.PRId =" + POID;
                    List<ApproverName> PRSts = db.Database.SqlQuery<ApproverName>(sqlquery).ToList();
                    return PRSts;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region Get Approvals Name
        [Authorize]
        [Route("GetPaymentApprovalName")]
        [HttpGet]
        public dynamic getPaymentApprovalName(int POID)
        {
            try
            {
                using (var db = new AuthContext())
                {

                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;

                    if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                        userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                    string sqlquery = "SELECT PD.DisplayName,PR.IsApproved FROM PRPaymentAppoveds PR INNER JOIN People PD "
                                    + " ON PR.ApprovedBY = PD.PeopleID where" + " PR.IsActive = 1 " + " and PR.IsApproved = 1"
                                    + "and PR.PRId =" + POID;
                    ApproverName PRSts = db.Database.SqlQuery<ApproverName>(sqlquery).FirstOrDefault();
                    return PRSts;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion


        [Route("Getuser")]
        [HttpGet]
        public bool Getuserdata(int POID)
        {
            using (var db = new AuthContext())
            {
                bool result = false;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var userVerified = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == POID && x.ApprovalID == userid && x.IsActive == true).FirstOrDefault();
                if (userVerified != null)
                {
                    result = true;
                }
                return result;
            }
        }
        [Route("GetuserRole")]
        [HttpGet]
        public bool GetuserRole()
        {
            using (var db = new AuthContext())
            {
                bool result = false;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0; string RoleNames = "";

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "RoleNames"))
                    RoleNames = identity.Claims.FirstOrDefault(x => x.Type == "RoleNames").Value;

                List<string> lstRoleNames = new List<string>();
                if (!string.IsNullOrEmpty(RoleNames))
                    lstRoleNames = RoleNames.Split(',').ToList();

                //SubsubCategoryids.Contains(x.BrandId) 
                if (lstRoleNames.Contains("Hub sales lead") || lstRoleNames.Contains("Region sales lead"))
                {
                    result = true;
                }
                return result;
            }
        }



        #region Get IR Approvals Name
        [Authorize]
        [Route("GetIRApprovalStatus")]
        [HttpGet]
        public dynamic getIRApprovalName(int POID, int IRMasterId)
        {
            try
            {
                using (var db = new AuthContext())
                {
                    List<IRApproverName> IRstatus = new List<IRApproverName>();
                    var identity = User.Identity as ClaimsIdentity;
                    int userid = 0;

                    if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                        userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                    string sqlquery = "SELECT PD.DisplayName,IR.IsApprove,IR.BuyerComments FROM IRApprovalStatus IR INNER JOIN People PD "
                                    + " ON IR.BuyerId = PD.PeopleID where" + " IR.IsActive = 1 "
                                    + "and IR.PurchaseOrderId =" + POID + "and IR.IRMasterId =" + IRMasterId;
                    IRstatus = db.Database.SqlQuery<IRApproverName>(sqlquery).ToList();
                    return IRstatus;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        [Route("AdvExport")]
        [HttpPost]
        public HttpResponseMessage getAdvExports(widDTO obj)
        {
            try
            {
                logger.Info("start : ");

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                using (var myContext = new AuthContext())
                {

                    string Start = obj.From.ToString("yyyy-MM-dd HH:mm:ss");
                    string End = obj.TO.ToString("yyyy-MM-dd HH:mm:ss");
                    int Wid = obj.WarehouseId;


                    List<GRReportDC> purchaseRData = new List<GRReportDC>();
                    List<GRReportDC> addPurchaseReport = new List<GRReportDC>();
                    //var warehouseids = obj.ids.Select(x => x.id).ToList();
                    //foreach (var item in obj.ids)
                    //{
                    var purchaseReport = "select pm.FreightCharge ,p.PurchaseOrderId,p.TotalQuantity,p.MRP,p.Price, p.WarehouseName, p.ItemName," +
                        " p.ItemNumber,p.CreationDate,p.ItemMultiMRPId,p.SupplierName,case when i.CompanyStockCode is not Null then  i.CompanyStockCode else '' end as CompanyStockCode from  PurchaseOrderDetails as p left join ItemMultiMRPs as i on i.ItemMultiMRPId = p.ItemMultiMRPId join PurchaseOrderMasters as pm on pm.PurchaseOrderId = p.PurchaseOrderId where " +
                         " p.CreationDate > ' " + Start + " ' and p.CreationDate <= ' " + End + "' and p.WarehouseId = " + Wid;

                    var poReport = myContext.Database.SqlQuery<GRReportDC>(purchaseReport).ToList();
                    purchaseRData.AddRange(poReport);
                    //}


                    if (purchaseRData.Count > 0)
                    {

                        foreach (var poDetails in purchaseRData)
                        {

                            var ItemQT = poDetails.Qty;

                            double ItemFIlRate = Convert.ToDouble(ItemQT) * 100 / Convert.ToDouble(poDetails.TotalQuantity);
                            var GRdata = myContext.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == poDetails.PurchaseOrderId).FirstOrDefault();// this is add because we required gr date
                            GRReportDC gR = new GRReportDC();
                            gR.PurchaseOrderId = poDetails.PurchaseOrderId;
                            gR.TotalQuantity = poDetails.TotalQuantity;
                            gR.PriceRecived = poDetails.PriceRecived;
                            gR.WarehouseName = poDetails.WarehouseName;
                            gR.Qty = poDetails.Qty;
                            gR.GRNo = poDetails.GRNo;
                            gR.Price = poDetails.Price;
                            gR.ItemName = poDetails.ItemName;
                            gR.POStatus = poDetails.POStatus;
                            gR.ItemNumber = poDetails.ItemNumber;
                            gR.MRP = poDetails.MRP;
                            gR.CreationDate = poDetails.CreationDate;
                            gR.SupplierName = GRdata.SupplierName;
                            gR.CompanyStockCode = poDetails.CompanyStockCode;
                            gR.FreightCharge = poDetails.FreightCharge;
                            addPurchaseReport.Add(gR);

                        }
                    }
                    else
                    {

                        return Request.CreateResponse(HttpStatusCode.OK, "No Record Found");

                    }
                    return Request.CreateResponse(HttpStatusCode.OK, addPurchaseReport);

                }

            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ex.Message);
            }

        }
        //Added By Ravindra

        private int Conversion(string ItemNumber, int Quantity, AuthContext db)
        {
            int NoOfPieces = Quantity;
            MaterialItemMaster ObjMaterialItemMaster = db.MaterialItemMaster.Where(x => x.ItemNumber == ItemNumber).FirstOrDefault();
            if (!ObjMaterialItemMaster.FromConversion.ToUpper().Equals("PC"))
            {
                NoOfPieces = Quantity * ObjMaterialItemMaster.ToValue;

            }

            return NoOfPieces;

            //return Quantity;
        }
        private DamageExpiryDC GetDamageExpiryDC(int ItemMultiMrpId, int PurchaseOrderId, bool ISFreeItem)
        {
            using (AuthContext context = new AuthContext())
            {
                var Param = new SqlParameter
                {
                    ParameterName = "PurchaseOrderId",
                    Value = PurchaseOrderId
                };


                var Param2 = new SqlParameter
                {
                    ParameterName = "ItemMultiMrpId",
                    Value = ItemMultiMrpId
                };

                var Param3 = new SqlParameter
                {
                    ParameterName = "IsFreeItem",
                    Value = ISFreeItem
                };

                DamageExpiryDC ObjDamageExpiryDC = context.Database.SqlQuery<DamageExpiryDC>("GetDamageExpiryRemainingQty @PurchaseOrderId,@ItemMultiMrpId,@IsFreeItem ", Param, Param2, Param3).FirstOrDefault();
                return ObjDamageExpiryDC;
            }
        }
        [Authorize]
        [HttpGet]
        [Route("GetCreditNoteInvoice")]
        public HttpResponseMessage GetCreditNoteInvoice(int Id, int PoId)
        {
            try
            {
                CreditNoteInvoiceDC ObjCreditNoteInvoiceDC = CreditNoteInvoice(Id, PoId);
                return Request.CreateResponse(HttpStatusCode.OK, ObjCreditNoteInvoiceDC);


            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex.GetBaseException().Message.ToString());
            }

        }

        private CreditNoteInvoiceDC CreditNoteInvoice(int IrCreditnotemasterid, int PoId)
        {
            try
            {
                using (AuthContext context = new AuthContext())
                {
                    var irmasterid = context.IRCreditNoteMaster.Where(x => x.Id == IrCreditnotemasterid && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                    int IrmasterId = irmasterid.IRMasterId;
                    var Param = new SqlParameter
                    {
                        ParameterName = "IRCreditNoteMasterId",
                        Value = IrCreditnotemasterid
                    };


                    var Param2 = new SqlParameter
                    {
                        ParameterName = "PurchaseOrderId",
                        Value = PoId
                    };
                    IRCreditNoteMasterDc ObjIRCreditNoteMasterDc = context.Database.SqlQuery<IRCreditNoteMasterDc>("GetIRcreditnotemaster @IRCreditNoteMasterId,@PurchaseOrderId ", Param, Param2).FirstOrDefault();
                    CreditNoteInvoiceDC ObjCreditNoteInvoiceDC = new CreditNoteInvoiceDC();
                    if (irmasterid.Type == 3)
                    {
                        List<IRCreditNoteDetailDc> ObjIrcreditNoteDetailDc = IRCreditNoteDetailDcForExcess(IrCreditnotemasterid, IrmasterId).ToList();

                        ObjCreditNoteInvoiceDC.IRCreditNoteMasterDc = ObjIRCreditNoteMasterDc;
                        ObjCreditNoteInvoiceDC.IRCreditNoteDetailDc = ObjIrcreditNoteDetailDc;
                        ObjCreditNoteInvoiceDC.TotalCgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.CgstAmount);
                        ObjCreditNoteInvoiceDC.TotalSgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.SgstAmount);
                        ObjCreditNoteInvoiceDC.TotalIgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.IgstAmount);
                        ObjCreditNoteInvoiceDC.TotalTaxablevalue = ObjIrcreditNoteDetailDc.Sum(x => x.Taxablevalue);
                        ObjCreditNoteInvoiceDC.TotalAmountBeforeTax = ObjIrcreditNoteDetailDc.Sum(x => x.Amount);
                        ObjCreditNoteInvoiceDC.TotalAmountAfterTax = ObjIrcreditNoteDetailDc.Sum(x => x.TotalAmount);
                        ObjCreditNoteInvoiceDC.TotalShortQty = ObjIrcreditNoteDetailDc.Sum(x => x.ShortQty);
                        ObjCreditNoteInvoiceDC.TotalDamageQty = ObjIrcreditNoteDetailDc.Sum(x => x.DamageQty);
                        ObjCreditNoteInvoiceDC.TotalExpiryQty = ObjIrcreditNoteDetailDc.Sum(x => x.ExpiryQty);
                        ObjCreditNoteInvoiceDC.TotalQty = ObjIrcreditNoteDetailDc.Sum(x => x.Qty);
                        ObjCreditNoteInvoiceDC.TotalDiscount = ObjIrcreditNoteDetailDc.Sum(x => x.ShortQuantityDiscount);
                        ObjCreditNoteInvoiceDC.TotalCessAmount = ObjIrcreditNoteDetailDc.Sum(x => x.CessAmount);

                    }
                    else
                    {
                        List<IRCreditNoteDetailDc> ObjIrcreditNoteDetailDc = IRCreditNoteDetailDc(IrCreditnotemasterid, IrmasterId).ToList();

                        ObjCreditNoteInvoiceDC.IRCreditNoteMasterDc = ObjIRCreditNoteMasterDc;
                        ObjCreditNoteInvoiceDC.IRCreditNoteDetailDc = ObjIrcreditNoteDetailDc;
                        ObjCreditNoteInvoiceDC.TotalCgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.CgstAmount);
                        ObjCreditNoteInvoiceDC.TotalSgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.SgstAmount);
                        ObjCreditNoteInvoiceDC.TotalIgstAmount = ObjIrcreditNoteDetailDc.Sum(x => x.IgstAmount);
                        ObjCreditNoteInvoiceDC.TotalTaxablevalue = ObjIrcreditNoteDetailDc.Sum(x => x.Taxablevalue);
                        ObjCreditNoteInvoiceDC.TotalAmountBeforeTax = ObjIrcreditNoteDetailDc.Sum(x => x.Amount);
                        ObjCreditNoteInvoiceDC.TotalAmountAfterTax = ObjIrcreditNoteDetailDc.Sum(x => x.TotalAmount);
                        ObjCreditNoteInvoiceDC.TotalShortQty = ObjIrcreditNoteDetailDc.Sum(x => x.ShortQty);
                        ObjCreditNoteInvoiceDC.TotalDamageQty = ObjIrcreditNoteDetailDc.Sum(x => x.DamageQty);
                        ObjCreditNoteInvoiceDC.TotalExpiryQty = ObjIrcreditNoteDetailDc.Sum(x => x.ExpiryQty);
                        ObjCreditNoteInvoiceDC.TotalQty = ObjIrcreditNoteDetailDc.Sum(x => x.Qty);
                        ObjCreditNoteInvoiceDC.TotalDiscount = ObjIrcreditNoteDetailDc.Sum(x => x.ShortQuantityDiscount);
                        ObjCreditNoteInvoiceDC.TotalCessAmount = ObjIrcreditNoteDetailDc.Sum(x => x.CessAmount);

                    }

                    ObjCreditNoteInvoiceDC.Poid = PoId;
                    return ObjCreditNoteInvoiceDC;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private List<IRCreditNoteDetailDc> IRCreditNoteDetailDc(int IRCreditNoteMasterId, int IrmasterId)
        {
            try
            {

                using (AuthContext context = new AuthContext())
                {
                    var Param = new SqlParameter
                    {
                        ParameterName = "IRCreditNoteMasterId",
                        Value = IRCreditNoteMasterId
                    };

                    var IRMasterIdParam = new SqlParameter
                    {
                        ParameterName = "IrmasterId",
                        Value = IrmasterId
                    };
                    List<IRCreditNoteDetailDc> ObjIRCreditNoteDetailDc = context.Database.SqlQuery<IRCreditNoteDetailDc>("GetIRCreditNoteDetails @IRCreditNoteMasterId,@IRMasterId ", Param, IRMasterIdParam).ToList();
                    return ObjIRCreditNoteDetailDc;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpGet]
        [Route("SearchinitemPRadd")]
        public async Task<List<ItemMaster>> searchsPOadd(string key, string ids)
        {
            logger.Info("start Item Master: ");
            List<ItemMaster> itemList = new List<ItemMaster>();
            List<ItemMaster> result = new List<ItemMaster>();
            try
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);
                logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
                int CompanyId = compid;
                using (AuthContext db = new AuthContext())
                {
                    //  WarehouseId = Warehouseid;
                    if (key != null)
                    {
                        var itemIDlist = ids.Split(',');


                        var itemIDs = itemIDlist.Select(x => Convert.ToInt32(x)).ToList();
                        itemList = db.itemMasters.Where(t => itemIDs.Contains(t.WarehouseId) && (t.itemname.Contains(key) || t.Number.Contains(key)) && t.Deleted == false).ToList();

                        var itemMultiMRPIds = itemList.Select(k => k.ItemMultiMRPId).Distinct().ToList();
                        var multimrp = db.ItemMultiMRPDB.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId)).ToList();
                        //List<string> PurchaseSku = new List<string>();
                        List<ItemClassificationDC> ABCitemsList = itemList.Select(item => new ItemClassificationDC { ItemNumber = item.ItemNumber, WarehouseId = item.WarehouseId }).ToList();

                        var manager = new ItemLedgerManager();
                        var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                        foreach (var item in itemList)
                        {
                            if (itemList.Any(t => t.PurchaseSku == item.PurchaseSku))
                            {

                                var maxPurchasePrice = itemList.Where(t => t.PurchaseSku == item.PurchaseSku && t.ItemMultiMRPId == item.ItemMultiMRPId).Max(x => x.POPurchasePrice);
                                var items = itemList.Where(t => t.PurchaseSku == item.PurchaseSku && t.POPurchasePrice == maxPurchasePrice && t.ItemMultiMRPId == item.ItemMultiMRPId).FirstOrDefault();
                                items.Category = GetItem.Where(x => x.ItemNumber == items.ItemNumber).Select(x => x.Category).FirstOrDefault() != null ? GetItem.Where(x => x.ItemNumber == items.ItemNumber).Select(x => x.Category).FirstOrDefault() : "D";

                                //var CompStockCode = db.ItemMultiMRPDB.Where(x => x.ItemMultiMRPId == item.ItemMultiMRPId).Select(x => x.CompanyStockCode).FirstOrDefault();

                                item.CompanyStockCode = multimrp.FirstOrDefault(y => y.ItemMultiMRPId == y.ItemMultiMRPId).CompanyStockCode;

                                if (items != null && !result.Any(x => x.PurchaseSku == items.PurchaseSku && x.ItemMultiMRPId == item.ItemMultiMRPId)) /*!PurchaseSku.Any(x => x == items.PurchaseSku))*/
                                {
                                    result.Add(items);
                                    //PurchaseSku.Add(items.PurchaseSku);
                                }
                            }
                        }
                        return result;
                    }

                    else
                    {
                        return null;


                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in Item Master " + ex.Message);
                logger.Info("End  Item Master: ");
                return null;
            }
        }
        [HttpPost]
        [Route("GetWarehouseItemById")]
        public dynamic GetWarehouseItembyId(int itemId, List<int> warehouseIds)
        {
            using (AuthContext context = new AuthContext())
            {


                //var item = context.itemMasters.FirstOrDefault(x => x.ItemId == itemId);
                List<ItemMaster> Objitemmasters = context.itemMasters.Where(x => warehouseIds.Contains(x.WarehouseId) && x.POPurchasePrice > 0 && x.ItemId == itemId).ToList();

                ////List<ItemMaster> Objitemmasters = context.itemMasters.Where(x => x.ItemId == itemId).ToList();
                //var warehouseitem = context.itemMasters.Where(x => warehouseIds.Contains(x.WarehouseId) && x.SellingSku == item.SellingSku).Select(x => new { x.ItemId, x.itemname, x.WarehouseId, x.WarehouseName,x.MaterialItemId,x.Type }).ToList();
                //List<ItemMaster> Objitemmasters = context.itemMasters.Where(x => warehouseIds.Contains(x.WarehouseId) && x.SellingSku == item.SellingSku).GroupBy(x => x.price).Select(g => g.FirstOrDefault()).ToList();

                List<PMItemDc> ObjitemDc = new List<PMItemDc>();
                List<classification> ABCClassification = new List<classification>();
                // List<ItemClassificationDC> ABCitemsList = Objitemmasters.Select(itmq => new ItemClassificationDC { ItemNumber = itmq.ItemNumber, WarehouseId = itmq.WarehouseId }).ToList();

                // var manager = new ItemLedgerManager();
                //var GetItem = await manager.GetItemClassificationsAsync(ABCitemsList);

                var itemids = Objitemmasters.Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                // bool ABCvalue = false;
                foreach (var cat in itemids)
                {
                    var query = "select itemNumber,warehouseid,Category,Qty from ItemsClassification Where itemNumber = '" + cat.itemNumber + "' and warehouseid = " + cat.warehouseid;
                    var ABCClass = context.Database.SqlQuery<classification>(query).ToList();
                    ABCClassification.AddRange(ABCClass);
                }

                foreach (var data in Objitemmasters)
                {
                    var demandQty = GetDemandQty(data.WarehouseId, data.Number, data.ItemMultiMRPId, context);
                    PMItemDc objPmitemDc = new PMItemDc();
                    var CurrentStock = context.DbCurrentStock.Where(x => x.WarehouseId == data.WarehouseId && x.ItemMultiMRPId == data.ItemMultiMRPId).FirstOrDefault()?.CurrentInventory;
                    if (data.Type == 2)
                    {
                        int conversionvalue = context.MaterialItemMaster.Where(x => x.Id == data.MaterialItemId).Select(x => x.ToValue).FirstOrDefault();
                        objPmitemDc.ConversionValue = conversionvalue;
                    }
                    else
                    {
                        objPmitemDc.ConversionValue = 0;
                    }
                    objPmitemDc.ItemId = data.ItemId;
                    objPmitemDc.price = data.price;
                    objPmitemDc.NetPurchasePrice = data.NetPurchasePrice;
                    objPmitemDc.POPurchasePrice = data.POPurchasePrice;
                    objPmitemDc.itemname = data.itemname;
                    objPmitemDc.WarehouseId = data.WarehouseId;
                    objPmitemDc.WarehouseName = data.WarehouseName;
                    objPmitemDc.MaterialItemId = data.MaterialItemId;
                    objPmitemDc.Type = data.Type;
                    //objPmitemDc.Caterogy = GetItem.Where(x => x.ItemNumber == data.ItemNumber && x.WarehouseId == data.WarehouseId).Select(x => x.Category).FirstOrDefault() != null ? GetItem.Where(x => x.ItemNumber == data.ItemNumber && x.WarehouseId == data.WarehouseId).Select(x => x.Category).FirstOrDefault() : "D";
                    objPmitemDc.Caterogy = ABCClassification.Where(x => x.itemNumber == data.ItemNumber && x.warehouseid == data.WarehouseId).Select(x => x.Category).FirstOrDefault() != null ? ABCClassification.Where(x => x.itemNumber == data.ItemNumber && x.warehouseid == data.WarehouseId).Select(x => x.Category).FirstOrDefault() : "D";
                    objPmitemDc.Qty = ABCClassification.Where(x => x.itemNumber == data.ItemNumber && x.warehouseid == data.WarehouseId).Select(x => x.Qty).FirstOrDefault() != null ? ABCClassification.Where(x => x.itemNumber == data.ItemNumber && x.warehouseid == data.WarehouseId).Select(x => x.Qty).FirstOrDefault() : 0;
                    objPmitemDc.inventryCount = CurrentStock == null ? 0 : CurrentStock.Value;
                    objPmitemDc.DemandQty = demandQty == null ? 0 : demandQty.DemandQty;
                    objPmitemDc.OpenPOQTy = demandQty == null ? 0 : demandQty.OpenPOQTy;
                    ObjitemDc.Add(objPmitemDc);
                }
                return ObjitemDc;
            }
        }


        [Route("IrbuyerName")]
        [HttpGet]
        public List<BuyerBrandCategory> IrbuyerName(int IRMasterId)
        {
            List<BuyerBrandCategory> BuyerList = new List<BuyerBrandCategory>();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (var db = new AuthContext())
            {
                IRMaster irm = db.IRMasterDB.Where(q => q.Id == IRMasterId).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();

                if (irm != null && irm.IRStatus != "Pending from Buyer side")
                {
                    //string query = "select distinct i.itemname,i.SubsubCategoryid,i.SubsubcategoryName,br.BuyerId,p.DisplayName from InvoiceReceiptDetails a inner join GoodsReceivedDetails b on a.GoodsReceivedDetailId = b.Id and a.IsActive = 1  and a.IRMasterId =" + irm.Id + "inner join PurchaseOrderDetails c on b.PurchaseOrderDetailId = c.PurchaseOrderDetailId inner join ItemMasters i on c.ItemId = i.ItemId left join BrandBuyers br on i.SubsubCategoryid = br.BrandId and i.WarehouseId = br.WarehosueId and br.Active = 1 left join People p on p.PeopleID = br.BuyerId ";
                    string query = "select distinct i.itemname,i.SubsubCategoryid,i.SubsubcategoryName,ir.BuyerId,p.DisplayName from InvoiceReceiptDetails a inner join GoodsReceivedDetails b on a.GoodsReceivedDetailId = b.Id and a.IsActive = 1  and a.IRMasterId =" + irm.Id + " Inner Join IRMasters ir on a.IRMasterId=ir.Id inner join PurchaseOrderDetails c on b.PurchaseOrderDetailId = c.PurchaseOrderDetailId inner join ItemMasters i on c.ItemId = i.ItemId left join People p on p.PeopleID = ir.BuyerId";
                    BuyerList = db.Database.SqlQuery<BuyerBrandCategory>(query).ToList();
                }

            }
            return BuyerList;

        }


        [Route("sendToIRapprover")]
        [AcceptVerbs("POST")]
        public POResult sendtoappNew(IRdata pom)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                int? POID = pom.PurchaseOrderId;
                int? IRMID = pom.IRMasterId;
                var IcLeadApprove = context.IrExtendInvoiceDateApprovals.Where(x => x.IRMasterId == pom.IRMasterId).OrderByDescending(x => x.Id).FirstOrDefault();
                if (IcLeadApprove != null && IcLeadApprove.Status != "Approved")
                {
                    if (IcLeadApprove.Status == "Pending")
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Pending From IC Dept. Lead";
                    }
                    else if (IcLeadApprove.Status == "Rejected")
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Rejected By IC Dept. Lead. Please Change the Invoice Date";
                    }
                }
                else
                {
                    var buyerDatalist = pom.AssignBuyerIDs;
                    var BuyerderIds = buyerDatalist.Where(x => x.Value == true).Select(x => x.BuyerId).Distinct().ToList();
                    var bUyernewlist = context.Peoples.Where(x => BuyerderIds.Contains(x.PeopleID) && !x.Deleted).ToList();
                    var Irapprovs = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == POID && x.IRMasterId == IRMID).ToList();
                    if (Irapprovs != null && Irapprovs.Any())
                    {
                        foreach (var a in Irapprovs)
                        {
                            a.IsActive = false;
                            a.IsDeleted = true;
                            context.Entry(a).State = EntityState.Modified;
                            context.Commit();
                        }

                    }
                    PurchaseOrderMaster pm = context.DPurchaseOrderMaster.Where(q => q.PurchaseOrderId == POID).SingleOrDefault();
                    pm.IrStatus = "pending";
                    context.Entry(pm).State = EntityState.Modified;

                    IRMaster irm = context.IRMasterDB.Where(q => q.Id == IRMID && q.PurchaseOrderId == POID).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();
                    if (irm != null)
                    {
                        irm.IRStatus = "Pending from Buyer side";
                        context.Entry(irm).State = EntityState.Modified;
                    }
                    #region Assign to Brand Buyers              

                    if (bUyernewlist != null && bUyernewlist.Any())
                    {
                        foreach (var BD in bUyernewlist)
                        {
                            var ActivePeople = context.Peoples.Where(x => x.PeopleID == BD.PeopleID && x.Active == true).FirstOrDefault();
                            var WarePermission = context.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleID && x.IsDeleted == false).FirstOrDefault();
                            if (ActivePeople != null && WarePermission != null)
                            {
                                var iRStatus = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId && x.BuyerId == BD.PeopleID && x.IRMasterId == IRMID).FirstOrDefault();
                                if (iRStatus == null)
                                {
                                    IRApprovalStatus iR = new IRApprovalStatus();
                                    iR.BuyerId = BD != null ? BD.PeopleID : 0;
                                    iR.PurchaseOrderId = irm.PurchaseOrderId;
                                    iR.IsApprove = 0;
                                    iR.IsActive = true;
                                    iR.IRMasterId = irm.Id;
                                    iR.CreatedDate = DateTime.Now;
                                    iR.ModifiedDate = DateTime.Now;
                                    context.IRApprovalStatus.Add(iR);
                                    context.Commit();
                                }
                                else
                                {
                                    iRStatus.IsApprove = 0;
                                    iRStatus.IsActive = true;
                                    iRStatus.IsDeleted = false;
                                    iRStatus.ModifiedDate = DateTime.Now;
                                    context.Entry(iRStatus).State = EntityState.Modified;
                                    context.Commit();
                                }
                                pOResult.Status = true;
                            }

                        }

                    }
                    else
                    {
                        IRApprovalStatus iR = new IRApprovalStatus();
                        iR.BuyerId = irm.BuyerId.Value;
                        iR.PurchaseOrderId = irm.PurchaseOrderId;
                        iR.IsApprove = 0;
                        iR.IsActive = true;
                        iR.IRMasterId = irm.Id;
                        iR.CreatedDate = DateTime.Now;
                        iR.ModifiedDate = DateTime.Now;
                        context.IRApprovalStatus.Add(iR);
                        context.Commit();
                        pOResult.Status = true;
                    }

                    #endregion
                    if (pOResult.Status == true)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Send For approval Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Data not update.";
                    }
                }
            }
            return pOResult;
        }


        [Route("RejectedIRUpdateNew")]
        [AcceptVerbs("POST")]
        public POResult RejectedIRUpdateNew(RejectedIRData pom)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                IRMaster IRM = context.IRMasterDB.Where(x => x.Id == pom.iRMasterDc.Id).Include(x => x.InvoiceReceiptDetails).FirstOrDefault();

                if (IRM != null)
                {
                    var purchaseMaster = context.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == pom.iRMasterDc.PurchaseOrderId);
                    People people = context.Peoples.Where(q => q.PeopleID == userid && q.Active == true).SingleOrDefault();

                    var Irapprovs = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == IRM.PurchaseOrderId && x.IRMasterId == IRM.Id).ToList();
                    if (Irapprovs != null && Irapprovs.Any())
                    {
                        foreach (var a in Irapprovs)
                        {
                            a.IsActive = false;
                            a.IsDeleted = true;
                            context.Entry(a).State = EntityState.Modified;
                            context.Commit();
                        }

                    }

                    purchaseMaster.IrStatus = "Pending from Buyer side";
                    context.Entry(purchaseMaster).State = EntityState.Modified;

                    IRM.TotalAmount = Math.Round(Convert.ToDouble(pom.iRMasterDc.IRItemDcs.Sum(a => a.TotalAmount)), 2);
                    IRM.TotalAmountRemaining = IRM.TotalAmount;
                    IRM.IRAmountWithTax = IRM.TotalAmount;
                    IRM.Gstamt = Math.Round(Convert.ToDouble(pom.iRMasterDc.IRItemDcs.Sum(a => a.GSTAmount)), 2);
                    IRM.IRAmountWithOutTax = Math.Round(Convert.ToDouble(IRM.TotalAmount - IRM.Gstamt), 2);

                    if (pom.iRMasterDc.Discount == null)
                    {
                        pom.iRMasterDc.Discount = 0;
                    }
                    else
                    {
                        IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount - pom.iRMasterDc.Discount), 2);
                        IRM.TotalAmountRemaining = Convert.ToDouble(IRM.TotalAmount);
                        IRM.IRAmountWithTax = Convert.ToDouble(IRM.TotalAmount);
                    }

                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (pom.iRMasterDc.OtherAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (pom.iRMasterDc.ExpenseAmount ?? 0)), 2);
                    IRM.TotalAmount = Math.Round(Convert.ToDouble(IRM.TotalAmount + (pom.iRMasterDc.RoundofAmount ?? 0)), 2);

                    IRM.Discount = Math.Round(Convert.ToDouble(pom.iRMasterDc.Discount), 2);
                    IRM.IRStatus = "Pending from Buyer side";
                    IRM.PurchaseOrderId = pom.iRMasterDc.PurchaseOrderId;
                    IRM.supplierId = purchaseMaster.SupplierId;
                    IRM.SupplierName = purchaseMaster.SupplierName;
                    IRM.BuyerId = purchaseMaster.BuyerId;
                    IRM.BuyerName = purchaseMaster.BuyerName;
                    IRM.WarehouseId = purchaseMaster.WarehouseId;
                    IRM.ExpenseAmount = pom.iRMasterDc.ExpenseAmount;
                    IRM.OtherAmount = pom.iRMasterDc.OtherAmount;
                    IRM.ExpenseAmountRemark = pom.iRMasterDc.ExpenseAmountRemark;
                    IRM.OtherAmountRemark = pom.iRMasterDc.OtherAmountRemark;
                    IRM.RoundofAmount = pom.iRMasterDc.RoundofAmount;
                    IRM.ExpenseAmountType = pom.iRMasterDc.ExpenseAmountType;
                    IRM.OtherAmountType = pom.iRMasterDc.OtherAmountType;
                    IRM.RoundoffAmountType = pom.iRMasterDc.RoundoffAmountType;
                    //IRM.mo = people.DisplayName;
                    IRM.FreightAmount = pom.iRMasterDc.FreightAmount;
                    if (pom.iRMasterDc.DueDays > 0)
                    {
                        IRM.DueDays = pom.iRMasterDc.DueDays;
                    }
                    else
                    {
                        IRM.DueDays = 0;
                    }
                    IRM.IRID = pom.iRMasterDc.InvoiceNumber;
                    IRM.IRNNumber = pom.iRMasterDc.IRNNumber;
                    foreach (var iRItemDc in pom.iRMasterDc.IRItemDcs)
                    {
                        InvoiceReceiptDetail iRItem = IRM.InvoiceReceiptDetails.First(x => (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.IsActive && x.Id == iRItemDc.IRItemId);
                        if (iRItem != null)
                        {
                            double discountamt = 0;
                            if (iRItemDc.DesA.HasValue && iRItemDc.DesA.Value > 0)
                                discountamt = Convert.ToDouble(iRItemDc.DesA);
                            else if (iRItemDc.DesP.HasValue && iRItemDc.DesP.Value > 0)
                            {
                                discountamt = iRItem.IRQuantity * iRItemDc.Price * Convert.ToDouble(iRItemDc.DesP) / 100;
                            }
                            iRItem.CessTaxPercentage = iRItemDc.TotalCessPercentage;
                            iRItem.ModifiedBy = userid;
                            iRItem.ModifiedDate = DateTime.Now;
                            iRItem.DiscountAmount = iRItemDc.DesA;
                            iRItem.DiscountPercent = iRItemDc.DesP;
                            iRItem.Price = iRItemDc.Price;
                            iRItem.Status = 1;
                            iRItem.TotalTaxPercentage = iRItemDc.TotalTaxPercentage;
                            iRItem.TotalTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalTaxPercentage / 100;
                            iRItem.CessTaxAmount = ((iRItem.IRQuantity * iRItemDc.Price) - discountamt) * iRItemDc.TotalCessPercentage / 100;
                            iRItem.GSTPercentage = iRItemDc.TotalTaxPercentage;
                            iRItem.GSTAmount = iRItem.TotalTaxAmount;
                            iRItem.IsFreeItem = iRItem.IsFreeItem;
                            context.Entry(iRItem).State = EntityState.Modified;
                        }
                    }
                    #region Assign to Brand Buyers    

                    int? POID = IRM.PurchaseOrderId;
                    int? IRMID = IRM.Id;
                    var buyerDatalist = pom.AssignBuyerIDs;
                    var BuyerderIds = buyerDatalist.Where(x => x.Value == true).Select(x => x.BuyerId).Distinct().ToList();
                    var bUyernewlist = context.Peoples.Where(x => BuyerderIds.Contains(x.PeopleID) && !x.Deleted).ToList();


                    if (bUyernewlist != null && bUyernewlist.Any())
                    {
                        foreach (var BD in bUyernewlist)
                        {
                            var ActivePeople = context.Peoples.Where(x => x.PeopleID == BD.PeopleID && x.Active == true).FirstOrDefault();
                            var WarePermission = context.WarehousePermissionDB.Where(x => x.WarehouseId == IRM.WarehouseId && x.PeopleID == BD.PeopleID && x.IsDeleted == false).FirstOrDefault();
                            if (ActivePeople != null && WarePermission != null)
                            {
                                var iRStatus = context.IRApprovalStatus.Where(x => x.PurchaseOrderId == IRM.PurchaseOrderId && x.BuyerId == BD.PeopleID && x.IRMasterId == IRMID).FirstOrDefault();
                                if (iRStatus == null)
                                {
                                    IRApprovalStatus iR = new IRApprovalStatus();
                                    iR.BuyerId = BD != null ? BD.PeopleID : 0;
                                    iR.PurchaseOrderId = IRM.PurchaseOrderId;
                                    iR.IsApprove = 0;
                                    iR.IsActive = true;
                                    iR.IRMasterId = IRM.Id;
                                    iR.CreatedDate = DateTime.Now;
                                    iR.ModifiedDate = DateTime.Now;
                                    context.IRApprovalStatus.Add(iR);
                                    context.Commit();
                                }
                                else
                                {
                                    iRStatus.IsApprove = 0;
                                    iRStatus.IsActive = true;
                                    iRStatus.IsDeleted = false;
                                    iRStatus.ModifiedDate = DateTime.Now;
                                    context.Entry(iRStatus).State = EntityState.Modified;
                                    context.Commit();
                                }
                                pOResult.Status = true;
                            }

                        }

                    }
                    else
                    {
                        IRApprovalStatus iR = new IRApprovalStatus();
                        iR.BuyerId = IRM.BuyerId.Value;
                        iR.PurchaseOrderId = IRM.PurchaseOrderId;
                        iR.IsApprove = 0;
                        iR.IsActive = true;
                        iR.IRMasterId = IRM.Id;
                        iR.CreatedDate = DateTime.Now;
                        iR.ModifiedDate = DateTime.Now;
                        context.IRApprovalStatus.Add(iR);
                        context.Commit();
                        pOResult.Status = true;
                    }

                    #endregion

                    context.Entry(IRM).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Accepted Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Issue during save IR detail.";
                    }

                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "IR Data not found.";
                }
            }

            return pOResult;
        }


        [Route("GetPRuser")]
        [HttpGet]
        public bool GetPRUser(int POID)
        {
            using (var db = new AuthContext())
            {
                bool result = false;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var userVerified = db.PRPaymentAppoved.Where(x => x.PRId == POID && x.ApprovedBY == userid && x.IsActive == true).FirstOrDefault();
                if (userVerified != null)
                {
                    result = true;
                }
                return result;
            }
        }

        [Route("addIRReceiptNew")]
        [AcceptVerbs("POST")]
        public POResult addIRReceiptNew(Irimageupload IRInvoice)
        {
            POResult pOResult = new POResult();
            using (var context = new AuthContext())
            {
                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0, Warehouse_id = 0;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);


                if (IRInvoice != null)
                {
                    if (IRInvoice.IsIrExtendInvoiceDate == true)
                    {
                        IrExtendInvoiceDateApproval IrExtendInvoiceDateApprovals = new IrExtendInvoiceDateApproval();
                        var ExistId = context.IrExtendInvoiceDateApprovals.Where(x => x.IRMasterId == IRInvoice.irdetail.IRMasterId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                        if (ExistId == null)
                        {
                            IrExtendInvoiceDateApprovals.IRMasterId = IRInvoice.irdetail.IRMasterId;
                            IrExtendInvoiceDateApprovals.Status = "Pending";
                            IrExtendInvoiceDateApprovals.CreatedDate = indianTime;
                            IrExtendInvoiceDateApprovals.CreatedBy = userid;
                            IrExtendInvoiceDateApprovals.IsActive = true;
                            IrExtendInvoiceDateApprovals.IsDeleted = false;
                            context.IrExtendInvoiceDateApprovals.Add(IrExtendInvoiceDateApprovals);
                            context.Commit();
                        }
                    }
                    PurchaseOrderMaster pm = context.DPurchaseOrderMaster.Where(q => q.PurchaseOrderId == IRInvoice.irdetail.PurchaseOrderId).SingleOrDefault();
                    pm.IrStatus = "IR Uploaded";
                    context.Entry(pm).State = EntityState.Modified;

                    IRMaster ir = context.IRMasterDB.Where(a => a.Id == IRInvoice.irdetail.IRMasterId).SingleOrDefault();
                    ir.IRStatus = "IR Uploaded";
                    ir.Remark = IRInvoice.irdetail.Remark;
                    context.Entry(ir).State = EntityState.Modified;

                    if (IRInvoice != null)
                    {
                        var data = context.InvoiceImageDb.Where(x => x.InvoiceNumber == IRInvoice.irdetail.InvoiceNumber && x.PurchaseOrderId == IRInvoice.irdetail.PurchaseOrderId && x.IsActive == true).ToList();
                        foreach (var i in data)
                        {
                            i.IsActive = false;
                            context.Entry(i).State = EntityState.Modified;
                        }
                    }


                    foreach (var IrLogoURl in IRInvoice.irimageslist)
                    {

                        var invoice = context.InvoiceImageDb.FirstOrDefault(x => x.PurchaseOrderId == IRInvoice.irdetail.PurchaseOrderId && x.InvoiceNumber == IRInvoice.irdetail.InvoiceNumber);
                        //if (invoice != null && invoice.Id > 0)
                        //{
                        //    invoice.IRAmount = IRInvoice.irdetail.IRAmount;
                        //    invoice.IRLogoURL = IrLogoURl.irimages;
                        //    invoice.InvoiceDate = IRInvoice.irdetail.InvoiceDate;
                        //    invoice.Remark = IRInvoice.irdetail.Remark;
                        //    context.Entry(invoice).State = EntityState.Modified;
                        //}
                        //else
                        //{
                        invoice = new InvoiceImage
                        {
                            Id = IRInvoice.irdetail.Id,
                            InvoiceNumber = IRInvoice.irdetail.InvoiceNumber,
                            PurchaseOrderId = IRInvoice.irdetail.PurchaseOrderId,
                            WarehouseId = pm.WarehouseId,
                            IRAmount = IRInvoice.irdetail.IRAmount,
                            IRLogoURL = IrLogoURl.irimages,
                            InvoiceDate = IRInvoice.irdetail.InvoiceDate,
                            SupplierId = pm.SupplierId,
                            SupplierName = pm.SupplierName,
                            Remark = IRInvoice.irdetail.Remark,
                            CompanyId = compid,
                            CreationDate = indianTime,
                            IsActive = true
                        };

                        context.InvoiceImageDb.Add(invoice);
                        //}
                    }

                    if (context.Commit() > 0)
                    {
                        pOResult.Status = true;
                        pOResult.Message = "IR Receipt Save Successfully.";
                    }
                    else
                    {
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during save IR receipt.";
                    }
                }
                else
                {
                    pOResult.Status = false;
                    pOResult.Message = "Please add IR Receipt.";
                }



            }

            return pOResult;
        }


        [Route("GetIRuserCheck")]
        [HttpGet]
        public bool GetIRuserCheck(int POID, int IRMasterId)
        {
            using (var db = new AuthContext())
            {
                bool result = false;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var userVerified = db.IRApprovalStatus.Where(x => x.PurchaseOrderId == POID && x.IRMasterId == IRMasterId && x.BuyerId == userid && x.IsApprove == 1 && x.IsActive == true).FirstOrDefault();
                if (userVerified != null)
                {
                    result = true;
                }
                return result;
            }
        }


        [Route("PoWarehouse")]
        [HttpGet]
        public IEnumerable<Warehouse> Get()
        {
            using (AuthContext context = new AuthContext())
            {
                List<Warehouse> ass = new List<Warehouse>();

                var identity = User.Identity as ClaimsIdentity;
                int compid = 0, userid = 0;
                int Warehouse_id = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (Warehouse_id > 0)
                {
                    ass = context.AllWarehouseWid(compid, Warehouse_id).OrderBy(a => a.CityName).ToList();
                    return ass;
                }
                else
                {
                    ass = context.AllWarehouse(compid).OrderBy(a => a.CityName).ToList();
                    return ass;
                }
            }
        }


        [Route("GetPO")]
        [HttpPost]
        public PaggingData GetPRlist(objDTIR obj)
        {
            logger.Info("start ItemMaster: ");

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            int CompanyId = compid;
            logger.Info("User ID : {0} , Company Id : {1}", compid, userid, obj.WHID);
            using (var context = new AuthContext())
            {
                PaggingData Result = new PaggingData();
                if (obj.WHID > 0 && obj.value == 1)
                {
                    List<GoodsReceivedDetailDTo> Polist = new List<GoodsReceivedDetailDTo>();
                    if (obj.From != null)
                    {
                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId " +
                             "where a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('Approved','Self Approved')";
                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    }
                    else
                    {
                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId " +
                             "where a.WarehouseId =" + obj.WHID + "and a.Status in  ('Approved','Self Approved')";
                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    }
                    //Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    Result.total_count = Polist.Count();
                    Result.ordermaster = Polist.OrderByDescending(x => x.PurchaseOrderId).Skip((obj.page - 1) * obj.list).Take(obj.list).ToList();
                    return Result;
                }
                if (obj.WHID > 0 && obj.value == 2)
                {
                    List<GoodsReceivedDetailDTo> Polist = new List<GoodsReceivedDetailDTo>();
                    if (obj.From != null)
                    {

                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                             " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where  a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('UN Partial Received','Partial Received','CN Partial Received')";
                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    }
                    else
                    {

                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                             " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where a.WarehouseId =" + obj.WHID + "and a.Status in  ('UN Partial Received','Partial Received','CN Partial Received')";
                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();

                    }
                    Result.total_count = Polist.Count();
                    Result.ordermaster = Polist.OrderByDescending(x => x.PurchaseOrderId).Skip((obj.page - 1) * obj.list).Take(obj.list).ToList();
                    return Result;
                }
                if (obj.WHID > 0 && obj.value == 3)
                {
                    List<GoodsReceivedDetailDTo> Polist = new List<GoodsReceivedDetailDTo>();
                    if (obj.From != null)
                    {
                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                             " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('CN Received')";

                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    }
                    else
                    {
                        string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                           " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                            " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where a.WarehouseId =" + obj.WHID + "and a.Status in  ('CN Received')";

                        Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();

                    }
                    Result.total_count = Polist.Count();
                    Result.ordermaster = Polist.OrderByDescending(x => x.PurchaseOrderId).Skip((obj.page - 1) * obj.list).Take(obj.list).ToList();
                    return Result;
                }
                if (obj.WHID > 0)
                {
                    List<GoodsReceivedDetailDTo> Polist = new List<GoodsReceivedDetailDTo>();
                    string query = "select distinct (a.PurchaseOrderId),a.SupplierName,a.WarehouseName,a.CreationDate,a.Status,a.DepoName" +
                        " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                         " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where  a.WarehouseId =" + obj.WHID + "and a.Status in  ('Approved','Self Approved','CN Received','UN Partial Received','Partial Received','CN Partial Received')";

                    Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                    Result.total_count = Polist.Count();
                    Result.ordermaster = Polist.OrderByDescending(x => x.PurchaseOrderId).Skip((obj.page - 1) * obj.list).Take(obj.list).ToList();
                    return Result;
                }
                return Result;
            }

        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        [Route("GetPOExport")]
        [HttpPost]
        public HttpResponseMessage Getexport(ExportobjDTIR obj)
        {
            logger.Info("start ItemMaster: ");

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            int CompanyId = compid;
            logger.Info("User ID : {0} , Company Id : {1}", compid, userid, obj.WHID);
            using (var context = new AuthContext())
            {
                List<GoodsReceivedDetailCExport> result = new List<GoodsReceivedDetailCExport>();
                PaggingData Result = new PaggingData();
                if (obj.WHID > 0 && obj.value == 1 && obj.From != null)
                {
                    string query = "select  a.PurchaseOrderId,a.SupplierName,a.WarehouseName,p.ItemName,p.Price,p.PurchaseQty,a.CreationDate,a.Status,a.DepoName" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId " +
                             "where a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('Approved','Self Approved')";
                    result = context.Database.SqlQuery<GoodsReceivedDetailCExport>(query).ToList();
                }
                if (obj.WHID > 0 && obj.value == 2 && obj.From != null)
                {
                    List<GoodsReceivedDetailDTo> Polist = new List<GoodsReceivedDetailDTo>();
                    string query = "select a.PurchaseOrderId,a.SupplierName,a.WarehouseName,p.ItemName,p.Price,p.PurchaseQty,a.CreationDate,a.Status,a.DepoName,d.Qty" +
                          " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                           " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where  a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('UN Partial Received','Partial Received','CN Partial Received')";
                    result = context.Database.SqlQuery<GoodsReceivedDetailCExport>(query).ToList();

                }


                if (obj.WHID > 0 && obj.value == 3 && obj.From != null)
                {

                    string query = "select a.PurchaseOrderId,a.SupplierName,a.WarehouseName,p.ItemName,p.Price,p.PurchaseQty,a.CreationDate,a.Status,a.DepoName,d.Qty" +
                            " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                             " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where a.CreationDate > '" + obj.From.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.CreationDate <= ' " + obj.TO.Value.ToString("MM-dd-yyyy HH:mm:ss") + "'and a.WarehouseId =" + obj.WHID + "and a.Status in  ('CN Received')";

                    result = context.Database.SqlQuery<GoodsReceivedDetailCExport>(query).ToList();

                }
                //if (obj.WHID > 0)
                //{

                //    string query = "select  a.PurchaseOrderId,a.SupplierName,a.WarehouseName,a.CreationDate,a.Status" +
                //        " from PurchaseOrderMasters a  join PurchaseOrderDetails p on a.PurchaseOrderId = p.PurchaseOrderId  join GoodsReceivedDetails d on" +
                //         " p.PurchaseOrderDetailId = d.PurchaseOrderDetailId where  a.WarehouseId =" + obj.WHID + "and a.Status in  ('Approved','Self Approved','CN Received','UN Partial Received','Partial Received','CN Partial Received')";

                //    result = context.Database.SqlQuery<GoodsReceivedDetailCExport>(query).ToList();

                //}
                return Request.CreateResponse(HttpStatusCode.OK, result);
            }


        }



        [Route("GetPOTAT")]
        [HttpGet]
        public PaggingData GetReport(int list, int page, int Warehouseid)
        {
            logger.Info("start ItemMaster: ");

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            int CompanyId = compid;
            logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
            using (var context = new AuthContext())
            {
                PaggingData Result = new PaggingData();

                List<POTATReport> PoTAT = new List<POTATReport>();

                string query = "SELECT a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate,Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, b.CreatedDate)/60.0) as decimal (10,2))[PotoGRTAT] ,Cast(Avg(DATEDIFF(MINUTE, b.CreatedDate, d.CreatedDate)/60.0) as decimal (10,2))[GRtoIRTAT],Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, d.CreatedDate)/60.0) as decimal (10,2))[POtoIRTAT] from" +
                               " PurchaseOrderMasters c LEFT OUTER JOIN PurchaseOrderDetails a on c.PurchaseOrderId = a.PurchaseOrderId  LEFT OUTER JOIN GoodsReceivedDetails b on a.PurchaseOrderDetailId = b.PurchaseOrderDetailId LEFT OUTER JOIN InvoiceReceiptDetails d on b.Id = d.GoodsReceivedDetailId where a.WarehouseId=" + Warehouseid + "and  b.Id > 0 group by a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate";
                PoTAT = context.Database.SqlQuery<POTATReport>(query).ToList();

                //Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                Result.total_count = PoTAT.Count();
                Result.ordermaster = PoTAT.OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();
                return Result;


            }


        }

        [Route("SearchPOTAT")]
        [HttpGet]
        public HttpResponseMessage SearchPOTAT(int PurchaseOrderId)
        {
            logger.Info("start ItemMaster: ");
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            int CompanyId = compid;
            logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
            using (var context = new AuthContext())
            {
                PaggingData Result = new PaggingData();

                List<POTATReport> PoTAT = new List<POTATReport>();

                string query = "SELECT a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate,Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, b.CreatedDate)/60.0) as decimal (10,2))[PotoGRTAT] ,Cast(Avg(DATEDIFF(MINUTE, b.CreatedDate, d.CreatedDate)/60.0) as decimal (10,2))[GRtoIRTAT],Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, d.CreatedDate)/60.0) as decimal (10,2))[POtoIRTAT] from" +
                               " PurchaseOrderMasters c LEFT OUTER JOIN PurchaseOrderDetails a on c.PurchaseOrderId = a.PurchaseOrderId  LEFT OUTER JOIN GoodsReceivedDetails b on a.PurchaseOrderDetailId = b.PurchaseOrderDetailId LEFT OUTER JOIN InvoiceReceiptDetails d on b.Id = d.GoodsReceivedDetailId where a.PurchaseOrderId=" + PurchaseOrderId + "and b.Id > 0 group by a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate";
                PoTAT = context.Database.SqlQuery<POTATReport>(query).ToList();

                //Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();

                return Request.CreateResponse(HttpStatusCode.OK, PoTAT);


            }


        }

        [Route("ExportPOTAT")]
        [HttpGet]
        public HttpResponseMessage ExportPOTAT(int Warehouseid, DateTime From, DateTime To)
        {
            logger.Info("start ItemMaster: ");

            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0;
            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            int CompanyId = compid;
            logger.Info("User ID : {0} , Company Id : {1}", compid, userid);
            using (var context = new AuthContext())
            {
                PaggingData Result = new PaggingData();

                List<POTATReport> PoTAT = new List<POTATReport>();
                string query = "SELECT a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate,Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, b.CreatedDate)/60.0) as decimal (10,2))[PotoGRTAT] ,Cast(Avg(DATEDIFF(MINUTE, b.CreatedDate, d.CreatedDate)/60.0) as decimal (10,2))[GRtoIRTAT],Cast(Avg(DATEDIFF(MINUTE, a.CreationDate, d.CreatedDate)/60.0) as decimal (10,2))[POtoIRTAT] from" +
                               " PurchaseOrderMasters c LEFT OUTER JOIN PurchaseOrderDetails a on c.PurchaseOrderId = a.PurchaseOrderId  LEFT OUTER JOIN GoodsReceivedDetails b on a.PurchaseOrderDetailId = b.PurchaseOrderDetailId LEFT OUTER JOIN InvoiceReceiptDetails d on b.Id = d.GoodsReceivedDetailId where c.CreationDate > '" + From.ToString("MM-dd-yyyy HH:mm:ss") + "'and c.CreationDate <= ' " + To.ToString("MM-dd-yyyy HH:mm:ss") + "'and c.WarehouseId=" + Warehouseid + "and b.Id > 0 group by a.PurchaseOrderId,a.WarehouseName,a.SupplierName,c.Status,c.CreationDate";
                PoTAT = context.Database.SqlQuery<POTATReport>(query).ToList();
                //Polist = context.Database.SqlQuery<GoodsReceivedDetailDTo>(query).ToList();
                return Request.CreateResponse(HttpStatusCode.OK, PoTAT);
            }
        }

        [Route("GetSupplierOutStandingAmount")]
        [HttpGet]
        public SupplierOutstandingAmount GetSupplierOutStandingAmount(int supplierId)
        {
            using (var db = new AuthContext())
            {
                SupplierOutstandingAmount SupplierOutstandingAmounts = db.Database.SqlQuery<SupplierOutstandingAmount>("Exec GetSupplierOutstandingIncludingGRAndAvanceOutstanding " + supplierId).FirstOrDefault();
                if (SupplierOutstandingAmounts == null)
                    SupplierOutstandingAmounts = new SupplierOutstandingAmount();
                return SupplierOutstandingAmounts;
            }
        }

        [Route("GetPOForClose")]
        [HttpPost]
        public List<PODetial> GetPOForClose(POCloseRequest pOCloseRequest)
        {
            List<PODetial> PODetials = new List<PODetial>();
            using (AuthContext db = new AuthContext())
            {
                var WareIdDtw = new DataTable();
                WareIdDtw.Columns.Add("IntValue");
                foreach (var item in pOCloseRequest.WarehouseIds)
                {
                    var dr = WareIdDtw.NewRow();
                    dr["IntValue"] = item;
                    WareIdDtw.Rows.Add(dr);
                }

                var Warehouseids = new SqlParameter
                {
                    ParameterName = "WarehouseId",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = WareIdDtw
                };

                var SupplierIdDtw = new DataTable();
                SupplierIdDtw.Columns.Add("IntValue");
                foreach (var item in pOCloseRequest.SupplierIds)
                {
                    var dr = SupplierIdDtw.NewRow();
                    dr["IntValue"] = item;
                    SupplierIdDtw.Rows.Add(dr);
                }

                var Supplierids = new SqlParameter
                {
                    ParameterName = "SupplierId",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = SupplierIdDtw
                };
                var StartDate = new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = pOCloseRequest.StartDate//.ToString("yyyy-MM-dd HH:mm:ss")
                };
                var EndDate = new SqlParameter
                {
                    ParameterName = "enddate",
                    Value = pOCloseRequest.EndDate//.ToString("yyyy-MM-dd HH:mm:ss")
                };
                var PurchaseOrderId = new SqlParameter
                {
                    ParameterName = "PurchaseOrderId",
                    Value = pOCloseRequest.PurchaseOrderId
                };
                var result = db.Database.SqlQuery<POCloseDetial>("GetPOForClose @startDate,@endDate,@WarehouseId,@SupplierId,@PurchaseOrderId", StartDate, EndDate, Warehouseids, Supplierids, PurchaseOrderId).ToList();

                if (result != null && result.Any())
                {
                    PODetials = result.GroupBy(x => new { x.PurchaseOrderId, x.CreationDate, x.SupplierName, x.WarehouseName, x.BuyerName, x.Status, x.IsCloseRejected, x.IsPOCloseProgress, x.ApprovalStatus, x.PickerType, x.FreightCharge })
                                      .Select(x => new PODetial
                                      {
                                          BuyerName = x.Key.BuyerName,
                                          CreationDate = x.Key.CreationDate,
                                          PurchaseOrderId = x.Key.PurchaseOrderId,
                                          Status = x.Key.Status,
                                          IsCloseRejected = x.Key.IsCloseRejected,
                                          IsPOCloseProgress = x.Key.IsPOCloseProgress,
                                          SupplierName = x.Key.SupplierName,
                                          WarehouseName = x.Key.WarehouseName,
                                          TotalGRAmount = x.Sum(y => y.GRAmount),
                                          TotalIrAmount = x.Sum(y => y.IrAmount),
                                          TotalPOPrice = x.Sum(y => y.TotalPOPrice),
                                          ApprovalStatus = x.Key.ApprovalStatus,
                                          PickerType = x.Key.PickerType,
                                          FreightCharge = x.Key.FreightCharge,
                                          POItemDetials = x.Select(y => new POItemDetial
                                          {
                                              ItemMultiMRPId = y.ItemMultiMRPId,
                                              Itemname = y.Itemname,
                                              TotalGRAmount = y.GRAmount,
                                              TotalGrQty = y.GrTotalQty,
                                              TotalIrAmount = y.IrAmount,
                                              TotalIRQty = y.IRTotalQty,
                                              TotalPOPrice = y.TotalPOPrice,
                                              TotalPOQty = y.TotalPOQty
                                          }).ToList()
                                      }).ToList();
                }
            }
            return PODetials;
        }

        [Route("SendPOForClose")]
        [HttpGet]
        public bool SendPOForClose(int purchaseOrderId)
        {
            bool result = false;
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
            using (AuthContext db = new AuthContext())
            {
                //string GRNCount = "Select count(*) from GoodsReceivedDetails a inner join PurchaseOrderDetails b on a.PurchaseOrderDetailId=b.PurchaseOrderDetailId where  a.IsActive=1 and a.IsDeleted=0 and b.PurchaseOrderId=" + purchaseOrderId;
                string query = "select  p.DisplayName,p.PeopleID,p.Email,p.Mobile from People p with(nolock)  where exists (select u.Id from AspNetUsers u  with(nolock)  inner join AspNetUserRoles ur  with(nolock)  on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r  with(nolock)  on ur.RoleId=r.Id inner join POClosedApprovals c with(nolock) on c.RoleName=r.Name) and p.Active=1";
                //int totcount = db.Database.SqlQuery<int>(GRNCount).FirstOrDefault();

                //if (totcount == 0)
                {
                    List<PeopleMinDc> PeopleMinDcs = db.Database.SqlQuery<PeopleMinDc>(query).ToList();
                    POClosedApprovalRequest pOClosedApprovalRequest = new POClosedApprovalRequest();
                    foreach (var item in PeopleMinDcs)
                    {
                        pOClosedApprovalRequest = new POClosedApprovalRequest();
                        pOClosedApprovalRequest.ApprovedBy = item.PeopleID;
                        //pOClosedApprovalRequest.ApprovedStatus = 3; //on hold
                        pOClosedApprovalRequest.CreatedBy = userid;
                        pOClosedApprovalRequest.CreatedDate = DateTime.Now;
                        pOClosedApprovalRequest.IsActive = true;
                        pOClosedApprovalRequest.IsDeleted = false;
                        pOClosedApprovalRequest.PurchaseOrderId = purchaseOrderId;
                        db.POClosedApprovalRequest.Add(pOClosedApprovalRequest);
                    }
                    if (db.Commit() > 0)
                    {
                        result = true;
                    }
                }
                //else
                //{
                //    result = false;
                //    //res.Status = false;
                //    //res.Message = "You cannot close, GRN in Progress";
                //}
            }
            return result;
        }

        [Route("GetClosePOForApproval")]
        [HttpGet]
        public List<PODetial> GetClosePOForApproval()
        {
            List<PODetial> PODetials = new List<PODetial>();
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (AuthContext db = new AuthContext())
            {
                var POApproval = db.POClosedApprovalRequest.Where(x => x.ApprovedBy == userid && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && (x.ApprovedStatus == 0)).ToList();
                if (POApproval != null && POApproval.Any())
                {
                    var WareIdDtw = new DataTable();
                    WareIdDtw.Columns.Add("IntValue");
                    foreach (var item in POApproval.Select(x => x.PurchaseOrderId).Distinct().ToList())
                    {
                        var dr = WareIdDtw.NewRow();
                        dr["IntValue"] = item;
                        WareIdDtw.Rows.Add(dr);
                    }

                    var PurchaseOrderIds = new SqlParameter
                    {
                        ParameterName = "PurchaseOrderIds",
                        SqlDbType = SqlDbType.Structured,
                        TypeName = "dbo.IntValues",
                        Value = WareIdDtw
                    };

                    var result = db.Database.SqlQuery<POCloseDetial>("GetClosePOForApproval @PurchaseOrderIds", PurchaseOrderIds).ToList();

                    if (result != null && result.Any())
                    {
                        PODetials = result.GroupBy(x => new { x.PurchaseOrderId, x.CreationDate, x.SupplierName, x.WarehouseName, x.BuyerName, x.Status, x.IsCloseRejected, x.PickerType, x.FreightCharge })
                                          .Select(x => new PODetial
                                          {
                                              BuyerName = x.Key.BuyerName,
                                              CreationDate = x.Key.CreationDate,
                                              PurchaseOrderId = x.Key.PurchaseOrderId,
                                              Status = x.Key.Status,
                                              IsCloseRejected = x.Key.IsCloseRejected,
                                              SupplierName = x.Key.SupplierName,
                                              WarehouseName = x.Key.WarehouseName,
                                              TotalGRAmount = x.Sum(y => y.GRAmount),
                                              TotalIrAmount = x.Sum(y => y.IrAmount),
                                              TotalPOPrice = x.Sum(y => y.TotalPOPrice),
                                              PickerType = x.Key.PickerType,
                                              FreightCharge = x.Key.FreightCharge,
                                              SendApprovalDate = POApproval.FirstOrDefault(y => y.PurchaseOrderId == x.Key.PurchaseOrderId).CreatedDate,
                                              POItemDetials = x.Select(y => new POItemDetial
                                              {
                                                  ItemMultiMRPId = y.ItemMultiMRPId,
                                                  Itemname = y.Itemname,
                                                  TotalGRAmount = y.GRAmount,
                                                  TotalGrQty = y.GrTotalQty,
                                                  TotalIrAmount = y.IrAmount,
                                                  TotalIRQty = y.IRTotalQty,
                                                  TotalPOPrice = y.TotalPOPrice,
                                                  TotalPOQty = y.TotalPOQty
                                              }).ToList()
                                          }).ToList();
                        PODetials = PODetials.OrderByDescending(x => x.PurchaseOrderId).ToList();
                    }
                }
            }

            return PODetials;
        }

        [Route("GetClosePOForApprovalFilter")]
        [HttpPost]
        public List<PODetial> GetClosePOForApprovalFilter(POCloseRequest pOCloseRequest)
        {
            List<PODetial> PODetials = new List<PODetial>();
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            using (AuthContext db = new AuthContext())
            {
                var POApproval = db.POClosedApprovalRequest.Where(x => x.ApprovedBy == userid && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && (x.ApprovedStatus == 0)).ToList();

                var WarehouseIdDtw = new DataTable();
                WarehouseIdDtw.Columns.Add("IntValue");
                foreach (var item in pOCloseRequest.WarehouseIds)
                {
                    var dr = WarehouseIdDtw.NewRow();
                    dr["IntValue"] = item;
                    WarehouseIdDtw.Rows.Add(dr);
                }

                var Warehouseids = new SqlParameter
                {
                    ParameterName = "WarehouseId",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = WarehouseIdDtw
                };


                var WareIdDtw = new DataTable();
                WareIdDtw.Columns.Add("IntValue");
                foreach (var item in pOCloseRequest.SupplierIds.Distinct().ToList())
                {
                    var dr = WareIdDtw.NewRow();
                    dr["IntValue"] = item;
                    WareIdDtw.Rows.Add(dr);
                }

                var SupplierIds = new SqlParameter
                {
                    ParameterName = "SupplierIds",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = WareIdDtw
                };

                var supIddt = new DataTable();
                supIddt.Columns.Add("IntValue");
                foreach (var item in POApproval.Select(x => x.PurchaseOrderId).Distinct().ToList())
                {
                    var dr = supIddt.NewRow();
                    dr["IntValue"] = item;
                    supIddt.Rows.Add(dr);
                }
                var PurchaseOrderIds = new SqlParameter
                {
                    ParameterName = "PurchaseOrderIds",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = supIddt
                };
                var PoId = new SqlParameter
                {
                    ParameterName = "PurchaseOrderId",
                    SqlDbType = SqlDbType.Int,
                    Value = pOCloseRequest.PurchaseOrderId
                };

                var result = db.Database.SqlQuery<POCloseDetial>("GetClosePOForApprovalFilter @SupplierIds,@PurchaseOrderIds,@PurchaseOrderId,@WarehouseId", SupplierIds, PurchaseOrderIds, PoId, Warehouseids).ToList();

                if (result != null && result.Any())
                {
                    PODetials = result.GroupBy(x => new { x.PurchaseOrderId, x.CreationDate, x.SupplierName, x.WarehouseName, x.BuyerName, x.Status, x.IsCloseRejected })
                                      .Select(x => new PODetial
                                      {
                                          BuyerName = x.Key.BuyerName,
                                          CreationDate = x.Key.CreationDate,
                                          PurchaseOrderId = x.Key.PurchaseOrderId,
                                          Status = x.Key.Status,
                                          IsCloseRejected = x.Key.IsCloseRejected,
                                          SupplierName = x.Key.SupplierName,
                                          WarehouseName = x.Key.WarehouseName,
                                          TotalGRAmount = x.Sum(y => y.GRAmount),
                                          TotalIrAmount = x.Sum(y => y.IrAmount),
                                          TotalPOPrice = x.Sum(y => y.TotalPOPrice),
                                          SendApprovalDate = POApproval.FirstOrDefault(y => y.PurchaseOrderId == x.Key.PurchaseOrderId).CreatedDate,
                                          POItemDetials = x.Select(y => new POItemDetial
                                          {
                                              ItemMultiMRPId = y.ItemMultiMRPId,
                                              Itemname = y.Itemname,
                                              TotalGRAmount = y.GRAmount,
                                              TotalGrQty = y.GrTotalQty,
                                              TotalIrAmount = y.IrAmount,
                                              TotalIRQty = y.IRTotalQty,
                                              TotalPOPrice = y.TotalPOPrice,
                                              TotalPOQty = y.TotalPOQty
                                          }).ToList()
                                      }).ToList();
                    PODetials = PODetials.OrderByDescending(x => x.PurchaseOrderId).ToList();
                }

            }

            return PODetials;
        }

        [Route("POCloseApprove")]
        [HttpPost]
        public POResult POCloseApprove(POCloseApprovalRequest pOCloseApprovalRequest)
        {
            POResult res = new POResult();

            List<int> purchaseOrderIds = new List<int>();
            if (pOCloseApprovalRequest.purchaseOrderIds != null && pOCloseApprovalRequest.purchaseOrderIds.Count > 0)
            {
                foreach (var item in pOCloseApprovalRequest.purchaseOrderIds)
                {
                    purchaseOrderIds.Add(item);
                }
            }
            if (pOCloseApprovalRequest.purchaseOrderId != 0)
            {
                purchaseOrderIds.Add(pOCloseApprovalRequest.purchaseOrderId);
            }

            //bool result = false;
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            List<POClosedApprovalRequest> POApprovals = new List<POClosedApprovalRequest>();
            POClosedApprovalRequest POApproval = new POClosedApprovalRequest();

            using (AuthContext db = new AuthContext())
            {

                foreach (var PoId in purchaseOrderIds)
                {
                    string GRNCount = "Select count(*) from PurchaseOrderMasters a where  a.Active=1 and a.Deleted=0 and a.Status in ('UN Partial Received','UN Received')  and a.PurchaseOrderId=" + PoId;
                    int totcount = db.Database.SqlQuery<int>(GRNCount).FirstOrDefault();
                    if (totcount == 0)
                    {
                        POApprovals = db.POClosedApprovalRequest.Where(x => x.PurchaseOrderId == PoId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).ToList();

                        if (POApprovals != null && POApprovals.Any(x => x.ApprovedBy == userid && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.ApprovedStatus == 0))
                        {
                            POApproval = POApprovals.FirstOrDefault(x => x.ApprovedBy == userid && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value) && x.ApprovedStatus == 0);
                            POApproval.ApprovedStatus = pOCloseApprovalRequest.ApprovedStatus;
                            POApproval.RejestedReson = pOCloseApprovalRequest.RejectedReasion;
                            POApproval.ModifiedBy = userid;
                            POApproval.ModifiedDate = DateTime.Now;

                            if (pOCloseApprovalRequest.ApprovedStatus == 1)
                            {
                                var purchaseorder = db.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == PoId);
                                purchaseorder.Status = "Closed";
                                db.Entry(purchaseorder).State = EntityState.Modified;

                            }

                            //if (pOCloseApprovalRequest.ApprovedStatus == 2)
                            //{
                            //    var porequest = db.POClosedApprovalRequest.FirstOrDefault(x => x.PurchaseOrderId == pOCloseApprovalRequest.purchaseOrderId && x.ApprovedBy == userid);
                            //    porequest.ApprovedStatus = 2;
                            //    db.Entry(porequest).State = EntityState.Modified;
                            //}

                            db.Entry(POApproval).State = EntityState.Modified;
                        }
                    }
                    else
                    {
                        res.Status = false;
                        res.Message = PoId.ToString();
                        return res;
                    }
                }
                if (db.Commit() > 0)
                {
                    res.Status = true;
                    if (POApprovals.All(x => x.ApprovedStatus == 1))
                    {
                        var purchaseOrderMaster = db.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == POApproval.PurchaseOrderId);
                        purchaseOrderMaster.Status = "Closed";
                        db.Entry(purchaseOrderMaster).State = EntityState.Modified;
                        db.Commit();
                    }
                }
            }
            return res;

        }

        [Route("GetRejectedPOApprovalsHistory")]
        [HttpGet]
        public List<POClosedApprovalRequest> GetRejectedPOApprovalsHistory(int PurchaseOrderId)
        {
            List<POClosedApprovalRequest> Polist = new List<POClosedApprovalRequest>();
            try
            {
                using (var context = new AuthContext())
                {
                    string query = "select * from POClosedApprovalRequests where PurchaseOrderId = " + PurchaseOrderId + "and ApprovedStatus = 2";
                    Polist = context.Database.SqlQuery<POClosedApprovalRequest>(query).ToList();
                }
                return Polist;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        [Route("GetPOWithNoGR/warehouseId/{warehouseId}/skip/{skip}/take/{take}/purchaseorderId/{purchaseorderId}")]

        [HttpGet]
        public POWithNoGrPageData GetPOWithNoGR(int warehouseId, int skip, int take, int purchaseorderId)
        {

            try
            {
                POWithNoGrPageData PODetials = new POWithNoGrPageData();
                //List<POWithNoGRDTO> PODetials = new List<POWithNoGRDTO>();
                using (AuthContext db = new AuthContext())
                {
                    var Warehouseids = new SqlParameter
                    {
                        ParameterName = "WarehouseId",
                        Value = warehouseId
                    };

                    var poid = new SqlParameter
                    {
                        ParameterName = "purchaseorderId",
                        Value = purchaseorderId
                    };

                    var skipval = new SqlParameter
                    {
                        ParameterName = "skip",
                        Value = skip
                    };

                    var takeval = new SqlParameter
                    {
                        ParameterName = "take",
                        Value = take
                    };

                    var result = db.Database.SqlQuery<POWithNoGRDTO>("GetPOWithNoGR @WarehouseId,@purchaseorderId,@skip,@take", Warehouseids, poid, skipval, takeval).ToList();
                    if (result != null && result.Any())
                    {
                        //var PO = result
                        //                  .Select(x => new POWithNoGRDTO
                        //                  {
                        //                      BuyerName = x.BuyerName,
                        //                      CreationDate = x.CreationDate,
                        //                      PurchaseOrderId = x.PurchaseOrderId,
                        //                      Status = x.Status,
                        //                      SupplierName = x.SupplierName,
                        //                      WarehouseName = x.WarehouseName,
                        //                  });
                        PODetials.netCount = result.FirstOrDefault().TotalCount;
                        PODetials.POData = result.ToList();
                    }
                }
                return PODetials;
            }
            catch (Exception e)
            {
                throw e;
            }
        }


        [Route("GetPurchaseOrderCloseRequests")]
        [HttpGet]
        public List<POClosedApprovalRequest> GetPurchaseOrderCloseRequests()
        {
            using (AuthContext db = new AuthContext())
            {
                List<POClosedApprovalRequest> Polist = new List<POClosedApprovalRequest>();
                string query = "select * from POClosedApprovalRequests";
                Polist = db.Database.SqlQuery<POClosedApprovalRequest>(query).OrderByDescending(x => x.Id).ToList();
                return Polist;
            }
        }

        [Route("TransferPOToHub/fromwarehouseId/{fromwarehouseId}/purchaseorderid/{purchaseorderid}/towarehouseid/{towarehouseid}")]
        [HttpGet]
        public bool TransferPOToHub(int fromwarehouseId, int purchaseorderid, int towarehouseid)
        {
            using (AuthContext db = new AuthContext())
            {
                var purchaseordermasters = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == purchaseorderid).Include(x => x.PurchaseOrderDetail).FirstOrDefault();
                var purchaseorderdetails = purchaseordermasters.PurchaseOrderDetail.ToList();
                var towarehouseidname = db.Warehouses.FirstOrDefault(x => x.WarehouseId == towarehouseid).WarehouseName;
                foreach (var pd in purchaseorderdetails)
                {
                    var itemId = db.itemMasters.FirstOrDefault(x => x.PurchaseSku == pd.PurchaseSku && x.WarehouseId == towarehouseid)?.ItemId;
                    pd.WarehouseId = towarehouseid;
                    pd.WarehouseName = towarehouseidname;
                    if (itemId.HasValue)
                    {
                        pd.ItemId = itemId.Value;
                    }
                    db.Entry(pd).State = EntityState.Modified;
                }

                purchaseordermasters.WarehouseId = towarehouseid;
                purchaseordermasters.WarehouseName = towarehouseidname;
                db.Entry(purchaseordermasters).State = EntityState.Modified;

                return db.Commit() > 0;
            }

        }

        [Route("SetAutoClosePO")]
        [HttpGet]
        [AllowAnonymous]
        public bool AutoClosePO()
        {
            using (AuthContext db = new AuthContext())
            {
                List<int> PurchaseOrderIds = db.Database.SqlQuery<int>("Exec AutoClosePurchaseOrder").ToList();
                if (PurchaseOrderIds != null && PurchaseOrderIds.Any())
                {
                    var purchaseOrderMasters = db.DPurchaseOrderMaster.Where(x => PurchaseOrderIds.Contains(x.PurchaseOrderId));
                    foreach (var item in purchaseOrderMasters)
                    {
                        item.Status = "Auto Closed";
                        item.PRStatus = 7;
                        db.Entry(item).State = EntityState.Modified;
                    }
                    db.Commit();
                }
            }
            return true;
        }

        [Route("GetAdvancePayment")]
        [HttpGet]
        public bool GetAdvancePayment(int POID)
        {
            using (var db = new AuthContext())
            {
                bool result = false;
                var identity = User.Identity as ClaimsIdentity;
                int userid = 0;

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var POStatus = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == POID).FirstOrDefault();
                if (POStatus.PRPaymentType == "AdvancePR")
                {
                    var Paymentvarified = db.PRPaymentAppoved.Where(x => x.PRId == POID && x.IsActive == true && x.IsApproved == true).FirstOrDefault();
                    if (Paymentvarified.IsPaymentDone == true)
                    {
                        result = true;
                    }
                }
                return result;
            }
        }

        [Route("ClonePRtoPR")]
        [AcceptVerbs("POST")]
        public POResult ClonePR(ClonePR clone)
        {
            POResult pOResult = new POResult();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (AuthContext db = new AuthContext())
            {
                var POMaster = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == clone.PurchaseOrderId).FirstOrDefault();
                var POItemDetails = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == clone.PurchaseOrderId).ToList();
                var People = db.Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();

                using (var dbContextTransaction = db.Database.BeginTransaction())
                {
                    List<ItemMaster> Items = new List<ItemMaster>();
                    double ETtlamt = POMaster.ETotalAmount;
                    PurchaseOrderMaster pm = new PurchaseOrderMaster();
                    var supplier = db.Suppliers.FirstOrDefault(x => x.SupplierId == POMaster.SupplierId);
                    pm.SupplierId = POMaster.SupplierId;
                    pm.SupplierName = POMaster.SupplierName;
                    pm.CreationDate = indianTime;
                    pm.WarehouseId = POMaster.WarehouseId;
                    pm.CompanyId = compid;
                    pm.WarehouseName = POMaster.WarehouseName;
                    pm.Status = "pending";
                    pm.progress = "0";
                    pm.PRType = 1;
                    pm.PRStatus = 1;
                    pm.PoType = "Manual";
                    pm.IsPR = true;
                    pm.BuyerId = POMaster.BuyerId;
                    pm.BuyerName = POMaster.BuyerName;
                    pm.Active = true;
                    pm.SupplierCreditDay = POMaster.SupplierCreditDay;
                    pm.PickerType = POMaster.PickerType;
                    pm.IsCashPurchase = POMaster.IsCashPurchase;
                    pm.CashPurchaseName = POMaster.CashPurchaseName;
                    pm.Advance_Amt = POMaster.Advance_Amt;
                    pm.DepoId = POMaster.DepoId;
                    pm.DepoName = POMaster.DepoName;
                    pm.CreatedBy = People.PeopleFirstName + " " + People.PeopleLastName;
                    pm.PRPaymentType = POMaster.PRPaymentType;
                    //pm.Status = "PR Send for Approval";
                    pm.ExpiryDays = supplier.ExpiryDays > 0 ? supplier.ExpiryDays : 7;
                    pm.PurchaseOrderDetail = new List<PurchaseOrderDetail>();

                    foreach (var data in POItemDetails)
                    {
                        PurchaseOrderDetail pd = new PurchaseOrderDetail();
                        pd.ItemId = data.ItemId;
                        pd.ItemNumber = data.ItemNumber;
                        pd.itemBaseName = data.itemBaseName;
                        pd.ItemMultiMRPId = data.ItemMultiMRPId;
                        pd.HSNCode = data.HSNCode;
                        pd.MRP = data.MRP;
                        pd.SellingSku = data.SellingSku;
                        pd.ItemName = data.ItemName;
                        pd.PurchaseQty = data.PurchaseQty;
                        pd.CreationDate = DateTime.Now;
                        pd.Status = "ordered";
                        pd.MOQ = data.MOQ;
                        pd.Price = data.Price;
                        pd.WarehouseId = data.WarehouseId;
                        pd.CompanyId = data.CompanyId;
                        pd.WarehouseName = data.WarehouseName;
                        pd.SupplierId = data.SupplierId;
                        pd.SupplierName = data.SupplierName;
                        pd.TotalQuantity = data.TotalQuantity;
                        pd.PurchaseName = data.PurchaseName;
                        pd.PurchaseSku = data.PurchaseSku;
                        pd.DepoId = data.DepoId;
                        pd.DepoName = data.DepoName;
                        pd.ConversionFactor = data.ConversionFactor;
                        pd.PurchaseOrderId = data.PurchaseOrderId;
                        pm.PurchaseOrderDetail.Add(pd);

                    }
                    pm.ETotalAmount = ETtlamt;
                    db.DPurchaseOrderMaster.Add(pm);
                    #region level allocation
                    if (ETtlamt >= 0)
                    {
                        PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == POMaster.WarehouseId).FirstOrDefault();
                        if (get_approvalz != null)
                        {
                            if (get_approvalz.Level == "Level1")  /// Self Approved
                            {
                                pm.Status = "PR Send for Approval";
                                pm.progress = "50";
                                pm.Level = "Level1";
                                pm.Approval1 = 0;
                                pm.Approval2 = 0;
                                pm.Approval3 = 0;
                                pm.Approval4 = 0;
                                pm.Approval5 = 0;
                                pm.ApprovalName1 = pm.CreatedBy;
                                pm.Rewiever1 = 0;
                                pm.Rewiever2 = 0;
                                pm.Rewiever3 = 0;
                                pm.Rewiever4 = 0;
                                pm.Rewiever5 = 0;
                                // pm.ApprovedBy = pm.CreatedBy;
                            }
                            else /// Send for approval
                            {
                                pm.Status = "PR Send for Approval";
                                pm.progress = "20";
                                pm.Level = get_approvalz.Level;
                                pm.Approval1 = get_approvalz.Approval1;
                                pm.Approval2 = get_approvalz.Approval2;
                                pm.Approval3 = get_approvalz.Approval3;
                                pm.Approval4 = get_approvalz.Approval4;
                                pm.Approval5 = get_approvalz.Approval5;
                                pm.Rewiever1 = get_approvalz.Reviewer1;
                                pm.Rewiever2 = get_approvalz.Reviewer2;
                                pm.Rewiever3 = get_approvalz.Reviewer3;
                                pm.Rewiever4 = get_approvalz.Reviewer4;
                                pm.Rewiever5 = get_approvalz.Reviewer5;
                                pm.ApprovalName1 = get_approvalz.ApprovalName1;
                                pm.ApprovalName2 = get_approvalz.ApprovalName2;
                                pm.ApprovalName3 = get_approvalz.ApprovalName3;
                                pm.ApprovalName4 = get_approvalz.ApprovalName4;
                                pm.ApprovalName5 = get_approvalz.ApprovalName5;
                                pm.RewieverName1 = get_approvalz.ReviewerName1;
                                pm.RewieverName2 = get_approvalz.ReviewerName2;
                                pm.RewieverName3 = get_approvalz.ReviewerName3;
                                pm.RewieverName4 = get_approvalz.ReviewerName4;
                                pm.RewieverName5 = get_approvalz.ReviewerName5;
                            }
                        }
                    }
                    #endregion
                    // string smstempmsg = " is waiting for your approval. ShopKirana";
                    string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                    smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                    smstempmsg = smstempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());


                    if (db.Commit() > 0)
                    {
                        dbContextTransaction.Commit();

                        pOResult.Status = true;
                        pOResult.Message = "PR save successfuly. PR # " + pm.PurchaseOrderId;
                    }
                    if (pOResult.Status == true)
                    {
                        ClonePo cl = new ClonePo();
                        cl.ClonePoId = clone.PurchaseOrderId;
                        cl.PurchaseOrderId = pm.PurchaseOrderId;
                        cl.CreatedBy = userid;
                        cl.CreatedDate = DateTime.Now;
                        cl.IsActive = true;
                        cl.IsDeleted = false;
                        db.ClonePos.Add(cl);

                        DataTable itemnumber = new DataTable();
                        itemnumber.Columns.Add("stringValue");
                        foreach (var item in POItemDetails)
                        {
                            var dr = itemnumber.NewRow();
                            dr["stringValue"] = item.ItemNumber;
                            itemnumber.Rows.Add(dr);
                        }
                        var idata = new SqlParameter("itemnumber", itemnumber);
                        idata.SqlDbType = SqlDbType.Structured;
                        idata.TypeName = "dbo.StringValues";

                        var pareWhh = new SqlParameter("@warehouseid", pm.WarehouseId);
                        var parep = new SqlParameter("@purchaseorderid", pm.PurchaseOrderId);
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();

                        var cmdd = db.Database.Connection.CreateCommand();
                        cmdd.CommandText = "GetItemsClassificationForClone";
                        cmdd.CommandType = CommandType.StoredProcedure;
                        cmdd.CommandTimeout = 600;
                        cmdd.Parameters.Add(idata);
                        cmdd.Parameters.Add(pareWhh);
                        cmdd.Parameters.Add(parep);
                        var readerr = cmdd.ExecuteReader();
                        List<GetClassificationCategoryData> pdList = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<GetClassificationCategoryData>(readerr).ToList();
                        db.Database.Connection.Close();


                        var ItemIds = pdList.Select(x => x.ItemId).Distinct().ToList();
                        if (ItemIds != null && ItemIds.Any())
                        {
                            Items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == pm.WarehouseId).ToList();
                        }

                        var datas = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).ToList();
                        foreach (var d in datas)
                        {
                            var cat = pdList.Where(x => x.ItemId == d.ItemId && x.Itemnumber == d.ItemNumber).Select(z => z.Category).FirstOrDefault();
                            d.Category = cat;
                            db.Entry(d).State = EntityState.Modified;
                            db.Commit();
                        }

                        var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                        var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                        if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                        {
                            var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                            var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                            //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                            ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                            var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                            string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                            List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                            // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                            List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                            if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                            {
                                //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                            }
                            else
                            {
                                //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                            }

                            if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                            {
                                #region getPeople
                                DataTable dtemail = new DataTable();
                                dtemail.Columns.Add("stringValue");
                                DataTable dtrole = new DataTable();
                                dtrole.Columns.Add("stringValue");
                                if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                {
                                    List<string> emaillst = new List<string>();
                                    string EmailIds = "";
                                    EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                    emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                    foreach (var item in emaillst)
                                    {
                                        var dr = dtemail.NewRow();
                                        dr["stringValue"] = item;
                                        dtemail.Rows.Add(dr);
                                    }

                                }
                                else
                                {
                                    List<string> rolelst = new List<string>();
                                    string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                    rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                    foreach (var item in rolelst)
                                    {
                                        var dr = dtrole.NewRow();
                                        dr["stringValue"] = item;
                                        dtrole.Rows.Add(dr);
                                    }
                                }


                                var paremail = new SqlParameter("emailIds", dtemail);
                                paremail.SqlDbType = SqlDbType.Structured;
                                paremail.TypeName = "dbo.StringValues";

                                var pareroles = new SqlParameter("roles", dtemail);
                                paremail.SqlDbType = SqlDbType.Structured;
                                paremail.TypeName = "dbo.StringValues";
                                var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                if (db.Database.Connection.State != ConnectionState.Open)
                                    db.Database.Connection.Open();

                                var cmd = db.Database.Connection.CreateCommand();
                                cmd.CommandText = "GetCreatePRApprovallist";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandTimeout = 600;
                                cmd.Parameters.Add(paremail);
                                cmd.Parameters.Add(pareroles);
                                cmd.Parameters.Add(pareWh);

                                var reader = cmd.ExecuteReader();
                                List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                    .ObjectContext
                                                    .Translate<BuyerMinDc>(reader).ToList();
                                db.Database.Connection.Close();
                                #endregion

                                var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                if (data.Count > 0 && data != null)
                                {
                                    foreach (var item in createPRAppovers)
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                        var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                        string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                        List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();
                                        if (Ids.Count > 0)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 1;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.Comments = "Approved By :" + name;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        else
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        //if (!PRStatusData)
                                        //{
                                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                        //    pr.ApprovalID = item.PeopleId;
                                        //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        //    pr.IsApprove = 1;
                                        //    pr.IsActive = true;
                                        //    pr.IsDeleted = false;
                                        //    pr.Comments = "Approved By :" + name;
                                        //    pr.CreatedDate = DateTime.Now;
                                        //    db.PRApprovelsStatus.Add(pr);
                                        //    db.Commit();
                                        //}
                                    }
                                    var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                    if (prapprov.All(x => x.IsApprove == 1))
                                    {

                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                        pm.Status = "Approved";
                                        pm.PRStatus = 3;
                                        pm.BuyerId = BuyerId;
                                        pm.BuyerName = buyerName;
                                        db.Entry(pm).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //string sid = string.Join(",", storeIds.Distinct().ToList());
                                            var roleName = "";
                                            foreach (var store in storeIds)
                                            {
                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                            }
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                if (!check)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;
                                                    pRPaymentAppoved.IsDeleted = false;
                                                    pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    foreach (var item in createPRAppovers)
                                    {

                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                        if (!PRStatusData)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        Sms s = new Sms();
                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                        string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                        db.Commit();
                                    }
                                }

                            }
                            else
                            {
                                string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                var dltSMSs = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                smsTempmsg = dltSMSs == null ? "" : dltSMSs.Template;

                                smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                                var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                                if (ApprovePersonss != null && ApprovePersonss.Any())
                                {
                                    var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                    List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                    if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                    }

                                    if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();

                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                            foreach (var item in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = item;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var item in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = item;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion
                                        var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string querys1 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(querys1).ToList();
                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }

                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = item.PeopleId;
                                                //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pm.Status = "Approved";
                                                pm.PRStatus = 3;
                                                pm.BuyerId = BuyerId;
                                                pm.BuyerName = buyerName;
                                                db.Entry(pm).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!check)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }

                                        }
                                        else
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }
                                        }


                                    }
                                    else
                                    {
                                        List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                        var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                        if (BDs == null)
                                            BDs = new List<BuyerMinDc>();
                                        BDs.AddRange(buyerMinDcs);


                                        if (BDs != null && BDs.Any())
                                        {
                                            foreach (var BD in BDs)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (ActivePeople != null && WarePermission != null)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                                else
                                                {

                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pm.BuyerId.Value;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pm.BuyerId.Value;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMSs = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            smsTempmsg = dltSMSs == null ? "" : dltSMSs.Template;

                            smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                            var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                            ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();

                            if (ApprovePersons != null && ApprovePersons.Any())
                            {
                                var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                }
                                else
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                }

                                if (finalApprovePersons != null && finalApprovePersons.Any())
                                {
                                    #region getPeople
                                    DataTable dtemail = new DataTable();
                                    dtemail.Columns.Add("stringValue");
                                    DataTable dtrole = new DataTable();
                                    dtrole.Columns.Add("stringValue");
                                    if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                    {
                                        List<string> emaillst = new List<string>();

                                        string EmailIds = "";
                                        EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                        emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                        foreach (var item in emaillst)
                                        {
                                            var dr = dtemail.NewRow();
                                            dr["stringValue"] = item;
                                            dtemail.Rows.Add(dr);
                                        }

                                    }
                                    else
                                    {
                                        List<string> rolelst = new List<string>();
                                        string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                        rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                        foreach (var item in rolelst)
                                        {
                                            var dr = dtrole.NewRow();
                                            dr["stringValue"] = item;
                                            dtrole.Rows.Add(dr);
                                        }
                                    }


                                    var paremail = new SqlParameter("emailIds", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";

                                    var pareroles = new SqlParameter("roles", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";
                                    var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                    if (db.Database.Connection.State != ConnectionState.Open)
                                        db.Database.Connection.Open();

                                    var cmd = db.Database.Connection.CreateCommand();
                                    cmd.CommandText = "GetCreatePRApprovallist";
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 600;
                                    cmd.Parameters.Add(paremail);
                                    cmd.Parameters.Add(pareroles);
                                    cmd.Parameters.Add(pareWh);

                                    var reader = cmd.ExecuteReader();
                                    List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                        .ObjectContext
                                                        .Translate<BuyerMinDc>(reader).ToList();
                                    db.Database.Connection.Close();
                                    #endregion
                                    var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                    if (data.Count > 0 && data != null)
                                    {
                                        foreach (var item in createPRAppovers)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            string querys2 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                            List<int> Ids = db.Database.SqlQuery<int>(querys2).ToList();

                                            if (Ids.Count > 0)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 1;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.Comments = "Approved By :" + name;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            //if (!PRStatusData)
                                            //{
                                            //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //    pr.ApprovalID = item.PeopleId;
                                            //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            //    pr.IsApprove = 1;
                                            //    pr.IsActive = true;
                                            //    pr.IsDeleted = false;
                                            //    pr.Comments = "Approved By :" + name;
                                            //    pr.CreatedDate = DateTime.Now;
                                            //    db.PRApprovelsStatus.Add(pr);
                                            //    db.Commit();
                                            //}
                                        }
                                        var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                        if (prapprov.All(x => x.IsApprove == 1))
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pm.Status = "Approved";
                                            pm.PRStatus = 3;
                                            pm.BuyerId = BuyerId;
                                            pm.BuyerName = buyerName;
                                            db.Entry(pm).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (var item in createPRAppovers)
                                        {
                                            //if (ETtlamt <= 2500000)
                                            //{
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            if (!PRStatusData)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            //}
                                            //else
                                            //{
                                            //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            //    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            //    if (!PRStatusData)
                                            //    {
                                            //        PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //        pr.ApprovalID = item.PeopleId;
                                            //        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            //        pr.IsApprove = 1;
                                            //        pr.Comments = "Approved By :" + name;
                                            //        pr.IsActive = true;
                                            //        pr.IsDeleted = false;
                                            //        pr.CreatedDate = DateTime.Now;
                                            //        db.PRApprovelsStatus.Add(pr);
                                            //        db.Commit();
                                            //    }
                                            //}
                                        }
                                    }


                                }

                                if (ETtlamt > 2500000)
                                {
                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                    pm.Status = "Approved";
                                    pm.PRStatus = 3;
                                    pm.BuyerId = BuyerId;
                                    pm.BuyerName = buyerName;
                                    db.Entry(pm).State = EntityState.Modified;

                                    if (db.Commit() > 0)
                                    {
                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                        //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                        var roleName = "";
                                        foreach (var store in storeIds)
                                        {
                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                        }
                                        if (!string.IsNullOrEmpty(roleName))
                                        {
                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                      roleName);

                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                            if (!check)
                                            {
                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                pRPaymentAppoved.CreatedBy = userid;
                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                pRPaymentAppoved.IsApproved = false;
                                                pRPaymentAppoved.IsActive = true;
                                                pRPaymentAppoved.IsDeleted = false;
                                                pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                            }
                                            Sms s = new Sms();
                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                            msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                            db.Commit();
                                        }

                                    }
                                }
                            }
                            else
                            {
                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                if (BDs == null)
                                    BDs = new List<BuyerMinDc>();
                                BDs.AddRange(buyerMinDcs);


                                if (BDs != null && BDs.Any())
                                {
                                    foreach (var BD in BDs)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (ActivePeople != null && WarePermission != null)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                        else
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pm.BuyerId.Value;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = pm.BuyerId.Value;
                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        pr.IsApprove = 0;
                                        pr.IsActive = true;
                                        pr.IsDeleted = false;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        Sms s = new Sms();
                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        db.Commit();
                                    }
                                }
                            }

                        }


                        //if (ETtlamt <= 300000)
                        //{
                        //    var ItemIds = POItemDetails.Select(x => x.ItemId).ToList();
                        //    var items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId)).ToList();

                        //    var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                        //    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                        //    if (BDs != null && BDs.Any())
                        //    {
                        //        foreach (var BD in BDs)
                        //        {
                        //            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                        //            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                        //            if (ActivePeople != null && WarePermission != null)
                        //            {
                        //                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                        //                if (PRStatusData == null)
                        //                {
                        //                    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                        //                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                    pr.IsApprove = 0;
                        //                    pr.IsActive = true;
                        //                    pr.CreatedDate = DateTime.Now;
                        //                    pr.ModifiedDate = DateTime.Now;
                        //                    db.PRApprovelsStatus.Add(pr);
                        //                    Sms s = new Sms();
                        //                    //string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                    string msg = smstempmsg;
                        //                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                        //                    db.Commit();
                        //                }
                        //            }
                        //            else
                        //            {

                        //                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                        //                if (PRStatusData == null)
                        //                {
                        //                    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                    pr.ApprovalID = pm.BuyerId.Value;
                        //                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                    pr.IsApprove = 0;
                        //                    pr.IsActive = true;
                        //                    pr.CreatedDate = DateTime.Now;
                        //                    pr.ModifiedDate = DateTime.Now;
                        //                    db.PRApprovelsStatus.Add(pr);
                        //                    Sms s = new Sms();
                        //                    string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                    string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                        //                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                        //                    db.Commit();
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                        //        if (PRStatusData == null)
                        //        {
                        //            PRApprovelsStatus pr = new PRApprovelsStatus();
                        //            pr.ApprovalID = pm.BuyerId.Value;
                        //            pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //            pr.IsApprove = 0;
                        //            pr.IsActive = true;
                        //            pr.CreatedDate = DateTime.Now;
                        //            pr.ModifiedDate = DateTime.Now;
                        //            db.PRApprovelsStatus.Add(pr);
                        //            Sms s = new Sms();
                        //            string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //            string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                        //            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                        //            db.Commit();
                        //        }
                        //    }

                        //}
                        //else if (ETtlamt > 300000 && ETtlamt < 1000000)
                        //{
                        //    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                        //                    "Zonal Sourcing lead", "Region sales lead");

                        //    List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                        //    foreach (var BD in buyerMinDcs)
                        //    {
                        //        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                        //        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                        //        if (WarePermission != null && ActivePeople != null)
                        //        {

                        //            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                        //            if (PRStatusData == null)
                        //            {
                        //                PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                        //                pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                pr.IsApprove = 0;
                        //                pr.IsActive = true;
                        //                pr.CreatedDate = DateTime.Now;
                        //                pr.ModifiedDate = DateTime.Now;
                        //                db.PRApprovelsStatus.Add(pr);
                        //                Sms s = new Sms();
                        //                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                        //                db.Commit();
                        //            }
                        //        }

                        //    }
                        //}
                        //else if (ETtlamt >= 1000000)
                        //{
                        //    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                        //                    "Supplier Payment Approver");

                        //    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                        //    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //    pr.ApprovalID = buyerMinDc.PeopleId;
                        //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //    pr.IsApprove = 1;
                        //    pr.IsActive = true;
                        //    pr.Comments = "Approved By :" + people.DisplayName;
                        //    pr.CreatedDate = DateTime.Now;
                        //    pr.ModifiedDate = DateTime.Now;
                        //    db.PRApprovelsStatus.Add(pr);

                        //    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pm.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                        //    if (poid != null)
                        //    {
                        //        var itemIds = pm.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                        //        Items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == POMaster.WarehouseId).ToList();
                        //        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                        //        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();

                        //        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                        //        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                        //        poid.Status = "Approved";
                        //        poid.PRStatus = 3;
                        //        poid.BuyerId = BuyerId;
                        //        poid.BuyerName = Name.DisplayName;
                        //        db.Entry(poid).State = EntityState.Modified;

                        //        if (db.Commit() > 0)
                        //        {
                        //            //string query = string.Empty;
                        //            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                        //            if (!string.IsNullOrEmpty(roleName))
                        //            {
                        //                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                        //                                          roleName);

                        //                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                        //                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                        //                if (check == null)
                        //                {
                        //                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                        //                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                        //                    pRPaymentAppoved.CreatedBy = userid;
                        //                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                        //                    pRPaymentAppoved.IsApproved = false;
                        //                    pRPaymentAppoved.IsActive = true;

                        //                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                        //                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                        //                }
                        //                else
                        //                {

                        //                    check.IsApproved = false;
                        //                    check.IsActive = true;
                        //                    check.IsDeleted = false;
                        //                    check.ModifiedDate = DateTime.Now;
                        //                    db.Entry(check).State = EntityState.Modified;

                        //                }
                        //                Sms s = new Sms();
                        //                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                        //                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                        //                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                        //                msg = dltSMS == null ? "" : dltSMS.Template;

                        //                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                        //                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                        //                db.Commit();
                        //            }
                        //        }
                        //    }

                        //}


                    }
                    else
                    {
                        dbContextTransaction.Rollback();
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during save PR ";
                    }


                }

            }

            return pOResult;
        }

        [Route("ClonePOtoPR")]
        [AcceptVerbs("POST")]
        public POResult ClonePO(ClonePR clone)
        {
            POResult pOResult = new POResult();
            var identity = User.Identity as ClaimsIdentity;
            int compid = 0, userid = 0, Warehouse_id = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);

            using (AuthContext db = new AuthContext())
            {
                var POMaster = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == clone.PurchaseOrderId).FirstOrDefault();
                var POItemDetails = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == clone.PurchaseOrderId).ToList();
                var People = db.Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();

                using (var dbContextTransaction = db.Database.BeginTransaction())
                {
                    List<ItemMaster> Items = new List<ItemMaster>();
                    double ETtlamt = POMaster.ETotalAmount;
                    PurchaseOrderMaster pm = new PurchaseOrderMaster();
                    var supplier = db.Suppliers.FirstOrDefault(x => x.SupplierId == POMaster.SupplierId);
                    pm.SupplierId = POMaster.SupplierId;
                    pm.SupplierName = POMaster.SupplierName;
                    pm.CreationDate = indianTime;
                    pm.WarehouseId = POMaster.WarehouseId;
                    pm.CompanyId = compid;
                    pm.WarehouseName = POMaster.WarehouseName;
                    pm.Status = "pending";
                    pm.progress = "0";
                    pm.PRType = 1;
                    pm.PRStatus = 1;
                    pm.PoType = "Manual";
                    pm.IsPR = true;
                    pm.BuyerId = POMaster.BuyerId;
                    pm.BuyerName = POMaster.BuyerName;
                    pm.Active = true;
                    pm.SupplierCreditDay = POMaster.SupplierCreditDay;
                    pm.PickerType = POMaster.PickerType;
                    pm.IsCashPurchase = POMaster.IsCashPurchase;
                    pm.CashPurchaseName = POMaster.CashPurchaseName;
                    pm.Advance_Amt = POMaster.Advance_Amt;
                    pm.DepoId = POMaster.DepoId;
                    pm.DepoName = POMaster.DepoName;
                    pm.CreatedBy = People.PeopleFirstName + " " + People.PeopleLastName;
                    pm.PRPaymentType = POMaster.PRPaymentType;
                    //pm.Status = "PR Send for Approval";
                    pm.ExpiryDays = supplier.ExpiryDays > 0 ? supplier.ExpiryDays : 7;
                    pm.PurchaseOrderDetail = new List<PurchaseOrderDetail>();

                    foreach (var data in POItemDetails)
                    {
                        PurchaseOrderDetail pd = new PurchaseOrderDetail();
                        pd.ItemId = data.ItemId;
                        pd.ItemNumber = data.ItemNumber;
                        pd.itemBaseName = data.itemBaseName;
                        pd.ItemMultiMRPId = data.ItemMultiMRPId;
                        pd.HSNCode = data.HSNCode;
                        pd.MRP = data.MRP;
                        pd.SellingSku = data.SellingSku;
                        pd.ItemName = data.ItemName;
                        pd.PurchaseQty = data.PurchaseQty;
                        pd.CreationDate = DateTime.Now;
                        pd.Status = "ordered";
                        pd.MOQ = data.MOQ;
                        pd.Price = data.Price;
                        pd.WarehouseId = data.WarehouseId;
                        pd.CompanyId = data.CompanyId;
                        pd.WarehouseName = data.WarehouseName;
                        pd.SupplierId = data.SupplierId;
                        pd.SupplierName = data.SupplierName;
                        pd.TotalQuantity = data.TotalQuantity;
                        pd.PurchaseName = data.PurchaseName;
                        pd.PurchaseSku = data.PurchaseSku;
                        pd.DepoId = data.DepoId;
                        pd.DepoName = data.DepoName;
                        pd.ConversionFactor = data.ConversionFactor;
                        pd.PurchaseOrderId = data.PurchaseOrderId;
                        pm.PurchaseOrderDetail.Add(pd);

                    }
                    pm.ETotalAmount = ETtlamt;
                    db.DPurchaseOrderMaster.Add(pm);
                    #region level allocation
                    if (ETtlamt >= 0)
                    {
                        PoApproval get_approvalz = db.PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == POMaster.WarehouseId).FirstOrDefault();
                        if (get_approvalz != null)
                        {
                            if (get_approvalz.Level == "Level1")  /// Self Approved
                            {
                                pm.Status = "PR Send for Approval";
                                pm.progress = "50";
                                pm.Level = "Level1";
                                pm.Approval1 = 0;
                                pm.Approval2 = 0;
                                pm.Approval3 = 0;
                                pm.Approval4 = 0;
                                pm.Approval5 = 0;
                                pm.ApprovalName1 = pm.CreatedBy;
                                pm.Rewiever1 = 0;
                                pm.Rewiever2 = 0;
                                pm.Rewiever3 = 0;
                                pm.Rewiever4 = 0;
                                pm.Rewiever5 = 0;
                                // pm.ApprovedBy = pm.CreatedBy;
                            }
                            else /// Send for approval
                            {
                                pm.Status = "PR Send for Approval";
                                pm.progress = "20";
                                pm.Level = get_approvalz.Level;
                                pm.Approval1 = get_approvalz.Approval1;
                                pm.Approval2 = get_approvalz.Approval2;
                                pm.Approval3 = get_approvalz.Approval3;
                                pm.Approval4 = get_approvalz.Approval4;
                                pm.Approval5 = get_approvalz.Approval5;
                                pm.Rewiever1 = get_approvalz.Reviewer1;
                                pm.Rewiever2 = get_approvalz.Reviewer2;
                                pm.Rewiever3 = get_approvalz.Reviewer3;
                                pm.Rewiever4 = get_approvalz.Reviewer4;
                                pm.Rewiever5 = get_approvalz.Reviewer5;
                                pm.ApprovalName1 = get_approvalz.ApprovalName1;
                                pm.ApprovalName2 = get_approvalz.ApprovalName2;
                                pm.ApprovalName3 = get_approvalz.ApprovalName3;
                                pm.ApprovalName4 = get_approvalz.ApprovalName4;
                                pm.ApprovalName5 = get_approvalz.ApprovalName5;
                                pm.RewieverName1 = get_approvalz.ReviewerName1;
                                pm.RewieverName2 = get_approvalz.ReviewerName2;
                                pm.RewieverName3 = get_approvalz.ReviewerName3;
                                pm.RewieverName4 = get_approvalz.ReviewerName4;
                                pm.RewieverName5 = get_approvalz.ReviewerName5;
                            }
                        }
                    }
                    #endregion
                    // string smstempmsg = " is waiting for your approval. ShopKirana";
                    string smstempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                    var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                    smstempmsg = dltSMS == null ? "" : dltSMS.Template;

                    smstempmsg = smstempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                    if (db.Commit() > 0)
                    {
                        dbContextTransaction.Commit();

                        pOResult.Status = true;
                        pOResult.Message = "PR save successfuly. PR # " + pm.PurchaseOrderId;
                    }
                    if (pOResult.Status == true)
                    {
                        ClonePo cl = new ClonePo();
                        cl.ClonePoId = clone.PurchaseOrderId;
                        cl.PurchaseOrderId = pm.PurchaseOrderId;
                        cl.CreatedBy = userid;
                        cl.CreatedDate = DateTime.Now;
                        cl.IsActive = true;
                        cl.IsDeleted = false;
                        db.ClonePos.Add(cl);

                        DataTable itemnumber = new DataTable();
                        itemnumber.Columns.Add("stringValue");
                        foreach (var item in POItemDetails)
                        {
                            var dr = itemnumber.NewRow();
                            dr["stringValue"] = item.ItemNumber;
                            itemnumber.Rows.Add(dr);
                        }
                        var idata = new SqlParameter("itemnumber", itemnumber);
                        idata.SqlDbType = SqlDbType.Structured;
                        idata.TypeName = "dbo.StringValues";

                        var pareWhh = new SqlParameter("@warehouseid", pm.WarehouseId);
                        var parep = new SqlParameter("@purchaseorderid", pm.PurchaseOrderId);
                        if (db.Database.Connection.State != ConnectionState.Open)
                            db.Database.Connection.Open();

                        var cmdd = db.Database.Connection.CreateCommand();
                        cmdd.CommandText = "GetItemsClassificationForClone";
                        cmdd.CommandType = CommandType.StoredProcedure;
                        cmdd.CommandTimeout = 600;
                        cmdd.Parameters.Add(idata);
                        cmdd.Parameters.Add(pareWhh);
                        cmdd.Parameters.Add(parep);
                        var readerr = cmdd.ExecuteReader();
                        List<GetClassificationCategoryData> pdList = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<GetClassificationCategoryData>(readerr).ToList();
                        db.Database.Connection.Close();


                        var ItemIds = pdList.Select(x => x.ItemId).Distinct().ToList();
                        if (ItemIds != null && ItemIds.Any())
                        {
                            Items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == pm.WarehouseId).ToList();
                        }

                        var datas = db.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).ToList();
                        foreach (var d in datas)
                        {
                            var cat = pdList.Where(x => x.ItemId == d.ItemId && x.Itemnumber == d.ItemNumber).Select(z => z.Category).FirstOrDefault();
                            d.Category = cat;
                            db.Entry(d).State = EntityState.Modified;
                            db.Commit();
                        }

                        var CDItemExists = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.ItemId).ToList();
                        var CDitems = Items.Where(x => CDItemExists.Contains(x.ItemId)).Select(x => new classification { itemNumber = x.Number, warehouseid = x.WarehouseId }).ToList();
                        if (CDItemExists != null && CDItemExists.Any() && ETtlamt <= 2500000)
                        {
                            var cdlist = pdList.Where(x => x.Category == "D" || x.Category == "C").Select(x => x.Category).Distinct().ToList();
                            var ApprovePersons = db.CreatePRApprovalDB.Where(x => !x.IsDeleted && cdlist.Contains(x.Classification)).ToList();
                            //var ApprovePersons = db.CreatePRApprovalDB.Where(x => (x.Classification == "C" || x.Classification == "D") && !x.IsDeleted).ToList();
                            ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                            var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                            string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                            List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                            // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                            List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                            if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                            {
                                //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && storeIds.Contains(x.StoreId.Value)).Distinct().ToList();
                            }
                            else
                            {
                                //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();
                            }

                            if (finalApprovePersons != null && finalApprovePersons.Any() && finalApprovePersons.Any(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt))
                            {
                                #region getPeople
                                DataTable dtemail = new DataTable();
                                dtemail.Columns.Add("stringValue");
                                DataTable dtrole = new DataTable();
                                dtrole.Columns.Add("stringValue");
                                if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                {
                                    List<string> emaillst = new List<string>();
                                    string EmailIds = "";
                                    EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                    emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();

                                    foreach (var item in emaillst)
                                    {
                                        var dr = dtemail.NewRow();
                                        dr["stringValue"] = item;
                                        dtemail.Rows.Add(dr);
                                    }

                                }
                                else
                                {
                                    List<string> rolelst = new List<string>();
                                    string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                    rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                    foreach (var item in rolelst)
                                    {
                                        var dr = dtrole.NewRow();
                                        dr["stringValue"] = item;
                                        dtrole.Rows.Add(dr);
                                    }
                                }


                                var paremail = new SqlParameter("emailIds", dtemail);
                                paremail.SqlDbType = SqlDbType.Structured;
                                paremail.TypeName = "dbo.StringValues";

                                var pareroles = new SqlParameter("roles", dtemail);
                                paremail.SqlDbType = SqlDbType.Structured;
                                paremail.TypeName = "dbo.StringValues";
                                var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                if (db.Database.Connection.State != ConnectionState.Open)
                                    db.Database.Connection.Open();

                                var cmd = db.Database.Connection.CreateCommand();
                                cmd.CommandText = "GetCreatePRApprovallist";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandTimeout = 600;
                                cmd.Parameters.Add(paremail);
                                cmd.Parameters.Add(pareroles);
                                cmd.Parameters.Add(pareWh);

                                var reader = cmd.ExecuteReader();
                                List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                    .ObjectContext
                                                    .Translate<BuyerMinDc>(reader).ToList();
                                db.Database.Connection.Close();
                                #endregion

                                var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                if (data.Count > 0 && data != null)
                                {
                                    foreach (var item in createPRAppovers)
                                    {
                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                        var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                        string queryss = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                        List<int> Ids = db.Database.SqlQuery<int>(queryss).ToList();
                                        if (Ids.Count > 0)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 1;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.Comments = "Approved By :" + name;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        else
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        //if (!PRStatusData)
                                        //{
                                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                        //    pr.ApprovalID = item.PeopleId;
                                        //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        //    pr.IsApprove = 1;
                                        //    pr.IsActive = true;
                                        //    pr.IsDeleted = false;
                                        //    pr.Comments = "Approved By :" + name;
                                        //    pr.CreatedDate = DateTime.Now;
                                        //    db.PRApprovelsStatus.Add(pr);
                                        //    db.Commit();
                                        //}
                                    }
                                    var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                    if (prapprov.All(x => x.IsApprove == 1))
                                    {
                                        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                        string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                        pm.Status = "Approved";
                                        pm.PRStatus = 3;
                                        pm.BuyerId = BuyerId;
                                        pm.BuyerName = buyerName;
                                        db.Entry(pm).State = EntityState.Modified;

                                        if (db.Commit() > 0)
                                        {
                                            //string sid = string.Join(",", storeIds.Distinct().ToList());
                                            var roleName = "";
                                            foreach (var store in storeIds)
                                            {
                                                roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                            }
                                            if (!string.IsNullOrEmpty(roleName))
                                            {
                                                string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                          roleName);

                                                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                if (!check)
                                                {
                                                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                    pRPaymentAppoved.CreatedBy = userid;
                                                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                    pRPaymentAppoved.IsApproved = false;
                                                    pRPaymentAppoved.IsActive = true;
                                                    pRPaymentAppoved.IsDeleted = false;
                                                    pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    foreach (var item in createPRAppovers)
                                    {

                                        var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                        if (!PRStatusData)
                                        {
                                            PRApprovelsStatus pr = new PRApprovelsStatus();
                                            pr.ApprovalID = item.PeopleId;
                                            pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            pr.IsApprove = 0;
                                            pr.IsActive = true;
                                            pr.IsDeleted = false;
                                            pr.CreatedDate = DateTime.Now;
                                            db.PRApprovelsStatus.Add(pr);
                                            db.Commit();
                                        }
                                        Sms s = new Sms();
                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                        string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                        db.Commit();
                                    }
                                }

                            }
                            else
                            {
                                string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                                var dltSMSs = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                                smsTempmsg = dltSMSs == null ? "" : dltSMSs.Template;

                                smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                                var ApprovePersonss = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted).ToList();
                                ApprovePersonss = ApprovePersonss.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();
                                if (ApprovePersonss != null && ApprovePersonss.Any())
                                {
                                    var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                    string queryss = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryids) + ")";
                                    List<long> storeIdss = db.Database.SqlQuery<long>(queryss).ToList();
                                    // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                    List<CreatePRApproval> finalApprovePersonss = new List<CreatePRApproval>();
                                    if (storeIdss.Any() && ApprovePersonss.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                    {
                                        //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIdss.Contains(x.StoreId.Value))).Distinct().ToList();
                                    }
                                    else
                                    {
                                        //finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                        finalApprovePersonss = ApprovePersonss.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                    }

                                    if (finalApprovePersonss != null && finalApprovePersonss.Any())
                                    {
                                        #region getPeople
                                        DataTable dtemail = new DataTable();
                                        dtemail.Columns.Add("stringValue");
                                        DataTable dtrole = new DataTable();
                                        dtrole.Columns.Add("stringValue");
                                        if (finalApprovePersonss.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                        {
                                            List<string> emaillst = new List<string>();

                                            string EmailIds = "";
                                            EmailIds = string.Join(",", finalApprovePersonss.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                            emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                            foreach (var item in emaillst)
                                            {
                                                var dr = dtemail.NewRow();
                                                dr["stringValue"] = item;
                                                dtemail.Rows.Add(dr);
                                            }

                                        }
                                        else
                                        {
                                            List<string> rolelst = new List<string>();
                                            string roles = string.Join(",", finalApprovePersonss.Select(x => x.RoleName).Distinct().ToList());
                                            rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                            foreach (var item in rolelst)
                                            {
                                                var dr = dtrole.NewRow();
                                                dr["stringValue"] = item;
                                                dtrole.Rows.Add(dr);
                                            }
                                        }


                                        var paremail = new SqlParameter("emailIds", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";

                                        var pareroles = new SqlParameter("roles", dtemail);
                                        paremail.SqlDbType = SqlDbType.Structured;
                                        paremail.TypeName = "dbo.StringValues";
                                        var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                        if (db.Database.Connection.State != ConnectionState.Open)
                                            db.Database.Connection.Open();

                                        var cmd = db.Database.Connection.CreateCommand();
                                        cmd.CommandText = "GetCreatePRApprovallist";
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.CommandTimeout = 600;
                                        cmd.Parameters.Add(paremail);
                                        cmd.Parameters.Add(pareroles);
                                        cmd.Parameters.Add(pareWh);

                                        var reader = cmd.ExecuteReader();
                                        List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                            .ObjectContext
                                                            .Translate<BuyerMinDc>(reader).ToList();
                                        db.Database.Connection.Close();
                                        #endregion
                                        var data = finalApprovePersonss.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                        if (data.Count > 0 && data != null)
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                                string querys1 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                                List<int> Ids = db.Database.SqlQuery<int>(querys1).ToList();
                                                if (Ids.Count > 0)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 1;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.Comments = "Approved By :" + name;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                else
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }

                                                //if (!PRStatusData)
                                                //{
                                                //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                //    pr.ApprovalID = item.PeopleId;
                                                //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                //    pr.IsApprove = 1;
                                                //    pr.IsActive = true;
                                                //    pr.IsDeleted = false;
                                                //    pr.Comments = "Approved By :" + name;
                                                //    pr.CreatedDate = DateTime.Now;
                                                //    db.PRApprovelsStatus.Add(pr);
                                                //    db.Commit();
                                                //}
                                            }
                                            var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                            if (prapprov.All(x => x.IsApprove == 1))
                                            {
                                                List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                                int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                                string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                                pm.Status = "Approved";
                                                pm.PRStatus = 3;
                                                pm.BuyerId = BuyerId;
                                                pm.BuyerName = buyerName;
                                                db.Entry(pm).State = EntityState.Modified;

                                                if (db.Commit() > 0)
                                                {
                                                    //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                    //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                    var roleName = "";
                                                    foreach (var store in storeIds)
                                                    {
                                                        roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                    }
                                                    if (!string.IsNullOrEmpty(roleName))
                                                    {
                                                        string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                                  roleName);

                                                        BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                        var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                        if (!check)
                                                        {
                                                            PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                            pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                            pRPaymentAppoved.CreatedBy = userid;
                                                            pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                            pRPaymentAppoved.IsApproved = false;
                                                            pRPaymentAppoved.IsActive = true;
                                                            pRPaymentAppoved.IsDeleted = false;
                                                            pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                            db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                        }
                                                        Sms s = new Sms();
                                                        // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                        string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                        var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                        msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                        msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                        string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                        db.Commit();
                                                    }

                                                }
                                            }

                                        }
                                        else
                                        {
                                            foreach (var item in createPRAppovers)
                                            {
                                                var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                                if (!PRStatusData)
                                                {
                                                    PRApprovelsStatus pr = new PRApprovelsStatus();
                                                    pr.ApprovalID = item.PeopleId;
                                                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                    pr.IsApprove = 0;
                                                    pr.IsActive = true;
                                                    pr.IsDeleted = false;
                                                    pr.CreatedDate = DateTime.Now;
                                                    db.PRApprovelsStatus.Add(pr);
                                                    db.Commit();
                                                }
                                                Sms s = new Sms();
                                                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                string Mob = db.Peoples.Where(q => q.PeopleID == item.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                db.Commit();
                                            }
                                        }


                                    }
                                    else
                                    {
                                        List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                        var SubsubCategoryidss = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                        List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryidss.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                        if (BDs == null)
                                            BDs = new List<BuyerMinDc>();
                                        BDs.AddRange(buyerMinDcs);


                                        if (BDs != null && BDs.Any())
                                        {
                                            foreach (var BD in BDs)
                                            {
                                                var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                                var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                                if (ActivePeople != null && WarePermission != null)
                                                {
                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                                else
                                                {

                                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                                    if (PRStatusData == null)
                                                    {
                                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                                        pr.ApprovalID = pm.BuyerId.Value;
                                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                        pr.IsApprove = 0;
                                                        pr.IsActive = true;
                                                        pr.IsDeleted = false;
                                                        pr.CreatedDate = DateTime.Now;
                                                        pr.ModifiedDate = DateTime.Now;
                                                        db.PRApprovelsStatus.Add(pr);
                                                        Sms s = new Sms();
                                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                        if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                        db.Commit();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pm.BuyerId.Value;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                                db.Commit();
                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            string smsTempmsg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMSs = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            smsTempmsg = dltSMSs == null ? "" : dltSMSs.Template;

                            smsTempmsg = smsTempmsg.Replace("{#var#}", pm.PurchaseOrderId.ToString());
                            var ApprovePersons = db.CreatePRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && (x.Classification != "C" && x.Classification != "D")).ToList();
                            ApprovePersons = ApprovePersons.Where(x => string.IsNullOrEmpty(x.WarehouseIds) || (!string.IsNullOrEmpty(x.WarehouseIds) && x.WarehouseIds.Split(',').ToList().Select(y => Convert.ToInt32(y)).Contains(pm.WarehouseId))).ToList();

                            if (ApprovePersons != null && ApprovePersons.Any())
                            {
                                var SubsubCategoryid = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                string querys = @"select  distinct s.StoreId from StoreBrands s with (nolock)
                                                                     inner join BrandCategoryMappings b with (nolock) on s.BrandCategoryMappingId=b.BrandCategoryMappingId
                                                                     inner join SubcategoryCategoryMappings sc with (nolock) on b.SubCategoryMappingId=sc.SubCategoryMappingId
                                                                     where b.IsActive=1 and b.Deleted=0 and s.IsActive=1 and s.IsDeleted=0
                                                                     and sc.IsActive=1 and sc.Deleted=0 and b.SubsubCategoryId in (" + string.Join(",", SubsubCategoryid) + ")";
                                List<long> storeIds = db.Database.SqlQuery<long>(querys).ToList();
                                // var store = db.StoreDB.Where(z => storeIds.Contains(z.Id)).ToList();

                                List<CreatePRApproval> finalApprovePersons = new List<CreatePRApproval>();
                                if (storeIds.Any() && ApprovePersons.Any(x => x.StoreId.HasValue && x.StoreId.Value > 0))
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && (x.StoreId.Value == 0 || storeIds.Contains(x.StoreId.Value))).Distinct().ToList();
                                }
                                else
                                {
                                    //finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Select(x => new CreatePRApproval { RoleName = x.RoleName, StoreId = x.StoreId, EmailIds = x.EmailIds }).Distinct().ToList();
                                    finalApprovePersons = ApprovePersons.Where(x => x.StoreId.HasValue && x.StoreId.Value == 0).Distinct().ToList();

                                }

                                if (finalApprovePersons != null && finalApprovePersons.Any())
                                {
                                    #region getPeople
                                    DataTable dtemail = new DataTable();
                                    dtemail.Columns.Add("stringValue");
                                    DataTable dtrole = new DataTable();
                                    dtrole.Columns.Add("stringValue");
                                    if (finalApprovePersons.Any(x => !string.IsNullOrEmpty(x.EmailIds)))
                                    {
                                        List<string> emaillst = new List<string>();

                                        string EmailIds = "";
                                        EmailIds = string.Join(",", finalApprovePersons.Where(x => !string.IsNullOrEmpty(x.EmailIds)).Select(x => x.EmailIds).ToList());
                                        emaillst = EmailIds.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();


                                        foreach (var item in emaillst)
                                        {
                                            var dr = dtemail.NewRow();
                                            dr["stringValue"] = item;
                                            dtemail.Rows.Add(dr);
                                        }

                                    }
                                    else
                                    {
                                        List<string> rolelst = new List<string>();
                                        string roles = string.Join(",", finalApprovePersons.Select(x => x.RoleName).Distinct().ToList());
                                        rolelst = roles.Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
                                        foreach (var item in rolelst)
                                        {
                                            var dr = dtrole.NewRow();
                                            dr["stringValue"] = item;
                                            dtrole.Rows.Add(dr);
                                        }
                                    }


                                    var paremail = new SqlParameter("emailIds", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";

                                    var pareroles = new SqlParameter("roles", dtemail);
                                    paremail.SqlDbType = SqlDbType.Structured;
                                    paremail.TypeName = "dbo.StringValues";
                                    var pareWh = new SqlParameter("@warehouseId", pm.WarehouseId);

                                    if (db.Database.Connection.State != ConnectionState.Open)
                                        db.Database.Connection.Open();

                                    var cmd = db.Database.Connection.CreateCommand();
                                    cmd.CommandText = "GetCreatePRApprovallist";
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 600;
                                    cmd.Parameters.Add(paremail);
                                    cmd.Parameters.Add(pareroles);
                                    cmd.Parameters.Add(pareWh);

                                    var reader = cmd.ExecuteReader();
                                    List<BuyerMinDc> createPRAppovers = ((IObjectContextAdapter)db)
                                                        .ObjectContext
                                                        .Translate<BuyerMinDc>(reader).ToList();
                                    db.Database.Connection.Close();
                                    #endregion
                                    var data = finalApprovePersons.Where(x => x.RoleName == "Senior Director - Purchase" || x.RoleName == "Supplier Payment Approver").ToList();
                                    if (data.Count > 0 && data != null)
                                    {
                                        foreach (var item in createPRAppovers)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            string querys2 = @"select p.PeopleID from People p inner join AspNetUsers asu on asu.Email=p.Email
                                                                    inner join AspNetUserRoles asur on asur.UserId = asu.Id
                                                                    inner join AspNetRoles asr on asr.Id=asur.RoleId
                                                                    where p.Active=1 and asur.isActive =1
                                                                    and asr.Name in ('Supplier Payment Approver','Senior Director - Purchase') and p.PeopleID in (" + item.PeopleId + ")";
                                            List<int> Ids = db.Database.SqlQuery<int>(querys2).ToList();

                                            if (Ids.Count > 0)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 1;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.Comments = "Approved By :" + name;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            else
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            //if (!PRStatusData)
                                            //{
                                            //    PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //    pr.ApprovalID = item.PeopleId;
                                            //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            //    pr.IsApprove = 1;
                                            //    pr.IsActive = true;
                                            //    pr.IsDeleted = false;
                                            //    pr.Comments = "Approved By :" + name;
                                            //    pr.CreatedDate = DateTime.Now;
                                            //    db.PRApprovelsStatus.Add(pr);
                                            //    db.Commit();
                                            //}
                                        }
                                        var prapprov = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.IsActive == true).ToList();
                                        if (prapprov.All(x => x.IsApprove == 1))
                                        {
                                            List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                            int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                            string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                            pm.Status = "Approved";
                                            pm.PRStatus = 3;
                                            pm.BuyerId = BuyerId;
                                            pm.BuyerName = buyerName;
                                            db.Entry(pm).State = EntityState.Modified;

                                            if (db.Commit() > 0)
                                            {
                                                //string sid = string.Join(",", storeIds.Distinct().ToList());
                                                //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                                var roleName = "";
                                                foreach (var store in storeIds)
                                                {
                                                    roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                                }
                                                if (!string.IsNullOrEmpty(roleName))
                                                {
                                                    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                              roleName);

                                                    BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                                    var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                                    if (!check)
                                                    {
                                                        PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                        pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                        pRPaymentAppoved.CreatedBy = userid;
                                                        pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                        pRPaymentAppoved.IsApproved = false;
                                                        pRPaymentAppoved.IsActive = true;
                                                        pRPaymentAppoved.IsDeleted = false;
                                                        pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                        db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                                    }
                                                    Sms s = new Sms();
                                                    // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                                    string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                                    var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                                    msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                                    msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                                    string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                    if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                                    db.Commit();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (var item in createPRAppovers)
                                        {
                                            //if (ETtlamt <= 2500000)
                                            //{
                                            var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            if (!PRStatusData)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = item.PeopleId;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                db.Commit();
                                            }
                                            //}
                                            //else
                                            //{
                                            //    var PRStatusData = db.PRApprovelsStatus.Any(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == item.PeopleId && x.IsActive == true && x.IsDeleted == false);
                                            //    var name = db.Peoples.Where(x => x.PeopleID == item.PeopleId).Select(x => x.DisplayName).FirstOrDefault();
                                            //    if (!PRStatusData)
                                            //    {
                                            //        PRApprovelsStatus pr = new PRApprovelsStatus();
                                            //        pr.ApprovalID = item.PeopleId;
                                            //        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                            //        pr.IsApprove = 1;
                                            //        pr.Comments = "Approved By :" + name;
                                            //        pr.IsActive = true;
                                            //        pr.IsDeleted = false;
                                            //        pr.CreatedDate = DateTime.Now;
                                            //        db.PRApprovelsStatus.Add(pr);
                                            //        db.Commit();
                                            //    }
                                            //}
                                        }
                                    }


                                }

                                if (ETtlamt > 2500000)
                                {
                                    List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryid.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();
                                    int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                                    string buyerName = db.Peoples.Where(x => x.PeopleID == BuyerId).Select(x => x.DisplayName).FirstOrDefault();
                                    pm.Status = "Approved";
                                    pm.PRStatus = 3;
                                    pm.BuyerId = BuyerId;
                                    pm.BuyerName = buyerName;
                                    db.Entry(pm).State = EntityState.Modified;

                                    if (db.Commit() > 0)
                                    {
                                        //string sid = string.Join(",", storeIds.Distinct().ToList());
                                        //var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(sid)).Select(x => x.RoleName).FirstOrDefault();
                                        var roleName = "";
                                        foreach (var store in storeIds)
                                        {
                                            roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= ETtlamt && x.AmountlmtMax >= ETtlamt && !x.IsDeleted && x.StoreIds.Contains(store.ToString())).Select(x => x.RoleName).FirstOrDefault();
                                        }
                                        if (!string.IsNullOrEmpty(roleName))
                                        {
                                            string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                                                                      roleName);

                                            BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                                            var check = db.PRPaymentAppoved.Any(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == pm.PurchaseOrderId && x.IsActive == true && x.IsDeleted == false);
                                            if (!check)
                                            {
                                                PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                                                pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                                                pRPaymentAppoved.CreatedBy = userid;
                                                pRPaymentAppoved.CreatedDate = DateTime.Now;
                                                pRPaymentAppoved.IsApproved = false;
                                                pRPaymentAppoved.IsActive = true;
                                                pRPaymentAppoved.IsDeleted = false;
                                                pRPaymentAppoved.PRId = pm.PurchaseOrderId;
                                                db.PRPaymentAppoved.Add(pRPaymentAppoved);
                                            }
                                            Sms s = new Sms();
                                            // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                                            string msg = "";//"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                                            var dltSMS1 = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                                            msg = dltSMS1 == null ? "" : dltSMS1.Template;

                                            msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                                            string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                            if (Mob != null && dltSMS1 != null) { s.sendOtp(Mob, msg, dltSMS1.DLTId); }
                                            db.Commit();
                                        }

                                    }
                                }
                            }
                            else
                            {
                                List<BuyerMinDc> buyerMinDcs = db.DPurchaseOrderMaster.Where(x => x.PurchaseOrderId == pm.PurchaseOrderId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId.Value }).ToList();

                                var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                                List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                                if (BDs == null)
                                    BDs = new List<BuyerMinDc>();
                                BDs.AddRange(buyerMinDcs);


                                if (BDs != null && BDs.Any())
                                {
                                    foreach (var BD in BDs)
                                    {
                                        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                                        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                                        if (ActivePeople != null && WarePermission != null)
                                        {
                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                        else
                                        {

                                            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                            if (PRStatusData == null)
                                            {
                                                PRApprovelsStatus pr = new PRApprovelsStatus();
                                                pr.ApprovalID = pm.BuyerId.Value;
                                                pr.PurchaseOrderID = pm.PurchaseOrderId;
                                                pr.IsApprove = 0;
                                                pr.IsActive = true;
                                                pr.IsDeleted = false;
                                                pr.CreatedDate = DateTime.Now;
                                                pr.ModifiedDate = DateTime.Now;
                                                db.PRApprovelsStatus.Add(pr);
                                                Sms s = new Sms();
                                                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                                string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                                                db.Commit();
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId && x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                                    if (PRStatusData == null)
                                    {
                                        PRApprovelsStatus pr = new PRApprovelsStatus();
                                        pr.ApprovalID = pm.BuyerId.Value;
                                        pr.PurchaseOrderID = pm.PurchaseOrderId;
                                        pr.IsApprove = 0;
                                        pr.IsActive = true;
                                        pr.IsDeleted = false;
                                        pr.CreatedDate = DateTime.Now;
                                        pr.ModifiedDate = DateTime.Now;
                                        db.PRApprovelsStatus.Add(pr);
                                        Sms s = new Sms();
                                        string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smsTempmsg;
                                        string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                                        if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                                        db.Commit();
                                    }
                                }
                            }

                        }
                        //if (ETtlamt <= 300000)
                        //{
                        //    var ItemIds = POItemDetails.Select(x => x.ItemId).ToList();
                        //    var items = db.itemMasters.Where(z => ItemIds.Contains(z.ItemId)).ToList();

                        //    var SubsubCategoryids = items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                        //    List<BuyerMinDc> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).Select(x => new BuyerMinDc { PeopleId = x.BuyerId }).ToList();
                        //    if (BDs != null && BDs.Any())
                        //    {
                        //        foreach (var BD in BDs)
                        //        {
                        //            var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                        //            var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                        //            if (ActivePeople != null && WarePermission != null)
                        //            {
                        //                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                        //                if (PRStatusData == null)
                        //                {
                        //                    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                    pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                        //                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                    pr.IsApprove = 0;
                        //                    pr.IsActive = true;
                        //                    pr.CreatedDate = DateTime.Now;
                        //                    pr.ModifiedDate = DateTime.Now;
                        //                    db.PRApprovelsStatus.Add(pr);
                        //                    Sms s = new Sms();
                        //                    //string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                    string msg = smstempmsg;
                        //                    string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                    if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                        //                    db.Commit();
                        //                }
                        //            }
                        //            else
                        //            {

                        //                var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                        //                if (PRStatusData == null)
                        //                {
                        //                    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                    pr.ApprovalID = pm.BuyerId.Value;
                        //                    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                    pr.IsApprove = 0;
                        //                    pr.IsActive = true;
                        //                    pr.CreatedDate = DateTime.Now;
                        //                    pr.ModifiedDate = DateTime.Now;
                        //                    db.PRApprovelsStatus.Add(pr);
                        //                    Sms s = new Sms();
                        //                    string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                    string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                        //                    if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                        //                    db.Commit();
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == pm.BuyerId).FirstOrDefault();
                        //        if (PRStatusData == null)
                        //        {
                        //            PRApprovelsStatus pr = new PRApprovelsStatus();
                        //            pr.ApprovalID = pm.BuyerId.Value;
                        //            pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //            pr.IsApprove = 0;
                        //            pr.IsActive = true;
                        //            pr.CreatedDate = DateTime.Now;
                        //            pr.ModifiedDate = DateTime.Now;
                        //            db.PRApprovelsStatus.Add(pr);
                        //            Sms s = new Sms();
                        //            string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //            string Mob = db.Peoples.Where(q => q.PeopleID == pm.BuyerId).Select(q => q.Mobile).SingleOrDefault();
                        //            if (Mob != null) { s.sendOtp(Mob, msg, ""); }
                        //            db.Commit();
                        //        }
                        //    }

                        //}
                        //else if (ETtlamt > 300000 && ETtlamt < 1000000)
                        //{
                        //    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}','{1}')) and p.Active=1",
                        //                    "Zonal Sourcing lead", "Region sales lead");

                        //    List<BuyerMinDc> buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).ToList();

                        //    foreach (var BD in buyerMinDcs)
                        //    {
                        //        var ActivePeople = db.Peoples.Where(x => x.PeopleID == BD.PeopleId && x.Active == true).FirstOrDefault();
                        //        var WarePermission = db.WarehousePermissionDB.Where(x => x.WarehouseId == pm.WarehouseId && x.PeopleID == BD.PeopleId && x.IsDeleted == false).FirstOrDefault();
                        //        if (WarePermission != null && ActivePeople != null)
                        //        {

                        //            var PRStatusData = db.PRApprovelsStatus.Where(x => x.PurchaseOrderID == pm.PurchaseOrderId && x.ApprovalID == BD.PeopleId).FirstOrDefault();
                        //            if (PRStatusData == null)
                        //            {
                        //                PRApprovelsStatus pr = new PRApprovelsStatus();
                        //                pr.ApprovalID = BD != null ? BD.PeopleId : 0;
                        //                pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //                pr.IsApprove = 0;
                        //                pr.IsActive = true;
                        //                pr.CreatedDate = DateTime.Now;
                        //                pr.ModifiedDate = DateTime.Now;
                        //                db.PRApprovelsStatus.Add(pr);
                        //                Sms s = new Sms();
                        //                string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + smstempmsg;
                        //                string Mob = db.Peoples.Where(q => q.PeopleID == BD.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                if (Mob != null) { s.sendOtp(Mob, msg, ""); }

                        //                db.Commit();
                        //            }
                        //        }

                        //    }
                        //}
                        //else if (ETtlamt >= 1000000)
                        //{
                        //    string query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name ='{0}') and p.Active = 1 ",
                        //                    "Supplier Payment Approver");

                        //    BuyerMinDc buyerMinDc = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                        //    People people = db.Peoples.Where(q => q.PeopleID == buyerMinDc.PeopleId).FirstOrDefault();

                        //    PRApprovelsStatus pr = new PRApprovelsStatus();
                        //    pr.ApprovalID = buyerMinDc.PeopleId;
                        //    pr.PurchaseOrderID = pm.PurchaseOrderId;
                        //    pr.IsApprove = 1;
                        //    pr.IsActive = true;
                        //    pr.Comments = "Approved By :" + people.DisplayName;
                        //    pr.CreatedDate = DateTime.Now;
                        //    pr.ModifiedDate = DateTime.Now;
                        //    db.PRApprovelsStatus.Add(pr);

                        //    PurchaseOrderMaster poid = db.DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pm.PurchaseOrderId && a.PRStatus == 1).SingleOrDefault();
                        //    if (poid != null)
                        //    {
                        //        var itemIds = pm.PurchaseOrderDetail.Select(x => x.ItemId).ToList();
                        //        Items = db.itemMasters.Where(z => itemIds.Contains(z.ItemId) && z.CompanyId == compid && z.WarehouseId == POMaster.WarehouseId).ToList();
                        //        var SubsubCategoryids = Items.Select(x => x.SubsubCategoryid).Distinct().ToList();
                        //        List<BrandBuyer> BDs = db.BrandBuyerDB.Where(x => SubsubCategoryids.Contains(x.BrandId) && x.WarehosueId == pm.WarehouseId).ToList();

                        //        int BuyerId = BDs != null && BDs.Any() ? BDs.FirstOrDefault().BuyerId : 2088;
                        //        People Name = db.Peoples.Where(x => x.PeopleID == BuyerId).FirstOrDefault();
                        //        poid.Status = "Approved";
                        //        poid.PRStatus = 3;
                        //        poid.BuyerId = BuyerId;
                        //        poid.BuyerName = Name.DisplayName;
                        //        db.Entry(poid).State = EntityState.Modified;

                        //        if (db.Commit() > 0)
                        //        {
                        //            //string query = string.Empty;
                        //            var roleName = db.PRApprovalDB.Where(x => x.AmountlmtMin <= poid.ETotalAmount && x.AmountlmtMax >= poid.ETotalAmount && !x.IsDeleted).Select(x => x.RoleName).FirstOrDefault();
                        //            if (!string.IsNullOrEmpty(roleName))
                        //            {
                        //                query = string.Format("select  p.DisplayName,p.PeopleID from People p where exists (select u.Id from AspNetUsers u inner join AspNetUserRoles ur on u.Id=ur.UserId and p.Email=u.Email inner join AspNetRoles r on ur.RoleId=r.Id and r.name in ('{0}')) and p.Active=1",
                        //                                          roleName);

                        //                BuyerMinDc buyerMinDcs = db.Database.SqlQuery<BuyerMinDc>(query).FirstOrDefault();
                        //                var check = db.PRPaymentAppoved.Where(x => x.ApprovedBY == buyerMinDcs.PeopleId && x.PRId == poid.PurchaseOrderId).FirstOrDefault();
                        //                if (check == null)
                        //                {
                        //                    PRPaymentAppoved pRPaymentAppoved = new PRPaymentAppoved();
                        //                    pRPaymentAppoved.ApprovedBY = buyerMinDcs.PeopleId;
                        //                    pRPaymentAppoved.CreatedBy = userid;
                        //                    pRPaymentAppoved.CreatedDate = DateTime.Now;
                        //                    pRPaymentAppoved.IsApproved = false;
                        //                    pRPaymentAppoved.IsActive = true;

                        //                    pRPaymentAppoved.PRId = poid.PurchaseOrderId;
                        //                    db.PRPaymentAppoved.Add(pRPaymentAppoved);
                        //                }
                        //                else
                        //                {

                        //                    check.IsApproved = false;
                        //                    check.IsActive = true;
                        //                    check.IsDeleted = false;
                        //                    check.ModifiedDate = DateTime.Now;
                        //                    db.Entry(check).State = EntityState.Modified;

                        //                }
                        //                Sms s = new Sms();
                        //                // string msg = " ShopKirana " + Environment.NewLine + " PR id: " + pm.PurchaseOrderId + " are waiting for your Payment Approval.";
                        //                string msg = ""; //"ShopKirana PR id: {#var#} are waiting for your Payment Approval.";
                        //                dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Payment_Waiting_Approval");
                        //                msg = dltSMS == null ? "" : dltSMS.Template;

                        //                msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                        //                string Mob = db.Peoples.Where(q => q.PeopleID == buyerMinDcs.PeopleId).Select(q => q.Mobile).SingleOrDefault();
                        //                if (Mob != null && dltSMS != null) { s.sendOtp(Mob, msg, dltSMS.DLTId); }
                        //                db.Commit();
                        //            }
                        //        }
                        //    }

                        //}


                    }
                    else
                    {
                        dbContextTransaction.Rollback();
                        pOResult.Status = false;
                        pOResult.Message = "Some error occurred during save PR ";
                    }


                }

            }

            return pOResult;
        }


        private bool IsVisible(int PoQuantiy, int GrQuantity, int IrDOneQuantiy, int RemainingQuantity, int IRType, int UnitGrQty, int UnitDamageQty, int UnitExpiryQty, bool? IsPhysicalDamageExpiryInclude)
        {
            bool Result = true;
            if (IRType > 1)
            {
                if (IsPhysicalDamageExpiryInclude == true)
                {

                    if (UnitGrQty == 0 && UnitDamageQty == 0 && UnitExpiryQty == 0)
                    {
                        if (PoQuantiy <= IrDOneQuantiy)
                        {
                            Result = false;
                        }

                        else if (GrQuantity <= IrDOneQuantiy)
                        {
                            Result = false;
                        }
                    }


                    else if (RemainingQuantity <= 0)
                    {
                        Result = false;
                    }
                    else if (PoQuantiy == IrDOneQuantiy + RemainingQuantity)
                    {
                        Result = true;
                    }

                    else if (PoQuantiy == IrDOneQuantiy)
                    {

                        Result = false;

                    }
                }
                else
                {
                    if (UnitGrQty == 0)
                    {
                        if (PoQuantiy <= IrDOneQuantiy)
                        {
                            Result = false;
                        }

                        //else if (GrQuantity <= IrDOneQuantiy)
                        //{
                        //    Result = false;
                        //}
                    }
                    else if (GrQuantity == 0)
                    {
                        if (PoQuantiy <= IrDOneQuantiy + RemainingQuantity)
                        {
                            Result = false;

                        }

                        else if (IrDOneQuantiy == 0)
                        {
                            Result = true;

                        }
                    }


                    else if (RemainingQuantity <= 0)
                    {
                        Result = false;
                    }
                    else if (PoQuantiy == IrDOneQuantiy + RemainingQuantity)
                    {
                        Result = true;
                    }

                    else if (PoQuantiy == IrDOneQuantiy)
                    {

                        Result = false;

                    }
                }
            }

            return Result;
        }

        [Route("GetAdvanceAmount")]
        [HttpGet]
        public AdvanceAmount GetAdvanceAmount(int PurchaseOrderId)
        {
            AdvanceAmount advanceamt = new AdvanceAmount();
            using (var context = new AuthContext())
            {
                var query = "GetPOOutstanding @PurchaseOrderId";
                List<SqlParameter> paramList = new List<SqlParameter>();
                paramList.Add(new SqlParameter("@PurchaseOrderId", SqlDbType.BigInt) { Value = Convert.ToDouble(PurchaseOrderId) });
                advanceamt = context.Database.SqlQuery<AdvanceAmount>(query, paramList.ToArray()).FirstOrDefault();
                return advanceamt;
            }
        }
        [Route("GetClosedPOAmount")]
        [HttpGet]
        public List<ClosedPODetails> GetClosedPOAmount(int PurchaseOrderId)
        {

            using (var context = new AuthContext())
            {
                var query = "GetClosedPOAmountUse @PurchaseOrderId";
                List<SqlParameter> paramList = new List<SqlParameter>();
                paramList.Add(new SqlParameter("@PurchaseOrderId", SqlDbType.BigInt) { Value = Convert.ToDouble(PurchaseOrderId) });
                var sattledamt = context.Database.SqlQuery<ClosedPODetails>(query, paramList.ToArray()).ToList();
                return sattledamt;
            }
        }
        [Route("GetChildPOFromMotherPO")]
        [HttpGet]
        public List<ChildPOFromMotherPODC> GetChildPOFromMotherPO(int PurchaseOrderId)
        {
            using (var context = new AuthContext())
            {
                var query = "GetChildPOFromMotherPO @PurchaseOrderId";
                List<SqlParameter> paramList = new List<SqlParameter>();
                paramList.Add(new SqlParameter("@PurchaseOrderId", SqlDbType.BigInt) { Value = Convert.ToDouble(PurchaseOrderId) });
                var sattledamt = context.Database.SqlQuery<ChildPOFromMotherPODC>(query, paramList.ToArray()).ToList();
                return sattledamt;
            }
        }


        [Route("InsertYesterdayDemand")]
        [HttpGet]
        [AllowAnonymous]
        public bool InsertYesterdayDemand()
        {
            bool res = false;
            using (AuthContext db = new AuthContext())
            {
                db.Database.CommandTimeout = 600;
                int rowsAffect = db.Database.ExecuteSqlCommand("Exec InsertYesterdayDemand");
                if (rowsAffect > 0)
                {
                    res = true;
                }
            }
            return res;
        }

        [Route("GetWeight")]
        [HttpGet]
        [AllowAnonymous]
        public dynamic GetWeight(int itemId)
        {
            using (var context = new AuthContext())
            {
                var query = from m in context.itemMasters
                            join c in context.ItemMasterCentralDB on m.Number equals c.Number
                            where m.ItemId == itemId
                            select new ItemWeight { weight = c.weight, weighttype = c.weighttype };
                var list = query.FirstOrDefault();
                //if(list != null)
                //{
                //    list.weighttype = string.IsNullOrEmpty(list.weighttype) ? list.weighttype : list.weighttype.ToLower();
                //}
                return list;
            }
        }
        private GetDemandQtyDC GetDemandQty(int WarehouseId, string ItemNumber, int ItemMultiMRPId, AuthContext db)
        {
            //using (var db = new AuthContext())
            //{
            var warehouseId = new SqlParameter("@WareHouseId", WarehouseId);
            var itemNumber = new SqlParameter("@ItemNumber", ItemNumber);
            var itemMultiMRPId = new SqlParameter("@ItemMultiMRPId", ItemMultiMRPId);
            var result = db.Database.SqlQuery<GetDemandQtyDC>("GetDemandQty @WareHouseId,@ItemNumber,@ItemMultiMRPId", warehouseId, itemNumber, itemMultiMRPId).FirstOrDefault();
            return result;
            // }
        }

        //[Route("getCurrentstockInventry")]
        //[HttpGet]
        //public int getCurrentstockInventry(int itemId)
        //{
        //    using (var db = new AuthContext())
        //    {
        //        var itemmaster = db.itemMasters.Where(x => x.ItemId == itemId).Select(x => new { x.ItemMultiMRPId, x.WarehouseId }).FirstOrDefault();
        //        int currentstock = db.DbCurrentStock.Where(x => x.WarehouseId == itemmaster.WarehouseId && x.ItemMultiMRPId == itemmaster.ItemMultiMRPId).FirstOrDefault().CurrentInventory;
        //        if (currentstock > 0)
        //        {
        //            return currentstock;
        //        }
        //        else
        //        {
        //            return 0;
        //        }
        //    }
        //}

        #region Item Forecast
        [Route("EligibleQtyForPo/{WarehouseId}/{ItemMultiMrpId}")]
        [HttpGet]
        public ItemForeCastWarehouseDc GetEligibleQtyForPo(int WarehouseId, int ItemMultiMrpId)
        {
            var result = new ItemForeCastWarehouseDc();
            try
            {
                using (var context = new AuthContext())
                {
                    SqlParameter param1 = new SqlParameter()
                    {
                        ParameterName = "@WarehouseId",
                        Value = WarehouseId
                    };
                    SqlParameter param2 = new SqlParameter()
                    {
                        ParameterName = "@ItemMultiMrpId",
                        Value = ItemMultiMrpId
                    };
                    result = context.Database.SqlQuery<ItemForeCastWarehouseDc>("exec EligibleQtyForPoOrIntT @WarehouseId,@ItemMultiMrpId", param1, param2).FirstOrDefault();
                }
            }
            catch (Exception ss) { }
            return result;
        }


        #endregion
        [Route("GetRetailerForSupplierItem")]
        [AllowAnonymous]
        [HttpGet]
        public bool GetRetailerForSupplierItem(int SupplierId, int itemmultiMrpIds)
        {
            bool status = false;
            using (var myContext = new AuthContext())
            {
                var supplierId = new SqlParameter("@SupplierId", SupplierId);
                //var itemmultiMrpId = new SqlParameter("@itemmultiMrpIds", itemmultiMrpIds);
                var itemmultimrp = new DataTable();
                itemmultimrp.Columns.Add("IntValue");

                var dr = itemmultimrp.NewRow();
                dr["IntValue"] = itemmultiMrpIds;
                itemmultimrp.Rows.Add(dr);

                var itemmultimrpids = new SqlParameter
                {
                    ParameterName = "itemmultiMrpIds",
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "dbo.IntValues",
                    Value = itemmultimrp
                };
                var result = myContext.Database.SqlQuery<int>("EXEC GetRetailerForSupplierItem @SupplierId,@itemmultiMrpIds", supplierId, itemmultimrpids).FirstOrDefault();
                if (result > 0)
                {
                    status = true;
                }
                return status;
            }
        }

        [Route("GetBueridthroughitemid")]
        [AllowAnonymous]
        [HttpGet]
        public GetBuyerIdDC GetBueridthroughitemid(int warehouseid, int itemid)
        {
            using (var myContext = new AuthContext())
            {
                var Warehouseid = new SqlParameter("@warehouseid", warehouseid);
                var Itemid = new SqlParameter("@itemid", itemid);
                var result = myContext.Database.SqlQuery<GetBuyerIdDC>("EXEC GetBueridthroughitemid @warehouseid,@itemid", Warehouseid, Itemid).FirstOrDefault();
                return result;
            }
        }

        [Route("GetInvoiceData")]
        [AllowAnonymous]
        [HttpGet]
        public HttpResponseMessage getinvoicedata(string invoiceno, int poid)
        {
            using (var db = new AuthContext())
            {

                var data = db.DPurchaseOrderMaster.FirstOrDefault(x => x.PurchaseOrderId == poid && x.Active == true && x.Deleted == false);
                Supplier s = db.Suppliers.FirstOrDefault(x => x.SupplierId == data.SupplierId);
                if (s.GstInNumber == null || s.GstInNumber == "")
                {


                    var no = new SqlParameter()
                    {
                        ParameterName = "@invoiceno",
                        Value = invoiceno
                    };

                    var id = new SqlParameter()
                    {
                        ParameterName = "@supplierid",
                        Value = s.SupplierId
                    };
                    var gstin = new SqlParameter()
                    {
                        ParameterName = "@gstin",
                        Value = s.GstInNumber
                    };
                    var t = db.Database.SqlQuery<string>("Sp_CheckInvoiceNumber @invoiceno,@supplierid,@gstin", no, id, gstin).FirstOrDefault();
                    if (t != null && t != "")
                    {
                        var response = new
                        {
                            Status = false,
                            Message = "Invoice Number Already Exists"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                    else
                    {
                        var response = new
                        {
                            Status = true,
                            Message = "Invoice Number Not Found"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }

                }
                else
                {

                    var no = new SqlParameter()
                    {
                        ParameterName = "@invoiceno",
                        Value = invoiceno
                    };

                    var gstin = new SqlParameter()
                    {
                        ParameterName = "@gstin",
                        Value = s.GstInNumber
                    };
                    var id = new SqlParameter()
                    {
                        ParameterName = "@supplierid",
                        Value = s.SupplierId
                    };

                    var t = db.Database.SqlQuery<string>("Sp_CheckInvoiceNumber @invoiceno,@supplierid,@gstin", no, id, gstin).FirstOrDefault();
                    if (t != null && t != "")
                    {
                        var response = new
                        {
                            Status = false,
                            Message = "Invoice Number Already Exists"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                    else
                    {
                        var response = new
                        {
                            Status = true,
                            Message = "Invoice Number Not Found"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                }
            }
        }

        [Route("OpenPOData")]
        [HttpGet]
        public HttpResponseMessage OpenPOData(int warehouseid, int skip, int take)
        {
            using (var context = new AuthContext())
            {
                OpenPODataDC open = new OpenPODataDC();
                int IsExport = 0;
                int Take = take;
                if (warehouseid == 0)
                {
                    IsExport = 1;
                    Take = 10;
                }
                var wareparam = new SqlParameter("@warehouseid", warehouseid);
                var skipparam = new SqlParameter("@Skip", skip);
                var takeparam = new SqlParameter("@Take", Take);
                var exportparam = new SqlParameter("@IsExport", IsExport);

                var data = context.Database.SqlQuery<OpenPOData>("exec Sp_OpenPoData @warehouseid,@Skip,@Take,@IsExport", wareparam, skipparam, takeparam, exportparam).ToList();
                if (take > 0)
                {
                    open.OpenPODataList = data.Count() > 0 ? data : null;
                    open.TotalCount = data.Count() > 0 ? data.FirstOrDefault().TotalCount : 0;
                }
                else
                {
                    open.OpenPODataList = data.Count() > 0 ? data : null;
                    open.TotalCount = data.Count() > 0 ? data.FirstOrDefault().TotalCount : 0;
                }
                if (open.TotalCount > 0)
                {
                    var response = new
                    {
                        Status = true,
                        data = open
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                else
                {
                    var response = new
                    {
                        Status = false,
                        data = "No Data Found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
        }

        [Route("GetRole")]
        [HttpGet]
        public bool getrole()
        {
            using (var db = new AuthContext())
            {

                int compid = 0, userid = 0, Warehouse_id = 0;
                bool results = false;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);
                var uid = new SqlParameter()
                {
                    ParameterName = "@userid",
                    Value = userid
                };
                var res = db.Database.SqlQuery<int>("GetUserRoleForFreight @userid", uid).FirstOrDefault();
                if (res > 0)
                {
                    results = true;
                    return results;
                }
                else
                {
                    results = false;
                    return results;
                }

            }
        }

        [Route("GetItemListforexcessitem")]
        [HttpGet]
        public List<GetItemListExcessDC> getitemlist(string key, int WarehouseId)
        {
            using (var db = new AuthContext())
            {
                int compid = 0, userid = 0, Warehouse_id = 0;

                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "Warehouseid"))
                    Warehouse_id = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "Warehouseid").Value);
                List<GetItemListExcessDC> data = new List<GetItemListExcessDC>();
                var keys = new SqlParameter
                {
                    ParameterName = "@key",
                    Value = key
                };
                var wid = new SqlParameter
                {
                    ParameterName = "@warehouseId",
                    Value = WarehouseId
                };
                data = db.Database.SqlQuery<GetItemListExcessDC>("SpGetItemListExcess @key,@warehouseId", keys, wid).ToList();
                return data;
            }
        }

        [Route("GettotalAmountforeccess")]
        [HttpGet]
        public double gettotalamountforeccess(int IRMasterId)
        {
            using (var db = new AuthContext())
            {
                double? totalamount = 0;
                var data = db.IRCreditNoteMaster.Where(x => x.IRMasterId == IRMasterId && x.IsActive == true && x.IsDeleted == false && x.Type == 3).FirstOrDefault();
                if (data != null)
                {
                    var datas = db.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == data.Id && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var i in datas)
                    {
                        double amount = 0;
                        amount = (double)((i.IRPrice * i.ExpiryQty) - (i.Discount));
                        totalamount += (amount + ((amount * (i.TotalTaxPercentage + i.CessTaxPercentage)) / 100));

                        //totalamount += (((i.IRPrice * i.ExpiryQty) - i.Discount)+ ((((i.IRPrice * i.ExpiryQty) - i.Discount)*(i.TotalTaxPercentage+i.CessTaxPercentage))/100));

                    }
                    return Math.Round((double)totalamount, 2);
                }
                else
                {
                    return (double)totalamount;
                }
            }
        }

        public double Gettotalexcessamount(long IRMasterId)
        {
            using (var db = new AuthContext())
            {
                double? totalamount = 0;
                var data = db.IRCreditNoteMaster.Where(x => x.IRMasterId == IRMasterId && x.IsActive == true && x.IsDeleted == false && x.Type == 3).FirstOrDefault();
                if (data != null)
                {
                    var datas = db.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == data.Id && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var i in datas)
                    {
                        double amount = 0;
                        amount = (double)((i.IRPrice * i.ExpiryQty) - (i.Discount));
                        totalamount += (amount + ((amount * (i.TotalTaxPercentage + i.CessTaxPercentage)) / 100));

                        //totalamount += (((i.IRPrice * i.ExpiryQty) - i.Discount)+ ((((i.IRPrice * i.ExpiryQty) - i.Discount)*(i.TotalTaxPercentage+i.CessTaxPercentage))/100));

                    }
                    return Math.Round((double)totalamount, 2);
                }
                else
                {
                    return (double)totalamount;
                }
            }
        }
        public double Gettotaltaxableamount(long IRMasterId)
        {
            using (var db = new AuthContext())
            {
                double? totalamount = 0;
                var data = db.IRCreditNoteMaster.Where(x => x.IRMasterId == IRMasterId && x.IsActive == true && x.IsDeleted == false && x.Type == 3).FirstOrDefault();
                if (data != null)
                {
                    var datas = db.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == data.Id && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var i in datas)
                    {
                        double amount = 0;
                        amount = (double)((i.IRPrice * i.ExpiryQty) - (i.Discount));
                        totalamount += amount;

                        //totalamount += (((i.IRPrice * i.ExpiryQty) - i.Discount)+ ((((i.IRPrice * i.ExpiryQty) - i.Discount)*(i.TotalTaxPercentage+i.CessTaxPercentage))/100));

                    }
                    return (double)totalamount;
                }
                else
                {
                    return (double)totalamount;
                }
            }
        }

        public double GetGstAmount(long IRMasterId)
        {
            using (var db = new AuthContext())
            {
                double? totalamount = 0;
                var data = db.IRCreditNoteMaster.Where(x => x.IRMasterId == IRMasterId && x.IsActive == true && x.IsDeleted == false && x.Type == 3).FirstOrDefault();
                if (data != null)
                {
                    var datas = db.IRCreditNoteDetail.Where(x => x.IRCreditNoteMasterId == data.Id && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var i in datas)
                    {
                        double amount = 0;
                        amount = (double)((i.IRPrice * i.ExpiryQty) - (i.Discount));
                        totalamount += ((amount * (i.TotalTaxPercentage + i.CessTaxPercentage)) / 100);

                        //totalamount += (((i.IRPrice * i.ExpiryQty) - i.Discount)+ ((((i.IRPrice * i.ExpiryQty) - i.Discount)*(i.TotalTaxPercentage+i.CessTaxPercentage))/100));

                    }
                    return Math.Round((double)totalamount, 2);
                }
                else
                {
                    return (double)totalamount;
                }
            }
        }

        private List<IRCreditNoteDetailDc> IRCreditNoteDetailDcForExcess(int IRCreditNoteMasterId, int IrmasterId)
        {
            try
            {

                using (AuthContext context = new AuthContext())
                {
                    var Param = new SqlParameter
                    {
                        ParameterName = "IRCreditNoteMasterId",
                        Value = IRCreditNoteMasterId
                    };

                    var IRMasterIdParam = new SqlParameter
                    {
                        ParameterName = "IrmasterId",
                        Value = IrmasterId
                    };
                    List<IRCreditNoteDetailDc> ObjIRCreditNoteDetailDc = context.Database.SqlQuery<IRCreditNoteDetailDc>("GetIRCreditNoteDetailsForExcess @IRCreditNoteMasterId,@IRMasterId ", Param, IRMasterIdParam).ToList();
                    return ObjIRCreditNoteDetailDc;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region GetAllStatus
        [Route("GetAllStatus")]
        [HttpGet]
        public List<string> GetAllStatus()
        {
            List<string> result = new List<string>();
            using (var db = new AuthContext())
            {
                var query = "select Status from PurchaseOrderMasters where Status is not null group by Status";
                result = db.Database.SqlQuery<string>(query).ToList();
                return result;
            }
        }
        #endregion

        [Route("getdistinct")]
        [HttpPost]
        [AllowAnonymous]
        public string getdistinct()
        {
            using (var context = new AuthContext())
            {
                string ress = "";
                string query = " select ID,RefNo from LadgerEntries le where ObjectType='IR' and RefNo like '%,%'";
                List<getdDC> res = context.Database.SqlQuery<getdDC>(query).ToList();
                foreach (var g in res)
                {
                    List<string> result = new List<string>();
                    result = g.refno.Split(',').Distinct().ToList();
                    string r = "";
                    if (result.Count > 0)
                    {
                        r = string.Join(",", result.ToList());
                    }
                    var data = context.LadgerEntryDB.FirstOrDefault(x => x.ID == g.Id);
                    data.RefNo = r;
                    context.Entry(data).State = EntityState.Modified;
                }
                if (context.Commit() > 0)
                {
                    ress = "Updated";

                }
                else
                {
                    ress = "Not updated";
                    //return res;
                }
                return ress;
            }
        }





        //public HttpResponseMessage IrCorrect()

        //{
        //    using (var context = new AuthContext())
        //    {
        //        List<IrCorrectData> data = context.Database.SqlQuery<IrCorrectData>("GetIrdataforcorrection").ToList();
        //        List<PurchaseOrderIdGroupdata> purchaseorderdata = data.GroupBy(x => new { x.PurchaseOrderId })
        //               .Select(x => new PurchaseOrderIdGroupdata
        //               {
        //                   PurchaseOrderId = x.Key.PurchaseOrderId
        //               }).ToList();


        //        foreach (var pdata in purchaseorderdata)
        //        {
        //            var PodetailId = context.DPurchaseOrderDeatil.Where(x => x.PurchaseOrderId == pdata.PurchaseOrderId).ToList();
        //            foreach (var podid in PodetailId)
        //            {
        //                var Gr = context.GoodsReceivedDetail.Where(x => x.PurchaseOrderDetailId == podid.PurchaseOrderDetailId).ToList();
        //                foreach (var Grdata in Gr)
        //                {
        //                    var gritemmultidata = Gr.Where(z => z.ItemMultiMRPId == Grdata.ItemMultiMRPId).ToList();
        //                    int Ivcount = context.InvoiceReceiptDetail.Where(x => x.GoodsReceivedDetailId == Grdata.Id).Count();
        //                    if (Ivcount == 0)
        //                    {

        //                        InvoiceReceiptDetail obj = new InvoiceReceiptDetail();


        //                    }

        //                }
        //            }
        //        }

        //        return Request.CreateResponse(HttpStatusCode.OK, true);
        //    }
        //}


        //#region
        //[Route("DoIrCorrect")]
        //[HttpGet]
        //[AllowAnonymous]
        //public bool IrCorrect()
        //{
        //    using (var context = new AuthContext())
        //    {
        //        List<IrCorrectData> data = context.Database.SqlQuery<IrCorrectData>("GetIrdataforcorrection").ToList();
        //        foreach (var podid in data.Where(x => x.PurchaseOrderId == 43807).ToList())
        //        {
        //            var Grlist = context.GoodsReceivedDetail.Where(x => x.PurchaseOrderDetail.PurchaseOrderId == podid.PurchaseOrderId && x.Status == 2 && x.IsDeleted == false).ToList();
        //            if (Grlist != null)
        //            {
        //                foreach (var gr in Grlist)
        //                {
        //                    var InvoiceReceiptDetailList = context.InvoiceReceiptDetail.Where(x => x.GoodsReceivedDetailId==gr.Id && x.Status == 2).ToList();
        //                    if (InvoiceReceiptDetailList != null)
        //                    {
        //                        foreach (var it in InvoiceReceiptDetailList)
        //                        {

        //                            if (it.IRQuantity == (gr.Qty + gr.DamageQty + gr.ExpiryQty)) 
        //                            {
        //                                var IRUpdate = context.InvoiceReceiptDetail.Where(x => x.GoodsReceivedDetailId == it.Id && x.IsDeleted == false).SingleOrDefault();
        //                                if (IRUpdate != null)
        //                                {
        //                                    var NotIrGRPosted = Grlist.Where(x => x.Id == gr.Id).FirstOrDefault();
        //                                    var IsIrPosted = context.InvoiceReceiptDetail.Any(x => x.GoodsReceivedDetailId == NotIrGRPosted.Id && x.IsDeleted == false);
        //                                    if (!IsIrPosted && IRUpdate != null && IRUpdate.IRQuantity >= NotIrGRPosted.Qty && (IRUpdate.IRQuantity - NotIrGRPosted.Qty) > 0)
        //                                    {
        //                                        int actualQty = IRUpdate.IRQuantity;
        //                                        //Update
        //                                        double discountamt = 0;
        //                                        IRUpdate.IRQuantity = IRUpdate.IRQuantity - NotIrGRPosted.Qty;

        //                                        discountamt = Convert.ToDouble((IRUpdate.DiscountAmount) / actualQty) * IRUpdate.IRQuantity;
        //                                        IRUpdate.TotalTaxAmount = ((IRUpdate.IRQuantity * IRUpdate.Price) - discountamt) * IRUpdate.TotalTaxPercentage / 100;
        //                                        IRUpdate.CessTaxAmount = ((IRUpdate.IRQuantity * IRUpdate.Price) - discountamt) * IRUpdate.CessTaxPercentage / 100;
        //                                        IRUpdate.GSTAmount = IRUpdate.TotalTaxAmount;
        //                                        context.Entry(IRUpdate).State = EntityState.Modified;

        //                                        //Create
        //                                        InvoiceReceiptDetail InsertedItem = new InvoiceReceiptDetail();

        //                                        discountamt = Convert.ToDouble((IRUpdate.DiscountAmount) / actualQty) * NotIrGRPosted.Qty;
        //                                        InsertedItem.FinalDiscountAmount = discountamt;
        //                                        InsertedItem.CessTaxPercentage = IRUpdate.CessTaxPercentage;
        //                                        InsertedItem.CreatedBy = IRUpdate.CreatedBy;
        //                                        InsertedItem.CreatedDate = IRUpdate.CreatedDate;
        //                                        InsertedItem.DiscountAmount = Convert.ToDecimal(discountamt);
        //                                        InsertedItem.DiscountPercent = IRUpdate.DiscountPercent;
        //                                        InsertedItem.GoodsReceivedDetailId = NotIrGRPosted.Id;
        //                                        InsertedItem.IRQuantity = NotIrGRPosted.Qty;
        //                                        InsertedItem.IsActive = true;
        //                                        InsertedItem.IsDeleted = false;
        //                                        InsertedItem.Price = IRUpdate.Price;
        //                                        InsertedItem.Status = IRUpdate.Status;
        //                                        InsertedItem.TotalTaxPercentage = IRUpdate.TotalTaxPercentage;
        //                                        InsertedItem.TotalTaxAmount = ((NotIrGRPosted.Qty * IRUpdate.Price) - discountamt) * IRUpdate.TotalTaxPercentage / 100;
        //                                        InsertedItem.CessTaxAmount = ((NotIrGRPosted.Qty * IRUpdate.Price) - discountamt) * IRUpdate.CessTaxPercentage / 100;

        //                                        InsertedItem.GSTPercentage = InsertedItem.TotalTaxPercentage;
        //                                        InsertedItem.GSTAmount = InsertedItem.TotalTaxAmount;

        //                                        context.InvoiceReceiptDetail.Add(InsertedItem);
        //                                        if (context.Commit() > 0)
        //                                        {
        //                                            logger.Info(" Gr Inserted for Ir: " + podid);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                logger.Info(" Ir Corrected for GoodId: " + podid);

        //            }
        //            }
        //        }
        //        return true;
        //    }
        //}


        //#endregion

        #region method for Subcategory wise stop Po
        [Route("PoCheckbySubcatid")]
        [HttpGet]
        public async Task<StopPoDC> PoCheckbySubcatId(int warehouseid, int ItemId, int SubcategoryId, int SubsubcategoryId, int Multimrpid)
        {
            StopPoDC res = null;
            using (var db = new AuthContext())
            {
                string ItemNumber = "";
                int compid = 0;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "compid"))
                    compid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "compid").Value);
                if (ItemId > 0)
                {
                    var itemdata = db.itemMasters.FirstOrDefault(z => z.ItemId == ItemId && z.CompanyId == compid && z.WarehouseId == warehouseid);
                    //var itemdata = db.itemMasters.FirstOrDefault(x => x.ItemId == ItemId);
                    SubcategoryId = itemdata.SubCategoryId;
                    SubsubcategoryId = itemdata.SubsubCategoryid;
                    ItemNumber = itemdata.ItemNumber;
                }
                if (Multimrpid > 0)
                {
                    ItemNumber = db.ItemMultiMRPDB.FirstOrDefault(x => x.ItemMultiMRPId == Multimrpid).ItemNumber;
                }


                var wid = new SqlParameter("@warehouseid", warehouseid);
                var subid = new SqlParameter("@subcatid", SubcategoryId);
                var subsubid = new SqlParameter("@subsubcatid", SubsubcategoryId);
                var number = new SqlParameter("@itemnumber", ItemNumber);

                res = db.Database.SqlQuery<StopPoDC>("exec Sp_checkformakingPo @warehouseid,@subcatid,@subsubcatid,@itemnumber"
                    , wid, subid, subsubid, number).FirstOrDefault();
                if (res == null)
                    res = new StopPoDC { StopPo = false };

            }
            return res;
        }
        #endregion

        [Route("GetDebitNoteRegisterData")]
        [HttpPost]
        [AllowAnonymous]
        public List<DebitNoteDataDC> GetDebitNoteRegisterData(DebitPayload payload)
        {
            var result = new List<DebitNoteDataDC>();
            using (var context = new AuthContext())
            {
                if (payload != null)
                {

                    var Widlist = new DataTable();
                    Widlist.Columns.Add("IntValue");
                    foreach (var obj in payload.WarehouseId)
                    {
                        var dr = Widlist.NewRow();
                        dr["IntValue"] = obj;
                        Widlist.Rows.Add(dr);
                    }
                    var param2 = new SqlParameter("@warehouseid", Widlist);
                    param2.SqlDbType = SqlDbType.Structured;
                    param2.TypeName = "dbo.IntValues";
                    var param3 = new SqlParameter("@startdate", payload.StartDate);
                    var param4 = new SqlParameter("@enddate", payload.EndDate);
                    var param5 = new SqlParameter("@skip", payload.Skip);
                    var param6 = new SqlParameter("@take", payload.take);
                    var param7 = new SqlParameter("@IsExport", payload.IsExport);
                    result = context.Database.SqlQuery<DebitNoteDataDC>("exec Sp_getdebitnoteregdata @warehouseid, @startdate,@enddate,@skip,@take,@IsExport", param2, param3, param4, param5, param6
                        , param7).ToList();

                }
            }

            return result;
        }


        #region PoStopConfig
        [Route("AddPoStopConfig")]
        [HttpPost]
        public HttpResponseMessage AddnewSeasonalConfig(SeasonPayload payload)
        {
            using (var context = new AuthContext())
            {
                var response = new { Status = false, Data = "" };
                int userid = 0;

                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                int subsubcatid = 0;

                DateTime cdate = DateTime.Now;
                bool isconfigurationexist = false;

                if (payload.SubCategoryId > 0 && payload.SubsubCategoryId.Count() > 0 && payload.WarehouseId.Count() > 0)
                {
                    var subsubcategorydata = context.SubsubCategorys.Where(x => payload.SubsubCategoryId.Contains(x.SubsubCategoryid)).ToList();
                    var data = context.SubCategoryStopPos.Where(x => x.SubCatId == payload.SubCategoryId && payload.WarehouseId.Contains(x.WarehouseId)
                                && x.IsActive == true && x.IsDeleted == false).ToList();
                    foreach (var d in payload.SubsubCategoryId)
                    {
                        if (data.Count() > 0)
                        {
                            var isexistdata = data.FirstOrDefault(x => Convert.ToInt16(x.SubsubcatId) == d && payload.WarehouseId.Contains(x.WarehouseId));
                            if (isexistdata != null)
                            {
                                subsubcatid = (int)isexistdata.SubsubcatId;
                            }
                        }
                        if (subsubcatid > 0)
                        {
                            isconfigurationexist = true;
                            var subsubcatname = subsubcategorydata.FirstOrDefault(x => x.SubsubCategoryid == subsubcatid).SubsubcategoryName;
                            response = new
                            {
                                Status = false,
                                Data = "Configuration is Already Exist for " + subsubcatname
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                        else
                        {
                            foreach (var wh in payload.WarehouseId)
                            {
                                SubCategoryStopPo subcat = new SubCategoryStopPo();
                                subcat.SubCatId = payload.SubCategoryId;
                                subcat.SubsubcatId = d;
                                subcat.WarehouseId = wh;
                                subcat.IsActive = true;
                                subcat.IsDeleted = false;
                                subcat.StopPo = true;
                                subcat.CreatedDate = cdate;
                                subcat.CreatedBy = userid;
                                if (payload.FromDate != null && payload.ToDate != null)
                                {
                                    subcat.FromDate = payload.FromDate;
                                    subcat.ToDate = payload.ToDate;
                                }
                                context.SubCategoryStopPos.Add(subcat);
                            }

                        }

                    }
                    //foreach (var d in payload.SubsubCategoryId)
                    //{
                    //    if (data.Count() > 0)
                    //    {
                    //        var isexistdata = data.FirstOrDefault(x => Convert.ToInt16(x.SubsubcatId) == d);
                    //        if (isexistdata != null)
                    //        {
                    //            subsubcatid = (int)isexistdata.SubsubcatId;
                    //        }
                    //        //subsubcatid = (int)data.FirstOrDefault(x => Convert.ToInt16(x.SubsubcatId) ==d).SubsubcatId;
                    //    }
                    //    if (subsubcatid > 0)
                    //    {
                    //        isconfigurationexist = true;
                    //        var subsubcatname = subsubcategorydata.FirstOrDefault(x => x.SubsubCategoryid == subsubcatid).SubsubcategoryName;
                    //        response = new
                    //        {
                    //            Status = false,
                    //            Data = "Configuration is Already Exist for " + subsubcatname
                    //        };
                    //        return Request.CreateResponse(HttpStatusCode.OK, response);
                    //    }
                    //    else
                    //    {
                    //        SubCategoryStopPo subcat = new SubCategoryStopPo();
                    //        subcat.SubCatId = payload.SubCategoryId;
                    //        subcat.SubsubcatId = d;
                    //        subcat.WarehouseId = payload.WarehouseId;
                    //        subcat.IsActive = true;
                    //        subcat.IsDeleted = false;
                    //        subcat.StopPo = true;
                    //        subcat.WarehouseId = payload.WarehouseId;
                    //        subcat.CreatedDate = cdate;
                    //        subcat.CreatedBy = userid;
                    //        if (payload.FromDate != null && payload.ToDate != null)
                    //        {
                    //            subcat.FromDate = payload.FromDate;
                    //            subcat.ToDate = payload.ToDate;
                    //        }
                    //        context.SubCategoryStopPos.Add(subcat);
                    //    }
                    //}
                    if (isconfigurationexist == false)
                    {
                        if (context.Commit() > 0)
                        {
                            response = new
                            {
                                Status = true,
                                Data = "Add Successfully"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                        else
                        {
                            response = new
                            {
                                Status = false,
                                Data = "Something Went wrong"
                            };
                            return Request.CreateResponse(HttpStatusCode.OK, response);
                        }
                    }
                }
                else
                {
                    response = new
                    {
                        Status = false,
                        Data = "Please Select Mandatory Field"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
        }

        [Route("EditPoStopById")]
        [HttpGet]
        public string EditSeasonalConfigById(long Id, DateTime? FromDate, DateTime? ToDate, bool StopPo)
        {
            using (var context = new AuthContext())
            {
                int userid = 0;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                string res = "";
                var data = context.SubCategoryStopPos.FirstOrDefault(x => x.Id == Id && x.IsActive == true && x.IsDeleted == false);
                if (data != null)
                {
                    data.ToDate = ToDate != null ? ToDate : null;
                    data.FromDate = FromDate != null ? FromDate : null;
                    data.StopPo = StopPo;
                    data.ModifiedBy = userid;
                    data.ModifiedDate = DateTime.Now;
                    context.Entry(data).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        res = "Edit Successfully";
                        return res;
                    }
                    else
                    {
                        res = "Something Went wrong";
                        return res;
                    }
                }
                else
                {
                    res = "no Data Found";
                    return res;
                }
                return res;
            }
        }

        [Route("GetPoStopConfig")]
        [HttpPost]
        public async Task<List<GetPoStopConfigurationDC>> GetSeasonalConfig(GetPoStopPayload payload)
        {
            List<GetPoStopConfigurationDC> res = new List<GetPoStopConfigurationDC>();
            using (var db = new AuthContext())
            {
                var sublist = new DataTable();
                sublist.Columns.Add("IntValue");
                foreach (var obj in payload.SubcategoryId)
                {
                    var dr = sublist.NewRow();
                    dr["IntValue"] = obj;
                    sublist.Rows.Add(dr);
                }
                var param = new SqlParameter("@SubcategoryId", sublist);
                param.SqlDbType = SqlDbType.Structured;
                param.TypeName = "dbo.IntValues";

                var WarehouseId = new DataTable();
                WarehouseId.Columns.Add("IntValue");
                foreach (var obj in payload.WarehouseId)
                {
                    var dr = WarehouseId.NewRow();
                    dr["IntValue"] = obj;
                    WarehouseId.Rows.Add(dr);
                }
                var param1 = new SqlParameter("@Warehouseid", WarehouseId);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.IntValues";


                var param2 = new SqlParameter("@Skip", payload.Skip);
                var param3 = new SqlParameter("@Take", payload.Take);
                res = db.Database.SqlQuery<GetPoStopConfigurationDC>("exec Sp_getAllpostopconfig @Warehouseid,@SubcategoryId,@Skip,@Take", param1, param, param2, param3).ToList();
                return res;
            }
        }

        [Route("getAllConfig")]
        [HttpGet]
        public async Task<List<getAllCongifDetails>> getAllConfig()
        {
            List<getAllCongifDetails> res = new List<getAllCongifDetails>();
            using (var db = new AuthContext())
            {
                res = db.Database.SqlQuery<getAllCongifDetails>("exec Sp_GetAllConfigSeasonwise ").ToList();
                return res;
            }
        }

        [Route("EditSeasonConfig")]
        [HttpGet]
        public string EditSeasonConfig(int SeasonId, int FromMonth, int ToMonth)
        {
            string res = "";
            using (var db = new AuthContext())
            {
                int userid = 0;

                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var data = db.seasonalConfigs.FirstOrDefault(x => x.SeasonId == SeasonId && x.IsDeleted == false);
                if (data != null)
                {
                    data.FromMonth = FromMonth;
                    data.ToMonth = ToMonth;
                    data.ModifiedDate = DateTime.Now;
                    data.ModifiedBy = userid;
                    db.Entry(data).State = EntityState.Modified;
                    if (db.Commit() > 0)
                    {
                        res = "Record Update Successfully";
                    }
                    else
                    {
                        res = "Something went wrong !! please try again";
                    }
                }
                else
                {
                    res = "Data not Found";
                }
                return res;
            }
        }

        [Route("AddnewSeasonConfig")]
        [HttpGet]
        public string AddnewSeasonConfig(string SeasonName, int FromMonth, int ToMonth, bool Iseditdisabled)
        {
            string res = "";
            using (var db = new AuthContext())
            {
                int userid = 0;
                int seasonid = 0;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);
                var data = db.seasonalConfigs.FirstOrDefault(x => x.SeasonName.ToUpper() == SeasonName.ToUpper() && x.IsActive == true && x.IsDeleted == false);
                if (data == null)
                {

                    if (SeasonName != null && FromMonth > 0 && ToMonth > 0)
                    {
                        SeasonalConfig s = new SeasonalConfig();
                        s.CreatedDate = DateTime.Now;
                        s.SeasonName = SeasonName;
                        s.FromMonth = FromMonth;
                        s.ToMonth = ToMonth;
                        s.IsActive = true;
                        s.IsDeleted = false;
                        s.CreatedBy = userid;
                        s.IsEditDisabled = Iseditdisabled;
                        db.seasonalConfigs.Add(s);
                        if (db.Commit() > 0)
                        {
                            res = "Season Configuration Add Successfully ";
                        }
                        else
                        {
                            res = "Something Went wrong !! Please try again";
                        }
                    }
                    else
                    {
                        res = "Please Enter Required Field";
                    }
                }
                else
                {
                    res = "Season Name Already Exists";
                }

                return res;
            }
        }

        [Route("GetSeasonIdByCatId")]
        [HttpGet]
        public int GetSeasonIdByCatId(int CatId)
        {
            using (var db = new AuthContext())
            {
                int res = 0;
                res = db.Categorys.FirstOrDefault(x => x.Categoryid == CatId).SeasonId;
                return res;
            }
        }
        #endregion

        [Route("GetSubSubCategoryBySubCategoryId")]
        [HttpGet]
        public List<GetsubsubcategoryDc> GetSubSubCategoryBySubCategoryId(int subCatID)
        {
            using (AuthContext context = new AuthContext())
            {
                List<GetsubsubcategoryDc> res = new List<GetsubsubcategoryDc>();
                var param1 = new SqlParameter("@subcategoryid", subCatID);
                res = context.Database.SqlQuery<GetsubsubcategoryDc>("exec Sp_GetSubsubCategoryId @subcategoryid", param1).ToList();
                return res;
            }
        }

        [Route("GetPostopConfigHistory")]
        [HttpGet]
        public List<GetPoStopConfigHistoryDC> GetPostopConfigHistory(long Id)
        {
            using (var db = new AuthContext())
            {
                List<GetPoStopConfigHistoryDC> result = new List<GetPoStopConfigHistoryDC>();
                var podata = db.SubCategoryStopPos.FirstOrDefault(x => x.Id == Id);
                string id = Convert.ToString(Id);
                EntityHistoryController ctrl = new EntityHistoryController();
                var data = ctrl.Get("SubCategoryStopPo", id);
                if (data.AuditHistory != null)
                {
                    foreach (var history in data.AuditHistory.OrderBy(x => x.AuditDate).ToList())
                    {
                        GetPoStopConfigHistoryDC r = new GetPoStopConfigHistoryDC();
                        r.CreatedDate = podata.CreatedDate;
                        r.CreatedBy = db.Peoples.FirstOrDefault(x => x.PeopleID == podata.CreatedBy).DisplayName;
                        foreach (var field in history.AuditFields)
                        {
                            if (field.FieldName == "FromDate")
                            {
                                if (!string.IsNullOrEmpty(field.NewValue))
                                {
                                    r.FromDate = Convert.ToDateTime(field.NewValue);
                                }
                            }
                            else if (field.FieldName == "ToDate")
                            {
                                if (!string.IsNullOrEmpty(field.NewValue))
                                {
                                    r.ToDate = Convert.ToDateTime(field.NewValue);
                                }
                            }
                            else if (history.AuditAction == "Modified" && field.FieldName == "ModifiedDate") r.ModifiedDate = history.AuditDate;
                            else if (field.FieldName == "ModifiedBy")
                            {
                                if (!string.IsNullOrEmpty(field.NewValue))
                                {
                                    int idd = Convert.ToInt32(field.NewValue);
                                    r.ModifiedBy = db.Peoples.FirstOrDefault(x => x.PeopleID == idd).DisplayName;
                                }
                                else
                                {
                                    r.ModifiedBy = "";
                                }
                            }
                            else if (field.FieldName == "StopPo") r.StopPo = Convert.ToBoolean(field.NewValue);
                        }
                        result.Add(r);


                    }
                }
                return result;
            }
        }

        [Route("GetSeasonalConfigHistory")]
        [HttpGet]
        public List<GetSeasonalConfigHistoryDC> GetSeasonalConfigHistory(int SeasonId)
        {
            using (var db = new AuthContext())
            {
                List<GetSeasonalConfigHistoryDC> result = new List<GetSeasonalConfigHistoryDC>();
                var podata = db.seasonalConfigs.FirstOrDefault(x => x.SeasonId == SeasonId);
                string id = Convert.ToString(SeasonId);
                EntityHistoryController ctrl = new EntityHistoryController();
                var data = ctrl.Get("SeasonalConfig", id);
                if (data.AuditHistory != null)
                {
                    foreach (var history in data.AuditHistory.OrderBy(x => x.AuditDate).ToList())
                    {
                        GetSeasonalConfigHistoryDC r = new GetSeasonalConfigHistoryDC();
                        r.CreatedDate = podata.CreatedDate;
                        r.CreatedBy = db.Peoples.FirstOrDefault(x => x.PeopleID == podata.CreatedBy).DisplayName;
                        foreach (var field in history.AuditFields)
                        {
                            if (field.FieldName == "FromMonth") r.Frommonth = Convert.ToInt32(field.NewValue);
                            else if (field.FieldName == "ToMonth") r.Tomonth = Convert.ToInt32(field.NewValue);
                            else if (history.AuditAction == "Modified" && field.FieldName == "ModifiedDate") r.ModifiedDate = history.AuditDate;
                            else if (field.FieldName == "ModifiedBy")
                            {
                                if (!string.IsNullOrEmpty(field.NewValue))
                                {
                                    int idd = Convert.ToInt32(field.NewValue);
                                    r.ModifiedBy = db.Peoples.FirstOrDefault(x => x.PeopleID == idd).DisplayName;
                                }
                                else
                                {
                                    r.ModifiedBy = "";
                                }
                            }
                            else if (field.FieldName == "IsActive") r.IsActive = Convert.ToBoolean(field.NewValue);
                        }
                        result.Add(r);
                    }
                }
                return result;
            }
        }

        [Route("Inactiveseasonalconfig")]
        [HttpGet]
        public HttpResponseMessage Inactiveseasonalconfig(int SeasonId, bool Isedit)
        {
            using (var context = new AuthContext())
            {
                var response = new { Status = false, Data = "" };
                int userid = 0;
                var identity = User.Identity as ClaimsIdentity;
                if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                    userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

                var data = context.seasonalConfigs.FirstOrDefault(x => x.SeasonId == SeasonId && x.IsDeleted == false);
                if (data != null)
                {
                    data.IsActive = Isedit;
                    data.ModifiedBy = userid;
                    data.ModifiedDate = DateTime.Now;
                    context.Entry(data).State = EntityState.Modified;
                    if (context.Commit() > 0)
                    {
                        response = new
                        {
                            Status = true,
                            Data = "Edit Successfully"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                    else
                    {
                        response = new
                        {
                            Status = false,
                            Data = "Something went wrong"
                        };
                        return Request.CreateResponse(HttpStatusCode.OK, response);
                    }
                }
                else
                {
                    response = new
                    {
                        Status = false,
                        Data = "Data Not found"
                    };
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
        }

        [Route("GrQualityApprovalConfiguration")]
        [HttpPost]
        public List<grQualityApproveDC> GrQualityApprovalConfiguration(GrQualityApprovalConfigurationDc dcs)
        {
            List<grQualityApproveDC> res = new List<grQualityApproveDC>();
            using (var db = new AuthContext())
            {
                //var param1 = new SqlParameter("@warehouseid", warehouseid);
                var wid = new DataTable();
                wid.Columns.Add("IntValue");
                foreach (var obj in dcs.warehouseid)
                {
                    var dr = wid.NewRow();
                    dr["IntValue"] = obj;
                    wid.Rows.Add(dr);
                }
                var param1 = new SqlParameter("@warehouseid", wid);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.IntValues";


                var param2 = new SqlParameter("@active", dcs.active);
                var param5 = new SqlParameter("@KeyWord", dcs.Keyword != null ? dcs.Keyword : (object)DBNull.Value);
                var param3 = new SqlParameter("@Skip", dcs.Skip);
                var param4 = new SqlParameter("@Take", dcs.Take);
                res = db.Database.SqlQuery<grQualityApproveDC>("exec GrQualityApprovalConfiguration @warehouseid,@active,@KeyWord,@Skip,@Take", param1, param2, param5, param3, param4).ToList();
                return res;
            }
        }
        [Route("AddSearchGrQualityItem")]
        [HttpPost]
        public List<AddGrQualityApprovalItemDC> AddGrQualityApprovalItem(AddSearchGrQualityItemPayload dcs)
        {
            List<AddGrQualityApprovalItemDC> res = new List<AddGrQualityApprovalItemDC>();
            using (var db = new AuthContext())
            {
                var wid = new DataTable();
                wid.Columns.Add("IntValue");
                foreach (var obj in dcs.warehouseid)
                {
                    var dr = wid.NewRow();
                    dr["IntValue"] = obj;
                    wid.Rows.Add(dr);
                }
                var param1 = new SqlParameter("@warehouseid", wid);
                param1.SqlDbType = SqlDbType.Structured;
                param1.TypeName = "dbo.IntValues";

                var bid = new DataTable();
                bid.Columns.Add("IntValue");
                foreach (var obj in dcs.brandId)
                {
                    var dr = bid.NewRow();
                    dr["IntValue"] = obj;
                    bid.Rows.Add(dr);
                }
                var param2 = new SqlParameter("@SubsubCategoryid", bid);
                param2.SqlDbType = SqlDbType.Structured;
                param2.TypeName = "dbo.IntValues";

                var param3 = new SqlParameter("@keyword", dcs.keyword != null ? dcs.keyword : (object)DBNull.Value);//payload.SkCode != null ? payload.SkCode : (object)DBNull.Value
                res = db.Database.SqlQuery<AddGrQualityApprovalItemDC>("exec AddGrQualityApprovalItem @warehouseid,@SubsubCategoryid,@keyword", param1, param2, param3).ToList();
                return res;
            }
        }

        [Route("AddNewGrQualityApprovalItem")]
        [HttpPost]
        public APIResponse AddNewGrQualityApprovalItem(List<AddnewGrQualityItemDC> PayloadList)
        {
            APIResponse res = new APIResponse();
            var identity = User.Identity as ClaimsIdentity;
            int userid = identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid")
                ? int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value)
                : 0;

            using (var context = new AuthContext())
            {
                if (PayloadList != null)
                {
                    var wids = PayloadList.Select(x => x.WarehouseId).ToList();
                    var itemNo = PayloadList.Select(x => x.ItemNo).ToList();
                    var List = context.GrQualityConfigurations.Where(x => wids.Contains(x.WarehouseId) && itemNo.Contains(x.ItemNumber) && x.IsDeleted == false).ToList();
                    var wid = context.Warehouses.Where(z => wids.Contains(z.WarehouseId)).ToList();
                    List<string> AddedString = new List<string>();
                    foreach (var q in List)
                    {
                        foreach (var w in wid)
                        {
                            if (w.WarehouseId == q.WarehouseId)
                            {
                                string a = q.ItemNumber + "( " + w.WarehouseName + ") ";
                                AddedString.Add(a);
                            }
                        }
                    }
                    if (List != null && List.Any())
                    {
                        res.Status = false;
                        res.Message = (string.Join(", ", AddedString)) + "Already Existed.";
                        return res;
                    }
                    else
                    {
                        List<GrQualityConfiguration> newList = new List<GrQualityConfiguration>();
                        foreach (var t in PayloadList)
                        {
                            GrQualityConfiguration gr = new GrQualityConfiguration();
                            gr.WarehouseId = t.WarehouseId;
                            gr.ItemNumber = t.ItemNo;
                            gr.IsReportUpload = t.IsChecked;
                            gr.GrQualityCheckerId = t.CheckerId;
                            gr.CreatedBy = userid;
                            gr.CreatedDate = DateTime.Now;
                            gr.IsActive = true;
                            gr.IsDeleted = false;
                            newList.Add(gr);
                        }
                        if (newList != null && newList.Any())
                        {
                            context.GrQualityConfigurations.AddRange(newList);
                        }
                    }
                    if (context.Commit() > 0)
                    {
                        res.Status = true;
                        res.Message = "Data Saved Successfully ";
                    }
                    else
                    {
                        res.Status = false;
                        res.Message = "Data Not Saved ";
                    }
                }
                else
                {
                    res.Status = false;
                    res.Message = "Data Not Saved ";
                }
            }
            return res;
        }

        [HttpPost]
        [Route("ChangeEditQualityConfig")]
        public APIResponse ChangeEditQualityConfig(ChangeEditQualityConfigDC Dcs)
        {
            APIResponse res = new APIResponse();
            var identity = User.Identity as ClaimsIdentity;
            int userid = identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid")
                ? int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value)
                : 0;

            using (var context = new AuthContext())
            {
                if (Dcs != null)
                {
                    var data = context.GrQualityConfigurations.FirstOrDefault(x => x.WarehouseId == Dcs.WarehouseId && x.ItemNumber == Dcs.ItemNumber && x.IsDeleted == false);
                    if (data != null)
                    {
                        data.IsActive = Dcs.IsActive;
                        data.IsReportUpload = Dcs.IsReportUpload;
                        data.GrQualityCheckerId = Dcs.CheckerId;
                        data.ModifiedBy = userid;
                        data.ModifiedDate = DateTime.Now;
                        context.Entry(data).State = EntityState.Modified;
                    }
                    else
                    {
                        res.Status = false;
                        res.Message = "Data Not Found";
                    }
                }
                if (context.Commit() > 0)
                {
                    res.Status = true;
                    res.Message = "Updated Successfully";
                }
                else
                {
                    res.Status = false;
                    res.Message = "Something went wrong!!";
                }
            }
            return res;
        }

        [Route("QualityCheckerPeopleList")]
        [HttpGet]
        public List<QualityCheckerPeopleListDc> QualityCheckerPeopleList()
        {
            using (var context = new AuthContext())
            {
                List<QualityCheckerPeopleListDc> QualityCheckerPeopleListDcs = new List<QualityCheckerPeopleListDc>();
                string querys = "select PeopleID,DisplayName from  People p inner join AspNetUsers anu on p.Email=anu.Email inner join AspNetUserRoles anur on anu.Id=anur.UserId  inner join AspNetRoles anr on anur.RoleId = anr.Id  where anur.isActive=1 and p.Active=1 and p.Deleted=0  and Name like '%Quality Manager%'";
                return QualityCheckerPeopleListDcs = context.Database.SqlQuery<QualityCheckerPeopleListDc>(querys).ToList();
                //return res;
            }
        }
    }
    public class GrQualityApprovalConfigurationDc
    {
        public List<int> warehouseid { get; set; }
        public bool active { get; set; }
        public string Keyword { get; set; }
        public int Skip { get; set; }
        public int Take { get; set; }
    }
    public class QualityCheckerPeopleListDc
    {
        public int PeopleID { get; set; }
        public string DisplayName { get; set; }
    }
    public class AddSearchGrQualityItemPayload
    {
        public List<int> warehouseid { get; set; }
        public List<int> brandId { get; set; }
        public string keyword { get; set; }
    }
    public class ChangeEditQualityConfigDC
    {
        public int WarehouseId { get; set; }
        public int CheckerId { get; set; }
        public string ItemNumber { get; set; }
        public bool IsActive { get; set; }
        public bool IsReportUpload { get; set; }
    }

    public class AddGrQualityApprovalItemDC
    {
        public string ItemNumber { get; set; }
        public string ItemName { get; set; }
        public string Name { get; set; }
    }
    public class AddnewGrQualityItemDC
    {
        public string ItemNo { get; set; }
        public int WarehouseId { get; set; }
        public int CheckerId { get; set; }
        public bool IsChecked { get; set; }
    }

    public class grQualityApproveDC
    {
        public long Id { get; set; }
        public int WarehouseId { get; set; }
        public int peopleId { get; set; }
        public string ItemNumber { get; set; }
        public string itemname { get; set; }
        public string WarehouseName { get; set; }
        public string DisplayName { get; set; }
        public bool IsReportUpload { get; set; }
        public bool IsActive { get; set; }
        public int TotalCount { get; set; }
    }

    public class GetBuyerIdDC
    {
        public string DisplayName { get; set; }
        public int PeopleId { get; set; }
    }

    public class StopPoDC
    {
        public bool StopPo { get; set; }
        public string CompanyBrand { get; set; }
    }

    public class PurchaseOrderIdGroupdata
    {

        public int PurchaseOrderId { get; set; }

    }
    public class IrCorrectData
    {
        public int GoodsReceivedDetailId { get; set; }
        public int IRQuantity { get; set; }
        public int PurchaseOrderId { get; set; }

    }
    public class POResult
    {
        public bool Status { get; set; }
        public string Message { get; set; }
    }
    public class AdvanceAmount
    {
        public decimal? BankPayment { get; set; }
        public decimal? TotalPayment { get; set; }
        public decimal? OutPayment { get; set; }
        public decimal? SettledPayment { get; set; }
        public decimal? TDSAmount { get; set; }


    }
    public class CancelPR
    {
        public string Comment { get; set; }
        public long PurchaseOrderId { get; set; }
    }

    public class MoveGRtoIRDTO
    {
        public int PurchaseOrderId { get; set; }
        public int GrSerialNumber { get; set; }
        public string IRID { get; set; }

        public string ImagePath { get; set; }
        public DateTime IRDate { get; set; }
        public double TotalAmount { get; set; }
        public bool IsCorrect { get; set; }
        public bool IsIrExtendInvoiceDate { get; set; }
    }




    public enum PRType
    {
        PurchaseOrder = 0,
        PurchaseOrderRequest = 1,

    }
    public enum PRStatus
    {
        PRApproveBY = 0,
        PRApprover = 1,

    }

    public class BuyerMinDc
    {
        public int PeopleId { get; set; }
        public string DisplayName { get; set; }
        public string Mobile { get; set; }
    }

    public class classification
    {
        public string itemNumber { get; set; }
        public int warehouseid { get; set; }
        public string Category { get; set; }
        public int Qty { get; set; }

    }

    public class BuyerWithBrand
    {
        public int BuyerId { get; set; }
        public int SubsubCategoryid { get; set; }
        public string SubsubcategoryName { get; set; }
    }
    public class BuyerBrandCategory
    {
        public string itemname { get; set; }
        public int? BuyerId { get; set; }
        public int SubsubCategoryid { get; set; }
        public string SubsubcategoryName { get; set; }
        public string DisplayName { get; set; }

    }
    public class BuyerMinDcDTo
    {
        public int PeopleId { get; set; }
    }
    public class Display
    {
        public string DisplayName { get; set; }
        public int? IsApprove { get; set; }
        public int ApprovalID { get; set; }
        public string Comments { get; set; }
    }
    public class IRApproverName
    {
        public string DisplayName { get; set; }
        public int IsApprove { get; set; }
        public int BuyerId { get; set; }
        public string BuyerComments { get; set; }
    }
    public class ApproverName
    {
        public string DisplayName { get; set; }
        public bool IsApproved { get; set; }
        public string Comment { get; set; }

    }

    public class BuyerBrand
    {
        public List<BuyerMinDcDTo> BuyerMinDcDTo { get; set; }
        public List<BrandBuyer> BrandBuyer { get; set; }
    }
    public class widDTO
    {
        public DateTime From { get; set; }
        public DateTime TO { get; set; }
        public int WarehouseId { get; set; }
    }
    public class IRdata
    {
        public int PurchaseOrderId { get; set; }
        public int IRMasterId { get; set; }
        public List<peopleList> AssignBuyerIDs { get; set; }
    }

    public class peopleList
    {
        public int BuyerId { get; set; }
        public bool Value { get; set; }
    }
    public class RejectedIRData
    {
        public List<peopleList> AssignBuyerIDs { get; set; }
        public GetIRMasterDc iRMasterDc { get; set; }
    }
    public class Irimageupload
    {
        public bool IsIrExtendInvoiceDate { get; set; }
        public InvoiceImageDc irdetail { get; set; }
        public List<irimageslist> irimageslist { get; set; }
    }
    public class irimageslist
    {
        public string irimages { get; set; }
    }
    public class GoodsReceivedDetailDTo
    {
        public int PurchaseOrderId { get; set; }
        public string SupplierName { get; set; }
        public string Status { get; set; }
        public string GRNo { get; set; }
        public int TotalQuantity { get; set; }
        public int Qty { get; set; }
        public string WarehouseName { get; set; }
        public double PriceRecived { get; set; }
        public double Price { get; set; }
        public string ItemName { get; set; }
        public double MRP { get; set; }
        public DateTime GrDate { get; set; }
        public DateTime CreationDate { get; set; }
        public string ItemNumber { get; set; }
        public int ItemMultiMRPId { get; set; }
        public string DepoName { get; set; }
        public string AverageTAT { get; set; }

        public double? POItemFillRate { get; set; }
        public string POStatus { get; set; }
        public int PurchaseOrderDetailId { get; set; }

    }

    public class GoodsReceivedDetailCExport
    {
        public int PurchaseOrderId { get; set; }
        public string SupplierName { get; set; }
        public string Status { get; set; }
        public string GRNo { get; set; }
        public int TotalQuantity { get; set; }
        public double PurchaseQty { get; set; }
        public string WarehouseName { get; set; }
        public double PriceRecived { get; set; }
        public double Price { get; set; }
        public string ItemName { get; set; }
        public double MRP { get; set; }
        public DateTime GrDate { get; set; }
        public DateTime CreationDate { get; set; }
        public string ItemNumber { get; set; }
        public int Qty { get; set; }
        public string DepoName { get; set; }
        public string AverageTAT { get; set; }

        public double? POItemFillRate { get; set; }
        public string POStatus { get; set; }
        public int PurchaseOrderDetailId { get; set; }

    }

    public class objDTIR
    {
        public int WHID { get; set; }
        public DateTime? From { get; set; }
        public DateTime? TO { get; set; }
        public int? value { get; set; }
        public int list { get; set; }
        public int page { get; set; }
    }
    public class ExportobjDTIR
    {
        public int WHID { get; set; }
        public DateTime? From { get; set; }
        public DateTime? TO { get; set; }
        public int? value { get; set; }
    }

    public class POTATReport
    {
        public int PurchaseOrderId { get; set; }
        public string WarehouseName { get; set; }
        public string SupplierName { get; set; }
        public string Status { get; set; }
        public decimal? PotoGRTAT { get; set; }
        public decimal? GRtoIRTAT { get; set; }
        public decimal? POtoIRTAT { get; set; }
        public DateTime CreationDate { get; set; }
    }

    public class POWithNoGRDTO
    {
        public int PurchaseOrderId { get; set; }
        public string WarehouseName { get; set; }
        public string SupplierName { get; set; }
        public string BuyerName { get; set; }

        public string Status { get; set; }
        public DateTime CreationDate { get; set; }
        public int TotalCount { get; set; }
    }

    public class POWithNoGrPageData
    {
        public List<POWithNoGRDTO> POData { get; set; }
        public int netCount { get; set; }
    }

    public class PMItemDc
    {
        public int ItemId { get; set; }
        public double price { get; set; }
        public double NetPurchasePrice { get; set; }
        public double? POPurchasePrice { get; set; }
        public string itemname { get; set; }
        public int WarehouseId { get; set; }
        public string WarehouseName { get; set; }

        public int MaterialItemId { get; set; }
        public int Type { get; set; }

        public int ConversionValue { get; set; }
        public string Caterogy { get; set; }
        public int Qty { get; set; }
        public int inventryCount { get; set; }
        public int DemandQty { get; set; }
        public int OpenPOQTy { get; set; }
    }
    public class ItemClassificationNewDC
    {
        public string ItemNumber { get; set; }
        public int WarehouseId { get; set; }
        public string Category { get; set; }
        public int Qty { get; set; }
    }
    public class ClosedPODetails
    {
        public int PurchaseOrderId { get; set; }
        public int ClosedPOId { get; set; }
        public double Amount { get; set; }
        public double totalamtofClosedPO { get; set; }
        public DateTime CreateDate { get; set; }

    }
    public class ChildPOFromMotherPODC
    {
        public double usedAmount { get; set; }
        public Int64 ChildPOid { get; set; }
        public string Date { get; set; }
        public Int64 PurchaseOrderId { get; set; }
    }
    public class ETADetailsDC
    {
        public DateTime? ETADate { get; set; }
        public string SupplierName { get; set; }
        public string BuyerName { get; set; }
        public int PurchaseOrderId { get; set; }
        public string WarehouseName { get; set; }
    }
    public class GetDemandQtyDC
    {
        public string ItemNumber { get; set; }
        public string WarehouseName { get; set; }
        public int ItemMultiMrpId { get; set; }
        public int CurrentNetInventory { get; set; }
        public int currentinventory { get; set; }
        public int CurrentDeliveryCanceledInventory { get; set; }
        public int DemandQty { get; set; }
        public int OpenPOQTy { get; set; }
    }


    public class ItemWeight
    {
        public double? weight { get; set; }
        public string weighttype { get; set; }

    }
    public class OpenPOData
    {
        public int WarehouseId { get; set; }
        public string WarehouseName { get; set; }
        public int PurchaseOrderId { get; set; }
        public double TotalAmount { get; set; }
        public DateTime CreationDate { get; set; }
        public string Status { get; set; }
        public double RemainingAmount { get; set; }
        public string SupplierName { get; set; }
        public string IRStatus { get; set; }
        public string IRID { get; set; }

        public int TotalCount { get; set; }
    }
    public class OpenPODataDC
    {
        public List<OpenPOData> OpenPODataList { get; set; }
        public long TotalCount { get; set; }
    }
    public class GetItemListExcessDC
    {
        public string Number { get; set; }
        public double TotalTaxPercentage { get; set; }
        public double TotalCessPercentage { get; set; }
        public string HSNCode { get; set; }
        public double MRP { get; set; }
        public int ItemMultiMRPId { get; set; }
        public string itemname { get; set; }
    }
    public class GetClassificationCategoryData
    {
        public string Itemnumber { get; set; }
        public int WarehouseId { get; set; }
        public string Category { get; set; }
        public int ItemId { get; set; }
    }
    public class GetIrQuantityDC
    {
        public long GoodsReceivedDetailId { get; set; }
        public int IRQuantity { get; set; }
        public int TotalQty { get; set; }


    }
    public class getdDC
    {
        public long Id { get; set; }
        public string refno { get; set; }
    }
    public class DebitNoteDataDC
    {
        public int PurchaseOrderId { get; set; }
        public string WarehouseName { get; set; }
        public string SupplierName { get; set; }
        public DateTime? InvoiceDate { get; set; }
        public string InvoiceNumber { get; set; }
        public string CNNumber { get; set; }
        public double DebitNoteAmount { get; set; }
        public double SGSTTaxPercentage { get; set; }
        public double SGSTTaxAmount { get; set; }
        public double CGSTTaxPercentage { get; set; }
        public double CGSTTaxAmount { get; set; }
        public double IGSTTaxPercentage { get; set; }
        public double IGSTTaxAmount { get; set; }
        public double CessTaxPercentage { get; set; }
        public double CessTaxAmount { get; set; }
        public bool IsDebitNoteGenerate { get; set; }
        public DateTime? CreatedDate { get; set; }
        public int ShortQty { get; set; }
        public int DamageQty { get; set; }
        public int ExpiryQty { get; set; }
        public string SupplierCreditNoteNumber { get; set; }
        public double TaxAmount { get; set; }
        public string ItemName { get; set; }
        public double CreditNoteAmount { get; set; }
        public DateTime? CreditNoteDate { get; set; }
        public int totalrecords { get; set; }
    }
    public class DebitPayload
    {
        public List<int> WarehouseId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Skip { get; set; }
        public int take { get; set; }
        public bool IsExport { get; set; }
    }
    public class SeasonPayload
    {
        public List<int> WarehouseId { get; set; }
        public int SubCategoryId { get; set; }
        public List<int> SubsubCategoryId { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
    }
    public class GetPoStopConfigurationDC
    {
        public long Id { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
        public bool StopPo { get; set; }
        public string SubcategoryName { get; set; }
        public string SubsubcategoryName { get; set; }
        public string WarehouseName { get; set; }
        public int TotalCount { get; set; }
    }
    public class GetPoStopPayload
    {
        public List<int> WarehouseId { get; set; }
        public List<int> SubcategoryId { get; set; }
        public int Skip { get; set; }
        public int Take { get; set; }
    }
    public class getAllCongifDetails
    {
        public int SeasonId { get; set; }
        public string SeasonName { get; set; }
        public int FromMonth { get; set; }
        public int ToMonth { get; set; }
        public string FromMonthName { get; set; }
        public string ToMonthName { get; set; }
        public DateTime FromMonthDate { get; set; }
        public DateTime TOMonthDate { get; set; }
        public bool IsEditDisabled { get; set; }
        public bool IsActive { get; set; }
    }
    public class GetsubsubcategoryDc
    {
        public int SubsubCategoryid { get; set; }
        public string SubsubcategoryName { get; set; }
    }
    public class GetPoStopConfigHistoryDC
    {
        public bool StopPo { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime? ModifiedDate { get; set; }
        public string CreatedBy { get; set; }
        public string ModifiedBy { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
    }
    public class GetSeasonalConfigHistoryDC
    {
        public DateTime CreatedDate { get; set; }
        public DateTime? ModifiedDate { get; set; }
        public string CreatedBy { get; set; }
        public string ModifiedBy { get; set; }
        public int Frommonth { get; set; }
        public int Tomonth { get; set; }
        public bool IsActive { get; set; }
    }
    public class Irexclusdedqtystore
    {
        public long Id { get; set; }
        public int Irexcluded { get; set; }
    }
}

