using AngularJSAuthentication.API.Controllers;
using AngularJSAuthentication.API.Helper;
using AngularJSAuthentication.API.Helpers;
using AngularJSAuthentication.API.Managers;
using AngularJSAuthentication.Common.Helpers;
using AngularJSAuthentication.DataContracts.External;
using AngularJSAuthentication.DataContracts.Masters;
using AngularJSAuthentication.DataContracts.Mongo;
using AngularJSAuthentication.Model;
using AngularJSAuthentication.Model.Base;
using AngularJSAuthentication.Model.BillDiscount;
using AngularJSAuthentication.Model.NotMapped;
using AngularJSAuthentication.Model.PlaceOrder;
using BarcodeLib;
using GenricEcommers.Models;
using LinqKit;
using Microsoft.AspNet.Identity.EntityFramework;
using Nito.AspNetBackgroundTasks;
using Nito.AsyncEx;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static AngularJSAuthentication.API.Controllers.NotificationController;
using AngularJSAuthentication.Model.PurchaseOrder;
using AngularJSAuthentication.DataContracts.Shared;
using System.Data;
using System.Data.SqlClient;
using Sms = AngularJSAuthentication.API.Controllers.Sms;
using AngularJSAuthentication.Common.Constants;
using AngularJSAuthentication.Model.Item;
using AngularJSAuthentication.Model.CustomerReferral;
using AngularJSAuthentication.Model.SalesApp;
using static AngularJSAuthentication.API.Controllers.OrderMasterrController;
using AngularJSAuthentication.Common.Enums;
using static AngularJSAuthentication.API.Controllers.External.Other.SellerStoreController;
using AngularJSAuthentication.DataContracts.ROC;
using AngularJSAuthentication.API.Managers.CRM;
using System.Data.Entity.Infrastructure;
using static AngularJSAuthentication.API.Controllers.BackendOrderController;
using AngularJSAuthentication.API.DataContract;
using AngularJSAuthentication.API.Helper.Notification;
namespace AngularJSAuthentication.API
{
    public partial class AuthContext : IdentityDbContext<IdentityUser>, iAuthContext
    {


        #region Groups
        //Group Functions

        public GroupSMS AddGroup(GroupSMS group)
        {

            var ar = GroupsSms.Where(x => x.GroupName == group.GroupName && x.Deleted == false && x.GroupAssociation == group.GroupAssociation).FirstOrDefault();

            if (ar == null)
            {
                group.WarehouseId = group.WarehouseId;
                group.CreatedDate = indianTime;
                group.UpdatedDate = indianTime;
                GroupsSms.Add(group);
                int id = this.Commit();
                return group;
            }
            return null;
        }

        public GroupSMS PutGroup(GroupSMS group)
        {
            var ar = GroupsSms.Where(x => x.GroupID == group.GroupID).FirstOrDefault();
            if (ar != null)
            {
                ar.GroupName = group.GroupName;
                ar.GroupAssociation = group.GroupAssociation;
                //ar.AreaCode = area.AreaCode;
                ar.UpdatedDate = indianTime;
                GroupsSms.Attach(ar);
                this.Entry(ar).State = EntityState.Modified;
                int id = this.Commit();
                return group;
            }
            return null;
        }


        public bool DeleteGroup(int id)
        {
            try
            {
                GroupSMS ara = GroupsSms.Where(x => x.GroupID == id).FirstOrDefault();
                ara.Deleted = true;
                //ara.Active = false;
                GroupsSms.Attach(ara);
                this.Entry(ara).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }


        }
        #endregion




        //======Start of function =================================================================================================================================//
        #region Assign Salesman,Day,BeatNumber,AgentCode
        //public CustWarehouse addassighncustsupplier(CustWarehouse custex)
        //public Customer addassighncustsupplier(Customer custex)
        //{
        //    //var custexsup = CustWarehouseDB.Where(x => x.CustomerId == custex.CustomerId && x.WarehouseId == custex.WarehouseId).FirstOrDefault();
        //    var custexsup = Customers.Where(x => x.CustomerId == custex.CustomerId && x.Warehouseid == custex.Warehouseid).FirstOrDefault();
        //    if (custex != null)
        //    {
        //        People excecutive = Peoples.Where(x => x.PeopleID == custex.ExecutiveId && x.Deleted == false).FirstOrDefault();
        //        if (excecutive != null)
        //        {
        //            custexsup.ExecutiveId = excecutive.PeopleID;
        //            // custexsup.ExecutiveName = excecutive.DisplayName;
        //        }
        //        custexsup.Day = custex.Day;
        //        custexsup.BeatNumber = custex.BeatNumber;
        //        custexsup.AgentCode = custex.AgentCode;
        //        custexsup.UpdatedDate = indianTime;
        //        //CustWarehouseDB.Attach(custexsup);
        //        this.Entry(custexsup).State = EntityState.Modified;
        //        this.Commit();
        //    }
        //    else
        //    {
        //        return null;
        //    }
        //    return custex;
        //}
        #endregion
        #region CustomerSupplier Mapping To Warehouse
        public List<CustSupplier> addcustsuppliermapping(List<CustSupplier> obj, int compid, int wid)
        {
            try
            {
                foreach (var o in obj)
                {
                    var warehouse = Warehouses.Where(y => y.WarehouseId == wid).FirstOrDefault();
                    var subsubcatmap = SubsubCategorys.Where(x => x.Code == o.SubsubCode && x.Deleted == false && x.IsActive == true).FirstOrDefault();
                    if (subsubcatmap != null)
                    {
                        o.Active = true;
                        o.WarehouseId = warehouse.WarehouseId;
                        o.WarehouseName = warehouse.WarehouseName;
                        o.SubsubcategoryName = subsubcatmap.SubsubcategoryName;
                        o.SubsubCategoryid = subsubcatmap.SubsubCategoryid;
                        o.SubsubCode = subsubcatmap.Code;
                        o.CreatedDate = indianTime;
                        o.UpdatedDate = indianTime;
                        o.CompanyId = compid;
                        CustSupplierDb.Add(o);
                        int id = this.Commit();
                    }
                    //CustWarehouse cust = CustWarehouseDB.Where(x => x.CustomerId == o.CustomerId && x.WarehouseId == wid).FirstOrDefault();
                    var custexsup = Customers.Where(x => x.CustomerId == o.CustomerId && x.Warehouseid == o.WarehouseId).FirstOrDefault();
                    if (custexsup == null)
                    {
                        //CustWarehouse cs = new CustWarehouse();
                        Customer cs = new Customer();
                        //cs.ExecutiveId = 0;
                        //cs.BeatNumber = 0;
                        cs.CustomerId = o.CustomerId;
                        //cs.WarehouseId = warehouse.WarehouseId;
                        cs.Warehouseid = warehouse.WarehouseId;
                        cs.WarehouseName = warehouse.WarehouseName;
                        cs.CompanyId = warehouse.CompanyId;
                        cs.CreatedDate = indianTime;
                        cs.UpdatedDate = indianTime;
                        cs.CompanyId = compid;
                        //CustWarehouseDB.Add(cs);
                        Customers.Add(cs);
                        int id = this.Commit();
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            return obj;
        }
        public List<CustSupplier> RemoveCustSupplier(List<CustSupplier> obj, int Warehouse_id)
        {
            try
            {
                foreach (var o in obj)
                {
                    var check = CustSupplierDb.Where(x => x.CustomerId == o.CustomerId && x.Deleted == false && x.WarehouseId == Warehouse_id).FirstOrDefault();
                    if (check != null)
                    {
                        check.Deleted = true;
                        check.Active = false;
                        check.UpdatedDate = indianTime;
                        //CustSupplierDb.Attach(check);
                        this.Entry(check).State = EntityState.Modified;
                        this.Commit();
                    }

                    try
                    {
                        var cWt = Customers.Where(x => x.CustomerId == o.CustomerId && x.Deleted == false && x.Warehouseid == Warehouse_id).FirstOrDefault();
                        if (cWt != null)
                        {
                            cWt.Deleted = true;
                            cWt.UpdatedDate = indianTime;
                            //CustWarehouseDB.Attach(cWt);
                            this.Entry(cWt).State = EntityState.Modified;
                            this.Commit();
                        }

                    }
                    catch (Exception ex)
                    {
                    }

                }
            }
            catch (Exception ex)
            {
                return null;
            }
            return obj;
        }
        public List<CustomerDTO> getcust2assin(int CityId, int Warehouseid, string SubsubCode, int CompanyId)
        {
            try
            {
                List<CustomerDTO> cslist = new List<CustomerDTO>();
                List<Customer> clist = new List<Customer>();
                clist = Customers.Where(x => x.Cityid == CityId && x.Deleted == false && x.Active == true).ToList();
                var asiignlist = CustSupplierDb.Where(x => x.SubsubCode == SubsubCode && x.Deleted == false).ToList();
                var myasiignlist = asiignlist.Where(x => x.CompanyId == CompanyId).ToList();
                foreach (var c in clist)
                {
                    CustomerDTO cs = new CustomerDTO();
                    var ck = asiignlist.Where(x => x.SubsubCode == SubsubCode && x.CustomerId == c.CustomerId).FirstOrDefault();
                    if (ck != null)
                    {
                        cs.CustSupplierid = ck.CustSupplierid;
                        cs.WarehouseId = ck.WarehouseId;
                        cs.WarehouseName = ck.WarehouseName;
                        cs.SubsubCategoryid = ck.SubsubCategoryid;
                        cs.Subsubcode = ck.SubsubCode;
                        cs.CompanyId = Companies.Where(x => x.Id == ck.CompanyId).FirstOrDefault().Id;
                        cs.CompanyName = Companies.Where(x => x.Id == ck.CompanyId).FirstOrDefault().CompanyName;
                        cs.SubsubcategoryName = SubsubCategorys.Where(x => x.Code == ck.SubsubCode).FirstOrDefault().SubsubcategoryName;

                    }
                    cs.CustomerId = c.CustomerId;
                    cs.Active = c.Active;
                    cs.City = c.City;
                    cs.Cityid = c.Cityid;
                    cs.AreaName = c.AreaName;
                    cs.CreatedDate = c.CreatedDate;
                    cs.UpdatedDate = c.UpdatedDate;
                    cs.Skcode = c.Skcode;
                    cs.Mobile = c.Mobile;
                    cs.ShopName = c.ShopName;
                    cs.BillingAddress = c.BillingAddress;
                    cs.Name = c.Name;
                    cs.IsAssigned = asiignlist.Any(x => x.SubsubCode == SubsubCode && x.CustomerId == c.CustomerId);
                    cs.IsMine = myasiignlist.Any(x => x.SubsubCode == SubsubCode && x.CustomerId == c.CustomerId);
                    cslist.Add(cs);
                }
                if (cslist.Count() > 0)
                {

                    return cslist;
                }
                return null;
            }
            catch (Exception ex) { return null; }
        }
        public List<Customer> GetCustomerbyClusterId(int ClusterID)
        {
            try
            {
                var clist = Customers.Where(x => x.ClusterId == ClusterID && x.Deleted == false && x.Active == true).ToList();
                for (var i = 0; i < clist.Count(); i++)
                {
                    try
                    {
                        int cid = clist[i].CustomerId;
                        var CustSuppliers = CustSupplierDb.Where(x => x.CustomerId == cid).ToList();
                        if (CustSuppliers != null)
                        {
                            clist[i].CustSuppliers = CustSuppliers;
                        }

                    }
                    catch (Exception ex) { }
                }
                return clist;
            }
            catch (Exception ex) { return null; }
        }
        public List<CustomerDTOM> getmycustomerWid(int compid, int Warehouse_id)
        {
            try
            {
                var clist = (from i in Customers
                             where i.Deleted == false && i.Warehouseid == Warehouse_id
                             join k in Warehouses on i.Warehouseid equals k.WarehouseId
                             select new CustomerDTOM
                             {

                                 CustomerId = i.CustomerId,
                                 //ExecutiveId = i.ExecutiveId,
                                 //ExecutiveName = i.ExecutiveName,
                                 //Name = i.Name,
                                 Skcode = i.Skcode,
                                 City = i.City,
                                 ShopName = i.ShopName,
                                 //Mobile = i.Mobile,
                                 Emailid = i.Emailid,
                                 BillingAddress = i.BillingAddress,
                                 //BeatNumber = i.BeatNumber,
                                 //Day = i.Day,
                                 CreatedDate = i.CreatedDate,
                                 UpdatedDate = i.UpdatedDate,
                                 CompanyId = i.CompanyId,
                                 Active = i.Active,
                                 WarehouseId = i.Warehouseid,
                                 WarehouseName = k.WarehouseName,
                                 AgentCode = i.AgentCode

                             }).ToList();




                return clist;
            }
            catch (Exception ex) { return null; }
        }
        public List<CustomerDTOM> getmycustomer(int compid)
        {
            try
            {
                var clist = (from i in Customers
                             where i.CompanyId == compid
                             join k in Warehouses on i.Warehouseid equals k.WarehouseId
                             select new CustomerDTOM
                             {

                                 CustomerId = i.CustomerId,
                                 //ExecutiveId = i.ExecutiveId,
                                 //ExecutiveName = i.ExecutiveName,
                                 //Name = i.Name,
                                 Skcode = i.Skcode,
                                 City = i.City,
                                 ShopName = i.ShopName,
                                 //Mobile = i.Mobile,
                                 Emailid = i.Emailid,
                                 BillingAddress = i.BillingAddress,
                                 //BeatNumber = i.BeatNumber,
                                 //Day = i.Day,
                                 CreatedDate = i.CreatedDate,
                                 UpdatedDate = i.UpdatedDate,
                                 CompanyId = i.CompanyId,
                                 Active = i.Active,
                                 WarehouseId = i.Warehouseid,
                                 WarehouseName = k.WarehouseName,
                                 AgentCode = i.AgentCode,
                             }).ToList();


                return clist;
            }
            catch (Exception ex) { return null; }
        }
        #endregion
        #region Request cust mapping
        public CustSupplierRequest addCustSupplierRequest(CustSupplierRequest obj)
        {
            try
            {
                var check = CustSupplierRequestDb.Where(x => x.CustomerId == obj.CustomerId && x.CompanyId == obj.CompanyId && x.WarehouseId == obj.WarehouseId && x.IsAccept == false).FirstOrDefault();
                if (check == null)
                {
                    obj.CreatedDate = indianTime;
                    obj.UpdatedDate = indianTime;
                    CustSupplierRequestDb.Add(obj);
                    int id = this.Commit();
                    return obj;
                }
                return null;
            }
            catch (Exception ex)
            { return null; }
        }
        public CustSupplierRequest addCustSupplierRequestput(CustSupplierRequest obj)
        {
            try
            {
                var res = CustSupplierRequestDb.Where(x => x.id == obj.id && x.IsAccept == false).SingleOrDefault();
                if (res != null)
                {
                    if (!res.IsAccept)
                    {
                        var cm = CustSupplierDb.Where(x => x.CustSupplierid == obj.CustSupplierid && x.Deleted == false && x.WarehouseId == obj.WarehouseId).SingleOrDefault();
                        if (cm != null)
                        {
                            cm.Deleted = true;
                            cm.UpdatedDate = indianTime;
                            //CustSupplierDb.Attach(cm);
                            this.Entry(cm).State = EntityState.Modified;
                            int idd = this.Commit();
                        }
                        CustSupplier csp = new CustSupplier();
                        csp.CompanyId = obj.CompanyId;
                        csp.CustomerId = obj.CustomerId;
                        csp.WarehouseId = obj.WarehouseId;
                        csp.WarehouseName = obj.WarehouseName;

                        csp.CreatedDate = indianTime;
                        csp.UpdatedDate = indianTime;
                        CustSupplierDb.Add(csp);
                        int ids = this.Commit();
                    }
                    res.UpdatedDate = indianTime;
                    res.Deleted = true;
                    //CustSupplierRequestDb.Attach(res);
                    this.Entry(res).State = EntityState.Modified;
                    int id = this.Commit();

                    return res;
                }
                return null;
            }
            catch (Exception ex) { return null; }
        }

        public List<CustSupplierRequest> GetcmRequest()
        {
            try
            {
                var rlist = CustSupplierRequestDb.Where(x => x.Deleted == false).ToList();
                return rlist;
            }
            catch (Exception ex) { return null; }

        }
        #endregion
        #region Supplier Brands Mapping

        public List<SupplierBrands> GetmyBrands(int compid)
        {
            var slist = SupplierBrandsDb.Where(p => p.CompanyId == compid && p.Deleted == false).ToList();
            return slist;

        }

        public List<SupplierBrandsDTO> getBrands(int sid)
        {
            try
            {
                List<SupplierBrandsDTO> brands = new List<SupplierBrandsDTO>();
                var mybrands = GetmyBrands(sid).ToList();
                var subsubcategories = AllSubsubCat(0);
                foreach (var o in subsubcategories)
                {
                    SupplierBrandsDTO brand = new SupplierBrandsDTO();
                    brand.CompanyId = sid;
                    brand.Categoryid = o.Categoryid;
                    brand.SubCategoryId = o.SubCategoryId;
                    brand.CreatedDate = o.CreatedDate;
                    brand.SubsubCategoryid = o.SubsubCategoryid;
                    brand.SubsubcategoryName = o.SubsubcategoryName;
                    brand.Check = mybrands.Any(x => x.SubsubCategoryid == o.SubsubCategoryid);
                    brand.CategoryName = o.CategoryName;
                    //var Check = mybrands.Where(x => x.SubsubCategoryid == o.SubsubCategoryid).SingleOrDefault();
                    //if (Check != null)brand.Check = true;
                    //else  brand.Check = false;
                    brands.Add(brand);
                }
                return brands;
            }
            catch (Exception ex)
            {
            }
            return null;
        }
        public bool ADUDBrands(List<SupplierBrandsDTO> obj)
        {
            try
            {
                foreach (var o in obj)
                {
                    var check = SupplierBrandsDb.Where(x => x.SUPPLIERCODES == o.SUPPLIERCODES && x.SubsubCategoryid == o.SubsubCategoryid).FirstOrDefault();
                    if (check != null)
                    {
                        check.UpdatedDate = indianTime;
                        check.Deleted = !o.Check;
                        //SupplierBrandsDb.Attach(check);
                        this.Entry(check).State = EntityState.Modified;
                        int id = this.Commit();

                    }
                    else
                    {
                        if (o.Check)
                        {
                            SupplierBrands oo = new SupplierBrands();
                            oo.CreatedDate = indianTime;
                            oo.UpdatedDate = indianTime;
                            oo.CompanyId = o.CompanyId;
                            oo.Categoryid = o.Categoryid;
                            oo.CategoryName = o.CategoryName;
                            oo.SubCategoryId = o.SubCategoryId;
                            oo.Deleted = false;
                            oo.active = true;
                            oo.SubsubCategoryid = o.SubsubCategoryid;
                            oo.SubsubcategoryName = o.SubsubcategoryName;
                            oo.SUPPLIERCODES = o.SUPPLIERCODES;
                            oo.CompanyId = o.CompanyId;
                            SupplierBrandsDb.Add(oo);
                            int id = this.Commit();
                        }

                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }


        }
        #endregion



        #region for damage stock transfer from current stock
        public DamageStock Adddemand(DamageStock obj)
        {
            try
            {


                if (obj != null)
                {
                    CurrentStock itemm = DbCurrentStock.Where(x => x.ItemNumber == obj.ItemNumber && x.WarehouseId == obj.WarehouseId && x.ItemMultiMRPId == obj.ItemMultiMRPId).FirstOrDefault();


                    if (itemm.CurrentInventory >= obj.DamageInventory)
                    {

                        DamageStock dst = DamageStockDB.Where(x => x.ItemNumber == obj.ItemNumber && x.WarehouseId == obj.WarehouseId && x.ItemMultiMRPId == obj.ItemMultiMRPId).SingleOrDefault();

                        if (dst == null)
                        {
                            DamageStock objst = new DamageStock();
                            objst.WarehouseId = obj.WarehouseId;
                            objst.WarehouseName = obj.WarehouseName;
                            objst.ItemId = obj.ItemId;
                            objst.MRP = obj.MRP;
                            objst.ItemMultiMRPId = obj.ItemMultiMRPId;
                            objst.ItemNumber = obj.ItemNumber;
                            objst.ItemName = obj.ItemName;
                            objst.DamageInventory = obj.DamageInventory;
                            double netUnitPrice = Math.Round(obj.UnitPrice, 2);
                            objst.UnitPrice = netUnitPrice;
                            objst.ReasonToTransfer = obj.ReasonToTransfer;
                            objst.CreatedDate = indianTime;
                            objst.CompanyId = obj.CompanyId;
                            DamageStockDB.Add(objst);
                            int id = this.Commit();
                            if (id != 0)
                            {
                                CurrentStockHistory Oss = new CurrentStockHistory();
                                if (itemm != null && itemm.CurrentInventory > 0)
                                {
                                    Oss.StockId = itemm.StockId;
                                    Oss.ItemNumber = itemm.ItemNumber;
                                    Oss.itemname = itemm.itemname;
                                    Oss.CurrentInventory = itemm.CurrentInventory;
                                    Oss.DamageInventoryOut = Convert.ToInt32(obj.DamageInventory);
                                    Oss.TotalInventory = Convert.ToInt32(itemm.CurrentInventory - obj.DamageInventory);
                                    Oss.WarehouseName = itemm.WarehouseName;
                                    Oss.Warehouseid = itemm.WarehouseId;
                                    Oss.CompanyId = itemm.CompanyId;

                                    Oss.CreationDate = indianTime;
                                    Oss.ItemMultiMRPId = obj.ItemMultiMRPId;
                                    Oss.ManualReason = obj.ReasonToTransfer;
                                    CurrentStockHistoryDb.Add(Oss);
                                    int idd = this.Commit();
                                }
                                itemm.CurrentInventory = itemm.CurrentInventory - obj.DamageInventory;
                                itemm.UpdatedDate = indianTime;
                                //DbCurrentStock.Attach(itemm);
                                this.Entry(itemm).State = EntityState.Modified;
                                this.Commit();
                            }
                        }
                        else
                        {

                            dst.DamageInventory = dst.DamageInventory + obj.DamageInventory;
                            double netUnitPrice = Math.Round(obj.UnitPrice, 2);
                            dst.UnitPrice = netUnitPrice;
                            dst.ReasonToTransfer = obj.ReasonToTransfer;
                            dst.UpdatedDate = DateTime.Now;
                            //DamageStockDB.Attach(dst);
                            this.Entry(dst).State = EntityState.Modified;
                            this.Commit();

                            CurrentStockHistory Oss = new CurrentStockHistory();
                            if (itemm != null && itemm.CurrentInventory > 0)
                            {
                                Oss.StockId = itemm.StockId;
                                Oss.ItemNumber = itemm.ItemNumber;
                                Oss.itemname = itemm.itemname;
                                Oss.CurrentInventory = itemm.CurrentInventory;
                                Oss.DamageInventoryOut = Convert.ToInt32(obj.DamageInventory);
                                Oss.TotalInventory = Convert.ToInt32(itemm.CurrentInventory - obj.DamageInventory);
                                Oss.WarehouseName = itemm.WarehouseName;
                                Oss.Warehouseid = itemm.WarehouseId;
                                Oss.CompanyId = itemm.CompanyId;

                                Oss.ItemMultiMRPId = obj.ItemMultiMRPId;
                                Oss.CreationDate = indianTime;
                                CurrentStockHistoryDb.Add(Oss);
                                int idd = this.Commit();
                            }

                            if (dst != null)
                            {
                                itemm.CurrentInventory = itemm.CurrentInventory - obj.DamageInventory;
                                itemm.UpdatedDate = DateTime.Now;
                                //DbCurrentStock.Attach(itemm);
                                this.Entry(itemm).State = EntityState.Modified;
                                this.Commit();

                            }

                        }
                    }
                }
                else
                {
                    return null;

                }
                return obj;
            }

            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return obj;
            }
        }





        #endregion
        #region for damage order 
        public PaggingDataitem AddDamageStock(int pid, int warehouseid, int compid)
        {
            List<ItemMaster> newdata = new List<ItemMaster>();

            if (warehouseid > 0)
            {

                newdata = itemMasters.Where(x => x.Deleted == false && x.ItemId == pid && x.WarehouseId == warehouseid && x.CompanyId == compid).OrderByDescending(x => x.ItemId).ToList();

            }
            else
            {
                var orders = itemMasters.OrderByDescending(x => x.Deleted == false && x.ItemId == pid && x.WarehouseId == warehouseid && x.CompanyId == compid).AsEnumerable();
            }
            PaggingDataitem obj = new PaggingDataitem();
            obj.total_count = itemMasters.Count();
            obj.otmaster = newdata;
            return obj;
        }

        #endregion


        #region single settle
        public FinalOrderDispatchedMaster AddFinalOrderDispatchedMaster(FinalOrderDispatchedMaster final)
        {
            logger.Info("add Final Order Dispatch Master: ");
            using (var dbContextTransaction = this.Database.BeginTransaction())
            {
                try
                {

                    // for ordermaster master status change
                    OrderMaster om = DbOrderMaster.Where(x => x.OrderId == final.OrderId && x.Deleted == false && x.CompanyId == final.CompanyId).Include("orderDetails").FirstOrDefault();
                    if (om.Status != "sattled")
                    {
                        om.Status = "sattled";
                        //om.DiscountAmount = final.DiscountAmount;
                        //om.ShortAmount = final.ShortAmount;
                        //om.ShortAmount = final.ShortAmount;                
                        om.UpdatedDate = indianTime;
                        //DbOrderMaster.Attach(om);
                        Entry(om).State = EntityState.Modified;
                        //SaveChanges();

                        // order dispatched master status change
                        OrderDispatchedMaster ox = OrderDispatchedMasters.Where(x => x.OrderId == final.OrderId && x.Deleted == false && x.CompanyId == final.CompanyId).Include("orderDetails").FirstOrDefault();
                        ox.Status = "sattled";
                        ox.DiscountAmount = final.DiscountAmount;
                        //ox.CashAmount = final.CashAmount;
                        //ox.CheckAmount = final.CheckAmount;
                        //ox.CheckNo = final.CheckNo;
                        ox.RecivedAmount = final.RecivedAmount;
                        ox.Reason = final.Reason;

                        //online hdfc /truypay
                        //ox.ElectronicAmount = final.Online;
                        //ox.ElectronicPaymentNo = final.OnlineTransId;

                        ox.UpdatedDate = indianTime;
                        //OrderDispatchedMasters.Attach(ox);
                        Entry(ox).State = EntityState.Modified;
                        //var PaymentResponse = PaymentResponseRetailerAppDb.Where(x => x.OrderId == final.OrderId && x.status == "Success").ToList();
                        //// if (PaymentResponse != null)
                        ////{
                        //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "CASH"))
                        //{
                        //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "CASH");
                        //    payment.UpdatedDate = indianTime;
                        //    payment.amount = final.CashAmount;
                        //    payment.status = final.CashAmount > 0 ? payment.status : "Failed";
                        //    payment.statusDesc = "Due to Order Settle Amount changed";
                        //    Entry(payment).State = EntityState.Modified;
                        //}
                        //else if (final.CashAmount > 0)
                        //{
                        //    var PaymentResponseRetailerAppDbCash = new PaymentResponseRetailerApp
                        //    {
                        //        amount = final.CashAmount,
                        //        CreatedDate = indianTime,
                        //        currencyCode = "INR",
                        //        OrderId = final.OrderId,
                        //        PaymentFrom = "Cash",
                        //        status = "Success",
                        //        statusDesc = "Due to Order Settle Amount changed",
                        //        UpdatedDate = indianTime
                        //    };
                        //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbCash);
                        //}
                        //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "CHEQUE"))
                        //{
                        //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "CHEQUE");
                        //    payment.amount = final.CheckAmount;
                        //    payment.GatewayTransId = final.CheckNo;
                        //    payment.UpdatedDate = indianTime;
                        //    payment.statusDesc = "Due to Order Settle Amount changed";
                        //    Entry(payment).State = EntityState.Modified;
                        //}
                        //else if (final.CheckAmount > 0)
                        //{
                        //    var PaymentResponseRetailerAppDbCheck = new PaymentResponseRetailerApp
                        //    {
                        //        amount = final.CheckAmount,
                        //        GatewayTransId = final.CheckNo,
                        //        CreatedDate = indianTime,
                        //        currencyCode = "INR",
                        //        OrderId = final.OrderId,
                        //        PaymentFrom = "Cheque",
                        //        status = "Success",
                        //        statusDesc = "Due to Order Settle Amount changed",
                        //        UpdatedDate = indianTime
                        //    };
                        //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbCheck);
                        //}
                        //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "MPOS"))
                        //{
                        //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "MPOS");
                        //    payment.UpdatedDate = indianTime;
                        //    payment.amount = final.Empos;
                        //    payment.GatewayTransId = final.EmposTransId;
                        //    payment.statusDesc = "Due to Order Settle Amount changed";
                        //    Entry(payment).State = EntityState.Modified;
                        //}
                        //else if (final.Empos > 0)
                        //{
                        //    var PaymentResponseRetailerAppDbEmpos = new PaymentResponseRetailerApp
                        //    {
                        //        amount = final.Empos,
                        //        GatewayTransId = final.EmposTransId,
                        //        CreatedDate = indianTime,
                        //        currencyCode = "INR",
                        //        OrderId = final.OrderId,
                        //        PaymentFrom = "mPos",
                        //        statusDesc = "Due to Order Settle Amount changed",
                        //        status = "Success",
                        //        UpdatedDate = indianTime
                        //    };
                        //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbEmpos);
                        //}
                        //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "EPAYLATER"))
                        //{
                        //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "EPAYLATER");
                        //    payment.UpdatedDate = indianTime;
                        //    payment.amount = final.EpayLater;
                        //    payment.GatewayTransId = final.EpayLaterTransId;
                        //    payment.statusDesc = "Due to Order Settle Amount changed";
                        //    Entry(payment).State = EntityState.Modified;
                        //}
                        //else if (final.EpayLater > 0)
                        //{
                        //    var PaymentResponseRetailerAppDbEpayLater = new PaymentResponseRetailerApp
                        //    {
                        //        amount = final.EpayLater,
                        //        GatewayTransId = final.EpayLaterTransId,
                        //        CreatedDate = indianTime,
                        //        currencyCode = "INR",
                        //        OrderId = final.OrderId,
                        //        PaymentFrom = "ePaylater",
                        //        status = "Success",
                        //        statusDesc = "Due to Order Settle Amount changed",
                        //        UpdatedDate = indianTime
                        //    };
                        //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbEpayLater);
                        //}

                        //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "HDFC" || x.PaymentFrom.ToUpper() == "TRUEPAY"))
                        //{
                        //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "HDFC" || x.PaymentFrom.ToUpper() == "TRUEPAY");
                        //    payment.amount = final.Online;
                        //    payment.GatewayTransId = final.OnlineTransId;
                        //    payment.UpdatedDate = indianTime;
                        //    payment.statusDesc = "Due to Order Settle Amount changed";
                        //    Entry(payment).State = EntityState.Modified;
                        //}
                        //else if (final.Online > 0)
                        //{
                        //    var PaymentResponseRetailerAppDbOnline = new PaymentResponseRetailerApp
                        //    {
                        //        amount = final.Online,
                        //        GatewayTransId = final.OnlineTransId,
                        //        CreatedDate = indianTime,
                        //        currencyCode = "INR",
                        //        OrderId = final.OrderId,
                        //        PaymentFrom = "truepay",
                        //        status = "Success",
                        //        statusDesc = "Due to Order Settle Amount changed",
                        //        UpdatedDate = indianTime
                        //    };
                        //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbOnline);
                        //}


                        // }

                        this.Commit();
                        //try
                        //{
                        //    if (final.ShortAmount > 0)
                        //    {
                        //        ShortSetttle obj = new ShortSetttle();
                        //        obj.Status = "sattled";
                        //        obj.OrderId = final.OrderId;
                        //        obj.CustomerId = final.CustomerId;
                        //        obj.CustomerName = final.CustomerName;
                        //        obj.DboyName = final.DboyName;
                        //        obj.DboyMobileNo = final.DboyMobileNo;
                        //        obj.WarehouseId = final.WarehouseId;
                        //        obj.WarehouseName = final.WarehouseName;
                        //        obj.ShortAmount = final.ShortAmount;
                        //        obj.ShortReason = final.ShortReason;
                        //        obj.DiscountAmount = final.DiscountAmount;
                        //        obj.GrossAmount = final.GrossAmount;
                        //        obj.RecivedAmount = final.RecivedAmount;
                        //        obj.Reason = final.Reason;
                        //        obj.comment = final.comment;
                        //        obj.CreatedDate = indianTime;
                        //        ShortSetttleDb.Add(obj);
                        //        int id = this.Commit();
                        //    }
                        //}
                        //catch
                        //{
                        //}

                        #region Order Master History
                        var UserName = Peoples.Where(x => x.PeopleID == final.userid).SingleOrDefault();
                        try
                        {


                            OrderMasterHistories h1 = new OrderMasterHistories();

                            h1.orderid = final.OrderId;
                            h1.Status = om.Status;
                            h1.Reasoncancel = "Order Settle";
                            h1.Warehousename = final.WarehouseName;
                            h1.userid = UserName.PeopleID;
                            h1.username = UserName.DisplayName;
                            h1.CreatedDate = DateTime.Now;


                            OrderMasterHistoriesDB.Add(h1);
                            int id = this.Commit();

                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                        }
                        #endregion

                        if (final != null)
                        {
                            final.UpdatedDate = indianTime;
                            final.Status = "sattled";
                            //FinalOrderDispatchedMasterDb.Attach(final);
                            this.Entry(final).State = EntityState.Added;

                            if (this.Commit() > 0)
                            {
                                dbContextTransaction.Commit();
                                CustomerLedgerHelperAuto helper = new CustomerLedgerHelperAuto();
                                helper.OnSettle(final.OrderId, final.CustomerId, UserName.PeopleID);
                            }
                            return final;
                        }
                        else
                        {
                            dbContextTransaction.Rollback();
                            logger.Error("This final is not Found int add " + final.FinalOrderDispatchedMasterId);
                            return final;
                        }
                    }


                }
                catch (Exception ex)
                {
                    dbContextTransaction.Rollback();
                    logger.Error("Error in final Order Dispatch master " + ex.Message);
                }
            }
            return null;
        }
        #endregion


        #region for multi select in ordersettle data

        public string DBMultiSettle(List<FinalOrderDispatchedMaster> obj)
        {
            using (var dbContextTransaction = this.Database.BeginTransaction())
            {
                try
                {
                    var userid = obj[0].userid;
                    foreach (var final in obj)
                    {
                        // for ordermaster master status change
                        OrderMaster om = DbOrderMaster.Where(x => x.OrderId == final.OrderId && x.Deleted == false && x.CompanyId == final.CompanyId).Include("orderDetails").FirstOrDefault();
                        if (om.Status != "sattled")
                        {
                            om.Status = "sattled";
                            //om.DiscountAmount = final.DiscountAmount;
                            //om.ShortAmount = final.ShortAmount;
                            //om.ShortAmount = final.ShortAmount;                
                            om.UpdatedDate = indianTime;
                            //DbOrderMaster.Attach(om);
                            Entry(om).State = EntityState.Modified;
                            //SaveChanges();

                            // order dispatched master status change
                            OrderDispatchedMaster ox = OrderDispatchedMasters.Where(x => x.OrderId == final.OrderId && x.Deleted == false && x.CompanyId == final.CompanyId).Include("orderDetails").FirstOrDefault();
                            ox.Status = "sattled";
                            ox.DiscountAmount = final.DiscountAmount;
                            //ox.CashAmount = final.CashAmount;
                            //ox.CheckAmount = final.CheckAmount;
                            //ox.CheckNo = final.CheckNo;
                            ox.RecivedAmount = final.RecivedAmount;

                            //online hdfc /truypay
                            //ox.ElectronicAmount = final.Online;
                            //ox.ElectronicPaymentNo = final.OnlineTransId;

                            ox.UpdatedDate = indianTime;
                            //OrderDispatchedMasters.Attach(ox);
                            Entry(ox).State = EntityState.Modified;

                            //var PaymentResponse = PaymentResponseRetailerAppDb.Where(x => x.OrderId == final.OrderId && x.status == "Success").ToList();
                            //// if (PaymentResponse != null)
                            //// {
                            //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "CASH"))
                            //{
                            //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "CASH");
                            //    payment.UpdatedDate = indianTime;
                            //    payment.amount = final.CashAmount;
                            //    payment.status = final.CashAmount > 0 ? payment.status : "Failed";
                            //    Entry(payment).State = EntityState.Modified;
                            //}
                            //else if (final.CashAmount > 0)
                            //{
                            //    var PaymentResponseRetailerAppDbCash = new PaymentResponseRetailerApp
                            //    {
                            //        amount = final.CashAmount,
                            //        CreatedDate = indianTime,
                            //        currencyCode = "INR",
                            //        OrderId = final.OrderId,
                            //        PaymentFrom = "Cash",
                            //        status = "Success",
                            //        UpdatedDate = indianTime
                            //    };
                            //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbCash);
                            //}
                            //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "CHEQUE"))
                            //{
                            //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "CHEQUE");
                            //    payment.amount = final.CheckAmount;
                            //    payment.GatewayTransId = final.CheckNo;
                            //    payment.UpdatedDate = indianTime;
                            //    Entry(payment).State = EntityState.Modified;
                            //}
                            //else if (final.CheckAmount > 0)
                            //{
                            //    var PaymentResponseRetailerAppDbCheck = new PaymentResponseRetailerApp
                            //    {
                            //        amount = final.CheckAmount,
                            //        GatewayTransId = final.CheckNo,
                            //        CreatedDate = indianTime,
                            //        currencyCode = "INR",
                            //        OrderId = final.OrderId,
                            //        PaymentFrom = "Cheque",
                            //        status = "Success",
                            //        UpdatedDate = indianTime
                            //    };
                            //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbCheck);
                            //}
                            //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "MPOS"))
                            //{
                            //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "MPOS");
                            //    payment.UpdatedDate = indianTime;
                            //    payment.amount = final.Empos;
                            //    payment.GatewayTransId = final.EmposTransId;
                            //    Entry(payment).State = EntityState.Modified;
                            //}
                            //else if (final.Empos > 0)
                            //{
                            //    var PaymentResponseRetailerAppDbEmpos = new PaymentResponseRetailerApp
                            //    {
                            //        amount = final.Empos,
                            //        GatewayTransId = final.EmposTransId,
                            //        CreatedDate = indianTime,
                            //        currencyCode = "INR",
                            //        OrderId = final.OrderId,
                            //        PaymentFrom = "mPos",
                            //        status = "Success",
                            //        UpdatedDate = indianTime
                            //    };
                            //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbEmpos);
                            //}
                            //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "EPAYLATER"))
                            //{
                            //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "EPAYLATER");
                            //    payment.UpdatedDate = indianTime;
                            //    payment.amount = final.EpayLater;
                            //    payment.GatewayTransId = final.EpayLaterTransId;
                            //    Entry(payment).State = EntityState.Modified;
                            //}
                            //else if (final.EpayLater > 0)
                            //{
                            //    var PaymentResponseRetailerAppDbEpayLater = new PaymentResponseRetailerApp
                            //    {
                            //        amount = final.EpayLater,
                            //        GatewayTransId = final.EpayLaterTransId,
                            //        CreatedDate = indianTime,
                            //        currencyCode = "INR",
                            //        OrderId = final.OrderId,
                            //        PaymentFrom = "ePaylater",
                            //        status = "Success",
                            //        UpdatedDate = indianTime
                            //    };
                            //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbEpayLater);
                            //}

                            //if (PaymentResponse.Any(x => x.PaymentFrom.ToUpper() == "HDFC" || x.PaymentFrom.ToUpper() == "TRUEPAY"))
                            //{
                            //    var payment = PaymentResponse.FirstOrDefault(x => x.PaymentFrom.ToUpper() == "HDFC" || x.PaymentFrom.ToUpper() == "TRUEPAY");
                            //    payment.amount = final.Online;
                            //    payment.GatewayTransId = final.OnlineTransId;
                            //    payment.UpdatedDate = indianTime;
                            //    Entry(payment).State = EntityState.Modified;
                            //}
                            //else if (final.Online > 0)
                            //{
                            //    var PaymentResponseRetailerAppDbOnline = new PaymentResponseRetailerApp
                            //    {
                            //        amount = final.Online,
                            //        GatewayTransId = final.OnlineTransId,
                            //        CreatedDate = indianTime,
                            //        currencyCode = "INR",
                            //        OrderId = final.OrderId,
                            //        PaymentFrom = "truepay",
                            //        status = "Success",
                            //        UpdatedDate = indianTime
                            //    };
                            //    this.PaymentResponseRetailerAppDb.Add(PaymentResponseRetailerAppDbOnline);
                            //}


                            // }


                            this.Commit();
                            //try
                            //{
                            //    if (final.ShortAmount > 0)
                            //    {
                            //        ShortSetttle ob = new ShortSetttle();
                            //        ob.Status = "sattled";
                            //        ob.OrderId = final.OrderId;
                            //        ob.CustomerId = final.CustomerId;
                            //        ob.CustomerName = final.CustomerName;
                            //        ob.DboyName = final.DboyName;
                            //        ob.DboyMobileNo = final.DboyMobileNo;
                            //        ob.WarehouseId = final.WarehouseId;
                            //        ob.WarehouseName = final.WarehouseName;
                            //        ob.ShortAmount = final.ShortAmount;
                            //        ob.ShortReason = final.ShortReason;
                            //        ob.DiscountAmount = final.DiscountAmount;
                            //        ob.GrossAmount = final.GrossAmount;
                            //        ob.CreatedDate = indianTime;
                            //        ShortSetttleDb.Add(ob);
                            //        this.Commit();
                            //    }
                            //}

                            //catch (Exception ex)
                            //{
                            //}

                            if (final != null)
                            {

                                final.UpdatedDate = indianTime;
                                final.Status = "sattled";
                                //FinalOrderDispatchedMasterDb.Attach(final);
                                Entry(final).State = EntityState.Added;
                                Commit();
                            }
                            else
                            {
                                logger.Error("This final is not Found int add ");
                                return null;
                            }
                            #region Order Master History
                            var UserName = Peoples.Where(x => x.PeopleID == userid).SingleOrDefault();


                            OrderMasterHistories OdHistory = new OrderMasterHistories();

                            OdHistory.orderid = final.OrderId;
                            OdHistory.Status = om.Status;
                            OdHistory.Reasoncancel = "Order Settle";
                            OdHistory.Warehousename = final.WarehouseName;
                            OdHistory.userid = UserName.PeopleID;
                            if (UserName.DisplayName != null)
                            {
                                OdHistory.username = UserName.DisplayName;
                            }
                            else
                            {
                                OdHistory.username = UserName.PeopleFirstName;
                            }

                            OdHistory.CreatedDate = DateTime.Now;


                            OrderMasterHistoriesDB.Add(OdHistory);
                            int id = this.Commit();


                            #endregion
                            CustomerLedgerHelperAuto helper = new CustomerLedgerHelperAuto();
                            helper.OnSettle(final.OrderId, final.CustomerId, UserName.PeopleID);
                        }
                    }
                    dbContextTransaction.Commit();
                }

                catch (Exception ex)
                {
                    dbContextTransaction.Rollback();
                    logger.Error("Error in final Order Dispatch master " + ex.Message);
                }
            }
            return null;

        }

        #endregion
        #region for Filtered in edit price
        public IList<EditPriceHistory> filteredEditPriceHistory(DateTime? start, DateTime? end, string cityid, string categoryid, string subcategoryid, string subsubcategoryid, int compid)
        {
            int CityID = Convert.ToInt32(cityid.Trim());
            int CategoryID = Convert.ToInt32(categoryid.Trim());
            int SubCategoryID = Convert.ToInt32(subcategoryid.Trim());
            int SubSubCategoryID = Convert.ToInt32(subsubcategoryid.Trim());

            if (cityid == "undefined" || cityid == null || cityid == "0")
            {
                if (categoryid == "undefined" || categoryid == null || categoryid == "0")
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.SubCategoryId == SubCategoryID && od.CompanyId == compid && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }
                else if (start != null)
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.Categoryid == CategoryID && od.CompanyId == compid && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }

                else
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.Categoryid == CategoryID && od.CompanyId == compid && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }
            }
            else
            {
                if (categoryid == "undefined" || categoryid == null || categoryid == "0")
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.Cityid == CityID && od.CompanyId == compid && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }
                else if (start != null)
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.Categoryid == CategoryID && od.CompanyId == compid && od.Cityid == CityID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }

                else
                {
                    var filteredlist = (from od in EditPriceHistoryDb where od.Categoryid == CategoryID && od.CompanyId == compid && od.Cityid == CityID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CreatedDate > start && od.CreatedDate < end select od).ToList();
                    return filteredlist;
                }
            }
        }
        #endregion



        //public CompanyHoliday AddHoliday(CompanyHoliday CompanyHoliday)
        //{


        //    var hd = CompanyHolidaysDB.Where(x => x.HolidayName == CompanyHoliday.HolidayName ).FirstOrDefault();


        //    if (hd == null)

        //    {
        //        CompanyHoliday list = new CompanyHoliday();


        //        list.HolidayName = CompanyHoliday.HolidayName;
        //        list.CreatedDate = CompanyHoliday.CreatedDate;
        //        list.UpdatedDate = CompanyHoliday.UpdatedDate;

        //        //CompanyHoliday.CreatedDate = indianTime;
        //        //CompanyHoliday.UpdatedDate = indianTime;
        //        CompanyHolidaysDB.Add(CompanyHoliday);
        //        int ID = this.Commit();
        //        return CompanyHoliday;
        //    }
        //    return null;
        //}
        #region  for area Section
        public List<Area> AddBulkArea(List<Area> CustCollection)
        {
            logger.Info("start addbulk customer");
            try
            {
                foreach (var o in CustCollection)
                {
                    List<Area> cust = AreaDb.Where(c => c.AreaName.Equals(o.AreaName) && c.Deleted == false).ToList();

                    Area objitemMaster = new Area();
                    if (cust.Count == 0)
                    {
                        o.Active = true;
                        o.CreatedDate = indianTime;
                        o.UpdatedDate = indianTime;
                        AreaDb.Add(o);
                        int id = this.Commit();

                    }
                    else
                    {
                        logger.Info("Mobile number already exists");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Info("error in adding Sales Executive collection");
            }
            return null;
        }

        public Area AddArea(Area area)
        {

            //var ar = AreaDb.Where(x => x.AreaName == area.AreaName).FirstOrDefault();
            var ar = AreaDb.Where(x => x.AreaName == area.AreaName && x.Active == true && x.Deleted == false).FirstOrDefault();
            var city = Cities.Where(x => x.Cityid == area.CityId).FirstOrDefault();

            if (ar == null)
            {
                area.CityName = city.CityName;
                area.CityId = city.Cityid;
                area.CreatedDate = indianTime;
                area.UpdatedDate = indianTime;
                AreaDb.Add(area);
                int id = this.Commit();
                return area;
            }
            return null;
        }

        public Area Putarea(Area area)
        {
            //var ar = AreaDb.Where(x => x.areaId == area.areaId).FirstOrDefault();
            var ar = AreaDb.Where(x => x.areaId == area.areaId && x.Active == true && x.Deleted == false).FirstOrDefault();
            var city = Cities.Where(x => x.Cityid == area.CityId).FirstOrDefault();

            if (ar != null)
            {
                ar.AreaName = area.AreaName;
                ar.AreaCode = area.AreaCode;
                ar.CityId = city.Cityid;
                ar.CityName = city.CityName;
                ar.UpdatedDate = indianTime;
                //AreaDb.Attach(ar);
                this.Entry(ar).State = EntityState.Modified;
                int id = this.Commit();
                return area;
            }
            return null;
        }


        public bool DeleteArea(int id)
        {
            try
            {
                Area ara = AreaDb.Where(x => x.areaId == id).FirstOrDefault();
                ara.Deleted = true;
                ara.Active = false;
                //AreaDb.Attach(ara);
                this.Entry(ara).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }

        #endregion
        #region Get data For ShortSettle
        public PaggingData AllShortagePaging(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int compid)
        {
            List<ShortSetttle> newdata = new List<ShortSetttle>();

            if (DBoyNo == "all" && datefrom == null)
            {
                newdata = ShortSetttleDb.Where(x => x.Deleted == false && x.CompanyId == compid && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo == "all" && datefrom != null && dateto != null)
            {
                newdata = ShortSetttleDb.Where(x => x.Deleted == false && x.CompanyId == compid && x.ShortAmount != 0 && (x.CreatedDate > datefrom && x.CreatedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo != "all" && datefrom != null && dateto != null)
            {
                newdata = ShortSetttleDb.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto && x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo != "all" && datefrom == null && dateto == null)
            {
                newdata = ShortSetttleDb.Where(x => x.DboyMobileNo == DBoyNo && x.Deleted == false && x.CompanyId == compid && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }

            PaggingData obj = new PaggingData();
            obj.total_count = ShortSetttleDb.Count();
            obj.ordermaster = newdata;
            return obj;
        }
        public PaggingData AllShortagePaging(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int compid, int warehouseid)
        {
            List<ShortSetttle> newdata = new List<ShortSetttle>();

            if (DBoyNo == "all" && datefrom == null)
            {
                newdata = ShortSetttleDb.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == warehouseid && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo == "all" && datefrom != null && dateto != null)
            {
                newdata = ShortSetttleDb.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == warehouseid && x.ShortAmount != 0 && (x.CreatedDate > datefrom && x.CreatedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo != "all" && datefrom != null && dateto != null)
            {
                newdata = ShortSetttleDb.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto && x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DBoyNo != "all" && datefrom == null && dateto == null)
            {
                newdata = ShortSetttleDb.Where(x => x.DboyMobileNo == DBoyNo && x.Deleted == false && x.CompanyId == compid && x.WarehouseId == warehouseid && x.ShortAmount != 0).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }

            PaggingData obj = new PaggingData();
            obj.total_count = ShortSetttleDb.Count();
            obj.ordermaster = newdata;
            return obj;
        }

        #endregion
        #region Offers

        //Add Offer By Sachin Jaiswal
        [Obsolete]
        public OfferResponseDC AddOffer(Offer Offer, string UserName)
        {
            OfferResponseDC offerResponseDC = new OfferResponseDC { status = false, msg = "", Offer = null };
            try
            {
                bool Isexists = true;
                DateTime date1 = Offer.start;
                DateTime date2 = Offer.end;
                RewardItems rewardItems = new RewardItems();
                ItemMaster itemMaster = new ItemMaster();
                bool data = false;
                List<int> OfferIds = null;
                if (!string.IsNullOrEmpty(Offer.WarehouseIds))
                {
                    List<int> warehouseids = Offer.WarehouseIds.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                    List<Warehousedto> warehouses = Warehouses.Where(x => warehouseids.Contains(x.WarehouseId)).Select(y => new Warehousedto { WarehouseId = y.WarehouseId, WarehouseName = y.WarehouseName }).ToList();
                    foreach (var warehouse in warehouses)
                    {
                        Offer.WarehouseId = warehouse.WarehouseId;
                        if (Offer.OfferOn == "Item")
                        {
                            data = OfferDb.Any(x => x.itemId == Offer.itemId && x.IsDeleted == false && x.start <= date1 && x.end >= date2 && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "Item" && x.IsActive == true);
                            offerResponseDC.status = false;
                            offerResponseDC.msg = "This Item Offer already exist for " + warehouse.WarehouseName + ". Please first inactive previous offer.";
                            offerResponseDC.Offer = Offer;
                        }
                        if (Offer.OfferOn == "Brand")
                        {
                            data = OfferDb.Any(x => x.itemId == Offer.itemId && x.IsDeleted == false && x.start <= date1 && x.end >= date2 && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "Brand");
                            offerResponseDC.status = false;
                            offerResponseDC.msg = "";
                            offerResponseDC.Offer = Offer;
                        }
                        if (Offer.OfferOn == "Category")
                        {
                            data = OfferDb.Any(x => x.itemId == Offer.itemId && x.IsDeleted == false && x.start <= date1 && x.end >= date2 && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "Category");
                        }
                        if (Offer.OfferOn == "ScratchBillDiscount")
                        {
                            if (Offer.BillDiscountOfferOn != "FreeItem")
                            {
                                if (Offer.CustomerId > 0)
                                {
                                    Offer.ApplyType = "Customer";
                                }
                                else if (Offer.GroupId > 0)
                                {
                                    Offer.ApplyType = "Group";
                                }
                                else if (Offer.CustomerId == -1)
                                {
                                    Offer.ApplyType = "Warehouse";
                                }
                                else if (Offer.CustomerId == -2)
                                {
                                    Offer.ApplyType = "KPPCustomer";
                                }
                                else if (Offer.CustomerId < -2)
                                {
                                    Offer.ApplyType = "Level";
                                    Isexists = true;
                                }
                            }
                            OfferIds = OfferDb.Where(x => x.IsDeleted == false && x.start <= date1 && x.end >= date2 && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "ScratchBillDiscount" && x.ApplyType == Offer.ApplyType).Select(x => x.OfferId).ToList();
                            data = OfferIds.Any();
                        }
                        if (Offer.OfferOn == "BillDiscount")
                        {
                            var predicate = PredicateBuilder.True<Offer>();
                            predicate = predicate.And(x => x.IsDeleted == false && x.IsActive == true && x.BillAmount == Offer.BillAmount && x.MaxDiscount == Offer.MaxDiscount && x.LineItem == Offer.LineItem && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "BillDiscount" && x.BillDiscountType == Offer.BillDiscountType && x.start <= date1 && x.end >= date2);
                            if (Offer.BillDiscountType == "category")
                            {
                                var Categoryids = Offer.BillDiscountOfferSections.Select(x => x.ObjId);
                                predicate = predicate.And(x => x.BillDiscountOfferSections.Any(y => Categoryids.Contains(y.ObjId)));
                            }
                            else if (Offer.BillDiscountType == "subcategory")
                            {
                                var SubCategoryMappingids = Offer.BillDiscountOfferSections.Select(x => x.ObjId);
                                predicate = predicate.And(x => x.BillDiscountOfferSections.Any(y => SubCategoryMappingids.Contains(y.ObjId)));
                                //predicate = predicate.And(x => x.subCategory == Offer.subCategory);
                            }
                            else if (Offer.BillDiscountType == "brand")
                            {
                                var BrandMappingids = Offer.BillDiscountOfferSections.Select(x => x.ObjId);
                                predicate = predicate.And(x => x.BillDiscountOfferSections.Any(y => BrandMappingids.Contains(y.ObjId)));
                                //predicate = predicate.And(x => x.subSubCategory == Offer.subSubCategory);
                            }

                            if (Offer.BillDiscountOfferOn == "Percentage")
                            {
                                predicate = predicate.And(x => x.BillDiscountOfferOn == "Percentage");
                                //data = OfferDb.Where(x => x.IsDeleted == false && x.IsActive == true && x.BillAmount == Offer.BillAmount && x.MaxDiscount == Offer.MaxDiscount && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "BillDiscount" && x.BillDiscountOfferOn == "Percentage").FirstOrDefault();
                            }
                            //else if (Offer.BillDiscountOfferOn == "FreeItem")
                            //{
                            //    predicate = predicate.And(x => x.BillDiscountOfferOn == "FreeItem");
                            //    //data = OfferDb.Where(x => x.IsDeleted == false && x.IsActive == true && x.BillAmount == Offer.BillAmount && x.MaxDiscount == Offer.MaxDiscount && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "BillDiscount" && x.BillDiscountOfferOn == "Percentage").FirstOrDefault();
                            //}
                            else
                            {
                                predicate = predicate.And(x => x.BillDiscountOfferOn == "WalletPoint");
                                //data = OfferDb.Where(x => x.IsDeleted == false && x.IsActive == true && x.BillAmount == Offer.BillAmount && x.MaxDiscount == Offer.MaxDiscount && x.WarehouseId == Offer.WarehouseId && x.OfferOn == "BillDiscount" && x.BillDiscountOfferOn == "WalletPoint").FirstOrDefault();

                            }
                            OfferIds = OfferDb.Where(predicate).Select(x => x.OfferId).ToList();
                            data = OfferIds.Any();
                        }
                        if ((Offer.OfferOn == "ScratchBillDiscount" || Offer.OfferOn == "BillDiscount"))
                        {
                            if (Offer.BillDiscountOfferOn != "FreeItem")
                            {
                                if (Offer.CustomerId > 0)
                                {
                                    Offer.ApplyType = "Customer";

                                    bool exists = OfferIds.Any() ? BillDiscountDb.Any(x => x.CustomerId == Offer.CustomerId && x.BillDiscountType == Offer.OfferOn && OfferIds.Contains(x.OfferId)) : false;
                                    // bool exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == Offer.WarehouseId && customerOffers.Contains(x.OfferId)) : false;

                                    if (exists)
                                    {
                                        Isexists = false;
                                    }
                                }
                                else if (Offer.GroupId > 0)
                                {
                                    Offer.ApplyType = "Group";
                                    var groupcustomer = GroupMappings.Where(x => x.GroupID == Offer.GroupId && x.WarehouseID == Offer.WarehouseId).Select(x => x.CustomerID);
                                    bool exists = false;
                                    if (groupcustomer != null && groupcustomer.Any())
                                    {
                                        exists = OfferIds.Any() ? BillDiscountDb.Any(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn && OfferIds.Contains(x.OfferId)) : false;
                                        //List<int> customerOffers = BillDiscountDb.Where(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn).Select(x => x.OfferId).Distinct().ToList();
                                        //exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == Offer.WarehouseId && customerOffers.Contains(x.OfferId)) : false;
                                    }
                                    if (exists)
                                    {
                                        Isexists = false;
                                    }

                                }
                                else if (Offer.CustomerId == -1)
                                {
                                    Offer.ApplyType = "Warehouse";
                                    var groupcustomer = Customers.Where(x => x.Warehouseid.Value == Offer.WarehouseId).Select(x => x.CustomerId).ToList();
                                    bool exists = false;
                                    if (groupcustomer != null && groupcustomer.Any())
                                    {
                                        exists = OfferIds.Any() ? BillDiscountDb.Any(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn && OfferIds.Contains(x.OfferId)) : false;
                                        //List<int> customerOffers = BillDiscountDb.Where(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn ).Select(x => x.OfferId).Distinct().ToList();
                                        //exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == Offer.WarehouseId && customerOffers.Contains(x.OfferId)) : false;
                                    }
                                    if (exists)
                                    {
                                        Isexists = false;
                                    }

                                }
                                else if (Offer.CustomerId == -2)
                                {
                                    Offer.ApplyType = "KPPCustomer";
                                    var groupcustomer = Customers.Where(x => x.Warehouseid.Value == Offer.WarehouseId && x.IsKPP).Select(x => x.CustomerId).ToList();
                                    bool exists = false;
                                    if (groupcustomer != null && groupcustomer.Any())
                                    {
                                        exists = OfferIds.Any() ? BillDiscountDb.Any(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn && OfferIds.Contains(x.OfferId)) : false;
                                        //List<int> customerOffers = BillDiscountDb.Where(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == Offer.OfferOn ).Select(x => x.OfferId).Distinct().ToList();
                                        //exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == Offer.WarehouseId && customerOffers.Contains(x.OfferId)) : false;
                                    }
                                    if (exists)
                                    {
                                        Isexists = false;
                                    }

                                }
                                else if (Offer.CustomerId < -2)
                                {
                                    Offer.ApplyType = "Level";
                                    Isexists = true;
                                }
                            }
                        }


                        if (!data && Isexists)
                        {

                            if ((Offer.FreeOfferType != "DreamItem" || Offer.FreeOfferType != "ItemMaster") && (Offer.OfferOn == "BillDiscount" || Offer.OfferOn == "ScratchBillDiscount") && (Offer.OfferAppType == "Retailer App" || Offer.OfferAppType == "Sales App" || Offer.OfferAppType == "Both"))
                            {

                            }
                            else
                            {
                                if (Offer.FreeOfferType == "DreamItem")
                                {
                                    rewardItems = RewardItemsDb.Where(x => x.rItemId == Offer.FreeItemId).FirstOrDefault();
                                    Offer.FreeItemName = rewardItems.rName;
                                }
                                else if (Offer.FreeOfferType == "ItemMaster")
                                {
                                    itemMaster = itemMasters.Where(x => x.ItemId == Offer.FreeItemId).FirstOrDefault();
                                    Offer.FreeItemName = itemMaster.itemname;
                                    Offer.FreeItemMRP = itemMaster.price;
                                    Offer.QtyAvaiable = Convert.ToDouble(Offer.FreeItemLimit);
                                    Offer.IsDispatchedFreeStock = Offer.IsDispatchedFreeStock;
                                }
                                var itemmasterdata = itemMasters.Where(x => x.ItemId == Offer.itemId).FirstOrDefault();
                                if (itemmasterdata != null)
                                {
                                    Offer.itemname = itemmasterdata.itemname;
                                }
                                else
                                {

                                    Offer.itemname = Offer.itemname;
                                }

                            }
                            if (Offer.CustomerId > 0)
                            {
                                Offer.ApplyType = "Customer";
                            }
                            else if (Offer.GroupId > 0)
                            {
                                Offer.ApplyType = "Group";
                            }
                            else if (Offer.CustomerId == -1)
                            {
                                Offer.ApplyType = "Warehouse";
                            }
                            else if (Offer.CustomerId == -2)
                            {
                                Offer.ApplyType = "KPPCustomer";
                            }
                            else if (Offer.CustomerId < -2)
                            {
                                Offer.ApplyType = "Level";
                            }

                            Offer.WarehouseId = Offer.WarehouseId;
                            Offer.start = date1;
                            Offer.end = date2;

                            Offer.itemId = Offer.itemId;
                            Offer.IsDeleted = false;
                            Offer.IsActive = Offer.IsActive;
                            Offer.OfferLogoUrl = Offer.OfferLogoUrl;
                            Offer.CreatedDate = indianTime;
                            Offer.UpdateDate = indianTime;
                            Offer.OfferCode = Offer.OfferCode;
                            Offer.CityId = Offer.CityId;
                            Offer.Description = Offer.Description;
                            Offer.DiscountPercentage = Offer.DiscountPercentage;
                            Offer.OfferName = Offer.OfferName;
                            Offer.OfferWithOtherOffer = Offer.OfferWithOtherOffer;
                            Offer.BillDiscountOfferOn = Offer.BillDiscountOfferOn;
                            Offer.BillDiscountWallet = Offer.BillDiscountWallet;
                            Offer.IsMultiTimeUse = Offer.IsMultiTimeUse;
                            Offer.IsUseOtherOffer = Offer.IsUseOtherOffer;
                            Offer.OfferOn = Offer.OfferOn;
                            Offer.FreeOfferType = Offer.FreeOfferType;
                            Offer.FreeItemLimit = Offer.FreeItemLimit; // add Item limit
                            Offer.OfferUseCount = Offer.OfferUseCount;
                            Offer.OffersaleQty = 0;
                            Offer.Category = Offer.Category;
                            Offer.subCategory = Offer.subCategory;
                            Offer.subSubCategory = Offer.subSubCategory;
                            Offer.OfferAppType = Offer.OfferAppType;
                            Offer.ApplyOn = Offer.ApplyOn;
                            Offer.WalletType = Offer.WalletType;
                            if (Offer.BillDiscountOfferOn != "DynamicWalletPoint")
                            {
                                Offer.OfferScratchWeights = new List<OfferScratchWeight>();
                            }

                            if (Offer.OfferItemsBillDiscounts != null && Offer.OfferItemsBillDiscounts.Any())
                            {
                                Offer.OfferItemsBillDiscounts.ForEach(x => x.IsInclude = Offer.BillDiscountType == "items");
                            }
                            OfferDb.Add(Offer);
                            int id = this.Commit();

                            if (id > 0)
                            {
                                string code = "";
                                if (Offer.OfferOn == "ScratchBillDiscount")
                                {
                                    code = "SC_";
                                }
                                else if (Offer.OfferOn == "BillDiscount")
                                {
                                    code = "BD_";
                                }
                                else if (Offer.OfferOn == "Item")
                                {
                                    code = "ID_";
                                }

                                if (string.IsNullOrEmpty(Offer.OfferCode))
                                {
                                    string offerCode = code + Offer.OfferId;
                                    Offer.OfferCode = offerCode;
                                }
                                this.Commit();
                            }

                            if (Offer.OfferOn == "ScratchBillDiscount" || Offer.OfferOn == "BillDiscount")
                            {
                                if (Offer.OfferId > 0 && Offer.CustomerId > 0)
                                {
                                    double billAmount = 0;
                                    if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                                    {
                                        WeightedRandomBag<int> itemDrops = new WeightedRandomBag<int>();
                                        foreach (var item in Offer.OfferScratchWeights)
                                        {
                                            itemDrops.AddEntry(item.WalletPoint, item.Weight);
                                        }
                                        billAmount = itemDrops.GetRandom();
                                    }

                                    Customer customer = Customers.Where(x => x.CustomerId == Offer.CustomerId).FirstOrDefault();
                                    BillDiscount BillDiscount = new BillDiscount();
                                    BillDiscount.CustomerId = customer.CustomerId;
                                    BillDiscount.OrderId = 0;
                                    BillDiscount.OfferId = Offer.OfferId;
                                    BillDiscount.BillDiscountType = Offer.OfferOn;
                                    if (Offer.OfferOn == "ScratchBillDiscount")
                                    {
                                        BillDiscount.BillDiscountTypeValue = billAmount;//// scratch amount
                                    }
                                    BillDiscount.BillDiscountAmount = 0;
                                    BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                                    BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                                    BillDiscount.CreatedDate = indianTime;
                                    BillDiscount.ModifiedDate = indianTime;
                                    BillDiscount.IsActive = Offer.IsActive;
                                    BillDiscount.IsDeleted = false;
                                    BillDiscount.CreatedBy = Offer.userid;
                                    BillDiscount.ModifiedBy = Offer.userid;
                                    BillDiscount.IsScratchBDCode = false;//scratched or not
                                    BillDiscount.Category = Offer.Category;
                                    BillDiscount.Subcategory = Offer.subCategory;
                                    BillDiscount.subSubcategory = Offer.subSubCategory;

                                    BillDiscountDb.Add(BillDiscount);
                                    this.Commit();

                                    // ScratchCardNotification(Offer.CustomerId, Offer);//send Notifcation for Customer about offer info


                                }
                                else if (Offer.OfferId > 0 && Offer.GroupId > 0)
                                {
                                    List<GroupMapping> groupmapp = GroupMappings.Where(x => x.GroupID == Offer.GroupId && x.WarehouseID == Offer.WarehouseId).ToList();

                                    if (groupmapp.Count > 0)
                                    {
                                        double billAmount = 0;
                                        WeightedRandomBag<int> itemDrops = new WeightedRandomBag<int>();
                                        if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                                        {
                                            foreach (var item in Offer.OfferScratchWeights)
                                            {
                                                itemDrops.AddEntry(item.WalletPoint, item.Weight);
                                            }
                                        }
                                        foreach (var custdata in groupmapp)
                                        {
                                            billAmount = 0;
                                            if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                                            {
                                                billAmount = itemDrops.GetRandom();
                                            }
                                            BillDiscount customerdetails = BillDiscountDb.Where(x => x.CustomerId == custdata.CustomerID && x.OfferId == Offer.OfferId).FirstOrDefault();
                                            if (customerdetails == null)
                                            {
                                                BillDiscount BillDiscount = new BillDiscount();
                                                BillDiscount.CustomerId = custdata.CustomerID;
                                                BillDiscount.OrderId = 0;
                                                BillDiscount.OfferId = Offer.OfferId;
                                                BillDiscount.BillDiscountType = Offer.OfferOn;
                                                if (Offer.OfferOn == "ScratchBillDiscount")
                                                {
                                                    BillDiscount.BillDiscountTypeValue = billAmount;//// scratch amount
                                                }
                                                BillDiscount.BillDiscountAmount = 0;
                                                BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                                                BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                                                BillDiscount.CreatedDate = indianTime;
                                                BillDiscount.ModifiedDate = indianTime;
                                                BillDiscount.IsActive = Offer.IsActive;
                                                BillDiscount.IsDeleted = false;
                                                BillDiscount.CreatedBy = Offer.userid;
                                                BillDiscount.ModifiedBy = Offer.userid;
                                                BillDiscount.IsScratchBDCode = false;//scratched or not
                                                BillDiscountDb.Add(BillDiscount);
                                                this.Commit();
                                            }
                                        }
                                    }
                                }
                                else if (Offer.OfferId > 0 && (Offer.CustomerId == -1 || Offer.CustomerId == -2))
                                {
                                    //var customerids = Customers.Where(x => x.Warehouseid == Offer.WarehouseId && x.Active && !x.Deleted).Select(x => new { x.CustomerId, x.fcmId }).ToList();

                                    //foreach (var item in customerids)
                                    //{
                                    //    BillDiscount BillDiscount = new BillDiscount();
                                    //    BillDiscount.CustomerId = item.CustomerId;
                                    //    BillDiscount.OrderId = 0;
                                    //    BillDiscount.OfferId = Offer.OfferId;
                                    //    BillDiscount.BillDiscountType = Offer.OfferOn;
                                    //    BillDiscount.BillDiscountTypeValue = 0;
                                    //    BillDiscount.BillDiscountAmount = 0;
                                    //    BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                                    //    BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                                    //    BillDiscount.CreatedDate = indianTime;
                                    //    BillDiscount.ModifiedDate = indianTime;
                                    //    BillDiscount.IsActive = Offer.IsActive;
                                    //    BillDiscount.IsDeleted = false;
                                    //    BillDiscount.CreatedBy = Offer.userid;
                                    //    BillDiscount.ModifiedBy = Offer.userid;
                                    //    BillDiscount.IsScratchBDCode = false;//scratched or not
                                    //    BillDiscount.Category = Offer.Category;
                                    //    BillDiscount.Subcategory = Offer.subCategory;
                                    //    BillDiscount.subSubcategory = Offer.subSubCategory;
                                    //    BillDiscountDb.Add(BillDiscount);

                                    //}
                                    //this.Commit();
                                    //if (this.SaveChanges() > 0)
                                    //{                               
                                    //    foreach (var item in customerids.Where(x=> !string.IsNullOrEmpty(x.fcmId)))
                                    //    {

                                    //        ScratchCardNotification(item.CustomerId, Offer);//send Notifcation for Customer about offer info
                                    //    }
                                    //}
                                }
                                else if (Offer.CustomerId < -2)
                                {
                                    int Level = -1;
                                    switch (Offer.CustomerId)
                                    {
                                        case -3:
                                            Level = 0;
                                            break;
                                        case -4:
                                            Level = 1;
                                            break;
                                        case -5:
                                            Level = 2;
                                            break;
                                        case -6:
                                            Level = 3;
                                            break;
                                        case -7:
                                            Level = 4;
                                            break;
                                        case -8:
                                            Level = 5;
                                            break;
                                    }

                                    var fromdate = DateTime.Now;

                                    //if (fromdate.Day < 6)
                                    //{
                                    fromdate = DateTime.Now.AddMonths(-1);
                                    //}
                                    string query = "Select distinct a.CustomerId from CRMCustomerLevels a with(nolock)  inner join Customers b  with(nolock)  on a.CustomerId=b.CustomerId and IsDeleted=0 and b.Warehouseid=" + Offer.WarehouseId + " and a.Month=" + fromdate.Month + " and a.Year=" + fromdate.Year + " And a.Level=" + Level;
                                    List<int> customerids = this.Database.SqlQuery<int>(query).ToList();
                                    //var MonthlyCustomerTarget = new MongoDbHelper<CustomersTargets.MonthlyCustomerTarget>();
                                    //string DocumentName = "MonthlyTargetData_" + fromdate.Month.ToString() + fromdate.Year.ToString();
                                    //var customerLevels = MonthlyCustomerTarget.Select(x => x.WarehouseId == Offer.WarehouseId && x.Levels == Level, null, null, null, false, "", DocumentName).ToList();
                                    //List<int> customerids = new List<int>();
                                    //if (customerLevels != null)
                                    //{
                                    //    var customerSkcodes = customerLevels.Select(x => x.Skcode).ToList();
                                    //    customerids = Customers.Where(x => customerSkcodes.Contains(x.Skcode)).Select(x => x.CustomerId).ToList();
                                    //}

                                    double billAmount = 0;
                                    WeightedRandomBag<int> itemDrops = new WeightedRandomBag<int>();
                                    if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                                    {
                                        foreach (var item in Offer.OfferScratchWeights)
                                        {
                                            itemDrops.AddEntry(item.WalletPoint, item.Weight);
                                        }
                                    }

                                    foreach (var item in customerids)
                                    {
                                        billAmount = 0;
                                        if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                                        {
                                            billAmount = itemDrops.GetRandom();
                                        }
                                        BillDiscount BillDiscount = new BillDiscount();
                                        BillDiscount.CustomerId = item;
                                        BillDiscount.OrderId = 0;
                                        BillDiscount.OfferId = Offer.OfferId;
                                        BillDiscount.BillDiscountType = Offer.OfferOn;
                                        BillDiscount.BillDiscountTypeValue = billAmount;
                                        BillDiscount.BillDiscountAmount = 0;
                                        BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                                        BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                                        BillDiscount.CreatedDate = indianTime;
                                        BillDiscount.ModifiedDate = indianTime;
                                        BillDiscount.IsActive = Offer.IsActive;
                                        BillDiscount.IsDeleted = false;
                                        BillDiscount.CreatedBy = Offer.userid;
                                        BillDiscount.ModifiedBy = Offer.userid;
                                        BillDiscount.IsScratchBDCode = false;//scratched or not
                                        BillDiscount.Category = Offer.Category;
                                        BillDiscount.Subcategory = Offer.subCategory;
                                        BillDiscount.subSubcategory = Offer.subSubCategory;
                                        BillDiscountDb.Add(BillDiscount);

                                    }
                                    this.Commit();
                                }

                            }

                            List<ItemMaster> itemnumber = new List<ItemMaster>();
                            if (Offer.OfferOn == "Item")
                            {
                                itemMaster = itemMasters.Where(x => x.ItemId == Offer.itemId && x.WarehouseId == Offer.WarehouseId).SingleOrDefault();
                                itemnumber = itemMasters.Where(x => x.Number == itemMaster.Number && x.WarehouseId == Offer.WarehouseId && x.Deleted == false).ToList();
                                if (itemnumber.Count != 0)
                                {
                                    foreach (var singleItemNumbers in itemnumber)
                                    {
                                        ItemMaster editItemMaster = singleItemNumbers;

                                        editItemMaster.IsOffer = true;
                                        if (Offer.OfferCategory == "Offer")
                                        {
                                            editItemMaster.OfferCategory = 1;
                                        }
                                        else if (Offer.OfferCategory == "FlashDeal")
                                        {
                                            editItemMaster.OfferCategory = 2;
                                        }
                                        editItemMaster.OfferStartTime = date1;
                                        editItemMaster.OfferEndTime = date2;
                                        editItemMaster.OfferQtyAvaiable = Offer.QtyAvaiable;
                                        editItemMaster.OfferQtyConsumed = Offer.QtyConsumed;
                                        editItemMaster.OfferId = Offer.OfferId;
                                        editItemMaster.OfferWalletPoint = Offer.FreeWalletPoint;
                                        editItemMaster.OfferType = Offer.FreeOfferType;
                                        editItemMaster.OfferFreeItemId = Offer.FreeItemId;
                                        editItemMaster.OfferPercentage = Offer.DiscountPercentage;
                                        editItemMaster.OfferMinimumQty = Offer.MinOrderQuantity;
                                        editItemMaster.OfferFreeItemName = Offer.FreeItemName;
                                        editItemMaster.OfferFreeItemQuantity = Offer.NoOffreeQuantity;
                                        if (Offer.FreeItemId > 0 && Offer.FreeOfferType == "ItemMaster")
                                        {
                                            ItemMaster freeitem = itemMasters.Where(x => x.ItemId == Offer.FreeItemId).SingleOrDefault();
                                            ItemMasterCentral imageitem = ItemMasterCentralDB.Where(x => x.SellingSku == freeitem.SellingSku).SingleOrDefault();
                                            editItemMaster.OfferFreeItemImage = imageitem.LogoUrl;
                                        }
                                        this.Entry(editItemMaster).State = EntityState.Modified;
                                        this.Commit();
                                    }
                                }

                            }
                            offerResponseDC.Offer = Offer;
                            offerResponseDC.status = true;
                            offerResponseDC.msg = "";
                            return offerResponseDC;
                        }
                        else
                        {
                            return offerResponseDC;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                offerResponseDC.msg = "Some error occurred during save data.";
                offerResponseDC.status = false;
            }
            return offerResponseDC;
        }

        public List<OfferList> GetAllOffer(int compid)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.CompanyId == compid && o.OfferOn == "Item"
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferOn = o.OfferOn,
                                              OfferName = o.OfferName,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              itemname = o.itemname,
                                              ItemId = o.itemId,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              FreeItemLimit = o.FreeItemLimit
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }

        public List<OfferList> GetAllOfferWid(int compid, int WarehouseId)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.CompanyId == compid && o.OfferOn == "Item" && o.WarehouseId == WarehouseId
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferOn = o.OfferOn,
                                              OfferName = o.OfferName,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              itemname = o.itemname,
                                              ItemId = o.itemId,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              FreeItemLimit = o.FreeItemLimit,
                                              OfferAppType = o.OfferAppType
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }

        //tejas
        public List<OfferList> GetAllOfferWArehouseID(int WarehouseId)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.OfferOn == "Item" && o.WarehouseId == WarehouseId
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferOn = o.OfferOn,
                                              OfferName = o.OfferName,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              itemname = o.itemname,
                                              ItemId = o.itemId,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              FreeItemLimit = o.FreeItemLimit,
                                              OfferAppType = o.OfferAppType
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }

        public List<OfferList> GetAllOfferBIll(int compid)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.CompanyId == compid && o.OfferOn == "BillDiscount" || o.OfferOn == "ScratchBillDiscount"
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferOn = o.OfferOn,
                                              OfferName = o.OfferName,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              itemname = o.itemname,
                                              ItemId = o.itemId,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              MaxBillAmount = o.MaxBillAmount,
                                              MaxDiscount = o.MaxDiscount,
                                              LineItem = o.LineItem,
                                              IsMultiTimeUse = o.IsMultiTimeUse,
                                              IsUseOtherOffer = o.IsUseOtherOffer,
                                              OfferUseCount = o.OfferUseCount,
                                              GroupId = o.GroupId,
                                              BillDiscountType = o.BillDiscountType,
                                              OfferAppType = o.OfferAppType
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }


        public List<Offer> GetOfferForSliderAppHome(int WarehouseId)
        {
            List<Offer> offers = new List<Offer>();
            try
            {
                offers = OfferDb.Where(x => x.WarehouseId == WarehouseId && x.IsDeleted == false && x.IsActive == true && x.start <= indianTime && x.end >= indianTime).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }

        }


        public List<OfferList> GetAllOfferWidBill(int compid, int Warehouse_id)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.CompanyId == compid && o.WarehouseId == Warehouse_id && o.OfferOn == "BillDiscount" || o.OfferOn == "ScratchBillDiscount"
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferName = o.OfferName,
                                              OfferOn = o.OfferOn,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              ItemId = o.itemId,
                                              itemname = o.itemname,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              IsMultiTimeUse = o.IsMultiTimeUse,
                                              IsUseOtherOffer = o.IsUseOtherOffer,
                                              GroupId = o.GroupId,
                                              FreeItemLimit = o.FreeItemLimit,
                                              OfferAppType = o.OfferAppType
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }


        //tejas
        public List<OfferList> getAllOfferWarehouseIDBill(int WarehouseId)
        {
            try
            {
                List<OfferList> offers = (from o in OfferDb
                                          join w in Warehouses on o.WarehouseId equals w.WarehouseId
                                          where o.IsDeleted == false && o.WarehouseId == WarehouseId && (o.OfferOn == "BillDiscount" || o.OfferOn == "ScratchBillDiscount")
                                          orderby o.CreatedDate descending
                                          select new OfferList
                                          {
                                              OfferId = o.OfferId,
                                              WarehouseId = o.WarehouseId,
                                              WarehouseName = w.WarehouseName + " " + w.CityName,
                                              OfferName = o.OfferName,
                                              OfferOn = o.OfferOn,
                                              OfferCategory = o.OfferCategory,
                                              FreeOfferType = o.FreeOfferType,
                                              Description = o.Description,
                                              ItemId = o.itemId,
                                              itemname = o.itemname,
                                              MinOrderQuantity = o.MinOrderQuantity,
                                              FreeItemName = o.FreeItemName,
                                              NoOffreeQuantity = o.NoOffreeQuantity,
                                              start = o.start,
                                              end = o.end,
                                              FreeWalletPoint = o.FreeWalletPoint,
                                              DiscountPercentage = o.DiscountPercentage,
                                              FreeItemId = o.FreeItemId,
                                              IsActive = o.IsActive,
                                              QtyAvaiable = o.QtyAvaiable,
                                              QtyConsumed = o.QtyConsumed,
                                              MaxQtyPersonCanTake = o.MaxQtyPersonCanTake,
                                              OfferWithOtherOffer = o.OfferWithOtherOffer,
                                              OfferVolume = o.OfferVolume,
                                              FreeItemMRP = o.FreeItemMRP,
                                              IsDeleted = o.IsDeleted,
                                              CreatedDate = o.CreatedDate,
                                              UpdateDate = o.UpdateDate,
                                              OfferCode = o.OfferCode,
                                              BillDiscountOfferOn = o.BillDiscountOfferOn,
                                              BillDiscountWallet = o.BillDiscountWallet,
                                              BillAmount = o.BillAmount,
                                              IsMultiTimeUse = o.IsMultiTimeUse,
                                              IsUseOtherOffer = o.IsUseOtherOffer,
                                              GroupId = o.GroupId,
                                              FreeItemLimit = o.FreeItemLimit,
                                              BillDiscountType = o.BillDiscountType,
                                              OfferAppType = o.OfferAppType
                                          }).ToList();
                return offers;
            }
            catch (Exception ee)
            {
                return null;
            }
        }


        public CustomerVoice GetVoiceByskcode(string skcode)
        {
            CustomerVoice CVoice = CustomerVoiceDB.Where(c => c.skcode == skcode).SingleOrDefault();
            if (CVoice != null)
            {
                return CVoice;
            }
            else
            {
                CVoice = new CustomerVoice();
            }
            return CVoice;
        }

        public Offer GetOfferbyId(int id, int compid)
        {

            Offer offer = OfferDb.Where(c => c.OfferId == id && c.IsDeleted == false && c.CompanyId == compid).SingleOrDefault();
            if (offer != null)
            {
                return offer;
            }
            else
            {
                offer = new Offer();
            }
            return offer;
        }

        public IEnumerable<OfferItem> GetOfferItemByOrderId(int id)
        {
            var offerItem = OfferItemDb.Where(c => c.OrderId == id && c.IsDeleted == false && c.OfferType == "ItemMaster").ToList();
            return offerItem;
        }

        public Offer GetOfferByItem(int itemid, int compid)
        {

            var offer = OfferDb.Where(c => c.itemId == itemid && c.IsDeleted == false && c.CompanyId == compid && c.start <= DateTime.Today && c.end >= DateTime.Today && c.IsActive == true).FirstOrDefault();
            return offer;
        }

        public Offer PutOffer(Offer obj, string UserName)
        {
            Offer offer = OfferDb.Where(x => x.OfferId == obj.OfferId && x.IsDeleted == false).FirstOrDefault();
            if (offer != null)
            {
                bool Isexists = true;
                DateTime date1 = obj.start;
                DateTime date2 = obj.end;
                if (obj.IsActive)
                {

                    // old dated 19/05/2022
                    // bool isExist = OfferDb.Where(x => x.OfferOn == "BillDiscount" && x.WarehouseId == obj.WarehouseId && x.IsDeleted == false && x.IsActive && x.BillAmount == obj.BillAmount && x.start >= date1 && x.end <= date2).Any();
                    //Updated on 19/05/2022 by Manoj Bhardwaj

                    bool isExist = OfferDb.Where(x => x.OfferOn == "BillDiscount" && x.WarehouseId == obj.WarehouseId && x.IsDeleted == false && x.IsActive && x.BillAmount == obj.BillAmount && x.DiscountPercentage == obj.DiscountPercentage && x.start >= date1 && x.end <= date2).Any();


                    if (isExist)
                    {
                        Isexists = false;
                    }
                }
                if (obj.CustomerId > 0)
                {
                    List<int> customerOffers = BillDiscountDb.Where(x => x.CustomerId == obj.CustomerId && x.BillDiscountType == obj.OfferOn).Select(x => x.OfferId).Distinct().ToList();
                    bool exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == obj.WarehouseId && customerOffers.Contains(x.OfferId)) : false;
                    if (exists)
                    {
                        Isexists = false;
                    }
                }
                else if (obj.GroupId > 0)
                {
                    var groupcustomer = GroupMappings.Where(x => x.GroupID == obj.GroupId && x.WarehouseID == obj.WarehouseId).Select(x => x.CustomerID);
                    bool exists = false;
                    if (groupcustomer != null && groupcustomer.Any())
                    {
                        List<int> customerOffers = BillDiscountDb.Where(x => groupcustomer.Contains(x.CustomerId) && x.BillDiscountType == obj.OfferOn).Select(x => x.OfferId).Distinct().ToList();
                        exists = customerOffers != null && customerOffers.Any() ? OfferDb.Any(x => x.IsDeleted == false && x.IsActive == true && x.start >= date1 && x.end <= date2 && x.WarehouseId == obj.WarehouseId && customerOffers.Contains(x.OfferId)) : false;
                    }
                    if (exists)
                    {
                        Isexists = false;
                    }
                }
                if (Isexists)
                {
                    if (obj != null)
                    {
                        if (offer.OfferOn == "Item")
                        {
                            ItemMaster itemdata = itemMasters.Where(x => x.ItemId == offer.itemId && x.WarehouseId == offer.WarehouseId).FirstOrDefault();
                            List<ItemMaster> itemMastersNumber = itemMasters.Where(x => x.Number == itemdata.Number && x.WarehouseId == offer.WarehouseId).ToList();
                            foreach (var singleItemMastersNumber in itemMastersNumber)
                            {
                                ItemMaster itemdataEdit = itemMasters.Where(x => x.ItemId == singleItemMastersNumber.ItemId).FirstOrDefault();
                                itemdataEdit.IsOffer = obj.IsActive;
                                if (obj.IsActive == false)
                                {
                                    itemdataEdit.OfferCategory = 0;
                                }
                                else
                                {
                                    if (offer.OfferCategory == "Offer")
                                    {
                                        itemdataEdit.OfferCategory = 1;
                                    }
                                }
                                //itemMasters.Attach(itemdataEdit);
                                this.Entry(itemdataEdit).State = EntityState.Modified;
                            }
                        }
                        offer.IsActive = obj.IsActive;
                        offer.UpdateDate = indianTime;
                        this.Entry(offer).State = EntityState.Modified;
                        this.Commit();
                        return obj;
                    }
                    else
                    {
                        logger.Error("This offer is not Found in put " + obj.Description);
                        return null;
                    }
                }
            }
            return null;
        }
        //public Offer PutOffer(Offer obj, string UserName)
        //{

        //    logger.Info("put Offer: ");


        //    RewardItems rewardItems = new RewardItems();
        //    ItemMaster itemMaster = new ItemMaster();
        //    Offer offer = OfferDb.Where(x => x.OfferId == obj.OfferId && x.IsDeleted == false).FirstOrDefault();
        //    bool isExist = OfferDb.Where(x => x.OfferOn == "BillDiscount" && x.WarehouseId == obj.WarehouseId && x.OfferId != obj.OfferId && x.IsDeleted == false && x.IsActive).Any();

        //    if (!isExist)
        //    {
        //        if (offer != null)
        //        {
        //            try
        //            {
        //                DateTime date1 = obj.start;
        //                DateTime date2 = obj.end;
        //                if (obj != null)
        //                {
        //                    offer.OfferCode = obj.OfferCode;
        //                    offer.IsActive = obj.IsActive;

        //                    offer.start = date1;
        //                    offer.end = date2;
        //                    offer.IsMultiTimeUse = obj.IsMultiTimeUse;
        //                    offer.IsUseOtherOffer = obj.IsUseOtherOffer;
        //                    if (obj.FreeOfferType == "BillDiscount")
        //                    {
        //                        offer.DiscountPercentage = obj.DiscountPercentage;
        //                        offer.BillAmount = obj.BillAmount;
        //                        offer.BillDiscountWallet = obj.BillDiscountWallet;
        //                        offer.BillDiscountOfferOn = obj.BillDiscountOfferOn;
        //                    }
        //                    offer.UpdateDate = indianTime;
        //                    //OfferDb.Attach(offer);
        //                    this.Entry(offer).State = EntityState.Modified;
        //                    this.SaveChanges();
        //                    //if (offer.OfferId> 0)
        //                    //{
        //                    //    OfferHistory offerHistory = new OfferHistory();
        //                    //    offerHistory.OfferId = offer.OfferId;
        //                    //    offerHistory.OfferCategory = offer.OfferCategory;
        //                    //    offerHistory.FreeOfferType = offer.FreeOfferType;
        //                    //    offerHistory.OfferOn = offer.OfferOn;
        //                    //    offerHistory.OfferVolume = offer.OfferVolume;
        //                    //    offerHistory.FreeItemName = offer.FreeItemName;
        //                    //    offerHistory.MinOrderQuantity = offer.MinOrderQuantity;
        //                    //    offerHistory.NoOffreeQuantity = offer.NoOffreeQuantity;
        //                    //    offerHistory.FreeItemId = offer.FreeItemId;
        //                    //    offerHistory.QtyAvaiable = offer.QtyAvaiable;
        //                    //    offerHistory.QtyConsumed = offer.QtyConsumed;
        //                    //    offerHistory.MaxQtyPersonCanTake = offer.MaxQtyPersonCanTake;
        //                    //    offerHistory.WarehouseId = offer.WarehouseId;
        //                    //    offerHistory.start = offer.start;
        //                    //    offerHistory.end = offer.end;
        //                    //    offerHistory.itemname = offer.itemname;
        //                    //    offerHistory.itemId = offer.itemId;
        //                    //    offerHistory.IsDeleted = offer.IsDeleted;
        //                    //    offerHistory.IsActive = offer.IsActive;
        //                    //    offerHistory.OfferLogoUrl = offer.OfferLogoUrl;
        //                    //    offerHistory.UpdateDate = indianTime;
        //                    //    offerHistory.OfferCode = offer.OfferCode;
        //                    //    offerHistory.CityId = offer.CityId;
        //                    //    offerHistory.Description = offer.Description;
        //                    //    offerHistory.DiscountPercentage = offer.DiscountPercentage;
        //                    //    offerHistory.OfferName = offer.OfferName;
        //                    //    offerHistory.OfferWithOtherOffer = offer.OfferWithOtherOffer;
        //                    //    offerHistory.BillAmount = offer.BillAmount;
        //                    //    offerHistory.IsMultiTimeUse = offer.IsMultiTimeUse;
        //                    //    offerHistory.IsUseOtherOffer = offer.IsUseOtherOffer;
        //                    //    offerHistory.IsUseOtherOffer = offer.IsUseOtherOffer;
        //                    //    if (offer.FreeOfferType == "DreamItem")
        //                    //    {
        //                    //        if (rewardItems != null)
        //                    //        {
        //                    //            offerHistory.FreeItemName = rewardItems.rName;
        //                    //        }
        //                    //    }
        //                    //    else if (offer.FreeOfferType == "ItemMaster")
        //                    //    {
        //                    //        if (itemMaster != null)
        //                    //        {
        //                    //            offerHistory.FreeItemName = itemMaster.itemname;
        //                    //            offerHistory.FreeItemMRP = itemMaster.price;
        //                    //        }
        //                    //    }
        //                    //    offerHistory.CreatedBy = UserName;
        //                    //    offerHistory.BillDiscountOfferOn = offer.BillDiscountOfferOn;
        //                    //    offerHistory.BillDiscountWallet = offer.BillDiscountWallet;
        //                    //    OfferHistoryDB.Add(offerHistory);
        //                    //    this.SaveChanges();
        //                    //}

        //                    return obj;

        //                }
        //                else
        //                {
        //                    logger.Error("This offer is not Found in put " + obj.Description);
        //                    return null;
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                logger.Error("Error in put Offer " + ex.Message);
        //            }
        //        }

        //        return null;
        //    }
        //    return null;
        //}

        //By Sachin for Getting offer On Order
        public dynamic GetOfferOnOrder(int OrderId, int compid)
        {
            try
            {
                var data = OfferItemDb.Where(c => c.CompanyId == compid && c.OrderId == OrderId && c.OfferType == "ItemMaster").ToList();
                return data;
            }
            catch (Exception ee)
            {
                logger.Error("Error in put Offer " + ee.Message);
                return null;
            }

        }


        public Offer ActiveDeativeofferByJob(int offerId, string UserName)
        {
            RewardItems rewardItems = new RewardItems();
            ItemMaster itemMaster = new ItemMaster();
            Offer offer = OfferDb.FirstOrDefault(x => x.OfferId == offerId);
            offer.IsActive = false;
            //OfferDb.Attach(offer);
            this.Entry(offer).State = EntityState.Modified;
            int id = this.Commit();
            if (id != 0)
            {
                OfferHistory offerHistory = new OfferHistory();
                offerHistory.OfferId = offer.OfferId;
                offerHistory.OfferCategory = offer.OfferCategory;
                offerHistory.FreeOfferType = offer.FreeOfferType;
                offerHistory.OfferOn = offer.OfferOn;
                offerHistory.OfferVolume = offer.OfferVolume;
                offerHistory.FreeItemName = offer.FreeItemName;
                offerHistory.MinOrderQuantity = offer.MinOrderQuantity;
                offerHistory.NoOffreeQuantity = offer.NoOffreeQuantity;
                offerHistory.FreeItemId = offer.FreeItemId;
                offerHistory.QtyAvaiable = offer.QtyAvaiable;
                offerHistory.QtyConsumed = offer.QtyConsumed;
                offerHistory.MaxQtyPersonCanTake = offer.MaxQtyPersonCanTake;
                offerHistory.WarehouseId = offer.WarehouseId;
                offerHistory.start = offer.start;
                offerHistory.end = offer.end;
                offerHistory.itemname = offer.itemname;
                offerHistory.itemId = offer.itemId;
                offerHistory.IsDeleted = offer.IsDeleted;
                offerHistory.IsActive = offer.IsActive;
                offerHistory.OfferLogoUrl = offer.OfferLogoUrl;
                offerHistory.UpdateDate = indianTime;
                offerHistory.OfferCode = offer.OfferCode;
                offerHistory.CityId = offer.CityId;
                offerHistory.Description = offer.Description;
                offerHistory.DiscountPercentage = offer.DiscountPercentage;
                offerHistory.OfferName = offer.OfferName;
                offerHistory.OfferWithOtherOffer = offer.OfferWithOtherOffer;
                offerHistory.IsMultiTimeUse = offer.IsMultiTimeUse;
                offerHistory.IsUseOtherOffer = offer.IsUseOtherOffer;
                if (offer.FreeOfferType == "DreamItem")
                {
                    if (rewardItems != null)
                    {
                        offerHistory.FreeItemName = rewardItems.rName;
                    }
                }
                else if (offer.FreeOfferType == "ItemMaster")
                {
                    if (itemMaster != null)
                    {
                        offerHistory.FreeItemName = itemMaster.itemname;
                        offerHistory.FreeItemMRP = itemMaster.price;
                    }
                }
                offerHistory.CreatedBy = UserName;
                OfferHistoryDB.Add(offerHistory);
                this.Commit();
            }
            if (offer.OfferOn == "Item" && offer.OfferAppType != "Distributor App")
            {
                ItemMaster itemdata = itemMasters.Where(x => x.ItemId == offer.itemId && x.WarehouseId == offer.WarehouseId).FirstOrDefault();
                List<ItemMaster> itemMastersNumber = itemMasters.Where(x => x.Number == itemdata.Number && x.ItemMultiMRPId == itemdata.ItemMultiMRPId && x.WarehouseId == offer.WarehouseId).ToList();
                foreach (var itemdataEdit in itemMastersNumber)
                {
                    itemdataEdit.IsOffer = offer.IsActive;
                    if (offer.IsActive == false)
                    {
                        itemdataEdit.OfferCategory = 0;
                    }
                    else
                    {
                        if (offer.OfferCategory == "Offer")
                        {
                            itemdataEdit.OfferCategory = 1;
                        }
                    }
                    //itemMasters.Attach(itemdataEdit);
                    this.Entry(itemdataEdit).State = EntityState.Modified;
                    this.Commit();
                }
            }
            return offer;
        }

        public Offer ActiveDeativeoffer(Offer offer, string UserName)
        {
            RewardItems rewardItems = new RewardItems();
            ItemMaster itemMaster = new ItemMaster();
            Offer dboffer = OfferDb.FirstOrDefault(x => x.OfferId == offer.OfferId);
            dboffer.IsActive = offer.IsActive;
            //OfferDb.Attach(offer);
            this.Entry(dboffer).State = EntityState.Modified;
            int id = this.Commit();
            if (id != 0)
            {
                OfferHistory offerHistory = new OfferHistory();
                offerHistory.OfferId = offer.OfferId;
                offerHistory.OfferCategory = offer.OfferCategory;
                offerHistory.FreeOfferType = offer.FreeOfferType;
                offerHistory.OfferOn = offer.OfferOn;
                offerHistory.OfferVolume = offer.OfferVolume;
                offerHistory.FreeItemName = offer.FreeItemName;
                offerHistory.MinOrderQuantity = offer.MinOrderQuantity;
                offerHistory.NoOffreeQuantity = offer.NoOffreeQuantity;
                offerHistory.FreeItemId = offer.FreeItemId;
                offerHistory.QtyAvaiable = offer.QtyAvaiable;
                offerHistory.QtyConsumed = offer.QtyConsumed;
                offerHistory.MaxQtyPersonCanTake = offer.MaxQtyPersonCanTake;
                offerHistory.WarehouseId = offer.WarehouseId;
                offerHistory.start = offer.start;
                offerHistory.end = offer.end;
                offerHistory.itemname = offer.itemname;
                offerHistory.itemId = offer.itemId;
                offerHistory.IsDeleted = offer.IsDeleted;
                offerHistory.IsActive = offer.IsActive;
                offerHistory.OfferLogoUrl = offer.OfferLogoUrl;
                offerHistory.UpdateDate = indianTime;
                offerHistory.OfferCode = offer.OfferCode;
                offerHistory.CityId = offer.CityId;
                offerHistory.Description = offer.Description;
                offerHistory.DiscountPercentage = offer.DiscountPercentage;
                offerHistory.OfferName = offer.OfferName;
                offerHistory.OfferWithOtherOffer = offer.OfferWithOtherOffer;
                offerHistory.IsMultiTimeUse = offer.IsMultiTimeUse;
                offerHistory.IsUseOtherOffer = offer.IsUseOtherOffer;
                if (offer.FreeOfferType == "DreamItem")
                {
                    if (rewardItems != null)
                    {
                        offerHistory.FreeItemName = rewardItems.rName;
                    }
                }
                else if (offer.FreeOfferType == "ItemMaster")
                {
                    if (itemMaster != null)
                    {
                        offerHistory.FreeItemName = itemMaster.itemname;
                        offerHistory.FreeItemMRP = itemMaster.price;
                    }
                }
                offerHistory.CreatedBy = UserName;
                OfferHistoryDB.Add(offerHistory);
                this.Commit();
            }
            if (offer.OfferOn == "Item" && offer.OfferAppType != "Distributor App")
            {
                List<ItemMaster> itemMastersNumber = new List<ItemMaster>();
                ItemMaster itemdata = itemMasters.Where(x => x.ItemId == offer.itemId && x.WarehouseId == offer.WarehouseId).FirstOrDefault();
                if (offer.IsFreebiesLevel)
                {
                    itemMastersNumber = itemMasters.Where(x => x.SellingSku == itemdata.SellingSku && x.WarehouseId == offer.WarehouseId).ToList();
                }
                else
                {
                    itemMastersNumber = itemMasters.Where(x => x.ItemMultiMRPId == itemdata.ItemMultiMRPId && x.WarehouseId == offer.WarehouseId).ToList();
                }
                foreach (var itemdataEdit in itemMastersNumber)
                {
                    itemdataEdit.IsOffer = offer.IsActive;
                    if (offer.IsActive == false)
                    {
                        itemdataEdit.IsOffer = false;
                        itemdataEdit.OfferCategory = 0;
                    }
                    else
                    {
                        if (offer.OfferCategory == "Offer")
                        {
                            itemdataEdit.IsOffer = true;
                            itemdataEdit.OfferStartTime = dboffer.start;
                            itemdataEdit.OfferEndTime = dboffer.end;
                            itemdataEdit.OfferQtyAvaiable = dboffer.QtyAvaiable;
                            itemdataEdit.OfferQtyConsumed = dboffer.QtyConsumed;
                            itemdataEdit.OfferId = dboffer.OfferId;
                            itemdataEdit.OfferWalletPoint = dboffer.FreeWalletPoint;
                            itemdataEdit.OfferType = dboffer.FreeOfferType;
                            itemdataEdit.OfferFreeItemId = dboffer.FreeItemId;
                            itemdataEdit.OfferPercentage = dboffer.DiscountPercentage;
                            itemdataEdit.OfferMinimumQty = dboffer.MinOrderQuantity;
                            itemdataEdit.OfferFreeItemName = dboffer.FreeItemName;
                            itemdataEdit.OfferFreeItemQuantity = dboffer.NoOffreeQuantity;
                            itemdataEdit.OfferCategory = 1;
                        }
                    }
                    //itemMasters.Attach(itemdataEdit);
                    this.Entry(itemdataEdit).State = EntityState.Modified;
                    this.Commit();
                }
            }

            return offer;
        }
        public bool DeleteOffer(int id, int compid, string UserName)
        {

            try
            {
                Offer offer = OfferDb.Where(x => x.OfferId == id && x.CompanyId == compid).SingleOrDefault();
                offer.IsDeleted = true;
                offer.UpdateDate = indianTime;
                //OfferDb.Attach(offer);
                this.Entry(offer).State = EntityState.Modified;
                int result = this.Commit();
                if (result != 0)
                {
                    OfferHistory offerHistory = new OfferHistory();
                    offerHistory.OfferId = offer.OfferId;
                    offerHistory.OfferCategory = offer.OfferCategory;
                    offerHistory.FreeOfferType = offer.FreeOfferType;
                    offerHistory.OfferOn = offer.OfferOn;
                    offerHistory.OfferVolume = offer.OfferVolume;
                    offerHistory.FreeItemName = offer.FreeItemName;
                    offerHistory.MinOrderQuantity = offer.MinOrderQuantity;
                    offerHistory.NoOffreeQuantity = offer.NoOffreeQuantity;
                    offerHistory.FreeItemId = offer.FreeItemId;
                    offerHistory.QtyAvaiable = offer.QtyAvaiable;
                    offerHistory.QtyConsumed = offer.QtyConsumed;
                    offerHistory.MaxQtyPersonCanTake = offer.MaxQtyPersonCanTake;
                    offerHistory.WarehouseId = offer.WarehouseId;
                    offerHistory.start = offer.start;
                    offerHistory.end = offer.end;
                    offerHistory.itemname = offer.itemname;
                    offerHistory.itemId = offer.itemId;
                    offerHistory.IsDeleted = true;
                    offerHistory.IsActive = offer.IsActive;
                    offerHistory.OfferLogoUrl = offer.OfferLogoUrl;
                    offerHistory.CreatedDate = indianTime;
                    offerHistory.UpdateDate = indianTime;
                    offerHistory.OfferCode = offer.OfferCode;
                    offerHistory.CityId = offer.CityId;
                    offerHistory.Description = offer.Description;
                    offerHistory.DiscountPercentage = offer.DiscountPercentage;
                    offerHistory.OfferName = offer.OfferName;
                    offerHistory.OfferWithOtherOffer = offer.OfferWithOtherOffer;
                    if (offer.FreeOfferType == "DreamItem")
                    {
                        var Data = RewardItemsDb.Where(x => x.rItemId == offer.FreeItemId).FirstOrDefault();
                        if (Data != null)
                        {
                            offerHistory.FreeItemName = Data.rName;
                        }
                    }
                    else if (offer.FreeOfferType == "ItemMaster")
                    {
                        var Data = itemMasters.Where(x => x.ItemId == offer.FreeItemId).FirstOrDefault();
                        if (Data != null)
                        {
                            offerHistory.FreeItemName = Data.itemname;
                            offerHistory.FreeItemMRP = Data.price;
                        }
                    }
                    offerHistory.CreatedBy = UserName;
                    OfferHistoryDB.Add(offerHistory);
                    this.Commit();
                }
                if (offer.OfferOn == "Item")
                {
                    var data = itemMasters.Where(x => x.ItemId == offer.itemId && x.WarehouseId == offer.WarehouseId).FirstOrDefault();
                    var data1 = itemMasters.Where(x => x.Number == data.Number && x.WarehouseId == offer.WarehouseId).ToList();
                    foreach (var kk in data1)
                    {
                        var data2 = itemMasters.Where(x => x.ItemId == kk.ItemId).FirstOrDefault();
                        data2.OfferCategory = 0;
                        data2.IsOffer = false;
                        data2.OfferQtyAvaiable = 0;
                        data2.OfferQtyConsumed = 0;
                        data2.OfferStartTime = null;
                        data2.OfferEndTime = null;
                        data2.OfferId = 0;
                        data2.OfferType = null;
                        if (offer.FreeOfferType == "ItemMaster")
                        {
                            data2.OfferFreeItemId = 0;
                            data2.OfferFreeItemName = null;
                            data2.OfferFreeItemQuantity = 0;
                            data2.OfferPercentage = 0;
                            data2.OfferWalletPoint = 0;
                        }
                        else if (offer.FreeOfferType == "WalletPoint")
                        {
                            data2.OfferFreeItemId = 0;
                            data2.OfferFreeItemName = null;
                            data2.OfferFreeItemQuantity = 0;
                            data2.OfferPercentage = 0;
                            data2.OfferWalletPoint = 0;
                        }
                        else if (offer.FreeOfferType == "Percentage")
                        {
                            data2.OfferFreeItemId = 0;
                            data2.OfferFreeItemName = null;
                            data2.OfferFreeItemQuantity = 0;
                            data2.OfferPercentage = 0;
                            data2.OfferWalletPoint = 0;
                        }
                        data2.OfferMinimumQty = 0;
                        data2.OfferFreeItemImage = null;
                        //itemMasters.Attach(data2);
                        this.Entry(data2).State = EntityState.Modified;
                        this.Commit();
                    }

                }
                //if (offer.OfferOn == "Brand")
                //{
                //    var data = itemMasters.Where(x => x.SubsubCategoryid == offer.itemId && x.WarehouseId == offer.WarehouseId).ToList();
                //    foreach (var itemdata in data)
                //    {
                //        var data1 = itemMasters.Where(x => x.Number == itemdata.Number).ToList();
                //        foreach (var kk in data1)
                //        {
                //            var data2 = itemMasters.Where(x => x.ItemId == kk.ItemId).FirstOrDefault();
                //            data2.OfferCategory = 0;
                //            data2.IsOffer = false;
                //            itemMasters.Attach(data2);
                //            this.Entry(data2).State = EntityState.Modified;
                //            this.SaveChanges();
                //        }
                //    }

                //}
                return true;
            }
            catch
            {
                return false;
            }
        }


        public int GetFreeItemStockOnOrderId(int OrderId)
        {
            try
            {
                bool rr = true;
                var offerdata = OfferItemDb.Where(o => o.OrderId == OrderId).ToList();
                if (offerdata.Count != 0)
                {
                    foreach (var data in offerdata)
                    {
                        int itemid = data.FreeItemId;
                        if (itemid != 0)
                        {
                            ItemMaster master = itemMasters.Where(c => c.ItemId == itemid).SingleOrDefault();
                            CurrentStock item = DbCurrentStock.Where(x => x.ItemNumber == master.Number && x.WarehouseId == master.WarehouseId && x.ItemMultiMRPId == master.ItemMultiMRPId).FirstOrDefault();
                            if (item.CurrentInventory > data.NoOffreeQuantity)
                            {
                                rr = true;
                            }
                            else
                            {
                                rr = false;
                                return 0;
                            }
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
                return 1;
            }
            catch (Exception ss)
            {
                return 0;
            }
        }
        #endregion

        #region Wallet
        public Wallet GetWalletbyCustomerid(int CustomerId)//get orders to deliver
        {
            try
            {
                var wallet = WalletDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
                var company = CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).SingleOrDefault();

                var cust = Customers.Where(c => c.CustomerId == CustomerId).SingleOrDefault();

                Wallet d = new Wallet()
                {
                    Id = wallet.Id,
                    CustomerId = wallet.CustomerId,
                    TotalAmount = wallet.TotalAmount,
                    CreatedDate = wallet.CreatedDate,
                    TransactionDate = wallet.TransactionDate,
                    UpdatedDate = wallet.UpdatedDate,
                    Deleted = wallet.Deleted,
                    Wallet_TermsCondition = company.Wallet_TermsCondition,
                    MaxWalletPointUsed = company.MaxWalletPointUsed
                };

                if (wallet == null)
                {
                    Wallet w = new Wallet();
                    if (cust != null)
                    {
                        w.ShopName = cust.ShopName;
                        w.Skcode = cust.Skcode;
                        w.CustomerId = CustomerId;
                        w.TotalAmount = 0;
                        w.CreatedDate = indianTime;
                        w.UpdatedDate = indianTime;
                        w.Deleted = false;
                        WalletDb.Add(w);
                        this.Commit();
                        return w;
                    }

                }
                return d;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public Wallet GetWalletbyCustomeridWid(int CustomerId, int Warehouse_id)//get orders to deliver
        {
            try
            {
                var wallet = WalletDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();

                if (wallet == null)
                {
                    var CustDB = CustSupplierDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();

                    if (CustDB != null)
                    {
                        Wallet w = new Wallet();
                        var cust = Customers.Where(c => c.CustomerId == CustDB.CustomerId).SingleOrDefault();

                        if (cust != null)
                        {
                            w.ShopName = cust.ShopName;
                            w.Skcode = cust.Skcode;
                        }
                        w.CustomerId = CustomerId;
                        w.TotalAmount = 0;
                        w.CreatedDate = indianTime;
                        w.UpdatedDate = indianTime;
                        w.Deleted = false;
                        WalletDb.Add(w);
                        this.Commit();
                        return w;
                    }

                }
                return wallet;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }

        //public Wallet GetWalletbyCustomerid(int CustomerId, int compid)//get orders to deliver
        //{
        //    try
        //    {
        //        var wallet = WalletDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
        //        if (wallet == null)
        //        {
        //            Wallet w = new Wallet();

        //            var CustDB = CustSupplierDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();

        //            if (CustDB != null)
        //            {
        //                var cust = Customers.Where(c => c.CustomerId == CustDB.CustomerId).SingleOrDefault();
        //                if (cust != null)
        //                {
        //                    w.ShopName = cust.ShopName;
        //                    w.Skcode = cust.Skcode;
        //                }
        //                w.CustomerId = CustomerId;
        //                w.TotalAmount = 0;
        //                w.CreatedDate = indianTime;
        //                w.UpdatedDate = indianTime;
        //                w.Deleted = false;
        //                WalletDb.Add(w);
        //                this.SaveChanges();
        //                return w;
        //            }

        //        }
        //        return wallet;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}
        //public Wallet GetWalletbyCustomeridWid(int CustomerId, int Warehouse_id)//get orders to deliver
        //{
        //    try
        //    {
        //        var wallet = WalletDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();

        //        if (wallet == null)
        //        {
        //            var CustDB = CustSupplierDb.Where(c => c.CustomerId == CustomerId && c.Warehouseid == Warehouse_id).SingleOrDefault();

        //            if (CustDB != null)
        //            {
        //                Wallet w = new Wallet();
        //                var cust = Customers.Where(c => c.CustomerId == CustDB.CustomerId).SingleOrDefault();

        //                if (cust != null)
        //                {
        //                    w.ShopName = cust.ShopName;
        //                    w.Skcode = cust.Skcode;
        //                }
        //                w.CustomerId = CustomerId;
        //                w.TotalAmount = 0;
        //                w.CreatedDate = indianTime;
        //                w.UpdatedDate = indianTime;
        //                w.Deleted = false;
        //                WalletDb.Add(w);
        //                this.SaveChanges();
        //                return w;
        //            }

        //        }
        //        return wallet;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}
        public Wallet postWalletbyCustomeridWid(Wallet wallet, int PeopleId)
        {
            try
            {
                var walt = WalletDb.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                if (walt != null)
                {
                    CustomerWalletHistory od = new CustomerWalletHistory();
                    try
                    {
                        od.CustomerId = wallet.CustomerId;
                        //op by user
                        try
                        {
                            People People = Peoples.Where(c => c.PeopleID == PeopleId).SingleOrDefault();
                            od.PeopleId = People.PeopleID;
                            od.PeopleName = People.DisplayName;

                        }
                        catch (Exception ss) { }
                        od.WarehouseId = wallet.WarehouseId;
                        od.Through = wallet.Through;
                        od.CompanyId = wallet.CompanyId;
                        od.comment = wallet.Comment;
                        if (wallet.CreditAmount >= 0)
                        {
                            od.NewAddedWAmount = wallet.CreditAmount;
                            od.TotalWalletAmount = walt.TotalAmount + wallet.CreditAmount;
                        }
                        if (wallet.CreditAmount < 0)
                        {
                            od.NewAddedWAmount = wallet.CreditAmount;
                            od.TotalWalletAmount = walt.TotalAmount + (wallet.CreditAmount);
                        }
                        od.UpdatedDate = indianTime;
                        od.TransactionDate = indianTime;
                        od.CreatedDate = indianTime;
                        CustomerWalletHistoryDb.Add(od);
                        this.Commit();
                    }
                    catch (Exception exx)
                    {

                    }
                    walt.CustomerId = wallet.CustomerId;
                    if (wallet.CreditAmount < 0)
                    {
                        walt.TotalAmount += wallet.CreditAmount;
                        walt.UpdatedDate = indianTime;
                    }
                    if (wallet.CreditAmount >= 0)
                    {
                        walt.TotalAmount += wallet.CreditAmount;
                        walt.UpdatedDate = indianTime;
                        try
                        {
                            //Wallet Trigger :wallet amount added more than Rs.5000
                            if (wallet.CreditAmount > 5000)
                            {
                                var cust = Customers.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                                SendMailCreditWalletNotification(wallet.CreditAmount, od.PeopleName, cust.Name, cust.Skcode, indianTime, wallet.Through);
                            }
                            ForWalletNotification(wallet.CustomerId, wallet.CreditAmount);
                        }
                        catch (Exception ex) { }

                    }
                    if (wallet.DebitAmount > 0)
                    {
                        walt.TotalAmount -= wallet.DebitAmount;
                        walt.TransactionDate = indianTime;
                    }
                    //WalletDb.Attach(walt);
                    this.Entry(walt).State = EntityState.Modified;
                    this.Commit();

                }
                else
                {
                    wallet.CustomerId = wallet.CustomerId;

                    if (wallet.CreditAmount > 0)
                    {
                        wallet.TotalAmount = wallet.CreditAmount;
                        wallet.UpdatedDate = indianTime;
                        try
                        {
                            ForWalletNotification(wallet.CustomerId, wallet.CreditAmount);
                        }
                        catch (Exception ex) { }

                    }
                    wallet.CreatedDate = indianTime;
                    wallet.UpdatedDate = indianTime;
                    wallet.Deleted = false;
                    WalletDb.Add(wallet);
                    this.Commit();

                    CustomerWalletHistory od = new CustomerWalletHistory();
                    od.CustomerId = wallet.CustomerId;
                    //op by user
                    try
                    {
                        People People = Peoples.Where(c => c.PeopleID == PeopleId).SingleOrDefault();
                        od.PeopleId = People.PeopleID;
                        od.PeopleName = People.DisplayName;
                    }
                    catch (Exception ss) { }

                    //op by Cust
                    try
                    {
                        //CustWarehouse cust = CustWarehouseDB.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                        Customer cust = Customers.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                        //od.WarehouseId = cust.WarehouseId ?? 0;
                        od.WarehouseId = cust.Warehouseid ?? 0;
                        od.CompanyId = cust.CompanyId ?? 0;
                    }
                    catch (Exception cs) { }

                    od.Through = wallet.Through;
                    if (wallet.CreditAmount != 0)
                    {
                        od.NewAddedWAmount = wallet.CreditAmount;
                        od.TotalWalletAmount = walt.TotalAmount + wallet.CreditAmount;
                        //Wallet Trigger :wallet amount added more than Rs.5000
                        if (wallet.CreditAmount > 5000)
                        {
                            var cust = Customers.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                            SendMailCreditWalletNotification(wallet.CreditAmount, od.PeopleName, cust.Name, cust.Skcode, indianTime, wallet.Through);
                        }
                    }
                    od.UpdatedDate = indianTime;
                    od.TransactionDate = indianTime;
                    od.CreatedDate = indianTime;
                    CustomerWalletHistoryDb.Add(od);
                    this.Commit();
                }

                return walt;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }

        }
        #region Add Wallet Notification
        private async Task<bool> ForWalletNotification(int CustomerId, double? CreditAmount)
        {
            bool res = false;
            try
            {
                //Notification notification = new Notification();
                //notification.title = "बधाई हो ! ";
                //notification.Message = "बधाई हो ! " + CreditAmount + " पॉइंट आपके वॉलेट में ऐड हुआ है ";
                //notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
                //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
                ////AddNotification(notification);


                ////string id11 = ConfigurationManager.AppSettings["FcmApiId"];

                //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                //tRequest.Method = "post";
                //var objNotification = new
                //{
                //    to = customers.fcmId,
                //    notification = new
                //    {
                //        title = notification.title,
                //        body = notification.Message,
                //        icon = notification.Pic
                //    }
                //};

                //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
                //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
                //tRequest.ContentLength = byteArray.Length;
                //tRequest.ContentType = "application/json";
                //using (Stream dataStream = tRequest.GetRequestStream())
                //{
                //    dataStream.Write(byteArray, 0, byteArray.Length);
                //    using (WebResponse tResponse = tRequest.GetResponse())
                //    {
                //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                //        {
                //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                //            {
                //                String responseFromFirebaseServer = tReader.ReadToEnd();
                //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                //                if (response.success == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //                else if (response.failure == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //            }
                //        }
                //    }
                //}
                var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
                var data = new FCMData
                {
                    title = "बधाई हो ! ",
                    body = "बधाई हो ! " + CreditAmount + " पॉइंट आपके वॉलेट में ऐड हुआ है ",
                    image_url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",

                };
                string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                var firebaseService = new FirebaseNotificationServiceHelper(Key);
                var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
                if (result != null)
                {
                    res = true;
                }
                else
                {
                     res = false;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error 2001 :Wallet Notification not send due to" + ex.Message);
            }
            return res;
        }
        #endregion

        public ManualWallet AddManualWallet(ManualWallet mw)
        {
            try

            {
                var manwalt = ManualWallets.Where(m => m.Id == mw.Id).SingleOrDefault();
                if (manwalt == null)
                {
                    ManualWallet m = new ManualWallet();
                    m.Name = mw.Name;
                    m.CityId = mw.CityId;
                    m.Active = true;
                    m.Delete = false;
                    m.CreatedDate = indianTime;
                    m.UpdatedDate = indianTime;
                    ManualWallets.Add(m);
                    this.Commit();
                    return mw;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {

                logger.Error(ex.Message);
                return null;
            }
        }


        public Wallet postWalletbyCustomerid(Wallet wallet, int PeopleId)
        {
            try
            {
                var walt = WalletDb.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();

                if (walt != null)
                {
                    CustomerWalletHistory od = new CustomerWalletHistory();
                    od.CustomerId = wallet.CustomerId;
                    //op by user
                    try
                    {
                        People People = Peoples.Where(c => c.PeopleID == PeopleId).SingleOrDefault();
                        od.PeopleId = People.PeopleID;
                        od.PeopleName = People.DisplayName;
                    }
                    catch (Exception ss) { }
                    //op by Cust
                    try
                    {
                        //CustWarehouse cust = CustWarehouseDB.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                        Customer cust = Customers.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                        //od.WarehouseId = cust.WarehouseId ?? 0;
                        od.WarehouseId = cust.Warehouseid ?? 0;
                        od.CompanyId = cust.CompanyId ?? 0;
                    }
                    catch (Exception cs) { }
                    od.Through = wallet.Through;
                    od.comment = wallet.Comment;
                    if (wallet.CreditAmount != 0)
                    {
                        od.NewAddedWAmount = wallet.CreditAmount;
                        od.TotalWalletAmount = walt.TotalAmount + wallet.CreditAmount;
                    }
                    od.UpdatedDate = indianTime;
                    od.TransactionDate = indianTime;
                    od.CreatedDate = indianTime;
                    CustomerWalletHistoryDb.Add(od);
                    this.Commit();

                    walt.CustomerId = wallet.CustomerId;
                    if (wallet.CreditAmount != 0)
                    {
                        walt.TotalAmount += wallet.CreditAmount;
                        walt.UpdatedDate = indianTime;
                        //Wallet Trigger :wallet amount added more than Rs.5000
                        //if (wallet.CreditAmount > 5000)
                        //{
                        //    var cust = Customers.Where(c => c.CustomerId == wallet.CustomerId).SingleOrDefault();
                        //    SendMailCreditWalletNotification(wallet.CreditAmount, od.PeopleName, cust.Name, cust.Skcode, indianTime, wallet.Through);
                        //}
                        // ForWalletNotification(wallet.CustomerId, wallet.CreditAmount);
                    }
                    if (wallet.DebitAmount > 0)
                    {
                        walt.TotalAmount -= wallet.DebitAmount;
                        walt.TransactionDate = indianTime;
                    }
                    //WalletDb.Attach(walt);
                    this.Entry(walt).State = EntityState.Modified;
                    this.Commit();
                    return walt;
                }
                else
                {
                    if (wallet.CreditAmount > 0)
                    {
                        wallet.TotalAmount = wallet.CreditAmount;
                        wallet.UpdatedDate = indianTime;
                        ForWalletNotification(wallet.CustomerId, wallet.CreditAmount);
                    }
                    wallet.CreatedDate = indianTime;
                    wallet.UpdatedDate = indianTime;
                    wallet.Deleted = false;
                    WalletDb.Add(wallet);
                    this.Commit();
                    return wallet;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }

        #region SendMailCreditWalletNotification
        //SendMailCreditWalletNotification
        public static void SendMailCreditWalletNotification(double? CreditAmount, string PeopleName, string Name, string Skcode, DateTime indianTime, string Through)
        {
            try
            {

                string masteremail = ConfigurationManager.AppSettings["MasterEmail"];
                string masterpassword = ConfigurationManager.AppSettings["MasterPassword"];

                string body = "<div style='background: #FAFAFA; color: #333333; padding-left: 30px;font-family: arial,sans-serif; font-size: 14px;'>";
                body += "<img style='padding-top: 10px;' src='http://shopkirana.com/wp-content/uploads/2015/07/ShopKirana-Logo11.png'><br/>";
                body += "<h3 style='background-color: rgb(241, 89, 34);'>Alert! added more than 5000 point</h3>";
                body += "Hello,";
                body += "<p><strong>";
                body += CreditAmount + "</strong>" + " Wallet Point added. Through(Reason -> )" + Through + "</p>";
                body += "<p>Customer Name : <strong>" + Name + " </strong> " + Skcode + "<br/>from the user <strong>" + PeopleName + " </strong> Date <strong>" + indianTime + "</strong></p>";
                body += "Thanks,";
                body += "<br />";
                body += "<b>IT Team</b>";
                body += "</div>";

                var Subj = "Alert! added more than 5000 point to" + Name + "  " + Skcode;
                var msg = new MailMessage("donotreply_backend@shopkirana.com", "donotreply_backend@shopkirana.com", Subj, body);
                //msg.To.Add("deepak@shopkirana.com");
                msg.To.Add("manasi@shopkirana.com");
                msg.IsBodyHtml = true;
                var smtpClient = new SmtpClient("smtp.gmail.com", 587); //if your from email address is "from@hotmail.com" then host should be "smtp.hotmail.com"
                smtpClient.UseDefaultCredentials = true;
                smtpClient.Credentials = new NetworkCredential(masteremail, masterpassword);
                smtpClient.EnableSsl = true;
                smtpClient.Send(msg);

            }
            catch (Exception ss) { }


        }
        #endregion
        public RewardPoint GetRewardbyCustomerid(int CustomerId)//get orders to deliver
        {
            try
            {
                var point = RewardPointDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
                var cust = Customers.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
                if (point == null)
                {
                    RewardPoint w = new RewardPoint();



                    if (cust != null)
                    {
                        w.ShopName = cust.ShopName;
                        w.Skcode = cust.Skcode;

                        w.CustomerId = CustomerId;
                        w.TotalPoint = 0;
                        w.EarningPoint = 0;
                        w.MilestonePoint = 0;
                        w.UsedPoint = 0;
                        w.CreatedDate = indianTime;
                        w.UpdatedDate = indianTime;
                        w.Deleted = false;
                        RewardPointDb.Add(w);
                        this.Commit();
                        return w;
                    }


                }
                return point;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        //public RewardPoint GetRewardbyCustomerid(int CustomerId, int compid)//get orders to deliver
        //{
        //    try
        //    {
        //        var point = RewardPointDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
        //        if (point == null)
        //        {
        //            RewardPoint w = new RewardPoint();
        //            var CustDB = CustSupplierDb.Where(c => c.CustomerId == CustomerId).SingleOrDefault();
        //            if (CustDB != null)
        //            {

        //                var cust = Customers.Where(c => c.CustomerId == CustDB.CustomerId).SingleOrDefault();
        //                if (cust != null)
        //                {
        //                    w.ShopName = cust.ShopName;
        //                    w.Skcode = cust.Skcode;
        //                }
        //                w.CustomerId = CustomerId;
        //                w.TotalPoint = 0;
        //                w.EarningPoint = 0;
        //                w.MilestonePoint = 0;
        //                w.UsedPoint = 0;
        //                w.CreatedDate = indianTime;
        //                w.UpdatedDate = indianTime;
        //                w.Deleted = false;
        //                RewardPointDb.Add(w);
        //                this.SaveChanges();
        //                return w;
        //            }


        //        }
        //        return point;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}
        //public RewardPoint GetRewardbyCustomeridWid(int CustomerId, int Warehouse_id)//get orders to deliver
        //{
        //    try
        //    {
        //        var point = RewardPointDb.Where(c => c.CustomerId == CustomerId && c.Warehouseid == Warehouse_id).SingleOrDefault();
        //        if (point == null)
        //        {
        //            RewardPoint w = new RewardPoint();

        //            var CustDB = CustSupplierDb.Where(c => c.CustomerId == CustomerId && c.Warehouseid == Warehouse_id).SingleOrDefault();

        //            if (CustDB != null)
        //            {
        //                var cust = Customers.Where(c => c.CustomerId == CustDB.CustomerId).SingleOrDefault();
        //                if (cust != null)
        //                {
        //                    w.ShopName = cust.ShopName;
        //                    w.Skcode = cust.Skcode;
        //                }
        //                w.CustomerId = CustomerId;
        //                w.TotalPoint = 0;
        //                w.EarningPoint = 0;
        //                w.MilestonePoint = 0;
        //                w.UsedPoint = 0;
        //                w.CreatedDate = indianTime;
        //                w.UpdatedDate = indianTime;
        //                w.Deleted = false;
        //                RewardPointDb.Add(w);
        //                this.SaveChanges();
        //                return w;
        //            }

        //        }
        //        return point;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}
        #endregion

        #region for DBIssueWailtV2 for backend Assignment create
        public bool DBIssueWailtV2(List<OrderDispatchedMaster> obj, People people)
        {

            foreach (var od in obj)
            {
                var OrderDMaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == od.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
                OrderDMaster.Status = "Issued";
                OrderDMaster.ReDispatchedStatus = "Issued";
                OrderDMaster.UpdatedDate = indianTime;
                OrderDMaster.DeliveryIssuanceIdOrderDeliveryMaster = obj[0].DeliveryIssuanceId;
                this.Entry(OrderDMaster).State = EntityState.Modified;
                #region Code For OrderDeliveryMaster

                var payments = PaymentResponseRetailerAppDb.Where(x => x.OrderId == OrderDMaster.OrderId && x.status == "success" && x.PaymentFrom.ToLower() == "epaylater");
                double? epaylateramt = payments.Any() ? payments.Sum(x => x.amount) : 0;

                OrderDeliveryMaster oDm = new OrderDeliveryMaster();
                oDm.OrderId = OrderDMaster.OrderId;
                oDm.CityId = OrderDMaster.CityId;
                oDm.CompanyId = OrderDMaster.CompanyId;
                oDm.WarehouseId = OrderDMaster.WarehouseId;
                oDm.WarehouseName = OrderDMaster.WarehouseName;
                //oDm.SalesPersonId = OrderDMaster.SalesPersonId;
                //oDm.SalesPerson = OrderDMaster.SalesPerson;
                //oDm.SalesMobile = OrderDMaster.SalesMobile;
                oDm.DboyMobileNo = OrderDMaster.DboyMobileNo;
                oDm.DboyName = OrderDMaster.DboyName;
                oDm.CustomerId = OrderDMaster.CustomerId;
                oDm.CustomerName = OrderDMaster.CustomerName;
                oDm.Customerphonenum = OrderDMaster.Customerphonenum;
                oDm.ShopName = OrderDMaster.ShopName;
                oDm.Skcode = OrderDMaster.Skcode;
                oDm.Status = "Issued"; //OrderDMaster.Status;
                oDm.ShippingAddress = OrderDMaster.ShippingAddress;
                oDm.BillingAddress = OrderDMaster.BillingAddress;
                oDm.CanceledStatus = OrderDMaster.CanceledStatus;
                oDm.invoice_no = OrderDMaster.invoice_no;
                oDm.OnlineServiceTax = OrderDMaster.OnlineServiceTax;
                oDm.TotalAmount = OrderDMaster.TotalAmount;
                oDm.GrossAmount = OrderDMaster.GrossAmount;
                oDm.TaxAmount = OrderDMaster.TaxAmount;
                oDm.SGSTTaxAmmount = OrderDMaster.SGSTTaxAmmount;
                oDm.CGSTTaxAmmount = OrderDMaster.CGSTTaxAmmount;
                oDm.ReDispatchedStatus = OrderDMaster.ReDispatchedStatus;
                oDm.Trupay = OrderDMaster.Trupay;
                oDm.comments = OrderDMaster.comments;
                oDm.deliveryCharge = OrderDMaster.deliveryCharge;
                oDm.DeliveryIssuanceId = obj[0].DeliveryIssuanceId;
                oDm.DiscountAmount = OrderDMaster.DiscountAmount;
                oDm.CheckNo = OrderDMaster.CheckNo;
                oDm.CheckAmount = OrderDMaster.CheckAmount;
                oDm.ElectronicPaymentNo = OrderDMaster.ElectronicPaymentNo;
                oDm.ElectronicAmount = OrderDMaster.ElectronicAmount;
                oDm.EpayLaterAmount = epaylateramt;
                oDm.CashAmount = OrderDMaster.CashAmount;
                oDm.OrderedDate = OrderDMaster.OrderedDate;
                oDm.WalletAmount = OrderDMaster.WalletAmount;
                oDm.RewardPoint = OrderDMaster.RewardPoint;
                oDm.Tin_No = OrderDMaster.Tin_No;
                oDm.ReDispatchCount = OrderDMaster.ReDispatchCount;
                oDm.UpdatedDate = indianTime;
                oDm.CreatedDate = indianTime;
                this.OrderDeliveryMasterDB.Add(oDm);
                #endregion
                var OrderMaster = DbOrderMaster.Where(x => x.OrderId == od.OrderId).SingleOrDefault();
                OrderMaster.Status = "Issued";
                OrderMaster.UpdatedDate = indianTime;
                this.Entry(OrderMaster).State = EntityState.Modified;
                this.Commit();

                #region Order Master History
                OrderMasterHistories hh1 = new OrderMasterHistories();
                if (OrderDMaster != null)
                {
                    hh1.orderid = OrderDMaster.OrderId;
                    hh1.Status = OrderDMaster.Status;
                    hh1.Reasoncancel = null;

                    hh1.Warehousename = OrderDMaster.WarehouseName;
                    if (people.DisplayName == null || people.DisplayName == "")
                    {
                        hh1.username = people.PeopleFirstName;
                        hh1.Description = " (Issued AssignmentId : " + obj[0].DeliveryIssuanceId + ") By" + people.PeopleFirstName;
                    }
                    else
                    {
                        hh1.username = people.DisplayName;
                        hh1.Description = " (Issued AssignmentId : " + obj[0].DeliveryIssuanceId + ") By" + people.DisplayName;
                    }
                    hh1.DeliveryIssuanceId = obj[0].DeliveryIssuanceId;
                    hh1.userid = obj[0].userid;
                    hh1.CreatedDate = indianTime;
                    OrderMasterHistoriesDB.Add(hh1);
                }
                #endregion

                //var OrderDispatchedDetails = OrderDispatchedDetailss.Where(x => x.OrderId == od.OrderId).ToList();
                //foreach (var odsd in OrderDispatchedDetails)
                //{
                //    odsd.Status = "Issued";
                //    odsd.UpdatedDate = indianTime;
                //    this.Entry(odsd).State = EntityState.Modified;
                //    this.Commit();
                //}
                var DbOrderDetail = DbOrderDetails.Where(x => x.OrderId == od.OrderId).ToList();
                foreach (var ods in DbOrderDetail)
                {
                    ods.Status = "Issued";
                    ods.UpdatedDate = indianTime;
                    this.Entry(ods).State = EntityState.Modified;
                    this.Commit();
                }

            }

            return true;
        }
        #endregion


        #region issuance
        public string deliveryIssuance(DeliveryIssuance obj)
        {
            try
            {

                var DBoyorders = DeliveryIssuanceDb.Where(x => x.DeliveryIssuanceId == obj.DeliveryIssuanceId && x.IsActive == true).SingleOrDefault();
                if (DBoyorders != null)
                {
                    DBoyorders.Acceptance = obj.Acceptance;
                    if (obj.Acceptance)
                    {
                        DBoyorders.Status = "Accepted";
                    }
                    else
                    {
                        DBoyorders.Status = "Rejected";
                    }
                    DBoyorders.RejectReason = obj.RejectReason;
                    DBoyorders.IsActive = false;
                    DBoyorders.UpdatedDate = indianTime;
                    //DeliveryIssuanceDb.Attach(DBoyorders);
                    this.Entry(DBoyorders).State = EntityState.Modified;
                    this.Commit();
                }
                if (obj.Acceptance)
                {
                    string[] ids = obj.OrderdispatchIds.Split(',');
                    foreach (var od in ids)
                    {
                        var oid = Convert.ToInt32(od);
                        var orderdipatchmaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == oid).Include("orderDetails").SingleOrDefault();
                        orderdipatchmaster.Status = "Shipped";
                        orderdipatchmaster.ReDispatchedStatus = "Shipped";
                        orderdipatchmaster.UpdatedDate = indianTime;
                        //OrderDispatchedMasters.Attach(orderdipatchmaster);
                        this.Entry(orderdipatchmaster).State = EntityState.Modified;
                        this.Commit();
                        #region call to whatsapp Bot 
                        try
                        {


                            Customer custdata = Customers.Where(x => x.CustomerId == orderdipatchmaster.CustomerId).FirstOrDefault();

                            if (custdata != null)
                            {
                                CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
                                cust.Name = custdata.Name;//  customer Name
                                cust.Mobile = custdata.Mobile;// Customer Mobile No
                                cust.TemppleteId = 29;//send for template
                                cust.OrderedDate = orderdipatchmaster.OrderedDate;//send for Date
                                cust.OrderId = orderdipatchmaster.OrderId;//send for Order Id
                                cust.DboyName = orderdipatchmaster.DboyName;// send for delivery boy name
                                cust.DboyNumber = orderdipatchmaster.DboyMobileNo;// send for delivery boy number
                                Customersms(cust);
                            }
                        }
                        catch (Exception ex) { }
                        #endregion
                        #region Order Master History

                        var ship11 = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == oid).Include("orderDetails").SingleOrDefault();

                        try
                        {
                            OrderMasterHistories h1 = new OrderMasterHistories();
                            if (ship11 != null)
                            {
                                h1.orderid = ship11.OrderId;
                                h1.Status = ship11.Status;
                                h1.Reasoncancel = null;
                                h1.Warehousename = ship11.WarehouseName;
                                h1.username = DBoyorders.DisplayName;
                                h1.userid = DBoyorders.PeopleID;
                                h1.CreatedDate = DateTime.Now;
                                OrderMasterHistoriesDB.Add(h1);
                                int id = this.Commit();
                            }

                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                        }
                        #endregion


                    }
                    string[] odds = obj.OrderIds.Split(',');
                    foreach (var od in odds)
                    {
                        int oid = Convert.ToInt32(od);
                        var orderMaster = DbOrderMaster.Where(x => x.OrderId == oid).SingleOrDefault();
                        orderMaster.Status = "Shipped";
                        orderMaster.UpdatedDate = indianTime;
                        //DbOrderMaster.Attach(orderMaster);
                        this.Entry(orderMaster).State = EntityState.Modified;
                        this.Commit();
                    }
                }
                else
                {
                    string[] ids = obj.OrderdispatchIds.Split(',');
                    foreach (var od in ids)
                    {
                        var oid = Convert.ToInt32(od);
                        var orderdipatchmaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == oid).Include("orderDetails").SingleOrDefault();
                        orderdipatchmaster.Status = "Ready to Dispatch";
                        orderdipatchmaster.ReDispatchedStatus = "Ready to Dispatch";
                        orderdipatchmaster.ReDispatchCount += 1;
                        orderdipatchmaster.UpdatedDate = indianTime;
                        //OrderDispatchedMasters.Attach(orderdipatchmaster);
                        this.Entry(orderdipatchmaster).State = EntityState.Modified;
                        this.Commit();

                        var orderMaster = DbOrderMaster.Where(x => x.OrderId == orderdipatchmaster.OrderId).Include("orderDetails").SingleOrDefault();
                        orderMaster.Status = "Ready to Dispatch";
                        orderMaster.ReDispatchCount += 1;
                        orderMaster.UpdatedDate = indianTime;
                        //DbOrderMaster.Attach(orderMaster);
                        this.Entry(orderMaster).State = EntityState.Modified;
                        this.Commit();
                    }
                }
                return "true";
            }
            catch (Exception ex)
            {
                return ex.Message;
            }

        }

        public string DBIssueWailt(List<OrderDispatchedMaster> obj)
        {
            try
            {
                foreach (var od in obj)
                {
                    var orderdipatchmaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == od.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
                    orderdipatchmaster.Status = "Issued";
                    orderdipatchmaster.ReDispatchedStatus = "Issued";
                    orderdipatchmaster.UpdatedDate = indianTime;
                    orderdipatchmaster.DeliveryIssuanceIdOrderDeliveryMaster = obj[0].DeliveryIssuanceId;
                    //OrderDispatchedMasters.Attach(orderdipatchmaster);
                    this.Entry(orderdipatchmaster).State = EntityState.Modified;
                    this.Commit();

                    #region Code For OrderDeliveryMaster
                    try
                    {
                        var OrderDMaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == od.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

                        if (OrderDMaster != null)
                        {
                            OrderDeliveryMaster oDm = new OrderDeliveryMaster();
                            oDm.OrderId = OrderDMaster.OrderId;
                            oDm.CityId = OrderDMaster.CityId;
                            oDm.CompanyId = OrderDMaster.CompanyId;
                            oDm.WarehouseId = OrderDMaster.WarehouseId;
                            oDm.WarehouseName = OrderDMaster.WarehouseName;
                            //oDm.SalesPersonId = OrderDMaster.SalesPersonId;
                            //oDm.SalesPerson = OrderDMaster.SalesPerson;
                            //oDm.SalesMobile = OrderDMaster.SalesMobile;
                            oDm.DboyMobileNo = OrderDMaster.DboyMobileNo;
                            oDm.DboyName = OrderDMaster.DboyName;
                            oDm.CustomerId = OrderDMaster.CustomerId;
                            oDm.CustomerName = OrderDMaster.CustomerName;
                            oDm.Customerphonenum = OrderDMaster.Customerphonenum;
                            oDm.ShopName = OrderDMaster.ShopName;
                            oDm.Skcode = OrderDMaster.Skcode;
                            oDm.Status = OrderDMaster.Status;
                            oDm.ShippingAddress = OrderDMaster.ShippingAddress;
                            oDm.BillingAddress = OrderDMaster.BillingAddress;
                            oDm.CanceledStatus = OrderDMaster.CanceledStatus;
                            oDm.invoice_no = OrderDMaster.invoice_no;
                            oDm.OnlineServiceTax = OrderDMaster.OnlineServiceTax;
                            oDm.TotalAmount = OrderDMaster.TotalAmount;
                            oDm.GrossAmount = OrderDMaster.GrossAmount;
                            oDm.TaxAmount = OrderDMaster.TaxAmount;
                            oDm.SGSTTaxAmmount = OrderDMaster.SGSTTaxAmmount;
                            oDm.CGSTTaxAmmount = OrderDMaster.CGSTTaxAmmount;
                            oDm.ReDispatchedStatus = OrderDMaster.ReDispatchedStatus;
                            oDm.Trupay = OrderDMaster.Trupay;
                            oDm.comments = OrderDMaster.comments;
                            oDm.deliveryCharge = OrderDMaster.deliveryCharge;
                            oDm.DeliveryIssuanceId = obj[0].DeliveryIssuanceId;
                            oDm.DiscountAmount = OrderDMaster.DiscountAmount;
                            oDm.CheckNo = OrderDMaster.CheckNo;
                            oDm.CheckAmount = OrderDMaster.CheckAmount;
                            oDm.ElectronicPaymentNo = OrderDMaster.ElectronicPaymentNo;
                            oDm.ElectronicAmount = OrderDMaster.ElectronicAmount;
                            oDm.CashAmount = OrderDMaster.CashAmount;
                            oDm.OrderedDate = OrderDMaster.OrderedDate;
                            oDm.WalletAmount = OrderDMaster.WalletAmount;
                            oDm.RewardPoint = OrderDMaster.RewardPoint;
                            oDm.Tin_No = OrderDMaster.Tin_No;
                            oDm.ReDispatchCount = OrderDMaster.ReDispatchCount;
                            oDm.UpdatedDate = indianTime;
                            oDm.CreatedDate = indianTime;
                            this.OrderDeliveryMasterDB.Add(oDm);
                            this.Commit();

                        }
                        else
                        {

                        }

                    }
                    catch (Exception ex)
                    {


                    }
                    #endregion

                    if (orderdipatchmaster != null)
                    {
                        var OrderDispatchedDetails = OrderDispatchedDetailss.Where(x => x.OrderId == od.OrderId).ToList();

                        //foreach (var odsd in OrderDispatchedDetails)
                        //{
                        //    odsd.Status = "Issued";
                        //    odsd.UpdatedDate = indianTime;
                        //    //OrderDispatchedDetailss.Attach(odsd);
                        //    this.Entry(odsd).State = EntityState.Modified;
                        //    this.Commit();
                        //}
                        #region Order Master History
                        try
                        {
                            int i = obj[0].userid;
                            var UserName = Peoples.Where(x => x.PeopleID == i).Select(a => a.DisplayName).SingleOrDefault();

                            OrderMasterHistories hh1 = new OrderMasterHistories();
                            if (OrderDispatchedDetails != null)
                            {
                                hh1.orderid = orderdipatchmaster.OrderId;
                                hh1.Status = orderdipatchmaster.Status;
                                hh1.Reasoncancel = null;
                                hh1.Warehousename = OrderDispatchedDetails[0].WarehouseName;
                                hh1.username = UserName;
                                hh1.userid = obj[0].userid;
                                hh1.CreatedDate = DateTime.Now;
                                OrderMasterHistoriesDB.Add(hh1);
                                int id = this.Commit();
                            }

                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                        }
                        #endregion
                    }

                }
                foreach (var od in obj)
                {
                    var OrderMaster = DbOrderMaster.Where(x => x.OrderId == od.OrderId).SingleOrDefault();
                    OrderMaster.Status = "Issued";
                    OrderMaster.UpdatedDate = indianTime;
                    //DbOrderMaster.Attach(OrderMaster);
                    this.Entry(OrderMaster).State = EntityState.Modified;
                    this.Commit();

                    if (OrderMaster != null)
                    {
                        var DbOrderDetail = DbOrderDetails.Where(x => x.OrderId == od.OrderId).ToList();

                        foreach (var ods in DbOrderDetail)
                        {
                            ods.Status = "Issued";
                            ods.UpdatedDate = indianTime;
                            //DbOrderDetails.Attach(ods);
                            this.Entry(ods).State = EntityState.Modified;
                            this.Commit();
                        }

                    }
                }


                return "true";
            }
            catch (Exception ex)
            {
                return ex.Message;
            }

        }

        #endregion


        #region  Delivery Boys
        public List<People> AllDBoy(int CompanyId)
        {
            string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email and p.Deleted=0 inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.CompanyId=" + CompanyId + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
            List<int> PeopleId = this.Database.SqlQuery<int>(query).ToList();
            return Peoples.Where(p => PeopleId.Contains(p.PeopleID)).ToList().OrderBy(x => x.DisplayName).ToList();
        }
        public List<People> AllDBoyWid(int CompanyId, int Warehouse_id)
        {
            string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email and p.Deleted=0  inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.CompanyId=" + CompanyId + " and p.WarehouseId=" + Warehouse_id + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
            List<int> PeopleId = this.Database.SqlQuery<int>(query).ToList();
            return Peoples.Where(p => PeopleId.Contains(p.PeopleID)).ToList().OrderBy(x => x.DisplayName).ToList();
        }
        public string InsertCurrencyData(CurrencyData cc)
        {
            try
            {

                CurrencyData cd = CurrencyDataDB.SingleOrDefault();  // Currency data push
                if (cd != null)
                {
                    cd.twoTHRupee = cc.twoTHRupee;
                    cd.twoTHrscount = cc.twoTHrscount;
                    cd.fiveHRupee = cc.fiveHRupee;
                    cd.fivehrscount = cc.fivehrscount;
                    cd.twoHunRupee = cc.twoHunRupee;
                    cd.twohunrscount = cc.twohunrscount;
                    cd.HunRupee = cc.HunRupee;
                    cd.hunrscount = cc.hunrscount;
                    cd.fiftyRupee = cc.fiftyRupee;
                    cd.fiftyrscount = cc.fiftyrscount;
                    cd.TwentyRupee = cc.TwentyRupee;
                    cd.Twentyrscount = cc.Twentyrscount;
                    cd.TenNote = cc.TenNote;
                    cd.TenNoteCount = cc.TenNoteCount;
                    cd.TenRupee = cc.TenRupee;
                    cd.tenrscount = cc.tenrscount;
                    cd.FiveNote = cc.FiveNote;
                    cd.FiveNoteCount = cc.FiveNoteCount;
                    cd.FiveRupee = cc.FiveRupee;
                    cd.fiverscount = cc.fiverscount;
                    cd.TwoRupee = cc.TwoRupee;
                    cd.tworscount = cc.tworscount;
                    cd.OneRupee = cc.OneRupee;
                    cd.onerscount = cc.onerscount;
                    cd.CreatedDate = DateTime.Now;
                    cd.UpdatedDate = DateTime.Now;
                    cd.Deleted = false;
                    //CurrencyDataDB.Attach(cd);
                    this.Entry(cd).State = EntityState.Modified;
                    this.Commit();
                }
                else
                {
                    CurrencyData cy = new CurrencyData();
                    cy.twoTHRupee = cc.twoTHRupee;
                    cy.twoTHrscount = cc.twoTHrscount;
                    cy.fiveHRupee = cc.fiveHRupee;
                    cy.fivehrscount = cc.fivehrscount;
                    cy.twoHunRupee = cc.twoHunRupee;
                    cy.twohunrscount = cc.twohunrscount;
                    cy.HunRupee = cc.HunRupee;
                    cy.hunrscount = cc.hunrscount;
                    cy.fiftyRupee = cc.fiftyRupee;
                    cy.fiftyrscount = cc.fiftyrscount;
                    cy.TwentyRupee = cc.TwentyRupee;
                    cy.Twentyrscount = cc.Twentyrscount;
                    cy.TenNote = cc.TenNote;
                    cy.TenNoteCount = cc.TenNoteCount;
                    cy.TenRupee = cc.TenRupee;
                    cy.tenrscount = cc.tenrscount;
                    cy.FiveNote = cc.FiveNote;
                    cy.FiveNoteCount = cc.FiveNoteCount;
                    cy.FiveRupee = cc.FiveRupee;
                    cy.fiverscount = cc.fiverscount;
                    cy.TwoRupee = cc.TwoRupee;
                    cy.tworscount = cc.tworscount;
                    cy.OneRupee = cc.OneRupee;
                    cy.onerscount = cc.onerscount;
                    cy.CreatedDate = DateTime.Now;
                    cy.UpdatedDate = DateTime.Now;
                    cy.TotalAmount = 0.0;
                    cy.Deleted = false;
                    CurrencyDataDB.Add(cy);
                    this.Commit();
                }

                BankDisposable BD = BankDisposableDB.SingleOrDefault(); // Bank disposable data push
                if (cd != null)
                {
                    BD.twoTHRupee = cc.twoTHRupee;
                    BD.twoTHrscount = cc.twoTHrscount;
                    BD.fiveHRupee = cc.fiveHRupee;
                    BD.fivehrscount = cc.fivehrscount;
                    BD.twoHunRupee = cc.twoHunRupee;
                    BD.twohunrscount = cc.twohunrscount;
                    BD.HunRupee = cc.HunRupee;
                    BD.hunrscount = cc.hunrscount;
                    BD.fiftyRupee = cc.fiftyRupee;
                    BD.fiftyrscount = cc.fiftyrscount;
                    BD.TwentyRupee = cc.TwentyRupee;
                    BD.Twentyrscount = cc.Twentyrscount;
                    BD.TenNote = cc.TenNote;
                    BD.TenNoteCount = cc.TenNoteCount;
                    BD.TenRupee = cc.TenRupee;
                    BD.tenrscount = cc.tenrscount;
                    BD.FiveNote = cc.FiveNote;
                    BD.FiveNoteCount = cc.FiveNoteCount;
                    BD.FiveRupee = cc.FiveRupee;
                    BD.fiverscount = cc.fiverscount;
                    BD.TwoRupee = cc.TwoRupee;
                    BD.tworscount = cc.tworscount;
                    BD.OneRupee = cc.OneRupee;
                    BD.onerscount = cc.onerscount;
                    BD.CreatedDate = DateTime.Now;
                    BD.UpdatedDate = DateTime.Now;
                    BD.Deleted = false;
                    //BankDisposableDB.Attach(BD);
                    this.Entry(BD).State = EntityState.Modified;
                    this.Commit();
                }
                else
                {
                    BankDisposable BDN = new BankDisposable();
                    BDN.twoTHRupee = cc.twoTHRupee;
                    BDN.twoTHrscount = cc.twoTHrscount;
                    BDN.fiveHRupee = cc.fiveHRupee;
                    BDN.fivehrscount = cc.fivehrscount;
                    BDN.twoHunRupee = cc.twoHunRupee;
                    BDN.twohunrscount = cc.twohunrscount;
                    BDN.HunRupee = cc.HunRupee;
                    BDN.hunrscount = cc.hunrscount;
                    BDN.fiftyRupee = cc.fiftyRupee;
                    BDN.fiftyrscount = cc.fiftyrscount;
                    BDN.TwentyRupee = cc.TwentyRupee;
                    BDN.Twentyrscount = cc.Twentyrscount;
                    BDN.TenNote = cc.TenNote;
                    BDN.TenNoteCount = cc.TenNoteCount;
                    BDN.TenRupee = cc.TenRupee;
                    BDN.tenrscount = cc.tenrscount;
                    BDN.FiveNote = cc.FiveNote;
                    BDN.FiveNoteCount = cc.FiveNoteCount;
                    BDN.FiveRupee = cc.FiveRupee;
                    BDN.fiverscount = cc.fiverscount;
                    BDN.TwoRupee = cc.TwoRupee;
                    BDN.tworscount = cc.tworscount;
                    BDN.OneRupee = cc.OneRupee;
                    BDN.onerscount = cc.onerscount;
                    BDN.CreatedDate = DateTime.Now;
                    BDN.UpdatedDate = DateTime.Now;
                    BDN.TotalAmount = 0.0;
                    BDN.Deleted = false;
                    BankDisposableDB.Add(BDN);
                    this.Commit();
                }
                return "Success";
            }
            catch (Exception ee)
            {
                return ee.Message;
            }
        }
        public People AddDboys(People obj)
        {
            People objCity = new People();
            City citys = Cities.Where(x => x.Cityid == obj.Cityid && x.Deleted == false).FirstOrDefault();
            Warehouse w = Warehouses.Where(x => x.WarehouseId == obj.WarehouseId && x.CompanyId == obj.CompanyId).SingleOrDefault();
            Vehicle vh = VehicleDb.Where(x => x.VehicleId == obj.VehicleId && x.CompanyId == obj.CompanyId).SingleOrDefault();
            List<People> v = new List<People>();

            using (var context = new AuthContext())
            {
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + obj.Mobile + "' and p.companyid=" + obj.CompanyId + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                v = context.Database.SqlQuery<People>(query).ToList();
                //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
            }

            if (v.Count == 0)
            {
                if (citys != null)
                {
                    obj.Cityid = citys.Cityid;
                    obj.city = citys.CityName;
                    obj.state = citys.StateName;
                }
                if (w != null)
                {
                    obj.WarehouseId = w.WarehouseId;
                }
                if (vh != null)
                {
                    obj.VehicleId = vh.VehicleId;
                    obj.VehicleName = vh.VehicleName;
                    obj.VehicleNumber = vh.VehicleNumber;
                    obj.VehicleCapacity = vh.Capacity;
                }
                obj.DisplayName = obj.PeopleFirstName + " " + obj.PeopleLastName;
                obj.Department = "Delivery Boy";
                obj.CreatedDate = indianTime;
                obj.UpdatedDate = indianTime;
                obj.AgentCode = obj.AgentCode;
                Peoples.Add(obj);
                int id = this.Commit();
                // add History by raj
                // AddPeopleHistory(obj);
                return obj;
            }
            else
            {
                return null;
            }


        }
        public People PutDboys(People obj)
        {

            City citys = Cities.Where(x => x.Cityid == obj.Cityid && x.Deleted == false).FirstOrDefault();
            Warehouse w = Warehouses.Where(x => x.WarehouseId == obj.WarehouseId && x.CompanyId == obj.CompanyId).SingleOrDefault();
            Vehicle vh = VehicleDb.Where(x => x.VehicleId == obj.VehicleId && x.CompanyId == obj.CompanyId).SingleOrDefault();

            People v = new People();

            using (var context = new AuthContext())
            {
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.PeopleID='" + obj.PeopleID + "' and p.companyid=" + obj.CompanyId + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                v = context.Database.SqlQuery<People>(query).FirstOrDefault();

            }


            //People v = Peoples.Where(x => x.PeopleID == obj.PeopleID && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).SingleOrDefault();
            List<People> vc = new List<People>();

            using (var context = new AuthContext())
            {
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + obj.Mobile + "' and p.companyid=" + obj.CompanyId + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                vc = context.Database.SqlQuery<People>(query).ToList();

            }

            //	List<People> vc = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
            if (vc.Count == 1 && vc[0].PeopleID != obj.PeopleID) return null;
            if (v != null)
            {
                if (citys != null)
                {
                    v.city = citys.CityName;
                    v.state = citys.StateName;
                    v.Cityid = citys.Cityid;
                    v.Stateid = citys.Stateid;
                }
                v.UpdatedDate = indianTime;
                v.Mobile = obj.Mobile;
                v.DisplayName = obj.PeopleFirstName + " " + obj.PeopleLastName;
                v.PeopleFirstName = obj.PeopleFirstName;
                v.PeopleLastName = obj.PeopleLastName;
                v.Department = obj.Department;
                v.AgentCode = obj.AgentCode;
                v.Salesexecutivetype = obj.Salesexecutivetype;
                v.city = citys.CityName;
                v.state = citys.StateName;
                v.Active = obj.Active;
                v.Department = "Delivery Boy";

                if (w != null)
                {
                    v.WarehouseId = w.WarehouseId;
                }
                if (vh != null)
                {
                    v.VehicleId = vh.VehicleId;
                    v.VehicleName = vh.VehicleName;
                    v.VehicleNumber = vh.VehicleNumber;
                    v.VehicleCapacity = vh.Capacity;
                }

                //Peoples.Attach(v);
                this.Entry(v).State = EntityState.Modified;
                this.Commit();
                // add History by raj
                //AddPeopleHistory(obj);
                return v;
            }
            else
            {
                return obj;
            }

        }
        public bool DeleteDboys(int id, int CompanyId)
        {
            try
            {
                People citys = Peoples.Where(x => x.PeopleID == id && x.CompanyId == CompanyId).FirstOrDefault();
                citys.Active = false;
                citys.Deleted = true;
                //Peoples.Attach(citys);
                this.Entry(citys).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion

        #region  Vehicles
        public List<Vehicle> AllVehicles(int compid)
        {
            return VehicleDb.Where(p => p.isDeleted == false && p.CompanyId == compid).ToList();
        }

        public List<Vehicle> AllVehiclesWid(int compid, int Warehouse_id)
        {
            return VehicleDb.Where(p => p.isDeleted == false && p.CompanyId == compid && p.WarehouseId == Warehouse_id).ToList();
        }


        public Vehicle AddVehicle(Vehicle city)
        {
            var vs = VehicleDb.Where(c => c.VehicleNumber == city.VehicleNumber && c.CompanyId == city.CompanyId).SingleOrDefault();
            var PeopleName = Peoples.Where(f => f.PeopleID == city.OwnerId).Select(x => x.DisplayName).FirstOrDefault();
            Vehicle objCity = new Vehicle();

            if (vs == null)
            {
                city.CreatedDate = indianTime;
                city.UpdatedDate = indianTime;
                city.OwnerName = PeopleName;
                if (city.Cityid > 0)
                {
                    City ct = Cities.Where(x => x.Cityid == city.Cityid).SingleOrDefault();
                    if (ct != null)
                    {
                        city.City = ct.CityName;
                    }
                }
                if (city.WarehouseId > 0)
                {
                    Warehouse w = Warehouses.Where(x => x.WarehouseId == city.WarehouseId && x.CompanyId == city.CompanyId).SingleOrDefault();
                    if (w != null)
                    {
                        city.WarehouseName = w.WarehouseName;
                    }
                }

                VehicleDb.Add(city);
                int id = this.Commit();
                return city;
            }
            else
            {

                return objCity;
            }



        }
        public Vehicle PutVehicle(Vehicle obj)
        {

            City citys = Cities.Where(x => x.Cityid == obj.Cityid && x.Deleted == false).FirstOrDefault();
            Warehouse w = Warehouses.Where(x => x.WarehouseId == obj.WarehouseId && x.CompanyId == obj.CompanyId).SingleOrDefault();
            Vehicle v = VehicleDb.Where(x => x.VehicleId == obj.VehicleId && x.CompanyId == obj.CompanyId).SingleOrDefault();
            var PeopleName = Peoples.Where(f => f.PeopleID == obj.OwnerId).Select(x => x.DisplayName).FirstOrDefault();
            if (v != null)
            {
                v.UpdatedDate = indianTime;
                v.VehicleName = obj.VehicleName;
                v.VehicleNumber = obj.VehicleNumber;
                v.OwnerAddress = obj.OwnerAddress;
                v.OwnerName = obj.OwnerName;
                v.isActive = obj.isActive;
                v.Stateid = obj.Stateid;
                v.OwnerName = PeopleName;
                v.OwnerId = obj.OwnerId;
                if (citys != null)
                {
                    v.Cityid = citys.Cityid;
                    v.City = citys.CityName;
                }
                if (w != null)
                {
                    v.WarehouseId = w.WarehouseId;
                    v.WarehouseName = w.WarehouseName;
                }

                //VehicleDb.Attach(v);
                this.Entry(v).State = EntityState.Modified;
                this.Commit();
                return v;
            }
            else
            {
                return obj;
            }

        }
        public bool DeleteVehicle(int id, int CompanyId)
        {
            try
            {
                Vehicle citys = VehicleDb.Where(x => x.VehicleId == id && x.CompanyId == CompanyId).FirstOrDefault();
                citys.isActive = false;
                citys.isDeleted = true;
                //VehicleDb.Attach(citys);
                this.Entry(citys).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion

        #region Change delivery boy
        public List<OrderDispatchedMaster> changeDBoy(List<OrderDispatchedMaster> objlist, string mob, int compid, int userid)
        {
            try
            {
                string oldDboy = "";
                string oldDboymobile = "";

                var DBoy = Peoples.Where(x => x.Mobile == mob && x.Deleted == false && x.CompanyId == compid && x.Active == true).FirstOrDefault();
                foreach (var obj in objlist)
                {
                    var od = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId && (x.Status == "Ready to Dispatch" || x.Status == "Delivery Redispatch")).Include("orderDetails").SingleOrDefault();
                    if (od != null)
                    {

                        bool founnd = DeliveryIssuanceDb.Any(x => x.DeliveryIssuanceId == od.DeliveryIssuanceIdOrderDeliveryMaster && (x.Status == "Submitted" || x.Status == "Payment Accepted" || x.Status == "Pending"));
                        if (!founnd)
                        {
                            if (DBoy != null)
                            {
                                oldDboy = od.DboyName;
                                oldDboymobile = od.DboyMobileNo;
                                od.DboyMobileNo = DBoy.Mobile;
                                od.DboyName = DBoy.DisplayName;
                                od.DBoyId = DBoy.PeopleID;
                                od.UpdatedDate = indianTime;
                                //OrderDispatchedMasters.Attach(od);
                                this.Entry(od).State = EntityState.Modified;
                                this.Commit();
                                #region Order History                                
                                var UserName = Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();
                                try
                                {
                                    OrderMasterHistories OrderMasterHistories = new OrderMasterHistories();
                                    if (od != null)
                                    {
                                        OrderMasterHistories.orderid = od.OrderId;
                                        OrderMasterHistories.Status = od.Status;
                                        OrderMasterHistories.Reasoncancel = "Due to Change in delivery Boy from " + oldDboy + " " + oldDboymobile + " To " + DBoy.DisplayName + " " + DBoy.Mobile;
                                        OrderMasterHistories.Warehousename = od.WarehouseName;
                                        if (UserName.DisplayName != null)
                                        {
                                            OrderMasterHistories.username = UserName.DisplayName;
                                        }
                                        else
                                        {
                                            OrderMasterHistories.username = UserName.PeopleFirstName;
                                        }
                                        OrderMasterHistories.userid = userid;
                                        OrderMasterHistories.CreatedDate = indianTime;
                                        this.OrderMasterHistoriesDB.Add(OrderMasterHistories);
                                        this.Commit();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                                }
                                #endregion
                            }

                        }

                    }
                }
                return objlist;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }

        #endregion
        #region GPS tracking and History of DBoy
        public GpsCoordinate Addgps(GpsCoordinate obj)
        {
            try
            {
                GpsCoordinate objgps = new GpsCoordinate();
                objgps.DeliveryBoyId = obj.DeliveryBoyId;
                objgps.lat = obj.lat;
                objgps.lg = obj.lg;
                objgps.CreatedDate = indianTime;
                GpsCoordinateDb.Add(objgps);
                int id = this.Commit();
                return obj;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return obj;
            }
        }
        public List<OrderDispatchedMaster> getallOrderofboy(string mob)
        {
            try
            {
                return OrderDispatchedMasters.Where(x => x.DboyMobileNo == mob).Include("orderDetails").ToList();
            }
            catch (Exception ex) { logger.Error(ex.Message); return null; }

        }

        public List<OrderDispatchedMasterDTO> getRedispatchordersbyboy(string mob)
        {

            try
            {
                //var list = RedispatchWarehouseDb.Where(x => x.Status == "Delivery Redispatch" && x.DboyMobileNo == mob).ToList();

                var list1 = (from i in RedispatchWarehouseDb
                             where (i.Status == "Delivery Redispatch") && i.DboyMobileNo == mob
                             join a in OrderDispatchedMasters on i.OrderDispatchedMasterId equals a.OrderDispatchedMasterId
                             join j in Customers on a.CustomerId equals j.CustomerId
                             select new OrderDispatchedMasterDTO
                             {
                                 active = a.active,
                                 BillingAddress = a.BillingAddress,
                                 CityId = a.CityId,
                                 comments = a.comments,
                                 CompanyId = a.CompanyId,
                                 CreatedDate = i.CreatedDate,
                                 CustomerId = a.CustomerId,
                                 CustomerName = j.Name,
                                 ShopName = j.ShopName,
                                 Skcode = j.Skcode,
                                 Customerphonenum = a.Customerphonenum,
                                 DboyMobileNo = a.DboyMobileNo,
                                 DboyName = a.DboyName,
                                 Deleted = a.Deleted,
                                 Deliverydate = a.Deliverydate,
                                 DiscountAmount = a.DiscountAmount,
                                 DivisionId = a.DivisionId,
                                 GrossAmount = a.GrossAmount,
                                 invoice_no = a.invoice_no,
                                 orderDetails = a.orderDetails,
                                 OrderDispatchedMasterId = a.OrderDispatchedMasterId,
                                 OrderId = a.OrderId,
                                 ReDispatchCount = a.ReDispatchCount,
                                 //SalesPerson = a.SalesPerson,
                                 //SalesPersonId = a.SalesPersonId,
                                 ShippingAddress = a.ShippingAddress,
                                 Status = a.Status,
                                 TaxAmount = a.TaxAmount,
                                 TotalAmount = a.TotalAmount,
                                 UpdatedDate = a.UpdatedDate,
                                 WarehouseId = a.WarehouseId,
                                 WarehouseName = a.WarehouseName
                             }).ToList();

                return list1;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }


        #endregion
        #region SalesPersonBeat add data from app beat
        public SalesPersonBeat Addsalesbeat(SalesPersonBeat obj)
        {
            try
            {
                People sname = Peoples.Where(f => f.PeopleID == obj.SalesPersonId).SingleOrDefault();
                Customer cname = Customers.Where(f => f.Skcode == obj.Skcode).SingleOrDefault();
                SalesPersonBeat objsals = new SalesPersonBeat();
                objsals.CompanyId = obj.CompanyId;
                objsals.WarehouseId = obj.WarehouseId;
                objsals.SalesPersonId = obj.SalesPersonId;
                objsals.Skcode = obj.Skcode;
                objsals.Visited = obj.Visited;
                objsals.status = obj.status;
                objsals.Comment = obj.Comment;
                objsals.lat = obj.lat;
                objsals.lg = obj.lg;
                objsals.SalespersonName = sname.DisplayName;
                objsals.ShopName = cname.ShopName;
                objsals.CreatedDate = indianTime;
                SalesPersonBeatDb.Add(objsals);
                int id = this.Commit();
                return obj;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return obj;
            }
        }
        #endregion
        #region Delivery App calls
        public List<OrderHistory> getDBoyOrdersHistory(string mob, DateTime? start, DateTime? end, int dboyId)//get orders History
        {
            try
            {
                List<OrderHistory> OrderHistoryList = new List<OrderHistory>();

                var Issulist = DeliveryIssuanceDb.Where(x => x.CreatedDate > start && x.CreatedDate <= end && x.PeopleID == dboyId).ToList();
                foreach (var o in Issulist)
                {
                    //    if (o.Status == "Accepted")
                    //    {
                    var orderhistory = new OrderHistory();
                    List<OrderDispatchedMaster> OrdersObj = new List<OrderDispatchedMaster>();
                    orderhistory.deliveryIssuance = o;
                    orderhistory.totalcash = 0;
                    orderhistory.Canceled = 0;
                    orderhistory.Redispatched = 0;
                    orderhistory.Delivered = 0;
                    string[] ids = o.OrderdispatchIds.Split(',');
                    foreach (var od in ids)
                    {
                        var oid = Convert.ToInt32(od);
                        var orderdipatchmaster = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == oid).Include("orderDetails").SingleOrDefault();

                        if (orderdipatchmaster != null)
                        {
                            //List<OrderDispatchedMasterDTO> om = new List<OrderDispatchedMasterDTO>();
                            if ((orderdipatchmaster.DboyMobileNo == mob) && (orderdipatchmaster.Status == "Delivery Canceled" || orderdipatchmaster.Status == "Order Canceled"))
                            {
                                orderhistory.Canceled = orderhistory.Canceled + 1;
                            }
                            else if ((orderdipatchmaster.DboyMobileNo == mob) && (orderdipatchmaster.Status == "Delivered" || orderdipatchmaster.Status == "sattled"))
                            {
                                orderhistory.Delivered = orderhistory.Delivered + 1;
                            }
                            if ((orderdipatchmaster.DboyMobileNo == mob) && (orderdipatchmaster.Status == "Delivery Redispatch" || orderdipatchmaster.ReDispatchCount > 0))
                            {
                                orderhistory.Redispatched = orderhistory.Redispatched + 1;
                            }
                            orderhistory.totalcash = orderhistory.totalcash + orderdipatchmaster.CashAmount;
                            OrdersObj.Add(orderdipatchmaster);
                        }
                    }
                    orderhistory.Orders = OrdersObj;
                    OrderHistoryList.Add(orderhistory);
                    //}
                }
                return OrderHistoryList;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public List<OrderDispatchedMasterDTOM> getAcceptedOrders(string mob)//get orders to deliver
        {
            try
            {
                //  var list11 = OrderDispatchedMasters.Where(a => a.Status == "Shipped" && a.DboyMobileNo == mob).ToList();
                var list1 = (from a in OrderDispatchedMasters
                             where (a.Status == "Shipped") && a.DboyMobileNo == mob
                             join i in Customers on a.CustomerId equals i.CustomerId
                             // join clstr in Clusters on i.ClusterId equals clstr.ClusterId DeliveryIssuanceIdOrderDeliveryMaster
                             select new OrderDispatchedMasterDTOM
                             {
                                 lat = i.lat,
                                 lg = i.lg,
                                 ClusterId = a.ClusterId,
                                 ClusterName = a.ClusterName,
                                 active = a.active,
                                 BillingAddress = a.BillingAddress,
                                 CityId = a.CityId,
                                 comments = a.comments,
                                 CompanyId = a.CompanyId,
                                 CreatedDate = a.CreatedDate,
                                 CustomerId = a.CustomerId,
                                 CustomerName = a.CustomerName,
                                 ShopName = i.ShopName,
                                 Skcode = i.Skcode,
                                 Customerphonenum = a.Customerphonenum,
                                 DboyMobileNo = a.DboyMobileNo,
                                 DboyName = a.DboyName,
                                 Deleted = a.Deleted,
                                 Deliverydate = a.Deliverydate,
                                 DiscountAmount = a.DiscountAmount,
                                 DivisionId = a.DivisionId,
                                 GrossAmount = a.GrossAmount,
                                 invoice_no = a.invoice_no,
                                 // OrderDate = a.OrderDate,
                                 //orderDetails = a.orderDetails,
                                 OrderDetailsCount = a.orderDetails.Count,
                                 OrderDispatchedMasterId = a.OrderDispatchedMasterId,
                                 OrderId = a.OrderId,
                                 //RecivedAmount = a.RecivedAmount,
                                 ReDispatchCount = a.ReDispatchCount,
                                 DeliveryIssuanceId = a.DeliveryIssuanceIdOrderDeliveryMaster,
                                 //SalesPerson = a.SalesPerson,
                                 //SalesPersonId = a.SalesPersonId,
                                 ShippingAddress = a.ShippingAddress,
                                 Status = a.Status,
                                 TaxAmount = a.TaxAmount,
                                 TotalAmount = a.TotalAmount,
                                 UpdatedDate = a.UpdatedDate,
                                 WarehouseId = a.WarehouseId,
                                 WarehouseName = a.WarehouseName
                             }).ToList();

                return list1;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }

        //New Dappp V2 By HArry 15-02-2019
        public List<OrderDispatchedMasterDTOM> getAcceptedOrdersV1(string mob)//get orders to deliver
        {
            try
            {
                var list1 = (from a in OrderDispatchedMasters
                             where (a.Status == "Shipped") && a.DboyMobileNo == mob
                             join i in Customers on a.CustomerId equals i.CustomerId
                             select new OrderDispatchedMasterDTOM
                             {
                                 lat = i.lat,
                                 lg = i.lg,
                                 ClusterId = a.ClusterId,
                                 ClusterName = a.ClusterName,
                                 active = a.active,
                                 BillingAddress = a.BillingAddress,
                                 CityId = a.CityId,
                                 comments = a.comments,
                                 CompanyId = a.CompanyId,
                                 CreatedDate = a.CreatedDate,
                                 CustomerId = a.CustomerId,
                                 CustomerName = a.CustomerName,
                                 ShopName = i.ShopName,
                                 Skcode = i.Skcode,
                                 Customerphonenum = a.Customerphonenum,
                                 DboyMobileNo = a.DboyMobileNo,
                                 DboyName = a.DboyName,
                                 Deleted = a.Deleted,
                                 Deliverydate = a.Deliverydate,
                                 DiscountAmount = a.DiscountAmount,
                                 DivisionId = a.DivisionId,
                                 GrossAmount = a.GrossAmount,
                                 invoice_no = a.invoice_no,
                                 OrderDetailsCount = a.orderDetails.Count,
                                 OrderDispatchedMasterId = a.OrderDispatchedMasterId,
                                 OrderId = a.OrderId,
                                 ReDispatchCount = a.ReDispatchCount,
                                 DeliveryIssuanceId = a.DeliveryIssuanceIdOrderDeliveryMaster,
                                 //SalesPerson = a.SalesPerson,
                                 //SalesPersonId = a.SalesPersonId,
                                 ShippingAddress = a.ShippingAddress,
                                 Status = a.Status,
                                 TaxAmount = a.TaxAmount,
                                 TotalAmount = a.TotalAmount,
                                 UpdatedDate = a.UpdatedDate,
                                 WarehouseId = a.WarehouseId,
                                 WarehouseName = a.WarehouseName
                             }).ToList();

                return list1;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }


        //#region Order delivered or canceled or Redispatched From Delivery App Update Order
        //public OrderDispatchedMaster orderdeliveredreturn(OrderDispatchedMaster obj)
        //{

        //    if (obj.Status == "Delivered")
        //    {
        //        var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

        //        try
        //        {
        //            if (obj.DeliveryIssuanceId > 0)
        //            {
        //                var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                if (sid != null)
        //                {
        //                    sid.Status = obj.Status;
        //                    sid.comments = obj.comments;
        //                    sid.CheckNo = obj.CheckNo;
        //                    sid.CheckAmount = obj.CheckAmount;
        //                    sid.ElectronicAmount = obj.ElectronicAmount;
        //                    sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                    sid.RecivedAmount = obj.RecivedAmount;
        //                    sid.CashAmount = obj.CashAmount;
        //                    sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                    sid.UpdatedDate = indianTime;
        //                    //OrderDeliveryMasterDB.Attach(sid);
        //                    this.Entry(sid).State = EntityState.Modified;
        //                    this.Commit();

        //                    if (ODM != null)
        //                    {
        //                        ODM.Status = obj.Status;
        //                        ODM.ReDispatchedStatus = obj.Status;
        //                        ODM.comments = obj.comments;
        //                        ODM.CheckNo = obj.CheckNo;
        //                        ODM.CheckAmount = obj.CheckAmount;
        //                        ODM.ElectronicAmount = obj.ElectronicAmount;
        //                        ODM.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                        //Trupay Transaction  by Harry
        //                        ODM.paymentThrough = obj.paymentThrough;
        //                        ODM.TrupayTransactionId = obj.TrupayTransactionId;
        //                        ODM.paymentMode = obj.paymentMode;
        //                        ODM.DSignimg = obj.DSignimg;
        //                        try
        //                        {
        //                            if (obj.ElectronicAmount > 0 && obj.IsElectronicPayment == true)
        //                            {
        //                                TrupayTransaction tpt = new TrupayTransaction();
        //                                tpt.TrupayTransactionStatus = "true";
        //                                tpt.CustomerName = ODM.CustomerName;
        //                                tpt.Status = "From Delivery";
        //                                tpt.Skcode = ODM.Skcode;
        //                                tpt.WarehouseName = ODM.WarehouseName; ;
        //                                tpt.OnlineAmount = ODM.ElectronicAmount;
        //                                tpt.OnlineServiceTax = ODM.OnlineServiceTax;
        //                                tpt.TrupayTransactionId = obj.TrupayTransactionId;
        //                                tpt.paymentThrough = obj.paymentThrough;
        //                                tpt.paymentMode = obj.paymentMode;
        //                                tpt.CreatedDate = indianTime;
        //                                this.TrupayTransactionDB.Add(tpt);
        //                                this.Commit();

        //                            }
        //                        }
        //                        catch (Exception ess) { }
        //                        ODM.RecivedAmount = obj.RecivedAmount;
        //                        ODM.Signimg = obj.Signimg;
        //                        ODM.CashAmount = obj.CashAmount;
        //                        ODM.UpdatedDate = indianTime;
        //                        ODM.OnlineServiceTax = obj.OnlineServiceTax;

        //                        ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                        if (obj.IsElectronicPayment) { ODM.Trupay = "true"; }

        //                        //OrderDispatchedMasters.Attach(ODM);
        //                        this.Entry(ODM).State = EntityState.Modified;
        //                        this.Commit();

        //                        #region Order Master History for Status Delivered
        //                        int? dboyid = 0;

        //                        using (var context = new AuthContext())
        //                        {
        //                            string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                            dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                            //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                        }
        //                        //var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();
        //                        try
        //                        {
        //                            OrderMasterHistories h1 = new OrderMasterHistories();
        //                            if (ODM != null)
        //                            {
        //                                h1.orderid = ODM.OrderId;
        //                                h1.Status = ODM.Status;
        //                                h1.Reasoncancel = null;
        //                                h1.Warehousename = ODM.WarehouseName;
        //                                h1.username = ODM.DboyName;
        //                                h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                h1.CreatedDate = DateTime.Now;
        //                                OrderMasterHistoriesDB.Add(h1);
        //                                int id = this.Commit();
        //                            }

        //                        }
        //                        catch (Exception ex)
        //                        {
        //                            logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                        }
        //                        #endregion

        //                        //foreach (var detail in ODM.orderDetails)
        //                        //{
        //                        //    detail.Status = obj.Status;
        //                        //    //OrderDispatchedDetailss.Attach(detail);
        //                        //    this.Entry(detail).State = EntityState.Modified;
        //                        //    this.Commit();
        //                        //}
        //                        if (ODM.ReDispatchCount > 0)
        //                        {
        //                            try
        //                            {
        //                                var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                if (RO != null)
        //                                {
        //                                    RO.Status = obj.Status;
        //                                    RO.comments = obj.comments;
        //                                    RO.UpdatedDate = indianTime;
        //                                    //RedispatchWarehouseDb.Attach(RO);
        //                                    this.Entry(RO).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error(ex.Message);
        //                            }
        //                        }
        //                        #region for Delivery dial On Order Delivered 
        //                        try
        //                        {
        //                            if (ODM.TotalAmount > 2000)
        //                            {
        //                                DialPoint dp = new DialPoint();
        //                                dp.SalesPersonId = ODM.SalesPersonId;
        //                                dp.Mobile = ODM.Customerphonenum;
        //                                dp.Skcode = ODM.Skcode;
        //                                dp.ShopName = ODM.ShopName;
        //                                dp.CustomerId = ODM.CustomerId;
        //                                dp.OrderId = ODM.OrderId;
        //                                dp.OrderAmount = System.Math.Round(ODM.TotalAmount);
        //                                double? st = (dp.OrderAmount * 0.05) / 100;
        //                                int stm = Convert.ToInt32(st);
        //                                if (stm > 0)
        //                                {
        //                                    dp.point = 10 * stm;
        //                                }
        //                                dp.CreatedDate = indianTime;
        //                                dp.UpdatedDate = indianTime;
        //                                DialPointDB.Add(dp);
        //                                int idd = this.Commit();

        //                                try
        //                                {
        //                                    ForDialNotification(ODM.CustomerId, ODM.OrderId);
        //                                }
        //                                catch (Exception ex) { }

        //                            }
        //                            else
        //                            {
        //                            }
        //                        }
        //                        catch (Exception ex)
        //                        {
        //                        }
        //                        #endregion

        //                        var ODMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                        if (ODMaster != null)
        //                        {
        //                            ODMaster.Status = "Delivered";
        //                            ODMaster.comments = obj.comments;
        //                            ODMaster.DeliveredDate = indianTime;
        //                            ODMaster.UpdatedDate = indianTime;
        //                            if (obj.IsElectronicPayment)
        //                            { ODMaster.Trupay = "true"; }

        //                            //DbOrderMaster.Attach(ODMaster);
        //                            this.Entry(ODMaster).State = EntityState.Modified;
        //                            this.Commit();
        //                            foreach (var detail in ODMaster.orderDetails)
        //                            {
        //                                detail.Status = obj.Status;
        //                                detail.UpdatedDate = indianTime;
        //                                //DbOrderDetails.Attach(detail);
        //                                this.Entry(detail).State = EntityState.Modified;
        //                                this.Commit();
        //                            }
        //                            Wallet wlt = WalletDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                            if (wlt != null)
        //                            {
        //                                if (ODMaster.RewardPoint > 0)
        //                                {
        //                                    try
        //                                    {
        //                                        CustomerWalletHistory CWH = new CustomerWalletHistory();
        //                                        CWH.WarehouseId = ODMaster.WarehouseId;
        //                                        CWH.CompanyId = ODMaster.CompanyId;
        //                                        CWH.CustomerId = wlt.CustomerId;
        //                                        CWH.NewAddedWAmount = ODMaster.RewardPoint;
        //                                        CWH.OrderId = ODMaster.OrderId;
        //                                        CWH.Through = "From Order Delivered";
        //                                        CWH.TotalWalletAmount = wlt.TotalAmount + ODMaster.RewardPoint;
        //                                        CWH.CreatedDate = indianTime;
        //                                        CWH.UpdatedDate = indianTime;
        //                                        CustomerWalletHistoryDb.Add(CWH);
        //                                        int idd = this.Commit();
        //                                    }
        //                                    catch (Exception ex) { }

        //                                    wlt.TotalAmount += ODMaster.RewardPoint;
        //                                    try
        //                                    {
        //                                        ForDeliveredNotification(wlt.CustomerId, ODMaster.RewardPoint, ODMaster.OrderId);
        //                                    }
        //                                    catch (Exception ex) { }

        //                                    wlt.TransactionDate = indianTime;
        //                                    //WalletDb.Attach(wlt);
        //                                    Entry(wlt).State = EntityState.Modified;
        //                                    Commit();

        //                                    var rpoint = RewardPointDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                                    if (rpoint != null)
        //                                    {
        //                                        rpoint.EarningPoint -= ODMaster.RewardPoint;
        //                                        if (rpoint.EarningPoint < 0)
        //                                            rpoint.EarningPoint = 0;
        //                                        rpoint.UpdatedDate = indianTime;
        //                                        //RewardPointDb.Attach(rpoint);
        //                                        Entry(rpoint).State = EntityState.Modified;
        //                                        Commit();
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        return obj;
        //                    }
        //                }
        //                else
        //                {
        //                    logger.Warn("0012 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                }
        //            }
        //            else
        //            {
        //                logger.Warn("0011 Delivery Issuence id not set.");
        //            }
        //        }
        //        catch (Exception esd)
        //        {
        //            logger.Error("Error:0010 " + esd.Message);
        //        }
        //    }
        //    else if (obj.Status == "Delivery Canceled")
        //    {
        //        try
        //        {
        //            var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

        //            try
        //            {
        //                if (obj.DeliveryIssuanceId > 0)
        //                {
        //                    var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                    if (sid != null)
        //                    {
        //                        sid.Status = obj.Status;
        //                        sid.comments = obj.comments;
        //                        sid.CheckNo = obj.CheckNo;
        //                        sid.CheckAmount = obj.CheckAmount;
        //                        sid.ElectronicAmount = obj.ElectronicAmount;
        //                        sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                        sid.RecivedAmount = obj.RecivedAmount;
        //                        sid.CashAmount = obj.CashAmount;
        //                        sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                        sid.UpdatedDate = indianTime;
        //                        //OrderDeliveryMasterDB.Attach(sid);
        //                        this.Entry(sid).State = EntityState.Modified;
        //                        this.Commit();

        //                        if (ODM != null)
        //                        {
        //                            ODM.Status = obj.Status;
        //                            ODM.CanceledStatus = obj.Status;
        //                            ODM.comments = obj.comments;
        //                            ODM.Signimg = obj.Signimg;
        //                            ODM.UpdatedDate = indianTime;
        //                            //OrderDispatchedMasters.Attach(ODM);
        //                            this.Entry(ODM).State = EntityState.Modified;
        //                            this.Commit();

        //                            #region Order Master History for Status Delivery Canceled
        //                            int? dboyid = 0;

        //                            using (var context = new AuthContext())
        //                            {
        //                                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                                dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                                //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                            }
        //                            //	var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();
        //                            try
        //                            {
        //                                OrderMasterHistories h1 = new OrderMasterHistories();
        //                                if (ODM != null)
        //                                {
        //                                    h1.orderid = ODM.OrderId;
        //                                    h1.Status = ODM.Status;
        //                                    h1.Reasoncancel = null;
        //                                    h1.Warehousename = ODM.WarehouseName;
        //                                    h1.username = ODM.DboyName;
        //                                    h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                    h1.CreatedDate = DateTime.Now;
        //                                    OrderMasterHistoriesDB.Add(h1);
        //                                    int id = this.Commit();
        //                                }

        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                            }
        //                            #endregion

        //                            //foreach (var detail in ODM.orderDetails)
        //                            //{
        //                            //    detail.Status = obj.Status;
        //                            //    detail.UpdatedDate = indianTime;
        //                            //    //OrderDispatchedDetailss.Attach(detail);
        //                            //    this.Entry(detail).State = EntityState.Modified;
        //                            //    this.Commit();
        //                            //}
        //                            var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                            if (OMaster != null)
        //                            {
        //                                OMaster.Status = obj.Status;
        //                                OMaster.comments = obj.comments;
        //                                OMaster.UpdatedDate = indianTime;
        //                                //DbOrderMaster.Attach(OMaster);
        //                                this.Entry(OMaster).State = EntityState.Modified;
        //                                this.Commit();
        //                                foreach (var detail in OMaster.orderDetails)
        //                                {
        //                                    detail.Status = obj.Status;
        //                                    detail.UpdatedDate = indianTime;
        //                                    //DbOrderDetails.Attach(detail);
        //                                    this.Entry(detail).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                            }
        //                            try
        //                            {
        //                                var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                if (RO != null)
        //                                {
        //                                    RO.Status = obj.Status;
        //                                    RO.comments = obj.comments;
        //                                    RO.UpdatedDate = indianTime;
        //                                    //RedispatchWarehouseDb.Attach(RO);
        //                                    this.Entry(RO).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                            }
        //                            catch (Exception ex) { logger.Error(ex.Message); }
        //                        }
        //                        return obj;
        //                    }
        //                    else
        //                    {
        //                        logger.Warn("00123 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                    }
        //                }
        //                else
        //                {
        //                    logger.Warn("00113 Delivery Issuence id not set");
        //                }
        //            }
        //            catch (Exception esd)
        //            {
        //                logger.Error("Error:00103 " + esd.Message);
        //            }
        //        }
        //        catch (Exception ex) { logger.Error(ex.Message); }
        //    }
        //    else if (obj.Status == "Delivery Redispatch")
        //    {
        //        var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
        //        try
        //        {
        //            if (obj.DeliveryIssuanceId > 0)
        //            {
        //                var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                if (sid != null)
        //                {
        //                    sid.Status = obj.Status;
        //                    sid.comments = obj.comments;
        //                    sid.CheckNo = obj.CheckNo;
        //                    sid.CheckAmount = obj.CheckAmount;
        //                    sid.ElectronicAmount = obj.ElectronicAmount;
        //                    sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                    sid.RecivedAmount = obj.RecivedAmount;
        //                    sid.CashAmount = obj.CashAmount;
        //                    sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                    sid.UpdatedDate = indianTime;
        //                    //OrderDeliveryMasterDB.Attach(sid);
        //                    this.Entry(sid).State = EntityState.Modified;
        //                    this.Commit();

        //                    if (ODM != null)
        //                    {
        //                        ODM.Status = "Delivery Redispatch";
        //                        ODM.ReDispatchedStatus = "Delivery Redispatch";
        //                        ODM.ReDispatchCount = ODM.ReDispatchCount + 1;
        //                        ODM.Signimg = obj.Signimg;
        //                        ODM.comments = obj.comments;
        //                        ODM.UpdatedDate = indianTime;
        //                        //OrderDispatchedMasters.Attach(ODM);
        //                        this.Entry(ODM).State = EntityState.Modified;
        //                        this.Commit();

        //                        #region Order Master History for Status Delivery Redispatch
        //                        int? dboyid = 0;

        //                        using (var context = new AuthContext())
        //                        {
        //                            string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                            dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                            //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                        }
        //                        // var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();
        //                        try
        //                        {
        //                            OrderMasterHistories h1 = new OrderMasterHistories();
        //                            if (ODM != null)
        //                            {
        //                                h1.orderid = ODM.OrderId;
        //                                h1.Status = ODM.Status;
        //                                h1.Reasoncancel = null;
        //                                h1.Warehousename = ODM.WarehouseName;
        //                                h1.username = ODM.DboyName;
        //                                h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                h1.CreatedDate = DateTime.Now;
        //                                OrderMasterHistoriesDB.Add(h1);
        //                                int id = this.Commit();
        //                            }

        //                        }
        //                        catch (Exception ex)
        //                        {
        //                            logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                        }
        //                        #endregion

        //                        //foreach (var detail in ODM.orderDetails)
        //                        //{
        //                        //    detail.Status = obj.Status;
        //                        //    //OrderDispatchedDetailss.Attach(detail);
        //                        //    this.Entry(detail).State = EntityState.Modified;
        //                        //    this.Commit();
        //                        //}
        //                        var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                        if (OMaster != null)
        //                        {
        //                            OMaster.Status = obj.Status;
        //                            OMaster.comments = obj.comments;
        //                            OMaster.UpdatedDate = indianTime;
        //                            OMaster.ReDispatchCount = obj.ReDispatchCount + 1;
        //                            //DbOrderMaster.Attach(OMaster);
        //                            this.Entry(OMaster).State = EntityState.Modified;
        //                            this.Commit();
        //                            foreach (var detail in OMaster.orderDetails)
        //                            {
        //                                detail.Status = obj.Status;
        //                                //DbOrderDetails.Attach(detail);
        //                                this.Entry(detail).State = EntityState.Modified;
        //                                this.Commit();
        //                            }
        //                        }
        //                        if (obj.ReDispatchCount == 0)
        //                        {
        //                            RedispatchWarehouse RO = new RedispatchWarehouse();
        //                            RO.active = true;
        //                            RO.comments = obj.comments;
        //                            RO.CompanyId = ODM.CompanyId;
        //                            RO.CreatedDate = indianTime;
        //                            RO.UpdatedDate = indianTime;
        //                            RO.DboyMobileNo = obj.DboyMobileNo;
        //                            RO.DboyName = obj.DboyName;
        //                            RO.Deleted = false;
        //                            RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                            RO.OrderId = obj.OrderId;
        //                            RO.WarehouseId = obj.WarehouseId;
        //                            RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                            RO.Status = obj.Status;
        //                            RedispatchWarehouseDb.Add(RO);
        //                            this.Commit();
        //                        }
        //                        else
        //                        {
        //                            try
        //                            {
        //                                var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                if (RO != null)
        //                                {
        //                                    RO.Status = obj.Status;
        //                                    RO.comments = obj.comments;
        //                                    RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                    RO.UpdatedDate = indianTime;
        //                                    //RedispatchWarehouseDb.Attach(RO);
        //                                    this.Entry(RO).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                                else
        //                                {
        //                                    RO = new RedispatchWarehouse();
        //                                    RO.active = true;
        //                                    RO.comments = obj.comments;
        //                                    RO.CompanyId = ODM.CompanyId;
        //                                    RO.CreatedDate = indianTime;
        //                                    RO.UpdatedDate = indianTime;
        //                                    RO.DboyMobileNo = obj.DboyMobileNo;
        //                                    RO.DboyName = obj.DboyName;
        //                                    RO.Deleted = false;
        //                                    RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                                    RO.OrderId = obj.OrderId;
        //                                    RO.WarehouseId = obj.WarehouseId;
        //                                    RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                    RO.Status = obj.Status;
        //                                    RedispatchWarehouseDb.Add(RO);
        //                                    this.Commit();
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error(ex.Message);
        //                            }
        //                        }
        //                    }
        //                    return obj;

        //                }
        //                else
        //                {
        //                    logger.Warn("00124 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                }
        //            }
        //            else
        //            {
        //                logger.Warn("00114 Delivery Issuence id not set.");
        //            }
        //        }
        //        catch (Exception esd)
        //        {
        //            logger.Error("Error:00104 " + esd.Message);
        //        }
        //    }
        //    return null;

        //}
        ////public List<OrderDispatchedMasterDTOM> getAcceptedOrders(string mob)//get orders to deliver
        ////{
        ////    try
        ////    {
        ////        //  var list11 = OrderDispatchedMasters.Where(a => a.Status == "Shipped" && a.DboyMobileNo == mob).ToList();
        ////        var list1 = (from a in OrderDispatchedMasters
        ////                     where (a.Status == "Shipped") && a.DboyMobileNo == mob
        ////                     join i in Customers on a.CustomerId equals i.CustomerId
        ////                     // join clstr in Clusters on i.ClusterId equals clstr.ClusterId DeliveryIssuanceIdOrderDeliveryMaster
        ////                     select new OrderDispatchedMasterDTOM
        ////                     {
        ////                         lat = i.lat,
        ////                         lg = i.lg,
        ////                         ClusterId = a.ClusterId,
        ////                         ClusterName = a.ClusterName,
        ////                         active = a.active,
        ////                         BillingAddress = a.BillingAddress,
        ////                         CityId = a.CityId,
        ////                         comments = a.comments,
        ////                         CompanyId = a.CompanyId,
        ////                         CreatedDate = a.CreatedDate,
        ////                         CustomerId = a.CustomerId,
        ////                         CustomerName = a.CustomerName,
        ////                         ShopName = i.ShopName,
        ////                         Skcode = i.Skcode,
        ////                         Customerphonenum = a.Customerphonenum,
        ////                         DboyMobileNo = a.DboyMobileNo,
        ////                         DboyName = a.DboyName,
        ////                         Deleted = a.Deleted,
        ////                         Deliverydate = a.Deliverydate,
        ////                         DiscountAmount = a.DiscountAmount,
        ////                         DivisionId = a.DivisionId,
        ////                         GrossAmount = a.GrossAmount,
        ////                         invoice_no = a.invoice_no,
        ////                         // OrderDate = a.OrderDate,
        ////                         //orderDetails = a.orderDetails,
        ////                         OrderDispatchedMasterId = a.OrderDispatchedMasterId,
        ////                         OrderId = a.OrderId,
        ////                         //RecivedAmount = a.RecivedAmount,
        ////                         ReDispatchCount = a.ReDispatchCount,
        ////                         DeliveryIssuanceId = a.DeliveryIssuanceIdOrderDeliveryMaster,
        ////                         SalesPerson = a.SalesPerson,
        ////                         SalesPersonId = a.SalesPersonId,
        ////                         ShippingAddress = a.ShippingAddress,
        ////                         Status = a.Status,
        ////                         TaxAmount = a.TaxAmount,
        ////                         TotalAmount = a.TotalAmount,
        ////                         UpdatedDate = a.UpdatedDate,
        ////                         WarehouseId = a.WarehouseId,
        ////                         WarehouseName = a.WarehouseName
        ////                     }).ToList();

        ////        return list1;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        logger.Error(ex.Message);
        ////        return null;
        ////    }
        ////}

        ///// <summary>
        ///// V2
        ///// </summary>
        ///// <param name="obj"></param>
        ///// <returns></returns>
        //public OrderPlaceDTO orderdeliveredreturnV2(OrderPlaceDTO obj)
        //{
        //    try
        //    {
        //        if (obj.Status == "Delivered")
        //        {
        //            var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

        //            try
        //            {
        //                if (obj.DeliveryIssuanceId > 0)
        //                {
        //                    var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                    if (sid != null)
        //                    {
        //                        sid.Status = obj.Status;
        //                        sid.comments = obj.comments;
        //                        sid.CheckNo = obj.CheckNo;
        //                        sid.CheckAmount = obj.CheckAmount;
        //                        sid.ElectronicAmount = obj.ElectronicAmount;
        //                        sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                        sid.RecivedAmount = obj.RecivedAmount;
        //                        sid.CashAmount = obj.CashAmount;
        //                        sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                        sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                        sid.ChequeBankName = obj.ChequeBankName;
        //                        sid.ChequeDate = obj.ChequeDate;
        //                        sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                        sid.UpdatedDate = indianTime;
        //                        //OrderDeliveryMasterDB.Attach(sid);
        //                        this.Entry(sid).State = EntityState.Modified;
        //                        this.Commit();

        //                        if (ODM != null)
        //                        {
        //                            ODM.Status = obj.Status;
        //                            ODM.ReDispatchedStatus = obj.Status;
        //                            ODM.comments = obj.comments;
        //                            ODM.CheckNo = obj.CheckNo;
        //                            ODM.CheckAmount = obj.CheckAmount;
        //                            ODM.ElectronicAmount = obj.ElectronicAmount;
        //                            ODM.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                            ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                            ODM.ChequeBankName = obj.ChequeBankName;
        //                            ODM.ChequeDate = obj.ChequeDate;
        //                            ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                            try
        //                            {
        //                                if (obj.ElectronicAmount > 0 && obj.IsElectronicPayment == true)
        //                                {
        //                                    TrupayTransaction tpt = new TrupayTransaction();
        //                                    tpt.TrupayTransactionStatus = ODM.Trupay;
        //                                    tpt.CustomerName = ODM.CustomerName;
        //                                    tpt.Status = "From Delivery";
        //                                    tpt.Skcode = ODM.Skcode;
        //                                    tpt.WarehouseName = ODM.WarehouseName; ;
        //                                    tpt.OnlineAmount = ODM.ElectronicAmount;
        //                                    tpt.OnlineServiceTax = ODM.OnlineServiceTax;
        //                                    tpt.CreatedDate = indianTime;
        //                                    this.TrupayTransactionDB.Add(tpt);
        //                                    this.Commit();

        //                                }
        //                                else
        //                                {

        //                                }
        //                            }
        //                            catch (Exception ess) { }
        //                            ODM.RecivedAmount = obj.RecivedAmount;
        //                            ODM.Signimg = obj.Signimg;
        //                            ODM.CashAmount = obj.CashAmount;
        //                            ODM.UpdatedDate = indianTime;
        //                            ODM.OnlineServiceTax = obj.OnlineServiceTax;
        //                            //OrderDispatchedMasters.Attach(ODM);
        //                            this.Entry(ODM).State = EntityState.Modified;
        //                            this.Commit();
        //                            #region call to whatsapp Bot 
        //                            try
        //                            {
        //                                CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
        //                                Customer custdata = Customers.Where(x => x.Skcode == ODM.Skcode).FirstOrDefault();
        //                                cust.Name = custdata.Name;//  customer Name
        //                                cust.Mobile = custdata.Mobile;// Customer Mobile No
        //                                cust.TemppleteId = 26;//send for template
        //                                cust.OrderedDate = ODM.UpdatedDate.Date;//send for status
        //                                cust.OrderId = ODM.OrderId;//send for Order Id

        //                                Customersms(cust);
        //                            }
        //                            catch (Exception ex) { }
        //                            #endregion
        //                            #region Order Master History for Status Delivered
        //                            int? dboyid = 0;

        //                            using (var context = new AuthContext())
        //                            {
        //                                string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                                dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                                //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                            }
        //                            //var ship11 = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
        //                            //var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();


        //                            try
        //                            {
        //                                OrderMasterHistories h1 = new OrderMasterHistories();
        //                                if (ODM != null)
        //                                {
        //                                    h1.orderid = ODM.OrderId;
        //                                    h1.Status = ODM.Status;
        //                                    h1.Reasoncancel = null;
        //                                    h1.Warehousename = ODM.WarehouseName;
        //                                    h1.username = ODM.DboyName;
        //                                    h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                    h1.CreatedDate = DateTime.Now;
        //                                    OrderMasterHistoriesDB.Add(h1);
        //                                    int id = this.Commit();
        //                                }

        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                            }
        //                            #endregion

        //                            //foreach (var detail in ODM.orderDetails)
        //                            //{
        //                            //    detail.Status = obj.Status;
        //                            //    //OrderDispatchedDetailss.Attach(detail);
        //                            //    this.Entry(detail).State = EntityState.Modified;
        //                            //    this.Commit();
        //                            //}
        //                            if (ODM.ReDispatchCount > 0)
        //                            {
        //                                try
        //                                {
        //                                    var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                    if (RO != null)
        //                                    {
        //                                        RO.Status = obj.Status;
        //                                        RO.comments = obj.comments;
        //                                        RO.UpdatedDate = indianTime;
        //                                        //RedispatchWarehouseDb.Attach(RO);
        //                                        this.Entry(RO).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error(ex.Message);
        //                                }
        //                            }
        //                            #region for Delivery dial On Order Delivered 
        //                            try
        //                            {
        //                                if (ODM.TotalAmount > 2000)
        //                                {
        //                                    DialPoint dp = new DialPoint();
        //                                    dp.SalesPersonId = ODM.SalesPersonId;
        //                                    dp.Mobile = ODM.Customerphonenum;
        //                                    dp.Skcode = ODM.Skcode;
        //                                    dp.ShopName = ODM.ShopName;
        //                                    dp.CustomerId = ODM.CustomerId;
        //                                    dp.OrderId = ODM.OrderId;
        //                                    dp.OrderAmount = System.Math.Round(ODM.TotalAmount);
        //                                    double? st = (dp.OrderAmount * 0.05) / 100;
        //                                    int stm = Convert.ToInt32(st);
        //                                    if (stm > 0)
        //                                    {
        //                                        dp.point = 10 * stm;
        //                                    }
        //                                    dp.CreatedDate = indianTime;
        //                                    dp.UpdatedDate = indianTime;
        //                                    DialPointDB.Add(dp);
        //                                    int idd = this.Commit();

        //                                    try
        //                                    {
        //                                        ForDialNotification(ODM.CustomerId, ODM.OrderId);
        //                                    }
        //                                    catch (Exception ex) { }

        //                                }
        //                                else
        //                                {
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                            }
        //                            #endregion

        //                            var ODMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                            if (ODMaster != null)
        //                            {
        //                                ODMaster.Status = "Delivered";
        //                                ODMaster.comments = obj.comments;
        //                                ODMaster.DeliveredDate = indianTime;
        //                                ODMaster.UpdatedDate = indianTime;
        //                                //DbOrderMaster.Attach(ODMaster);
        //                                this.Entry(ODMaster).State = EntityState.Modified;
        //                                this.Commit();
        //                                foreach (var detail in ODMaster.orderDetails)
        //                                {
        //                                    detail.Status = obj.Status;
        //                                    detail.UpdatedDate = indianTime;
        //                                    //DbOrderDetails.Attach(detail);
        //                                    this.Entry(detail).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                                Wallet wlt = WalletDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                                if (wlt != null)
        //                                {
        //                                    if (ODMaster.RewardPoint > 0)
        //                                    {
        //                                        try
        //                                        {
        //                                            CustomerWalletHistory CWH = new CustomerWalletHistory();
        //                                            CWH.WarehouseId = ODMaster.WarehouseId;
        //                                            CWH.CompanyId = ODMaster.CompanyId;
        //                                            CWH.CustomerId = wlt.CustomerId;
        //                                            CWH.NewAddedWAmount = ODMaster.RewardPoint;
        //                                            CWH.OrderId = ODMaster.OrderId;
        //                                            CWH.Through = "From Order Delivered";
        //                                            CWH.TotalWalletAmount = wlt.TotalAmount + ODMaster.RewardPoint;
        //                                            CWH.CreatedDate = indianTime;
        //                                            CWH.UpdatedDate = indianTime;
        //                                            CustomerWalletHistoryDb.Add(CWH);
        //                                            int idd = this.Commit();
        //                                        }
        //                                        catch (Exception ex) { }

        //                                        wlt.TotalAmount += ODMaster.RewardPoint;
        //                                        try
        //                                        {
        //                                            ForDeliveredNotification(wlt.CustomerId, ODMaster.RewardPoint, ODMaster.OrderId);
        //                                        }
        //                                        catch (Exception ex) { }

        //                                        wlt.TransactionDate = indianTime;
        //                                        //WalletDb.Attach(wlt);
        //                                        Entry(wlt).State = EntityState.Modified;
        //                                        Commit();

        //                                        var rpoint = RewardPointDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                                        if (rpoint != null)
        //                                        {
        //                                            rpoint.EarningPoint -= ODMaster.RewardPoint;
        //                                            if (rpoint.EarningPoint < 0)
        //                                                rpoint.EarningPoint = 0;
        //                                            rpoint.UpdatedDate = indianTime;
        //                                            //RewardPointDb.Attach(rpoint);
        //                                            Entry(rpoint).State = EntityState.Modified;
        //                                            Commit();
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            return obj;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        logger.Warn("0012 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                    }
        //                }
        //                else
        //                {
        //                    logger.Warn("0011 Delivery Issuence id not set.");
        //                }
        //            }
        //            catch (Exception esd)
        //            {
        //                logger.Error("Error:0010 " + esd.Message);
        //            }

        //            #region Payments 

        //            if (obj.CheckAmount > 0)
        //            {

        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = "Cheque",
        //                    amount = Math.Round(obj.CheckAmount, 0)
        //                });
        //            }

        //            if (obj.mPosAmount > 0)
        //            {

        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = "mPos",
        //                    amount = Math.Round(obj.CheckAmount, 0)
        //                });
        //            }

        //            if (obj.ElectronicAmount > 0)
        //            {
        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = obj.paymentThrough,
        //                    amount = Math.Round(obj.CashAmount, 0),
        //                    GatewayTransId = obj.ElectronicPaymentNo
        //                });
        //            }


        //            var cashpayment = PaymentResponseRetailerAppDb.FirstOrDefault(x => x.OrderId == obj.OrderId && x.status == "Success" && x.PaymentFrom == "Cash");
        //            if (cashpayment != null)
        //            {
        //                cashpayment.amount = obj.CashAmount;
        //                cashpayment.UpdatedDate = indianTime;
        //                this.Entry(cashpayment).State = EntityState.Modified;
        //            }
        //            else if (cashpayment == null && obj.CashAmount > 0)
        //            {
        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = "Cash",
        //                    IsRefund = false,
        //                    amount = Math.Round(obj.CashAmount, 0)
        //                });
        //            }


        //            this.Commit();

        //            #endregion
        //        }
        //        else if (obj.Status == "Delivery Canceled")
        //        {
        //            try
        //            {
        //                var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

        //                try
        //                {
        //                    if (obj.DeliveryIssuanceId > 0)
        //                    {
        //                        var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                        if (sid != null)
        //                        {
        //                            sid.Status = obj.Status;
        //                            sid.comments = obj.comments;
        //                            sid.CheckNo = obj.CheckNo;
        //                            sid.CheckAmount = obj.CheckAmount;
        //                            sid.ElectronicAmount = obj.ElectronicAmount;
        //                            sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                            sid.RecivedAmount = obj.RecivedAmount;
        //                            sid.CashAmount = obj.CashAmount;
        //                            sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                            sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                            sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                            sid.ChequeBankName = obj.ChequeBankName;
        //                            sid.ChequeDate = obj.ChequeDate;
        //                            sid.UpdatedDate = indianTime;
        //                            //OrderDeliveryMasterDB.Attach(sid);
        //                            this.Entry(sid).State = EntityState.Modified;
        //                            this.Commit();

        //                            if (ODM != null)
        //                            {
        //                                ODM.Status = obj.Status;
        //                                ODM.CanceledStatus = obj.Status;
        //                                ODM.comments = obj.comments;
        //                                ODM.Signimg = obj.Signimg;
        //                                ODM.UpdatedDate = indianTime;
        //                                ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                                ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                                ODM.ChequeBankName = obj.ChequeBankName;
        //                                ODM.ChequeDate = obj.ChequeDate;
        //                                OrderDispatchedMasters.Attach(ODM);
        //                                this.Entry(ODM).State = EntityState.Modified;
        //                                this.Commit();
        //                                #region call to whatsapp Bot 
        //                                try
        //                                {
        //                                    CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
        //                                    Customer custdata = Customers.Where(x => x.Skcode == ODM.Skcode).FirstOrDefault();
        //                                    cust.Name = custdata.Name;//  customer Name
        //                                    cust.Mobile = custdata.Mobile;// Customer Mobile No
        //                                    cust.TemppleteId = 28;//send for template
        //                                    cust.OrderedDate = ODM.UpdatedDate.Date;//send for status
        //                                    cust.OrderId = ODM.OrderId;//send for Order Id

        //                                    Customersms(cust);
        //                                }
        //                                catch (Exception ex) { }
        //                                #endregion
        //                                #region Order Master History for Status Delivery Canceled
        //                                int? dboyid = 0;

        //                                using (var context = new AuthContext())
        //                                {
        //                                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                                    dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                                    //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                                }
        //                                //var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();
        //                                try
        //                                {
        //                                    OrderMasterHistories h1 = new OrderMasterHistories();
        //                                    if (ODM != null)
        //                                    {
        //                                        h1.orderid = ODM.OrderId;
        //                                        h1.Status = ODM.Status;
        //                                        h1.Reasoncancel = null;
        //                                        h1.Warehousename = ODM.WarehouseName;
        //                                        h1.username = ODM.DboyName;
        //                                        h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                        h1.CreatedDate = DateTime.Now;
        //                                        OrderMasterHistoriesDB.Add(h1);
        //                                        int id = this.Commit();
        //                                    }

        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                                }
        //                                #endregion

        //                                //foreach (var detail in ODM.orderDetails)
        //                                //{
        //                                //    detail.Status = obj.Status;
        //                                //    detail.UpdatedDate = indianTime;
        //                                //    //OrderDispatchedDetailss.Attach(detail);
        //                                //    this.Entry(detail).State = EntityState.Modified;
        //                                //    this.Commit();
        //                                //}
        //                                var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                                if (OMaster != null)
        //                                {
        //                                    OMaster.Status = obj.Status;
        //                                    OMaster.comments = obj.comments;
        //                                    OMaster.UpdatedDate = indianTime;
        //                                    //DbOrderMaster.Attach(OMaster);
        //                                    this.Entry(OMaster).State = EntityState.Modified;
        //                                    this.Commit();
        //                                    foreach (var detail in OMaster.orderDetails)
        //                                    {
        //                                        detail.Status = obj.Status;
        //                                        detail.UpdatedDate = indianTime;
        //                                        //DbOrderDetails.Attach(detail);
        //                                        this.Entry(detail).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                try
        //                                {
        //                                    var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                    if (RO != null)
        //                                    {
        //                                        RO.Status = obj.Status;
        //                                        RO.comments = obj.comments;
        //                                        RO.UpdatedDate = indianTime;
        //                                        //RedispatchWarehouseDb.Attach(RO);
        //                                        this.Entry(RO).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                catch (Exception ex) { logger.Error(ex.Message); }
        //                            }
        //                            return obj;
        //                        }
        //                        else
        //                        {
        //                            logger.Warn("00123 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        logger.Warn("00113 Delivery Issuence id not set");
        //                    }
        //                }
        //                catch (Exception esd)
        //                {
        //                    logger.Error("Error:00103 " + esd.Message);
        //                }
        //            }
        //            catch (Exception ex) { logger.Error(ex.Message); }
        //        }
        //        else if (obj.Status == "Delivery Redispatch")
        //        {
        //            var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
        //            try
        //            {
        //                if (obj.DeliveryIssuanceId > 0)
        //                {
        //                    var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                    if (sid != null)
        //                    {
        //                        sid.Status = obj.Status;
        //                        sid.comments = obj.comments;
        //                        sid.CheckNo = obj.CheckNo;
        //                        sid.CheckAmount = obj.CheckAmount;
        //                        sid.ElectronicAmount = obj.ElectronicAmount;
        //                        sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                        sid.RecivedAmount = obj.RecivedAmount;
        //                        sid.CashAmount = obj.CashAmount;
        //                        sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                        sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                        sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                        sid.ChequeBankName = obj.ChequeBankName;
        //                        sid.ChequeDate = obj.ChequeDate;
        //                        sid.UpdatedDate = indianTime;
        //                        //OrderDeliveryMasterDB.Attach(sid);
        //                        this.Entry(sid).State = EntityState.Modified;
        //                        this.Commit();

        //                        if (ODM != null)
        //                        {
        //                            ODM.Status = "Delivery Redispatch";
        //                            ODM.ReDispatchedStatus = "Delivery Redispatch";
        //                            ODM.ReDispatchCount = ODM.ReDispatchCount + 1;
        //                            ODM.Signimg = obj.Signimg;
        //                            ODM.comments = obj.comments;
        //                            ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                            ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                            ODM.ChequeBankName = obj.ChequeBankName;
        //                            ODM.ChequeDate = obj.ChequeDate;
        //                            ODM.UpdatedDate = indianTime;
        //                            //OrderDispatchedMasters.Attach(ODM);
        //                            this.Entry(ODM).State = EntityState.Modified;
        //                            this.Commit();

        //                            #region Order Master History for Status Delivery Redispatch
        //                            int? dboyid = 0;

        //                            using (var context = new AuthContext())
        //                            {
        //                                string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + ODM.DboyMobileNo + "'  and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //                                dboyid = context.Database.SqlQuery<People>(query).FirstOrDefault()?.PeopleID;
        //                                //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();
        //                            }
        //                            //var dboyid = Peoples.Where(x => x.Mobile == ODM.DboyMobileNo && x.Department == "Delivery Boy").Select(a => a.PeopleID).SingleOrDefault();
        //                            try
        //                            {
        //                                OrderMasterHistories h1 = new OrderMasterHistories();
        //                                if (ODM != null)
        //                                {
        //                                    h1.orderid = ODM.OrderId;
        //                                    h1.Status = ODM.Status;
        //                                    h1.Reasoncancel = null;
        //                                    h1.Warehousename = ODM.WarehouseName;
        //                                    h1.username = ODM.DboyName;
        //                                    h1.userid = dboyid.HasValue ? dboyid.Value : 0;
        //                                    h1.CreatedDate = DateTime.Now;
        //                                    OrderMasterHistoriesDB.Add(h1);
        //                                    int id = this.Commit();
        //                                }

        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                            }
        //                            #endregion

        //                            //foreach (var detail in ODM.orderDetails)
        //                            //{
        //                            //    detail.Status = obj.Status;
        //                            //    //OrderDispatchedDetailss.Attach(detail);
        //                            //    this.Entry(detail).State = EntityState.Modified;
        //                            //    this.Commit();
        //                            //}
        //                            var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                            if (OMaster != null)
        //                            {
        //                                OMaster.Status = obj.Status;
        //                                OMaster.comments = obj.comments;
        //                                OMaster.UpdatedDate = indianTime;
        //                                OMaster.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                //DbOrderMaster.Attach(OMaster);
        //                                this.Entry(OMaster).State = EntityState.Modified;
        //                                this.Commit();
        //                                foreach (var detail in OMaster.orderDetails)
        //                                {
        //                                    detail.Status = obj.Status;
        //                                    //DbOrderDetails.Attach(detail);
        //                                    this.Entry(detail).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                            }
        //                            if (obj.ReDispatchCount == 0)
        //                            {
        //                                RedispatchWarehouse RO = new RedispatchWarehouse();
        //                                RO.active = true;
        //                                RO.comments = obj.comments;
        //                                RO.CompanyId = ODM.CompanyId;
        //                                RO.CreatedDate = indianTime;
        //                                RO.UpdatedDate = indianTime;
        //                                RO.DboyMobileNo = obj.DboyMobileNo;
        //                                RO.DboyName = obj.DboyName;
        //                                RO.Deleted = false;
        //                                RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                                RO.OrderId = obj.OrderId;
        //                                RO.WarehouseId = obj.WarehouseId;
        //                                RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                RO.Status = obj.Status;
        //                                RedispatchWarehouseDb.Add(RO);
        //                                this.Commit();
        //                            }
        //                            else
        //                            {
        //                                try
        //                                {
        //                                    var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                    if (RO != null)
        //                                    {
        //                                        RO.Status = obj.Status;
        //                                        RO.comments = obj.comments;
        //                                        RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                        RO.UpdatedDate = indianTime;
        //                                        //RedispatchWarehouseDb.Attach(RO);
        //                                        this.Entry(RO).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                    else
        //                                    {
        //                                        RO = new RedispatchWarehouse();
        //                                        RO.active = true;
        //                                        RO.comments = obj.comments;
        //                                        RO.CompanyId = ODM.CompanyId;
        //                                        RO.CreatedDate = indianTime;
        //                                        RO.UpdatedDate = indianTime;
        //                                        RO.DboyMobileNo = obj.DboyMobileNo;
        //                                        RO.DboyName = obj.DboyName;
        //                                        RO.Deleted = false;
        //                                        RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                                        RO.OrderId = obj.OrderId;
        //                                        RO.WarehouseId = obj.WarehouseId;
        //                                        RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                        RO.Status = obj.Status;
        //                                        RedispatchWarehouseDb.Add(RO);
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error(ex.Message);
        //                                }
        //                            }
        //                        }
        //                        return obj;

        //                    }
        //                    else
        //                    {
        //                        logger.Warn("00124 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                    }
        //                }
        //                else
        //                {
        //                    logger.Warn("00114 Delivery Issuence id not set.");
        //                }
        //            }
        //            catch (Exception esd)
        //            {
        //                logger.Error("Error:00104 " + esd.Message);
        //            }
        //        }
        //        return null;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}


        ////New Dapp By Harry 15May2019
        //public OrderPlaceDTO orderUpdateDappV1(OrderPlaceDTO obj)
        //{
        //    try
        //    {
        //        People People = new People();
        //        try
        //        {
        //            People = Peoples.Where(x => x.Mobile == obj.DboyMobileNo).FirstOrDefault();
        //        }
        //        catch (Exception ss)
        //        {
        //        }
        //        try
        //        {
        //            DeliveryIssuance DeliveryIssuance = DeliveryIssuanceDb.Where(x => x.DeliveryIssuanceId == obj.DeliveryIssuanceId).FirstOrDefault();
        //            if (DeliveryIssuance.Status == "Pending")
        //            {
        //            }
        //            else
        //            {

        //                DeliveryIssuance.Status = "Pending";
        //                DeliveryIssuance.UpdatedDate = indianTime;
        //                //DeliveryIssuanceDb.Attach(DeliveryIssuance);
        //                this.Entry(DeliveryIssuance).State = EntityState.Modified;
        //                this.Commit();
        //            }
        //        }
        //        catch (Exception ss)
        //        {
        //            logger.Error("Error:00104 ss " + ss.Message);
        //        }

        //        if (obj.Status == "Delivered" && obj.DeliveryIssuanceId > 0)
        //        {
        //            var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").FirstOrDefault();

        //            #region Payments 

        //            if (obj.CheckAmount > 0)
        //            {

        //                var ChequeOldEntries = PaymentResponseRetailerAppDb.Where(z => z.OrderId == obj.OrderId && z.PaymentFrom == "Cheque" && z.status == "Success").ToList();
        //                if (ChequeOldEntries != null && ChequeOldEntries.Any())
        //                {
        //                    foreach (var Cheque in ChequeOldEntries)
        //                    {
        //                        Cheque.status = "Failed";
        //                        Cheque.statusDesc = "Due to double Cheque request from DeliveryApp";
        //                        this.Entry(Cheque).State = EntityState.Modified;
        //                    }
        //                }

        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = "Cheque",
        //                    statusDesc = "Due to Delivery",
        //                    amount = Math.Round(obj.CheckAmount, 0),
        //                    GatewayTransId = obj.CheckNo
        //                });
        //            }

        //            if (obj.mPosAmount > 0)
        //            {

        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    PaymentFrom = "mPos",
        //                    statusDesc = "Due to Delivery",
        //                    amount = Math.Round(obj.mPosAmount, 0),
        //                    GatewayTransId = obj.ElectronicPaymentNo
        //                });
        //            }

        //            if (obj.ElectronicAmount > 0)
        //            {
        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    statusDesc = "Due to Delivery",
        //                    PaymentFrom = obj.paymentThrough,
        //                    amount = Math.Round(obj.ElectronicAmount, 0),
        //                    GatewayTransId = obj.ElectronicPaymentNo
        //                });
        //            }


        //            var cashpayment = PaymentResponseRetailerAppDb.FirstOrDefault(x => x.OrderId == obj.OrderId && x.status == "Success" && x.PaymentFrom == "Cash");
        //            if (cashpayment != null)
        //            {
        //                cashpayment.amount = obj.CashAmount;
        //                cashpayment.UpdatedDate = indianTime;
        //                cashpayment.status = obj.CashAmount > 0 ? cashpayment.status : "Failed";
        //                cashpayment.statusDesc = "Due to Delivery";
        //                this.Entry(cashpayment).State = EntityState.Modified;
        //            }
        //            else if (cashpayment == null && obj.CashAmount > 0)
        //            {
        //                PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
        //                {
        //                    OrderId = obj.OrderId,
        //                    status = "Success",
        //                    CreatedDate = indianTime,
        //                    UpdatedDate = indianTime,
        //                    statusDesc = "Due to Delivery",
        //                    PaymentFrom = "Cash",
        //                    amount = Math.Round(obj.CashAmount, 0)
        //                });
        //            }
        //            #endregion


        //            var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").FirstOrDefault();

        //            if (sid != null)
        //            {
        //                sid.Status = obj.Status;
        //                sid.comments = obj.comments;
        //                sid.CheckNo = obj.CheckNo;
        //                sid.CheckAmount = obj.CheckAmount;
        //                sid.ElectronicPaymentType = obj.ElectronicPaymentType;
        //                sid.ElectronicAmount = obj.ElectronicAmount;
        //                sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                sid.RecivedAmount = obj.RecivedAmount;
        //                sid.CashAmount = obj.CashAmount;
        //                sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                sid.UpdatedDate = indianTime;
        //                sid.ChequeBankName = obj.ChequeBankName;
        //                sid.ChequeDate = obj.ChequeDate;
        //                sid.DeliveryLat = obj.DeliveryLat;
        //                sid.DeliveryLng = obj.DeliveryLng; //added on 08/07/02019 
        //                                                   //OrderDeliveryMasterDB.Attach(sid);
        //                this.Entry(sid).State = EntityState.Modified;
        //                // this.SaveChanges();

        //                if (ODM != null)
        //                {
        //                    ODM.Status = obj.Status;
        //                    ODM.ReDispatchedStatus = obj.Status;
        //                    ODM.comments = obj.comments;
        //                    ODM.CheckNo = obj.CheckNo;
        //                    ODM.CheckAmount = obj.CheckAmount;
        //                    ODM.ElectronicPaymentType = obj.ElectronicPaymentType;
        //                    ODM.ElectronicAmount = obj.ElectronicAmount;
        //                    ODM.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                    ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                    ODM.ChequeBankName = obj.ChequeBankName;
        //                    ODM.ChequeDate = obj.ChequeDate;
        //                    ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                    try
        //                    {
        //                        if (obj.ElectronicAmount > 0 && obj.IsElectronicPayment == true)
        //                        {
        //                            ODM.Trupay = "true";
        //                            ODM.paymentThrough = obj.paymentThrough;
        //                            ODM.paymentMode = obj.paymentMode;
        //                            ODM.TrupayTransactionId = ODM.ElectronicPaymentNo;
        //                            TrupayTransaction tpt = new TrupayTransaction();
        //                            tpt.paymentMode = ODM.paymentMode;
        //                            tpt.TrupayTransactionId = ODM.TrupayTransactionId;
        //                            tpt.paymentThrough = ODM.paymentThrough;
        //                            tpt.TrupayTransactionStatus = ODM.Trupay;
        //                            tpt.CustomerName = ODM.CustomerName;
        //                            tpt.Status = "From Delivery";
        //                            tpt.Skcode = ODM.Skcode;
        //                            tpt.WarehouseName = ODM.WarehouseName; ;
        //                            tpt.OnlineAmount = ODM.ElectronicAmount;
        //                            tpt.OnlineServiceTax = ODM.OnlineServiceTax;
        //                            tpt.CreatedDate = indianTime;
        //                            this.TrupayTransactionDB.Add(tpt);
        //                            // this.SaveChanges();
        //                        }
        //                    }
        //                    catch (Exception ess)
        //                    {
        //                        logger.Error("Error:00104 ess " + ess.Message);
        //                    }
        //                    ODM.RecivedAmount = obj.RecivedAmount;
        //                    ODM.Signimg = obj.Signimg;
        //                    ODM.CashAmount = obj.CashAmount;
        //                    ODM.UpdatedDate = indianTime;
        //                    ODM.OnlineServiceTax = obj.OnlineServiceTax;

        //                    ODM.DeliveryLat = obj.DeliveryLat;//added on 08/07/02019 
        //                    ODM.DeliveryLng = obj.DeliveryLng;
        //                    //OrderDispatchedMasters.Attach(ODM);
        //                    this.Entry(ODM).State = EntityState.Modified;
        //                    //this.SaveChanges();
        //                    //#region call to whatsapp Bot 
        //                    //try
        //                    //{
        //                    //    //CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
        //                    //    //Customer custdata = Customers.Where(x => x.Skcode == ODM.Skcode).FirstOrDefault();
        //                    //    //cust.Name = custdata.Name;//  customer Name
        //                    //    //cust.Mobile = custdata.Mobile;// Customer Mobile No
        //                    //    //cust.TemppleteId = 26;//send for template
        //                    //    //cust.OrderedDate = ODM.UpdatedDate.Date;//send for status
        //                    //    //cust.OrderId = ODM.OrderId;//send for Order Id

        //                    //    //Customersms(cust);
        //                    //}
        //                    //catch (Exception ex) { }
        //                    //#endregion
        //                    #region Order Master History for Status Delivered



        //                    try
        //                    {
        //                        OrderMasterHistories h1 = new OrderMasterHistories();
        //                        if (ODM != null)
        //                        {
        //                            h1.orderid = ODM.OrderId;
        //                            h1.Status = ODM.Status;
        //                            h1.Reasoncancel = null;
        //                            h1.Warehousename = ODM.WarehouseName;
        //                            h1.DeliveryIssuanceId = obj.DeliveryIssuanceId;//by sudhir 06-06-2019
        //                            h1.username = People.DisplayName != null ? People.DisplayName : People.PeopleFirstName; ;
        //                            h1.userid = People.PeopleID;
        //                            h1.CreatedDate = DateTime.Now;
        //                            OrderMasterHistoriesDB.Add(h1);
        //                            // int id = this.SaveChanges();
        //                        }

        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                    }
        //                    #endregion

        //                    //foreach (var detail in ODM.orderDetails)
        //                    //{
        //                    //    detail.Status = obj.Status;
        //                    //    detail.UpdatedDate = indianTime;
        //                    //    //OrderDispatchedDetailss.Attach(detail);
        //                    //    this.Entry(detail).State = EntityState.Modified;
        //                    //    //this.SaveChanges();
        //                    //}
        //                    if (ODM.ReDispatchCount > 0)
        //                    {
        //                        try
        //                        {
        //                            var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                            if (RO != null)
        //                            {
        //                                RO.Status = obj.Status;
        //                                RO.comments = obj.comments;
        //                                RO.UpdatedDate = indianTime;
        //                                //RedispatchWarehouseDb.Attach(RO);
        //                                this.Entry(RO).State = EntityState.Modified;
        //                                // this.SaveChanges();
        //                            }
        //                        }
        //                        catch (Exception ex)
        //                        {

        //                            logger.Error("Error loading  sewrewr \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                        }
        //                    }
        //                    #region for Delivery dial On Order Delivered 
        //                    try
        //                    {
        //                        if (ODM.TotalAmount > 2000)
        //                        {
        //                            DialPoint dp = new DialPoint();
        //                            dp.SalesPersonId = ODM.SalesPersonId;
        //                            dp.Mobile = ODM.Customerphonenum;
        //                            dp.Skcode = ODM.Skcode;
        //                            dp.ShopName = ODM.ShopName;
        //                            dp.CustomerId = ODM.CustomerId;
        //                            dp.OrderId = ODM.OrderId;
        //                            dp.OrderAmount = System.Math.Round(ODM.TotalAmount);
        //                            double? st = (dp.OrderAmount * 0.05) / 100;
        //                            int stm = Convert.ToInt32(st);
        //                            if (stm > 0)
        //                            {
        //                                dp.point = 10 * stm;
        //                            }
        //                            dp.CreatedDate = indianTime;
        //                            dp.UpdatedDate = indianTime;
        //                            DialPointDB.Add(dp);
        //                            //int idd = this.SaveChanges();

        //                            try
        //                            {
        //                                // ForDialNotification(ODM.CustomerId, ODM.OrderId);
        //                            }
        //                            catch (Exception ex) { logger.Error("Error loading sdfgsdf  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace); }

        //                        }

        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Error("Error loading wqrewqrewr \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                    }
        //                    #endregion

        //                    var ODMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                    if (ODMaster != null)
        //                    {
        //                        ODMaster.Status = "Delivered";
        //                        ODMaster.comments = obj.comments;
        //                        ODMaster.DeliveredDate = indianTime;
        //                        ODMaster.UpdatedDate = indianTime;

        //                        if (obj.ElectronicAmount > 0 && obj.IsElectronicPayment == true)//only Delivery app Harry
        //                        {
        //                            ODMaster.Trupay = "true";
        //                            ODMaster.paymentThrough = obj.paymentThrough;
        //                            ODMaster.paymentMode = obj.paymentMode;
        //                            ODMaster.TrupayTransactionId = ODM.ElectronicPaymentNo;
        //                        }
        //                        //DbOrderMaster.Attach(ODMaster);
        //                        this.Entry(ODMaster).State = EntityState.Modified;
        //                        //this.SaveChanges();
        //                        foreach (var detail in ODMaster.orderDetails)
        //                        {
        //                            detail.Status = obj.Status;
        //                            detail.UpdatedDate = indianTime;
        //                            //DbOrderDetails.Attach(detail);
        //                            this.Entry(detail).State = EntityState.Modified;
        //                            //this.SaveChanges();
        //                        }
        //                        Wallet wlt = WalletDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                        if (wlt != null)
        //                        {
        //                            if (ODMaster.RewardPoint > 0)
        //                            {
        //                                try
        //                                {
        //                                    CustomerWalletHistory CWH = new CustomerWalletHistory();
        //                                    CWH.WarehouseId = ODMaster.WarehouseId;
        //                                    CWH.CompanyId = ODMaster.CompanyId;
        //                                    CWH.CustomerId = wlt.CustomerId;
        //                                    CWH.NewAddedWAmount = ODMaster.RewardPoint;
        //                                    CWH.OrderId = ODMaster.OrderId;
        //                                    CWH.Through = "From Order Delivered";
        //                                    CWH.TotalWalletAmount = wlt.TotalAmount + ODMaster.RewardPoint;
        //                                    CWH.CreatedDate = indianTime;
        //                                    CWH.UpdatedDate = indianTime;
        //                                    CustomerWalletHistoryDb.Add(CWH);
        //                                    ///int idd = this.SaveChanges();
        //                                }
        //                                catch (Exception ex) { }

        //                                wlt.TotalAmount += ODMaster.RewardPoint;
        //                                try
        //                                {
        //                                    ForDeliveredNotification(wlt.CustomerId, ODMaster.RewardPoint, ODMaster.OrderId);
        //                                }
        //                                catch (Exception ex) { logger.Error("Error loading wqewqerwqr \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace); }

        //                                wlt.TransactionDate = indianTime;
        //                                //WalletDb.Attach(wlt);
        //                                Entry(wlt).State = EntityState.Modified;
        //                                //SaveChanges();

        //                                var rpoint = RewardPointDb.Where(c => c.CustomerId == ODMaster.CustomerId).SingleOrDefault();
        //                                if (rpoint != null)
        //                                {
        //                                    rpoint.EarningPoint -= ODMaster.RewardPoint;
        //                                    if (rpoint.EarningPoint < 0)
        //                                        rpoint.EarningPoint = 0;
        //                                    rpoint.UpdatedDate = indianTime;
        //                                    //RewardPointDb.Attach(rpoint);
        //                                    Entry(rpoint).State = EntityState.Modified;
        //                                    //SaveChanges();
        //                                }
        //                            }
        //                        }
        //                    }

        //                }
        //            }

        //            #region Kisan Dan Insert
        //            try
        //            {
        //                var deliveryassignmentid = obj.DeliveryIssuanceId;
        //                string query = "select a.customerid,a.orderid,"
        //                + " sum(case when subCategoryName = 'kisan kirana' then qty * UnitPrice else 0 end) KisanKiranaAmount, "
        //                + " sum(qty * UnitPrice) OrderAmount from OrderDispatchedDetails a with(nolock) inner join OrderDispatchedMasters b on a.OrderDispatchedMasterId = b.OrderDispatchedMasterId"
        //                + " and b.Status = 'Delivered'"
        //                + " and b.DeliveryIssuanceIdOrderDeliveryMaster = '" + deliveryassignmentid + "'"
        //                + " group by a.CustomerId,a.orderid having  sum(case when subCategoryName = 'kisan kirana' then qty * UnitPrice else 0 end)> 0";



        //                var kisanDanMasters = kisanDanMaster.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).ToList();

        //                var data = Database.SqlQuery<CustomerKisanDanDTO>(query).ToList();

        //                CustomerKisanDan newdata = new CustomerKisanDan();
        //                foreach (var item in data)
        //                {
        //                    if (!this.CustomerKisanDan.Any(x => x.OrderId == item.OrderId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)))
        //                    {

        //                        newdata = new CustomerKisanDan();
        //                        newdata.CustomerId = item.CustomerId;
        //                        newdata.OrderId = item.OrderId;
        //                        newdata.KisanKiranaAmount = Convert.ToDecimal(item.KisanKiranaAmount);
        //                        newdata.IsActive = true;
        //                        newdata.IsDeleted = false;
        //                        newdata.CreatedBy = People.PeopleID;
        //                        newdata.CreatedDate = indianTime;

        //                        if (newdata.KisanKiranaAmount > 0 && kisanDanMasters != null && kisanDanMasters.Any())
        //                        {
        //                            var percent = kisanDanMasters.Any(x => x.OrderFromAmount <= newdata.KisanKiranaAmount && x.OrderToAmount >= newdata.KisanKiranaAmount) ? kisanDanMasters.FirstOrDefault(x => x.OrderFromAmount <= newdata.KisanKiranaAmount && x.OrderToAmount >= newdata.KisanKiranaAmount).KisanDanPrecentage : 0;
        //                            newdata.KisanDanAmount = newdata.KisanKiranaAmount * percent / 100;
        //                        }
        //                        this.CustomerKisanDan.Add(newdata);

        //                    }
        //                }
        //            }

        //            catch (Exception ex)
        //            {
        //                string error = ex.InnerException != null ? ex.ToString() + Environment.NewLine + ex.InnerException.ToString() : ex.ToString();

        //                logger.Error("Error in During Add KisanDan Point For Assignment Id: " + obj.DeliveryIssuanceId + " Error: " + error);
        //            }

        //            #endregion
        //            this.Commit();
        //            return obj;

        //        }
        //        else if (obj.Status == "Delivery Canceled")
        //        {
        //            try
        //            {
        //                var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();

        //                try
        //                {
        //                    if (obj.DeliveryIssuanceId > 0)
        //                    {
        //                        var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                        if (sid != null)
        //                        {
        //                            sid.Status = obj.Status;
        //                            sid.comments = obj.comments;
        //                            sid.CheckNo = obj.CheckNo;
        //                            sid.CheckAmount = obj.CheckAmount;
        //                            sid.ElectronicAmount = obj.ElectronicAmount;
        //                            sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                            sid.RecivedAmount = obj.RecivedAmount;
        //                            sid.CashAmount = obj.CashAmount;
        //                            sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                            sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                            sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                            sid.ChequeBankName = obj.ChequeBankName;
        //                            sid.ChequeDate = obj.ChequeDate;
        //                            sid.UpdatedDate = indianTime;
        //                            sid.DeliveryLat = obj.DeliveryLat;//added on 08/07/02019 
        //                            sid.DeliveryLng = obj.DeliveryLng;
        //                            //OrderDeliveryMasterDB.Attach(sid);
        //                            this.Entry(sid).State = EntityState.Modified;
        //                            this.Commit();

        //                            if (ODM != null)
        //                            {
        //                                ODM.Status = obj.Status;
        //                                ODM.CanceledStatus = obj.Status;
        //                                ODM.comments = obj.comments;
        //                                ODM.Signimg = obj.Signimg;
        //                                ODM.UpdatedDate = indianTime;
        //                                ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                                ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                                ODM.ChequeBankName = obj.ChequeBankName;
        //                                ODM.ChequeDate = obj.ChequeDate;
        //                                ODM.DeliveryLat = obj.DeliveryLat;//added on 08/07/02019 
        //                                ODM.DeliveryLng = obj.DeliveryLng;
        //                                //OrderDispatchedMasters.Attach(ODM);
        //                                this.Entry(ODM).State = EntityState.Modified;
        //                                this.Commit();
        //                                //#region call to whatsapp Bot 
        //                                //try
        //                                //{
        //                                //    CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
        //                                //    Customer custdata = Customers.Where(x => x.Skcode == ODM.Skcode).FirstOrDefault();
        //                                //    cust.Name = custdata.Name;//  customer Name
        //                                //    cust.Mobile = custdata.Mobile;// Customer Mobile No
        //                                //    cust.TemppleteId = 28;//send for template
        //                                //    cust.OrderedDate = ODM.UpdatedDate.Date;//send for status
        //                                //    cust.OrderId = ODM.OrderId;//send for Order Id

        //                                //    Customersms(cust);
        //                                //}
        //                                //catch (Exception ex) { }
        //                                //#endregion
        //                                #region Order Master History for Status Delivery Canceled

        //                                try
        //                                {
        //                                    OrderMasterHistories h1 = new OrderMasterHistories();
        //                                    if (ODM != null)
        //                                    {
        //                                        h1.orderid = ODM.OrderId;
        //                                        h1.Status = ODM.Status;
        //                                        h1.Reasoncancel = null;
        //                                        h1.Warehousename = ODM.WarehouseName;
        //                                        h1.DeliveryIssuanceId = obj.DeliveryIssuanceId;
        //                                        h1.username = People.DisplayName != null ? People.DisplayName : People.PeopleFirstName; ;
        //                                        h1.userid = People.PeopleID;
        //                                        h1.CreatedDate = DateTime.Now;
        //                                        OrderMasterHistoriesDB.Add(h1);
        //                                        int id = this.Commit();
        //                                    }

        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                                }
        //                                #endregion

        //                                //foreach (var detail in ODM.orderDetails)
        //                                //{
        //                                //    detail.Status = obj.Status;
        //                                //    detail.UpdatedDate = indianTime;
        //                                //    //OrderDispatchedDetailss.Attach(detail);
        //                                //    this.Entry(detail).State = EntityState.Modified;
        //                                //    this.Commit();
        //                                //}
        //                                var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                                if (OMaster != null)
        //                                {
        //                                    OMaster.Status = obj.Status;
        //                                    OMaster.comments = obj.comments;
        //                                    OMaster.UpdatedDate = indianTime;
        //                                    //DbOrderMaster.Attach(OMaster);
        //                                    this.Entry(OMaster).State = EntityState.Modified;
        //                                    this.Commit();
        //                                    foreach (var detail in OMaster.orderDetails)
        //                                    {
        //                                        detail.Status = obj.Status;
        //                                        detail.UpdatedDate = indianTime;
        //                                        //DbOrderDetails.Attach(detail);
        //                                        this.Entry(detail).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                try
        //                                {
        //                                    var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                    if (RO != null)
        //                                    {
        //                                        RO.Status = obj.Status;
        //                                        RO.comments = obj.comments;
        //                                        RO.UpdatedDate = indianTime;
        //                                        //RedispatchWarehouseDb.Attach(RO);
        //                                        this.Entry(RO).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                catch (Exception ex) { logger.Error(ex.Message); }
        //                            }
        //                            return obj;
        //                        }
        //                        else
        //                        {
        //                            logger.Warn("00123 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        logger.Warn("00113 Delivery Issuence id not set");
        //                    }
        //                }
        //                catch (Exception esd)
        //                {
        //                    logger.Error("Error:00103 " + esd.Message);
        //                }
        //            }
        //            catch (Exception ex) { logger.Error(ex.Message); }
        //        }
        //        else if (obj.Status == "Delivery Redispatch")
        //        {
        //            var ODM = OrderDispatchedMasters.Where(x => x.OrderDispatchedMasterId == obj.OrderDispatchedMasterId).Include("orderDetails").SingleOrDefault();
        //            try
        //            {
        //                if (obj.DeliveryIssuanceId > 0)
        //                {
        //                    var sid = OrderDeliveryMasterDB.Where(z => z.DeliveryIssuanceId == obj.DeliveryIssuanceId && z.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();

        //                    if (sid != null)
        //                    {
        //                        sid.Status = obj.Status;
        //                        sid.comments = obj.comments;
        //                        sid.CheckNo = obj.CheckNo;
        //                        sid.CheckAmount = obj.CheckAmount;
        //                        sid.ElectronicAmount = obj.ElectronicAmount;
        //                        sid.ElectronicPaymentNo = obj.ElectronicPaymentNo;
        //                        sid.RecivedAmount = obj.RecivedAmount;
        //                        sid.CashAmount = obj.CashAmount;
        //                        sid.OnlineServiceTax = obj.OnlineServiceTax;
        //                        sid.IsElectronicPayment = obj.IsElectronicPayment;
        //                        sid.ChequeImageUrl = obj.ChequeImageUrl;
        //                        sid.ChequeBankName = obj.ChequeBankName;
        //                        sid.ChequeDate = obj.ChequeDate;
        //                        sid.UpdatedDate = indianTime;
        //                        sid.DeliveryLat = obj.DeliveryLat;//added on 08/07/02019 
        //                        sid.DeliveryLng = obj.DeliveryLng;
        //                        //OrderDeliveryMasterDB.Attach(sid);
        //                        this.Entry(sid).State = EntityState.Modified;
        //                        this.Commit();

        //                        if (ODM != null)
        //                        {
        //                            ODM.Status = "Delivery Redispatch";
        //                            ODM.ReDispatchedStatus = "Delivery Redispatch";
        //                            ODM.ReDispatchCount = ODM.ReDispatchCount + 1;
        //                            ODM.Signimg = obj.Signimg;
        //                            ODM.comments = obj.comments;
        //                            ODM.IsElectronicPayment = obj.IsElectronicPayment;
        //                            ODM.ChequeImageUrl = obj.ChequeImageUrl;
        //                            ODM.ChequeBankName = obj.ChequeBankName;
        //                            ODM.ChequeDate = obj.ChequeDate;
        //                            ODM.UpdatedDate = indianTime;
        //                            ODM.DeliveryLat = obj.DeliveryLat;//added on 08/07/02019 
        //                            ODM.DeliveryLng = obj.DeliveryLng;
        //                            //OrderDispatchedMasters.Attach(ODM);
        //                            this.Entry(ODM).State = EntityState.Modified;
        //                            this.Commit();

        //                            #region Order Master History for Status Delivery Redispatch

        //                            try
        //                            {
        //                                OrderMasterHistories h1 = new OrderMasterHistories();
        //                                if (ODM != null)
        //                                {
        //                                    h1.orderid = ODM.OrderId;
        //                                    h1.Status = ODM.Status;
        //                                    h1.Reasoncancel = null;
        //                                    h1.Warehousename = ODM.WarehouseName;
        //                                    h1.DeliveryIssuanceId = obj.DeliveryIssuanceId;
        //                                    h1.username = People.DisplayName != null ? People.DisplayName : People.PeopleFirstName; ;
        //                                    h1.userid = People.PeopleID;
        //                                    h1.CreatedDate = DateTime.Now;
        //                                    OrderMasterHistoriesDB.Add(h1);
        //                                    int id = this.Commit();
        //                                }

        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                            }
        //                            #endregion

        //                            //foreach (var detail in ODM.orderDetails)
        //                            //{
        //                            //    detail.Status = obj.Status;
        //                            //    //OrderDispatchedDetailss.Attach(detail);
        //                            //    this.Entry(detail).State = EntityState.Modified;
        //                            //    this.Commit();
        //                            //}
        //                            var OMaster = DbOrderMaster.Where(x => x.OrderId == obj.OrderId).Include("orderDetails").SingleOrDefault();
        //                            if (OMaster != null)
        //                            {
        //                                OMaster.Status = obj.Status;
        //                                OMaster.comments = obj.comments;
        //                                OMaster.UpdatedDate = indianTime;
        //                                OMaster.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                //DbOrderMaster.Attach(OMaster);
        //                                this.Entry(OMaster).State = EntityState.Modified;
        //                                this.Commit();
        //                                foreach (var detail in OMaster.orderDetails)
        //                                {
        //                                    detail.Status = obj.Status;
        //                                    //DbOrderDetails.Attach(detail);
        //                                    this.Entry(detail).State = EntityState.Modified;
        //                                    this.Commit();
        //                                }
        //                            }
        //                            if (obj.ReDispatchCount == 0)
        //                            {
        //                                RedispatchWarehouse RO = new RedispatchWarehouse();
        //                                RO.active = true;
        //                                RO.comments = obj.comments;
        //                                RO.CompanyId = ODM.CompanyId;
        //                                RO.CreatedDate = indianTime;
        //                                RO.UpdatedDate = indianTime;
        //                                RO.DboyMobileNo = obj.DboyMobileNo;
        //                                RO.DboyName = obj.DboyName;
        //                                RO.Deleted = false;
        //                                RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                                RO.OrderId = obj.OrderId;
        //                                RO.WarehouseId = obj.WarehouseId;
        //                                RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                RO.Status = obj.Status;
        //                                RedispatchWarehouseDb.Add(RO);
        //                                this.Commit();
        //                            }
        //                            else
        //                            {
        //                                try
        //                                {
        //                                    var RO = RedispatchWarehouseDb.Where(x => x.OrderId == obj.OrderId && x.DboyMobileNo == obj.DboyMobileNo).SingleOrDefault();
        //                                    if (RO != null)
        //                                    {
        //                                        RO.Status = obj.Status;
        //                                        RO.comments = obj.comments;
        //                                        RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                        RO.UpdatedDate = indianTime;
        //                                        //RedispatchWarehouseDb.Attach(RO);
        //                                        this.Entry(RO).State = EntityState.Modified;
        //                                        this.Commit();
        //                                    }
        //                                    else
        //                                    {
        //                                        RO = new RedispatchWarehouse();
        //                                        RO.active = true;
        //                                        RO.comments = obj.comments;
        //                                        RO.CompanyId = ODM.CompanyId;
        //                                        RO.CreatedDate = indianTime;
        //                                        RO.UpdatedDate = indianTime;
        //                                        RO.DboyMobileNo = obj.DboyMobileNo;
        //                                        RO.DboyName = obj.DboyName;
        //                                        RO.Deleted = false;
        //                                        RO.OrderDispatchedMasterId = obj.OrderDispatchedMasterId;
        //                                        RO.OrderId = obj.OrderId;
        //                                        RO.WarehouseId = obj.WarehouseId;
        //                                        RO.ReDispatchCount = obj.ReDispatchCount + 1;
        //                                        RO.Status = obj.Status;
        //                                        RedispatchWarehouseDb.Add(RO);
        //                                        this.Commit();
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error(ex.Message);
        //                                }
        //                            }
        //                        }
        //                        return obj;

        //                    }
        //                    else
        //                    {
        //                        logger.Warn("00124 sid is null" + sid + "DeliveryIssuanceId: " + obj.DeliveryIssuanceId + " & Order Id" + obj.OrderId);
        //                    }
        //                }
        //                else
        //                {
        //                    logger.Warn("00114 Delivery Issuence id not set.");
        //                }
        //            }
        //            catch (Exception esd)
        //            {
        //                logger.Error("Error:00104 " + esd.Message);
        //            }
        //        }
        //        return null;
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error(ex.Message);
        //        return null;
        //    }
        //}

        //#endregion
        #region Order Dial Notification
        private async Task<bool> ForDialNotification(int CustomerId, int OrderId)
        {
            bool res = false;
            //Notification notification = new Notification();
            //notification.title = "बधाई हो ! ";
            //notification.Message = "बधाई हो ! आर्डर OrderId:" + OrderId + " डिलीवरी पर आपको डायल मिला है!";
            //notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
            //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
            //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            //string id11 = ConfigurationManager.AppSettings["FcmApiId"];
            //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            //tRequest.Method = "post";
            //var objNotification = new
            //{
            //    to = customers.fcmId,
            //    notification = new
            //    {
            //        title = notification.title,
            //        body = notification.Message,
            //        icon = notification.Pic
            //    }
            //};

            //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
            //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
            //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
            //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
            //tRequest.ContentLength = byteArray.Length;
            //tRequest.ContentType = "application/json";
            //using (Stream dataStream = tRequest.GetRequestStream())
            //{
            //    dataStream.Write(byteArray, 0, byteArray.Length);
            //    using (WebResponse tResponse = tRequest.GetResponse())
            //    {
            //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
            //        {
            //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
            //            {
            //                String responseFromFirebaseServer = tReader.ReadToEnd();
            //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
            //                if (response.success == 1)
            //                {
            //                    Console.Write(response);
            //                }
            //                else if (response.failure == 1)
            //                {
            //                    Console.Write(response);
            //                }
            //            }
            //        }
            //    }
            //}
            var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
            var data = new FCMData
            {
                title = "बधाई हो ! ",
                body = "बधाई हो ! आर्डर OrderId:" + OrderId + " डिलीवरी पर आपको डायल मिला है!",
                image_url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",

            };
            string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            var firebaseService = new FirebaseNotificationServiceHelper(Key);
            var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
            if (result != null)
            {
                res = true;
            }
            else
            {
                res = false;
            }
            return res;
        }
        #endregion
        #region Order Delivered Notification
        public async Task<bool> ForDeliveredNotification(int CustomerId, double? RewardPoint, int OrderId)
        {
            bool res = false;
            //Notification notification = new Notification();
            //notification.title = "बधाई हो ! ";
            //notification.Message = "बधाई हो ! आर्डर OrderId:" + OrderId + " डिलीवरी पर आपके वॉलेट में आये " + RewardPoint + " पॉइंट";
            //notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";

            //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
            ////AddNotification(notification);
            //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            //string id11 = ConfigurationManager.AppSettings["FcmApiId"];
            //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            //tRequest.Method = "post";


            //var objNotification = new
            //{
            //    to = customers.fcmId,
            //    notification = new
            //    {
            //        title = notification.title,
            //        body = notification.Message,
            //        icon = notification.Pic
            //    }
            //};

            //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
            //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
            //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
            //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
            //tRequest.ContentLength = byteArray.Length;
            //tRequest.ContentType = "application/json";
            //using (Stream dataStream = tRequest.GetRequestStream())
            //{
            //    dataStream.Write(byteArray, 0, byteArray.Length);
            //    using (WebResponse tResponse = tRequest.GetResponse())
            //    {
            //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
            //        {
            //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
            //            {
            //                String responseFromFirebaseServer = tReader.ReadToEnd();
            //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
            //                if (response.success == 1)
            //                {
            //                    Console.Write(response);
            //                }
            //                else if (response.failure == 1)
            //                {
            //                    Console.Write(response);
            //                }
            //            }
            //        }
            //    }
            //}
            var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
            var data = new FCMData
            {
                title = "बधाई हो ! ",
                body = "बधाई हो ! आर्डर OrderId:" + OrderId + " डिलीवरी पर आपके वॉलेट में आये " + RewardPoint + " पॉइंट",
                image_url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",

            };
            string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            var firebaseService = new FirebaseNotificationServiceHelper(Key);
            var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
            if (result != null)
            {
                res = true;
            }
            else
            {
                res = false;
            }
            return res;
        }
        #endregion
        public List<ReturnOrderDispatchedDetails> createreturnobj(OrderDispatchedMaster obj)
        {
            List<ReturnOrderDispatchedDetails> Returnlist = new List<ReturnOrderDispatchedDetails>();
            foreach (var RD in obj.orderDetails)
            {
                try
                {
                    ReturnOrderDispatchedDetails ROD = new ReturnOrderDispatchedDetails();
                    ROD.Barcode = RD.Barcode;
                    ROD.CategoryName = RD.CategoryName;
                    ROD.City = RD.City;
                    ROD.CompanyId = RD.CompanyId;
                    ROD.CreatedDate = RD.CreatedDate;
                    ROD.CustomerId = RD.CustomerId;
                    ROD.CustomerName = RD.CustomerName;
                    ROD.Deleted = RD.Deleted;
                    ROD.DiscountAmmount = RD.DiscountAmmount;
                    ROD.DiscountPercentage = RD.DiscountPercentage;
                    ROD.isDeleted = RD.isDeleted;
                    ROD.itemcode = RD.itemcode;
                    ROD.ItemId = RD.ItemId;
                    ROD.itemname = RD.itemname;
                    ROD.Itempic = RD.Itempic;
                    ROD.MinOrderQty = RD.MinOrderQty;
                    ROD.MinOrderQtyPrice = RD.MinOrderQtyPrice;
                    ROD.Mobile = RD.Mobile;
                    ROD.NetAmmount = RD.NetAmmount;
                    ROD.NetAmtAfterDis = RD.NetAmtAfterDis;
                    ROD.OrderDate = RD.OrderDate;
                    ROD.OrderDetailsId = RD.OrderDetailsId;
                    ROD.OrderDispatchedDetailsId = RD.OrderDispatchedDetailsId;
                    ROD.OrderDispatchedMasterId = RD.OrderDispatchedMasterId;
                    ROD.OrderId = RD.OrderId;
                    ROD.price = RD.price;
                    ROD.Purchaseprice = RD.Purchaseprice;
                    ROD.qty = RD.qty;
                    //ROD.Status = RD.Status;
                    ROD.TaxAmmount = RD.TaxAmmount;
                    ROD.TaxPercentage = RD.TaxPercentage;
                    ROD.TotalAmt = RD.TotalAmt;
                    ROD.UpdatedDate = RD.UpdatedDate;
                    ROD.UnitPrice = RD.UnitPrice;
                    ROD.WarehouseId = RD.WarehouseId;
                    ROD.WarehouseName = RD.WarehouseName;
                    Returnlist.Add(ROD);
                }
                catch (Exception ex)
                { logger.Error(ex.Message); return null; }
            }
            return Returnlist;
        }
        public List<ReturnOrderDispatchedDetails> ReturndeliveryOrders(List<ReturnOrderDispatchedDetails> po)
        {
            int Oid = po[0].OrderId;
            List<OrderDispatchedDetails> dispatchedobj = new List<OrderDispatchedDetails>();
            dispatchedobj = OrderDispatchedDetailss.Where(x => x.OrderId == Oid).ToList();
            List<FinalOrderDispatchedDetails> Finalobj = new List<FinalOrderDispatchedDetails>();
            try
            {
                for (var i = 0; i < dispatchedobj.Count; i++)
                {
                    for (var k = 0; k < po.Count; k++)
                    {
                        if (po[k].isDeleted != true && dispatchedobj[i].ItemId == po[k].ItemId)
                        {
                            dispatchedobj[i].qty = dispatchedobj[i].qty - po[k].qty;
                            var itemIDmaster = dispatchedobj[i].ItemId;
                            ItemMaster items = itemMasters.Where(x => x.ItemId == itemIDmaster).Select(x => x).FirstOrDefault();
                            FinalOrderDispatchedDetails newfinal = new FinalOrderDispatchedDetails();
                            newfinal.OrderDispatchedDetailsId = dispatchedobj[i].OrderDispatchedDetailsId;
                            newfinal.OrderDetailsId = dispatchedobj[i].OrderDetailsId;
                            newfinal.OrderId = dispatchedobj[i].OrderId;
                            newfinal.OrderDispatchedMasterId = dispatchedobj[i].OrderDispatchedMasterId;
                            newfinal.CustomerId = dispatchedobj[i].CustomerId;
                            newfinal.CustomerName = dispatchedobj[i].CustomerName;
                            newfinal.City = dispatchedobj[i].City;
                            newfinal.Mobile = dispatchedobj[i].Mobile;
                            newfinal.OrderDate = dispatchedobj[i].OrderDate;
                            newfinal.CompanyId = dispatchedobj[i].CompanyId;
                            newfinal.CityId = dispatchedobj[i].CityId;
                            newfinal.WarehouseId = dispatchedobj[i].WarehouseId;
                            newfinal.WarehouseName = dispatchedobj[i].WarehouseName;
                            newfinal.CategoryName = dispatchedobj[i].CategoryName;

                            newfinal.ItemId = dispatchedobj[i].ItemId;
                            newfinal.Itempic = dispatchedobj[i].Itempic;
                            newfinal.itemname = dispatchedobj[i].itemname;
                            newfinal.itemcode = dispatchedobj[i].itemcode;
                            newfinal.Barcode = dispatchedobj[i].Barcode;
                            newfinal.UnitPrice = dispatchedobj[i].UnitPrice;
                            newfinal.Purchaseprice = dispatchedobj[i].Purchaseprice;
                            newfinal.MinOrderQty = dispatchedobj[i].MinOrderQty;
                            newfinal.MinOrderQtyPrice = dispatchedobj[i].MinOrderQtyPrice;
                            newfinal.qty = dispatchedobj[i].qty;
                            newfinal.price = dispatchedobj[i].price;
                            newfinal.MinOrderQty = dispatchedobj[i].MinOrderQty;
                            int MOQ = dispatchedobj[i].MinOrderQty;
                            newfinal.MinOrderQtyPrice = MOQ * dispatchedobj[i].UnitPrice;
                            newfinal.qty = Convert.ToInt32(dispatchedobj[i].qty);

                            int qty = 0;
                            qty = Convert.ToInt32(newfinal.qty);

                            newfinal.TaxPercentage = items.TotalTaxPercentage;
                            //........CALCULATION FOR NEW SHOPKIRANA.............................
                            newfinal.Noqty = qty; // for total qty (no of items)

                            // STEP 1  (UNIT PRICE * QTY)     - SHOW PROPERTY                  
                            newfinal.TotalAmt = System.Math.Round(newfinal.UnitPrice * qty, 2);

                            // STEP 2 (AMOUT WITHOU TEX AND WITHOUT DISCOUNT ) - SHOW PROPERTY
                            newfinal.AmtWithoutTaxDisc = ((100 * newfinal.UnitPrice * qty) / (1 + newfinal.TaxPercentage / 100)) / 100;

                            // STEP 3 (AMOUNT WITHOUT TAX AFTER DISCOUNT) - UNSHOW PROPERTY
                            newfinal.AmtWithoutAfterTaxDisc = (100 * newfinal.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);

                            //STEP 4 (TAX AMOUNT) - UNSHOW PROPERTY
                            newfinal.TaxAmmount = (newfinal.AmtWithoutAfterTaxDisc * newfinal.TaxPercentage) / 100;

                            //STEP 5(TOTAL TAX AMOUNT) - UNSHOW PROPERTY
                            newfinal.TotalAmountAfterTaxDisc = newfinal.AmtWithoutAfterTaxDisc + newfinal.TaxAmmount;

                            //...............Calculate Discount.............................
                            newfinal.DiscountPercentage = items.PramotionalDiscount;
                            newfinal.DiscountAmmount = 0;
                            newfinal.NetAmtAfterDis = 0;
                            //...................................................................
                            newfinal.Purchaseprice = items.price;
                            //newfinal.VATTax = items.VATTax;
                            newfinal.CreatedDate = Convert.ToDateTime(dispatchedobj[i].CreatedDate);
                            newfinal.UpdatedDate = Convert.ToDateTime(dispatchedobj[i].CreatedDate);
                            newfinal.Deleted = false;

                            Finalobj.Add(newfinal);
                        }
                    }
                }
                foreach (FinalOrderDispatchedDetails x1 in Finalobj)
                {

                    this.FinalOrderDispatchedDetailsDb.Add(x1);
                    int id = this.Commit();
                }
                foreach (ReturnOrderDispatchedDetails pc in po)
                {
                    OrderMaster om = DbOrderMaster.Where(x => x.OrderId == pc.OrderId && x.Deleted == false).FirstOrDefault();
                    om.Status = "Order Canceled";
                    //this.DbOrderMaster.Attach(om);
                    this.Entry(om).State = EntityState.Modified;
                    this.Commit();

                    OrderDispatchedMaster odm = OrderDispatchedMasters.Where(x => x.OrderId == pc.OrderId && x.Deleted == false).Include("orderDetails").FirstOrDefault();
                    odm.Status = "Order Canceled";
                    //this.OrderDispatchedMasters.Attach(odm);
                    this.Entry(odm).State = EntityState.Modified;
                    this.Commit();

                    //update stock
                    ItemMaster master = itemMasters.Where(c => c.ItemId == pc.ItemId).SingleOrDefault();
                    CurrentStock itemm = DbCurrentStock.Where(x => x.ItemNumber == master.Number && x.WarehouseId == pc.WarehouseId).SingleOrDefault();

                    if (itemm != null)
                    {
                        itemm.CurrentInventory = Convert.ToInt32(itemm.CurrentInventory + (master.MinOrderQty * pc.qty));
                        UpdateCurrentStock(itemm);
                    }
                    var ord = DbOrderDetails.Where(r => r.OrderDetailsId == pc.OrderDetailsId).SingleOrDefault();
                    ord.Status = "Order Canceled";
                    //DbOrderDetails.Attach(ord);
                    this.Entry(ord).State = EntityState.Modified;
                    this.Commit();

                    AddReturnOrderDispatchedDetails(pc);
                }
                try
                {
                    OrderMaster om = DbOrderMaster.Where(x => x.OrderId == po[0].OrderId && x.Deleted == false).FirstOrDefault();
                    var rpoint = RewardPointDb.Where(c => c.CustomerId == om.CustomerId).FirstOrDefault();
                    if (rpoint != null)
                    {
                        if (om.RewardPoint > 0)
                        {
                            rpoint.EarningPoint -= om.RewardPoint;
                            if (rpoint.EarningPoint < 0)
                                rpoint.EarningPoint = 0;
                            rpoint.UpdatedDate = indianTime;
                            rpoint.TransactionDate = indianTime;
                            //RewardPointDb.Attach(rpoint);
                            this.Entry(rpoint).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                }
                catch (Exception ex) { }
                return po;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        #endregion
        #region Clusters
        public IEnumerable<Cluster> AllCluster(int compid)
        {
            if (Clusters.AsEnumerable().Count() > 0)
            {
                return Clusters.Where(p => p.CompanyId == compid && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<Cluster> Cluster = new List<Cluster>();
                return Cluster.AsEnumerable();
            }
        }
        public Cluster Addcluster(Cluster cluster)
        {
            if (cluster.WarehouseId > 0)
            {
                var wh = Warehouses.Where(x => x.WarehouseId == cluster.WarehouseId && x.CompanyId == cluster.CompanyId).SingleOrDefault();
                if (wh != null)
                {
                    cluster.WarehouseName = wh.WarehouseName;
                }
            }

            cluster.CreatedDate = indianTime;
            cluster.UpdatedDate = indianTime;
            Clusters.Add(cluster);
            int id = this.Commit();
            return cluster;
        }
        public Cluster UpdateCluster(Cluster cluster)
        {
            try
            {
                Cluster clust = Clusters.Where(x => x.ClusterId == cluster.ClusterId && x.Deleted == false && x.CompanyId == cluster.CompanyId).FirstOrDefault();
                if (clust != null)
                {
                    if (cluster.WarehouseId > 0)
                    {
                        var wh = Warehouses.Where(x => x.WarehouseId == cluster.WarehouseId && x.CompanyId == cluster.CompanyId).SingleOrDefault();
                        if (wh != null)
                        {
                            cluster.WarehouseName = wh.WarehouseName;
                        }
                    }

                    clust.ClusterName = cluster.ClusterName;
                    clust.WarehouseId = cluster.WarehouseId;
                    clust.WarehouseName = cluster.WarehouseName;
                    clust.Address = cluster.Address;
                    clust.Phone = cluster.Phone;
                    clust.Active = cluster.Active;
                    clust.CreatedDate = cluster.CreatedDate;
                    clust.UpdatedDate = indianTime;
                    //Clusters.Attach(clust);
                    this.Entry(clust).State = EntityState.Modified;
                    int id = this.Commit();
                    return clust;
                }
                else
                {
                    return clust;
                }
            }
            catch
            {
                return null;
            }
        }
        public bool DeleteCluster(int id, int CompanyId)
        {
            try
            {
                Cluster cl = Clusters.Where(x => x.ClusterId == id && x.CompanyId == CompanyId).FirstOrDefault();
                if (cl != null)
                {
                    cl.Deleted = true;
                    cl.Active = false;
                    //Clusters.Attach(cl);
                    this.Entry(cl).State = EntityState.Modified;
                    this.Commit();
                    return true;

                }
                else
                {
                    return false;
                }

            }
            catch
            {
                return false;
            }
        }
        public Cluster getClusterbyid(int id)
        {
            return Clusters.Where(p => p.ClusterId == id && p.Deleted == false).SingleOrDefault();
        }
        #endregion



        #region Reports 

        //order report Month wise
        public IList<OrderDetails> OrderMonthReport(DateTime? datefrom, DateTime? dateto)
        {
            if (dateto != null && datefrom != null)
            {
                var result = DbOrderDetails.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto).ToList();
                return result;
            }
            else
            {
                return null;
            }
        }

        //customer static data using month to current date

        //public IList<Customer> CustReport(DateTime? datefrom, DateTime? dateto)
        //{
        //    if (dateto != null && datefrom != null)
        //    {
        //        var CustReportResult = Customers.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto && x.CustOrderCount >= 2).ToList();
        //        return CustReportResult;
        //    }
        //    else
        //    {
        //        return null;
        //    }
        //}

        /*customer report in graph by harry*/
        public IList<Customer> filteredCustomerReport(DateTime? datefrom, DateTime? dateto)
        {

            if (dateto != null && datefrom != null)
            {

                var result = Customers.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto).ToList();
                // int nResults = result.Count();
                return result;
            }
            else
            {
                return null;
            }
        }

        //filtered report for order
        public IList<OrderMaster> filteredOrderMasters11(DateTime datefrom, DateTime dateto)
        {
            if (dateto != null && datefrom != null)

            {
                var result = DbOrderMaster.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto).ToList();
                return result;
            }
            else
            {
                return null;
            }
        }

        public IEnumerable<OrderMaster> AllOrderMasters(int compid)
        {
            { return DbOrderMaster.Where(x => x.Deleted == false && x.CompanyId == compid).AsEnumerable(); }

        }

        public IEnumerable<DamageOrderMaster> AllDOrderMasters(int compid)
        {
            { return DamageOrderMasterDB.Where(x => x.Deleted == false && x.CompanyId == compid).AsEnumerable(); }

        }

        #endregion



        public NotificationUpdated AddNotification(NotificationUpdated notify)
        {
            if (notify.Id != 0)
            {
                notify.Id = 0;
            }
            int count = NotificationUpdatedDb.Count(c => c.Id.Equals(notify.Id));

            if (count == 0)
            {
                // To get distinct list of notification save send-time of notification
                notify.CreatedTime = indianTime;
                notify.NotificationTime = indianTime;
                NotificationUpdatedDb.Add(notify);
                int id = this.Commit();
                return notify;

            }
            else
            {
                NotificationUpdated objdt = new NotificationUpdated();
                return objdt;
            }
        }

        public NotificationUpdated UpdateNotification(NotificationUpdated notify)
        {
            NotificationUpdated notifyList = NotificationUpdatedDb.Where(c => c.Id.Equals(notify.Id)).FirstOrDefault();

            if (notifyList != null)
            {
                notifyList.CityId = notify.CityId;

                notifyList.WarehouseID = notify.WarehouseID;
                notifyList.WarehouseName = notify.WarehouseName;
                notifyList.GroupAssociation = notify.GroupAssociation;
                notifyList.GroupID = Convert.ToInt32(notify.GroupID);
                notifyList.GroupName = notify.GroupName;
                notifyList.NotificationType = notify.NotificationType;
                notifyList.NotificationName = notify.NotificationName;
                notifyList.NotificationCategory = notify.NotificationCategory;
                notifyList.ItemName = notify.ItemName;
                notifyList.ItemCode = notify.ItemCode;
                notifyList.BrandName = notify.BrandName;
                notifyList.BrandCode = notify.BrandCode;
                notifyList.From = notify.From;
                notifyList.TO = notify.TO;
                notifyList.SentVia = notify.SentVia;
                notifyList.TotalSent = notify.TotalSent;
                notifyList.NotifiedTo = notify.GroupName;
                notifyList.IsEnabledDismissNotification = notify.IsEnabledDismissNotification;


                if (notify.Pic != null)
                    notifyList.Pic = notify.Pic;
                notifyList.title = notify.title;
                notifyList.UpdateTime = indianTime;
                NotificationUpdatedDb.Attach(notifyList);
                this.Entry(notifyList).State = EntityState.Modified;
                this.Commit();
                return notify;
            }
            else
            {
                return null;
            }
        }

        public UserAccessPermission getRoleDetail(string RoleName)
        {
            UserAccessPermission uap = new UserAccessPermission();
            uap = UserAccessPermissionDB.Where(x => x.RoleName == RoleName).SingleOrDefault();
            string id = "0";
            if (uap != null)
            {
                id = uap.RoleId;
            }
            return uap;
        }
        public CustomerDTOM AllSalePersonRetailer(string srch, int id1)
        {
            try
            {

                People pp = Peoples.Where(x => x.PeopleID == id1 && x.Active == true && x.Deleted == false && x.WarehouseId != 0).FirstOrDefault();

                CustomerDTOM list = new CustomerDTOM();
                if (pp.WarehouseId > 0)
                {

                    list = (from j in Customers
                            where j.Warehouseid == pp.WarehouseId
                                && j.Skcode.ToLower() == srch.Trim().ToLower()
                            join k in Warehouses on j.Warehouseid equals k.WarehouseId
                            select new CustomerDTOM
                            {

                                CustomerId = j.CustomerId,
                                CompanyId = j.CompanyId,
                                Active = j.Active,
                                City = j.City,
                                WarehouseId = j.Warehouseid,
                                WarehouseName = k.WarehouseName,
                                //ExecutiveId = j.ExecutiveId,
                                //Day = j.Day,
                                //BeatNumber = j.BeatNumber,
                                CreatedDate = j.CreatedDate,
                                UpdatedDate = j.UpdatedDate,
                                Skcode = j.Skcode,
                                //Mobile = j.Mobile,
                                ShopName = j.ShopName,
                                BillingAddress = j.BillingAddress,
                                ShippingAddress = j.ShippingAddress,
                                Cityid = j.Cityid,
                                Emailid = j.Emailid,
                                // Name = j.Name
                            }).FirstOrDefault();
                }
                return list;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public CurrencyStock DboyStock(CurrencyStock objlist, int PeopleID)
        {
            try
            {
                var deliveryBoy = Peoples.Where(x => x.PeopleID == PeopleID && x.Deleted == false).FirstOrDefault();

                if (objlist != null)
                {
                    var existDatas = CurrencyStockDB.Where(x => x.Deleted == false).FirstOrDefault();
                    var existData = CurrencyStockDB.Where(x => x.CurrencyStockid == existDatas.CurrencyStockid && x.Deleted == false).FirstOrDefault();



                    if (deliveryBoy != null)
                    {
                        objlist.ArrayIds = "";
                        foreach (var o in objlist.AssignAmountId)
                        {
                            if (objlist.ArrayIds == "")
                            {
                                objlist.ArrayIds = Convert.ToString(o.DBoyCId);
                            }
                            else
                            {
                                objlist.ArrayIds = objlist.ArrayIds + "," + Convert.ToString(o.DBoyCId);
                            }
                        }
                        foreach (var o in objlist.AssignAmountId)
                        {
                            try
                            {
                                if (existData == null)
                                {
                                    objlist.UpdatedDate = indianTime;
                                    objlist.CreatedDate = indianTime;
                                    objlist.DboyName = deliveryBoy.DisplayName;
                                    objlist.status = "Delivered Boy Currency Inserted InCST";
                                    CurrencyStockDB.Add(objlist);
                                    int id = this.Commit();
                                }
                                else
                                {
                                    CurrencyStock CST = new CurrencyStock();
                                    CST.OneRupee = existData.OneRupee + objlist.OneRupee;
                                    CST.onerscount = existData.onerscount + objlist.onerscount;
                                    CST.TwoRupee = existData.TwoRupee + objlist.TwoRupee;
                                    CST.tworscount = existData.tworscount + objlist.tworscount;
                                    CST.FiveRupee = existData.FiveRupee + objlist.FiveRupee;
                                    CST.fiverscount = existData.fiverscount + objlist.fiverscount;
                                    CST.TenRupee = existData.TenRupee + objlist.TenRupee;
                                    CST.tenrscount = existData.tenrscount + objlist.tenrscount;
                                    CST.TwentyRupee = existData.TwentyRupee + objlist.TwentyRupee;
                                    CST.Twentyrscount = existData.Twentyrscount + objlist.Twentyrscount;
                                    CST.fiftyRupee = existData.fiftyRupee + objlist.fiftyRupee;
                                    CST.fiftyrscount = existData.fiftyrscount + objlist.fiftyrscount;
                                    CST.HunRupee = existData.HunRupee + objlist.HunRupee;
                                    CST.hunrscount = existData.hunrscount + objlist.hunrscount;
                                    CST.fiveHRupee = existData.fiveHRupee + objlist.fiveHRupee;
                                    CST.fivehrscount = existData.fivehrscount + objlist.fivehrscount;
                                    CST.twoTHRupee = existData.twoTHRupee + objlist.twoTHRupee;
                                    CST.twoTHrscount = existData.twoTHrscount + objlist.twoTHrscount;
                                    CST.TotalAmount = existData.TotalAmount + objlist.TotalAmount;
                                    CST.UpdatedDate = indianTime;
                                    //CurrencyStockDB.Attach(CST);
                                    this.Entry(CST).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }
                            catch (Exception ex)
                            {
                                logger.Error(ex.Message);
                                return null;
                            }


                            DBoyCurrency db = DBoyCurrencyDB.Where(x => x.DBoyCId == o.DBoyCId && x.Deleted == false).FirstOrDefault();
                            db.Status = "Delivered Boy Currency Settled";
                            db.UpdatedDate = indianTime;
                            //DBoyCurrencyDB.Attach(db);
                            this.Entry(db).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
            return objlist;
        }
        public List<OrderDispatchedMaster> getdboysOrder(string mob, int compid)
        {
            try
            {
                List<OrderDispatchedMaster> finalList = new List<OrderDispatchedMaster>();
                var list = OrderDispatchedMasters.Where(a => a.DboyMobileNo == mob && (a.Status == "Ready to Dispatch" || a.Status == "Delivery Redispatch") && a.CompanyId == compid).Include("orderDetails").ToList();
                foreach (var ast in list)
                {
                    OrderDeliveryMaster odm = OrderDeliveryMasterDB.Where(x => x.OrderId == ast.OrderId && x.DeliveryIssuanceId == ast.DeliveryIssuanceIdOrderDeliveryMaster).FirstOrDefault();
                    if (odm != null)
                    {
                        DeliveryIssuance founnd = DeliveryIssuanceDb.Where(x => x.DeliveryIssuanceId == ast.DeliveryIssuanceIdOrderDeliveryMaster && (x.Status == "Submitted" || x.Status == "Payment Accepted" || x.Status == "Pending")).FirstOrDefault();
                        if (founnd == null)
                        {
                            finalList.Add(ast);
                        }
                    }
                    else
                    {
                        finalList.Add(ast);
                    }

                }
                //add by raj  Date:10/10/2019
                foreach (var orderredispatch in finalList)
                {
                    var orderredispatchdata = orderRedispatchCountApprovalDB.Where(x => x.OrderId == orderredispatch.OrderId && x.Redispatchcount == orderredispatch.ReDispatchCount).FirstOrDefault();
                    if (orderredispatchdata != null)
                    {
                        orderredispatch.SendApproval = true;
                        if (orderredispatchdata.IsApproved == true)
                        {
                            orderredispatch.IsApproved = orderredispatchdata.IsApproved;
                        }
                    }

                }// end
                return finalList;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public Customer Resetpassword(Customer customer)
        {
            Customer cust = Customers.Where(x => x.Mobile == customer.Mobile && x.Deleted == false).FirstOrDefault();
            cust.Password = customer.Password;
            //Customers.Attach(cust);
            this.Entry(cust).State = EntityState.Modified;
            this.Commit();
            return cust;
        }
        public IEnumerable<News> AllNews(int compid)
        {

            if (NewsDb.AsEnumerable().Where(c => c.IsDeleted == false && c.CompanyId == compid).Count() > 0)
            {
                List<News> complainList = new List<News>();
                complainList = NewsDb.Where(c => c.IsDeleted == false && c.CompanyId == compid).ToList();
                return complainList;
            }
            else
            {
                List<News> complainList = new List<News>();
                return complainList;
            }
        }
        public IEnumerable<News> AllNewsWid(int compid, int Warehouse_id)
        {

            if (NewsDb.AsEnumerable().Where(c => c.IsDeleted == false && c.CompanyId == compid).Count() > 0)
            {
                List<News> complainList = new List<News>();
                complainList = NewsDb.Where(c => c.IsDeleted == false && c.CompanyId == compid).ToList();
                return complainList;
            }
            else
            {
                List<News> complainList = new List<News>();
                return complainList;
            }
        }
        public News GetNewsId(int id, int compid)
        {
            News news = NewsDb.Where(x => x.NewsId == id && x.CompanyId == compid).FirstOrDefault();
            return news;
        }
        public News AddNews(News complain)
        {
            List<News> complainList = NewsDb.Where(c => c.NewsId.Equals(complain.NewsId) && c.CompanyId == complain.CompanyId).ToList();
            if (complainList.Count == 0)
            {
                IsAvai();
                //complain.IsAvailable = true;
                NewsDb.Add(complain);
                int id = this.Commit();
                return complain;
            }
            else
            {
                News objComplain = new News();
                return objComplain;
            }
        }
        public News PutNews(News complain)
        {
            logger.Info("put Complain: ");
            News comp = NewsDb.Where(x => x.NewsId == complain.NewsId && x.CompanyId == complain.CompanyId).FirstOrDefault();
            try
            {
                if (comp != null)
                {
                    IsAvai();
                    comp.NewsName = complain.NewsName;
                    comp.Description = complain.Description;
                    comp.Image = complain.Image;
                    comp.IsDeleted = complain.IsDeleted;
                    comp.IsAvailable = complain.IsAvailable;

                    //NewsDb.Attach(comp);
                    this.Entry(comp).State = EntityState.Modified;
                    this.Commit();
                    return complain;
                }
                else
                {
                    logger.Error("This Complain is not Found int put " + complain.NewsName);
                    return complain;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put Complain " + ex.Message);
            }
            return comp;
        }
        public bool DeleteNews(int id, int compid)
        {
            try
            {
                News complain = NewsDb.Where(x => x.NewsId == id && x.CompanyId == compid).FirstOrDefault();

                if (complain != null)
                {
                    complain.IsDeleted = true;
                    //complain.Deleted = false;
                    complain.IsAvailable = false;
                    //NewsDb.Attach(complain);
                    Entry(complain).State = EntityState.Modified;
                    Commit();
                }
                else
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return false;
            }
        }
        public void IsAvai()
        {
            List<News> newslist = new List<News>();
            newslist = NewsDb.ToList();
            foreach (var a in newslist)
            {
                logger.Info("put Complain: ");
                News comp = NewsDb.Where(x => x.NewsId == a.NewsId).FirstOrDefault();
                try
                {
                    if (comp != null)
                    {
                        comp.NewsName = a.NewsName;
                        comp.Description = a.Description;
                        comp.Image = a.Image;
                        comp.IsDeleted = a.IsDeleted;
                        comp.IsAvailable = a.IsAvailable;

                        //NewsDb.Attach(comp);
                        this.Entry(comp).State = EntityState.Modified;
                        this.Commit();

                    }
                    else
                    {
                        logger.Error("This Complain is not Found int put " + a.NewsName);

                    }
                }
                catch (Exception ex)
                {
                    logger.Error("Error in put Complain " + ex.Message);
                }

            }
        }
        public IEnumerable<Coupon> GetAllCouopons()
        {
            //throw new NotImplementedException();
            if (CouponDb.AsEnumerable().Count() > 0)
            {
                List<Coupon> coupons = new List<Coupon>();
                coupons = CouponDb.ToList();
                coupons = CouponDb.Where(c => c.IsDeleted == false).ToList();
                return coupons.AsEnumerable();
            }
            else
            {
                List<Coupon> coupons = new List<Coupon>();
                return coupons.AsEnumerable();
            }
        }
        public Coupon GetCouponbyId(string id)
        {
            Coupon coupons = CouponDb.Where(c => c.OfferCode == id && c.IsDeleted == false).SingleOrDefault();
            if (coupons != null)
            {
                return coupons;
            }
            else
            {
                coupons = new Coupon();
            }
            return coupons;
        }
        public Coupon AddCoupon(Coupon coupon)
        {
            List<Coupon> couponList = CouponDb.Where(c => c.OfferId.Equals(coupon.OfferId)).ToList();
            if (couponList.Count == 0)
            {

                //coupon.StartDate = indianTime;
                //coupon.EndDate = indianTime;
                coupon.IsDeleted = false;
                CouponDb.Add(coupon);
                int id = this.Commit();
                return coupon;
            }
            else
            {
                Coupon couponobj = new Coupon();
                return couponobj;
            }
        }
        public Coupon PutCoupon(Coupon obj)
        {
            //throw new NotImplementedException();
            logger.Info("put Categories: ");
            try
            {
                Coupon coupon = CouponDb.Where(x => x.OfferId == obj.OfferId).FirstOrDefault();
                if (coupon != null)
                {
                    coupon.OfferCode = obj.OfferCode;
                    coupon.Discount = obj.Discount;
                    coupon.IsDeleted = false;
                    coupon.MinAmount = obj.MinAmount;
                    coupon.StartDate = obj.StartDate;
                    coupon.EndDate = obj.EndDate;
                    coupon.OfferType = obj.OfferType;
                    coupon.OfferName = obj.OfferName;
                    coupon.Description = obj.Description;
                    coupon.DiscountType = obj.DiscountType;
                    coupon.SourceItemName = obj.SourceItemName;
                    coupon.FreeItemName = obj.FreeItemName;
                    //CouponDb.Attach(coupon);
                    this.Entry(coupon).State = EntityState.Modified;
                    this.Commit();
                    return obj;
                }
                else
                {
                    logger.Error("This coupon is not Found in put " + obj.OfferCode);
                    return obj;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put coupon " + ex.Message);
            }
            return null;
        }
        public bool DeleteCoupon(int id)
        {
            try
            {
                Coupon coupon = CouponDb.Where(x => x.OfferId == id).SingleOrDefault();
                coupon.IsDeleted = true;
                //coupon.UpdatedDate = indianTime;
                //CouponDb.Attach(coupon);
                //Entry(coupon).State = EntityState.Deleted;
                this.Entry(coupon).State = EntityState.Modified;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public DailyEssential AddDailyItem(DailyEssential item)
        {
            try
            {
                DailyEssential M = DailyEssentialDb.Where(x => x.CustMobile == item.CustMobile && x.ItemId == item.ItemId && x.CompanyId == item.CompanyId).SingleOrDefault();
                if (M == null)
                {
                    item.CreatedDate = indianTime;
                    item.UpdatedDate = indianTime;

                    DailyEssentialDb.Add(item);
                    int id = this.Commit();
                    return item;
                }
                else
                {
                    return null;
                }

            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public DailyItemEdit EditItem(DailyItemEdit item)
        {
            try
            {
                TimeSpan tsmin = new TimeSpan(00, 00, 0);
                TimeSpan tsmax = new TimeSpan(23, 59, 59);
                DateTime sd = item.EditDate.Date + tsmin;
                DateTime ed = item.EditDate.Date + tsmax;

                DailyEssential dailyitems = DailyEssentialDb.Where(x => x.CustMobile == item.CustMobile && x.ItemId == item.ItemId && x.EndDate > ed).SingleOrDefault();
                var d = indianTime.Date;
                var day = item.EditDate.DayOfWeek;
                if (dailyitems != null && d.AddDays(1) < dailyitems.EndDate.Date)
                {
                    DailyItemEdit DE = DailyItemCancelDb.Where(x => x.CustMobile == item.CustMobile && x.ItemId == item.ItemId && x.EditDate < ed && x.EditDate > sd).SingleOrDefault();

                    if (DE == null)
                    {
                        if (Convert.ToString(day) == "Monday")
                        {
                            if (dailyitems.Monday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Tuesday")
                        {
                            if (dailyitems.Tuesday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Wednesday")
                        {
                            if (dailyitems.Wednesday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Thursday")
                        {
                            if (dailyitems.Thursday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Friday")
                        {
                            if (dailyitems.Friday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Saturday")
                        {
                            if (dailyitems.Saturday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Sunday")
                        {
                            if (dailyitems.Sunday == true)
                            {
                                item.CreatedDate = indianTime;
                                item.UpdatedDate = indianTime;
                                DailyItemCancelDb.Add(item);
                                int id = this.Commit();
                                return item;
                            }
                        }
                    }
                    else
                    {
                        ///////////////// else update
                        if (Convert.ToString(day) == "Monday")
                        {
                            if (dailyitems.Monday == true)
                            {
                                item.UpdatedDate = indianTime;
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Tuesday")
                        {
                            if (dailyitems.Tuesday == true)
                            {
                                DE.UpdatedDate = indianTime;
                                DE.Qty = item.Qty;
                                //DailyItemCancelDb.Attach(DE);
                                this.Entry(DE).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Wednesday")
                        {
                            if (dailyitems.Wednesday == true)
                            {
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                item.UpdatedDate = indianTime;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Thursday")
                        {
                            if (dailyitems.Thursday == true)
                            {
                                item.UpdatedDate = indianTime;
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Friday")
                        {
                            if (dailyitems.Friday == true)
                            {
                                item.UpdatedDate = indianTime;
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Saturday")
                        {
                            if (dailyitems.Saturday == true)
                            {
                                item.UpdatedDate = indianTime;
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                        else if (Convert.ToString(day) == "Sunday")
                        {
                            if (dailyitems.Sunday == true)
                            {
                                item.UpdatedDate = indianTime;
                                item.DailyItemCancelId = DE.DailyItemCancelId;
                                //DailyItemCancelDb.Attach(item);
                                this.Entry(item).State = EntityState.Modified;
                                this.Commit();
                                return item;
                            }
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public OrderMaster PutOrderMaster(OrderMaster objcity)
        {

            var cust = Customers.FirstOrDefault(x => x.CustomerId == objcity.CustomerId);
            if (!cust.Active)
                return objcity;

            OrderMaster om = DbOrderMaster.Where(x => x.OrderId == objcity.OrderId && x.Deleted == false && x.CompanyId == objcity.CompanyId).Include("orderDetails").FirstOrDefault();
            if (om != null)
            {
                var oldstatus = om.Status;
                om.ReasonCancle = objcity.ReasonCancle;
                om.Status = objcity.Status;

                if (om.Status == "Pending" && (oldstatus == "Inactive" || oldstatus == "Payment Pending" || oldstatus == "Failed"))
                {
                    //update payement 
                    var PaymentDetails = PaymentResponseRetailerAppDb.Where(z => z.OrderId == om.OrderId && z.status == "Success").ToList();
                    if (PaymentDetails != null && PaymentDetails.Any())
                    {
                        foreach (var item in PaymentDetails)
                        {
                            item.UpdatedDate = indianTime;
                            item.status = "Failed";
                            item.statusDesc = "AuthContext.PutOrderMaster";
                            this.Entry(item).State = EntityState.Modified;
                        }
                    }
                    var PaymentResponse = new PaymentResponseRetailerApp
                    {
                        amount = om.GrossAmount,
                        CreatedDate = indianTime,
                        currencyCode = "INR",
                        OrderId = om.OrderId,
                        PaymentFrom = "Cash",
                        status = "Success",
                        statusDesc = "AuthContext.PutOrderMaster",
                        UpdatedDate = indianTime,
                        IsRefund = false
                    };
                    this.PaymentResponseRetailerAppDb.Add(PaymentResponse);
                }


                foreach (var od in om.orderDetails)
                {
                    var Odet = DbOrderDetails.Where(x => x.OrderDetailsId == od.OrderDetailsId).SingleOrDefault();
                    if (Odet != null)
                    {
                        if (om.Status == "Pending" && (oldstatus == "Inactive" || oldstatus == "Payment Pending" || oldstatus == "Failed"))
                        {
                            Odet.Status = om.Status;
                        }
                        else
                        {
                            Odet.Status = "Order Canceled";
                        }
                        Odet.UpdatedDate = indianTime;
                        this.Entry(Odet).State = EntityState.Modified;
                    }
                }
                om.UpdatedDate = indianTime;
                //DbOrderMaster.Attach(om);
                this.Entry(om).State = EntityState.Modified;
                this.Commit();

                #region Order Master History
                var UserName = Peoples.Where(x => x.PeopleID == objcity.userid).Select(a => a.DisplayName).FirstOrDefault();
                var orderdata1 = DbOrderMaster.Where(x => x.OrderId == objcity.OrderId).FirstOrDefault();
                try
                {
                    OrderMasterHistories h1 = new OrderMasterHistories();
                    if (orderdata1 != null)
                    {
                        h1.orderid = orderdata1.OrderId;
                        h1.Status = orderdata1.Status;

                        h1.Reasoncancel = orderdata1.ReasonCancle;
                        h1.Warehousename = orderdata1.WarehouseName;
                        h1.userid = objcity.userid;
                        h1.username = UserName;
                        h1.CreatedDate = DateTime.Now;
                        h1.Description = objcity.Description;

                        OrderMasterHistoriesDB.Add(h1);
                        int id = this.Commit();
                    }
                }
                catch (Exception ex)
                {
                    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                }
                #endregion


                if (om.Status == "Pending")
                {
                }
                else
                {
                    try
                    {
                        var rpoint = RewardPointDb.Where(c => c.CustomerId == om.CustomerId).FirstOrDefault();
                        if (rpoint != null)
                        {
                            if (om.RewardPoint > 0)
                            {
                                rpoint.EarningPoint -= om.RewardPoint;
                                if (rpoint.EarningPoint < 0)
                                    rpoint.EarningPoint = 0;
                                rpoint.UpdatedDate = indianTime;
                                rpoint.TransactionDate = indianTime;
                                //RewardPointDb.Attach(rpoint);
                                this.Entry(rpoint).State = EntityState.Modified;
                                this.Commit();
                            }
                        }
                        // on pre order canceeled 
                        if (om.Status == "Order Canceled")
                        {
                            var data123 = WalletDb.Where(x => x.CustomerId == om.CustomerId).SingleOrDefault();
                            if (om.walletPointUsed > 0 && om.walletPointUsed != null)
                            {
                                data123.TotalAmount = data123.TotalAmount + om.walletPointUsed;
                                this.WalletDb.Attach(data123);
                                this.Entry(data123).State = EntityState.Modified;
                                this.Commit();
                                CustomerWalletHistory CWH = new CustomerWalletHistory();
                                //op by user
                                People People = Peoples.Where(c => c.PeopleID == objcity.userid).SingleOrDefault();
                                CWH.PeopleId = People.PeopleID;
                                CWH.PeopleName = People.DisplayName;

                                //op by Cust
                                CWH.WarehouseId = om.WarehouseId;
                                CWH.CompanyId = 1;
                                CWH.CustomerId = data123.CustomerId;
                                CWH.NewAddedWAmount = om.walletPointUsed;
                                CWH.TotalWalletAmount = data123.TotalAmount;
                                CWH.Through = "From  Pre Order cancellation";
                                CWH.OrderId = om.OrderId;
                                CWH.CreatedDate = indianTime;
                                CWH.UpdatedDate = indianTime;
                                this.CustomerWalletHistoryDb.Add(CWH);
                                this.Commit();
                                BackgroundTaskManager.Run(() => ForNotificationCrderCancelledBeforeDispatchedWithstatus(om));
                            }

                            ///Return Gullak Amount
                            if (om.OrderType == 4)
                            {
                                var PaymentDetails = PaymentResponseRetailerAppDb.Where(z => z.OrderId == om.OrderId && z.PaymentFrom == "Gullak" && z.status == "Success").ToList();
                                if (PaymentDetails != null && PaymentDetails.Any())
                                {
                                    var totalAmount = PaymentDetails.Sum(x => x.amount);
                                    var customerGullak = this.GullakDB.FirstOrDefault(x => x.CustomerId == om.CustomerId);
                                    if (customerGullak != null)
                                    {
                                        if (!this.GullakTransactionDB.Any(x => x.ObjectId == om.OrderId.ToString() && x.ObjectType == "Order" && x.Comment == "Due to Order Cancel"))
                                        {
                                            this.GullakTransactionDB.Add(new Model.Gullak.GullakTransaction
                                            {
                                                CreatedDate = indianTime,
                                                CreatedBy = objcity.userid,
                                                Comment = "Order Cancel : " + om.OrderId.ToString(),
                                                Amount = totalAmount,
                                                GullakId = customerGullak.Id,
                                                CustomerId = om.CustomerId,
                                                IsActive = true,
                                                IsDeleted = false,
                                                ObjectId = om.OrderId.ToString(),
                                                ObjectType = "Order"
                                            });

                                            customerGullak.TotalAmount += totalAmount;
                                            customerGullak.ModifiedBy = objcity.userid;
                                            customerGullak.ModifiedDate = indianTime;
                                            this.Entry(customerGullak).State = EntityState.Modified;
                                            this.Commit();
                                        }
                                    }
                                }
                            }
                        }

                    }
                    catch (Exception ex) { logger.Error(ex.Message); }
                }
                return objcity;
            }
            else
            {
                return objcity;
            }

        }
        private async Task<bool> ForNotificationCrderCancelledBeforeDispatchedWithstatus(OrderMaster om)
        {
            bool res = false;
            //Notification notification = new Notification();
            //notification.title = "Your OrderId " + om.OrderId + " is Cancelled";
            //notification.Message = om.walletPointUsed + " Point is added to your Wallet";
            //notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
            //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == om.walletPointUsed).SingleOrDefault();
            ////AddNotification(notification);
            //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            //string id11 = ConfigurationManager.AppSettings["FcmApiId"];
            //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            //tRequest.Method = "post";
            //var objNotification = new
            //{
            //    to = customers.fcmId,
            //    notification = new
            //    {
            //        title = notification.title,
            //        body = notification.Message,
            //        icon = notification.Pic
            //    }
            //};
            //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
            //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
            //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
            //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
            //tRequest.ContentLength = byteArray.Length;
            //tRequest.ContentType = "application/json";
            //using (Stream dataStream = tRequest.GetRequestStream())
            //{
            //    dataStream.Write(byteArray, 0, byteArray.Length);
            //    using (WebResponse tResponse = tRequest.GetResponse())
            //    {
            //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
            //        {
            //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
            //            {
            //                String responseFromFirebaseServer = tReader.ReadToEnd();
            //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
            //            }
            //        }
            //    }
            //}
            var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == om.walletPointUsed).SingleOrDefault();
            var data = new FCMData
            {
                title = "Your OrderId " + om.OrderId + " is Cancelled",
                body = om.walletPointUsed + " Point is added to your Wallet",
                image_url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",

            };
            string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            var firebaseService = new FirebaseNotificationServiceHelper(Key);
            var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
            if (result != null)
            {
                res = true;
            }
            else
            {
                res = false;
            }
            return res;
        }
        private string smstemplate1(OrderMaster om, string text)
        {
            string bodytext = text;
            bodytext = bodytext.Replace("%CustomerName%", om.CustomerName);
            bodytext = bodytext.Replace("%OrderId%", om.invoice_no);
            bodytext = bodytext.Replace("%SubTotal%", om.TotalAmount.ToString());
            //bodytext = bodytext.Replace("%deliveryboy%", od.DeliveryBoyName);
            return bodytext;
        }
        public List<Favorites> AllFavorites(string mob, int compid)
        {
            List<Favorites> currentStock = new List<Favorites>();
            currentStock = Favoritess.Where(f => f.customerMobile == mob && f.CompanyId == compid).ToList();
            return currentStock;
        }
        public Favorites AddFavorites(Favorites obj)
        {
            List<Favorites> itpr = new List<Favorites>();
            itpr = Favoritess.Where(i => i.customerMobile == obj.customerMobile && i.ItemId == obj.ItemId && i.CompanyId == obj.CompanyId).ToList();
            if (itpr.Count == 0)
            {
                Favoritess.Add(obj);
                int id = this.Commit();
            }
            else if (itpr.Count > 1)
            {
                for (var i = 0; i < (itpr.Count - 1); i++)
                {
                    Entry(itpr[i]).State = EntityState.Deleted;
                    Commit();
                }
            }
            return obj;
        }
        public Feedback AddFeedBack(Feedback obj)
        {
            Customer customer = Customers.Where(c => c.Mobile == obj.Mobile && c.Deleted == false).FirstOrDefault();
            if (customer != null)
            {
                Feedback fdback = Feedbacks.Where(f => f.customerId == customer.CustomerId && f.CompanyId == obj.CompanyId).SingleOrDefault();
                if (fdback == null)
                {
                    obj.customerId = customer.CustomerId;
                    obj.shopName = customer.ShopName;
                    obj.createdDate = indianTime;
                    Feedbacks.Add(obj);
                    this.Commit();
                }
                else
                {
                    fdback.suggestions = obj.suggestions;
                    fdback.satisfactionLevel = obj.satisfactionLevel;
                    fdback.createdDate = indianTime;
                    //Feedbacks.Attach(fdback);
                    this.Entry(fdback).State = EntityState.Modified;
                    this.Commit();
                }
                return obj;
            }
            else
                return null;
        }
        public RequestItem AddRequestItem(RequestItem obj)
        {
            Customer customer = Customers.Where(c => c.Mobile == obj.customerMobile && c.Deleted == false).FirstOrDefault();
            if (customer != null)
            {
                obj.customerId = customer.CustomerId;
                obj.shopName = customer.ShopName;
                obj.createdDate = indianTime;
                RequestItems.Add(obj);
                this.Commit();
                return obj;
            }
            else
                return null;
        }
        public List<Customer> AddBulkcustomer(List<Customer> CustCollection)
        {
            logger.Info("start addbulk customer");
            try
            {
                foreach (var o in CustCollection)
                {
                    List<Customer> cust = Customers.Where(c => c.Skcode.Equals(o.Skcode) || c.Mobile == o.Mobile).ToList();
                    Customer objitemMaster = new Customer();
                    if (cust.Count == 0)
                    {
                        o.CreatedDate = indianTime;
                        o.UpdatedDate = indianTime;
                        o.CreatedBy = "admin";

                        //var clstr = Clusters.Where(x => x.ClusterId == o.ClusterId).SingleOrDefault();
                        //if (clstr != null)
                        //{
                        //    o.ClusterId = clstr.ClusterId;
                        //    o.ClusterName = clstr.ClusterName;
                        //}
                        //else
                        //{
                        //    Cluster fclstr = Clusters.FirstOrDefault();
                        //    o.ClusterId = fclstr.ClusterId;
                        //    o.ClusterName = fclstr.ClusterName;
                        //}
                        //if (o.Day == null)
                        //{
                        //    o.Day = "";
                        //}
                        Customers.Add(o);
                        int id = this.Commit();

                    }
                    else
                    {
                        List<Customer> cust1 = Customers.Where(c => c.Skcode.ToLower().Equals(o.Skcode.ToLower()) && c.Mobile.Trim() == o.Mobile.Trim()).ToList();
                        if (cust1.Count() == 1)
                        {
                            logger.Info("Skcode already exists");
                            Customer editcust = cust1[0];
                            editcust.lat = o.lat;
                            editcust.lg = o.lg;
                            editcust.ShopName = o.ShopName;
                            editcust.Emailid = o.Emailid;
                            editcust.Name = o.Name;
                            editcust.Mobile = o.Mobile;
                            editcust.BillingAddress = o.BillingAddress;
                            editcust.LandMark = o.LandMark;
                            // editcust.ClusterId = o.ClusterId;
                            editcust.City = o.City;
                            editcust.UpdatedDate = indianTime;
                            //Customers.Attach(editcust);
                            this.Entry(editcust).State = EntityState.Modified;
                            this.Commit();

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Info("error in adding customer collection" + ex.Message);
            }
            return null;
        }
        public List<People> AddBulkpeople(List<People> CustCollection)
        {
            logger.Info("start addbulk customer");
            try
            {
                foreach (var o in CustCollection)
                {
                    List<People> cust = Peoples.Where(c => c.Mobile.Equals(o.Mobile) && c.Deleted == false).ToList();

                    People objitemMaster = new People();
                    if (cust.Count == 0)
                    {
                        o.CreatedDate = indianTime;
                        o.UpdatedDate = indianTime;
                        Peoples.Add(o);
                        int id = this.Commit();

                    }
                    else
                    {
                        logger.Info("Mobile number already exists");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Info("error in adding Sales Executive collection");
            }
            return null;
        }
        public List<Supplier> AddBulkSupplier(List<Supplier> supCollection)
        {
            logger.Info("start addbulk supplier");
            try
            {
                foreach (var o in supCollection)
                {
                    List<Supplier> cust = Suppliers.Where(c => c.SUPPLIERCODES.Equals(o.SUPPLIERCODES)).ToList();

                    Supplier objsupplier = new Supplier();
                    if (cust.Count == 0)
                    {
                        o.CreatedDate = indianTime;
                        o.UpdatedDate = indianTime;
                        Suppliers.Add(o);
                        int id = this.Commit();

                    }
                    else
                    {
                        logger.Info("Skcode already exists");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Info("error in adding supplier collection");
            }
            return null;
        }
        public CurrentStock UpdateCurrentStock(CurrentStock stock, CurrentStock orignalStock)
        {
            this.Entry(orignalStock).CurrentValues.SetValues(stock);
            this.Commit();
            return stock;
        }
        public CurrentStock UpdateCurrentStock(CurrentStock stock)
        {
            //DbCurrentStock.Attach(stock);
            this.Entry(stock).State = EntityState.Modified;
            this.Commit();
            return stock;
        }
        public TemporaryCurrentStock UpdateTempCurrentStock(TemporaryCurrentStock stock)
        {
            //DbCurrentStock.Attach(stock);
            this.Entry(stock).State = EntityState.Modified;
            this.Commit();
            return stock;
        }

        #region Upload Mpos
        public List<MposUpload> AddMposUpload(List<MposUpload> trCollection)
        {
            logger.Info("start addbulk");
            try
            {

                //string transactionid = trCollection[0].transaction_id;

                //foreach (var data in trCollection)
                //{
                bool Isinsert = false;
                UploadFileReconcile TOM = new UploadFileReconcile();
                for (var i = 0; i < trCollection.ToList().Count(); i++)
                {
                    double amount = trCollection[i].Amount;
                    string transactionid = trCollection[i].transaction_id;
                    int userid = trCollection[i].userid;
                    var peopledata = Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();

                    var payment = PaymentResponseRetailerAppDb.Where(x => x.GatewayTransId == transactionid && x.amount == amount).FirstOrDefault();

                    if (payment != null)
                    {

                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "Mpos";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = true;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        MposUpload pd = new MposUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = true;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.UserName = trCollection[i].UserName;
                        pd.User_Mobile = trCollection[i].User_Mobile;
                        pd.Amount = trCollection[i].Amount;
                        pd.Cardtype = trCollection[i].Cardtype;
                        pd.Brandtype = trCollection[i].Brandtype;
                        MposUploadDB.Add(pd);
                        Commit();

                        //string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = true;
                        POD.UpdatedDate = indianTime;
                        //POD.IsRefund = false;
                        Commit();
                    }
                    else
                    {
                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "Mpos";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = false;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        MposUpload pd = new MposUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = false;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.UserName = trCollection[i].UserName;
                        pd.User_Mobile = trCollection[i].User_Mobile;
                        pd.Amount = trCollection[i].Amount;
                        pd.Cardtype = trCollection[i].Cardtype;
                        pd.Brandtype = trCollection[i].Brandtype;
                        MposUploadDB.Add(pd);
                        Commit();

                        //string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = false;
                        POD.UpdatedDate = indianTime;
                        Commit();

                    }
                }

                // break;

                //}

                return null;

            }
            catch (Exception ex)
            {

            }
            return null;
        }


        #endregion

        #region Upload HDFC
        public List<HDFCUpload> AddHDFCUpload(List<HDFCUpload> trCollection)
        {
            logger.Info("start addbulk");
            try
            {

                bool Isinsert = false;
                UploadFileReconcile TOM = new UploadFileReconcile();
                //var peopledata = Peoples.Where(x => x.PeopleID == data.userid).FirstOrDefault();

                for (var i = 0; i < trCollection.ToList().Count(); i++)
                {
                    double amount = trCollection[i].Amount;

                    string transactionid = trCollection[i].transaction_id;


                    var payment = PaymentResponseRetailerAppDb.Where(x => x.GatewayTransId == transactionid && x.amount == amount).FirstOrDefault();

                    // var order = DbOrderMaster.Where(x => x.GrossAmount == amount && x.OrderId == payment.OrderId).FirstOrDefault();
                    int userid = trCollection[i].userid;
                    var peopledata = Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();

                    if (payment != null)
                    {

                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "Mpos";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = true;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        HDFCUpload pd = new HDFCUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = true;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.MerchantId = trCollection[i].MerchantId;
                        pd.Amount = trCollection[i].Amount;
                        pd.CCAvenueRef = trCollection[i].CCAvenueRef;
                        pd.PayMode = trCollection[i].PayMode; ;
                        HDFCUploadDB.Add(pd);
                        Commit();

                        // string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = true;
                        POD.UpdatedDate = indianTime;
                        //POD.IsRefund = false;
                        Commit();

                    }
                    else
                    {
                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "Mpos";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = false;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        HDFCUpload pd = new HDFCUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = false;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.MerchantId = trCollection[i].MerchantId;
                        pd.Amount = trCollection[i].Amount;
                        pd.CCAvenueRef = trCollection[i].CCAvenueRef;
                        pd.PayMode = trCollection[i].PayMode;
                        HDFCUploadDB.Add(pd);
                        Commit();

                        // string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = false;
                        POD.UpdatedDate = indianTime;
                        //POD.IsRefund = false;
                        Commit();

                    }
                }

                return null;


            }

            catch (Exception ex)
            {

            }
            return null;
        }


        #endregion

        #region Upload UPI
        public List<UPIUpload> AddUPIUpload(List<UPIUpload> trCollection)
        {
            logger.Info("start addbulk");
            try
            {

                bool Isinsert = false;
                UploadFileReconcile TOM = new UploadFileReconcile();

                for (var i = 0; i < trCollection.ToList().Count(); i++)
                {
                    double amount = trCollection[i].Amount;

                    string transactionid = trCollection[i].transaction_id;
                    var payment = PaymentResponseRetailerAppDb.Where(x => x.GatewayTransId == transactionid && x.amount == amount).FirstOrDefault();
                    int userid = trCollection[i].userid;
                    var peopledata = Peoples.Where(x => x.PeopleID == userid).FirstOrDefault();
                    if (payment != null)
                    {

                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "UPI";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = true;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        UPIUpload pd = new UPIUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = true;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.MerchantId = trCollection[i].MerchantId;
                        pd.Amount = trCollection[i].Amount;
                        pd.CCAvenueRef = trCollection[i].CCAvenueRef;
                        pd.PayMode = trCollection[i].PayMode; ;
                        UPIUploadDB.Add(pd);
                        Commit();

                        // string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = true;
                        POD.UpdatedDate = indianTime;
                        //POD.IsRefund = false;
                        Commit();

                    }
                    else
                    {
                        if (Isinsert == false)
                        {
                            TOM = new UploadFileReconcile();
                            TOM.FileType = "UPI";
                            TOM.UplaodBy = peopledata.DisplayName;
                            TOM.IsReconcile = false;
                            TOM.UploadDate = indianTime;
                            UploadFileReconcileDB.Add(TOM);
                            Commit();
                            Isinsert = true;
                        }

                        UPIUpload pd = new UPIUpload();
                        pd.UploadId = TOM.UploadId;
                        pd.IsReconcile = false;
                        pd.transaction_id = trCollection[i].transaction_id;
                        pd.transaction_date = trCollection[i].transaction_date;
                        pd.MerchantId = trCollection[i].MerchantId;
                        pd.Amount = trCollection[i].Amount;
                        pd.CCAvenueRef = trCollection[i].CCAvenueRef;
                        pd.PayMode = trCollection[i].PayMode;
                        UPIUploadDB.Add(pd);
                        Commit();

                        // string transactionid = trCollection[i].transaction_id;

                        PaymentResponseRetailerApp POD = PaymentResponseRetailerAppDb.Where(a => a.GatewayTransId == transactionid).SingleOrDefault();
                        POD.UploadId = TOM.UploadId;
                        POD.IsSettled = false;
                        POD.UpdatedDate = indianTime;
                        //POD.IsRefund = false;
                        Commit();

                    }
                }

                return null;

            }

            catch (Exception ex)
            {

            }
            return null;
        }
        #endregion



        #region Warehouse Transfer Order through Excel Sheet
        /// <summary>
        /// Warehouse Transfer Order
        /// Created By Ashwin
        /// </summary>
        /// <param name="trCollection"></param>
        /// <returns></returns>
        public List<TransferWHOrderDetails> Addtransferorder(List<TransferWHOrderDetails> trCollection)
        {
            logger.Info("start addbulk");
            try
            {

                if (trCollection[0].RequestToWarehouseId > 0)
                {

                    int? warehouseidreq = trCollection[0].RequestToWarehouseId;
                    var warehouseRequested = Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseidreq);


                    int? warehouseidOri = trCollection[0].WarehouseId;
                    var warehouseOrigin = Warehouses.FirstOrDefault(x => x.WarehouseId == warehouseidOri);


                    TransferWHOrderMaster TOM = new TransferWHOrderMaster();
                    TOM.CreationDate = indianTime;
                    TOM.WarehouseId = warehouseOrigin.WarehouseId;
                    TOM.CompanyId = trCollection[0].CompanyId;
                    TOM.WarehouseName = warehouseOrigin.WarehouseName + " (" + warehouseOrigin.CityName + ")";
                    TOM.Status = "Pending";
                    TOM.RequestToWarehouseId = warehouseRequested.WarehouseId;
                    TOM.RequestToWarehouseName = warehouseRequested.WarehouseName + " (" + warehouseRequested.CityName + ")";
                    TOM.IsActivate = true;
                    TOM.IsDeleted = false;
                    TOM.UpdatedDate = indianTime;
                    TOM.UpdateBy = "";
                    TOM.userid = trCollection[0].userid;
                    TransferWHOrderMasterDB.Add(TOM);
                    Commit();
                    try
                    {
                        AddTransferHistory(TOM);
                    }
                    catch (Exception ex) { }


                    for (var i = 0; i < trCollection.ToList().Count(); i++)
                    {

                        string ItemNumber = Convert.ToString(trCollection[i].ItemNumber);
                        int? CompanyId = trCollection[i].CompanyId;
                        int? WarehouseId = trCollection[i].WarehouseId;

                        var item = itemMasters.Where(z => z.Number == ItemNumber && z.CompanyId == CompanyId && z.WarehouseId == WarehouseId).FirstOrDefault();

                        TransferWHOrderDetails pd = new TransferWHOrderDetails();
                        pd.TransferOrderId = TOM.TransferOrderId;
                        pd.ItemId = item.ItemId;
                        pd.itemname = item.itemname;
                        pd.ItemNumber = item.Number;
                        pd.itemBaseName = item.itemBaseName;
                        pd.itemname = item.itemname;
                        pd.ItemMultiMRPId = item.ItemMultiMRPId;
                        pd.MRP = item.MRP;
                        pd.UnitofQuantity = item.UnitofQuantity;
                        pd.UOM = item.UOM;
                        pd.TotalQuantity = trCollection[i].TotalQuantity;
                        pd.CreationDate = indianTime;
                        pd.Status = "Pending";
                        pd.WarehouseId = item.WarehouseId;
                        pd.CompanyId = item.CompanyId;
                        pd.WarehouseName = item.WarehouseName + " (" + item.CityName + ")";
                        pd.RequestToWarehouseId = trCollection[i].RequestToWarehouseId;
                        pd.RequestToWarehouseName = warehouseRequested.WarehouseName + " (" + warehouseRequested.CityName + ")";
                        pd.UpdatedDate = indianTime;
                        TransferWHOrderDetailsDB.Add(pd);
                        Commit();
                    }
                }

                else
                {
                    return null;
                }


            }
            catch (Exception ex)
            {

            }
            return null;
        }
        #endregion
        public List<CurrentStock> Addcurrentstock(List<CurrentStock> cstkCollection, int userid)
        {
            logger.Info("start addbulk");
            try
            {
                foreach (var o in cstkCollection)
                {
                    List<CurrentStock> cst = DbCurrentStock.Where(c => c.ItemNumber.Equals(o.ItemNumber) && c.WarehouseId == o.WarehouseId && c.CompanyId == o.CompanyId && c.ItemMultiMRPId == o.ItemMultiMRPId).ToList();
                    CurrentStock objsupplier = new CurrentStock();
                    if (cst.Count == 0)
                    {
                        try
                        {
                            Warehouse WH = Warehouses.Where(w => w.WarehouseId == o.WarehouseId && w.Deleted == false && w.CompanyId == o.CompanyId).FirstOrDefault();
                            logger.Info("new items added in currentstock");
                            o.WarehouseName = WH.WarehouseName;
                            o.WarehouseId = WH.WarehouseId;
                            o.CityId = WH.Cityid;
                            o.CompanyId = WH.CompanyId;
                            o.CityName = WH.CityName;
                            o.UpdatedDate = indianTime;
                            o.CreationDate = indianTime;
                            DbCurrentStock.Add(o);
                            int id = this.Commit();
                        }
                        catch (Exception ex)
                        {
                            logger.Info("error in adding new current stock" + ex);
                        }
                    }
                    else
                    {
                        try
                        {
                            var GetDiff = CurrentStockHistoryDb.Where(x => x.ItemNumber == o.ItemNumber && x.Warehouseid == o.WarehouseId && x.CompanyId == o.CompanyId && x.ItemMultiMRPId == o.ItemMultiMRPId).Select(x => x.TotalInventory).ToList().LastOrDefault();
                            int? diffCurrentInventory;
                            if (GetDiff != o.CurrentInventory)
                            {
                                diffCurrentInventory = o.CurrentInventory - GetDiff;

                            }
                            else
                            {
                                diffCurrentInventory = 0;
                            }



                            CurrentStock cstk = DbCurrentStock.Where(x => x.ItemNumber == o.ItemNumber && x.WarehouseId == o.WarehouseId && x.CompanyId == o.CompanyId && x.ItemMultiMRPId == o.ItemMultiMRPId).FirstOrDefault();
                            cstk.UpdatedDate = indianTime;
                            cstk.CurrentInventory = o.CurrentInventory;
                            logger.Info("stock id already exists update it");
                            //DbCurrentStock.Attach(cstk);
                            this.Entry(cstk).State = EntityState.Modified;
                            this.Commit();
                            CurrentStockHistory Oss = new CurrentStockHistory();
                            if (cstk != null)
                            {

                                Oss.ItemMultiMRPId = cstk.ItemMultiMRPId;
                                Oss.ManualReason = "From Uploader";
                                Oss.StockId = cstk.StockId;
                                Oss.ItemNumber = cstk.ItemNumber;
                                Oss.itemBaseName = cstk.itemBaseName;
                                Oss.itemname = cstk.itemname;
                                Oss.TotalInventory = cstk.CurrentInventory;
                                Oss.WarehouseName = cstk.WarehouseName;
                                Oss.Warehouseid = cstk.WarehouseId;
                                Oss.CompanyId = cstk.CompanyId;

                                Oss.CreationDate = DateTime.Now;
                                Oss.ManualInventoryIn = diffCurrentInventory;
                                CurrentStockHistoryDb.Add(Oss);
                                int id = this.Commit();
                            }
                        }
                        catch (Exception ex)
                        {
                            logger.Info("error in updating curntstok" + ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Info("error in adding currentstock collection" + ex);
            }
            return null;
        }

        #region
        //Created By Vinayak (16/09/2019)
        //For free Stock uploader.

        public bool AddfreeStock(List<freeStockuploadDTO> cstkCollection, string userid)
        {
            int PeopleId = Convert.ToInt32(userid);
            var User = Peoples.FirstOrDefault(x => x.PeopleID == PeopleId);

            if (User != null)
            {
                foreach (var o in cstkCollection)
                {
                    FreeStock cst = FreeStockDB.FirstOrDefault(c => c.ItemNumber == o.ItemNumber && c.WarehouseId == o.WarehouseId && c.ItemMultiMRPId == o.ItemMultiMRPId);
                    if (cst != null)
                    {
                        cst.UpdatedDate = indianTime;
                        cst.CurrentInventory = (cst.CurrentInventory + (o.DiffFreeStock));
                        this.Entry(cst).State = EntityState.Modified;

                        FreeStockHistory Oss = new FreeStockHistory();
                        Oss.FreeStockId = cst.FreeStockId;
                        Oss.ItemMultiMRPId = cst.ItemMultiMRPId;
                        Oss.ManualReason = "From Uploader :" + o.Reason;
                        Oss.ItemNumber = cst.ItemNumber;
                        Oss.itemname = cst.itemname;
                        Oss.TotalInventory = cst.CurrentInventory;
                        Oss.ManualInventoryIn = o.DiffFreeStock;
                        Oss.WarehouseId = cst.WarehouseId;
                        Oss.CurrentInventory = cst.CurrentInventory;
                        Oss.CreationDate = indianTime;
                        Oss.userid = User.PeopleID;
                        FreeStockHistoryDB.Add(Oss);
                        int id = this.Commit();

                    }
                }
            }
            return true;
        }
        #endregion
        //public CurrentStock GetCurrentStock(int id, int CompanyId)
        //{

        //    CurrentStock ct = DbCurrentStock.Where(x => x.ItemId == id && x.CompanyId == CompanyId).SingleOrDefault();
        //    if (ct != null)
        //    {
        //        return ct;
        //    }

        //    return null;
        //}
        #region CurrentStock
        public IEnumerable<CurrentStock> GetAllCurrentStock(int CompanyId)
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CompanyId == CompanyId).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CompanyId == CompanyId).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllEmptyStock()
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                var data = DbCurrentStock.Where(x => x.CurrentInventory == 0 && x.IsEmptyStock == true).AsEnumerable();
                return data;
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CurrentInventory <= 0 && x.IsEmptyStock == true).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllCurrentStockWid(int CompanyId, int Warehouse_id)
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CompanyId == CompanyId).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllAdjCurrentStockWid(int CompanyId, int Warehouse_id)
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CompanyId == CompanyId).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllEmptyStockItem(int CompanyId, int Warehouse_id)
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id && x.CurrentInventory <= 0 && x.IsEmptyStock == true).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CompanyId == CompanyId && x.CurrentInventory <= 0 && x.IsEmptyStock == true).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllEmptyStockItemForWeb(int CompanyId, int Warehouse_id)
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id && x.CurrentInventory == 0).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CompanyId == CompanyId && x.CurrentInventory == 0).AsEnumerable();
            }
        }
        public IEnumerable<CurrentStock> GetAllEmptyStockItemForWeb()
        {
            if (DbCurrentStock.AsEnumerable().Count() > 0)
            {
                return DbCurrentStock.Where(x => x.CurrentInventory == 0).AsEnumerable();
            }
            else
            {
                List<CurrentStock> currentStock = new List<CurrentStock>();
                return currentStock.Where(x => x.CurrentInventory == 0).AsEnumerable();
            }
        }
        #endregion
        public IEnumerable<FreeStock> GetAllFreeStock(int WarehouseId)//pooja--12/09/2019
        {

            return FreeStockDB.Where(x => x.WarehouseId == WarehouseId && x.Deleted == false).AsEnumerable();

        }

        public IEnumerable<FreeStock> GetAllFreeStockWid(int WarehouseId)
        {

            return FreeStockDB.Where(x => x.WarehouseId == WarehouseId && x.Deleted == false).AsEnumerable();

        }

        public IEnumerable<PurchaseOrderDetail> AllPOrderDetails(int i, int compid, int warehouseid)
        {
            return DPurchaseOrderDeatil.Where(c => c.PurchaseOrderId == i && c.CompanyId == compid && c.WarehouseId == warehouseid).AsEnumerable();
        }
        public PurchaseOrderMaster AllPOrderDetails1(int i, int compid)
        {
            PurchaseOrderMaster pm = DPurchaseOrderMaster.Where(c => c.PurchaseOrderId == i && c.CompanyId == compid).SingleOrDefault();
            pm.purDetails = PurchaseOrderRecivedDetails.Where(c => c.PurchaseOrderId == i && c.CompanyId == compid).ToList();
            if (pm.purDetails != null)
            {
                foreach (var a in pm.purDetails)
                {

                    var item = itemMasters.Where(c => c.Number == a.ItemNumber && c.CompanyId == compid && c.WarehouseId == a.WarehouseId).FirstOrDefault();
                    if (item != null)
                    {
                        var barcode = ItemBarcodes.FirstOrDefault(c => c.ItemNumber == item.ItemNumber && c.IsActive && c.IsDeleted == false).Barcode;
                        a.TotalTaxPercentage = item.TotalTaxPercentage;
                        a.CessTaxPercentage = item.TotalCessPercentage;
                        a.Barcode = barcode;
                        //a.MRP = item.price;
                    }
                }
            }
            return pm;
        }
        public PaggingData AllPOMasterWid(int list, int page, int Warehouseid, int CompanyId)
        {
            PaggingData obj = new PaggingData();
            obj.total_count = DPurchaseOrderMaster.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouseid && x.Status != "Blank PO").Count();
            obj.ordermaster = DPurchaseOrderMaster.AsEnumerable().Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouseid && x.Status != "Blank PO").OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();

            return obj;
        }
        public PaggingData AllIRMasterWid(int list, int page, int Warehouse_id, int CompanyId, int userId)
        {
            PaggingData obj = new PaggingData();
            obj.total_count = IRMasterDB.Where(x => x.WarehouseId == Warehouse_id && x.BuyerId == userId).Where(a => a.IRStatus == "Pending from Buyer side" || a.IRStatus == "Approved from Buyer side" || a.IRStatus == "Rejected from Buyer side").Count();
            obj.ordermaster = IRMasterDB.AsEnumerable().Where(x => x.WarehouseId == Warehouse_id && x.BuyerId == userId).Where(a => a.IRStatus == "Pending from Buyer side" || a.IRStatus == "Approved from Buyer side" || a.IRStatus == "Rejected from Buyer side").OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();
            return obj;
        }
        public PaggingData AllTOMasterWid(int list, int page, int Warehouseid, int CompanyId)
        {
            PaggingData obj = new PaggingData();
            obj.total_count = TransferWHOrderMasterDB.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouseid).Count();
            obj.ordermaster = TransferWHOrderMasterDB.AsEnumerable().Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouseid).OrderByDescending(y => y.CreationDate).Skip((page - 1) * list).Take(list).ToList();

            return obj;
        }
        public PaggingData AllTORequestMasterWid(int list, int page, int ReqWarehouse_id, int CompanyId)
        {
            PaggingData obj = new PaggingData();

            obj.total_count = TransferWHOrderMasterDB.Where(x => x.CompanyId == CompanyId && x.RequestToWarehouseId == ReqWarehouse_id).Count();
            obj.ordermaster = TransferWHOrderMasterDB.AsEnumerable().Where(x => x.CompanyId == CompanyId && x.RequestToWarehouseId == ReqWarehouse_id).OrderByDescending(y => y.CreationDate).Skip((page - 1) * list).Take(list).ToList();
            return obj;
        }
        public PaggingData AllPOMaster(int list, int page, int CompanyId)
        {
            PaggingData obj = new PaggingData();

            obj.total_count = DPurchaseOrderMaster.Where(x => x.CompanyId == CompanyId).Count();
            obj.ordermaster = DPurchaseOrderMaster.AsEnumerable().Where(x => x.CompanyId == CompanyId).OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();

            return obj;
        }
        public IEnumerable<PurchaseOrderDetail> AllPOdetails(int compid)
        {
            if (DPurchaseOrderDeatil.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return DPurchaseOrderDeatil.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<PurchaseOrderDetail> purchaseOrderDetail = new List<PurchaseOrderDetail>();
                return purchaseOrderDetail.Where(x => x.CompanyId == compid).AsEnumerable();
            }
        }
        public TaxGroupDetails AddTaxGRPDetail(TaxGroupDetails e)
        {
            try
            {
                TaxMaster TaxMasters = DbTaxMaster.Where(x => x.TaxID == e.TaxID && x.Deleted == false).FirstOrDefault();
                e.TaxName = TaxMasters.TaxName;
                e.TPercent = TaxMasters.TPercent;
                DbTaxGroupDetails.Add(e);
                int id = this.Commit();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return e;
        }
        public IEnumerable<PurchaseOrder> AllPurchaseOrder(int compid)
        {

            if (DbPurchaseOrder.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return DbPurchaseOrder.Where(x => x.Status == "Pending" && x.CompanyId == compid).AsEnumerable();
            }
            else

            {
                List<PurchaseOrder> purchaseorder = new List<PurchaseOrder>();
                return purchaseorder.Where(x => x.Status == "Pending").AsEnumerable();
            }

        }
        public List<PurchaseOrderList> AddPurchaseOrder(List<PurchaseOrderList> poList, int compid)
        {
            List<PurchaseOrderList> newpoList = new List<PurchaseOrderList>();
            var suplist = poList.Select(o => o.SupplierId).Distinct().ToList();
            foreach (var sup in suplist)
            {
                newpoList = null;
                int supid = Convert.ToInt32(sup);
                newpoList = poList.Where(s => s.SupplierId == supid).ToList();
                var diffwarehouslist = newpoList.Select(w => w.WarehouseId).Distinct().ToList();
                foreach (var diffwar in diffwarehouslist)
                {
                    newpoList = null;
                    PurchaseOrderMaster pom = new PurchaseOrderMaster();
                    pom.WarehouseId = Convert.ToInt32(diffwar);
                    newpoList = poList.Where(s => s.SupplierId == supid && s.WarehouseId == pom.WarehouseId && s.requiredqty > 0 && s.CompanyId == compid).ToList();
                    Supplier suplier = Suppliers.Where(x => x.SupplierId == supid && x.Deleted == false && x.CompanyId == compid).SingleOrDefault();
                    Warehouse whobj = Warehouses.Where(x => x.WarehouseId == pom.WarehouseId && x.Deleted == false && x.CompanyId == compid).SingleOrDefault();

                    if (newpoList.Count > 0)
                    {
                        pom.SupplierId = Convert.ToInt32(suplier.SupplierId);
                        pom.SupplierName = suplier.Name;
                        pom.WarehouseName = whobj.WarehouseName;
                        pom.Status = "Success";
                        pom.CreationDate = indianTime;
                        pom.CreatedBy = "Accounted";
                        pom.Acitve = true;
                        DPurchaseOrderMaster.Add(pom);
                        int id = this.Commit();
                        int po_id = pom.PurchaseOrderId;
                        foreach (var i in newpoList)
                        {
                            CurrentStock cs = DbCurrentStock.Where(x => x.WarehouseId == pom.WarehouseId && x.CompanyId == compid).Where(x => x.ItemNumber == i.SKUCode).Select(x => x).SingleOrDefault();

                            if (cs == null)
                            {
                                ItemMaster itemmaster = itemMasters.Where(x => x.ItemId == Convert.ToInt32(i.ItemId) && x.CompanyId == compid).SingleOrDefault();

                                CurrentStock cstock = new CurrentStock();
                                cstock.CityId = whobj.Cityid;
                                cstock.CityName = whobj.CityName;

                                cstock.CreatedBy = "stock keeper";
                                cstock.CreationDate = indianTime;
                                cstock.CurrentInventory = 0;
                                cstock.Deleted = false;
                                //cstock.ItemId = Convert.ToInt32(i.ItemId);
                                cstock.itemname = i.ItemName;
                                cstock.UpdatedDate = indianTime;
                                cstock.ItemNumber = itemmaster.Number;

                                cstock.UpdateBy = "stock keeper";
                                cstock.WarehouseId = Convert.ToInt32(pom.WarehouseId);
                                cstock.WarehouseName = whobj.WarehouseName;

                                DbCurrentStock.Add(cstock);
                                int stockid = this.Commit();

                            }
                            CurrentStock currentstock = DbCurrentStock.Where(x => x.WarehouseId == pom.WarehouseId && x.CompanyId == compid).Where(x => x.ItemNumber == i.SKUCode).Select(x => x).SingleOrDefault();
                            ItemMaster item = itemMasters.Where(x => x.ItemId == i.ItemId && x.CompanyId == compid).Select(x => x).SingleOrDefault();
                            int ci = currentstock.CurrentInventory;

                            PurchaseOrderDetail pod = new PurchaseOrderDetail();
                            pod.ItemId = Convert.ToInt32(i.ItemId);
                            pod.ItemName = i.ItemName;
                            pod.PurchaseOrderId = po_id;
                            pod.Price = Convert.ToDouble(i.Price);
                            pod.SKUCode = i.SKUCode;

                            pod.SupplierId = Convert.ToInt32(i.SupplierId);
                            pod.SupplierName = i.SupplierName;
                            pod.WarehouseId = pom.WarehouseId;
                            pod.WarehouseName = whobj.WarehouseName;


                            pod.TaxAmount = i.TaxAmount;
                            pod.TotalAmountIncTax = i.TotalAmountIncTax;
                            pod.TotalQuantity = i.NetPurchaseQty;
                            pod.MOQ = i.PurchaseMinOrderQty;
                            pod.Status = "New";
                            pod.CreationDate = indianTime;
                            pod.CreatedBy = "Store Keeper";
                            DPurchaseOrderDeatil.Add(pod);
                            int PucrchaseOrderDetailId = this.Commit();

                            //Update order detail table
                            List<OrderDetails> order = DbOrderDetails.Where(x => x.ItemId == i.ItemId).Where(x => x.WarehouseId == pom.WarehouseId && x.CompanyId == compid).Where(x => x.Status == "Pending").Select(x => x).ToList();
                            // var diffwarehouslist = newpoList.Select(w => w.Warehouseid).Distinct().ToList();
                            var ordermasterid = order.Select(o => o.OrderId).Distinct().ToList();

                            foreach (var o in order)
                            {
                                o.Status = "Approved";

                                //DbOrderDetails.Attach(o);
                                this.Entry(o).State = EntityState.Modified;
                                this.Commit();

                                OrderMaster ord = DbOrderMaster.Where(x => x.OrderId == o.OrderId && x.CompanyId == compid).Where(x => x.Status == "Pending" || x.Status == "Partially").SingleOrDefault();
                                //by moin
                                OrderDetails ordtail = DbOrderDetails.Where(y => y.OrderId == o.OrderId && y.CompanyId == compid).Where(y => y.Status == "Pending").FirstOrDefault();
                                if (ord != null && ordtail == null)
                                {
                                    ord.Status = "Approved";
                                    //DbOrderMaster.Attach(ord);
                                    this.Entry(ord).State = EntityState.Modified;
                                    this.Commit();
                                }
                                else if (ord != null && ordtail != null)
                                {
                                    ord.Status = "Partially";
                                    //DbOrderMaster.Attach(ord);
                                    this.Entry(ord).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }

                            //UPDATE STATUS IN sTOCK..

                            currentstock.CurrentInventory = ((i.NetPurchaseQty * i.PurchaseMinOrderQty) - i.requiredqty);
                            this.Entry(currentstock).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                    else
                    {
                        // if Required Quantity is 0;
                        newpoList = poList.Where(s => s.SupplierId == supid && s.WarehouseId == pom.WarehouseId && s.CompanyId == compid).ToList();
                        foreach (var i in newpoList)
                        {
                            List<OrderDetails> order = DbOrderDetails.Where(x => x.ItemId == i.ItemId && x.CompanyId == compid).Where(x => x.WarehouseId == pom.WarehouseId).Where(x => x.Status == "Pending").Select(x => x).ToList();
                            foreach (var o in order)
                            {
                                o.Status = "Approved";
                                //DbOrderDetails.Attach(o);
                                this.Entry(o).State = EntityState.Modified;
                                this.Commit();
                                OrderMaster ord = DbOrderMaster.Where(x => x.OrderId == o.OrderId && x.CompanyId == compid).Where(x => x.Status == "Pending").SingleOrDefault();
                                if (ord != null)
                                {
                                    ord.Status = "Approved";
                                    //DbOrderMaster.Attach(ord);
                                    this.Entry(ord).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }
                            CurrentStock currentstock = DbCurrentStock.Where(x => x.ItemNumber == i.SKUCode && i.CompanyId == compid).Where(x => x.WarehouseId == pom.WarehouseId).SingleOrDefault();
                            currentstock.CurrentInventory = ((i.NetPurchaseQty * i.PurchaseMinOrderQty) - i.requiredqty);
                            this.Entry(currentstock).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                }
            }
            return poList;
        }

        public IEnumerable<TaxGroupDetails> AlltaxgroupDetails(int i, int compid)
        {
            return DbTaxGroupDetails.Where(c => c.GruopID == i && c.CompanyId == compid).AsEnumerable();

        }
        public IEnumerable<TaxMaster> AllTaxMaster(int compid)
        {

            if (DbTaxMaster.AsEnumerable().Count() > 0)
            {
                return DbTaxMaster.Where(p => p.CompanyId == compid && p.Deleted == false).AsEnumerable();
            }
            else

            {
                List<TaxMaster> state = new List<TaxMaster>();
                return state.AsEnumerable();
            }

        }
        public TaxMaster AddTaxMaster(TaxMaster taxMaster)
        {
            List<TaxMaster> taxmasters = DbTaxMaster.Where(c => c.TaxName.Trim().Equals(taxMaster.TaxName.Trim()) && c.Deleted == false && c.CompanyId == taxMaster.CompanyId).ToList();
            TaxMaster objTaxMaster = new TaxMaster();
            if (taxmasters.Count == 0)
            {

                taxMaster.CreatedDate = indianTime;
                taxMaster.UpdatedDate = indianTime;
                DbTaxMaster.Add(taxMaster);
                int id = this.Commit();
                return taxMaster;
            }
            else
            {
                //objProject.Exception = "Already";
                return objTaxMaster;
            }
        }

        public TaxMaster PutTaxMaster(TaxMaster objTaxMaster)
        {

            TaxMaster TaxMasters = DbTaxMaster.Where(x => x.TaxID == objTaxMaster.TaxID && x.Deleted == false && x.CompanyId == objTaxMaster.CompanyId).FirstOrDefault();
            if (TaxMasters != null)
            {
                TaxMasters.UpdatedDate = indianTime;
                TaxMasters.TaxName = objTaxMaster.TaxName;
                TaxMasters.TAlias = objTaxMaster.TAlias;
                TaxMasters.TDiscription = objTaxMaster.TDiscription;
                TaxMasters.CreatedDate = objTaxMaster.CreatedDate;
                TaxMasters.TPercent = objTaxMaster.TPercent;
                TaxMasters.Active = objTaxMaster.Active;
                //DbTaxMaster.Attach(TaxMasters);
                this.Entry(TaxMasters).State = EntityState.Modified;
                this.Commit();
                //#region Tax History
                //var TaxHistory = DbTaxMaster.Where(x => x.TaxID == objTaxMaster.TaxID).FirstOrDefault();
                //var UserName = Peoples.Where(x => x.PeopleID == objTaxMaster.userid).Select(a => a.DisplayName).SingleOrDefault();

                //try
                //{
                //    TaxMasterHistories h1 = new TaxMasterHistories();
                //    if (TaxHistory != null)
                //    {
                //        h1.id = TaxHistory.TaxID;
                //        h1.TaxName = TaxHistory.TaxName;
                //        h1.TaxAlias = TaxHistory.TAlias;
                //        h1.TaxDiscription = TaxHistory.TDiscription;
                //        h1.TaxPercent = TaxHistory.TPercent;
                //        h1.Active = TaxHistory.Active;
                //        h1.username = UserName;
                //        h1.userid = objTaxMaster.userid;
                //        h1.CreatedDate = DateTime.Now;


                //        TaxMasterHistoriesDB.Add(h1);
                //        int id = this.SaveChanges();
                //    }
                //}
                //catch (Exception ex)
                //{
                //    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                //}
                //#endregion
                return objTaxMaster;
            }
            else
            {
                return objTaxMaster;
            }
        }
        public bool DeleteTaxMaster(int id, int CompanyId)
        {
            try
            {
                TaxMaster TaxMasters = DbTaxMaster.Where(x => x.TaxID == id && x.Deleted == false && x.CompanyId == CompanyId).FirstOrDefault();
                TaxMasters.Deleted = true;
                // DbTaxMaster.Attach(TaxMasters);
                this.Entry(TaxMasters).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<TaxGroup> AllTaxGroup(int compid)
        {

            if (DbTaxGroup.AsEnumerable().Count() > 0)
            {
                return DbTaxGroup.Where(p => p.CompanyId == compid && p.Deleted == false).AsEnumerable();
            }
            else

            {
                List<TaxGroup> taxgrp = new List<TaxGroup>();
                return taxgrp.AsEnumerable();
            }

        }
        public TaxGroup AddTaxGroup(TaxGroup taxGroup)
        {
            List<TaxGroup> TaxGroups = DbTaxGroup.Where(c => c.TGrpName.Trim().Equals(taxGroup.TGrpName.Trim()) && c.Deleted == false && c.CompanyId == taxGroup.CompanyId).ToList();
            TaxGroup objTaxgrp = new TaxGroup();
            if (TaxGroups.Count == 0)
            {

                taxGroup.CreatedDate = indianTime;
                taxGroup.UpdatedDate = indianTime;
                DbTaxGroup.Add(taxGroup);
                int id = this.Commit();
                return taxGroup;
            }
            else
            {
                return objTaxgrp;
            }
        }
        public TaxGroup PutTaxGroup(TaxGroup objTaxGroup)
        {

            TaxGroup TaxGroups = DbTaxGroup.Where(x => x.GruopID == objTaxGroup.GruopID && x.Deleted == false && x.CompanyId == objTaxGroup.CompanyId).FirstOrDefault();
            if (TaxGroups != null)
            {
                TaxGroups.UpdatedDate = indianTime;
                TaxGroups.TGrpName = objTaxGroup.TGrpName;
                TaxGroups.TGrpAlias = objTaxGroup.TGrpAlias;
                TaxGroups.TGrpDiscription = objTaxGroup.TGrpDiscription;
                TaxGroups.CreatedDate = objTaxGroup.CreatedDate;
                TaxGroups.Active = objTaxGroup.Active;
                //TaxGroups.TPercent = objTaxGroup.TPercent;

                //DbTaxGroup.Attach(TaxGroups);
                this.Entry(TaxGroups).State = EntityState.Modified;
                this.Commit();
                return objTaxGroup;
            }
            else
            {
                return objTaxGroup;
            }
        }
        public bool DeleteTaxGroup(int id, int CompanyId)
        {
            try
            {
                TaxGroup TaxGroups = DbTaxGroup.Where(x => x.GruopID == id && x.Deleted == false && x.CompanyId == CompanyId).FirstOrDefault();
                TaxGroups.Deleted = true;
                //DbTaxGroup.Attach(TaxGroups);
                this.Entry(TaxGroups).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public WarehouseSupplier AddWarehouseSupplierExcel(WarehouseSupplier warehouseSupplier)
        {
            List<WarehouseSupplier> WhSupplier = DbWarehouseSupplier.Where(c => c.Whsupid.Equals(warehouseSupplier.Whsupid)).ToList();

            WarehouseSupplier objWarehouseSupplier = new WarehouseSupplier();
            if (WhSupplier.Count == 0)
            {
                warehouseSupplier.CreatedDate = indianTime;
                warehouseSupplier.Deleted = false;
                DbWarehouseSupplier.Add(warehouseSupplier);

                int id = this.Commit();
                return warehouseSupplier;
            }
            else
            {
                return objWarehouseSupplier;
            }
        }
        public WarehouseSupplier PutWarehouseSupplierExcel(WarehouseSupplier objWarehouseSupplier)
        {
            WarehouseSupplier warehouseSupplier = DbWarehouseSupplier.Where(x => x.Whsupid == objWarehouseSupplier.Whsupid).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == objWarehouseSupplier.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State St = States.Where(x => x.Stateid == objWarehouseSupplier.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            Supplier supplier = Suppliers.Where(s => s.SupplierId == objWarehouseSupplier.SupplierId && s.Deleted == false).Select(s => s).FirstOrDefault();
            Warehouse warehouse = Warehouses.Where(w => w.WarehouseId == objWarehouseSupplier.WarehouseId && w.Deleted == false).Select(w => w).FirstOrDefault();

            if (warehouseSupplier != null)
            {
                warehouseSupplier.SupplierName = supplier.Name;
                warehouseSupplier.SupplierId = objWarehouseSupplier.SupplierId;
                warehouseSupplier.WarehouseName = warehouse.WarehouseName;
                warehouseSupplier.WarehouseId = objWarehouseSupplier.WarehouseId;

                warehouseSupplier.Stateid = objWarehouseSupplier.Stateid;
                warehouseSupplier.Cityid = objWarehouseSupplier.Cityid;
                warehouseSupplier.CityName = city.CityName;
                warehouseSupplier.Stateid = St.Stateid;
                warehouseSupplier.StateName = St.StateName;
                warehouseSupplier.CompanyId = 1;
                warehouseSupplier.CreatedDate = indianTime;
                warehouseSupplier.Deleted = false;
                warehouseSupplier.Active = true;
                warehouseSupplier.CreatedDate = objWarehouseSupplier.CreatedDate;


                //DbWarehouseSupplier.Attach(warehouseSupplier);
                this.Entry(warehouseSupplier).State = EntityState.Modified;
                this.Commit();
                return warehouseSupplier;
            }
            else
            {
                return objWarehouseSupplier;
            }
        }
        public IEnumerable<WarehouseSupplier> AllWarehouseSupplier(int compid)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return DbWarehouseSupplier.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<WarehouseSupplier> warehouseSupplier = new List<WarehouseSupplier>();
                return warehouseSupplier.AsEnumerable();
            }
        }
        public WarehouseSupplier AddWarehouseSupplier(WarehouseSupplier warehouseSupplier)
        {
            List<WarehouseSupplier> warehouses = DbWarehouseSupplier.Where(c => c.WarehouseId.Equals(warehouseSupplier.WarehouseId) && c.CompanyId == warehouseSupplier.CompanyId).ToList();

            City city = Cities.Where(x => x.Cityid == warehouseSupplier.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State St = States.Where(x => x.Stateid == warehouseSupplier.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            Supplier supplier = Suppliers.Where(s => s.SupplierId == warehouseSupplier.SupplierId && s.Deleted == false && s.CompanyId == warehouseSupplier.CompanyId).Select(s => s).FirstOrDefault();
            Warehouse warehouse = Warehouses.Where(w => w.WarehouseId == warehouseSupplier.WarehouseId && w.Deleted == false && w.CompanyId == warehouseSupplier.CompanyId).Select(w => w).FirstOrDefault();

            WarehouseSupplier objWarehouseSupplier = new WarehouseSupplier();

            if (warehouses.Count == 0)
            {

                warehouseSupplier.CreatedDate = indianTime;
                warehouseSupplier.CityName = city.CityName;
                warehouseSupplier.StateName = St.StateName;
                warehouseSupplier.SupplierName = supplier.Name;
                warehouseSupplier.WarehouseName = warehouse.WarehouseName;
                DbWarehouseSupplier.Add(warehouseSupplier);
                int id = this.Commit();
                return warehouseSupplier;
            }
            else
            {
                return objWarehouseSupplier;
            }
        }
        public WarehouseSupplier PutWarehouseSupplier(WarehouseSupplier objWarehouseSupplier)
        {
            WarehouseSupplier warehouseSupplier = DbWarehouseSupplier.Where(x => x.Whsupid == objWarehouseSupplier.Whsupid && x.CompanyId == objWarehouseSupplier.CompanyId).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == objWarehouseSupplier.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State St = States.Where(x => x.Stateid == objWarehouseSupplier.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            Supplier supplier = Suppliers.Where(s => s.SupplierId == objWarehouseSupplier.SupplierId && s.Deleted == false && s.CompanyId == objWarehouseSupplier.CompanyId).Select(s => s).FirstOrDefault();
            Warehouse warehouse = Warehouses.Where(w => w.WarehouseId == objWarehouseSupplier.WarehouseId && w.Deleted == false && w.CompanyId == objWarehouseSupplier.CompanyId).Select(w => w).FirstOrDefault();

            if (warehouseSupplier != null)
            {
                warehouseSupplier.SupplierName = supplier.Name;
                warehouseSupplier.SupplierId = objWarehouseSupplier.SupplierId;
                warehouseSupplier.WarehouseName = warehouse.WarehouseName;
                warehouseSupplier.WarehouseId = objWarehouseSupplier.WarehouseId;

                warehouseSupplier.Stateid = objWarehouseSupplier.Stateid;
                warehouseSupplier.Cityid = objWarehouseSupplier.Cityid;
                warehouseSupplier.CityName = city.CityName;
                warehouseSupplier.Stateid = St.Stateid;
                warehouseSupplier.StateName = St.StateName;
                warehouseSupplier.CompanyId = 1;
                warehouseSupplier.CreatedDate = indianTime;
                warehouseSupplier.Deleted = false;
                warehouseSupplier.Active = true;
                warehouseSupplier.CreatedDate = objWarehouseSupplier.CreatedDate;


                //DbWarehouseSupplier.Attach(warehouseSupplier);
                this.Entry(warehouseSupplier).State = EntityState.Modified;
                this.Commit();
                return warehouseSupplier;
            }
            else
            {
                return objWarehouseSupplier;
            }
        }
        public bool DeleteWarehouseSupplier(int id, int compid)
        {
            try
            {
                WarehouseSupplier DL = new WarehouseSupplier();
                DL.Whsupid = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<OrderDetails> AllOrderDetails(int i, int compid)
        {
            return DbOrderDetails.Where(c => c.OrderId == i && c.CompanyId == compid).AsEnumerable();

        }
        public IEnumerable<DamageOrderDetails> AllDOrderDetails(int i, int compid)
        {
            return DamageOrderDetailsDB.Where(c => c.DamageOrderId == i && c.CompanyId == compid).AsEnumerable();

        }
        public IList<DemandDetailsNew> AllfilteredOrderDetails(string Cityid, string Warehouseid, DateTime datefrom, DateTime dateto, int compid)
        {
            if (Cityid == "undefined" || Cityid == null || Cityid == "0")
            {
                if (Warehouseid == "undefined" || Warehouseid == null || Warehouseid == "0")
                {
                    var filteredlist = (from od in DbOrderDetails.Where(x => x.Status == "Pending")
                                        join i in itemMasters on od.ItemId equals i.ItemId
                                        where od.CreatedDate > datefrom && od.CreatedDate <= dateto && od.CompanyId == compid
                                        select new DemandDetailsNew
                                        {
                                            ItemId = od.ItemId,
                                            ItemCode = i.itemcode,
                                            MinOrderQty = i.PurchaseMinOrderQty,
                                            qty = od.qty,
                                            City = od.City,
                                            CityId = od.CityId,
                                            WarehouseId = od.WarehouseId,
                                            CreatedDate = od.CreatedDate,
                                            status = od.Status
                                        }).ToList();
                    return filteredlist;
                }
                else
                {

                    int warehouseid = Convert.ToInt32(Warehouseid.Trim());
                    var filteredlist = (from od in DbOrderDetails.Where(x => x.Status == "Pending")
                                        join i in itemMasters on od.ItemId equals i.ItemId
                                        where od.WarehouseId == warehouseid && od.CreatedDate > datefrom && od.CreatedDate <= dateto && od.CompanyId == compid
                                        select new DemandDetailsNew
                                        {
                                            ItemId = od.ItemId,
                                            itemname = od.itemname,
                                            ItemCode = i.itemcode,
                                            MinOrderQty = i.PurchaseMinOrderQty,
                                            qty = od.qty,
                                            City = od.City,
                                            CityId = od.CityId,
                                            WarehouseId = od.WarehouseId,
                                            CreatedDate = od.CreatedDate,
                                            status = od.Status
                                        }).ToList();
                    return filteredlist;
                }
            }
            else
            {
                if (Warehouseid == "undefined" || Warehouseid == null || Warehouseid == "0")
                {
                    int cityid = Convert.ToInt32(Cityid.Trim());

                    var filteredlist = (from od in DbOrderDetails.Where(x => x.Status == "Pending")
                                        join i in itemMasters on od.ItemId equals i.ItemId
                                        where od.CityId == cityid && od.CreatedDate > datefrom && od.CreatedDate <= dateto && od.CompanyId == compid
                                        select new DemandDetailsNew
                                        {
                                            ItemId = od.ItemId,
                                            itemname = od.itemname,
                                            ItemCode = i.itemcode,
                                            MinOrderQty = i.PurchaseMinOrderQty,
                                            qty = od.qty,
                                            City = od.City,
                                            CityId = od.CityId,
                                            WarehouseId = od.WarehouseId,
                                            CreatedDate = od.CreatedDate,
                                            status = od.Status

                                        }).ToList();
                    return filteredlist;
                }
                else
                {
                    int cityid = Convert.ToInt32(Cityid.Trim());
                    int warehouseid = Convert.ToInt32(Warehouseid.Trim());
                    var filteredlist = (from od in DbOrderDetails.Where(x => x.Status == "Pending")
                                        join i in itemMasters on od.ItemId equals i.ItemId
                                        where od.CityId == cityid && od.WarehouseId == warehouseid && od.CreatedDate > datefrom && od.CreatedDate <= dateto && od.CompanyId == compid
                                        select new DemandDetailsNew
                                        {
                                            ItemId = od.ItemId,
                                            itemname = od.itemname,
                                            ItemCode = i.itemcode,
                                            MinOrderQty = i.PurchaseMinOrderQty,
                                            qty = od.qty,
                                            City = od.City,
                                            CityId = od.CityId,
                                            WarehouseId = od.WarehouseId,
                                            CreatedDate = od.CreatedDate,
                                            status = od.Status

                                        }).ToList();
                    return filteredlist;
                }
            }
        }
        //public IList<PurchaseOrderList> AllfilteredOrderDetails2(string Cityid, int Warehouse_id, DateTime? datefrom, DateTime? dateto, int compid)
        //{
        //    if (datefrom == null && dateto == null && Warehouse_id == 0)
        //    {
        //        int cid = Convert.ToInt32(Cityid);
        //        var poList = (from a in DbOrderDetails
        //                      where a.Status == "Pending" && a.Deleted == false && a.CompanyId == compid && a.WarehouseId == Warehouse_id
        //                      join i in itemMasters on a.ItemId equals i.ItemId
        //                      join c in DbCurrentStock on i.ItemId equals c.ItemId into ps
        //                      from c in ps.DefaultIfEmpty()
        //                      where a.CityId == cid
        //                      select new PurchaseOrderList
        //                      {
        //                          OrderDetailsId = a.OrderDetailsId,
        //                          WarehouseId = a.WarehouseId,
        //                          Cityid = a.CityId,
        //                          WarehouseName = a.WarehouseName,
        //                          OrderDate = a.OrderDate,
        //                          SupplierId = i.SupplierId,
        //                          SupplierName = i.SupplierName,
        //                          OrderId = a.OrderId,
        //                          ItemId = a.ItemId,
        //                          SKUCode = i.itemcode,
        //                          ItemName = i.itemname,
        //                          //Unit = i.itemname,
        //                          Discription = "",
        //                          qty = a.qty,
        //                          CurrentInventory = c == null ? 0 : c.CurrentInventory,
        //                          Price = i.PurchasePrice,
        //                          NetAmmount = a.NetAmmount,
        //                          TaxPercentage = a.TaxPercentage,
        //                          TaxAmount = a.TaxAmmount,
        //                          TotalAmountIncTax = a.TotalAmt,
        //                          PurchaseMinOrderQty = i.PurchaseMinOrderQty,
        //                          Status = a.Status,
        //                          CreationDate = a.CreatedDate,
        //                          Deleted = a.Deleted

        //                      }).ToList();
        //        return poList;
        //    }
        //    else if (Warehouse_id != 0 && datefrom == null && dateto == null)
        //    {
        //        int wid = Convert.ToInt32(Warehouse_id);
        //        int cityid = Convert.ToInt32(Cityid.Trim());
        //        var poList = (from a in DbOrderDetails
        //                      where a.Status == "Pending" && a.Deleted == false && a.CompanyId == compid && a.WarehouseId == Warehouse_id
        //                      join i in itemMasters on a.ItemId equals i.ItemId
        //                      join c in DbCurrentStock on i.ItemId equals c.ItemId into ps
        //                      from c in ps.DefaultIfEmpty()
        //                      where a.CityId == cityid && a.WarehouseId == wid
        //                      select new PurchaseOrderList
        //                      {
        //                          OrderDetailsId = a.OrderDetailsId,
        //                          WarehouseId = a.WarehouseId,
        //                          Cityid = a.CityId,
        //                          WarehouseName = a.WarehouseName,
        //                          OrderDate = a.OrderDate,
        //                          SupplierId = i.SupplierId,
        //                          SupplierName = i.SupplierName,
        //                          OrderId = a.OrderId,
        //                          ItemId = a.ItemId,
        //                          SKUCode = i.itemcode,
        //                          ItemName = i.itemname,
        //                          //Unit = i.UnitName,
        //                          Discription = "",
        //                          qty = a.qty,
        //                          CurrentInventory = c == null ? 0 : c.CurrentInventory,
        //                          Price = i.PurchasePrice,
        //                          NetAmmount = a.NetAmmount,
        //                          TaxPercentage = a.TaxPercentage,
        //                          TaxAmount = a.TaxAmmount,
        //                          TotalAmountIncTax = a.TotalAmt,
        //                          PurchaseMinOrderQty = i.PurchaseMinOrderQty,
        //                          Status = a.Status,
        //                          CreationDate = a.CreatedDate,
        //                          Deleted = a.Deleted
        //                      }).ToList();
        //        return poList;
        //    }
        //    else if (Warehouse_id != 0 && datefrom != null && dateto != null)
        //    {
        //        int cityid = Convert.ToInt32(Cityid.Trim());

        //        var poList = (from a in DbOrderDetails
        //                      where a.Status == "Pending" && a.Deleted == false && a.CompanyId == compid && a.WarehouseId == Warehouse_id
        //                      join i in itemMasters on a.ItemId equals i.ItemId
        //                      join c in DbCurrentStock on i.ItemId equals c.ItemId into ps
        //                      from c in ps.DefaultIfEmpty()
        //                      where a.CityId == cityid && a.WarehouseId == Warehouse_id && a.CreatedDate > datefrom && a.CreatedDate <= dateto
        //                      select new PurchaseOrderList
        //                      {
        //                          OrderDetailsId = a.OrderDetailsId,
        //                          WarehouseId = a.WarehouseId,
        //                          Cityid = a.CityId,
        //                          WarehouseName = a.WarehouseName,
        //                          OrderDate = a.OrderDate,
        //                          SupplierId = i.SupplierId,
        //                          SupplierName = i.SupplierName,
        //                          OrderId = a.OrderId,
        //                          ItemId = a.ItemId,
        //                          SKUCode = i.itemcode,
        //                          ItemName = i.itemname,
        //                          //Unit = i.UnitName,
        //                          Discription = "",
        //                          qty = a.qty,
        //                          CurrentInventory = c == null ? 0 : c.CurrentInventory,
        //                          Price = i.PurchasePrice,
        //                          NetAmmount = a.NetAmmount,
        //                          TaxPercentage = a.TaxPercentage,
        //                          TaxAmount = a.TaxAmmount,
        //                          TotalAmountIncTax = a.TotalAmt,
        //                          PurchaseMinOrderQty = i.PurchaseMinOrderQty,
        //                          Status = a.Status,
        //                          CreationDate = a.CreatedDate,
        //                          Deleted = a.Deleted
        //                      }).ToList();
        //        return poList;
        //    }
        //    else if (Warehouse_id == 0 && datefrom != null && dateto != null)
        //    {
        //        int cityid = Convert.ToInt32(Cityid.Trim());

        //        var poList = (from a in DbOrderDetails
        //                      where a.Status == "Pending" && a.Deleted == false && a.CompanyId == compid && a.WarehouseId == Warehouse_id
        //                      join i in itemMasters on a.ItemId equals i.ItemId
        //                      join c in DbCurrentStock on i.ItemId equals c.ItemId into ps
        //                      from c in ps.DefaultIfEmpty()
        //                      where a.CityId == cityid && a.CreatedDate > datefrom && a.CreatedDate <= dateto
        //                      select new PurchaseOrderList
        //                      {
        //                          OrderDetailsId = a.OrderDetailsId,
        //                          WarehouseId = a.WarehouseId,
        //                          Cityid = a.CityId,
        //                          WarehouseName = a.WarehouseName,
        //                          OrderDate = a.OrderDate,
        //                          SupplierId = i.SupplierId,
        //                          SupplierName = i.SupplierName,
        //                          OrderId = a.OrderId,
        //                          ItemId = a.ItemId,
        //                          SKUCode = i.itemcode,
        //                          ItemName = i.itemname,
        //                          //Unit = i.UnitName,
        //                          Discription = "",
        //                          qty = a.qty,
        //                          CurrentInventory = c == null ? 0 : c.CurrentInventory,
        //                          Price = i.PurchasePrice,
        //                          NetAmmount = a.NetAmmount,
        //                          TaxPercentage = a.TaxPercentage,
        //                          TaxAmount = a.TaxAmmount,
        //                          TotalAmountIncTax = a.TotalAmt,
        //                          PurchaseMinOrderQty = i.PurchaseMinOrderQty,
        //                          Status = a.Status,
        //                          CreationDate = a.CreatedDate,
        //                          Deleted = a.Deleted
        //                      }).ToList();
        //        return poList;
        //    }
        //    else
        //    {
        //        int cityid = Convert.ToInt32(Cityid.Trim());

        //        var poList = (from a in DbOrderDetails
        //                      where a.Status == "Pending" && a.Deleted == false && a.CompanyId == compid && a.WarehouseId == Warehouse_id
        //                      join i in itemMasters on a.ItemId equals i.ItemId
        //                      join c in DbCurrentStock on i.ItemId equals c.ItemId into ps
        //                      from c in ps.DefaultIfEmpty()

        //                      select new PurchaseOrderList
        //                      {
        //                          OrderDetailsId = a.OrderDetailsId,
        //                          WarehouseId = a.WarehouseId,
        //                          Cityid = a.CityId,
        //                          WarehouseName = a.WarehouseName,
        //                          OrderDate = a.OrderDate,
        //                          SupplierId = i.SupplierId,
        //                          SupplierName = i.SupplierName,
        //                          OrderId = a.OrderId,
        //                          ItemId = a.ItemId,
        //                          SKUCode = i.itemcode,
        //                          ItemName = i.itemname,
        //                          //Unit = i.UnitName,
        //                          Discription = "",
        //                          qty = a.qty,
        //                          CurrentInventory = c == null ? 0 : c.CurrentInventory,
        //                          Price = i.PurchasePrice,
        //                          NetAmmount = a.NetAmmount,
        //                          TaxPercentage = a.TaxPercentage,
        //                          TaxAmount = a.TaxAmmount,
        //                          TotalAmountIncTax = a.TotalAmt,
        //                          PurchaseMinOrderQty = i.PurchaseMinOrderQty,
        //                          Status = a.Status,
        //                          CreationDate = a.CreatedDate,
        //                          Deleted = a.Deleted
        //                      }).ToList();
        //        return poList;
        //    }
        //}
        //public IEnumerable<OrderMaster> OrderMasterbySalesPersonId(int id, int skip, int Take)
        //{
        //    return DbOrderMaster.Where(c => c.SalesPersonId == id && c.Deleted == false).OrderByDescending(d => d.CreatedDate).Skip(skip).Take(Take).Include("orderDetails").AsEnumerable();
        //}
        public IEnumerable<OrderMaster> OrderMasterbymobile(string Mobile, int compid)
        {
            return DbOrderMaster.Where(c => c.Customerphonenum == Mobile && c.Deleted == false).Include("orderDetails").AsEnumerable();
        }
        public OrderMaster postOrderMaster(OrderMaster orderMaster)
        {
            OrderMaster customer = DbOrderMaster.Where(c => c.CustomerName.Trim().Equals(orderMaster.CustomerName.Trim())).SingleOrDefault();

            OrderMaster objOrderMaster = new OrderMaster();
            orderMaster.CompanyId = 1;
            orderMaster.BillingAddress = orderMaster.BillingAddress;
            orderMaster.ShippingAddress = orderMaster.ShippingAddress;
            orderMaster.WarehouseId = orderMaster.WarehouseId;
            orderMaster.active = true;
            orderMaster.CreatedDate = indianTime;
            orderMaster.UpdatedDate = indianTime;
            orderMaster.Deleted = false;
            DbOrderMaster.Add(orderMaster);
            int id = this.Commit();
            return orderMaster;
        }
        public IEnumerable<OrderDispatchedMaster> AllDispatchedOrderMaster(int compid)
        {
            List<OrderDispatchedMaster> newdata = new List<OrderDispatchedMaster>();
            if (OrderDispatchedMasters.AsEnumerable().Count() > 0)
            {
                var orders = OrderDispatchedMasters.Where(x => x.Deleted != true && x.CompanyId == compid).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return orders;
            }
            else
            {
                return OrderDispatchedMasters.OrderByDescending(x => x.OrderId).Include("orderDetails").AsEnumerable();
            }
        }
        public IList<Customer> filteredCustomerMaster(string Cityid, DateTime? datefrom, DateTime? dateto, string mobile, string skcode, List<int> ids)
        {


            if (Cityid == "undefined")
            {

                if (mobile != "" && skcode == "")
                {

                    var filteredlist = (from od in Customers where od.Mobile.Contains(mobile) && od.Deleted == false select od).ToList();
                    return filteredlist;
                }
                else if (mobile == "" && skcode != "")
                {
                    var filteredlist = (from od in Customers where od.Skcode.Contains(skcode) && od.Deleted == false select od).ToList();
                    return filteredlist;
                }
                else if (ids.Count > 0 && ids != null && mobile != "" && skcode == "")
                {
                    var filteredlist = (from od in Customers where od.Deleted == false && ids.Contains(od.CustomerId) && od.Mobile.Contains(mobile) select od).ToList();
                    return filteredlist;
                }
                else if (ids.Count > 0 && ids != null && mobile == "" && skcode == "")
                {
                    var filteredlist = (from od in Customers where od.Deleted == false && ids.Contains(od.CustomerId) select od).ToList();
                    return filteredlist;
                }
                else
                {
                    var filteredlist = (from od in Customers where od.Skcode.Contains(skcode) && od.Deleted == false && od.Mobile.Contains(mobile) select od).ToList();
                    return filteredlist;
                }

            }
            else { }
            int cityid = Convert.ToInt32(Cityid.Trim());

            if (mobile != "" && skcode == "" && dateto == null && datefrom == null)
            {

                var filteredlist = (from od in Customers where od.Mobile.Contains(mobile) && od.Deleted == false && od.Cityid == cityid select od).ToList();
                return filteredlist;
            }
            else if (dateto == null && datefrom == null && mobile != "" && skcode != "")
            {
                var filteredlist = (from od in Customers where od.Mobile.Contains(mobile) && od.Skcode.Contains(skcode) && od.Deleted == false && od.Cityid == cityid select od).ToList();
                return filteredlist;
            }
            else if (dateto == null && datefrom == null && mobile == "" && skcode != "")
            {
                var filteredlist = (from od in Customers where od.Skcode.Contains(skcode) && od.Deleted == false && od.Cityid == cityid select od).ToList();
                return filteredlist;
            }
            else if (dateto != null && datefrom != null && mobile == "" && skcode == "" && Cityid != "")
            {
                dateto = dateto.Value.AddDays(1).AddSeconds(-1);
                var filteredlist = (from od in Customers where od.Skcode.Contains(skcode) && od.Deleted == false && od.Cityid == cityid && od.CreatedDate > datefrom && od.CreatedDate < dateto select od).ToList();
                return filteredlist;
            }
            else if (ids.Count > 0 && ids != null && dateto == null && datefrom == null && mobile == "" && skcode == "")
            {
                var filteredlist = (from od in Customers where od.Deleted == false && ids.Contains(od.CustomerId) && od.Cityid == cityid select od).ToList();
                return filteredlist;
            }
            else
            {
                var filteredlist = (from od in Customers where od.Deleted == false && od.Cityid == cityid select od).ToList();
                return filteredlist;
            }
        }
        public IList<OrderMaster> filteredOrderMasters1(string Warehouseid, DateTime datefrom, DateTime dateto, int compid)
        {
            int warehouseid = Convert.ToInt32(Warehouseid.Trim());
            {
                var result = DbOrderMaster.Where(x => x.WarehouseId == warehouseid && x.CreatedDate > datefrom && x.CreatedDate < dateto && x.CompanyId == compid).ToList();
                return result;
            }
        }
        public IList<OrderMaster> filteredOrderMaster(string Cityid, string Warehouseid, DateTime datefrom, DateTime dateto, string search, string status, string deliveryboy, int compid)
        {
            int cityid = Convert.ToInt32(Cityid.Trim());
            int warehouseid = Convert.ToInt32(Warehouseid.Trim());
            if (string.IsNullOrEmpty(search) || search == "undefined")
            {
                var filteredlist = (
                    from od in DbOrderMaster
                    where od.WarehouseId == warehouseid &&
                    od.CityId == cityid &&
                    od.CompanyId == compid &&
                    od.CreatedDate > datefrom &&
                    od.CreatedDate < dateto
                    select od
                    ).ToList();
                return filteredlist;
            }
            else
            {
                if (status == "Show All")
                {
                    var result = DbOrderMaster.Where(x => x.WarehouseId == warehouseid && x.CompanyId == compid && x.CityId == cityid && x.CreatedDate > datefrom && x.CreatedDate < dateto && (x.CustomerName.Contains(search) || x.Customerphonenum.Contains(search))).ToList();
                    return result;
                }
                else
                {
                    var result = DbOrderMaster.Where(x => x.WarehouseId == warehouseid && x.CompanyId == compid && x.CityId == cityid && x.CreatedDate > datefrom && x.CreatedDate < dateto && (x.CustomerName.Contains(search) || x.Customerphonenum.Contains(search))).ToList();
                    return result;
                }
            }
        }
        public bool DeleteOrderMaster(int id, int compid)
        {
            try
            {
                OrderMaster om = DbOrderMaster.Where(x => x.OrderId == id && x.CompanyId == compid).SingleOrDefault();
                om.Deleted = true;
                //DbOrderMaster.Attach(om);
                this.Entry(om).State = EntityState.Modified;
                this.Commit();

                List<OrderDetails> orderdetail = DbOrderDetails.Where(x => x.OrderId == id && x.CompanyId == compid).ToList();
                foreach (var od in orderdetail)
                {
                    od.Deleted = true;
                    //DbOrderDetails.Attach(od);
                    this.Entry(od).State = EntityState.Modified;
                    this.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }


        #region New Place Order API's By Atish


        public void FirstCustomerOrder(Customer cust, OrderMaster objOrderMaster)
        {
            double rewardPoints = 150;
            var walt = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
            if (walt != null)
            {
                var custRewardCityBased = CityBaseCustomerRewards.FirstOrDefault(x => x.CityId == cust.Cityid && x.IsActive && !x.IsDeleted && x.StartDate <= indianTime && x.EndDate >= indianTime
                                            && x.RewardType == "FirstOrder");
                rewardPoints = Convert.ToDouble(custRewardCityBased?.Point ?? 150);

                CustomerWalletHistory od = new CustomerWalletHistory();
                od.CustomerId = walt.CustomerId;
                //CustWarehouse custWarehouse = CustWarehouseDB.Where(c => c.CustomerId == walt.CustomerId).SingleOrDefault();
                Customer Customer = Customers.Where(c => c.CustomerId == walt.CustomerId).SingleOrDefault();
                od.WarehouseId = cust.Warehouseid ?? 0;
                od.CompanyId = cust.CompanyId ?? 0;
                od.OrderId = objOrderMaster.OrderId;
                od.NewAddedWAmount = rewardPoints;
                od.TotalWalletAmount = walt.TotalAmount + od.NewAddedWAmount;
                od.UpdatedDate = indianTime;
                od.Through = "1st Order";
                od.TransactionDate = indianTime;
                od.CreatedDate = indianTime;
                CustomerWalletHistoryDb.Add(od);
                // this.SaveChanges();

                walt.CustomerId = walt.CustomerId;
                if (walt.TotalAmount == 0)
                {
                    walt.TotalAmount = rewardPoints;
                }
                else
                {
                    walt.TotalAmount = walt.TotalAmount + rewardPoints;
                }
                walt.UpdatedDate = indianTime;

                if (custRewardCityBased != null)
                {
                    var rewardedCustomer = new RewardedCustomer
                    {
                        CustomerId = walt.CustomerId,
                        CityBaseCustomerRewardId = custRewardCityBased.Id,
                        CreatedBy = 0,
                        UpdateBy = 0,
                        IsDeleted = false,
                        CreatedDate = indianTime
                    };
                    RewardedCustomers.Add(rewardedCustomer);
                }
                this.Entry(walt).State = EntityState.Modified;

                Commit();
            }

            BackgroundTaskManager.Run(() => FirstOrderNotification(cust.CustomerId, Convert.ToInt32(rewardPoints)));
        }

        public OrderMaster RewardAndWalletPointForPlacedOrder(ShoppingCart sc, double offerWalletPoint, OrderMaster objOrderMaster, double rewardpoint, Customer cust, double walletUsedPoint1, double rewPoint, double rewAmount, CashConversion cash)
        {

            #region RewardPoint  calculation 

            if (sc.DialEarnigPoint > 0)
            {
                //rewardpoint = rewardpoint + sc.DialEarnigPoint; user in after add order puch api
                if (offerWalletPoint > 0)
                {
                    objOrderMaster.RewardPoint = rewardpoint + offerWalletPoint;
                }
                else
                {
                    objOrderMaster.RewardPoint = rewardpoint;
                }

            }
            else
            {
                if (offerWalletPoint > 0)
                {
                    objOrderMaster.RewardPoint = rewardpoint + offerWalletPoint;
                }
                else
                {
                    objOrderMaster.RewardPoint = rewardpoint;
                }

            }

            var rpoint = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
            if (rpoint != null)
            {
                if (rewardpoint > 0)
                {

                    rpoint.EarningPoint += rewardpoint;
                    rpoint.UpdatedDate = indianTime;
                    this.Entry(rpoint).State = EntityState.Modified;
                }
            }
            else
            {
                RewardPoint point = new RewardPoint();
                point.CustomerId = cust.CustomerId;
                if (rewardpoint > 0)
                    point.EarningPoint = rewardpoint;
                else
                    point.EarningPoint = 0;
                point.TotalPoint = 0;
                point.UsedPoint = 0;
                point.MilestonePoint = 0;
                point.CreatedDate = indianTime;
                point.UpdatedDate = indianTime;
                point.Deleted = false;
                this.RewardPointDb.Add(point);
            }
            #endregion

            Wallet wallet = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();

            if (objOrderMaster.RewardPoint > 0 || walletUsedPoint1 > 0)
            {
                var rpointWarehouse = WarehousePointDB.Where(c => c.WarehouseId == objOrderMaster.WarehouseId).SingleOrDefault();
                int fnlAmount = Convert.ToInt32((objOrderMaster.GrossAmount / cash.rupee) * cash.point);
                if (rpointWarehouse != null)
                {


                    if (walletUsedPoint1 > 0 && wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {

                        if (fnlAmount > walletUsedPoint1)
                        {
                            rpointWarehouse.availablePoint -= walletUsedPoint1;
                            rpointWarehouse.UsedPoint += walletUsedPoint1;
                            rewPoint = walletUsedPoint1;
                            walletUsedPoint1 = 0;
                        }
                        else
                        {
                            rpointWarehouse.availablePoint -= rewPoint;
                            rpointWarehouse.UsedPoint += rewPoint;
                            walletUsedPoint1 -= fnlAmount;
                            rewPoint = fnlAmount;
                        }

                        objOrderMaster.walletPointUsed = rewPoint;
                        try
                        {
                            rewAmount = ((rewPoint / cash.point) * cash.rupee);
                            objOrderMaster.WalletAmount = rewAmount;
                        }
                        catch (Exception e)
                        {

                            objOrderMaster.WalletAmount = 0;
                        }
                    }
                    else
                    {
                        objOrderMaster.WalletAmount = 0;
                        objOrderMaster.walletPointUsed = 0;
                    }

                    if (objOrderMaster.RewardPoint > 0)
                    {
                        rpointWarehouse.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        rpointWarehouse.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    //WarehousePointDB.Attach(rpointWarehouse);
                    this.Entry(rpointWarehouse).State = EntityState.Modified;
                    //this.SaveChanges();
                }
                else
                {
                    objOrderMaster.WalletAmount = 0;
                    objOrderMaster.walletPointUsed = 0;
                    WarehousePoint wPoint = new WarehousePoint();
                    if (objOrderMaster.RewardPoint > 0)
                    {
                        wPoint.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        wPoint.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    wPoint.WarehouseId = objOrderMaster.WarehouseId;
                    wPoint.CompanyId = objOrderMaster.CompanyId;
                    wPoint.UsedPoint = 0;
                    WarehousePointDB.Add(wPoint);
                    //this.SaveChanges();
                }
            }


            objOrderMaster.GrossAmount = System.Math.Round((objOrderMaster.GrossAmount - rewAmount), 0);
            objOrderMaster.TotalAmount = objOrderMaster.TotalAmount - rewAmount;

            if (sc.walletPointUsed > 0)
            {

                var rpoint1 = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                //var WData = WalletDb.Where(x => x.CustomerId == cust.CustomerId).SingleOrDefault();
                if (rpoint1 != null)
                {
                    if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {
                        rpoint1.UsedPoint += sc.walletPointUsed;
                        rpoint1.UpdatedDate = indianTime;
                        this.Entry(rpoint1).State = EntityState.Modified;
                    }
                }

                CustomerWalletHistory CWH = new CustomerWalletHistory();
                if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                {
                    CWH.WarehouseId = cust.Warehouseid ?? 0;
                    CWH.CompanyId = cust.CompanyId ?? 0;
                    CWH.CustomerId = wallet.CustomerId;
                    CWH.Through = "Used On Order";
                    CWH.NewOutWAmount = sc.walletPointUsed;
                    CWH.TotalWalletAmount = wallet.TotalAmount - sc.walletPointUsed;
                    CWH.TotalEarningPoint = rpoint1.EarningPoint;
                    CWH.CreatedDate = indianTime;
                    CWH.UpdatedDate = indianTime;
                    CWH.OrderId = objOrderMaster.OrderId;
                    CustomerWalletHistoryDb.Add(CWH);

                    //update in wallet
                    wallet.TotalAmount -= sc.walletPointUsed;
                    wallet.TransactionDate = indianTime;
                    this.Entry(wallet).State = EntityState.Modified;

                }
            }

            return objOrderMaster;
        }



        public OrderMaster RewardAndWalletPointForDistributorPlacedOrder(ShoppingCart sc, double offerWalletPoint, OrderMaster objOrderMaster, double rewardpoint, Customer cust, double walletUsedPoint1, double rewPoint, double rewAmount, CashConversion cash)
        {


            Wallet wallet = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();

            if (objOrderMaster.RewardPoint > 0 || walletUsedPoint1 > 0)
            {
                var rpointWarehouse = WarehousePointDB.Where(c => c.WarehouseId == objOrderMaster.WarehouseId).SingleOrDefault();
                int fnlAmount = Convert.ToInt32((objOrderMaster.GrossAmount / cash.rupee) * cash.point);
                if (rpointWarehouse != null)
                {


                    if (walletUsedPoint1 > 0 && wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {

                        if (fnlAmount > walletUsedPoint1)
                        {
                            rpointWarehouse.availablePoint -= walletUsedPoint1;
                            rpointWarehouse.UsedPoint += walletUsedPoint1;
                            rewPoint = walletUsedPoint1;
                            walletUsedPoint1 = 0;
                        }
                        else
                        {
                            rpointWarehouse.availablePoint -= rewPoint;
                            rpointWarehouse.UsedPoint += rewPoint;
                            walletUsedPoint1 -= fnlAmount;
                            rewPoint = fnlAmount;
                        }

                        objOrderMaster.walletPointUsed = rewPoint;
                        try

                        {
                            rewAmount = ((rewPoint / cash.point) * cash.rupee);
                            objOrderMaster.WalletAmount = rewAmount;
                        }
                        catch (Exception e)
                        {

                            objOrderMaster.WalletAmount = 0;
                        }
                    }
                    else
                    {
                        objOrderMaster.WalletAmount = 0;
                        objOrderMaster.walletPointUsed = 0;
                    }

                    if (objOrderMaster.RewardPoint > 0)
                    {
                        rpointWarehouse.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        rpointWarehouse.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    //WarehousePointDB.Attach(rpointWarehouse);
                    this.Entry(rpointWarehouse).State = EntityState.Modified;
                    //this.SaveChanges();
                }
                else
                {
                    objOrderMaster.WalletAmount = 0;
                    objOrderMaster.walletPointUsed = 0;
                    WarehousePoint wPoint = new WarehousePoint();
                    if (objOrderMaster.RewardPoint > 0)
                    {
                        wPoint.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        wPoint.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    wPoint.WarehouseId = objOrderMaster.WarehouseId;
                    wPoint.CompanyId = objOrderMaster.CompanyId;
                    wPoint.UsedPoint = 0;
                    WarehousePointDB.Add(wPoint);
                    //this.SaveChanges();
                }
            }


            objOrderMaster.GrossAmount = System.Math.Round((objOrderMaster.GrossAmount - rewAmount), 0);
            objOrderMaster.TotalAmount = objOrderMaster.TotalAmount - rewAmount;

            if (sc.walletPointUsed > 0)
            {

                var rpoint1 = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                //var WData = WalletDb.Where(x => x.CustomerId == cust.CustomerId).SingleOrDefault();
                if (rpoint1 != null)
                {
                    if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {
                        rpoint1.UsedPoint += sc.walletPointUsed;
                        rpoint1.UpdatedDate = indianTime;
                        this.Entry(rpoint1).State = EntityState.Modified;
                    }
                }

                CustomerWalletHistory CWH = new CustomerWalletHistory();
                if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                {
                    CWH.WarehouseId = cust.Warehouseid ?? 0;
                    CWH.CompanyId = cust.CompanyId ?? 0;
                    CWH.CustomerId = wallet.CustomerId;
                    CWH.Through = "Used On Order";
                    CWH.NewOutWAmount = sc.walletPointUsed;
                    CWH.TotalWalletAmount = wallet.TotalAmount - sc.walletPointUsed;
                    CWH.TotalEarningPoint = rpoint1.EarningPoint;
                    CWH.CreatedDate = indianTime;
                    CWH.UpdatedDate = indianTime;
                    CWH.OrderId = objOrderMaster.OrderId;
                    CustomerWalletHistoryDb.Add(CWH);

                    //update in wallet
                    wallet.TotalAmount -= sc.walletPointUsed;
                    wallet.TransactionDate = indianTime;
                    this.Entry(wallet).State = EntityState.Modified;

                }
            }

            return objOrderMaster;
        }


        private List<ItemClassificationDC> GetItemClassifications(string ItemNumber, int WarehouseId)
        {
            using (AuthContext context = new AuthContext())
            {

                DataTable dt = new DataTable();
                dt.Columns.Add("ItemNumber");
                dt.Columns.Add("WarehouseId");


                DataRow dr = dt.NewRow();
                dr["ItemNumber"] = ItemNumber;
                dr["WarehouseId"] = WarehouseId;
                dt.Rows.Add(dr);


                var param = new SqlParameter
                {
                    TypeName = "dbo.ItemNumberType",
                    ParameterName = "items",
                    Value = dt
                };

                List<ItemClassificationDC> _result = context.Database.SqlQuery<ItemClassificationDC>("exec [GetItemsClassification] @items", param).ToList();
                return _result;
            }

        }

        #endregion

        public int GetRetailerMinOrder(Customer customer)
        {
            int minOrderValue = Convert.ToInt32(ConfigurationManager.AppSettings["MinOrderValue"]);

            if (customer != null && customer.Cityid.HasValue && customer.Warehouseid.HasValue)
            {
                MongoDbHelper<RetailerMinOrder> mongoDbHelper = new MongoDbHelper<RetailerMinOrder>();
                var cartPredicate = PredicateBuilder.New<RetailerMinOrder>(x => x.CityId == customer.Cityid && x.WarehouseId == customer.Warehouseid.Value);
                var retailerMinOrder = mongoDbHelper.Select(cartPredicate, null, null, null, collectionName: "RetailerMinOrder").FirstOrDefault();
                if (retailerMinOrder != null)
                {
                    minOrderValue = retailerMinOrder.MinOrderValue;
                }
                else
                {
                    RetailerMinOrder newRetailerMinOrder = new RetailerMinOrder
                    {
                        CityId = customer.Cityid.Value,
                        WarehouseId = customer.Warehouseid.Value,
                        MinOrderValue = minOrderValue
                    };
                    var result = mongoDbHelper.Insert(newRetailerMinOrder);
                }
            }

            return minOrderValue;
        }


        #region New Place Order API's By sudhir
        public async Task<PlaceOrderResponse> PushOrderMasterV6(ShoppingCart sc)
        {

            Guid guid = Guid.NewGuid();
            string LimitCheck_GUID = guid.ToString();
            bool Exist = false;

            var placeOrderResponse = new PlaceOrderResponse();
            string MemberShipName = Common.Constants.AppConstants.MemberShipName;
            int MemberShipHours = Common.Constants.AppConstants.MemberShipHours;

            Customer cust = new Customer();
            var rsaKey = string.Empty;
            var hdfcOrderId = string.Empty;
            var eplOrderId = string.Empty;

            OrderMaster objOrderMaster = new OrderMaster();
            List<BillDiscount> BillDiscounts = new List<BillDiscount>();


            cust = Customers.FirstOrDefault(c => !c.Deleted && c.CustomerId == sc.CustomerId);

            if (cust == null)
            {
                //if (retailercustomerIds.Any(x => x == sc.CustomerId.Value))
                //{
                //    retailercustomerIds.Remove(sc.CustomerId.Value);
                //}
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = "Customer not found.";
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }

            sc.ShippingAddress = cust.ShippingAddress;

            MongoDbHelper<AngularJSAuthentication.Model.CustomerShoppingCart.CustomerShoppingCart> mongoDbHelper = new MongoDbHelper<AngularJSAuthentication.Model.CustomerShoppingCart.CustomerShoppingCart>(); //!x.GeneratedOrderId.HasValue
            var cartPredicate = PredicateBuilder.New<AngularJSAuthentication.Model.CustomerShoppingCart.CustomerShoppingCart>(x => x.CustomerId == cust.CustomerId && x.WarehouseId == cust.Warehouseid && !x.GeneratedOrderId.HasValue && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));
            if (sc.SalesPersonId.HasValue && sc.SalesPersonId.Value > 0)
            {
                cartPredicate = cartPredicate.And(x => x.PeopleId == sc.SalesPersonId);
            }
            else
            {
                cartPredicate = cartPredicate.And(x => x.PeopleId == 0);
            }
            var customerShoppingCart = (await mongoDbHelper.SelectAsync(cartPredicate, null, null, null, collectionName: "CustomerShoppingCart")).FirstOrDefault();

            if ((sc.APPType == "SalesApp" || sc.APPType == "Retailer") && customerShoppingCart == null)
            {
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = "आपका आर्डर प्राप्त हो चुका है | कृपया My Order में चेक करें |";
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }

            int minLineItem = Convert.ToInt32(ConfigurationManager.AppSettings["FlashDealMinLineItem"]);
            if (minLineItem > 0 && sc.itemDetails.Any(x => x.OfferCategory == 2) && sc.itemDetails.Count() < minLineItem)
            {

                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = string.Format("फ़्लैश डील में आर्डर के लिए आपको कम से कम {0} लाइन आइटम लेना अनिवार्य है।", minLineItem);
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }
            var itemIds = sc.itemDetails.Select(x => x.ItemId).Distinct().ToList();

            if (cust.IsKPP && DistributorVerificationDB.Any(x => x.CustomerID == cust.CustomerId && x.IsActive))
            {
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = "आप इस ऐप पर ऑर्डर देने के लिए अधिकृत नहीं हैं|";
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }


            List<AngularJSAuthentication.Model.ItemMaster> itemMastersList = itemMasters.Where(x => itemIds.Contains(x.ItemId)).Distinct().ToList();

            var minOrderValue = GetRetailerMinOrder(cust);

            MongoDbHelper<AngularJSAuthentication.Model.CustomerShoppingCart.WalletHundredPercentUse> mongoDbHelper_W = new MongoDbHelper<AngularJSAuthentication.Model.CustomerShoppingCart.WalletHundredPercentUse>(); //!x.GeneratedOrderId.HasValue
            var WalletHPer = mongoDbHelper_W.Select(x => x.WarehouseId == cust.Warehouseid).FirstOrDefault();
            double ConfigWalletUsePercent = WalletHPer != null ? 100 : Convert.ToDouble(ConfigurationManager.AppSettings["WalletUseOfOrderValue"]);
            // check for percentage WalletUseOfOrderValue
            if (sc.walletPointUsed > 0)
            {
                double CalculateWalletPoints = Convert.ToInt32((sc.TotalAmount * ConfigWalletUsePercent / 100) * 10);

                //Convert.ToInt32(sc.WalletAmount / (sc.TotalAmount ) * 100);
                if (CalculateWalletPoints < sc.walletPointUsed)
                {
                    //if (retailercustomerIds.Any(x => x == cust.CustomerId))
                    //{
                    //    retailercustomerIds.Remove(cust.CustomerId);
                    //}
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = string.Format("आप इस आर्डर पर {0} वॉलेट पॉइंट से ज्यादा के वॉलेट पॉइंट यूज़ नहीं कर पावोगे। असुविधा के लिए खेद है।", CalculateWalletPoints);
                    placeOrderResponse.cart = null;
                    return placeOrderResponse;
                }
            }
            if (sc.APPType == "Retailer")
            {
                if (sc.TotalAmount + (sc.BillDiscountAmount ?? 0) + (sc.WalletAmount) < minOrderValue)
                {
                    //if (retailercustomerIds.Any(x => x == cust.CustomerId))
                    //{
                    //    retailercustomerIds.Remove(cust.CustomerId);
                    //}
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = string.Format("हम आज केवल {0} / - से अधिक की राशि के आर्डर को स्वीकार कर रहे हैं। असुविधा के लिए खेद है।", minOrderValue);
                    placeOrderResponse.cart = null;
                    return placeOrderResponse;
                }

            }
            else if (sc.APPType == "SalesApp")
            {

                int NoOfLineItemSales = 0;

                minOrderValue = minOrderValue == 0 ? Convert.ToInt32(ConfigurationManager.AppSettings["MinOrderValue"]) : minOrderValue;
                NoOfLineItemSales = CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).Select(x =>
                    x.NoOfLineItemSales
                ).FirstOrDefault();
                RetailerAppManager retailerAppManager = new RetailerAppManager();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = retailerAppManager.GetStoreWithDetail();
                List<long> storeIds = new List<long>();
                List<string> numbers = new List<string>();
                string storeName = "";
                foreach (var item in itemMastersList)
                {
                    numbers.Add(item.ItemNumber);
                    if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == item.Categoryid && x.SubCategoryId == item.SubCategoryId && x.BrandId == item.SubsubCategoryid))
                    {
                        var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == item.Categoryid && x.SubCategoryId == item.SubCategoryId && x.BrandId == item.SubsubCategoryid);
                        storeIds.Add(store.StoreId);
                        storeName = store.StoreName;
                    }
                }
                if (storeIds.Any() && storeIds.Distinct().Count() == 1)
                {
                    MongoDbHelper<StoreMinOrder> mHelperStore = new MongoDbHelper<StoreMinOrder>();
                    var storeMinOrder = mHelperStore.Select(x => x.StoreId > 0 && (x.CityId == 0 || x.CityId == cust.Cityid) && x.WarehouseId == cust.Warehouseid && storeIds.Contains(x.StoreId)).ToList();

                    if (storeMinOrder != null)
                    {
                        var MinOrder = storeMinOrder.OrderBy(x => x.MinOrderValue).Select(x => new { MinOrderValue = x.MinOrderValue, MinLineItem = x.MinLineItem }).FirstOrDefault();
                        if (MinOrder != null)  // new change
                        {
                            minOrderValue = MinOrder.MinOrderValue;
                            NoOfLineItemSales = MinOrder.MinLineItem;

                        }
                    }
                    var paymentThroughs = sc.paymentThrough.Split(',').ToList();
                    if (sc.PaylaterAmount > 0 && paymentThroughs.Any(x => x.ToLower() == "paylater"))
                    {
                        double paylaterstorelimit = 0;
                        long paylaterstoreid = storeIds.FirstOrDefault();
                        MongoDbHelper<BlockPayLaterAmount> mongopaylaterDbHelper = new MongoDbHelper<BlockPayLaterAmount>();
                        var paylaterPredicate = PredicateBuilder.New<BlockPayLaterAmount>(x => x.CustomerId == sc.CustomerId && x.StoreId == paylaterstoreid && x.IsActive && x.Guid != sc.BlockPayLaterAmountGuid);
                        var blockpaylaterAmount = mongopaylaterDbHelper.Select(paylaterPredicate).ToList().Sum(x => x.Amount);
                        System.Data.DataTable IdDt = new System.Data.DataTable();
                        IdDt.Columns.Add("stringValue");
                        foreach (var item in numbers)
                        {
                            var dr = IdDt.NewRow();
                            dr["stringValue"] = item;
                            IdDt.Rows.Add(dr);
                        }

                        var strParam = new SqlParameter("itemnumbers", IdDt);
                        strParam.SqlDbType = System.Data.SqlDbType.Structured;
                        strParam.TypeName = "dbo.stringValues";

                        var customerId = new SqlParameter()
                        {
                            ParameterName = "@CustomerId",
                            Value = sc.CustomerId
                        };
                        var storeId = new SqlParameter()
                        {
                            ParameterName = "@StoreId",
                            Value = paylaterstoreid
                        };
                        var storePayLaterLimits = Database.SqlQuery<StorePayLaterLimitDc>("exec Sp_GetstorecreditLimit @CustomerId , @StoreId, @itemnumbers", customerId, storeId, strParam).FirstOrDefault();
                        if (storePayLaterLimits != null && storePayLaterLimits.CreditLimit > 0)
                        {
                            paylaterstorelimit = storePayLaterLimits.CreditLimit;
                        }
                        if (paylaterstorelimit < blockpaylaterAmount + Math.Round(sc.PaylaterAmount, 0, MidpointRounding.AwayFromZero))
                        {
                            placeOrderResponse.IsSuccess = false;
                            placeOrderResponse.Message = "Order Amount is Excess then Paylater Limit !! Please try after sometime";
                            placeOrderResponse.cart = null;
                            return placeOrderResponse;
                        }
                    }
                }
                var totalItemcount = customerShoppingCart.ShoppingCartItems.Where(y => y.IsActive && y.qty > 0).Count();
                if (sc.TotalAmount + (sc.BillDiscountAmount ?? 0) + (sc.WalletAmount) < minOrderValue && totalItemcount < NoOfLineItemSales)
                {
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = string.Format("{0}  में हम आज केवल  {1} / - एंड {2} लाइन आइटम से अधिक की राशि के आर्डर को स्वीकार कर रहे हैं। असुविधा के लिए खेद है।", storeName, minOrderValue, NoOfLineItemSales);
                    placeOrderResponse.cart = null;
                    return placeOrderResponse;
                }

            }

            var customerGullak = GullakDB.FirstOrDefault(x => x.CustomerId == cust.CustomerId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));

            if (sc.paymentThrough == "Gullak" && sc.GulkAmount > 0)
            {
                MongoDbHelper<BlockGullakAmount> mongogullakDbHelper = new MongoDbHelper<BlockGullakAmount>();
                var gullkPredicate = PredicateBuilder.New<BlockGullakAmount>(x => x.CustomerId == sc.CustomerId && x.Guid != sc.BlockGullakAmountGuid && x.IsActive);
                var blockGullakAmount = mongogullakDbHelper.Select(gullkPredicate).ToList().Sum(x => x.Amount);

                if (customerGullak == null || Math.Round((customerGullak.TotalAmount - blockGullakAmount), 2) < sc.GulkAmount)
                {
                    //if (retailercustomerIds.Any(x => x == cust.CustomerId))
                    //{
                    //    retailercustomerIds.Remove(cust.CustomerId);
                    //}
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = "Insufficient fund in your gullak please add money to your gullak.";
                    placeOrderResponse.cart = null;
                    return placeOrderResponse;
                }
            }




            var currentappVersion = appVersionDb.FirstOrDefault(x => x.isCompulsory);
            if (sc.SalesPersonId.HasValue && sc.SalesPersonId.Value == 0 && string.IsNullOrEmpty(sc.APPVersion) && currentappVersion != null && currentappVersion.App_version != sc.APPVersion)
            {
                //if (retailercustomerIds.Any(x => x == cust.CustomerId))
                //{
                //    retailercustomerIds.Remove(cust.CustomerId);
                //}
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = "Please update you App. before placing order.";
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }


            var cluster = cust.ClusterId.HasValue ? Clusters.FirstOrDefault(x => x.ClusterId == cust.ClusterId.Value) : null;

            List<int> offerItemId = new List<int>();
            List<int> FlashDealOrderId = new List<int>();


            var warehouse = Warehouses.Where(w => w.WarehouseId == cust.Warehouseid).Select(c => c).SingleOrDefault();

            var isWareHouseLive = GMWarehouseProgressDB.FirstOrDefault(x => x.WarehouseID == warehouse.WarehouseId)?.IsLaunched;

            if (isWareHouseLive.HasValue && !isWareHouseLive.Value)
            {
                //if (retailercustomerIds.Any(x => x == cust.CustomerId))
                //{
                //    retailercustomerIds.Remove(cust.CustomerId);
                //}
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = "We are coming soon to your location.";
                placeOrderResponse.cart = null;
                return placeOrderResponse;
            }

            //var appHome = AppHomeDynamicDb.Where(x => x.Wid == warehouse.WarehouseId && x.delete == false && x.active == true && x.detail.Any(y => y.IsFlashDeal == true && y.active == true && y.StartOfferDate <= indianTime
            //                              && y.EndOfferDate >= indianTime)).Include("detail").ToList();
            //List<AppHomeItem> appHomeItems = appHome.SelectMany(x => x.detail).ToList();
            var primeCustomer = PrimeCustomers.FirstOrDefault(x => x.CustomerId == cust.CustomerId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));

            cust.IsPrimeCustomer = primeCustomer != null && primeCustomer.StartDate <= indianTime && primeCustomer.EndDate >= indianTime;

            DateTime CurrentDate = cust.IsPrimeCustomer ? indianTime.AddHours(MemberShipHours) : indianTime;

            var appHome = AppHomeSectionsDB.Where(x => x.WarehouseID == warehouse.WarehouseId && x.Deleted == false && x.Active == true && x.AppItemsList.Any(y => y.IsFlashDeal == true && y.Active == true && y.OfferStartTime <= CurrentDate
                                          && y.OfferEndTime >= indianTime)).Include(x => x.AppItemsList).ToList();
            List<AppHomeItem> appHomeItems = appHome.SelectMany(x => x.AppItemsList.Select(y => new AppHomeItem
            {
                active = y.Active,
                ItemId = y.ItemId,
                id = y.SectionItemID,
                IsFlashDeal = y.IsFlashDeal
            })).ToList();

            List<int> appHomeItemids = appHomeItems.Where(x => x.active == true).Select(y => y.ItemId).ToList(); //appHome.SelectMany(x => x.detail.Select(y => y.ItemId)).ToList();
            var cartItemIds = sc.itemDetails.Where(x => x.OfferCategory == 2 && appHomeItemids.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
            var dealItemIds = sc.itemDetails.Where(x => x.OfferCategory == 3).Select(x => x.ItemId).ToList();
            if (itemMastersList == null)
                itemMastersList = itemMasters.Where(x => itemIds.Contains(x.ItemId)).ToList();

            #region IncentiveClassification by Sudhir 29-06-2023
            var itemId = new DataTable();
            itemId.Columns.Add("IntValue");
            foreach (var item in itemIds)
            {
                var dr = itemId.NewRow();
                dr["IntValue"] = item;
                itemId.Rows.Add(dr);
            }
            var allitemIds = new SqlParameter
            {
                ParameterName = "ItemIds",
                SqlDbType = SqlDbType.Structured,
                TypeName = "dbo.IntValues",
                Value = itemId
            };
            var incentiveClassificationList = Database.SqlQuery<IncentiveClassificationDc>("exec GetItemWiseIncentiveClassification @ItemIds", allitemIds).ToList();
            itemMastersList.ForEach(x =>
            {
                x.IncentiveClassification = incentiveClassificationList.Any() && incentiveClassificationList.Any(y => y.ItemId == x.ItemId) ? incentiveClassificationList.FirstOrDefault(y => y.ItemId == x.ItemId).IncentiveClassification : "General";
            });
            #endregion
            var freeItemIds = sc.itemDetails.Where(x => x.FreeItemId > 0 && x.FreeItemqty > 0).Select(x => x.FreeItemId).ToList();
            var FreeitemsList = itemMasters.Where(x => freeItemIds.Contains(x.ItemId)).Select(x => x).ToList();
            var FreeItemMultiMRPIds = FreeitemsList.Select(x => x.ItemMultiMRPId).Distinct().ToList();

            //Prime code
            var primeItemIds = sc.itemDetails.Where(x => x.IsPrimeItem).Select(x => x.ItemId);
            var itemMultiMRPIds = itemMastersList.Where(x => primeItemIds.Contains(x.ItemId)).Select(x => x.ItemMultiMRPId).Distinct().ToList();
            var PrimeItems = itemMultiMRPIds.Any() && cust.Active ? PrimeItemDetails.Where(x => itemMultiMRPIds.Contains(x.ItemMultiMRPId) && x.CityId == cust.Cityid && (x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value))).ToList() : null;
            var dealItemMultiMRPIds = itemMastersList.Where(x => dealItemIds.Contains(x.ItemId)).Select(x => x.ItemMultiMRPId).Distinct().ToList();
            var dbdealItems = dealItemMultiMRPIds.Any() ? DealItems.Where(x => dealItemMultiMRPIds.Contains(x.ItemMultiMRPId) && x.WarehouseId == cust.Warehouseid && (x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value))).ToList() : null;
            List<ItemLimitMaster> itemLimits = new List<ItemLimitMaster>();
            List<int> Deactiavteofferids = new List<int>();
            var OrderItemMultiMRPIds = itemMastersList.Select(x => x.ItemMultiMRPId).Distinct().ToList();
            itemLimits.AddRange(ItemLimitMasterDB.Where(z => OrderItemMultiMRPIds.Contains(z.ItemMultiMRPId) && z.WarehouseId == cust.Warehouseid && z.IsItemLimit).ToList());
            //#region For Item Limit Check
            //if (itemLimits.Any() && itemLimits != null && (freeItemIds == null || freeItemIds.Count() == 0))
            //{
            //    foreach (var item in sc.itemDetails)
            //    {
            //        var itemMasterlimitcheck = itemMastersList.Where(x => x.ItemId == item.ItemId).FirstOrDefault();
            //        var limit = itemLimits.Where(x => x.ItemMultiMRPId == itemMasterlimitcheck.ItemMultiMRPId && x.WarehouseId == itemMasterlimitcheck.WarehouseId).FirstOrDefault();
            //        MongoInsertItemLimitcheck(itemMasterlimitcheck.ItemMultiMRPId, item.qty, LimitCheck_GUID, item.ItemId, item.WarehouseId);
            //    }
            //}
            //#endregion            

            bool IsStopActive = true;
            if (FreeItemMultiMRPIds != null)
            {
                OrderItemMultiMRPIds.AddRange(FreeItemMultiMRPIds);
            }
            RetailerAppManager retailerAppManagers = new RetailerAppManager();
            List<ItemScheme> itemPTR = retailerAppManagers.GetItemScheme(OrderItemMultiMRPIds, warehouse.WarehouseId);
            List<BillDiscountFreebiesItemQtyDC> FreeQtyList = new List<BillDiscountFreebiesItemQtyDC>();
            placeOrderResponse = ValidateShoppingCartHDFC(sc, warehouse, cust, appHomeItems, cartItemIds, itemMastersList, FreeitemsList, itemLimits, PrimeItems, dbdealItems, itemPTR, LimitCheck_GUID, out objOrderMaster, out BillDiscounts, out Deactiavteofferids, out IsStopActive, out FreeQtyList);
            List<NextETADate> NextETADate = null;
            if (placeOrderResponse.IsSuccess)
            {


                var billOffers = new List<Offer>();
                List<FlashDealItemConsumed> flashDealItemConsumedList = new List<FlashDealItemConsumed>();
                List<OfferItem> offerItemsList = new List<OfferItem>();
                var OfferUpdate = new List<Offer>();
                double offerWalletPoint = 0;
                if (cust.Active)
                {
                    foreach (var i in placeOrderResponse.cart.itemDetails)
                    {
                        #region flashdeal
                        ItemLimitFreebiesDc ItemLimitFreebiesconsume = new ItemLimitFreebiesDc();

                        var items = itemMastersList.Where(x => x.ItemId == i.ItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();
                        if (i.OfferCategory == 2 && i.IsOffer)
                        {
                            AppHomeSectionItems appHomeItem = AppHomeSectionItemsDB.Where(x => x.ItemId == i.ItemId && !x.Deleted && x.Active && x.IsFlashDeal == true && x.IsFlashDeal == true && x.OfferStartTime <= CurrentDate
                                    && x.OfferEndTime >= indianTime).FirstOrDefault();


                            //AppHomeItem appHomeItem = appHomeItems.Where(x => x.ItemId == i.ItemId && x.IsFlashDeal == true && x.active == true && x.StartOfferDate <= indianTime
                            //        && x.EndOfferDate >= indianTime).FirstOrDefault();
                            //AppHomeItem appHomeItem = AppHomeItemDb.Where(x => x.ItemId == i.ItemId && x.IsFlashDeal == true && x.active == true && x.StartOfferDate <= indianTime
                            //           && x.EndOfferDate >= indianTime).FirstOrDefault();
                            if (appHomeItem != null)
                            {

                                items.OfferQtyAvaiable = items.OfferQtyAvaiable - i.qty;
                                items.OfferQtyConsumed = items.OfferQtyConsumed + i.qty;
                                if (items.OfferQtyAvaiable.Value <= 0)
                                {
                                    items.IsOffer = false;
                                }
                                this.Entry(items).State = EntityState.Modified;

                                appHomeItem.FlashDealQtyAvaiable = appHomeItem.FlashDealQtyAvaiable - i.qty;
                                this.Entry(appHomeItem).State = EntityState.Modified;
                            }
                            //Insert in flashdealitemconsumed for functionilty that an customer take only one time flash deal.
                            FlashDealItemConsumed flashDealItemConsumed = new FlashDealItemConsumed();
                            flashDealItemConsumed.FlashDealId = appHomeItem != null ? Convert.ToInt32(appHomeItem.SectionItemID) : 0;
                            flashDealItemConsumed.ItemId = i.ItemId;
                            flashDealItemConsumed.WarehouseId = i.WarehouseId;
                            flashDealItemConsumed.CompanyId = i.CompanyId;
                            flashDealItemConsumed.CustomerId = cust.CustomerId;
                            flashDealItemConsumed.CreatedDate = indianTime;
                            flashDealItemConsumed.UpdatedDate = indianTime;
                            flashDealItemConsumedList.Add(flashDealItemConsumed);
                            //this.SaveChanges();
                            FlashDealOrderId.Add(flashDealItemConsumed.FlashDealItemConsumedId);

                        }

                        #endregion

                        #region Free Item and offer Walletpoint

                        if (i.IsOffer == true && i.FreeItemId > 0 && i.FreeItemqty > 0)
                        {
                            #region Add if validated
                            var offer = OfferDb.Where(x => x.OfferId == items.OfferId).SingleOrDefault();

                            //to consume qty of freebiese if stock hit from currentstock in offer
                            if (offer != null && !offer.IsDispatchedFreeStock)
                            {
                                ItemLimitFreebiesconsume.ItemMultiMrpId = FreeitemsList.FirstOrDefault(f => f.ItemId == i.FreeItemId).ItemMultiMRPId;
                                ItemLimitFreebiesconsume.Qty = i.FreeItemqty;
                            }


                            //freesqtylimit
                            if (offer != null && i.FreeItemqty <= offer.FreeItemLimit)
                            {
                                offer.QtyAvaiable = offer.QtyAvaiable - i.FreeItemqty;
                                offer.QtyConsumed = offer.QtyConsumed + i.FreeItemqty;
                                if (offer.QtyAvaiable <= 0)
                                {
                                    offer.IsActive = false;
                                }
                                OfferUpdate.Add(offer);
                            }

                            OfferItem ff = new OfferItem();
                            ff.CompanyId = i.CompanyId;
                            ff.WarehouseId = i.WarehouseId;
                            ff.itemId = items.ItemId;
                            ff.itemname = items.itemname;
                            ff.MinOrderQuantity = offer.MinOrderQuantity;
                            ff.NoOffreeQuantity = i.FreeItemqty;
                            ff.FreeItemId = offer.FreeItemId;
                            ff.FreeItemName = offer.FreeItemName;
                            ff.FreeItemMRP = offer.FreeItemMRP;
                            ff.IsDeleted = false;
                            ff.CreatedDate = indianTime;
                            ff.UpdateDate = indianTime;
                            ff.CustomerId = cust.CustomerId;
                            //ff.OrderId = placeOrderResponse.OrderMaster.OrderId;
                            ff.OfferType = "ItemMaster";
                            ff.ReferOfferId = offer.OfferId;
                            //offerItemId.Add(ff.OfferId);
                            offerItemsList.Add(ff);

                            #endregion
                        }


                        if (i.IsOffer == true && i.OfferWalletPoint > 0)
                        {
                            //If offer is on wallet point then update is wallet point.
                            offerWalletPoint = offerWalletPoint + i.OfferWalletPoint;
                            var offerdata = OfferDb.Where(x => x.OfferId == items.OfferId).SingleOrDefault();
                            OfferItem offerItem = new OfferItem();

                            offerItem.CompanyId = i.CompanyId;
                            offerItem.WarehouseId = i.WarehouseId;
                            offerItem.itemId = items.ItemId;
                            offerItem.itemname = items.itemname;
                            offerItem.MinOrderQuantity = offerdata.MinOrderQuantity;
                            offerItem.NoOffreeQuantity = i.FreeItemqty;
                            offerItem.FreeItemId = offerdata.FreeItemId;
                            offerItem.FreeItemName = offerdata.FreeItemName;
                            offerItem.FreeItemMRP = offerdata.FreeItemMRP;
                            offerItem.IsDeleted = false;
                            offerItem.CreatedDate = indianTime;
                            offerItem.UpdateDate = indianTime;
                            offerItem.CustomerId = cust.CustomerId;
                            //offerItem.OrderId = objOrderMaster.OrderId;
                            offerItem.WallentPoint = Convert.ToInt32(i.OfferWalletPoint);
                            offerItem.ReferOfferId = offerdata.OfferId;
                            offerItem.OfferType = "WalletPoint";
                            offerItemsList.Add(offerItem);
                            //offerItemId.Add(offerItem.OfferId);

                        }


                        #endregion
                        //For Item Deactive
                        #region Add if Validated
                        ItemLimitMaster ItemLimitMaster = ItemLimitMasterDB.Where(x => x.ItemNumber == items.Number && x.WarehouseId == items.WarehouseId && x.ItemMultiMRPId == items.ItemMultiMRPId).FirstOrDefault();
                        if (ItemLimitMaster != null && ItemLimitMaster.IsItemLimit == true)
                        {
                            #region to consume qty of freebiese if stock hit from currentstock in offer

                            if (ItemLimitFreebiesconsume != null)
                            {
                                if (ItemLimitFreebiesconsume.ItemMultiMrpId == ItemLimitMaster.ItemMultiMRPId)
                                {
                                    i.qty += ItemLimitFreebiesconsume.Qty;
                                }
                            }
                            #endregion

                            //logger.Error("OrderQtyLimitcheck  " + i.qty + " ItemlimitQty" + ItemLimitMaster.ItemlimitQty);
                            if (i.qty < ItemLimitMaster.ItemlimitQty || i.qty == 0)
                            {
                                //logger.Error("OrderQtyLimitcheck1");
                                ItemLimitMaster.ItemlimitQty = ItemLimitMaster.ItemlimitQty - i.qty;     // by kapil
                                ItemLimitMaster.ItemLimitSaleQty = ItemLimitMaster.ItemLimitSaleQty + i.qty;
                                #region//14Dec2021 Changes
                                //if (ItemLimitMaster.ItemlimitQty > 0 && ItemLimitMaster.IsItemLimit == true)
                                //{
                                //    var dodeactiveitem = itemMasters.Where(x => x.MinOrderQty > ItemLimitMaster.ItemlimitQty && x.active == true && x.Deleted == false && x.WarehouseId == items.WarehouseId && x.ItemMultiMRPId == items.ItemMultiMRPId).ToList();
                                //    if (dodeactiveitem != null && dodeactiveitem.Any())
                                //    {
                                //        foreach (var Ditem in dodeactiveitem)
                                //        {
                                //            Ditem.active = false;
                                //            Ditem.UpdatedDate = indianTime;
                                //            Ditem.UpdateBy = "Auto Dective";
                                //            this.Entry(Ditem).State = EntityState.Modified;
                                //        }
                                //        ItemLimitMaster.IsItemLimit = false;
                                //    }
                                //}
                                #endregion
                                //if (ItemLimitMaster.ItemlimitQty <= 0 && ItemLimitMaster.IsItemLimit == true)
                                //{ ItemLimitMaster.IsItemLimit = false; }

                                this.Entry(ItemLimitMaster).State = EntityState.Modified;
                            }
                            else
                            {
                                //logger.Error("OrderQtyLimitcheck2222222222222222222esle  " + ItemLimitMaster.IsItemLimit);
                                ItemLimitMaster.ItemlimitQty = ItemLimitMaster.ItemlimitQty - i.qty;
                                ItemLimitMaster.ItemLimitSaleQty = ItemLimitMaster.ItemLimitSaleQty + i.qty;
                                ItemLimitMaster.IsItemLimit = false;//08/07/2019
                                this.Entry(ItemLimitMaster).State = EntityState.Modified;

                                if (ItemLimitMaster.ItemlimitQty <= 0 || items.MinOrderQty > ItemLimitMaster.ItemlimitQty)
                                {
                                    //deactive
                                    List<ItemMaster> itemsDeactive = itemMasters.Where(x => x.Number == ItemLimitMaster.ItemNumber && x.active == true && x.WarehouseId == ItemLimitMaster.WarehouseId && x.ItemMultiMRPId == ItemLimitMaster.ItemMultiMRPId).ToList();
                                    foreach (var Ditem in itemsDeactive)
                                    {
                                        //if (ItemLimitMaster.ItemlimitQty <= 0 || Ditem.MinOrderQty > ItemLimitMaster.ItemlimitQty)
                                        //{
                                        // Ditem.IsOffer = false; 
                                        Ditem.active = false;
                                        Ditem.UpdatedDate = indianTime;
                                        Ditem.UpdateBy = "Auto Dective";
                                        Ditem.Reason = "Auto Dective due remaining limit is less than MOQ  or zero:" + ItemLimitMaster.ItemlimitQty;
                                        this.Entry(Ditem).State = EntityState.Modified;
                                        //}
                                    }
                                    //if (i.OfferId > 0)
                                    //{ Deactiavteofferids.Add(i.OfferId); }
                                }
                            }
                        }

                        ItemLimitMaster freeItemLimitMaster = ItemLimitMasterDB.Where(x => x.WarehouseId == items.WarehouseId && x.ItemMultiMRPId == ItemLimitFreebiesconsume.ItemMultiMrpId && x.ItemMultiMRPId != items.ItemMultiMRPId).FirstOrDefault();
                        if (freeItemLimitMaster != null && freeItemLimitMaster.IsItemLimit == true && ItemLimitFreebiesconsume != null)
                        {
                            freeItemLimitMaster.ItemlimitQty = freeItemLimitMaster.ItemlimitQty - ItemLimitFreebiesconsume.Qty;
                            freeItemLimitMaster.ItemLimitSaleQty = freeItemLimitMaster.ItemLimitSaleQty + ItemLimitFreebiesconsume.Qty;
                            this.Entry(freeItemLimitMaster).State = EntityState.Modified;
                        }

                        #region//14Dec2021 Changes
                        //ItemLimitMaster freeItemLimitMaster = ItemLimitMasterDB.Where(x => x.WarehouseId == items.WarehouseId && x.ItemMultiMRPId == ItemLimitFreebiesconsume.ItemMultiMrpId && x.ItemMultiMRPId != items.ItemMultiMRPId).FirstOrDefault();
                        //if (freeItemLimitMaster != null && freeItemLimitMaster.IsItemLimit == true && ItemLimitFreebiesconsume != null)
                        //{
                        //    freeItemLimitMaster.ItemlimitQty = freeItemLimitMaster.ItemlimitQty - ItemLimitFreebiesconsume.Qty;
                        //    freeItemLimitMaster.ItemLimitSaleQty = freeItemLimitMaster.ItemLimitSaleQty + ItemLimitFreebiesconsume.Qty;
                        //    if (freeItemLimitMaster.ItemlimitQty <= 0 && freeItemLimitMaster.IsItemLimit == true)
                        //    {
                        //        freeItemLimitMaster.IsItemLimit = false;
                        //        if (i.OfferId > 0)
                        //        { Deactiavteofferids.Add(i.OfferId); }

                        //    }
                        //    if (freeItemLimitMaster != null && freeItemLimitMaster.ItemlimitQty <= 0)
                        //    {
                        //        List<ItemMaster> itemsDeactive = itemMasters.Where(x => x.Number == freeItemLimitMaster.ItemNumber && x.active == true && x.WarehouseId == freeItemLimitMaster.WarehouseId && x.ItemMultiMRPId == freeItemLimitMaster.ItemMultiMRPId).ToList();
                        //        foreach (var Ditem in itemsDeactive)
                        //        {
                        //            Ditem.active = false;
                        //            Ditem.UpdatedDate = indianTime;
                        //            Ditem.UpdateBy = "Auto Dective";
                        //            this.Entry(Ditem).State = EntityState.Modified;
                        //        }
                        //    }

                        //    //else if (freeItemLimitMaster.ItemlimitQty > 0 && freeItemLimitMaster.IsItemLimit == true)
                        //    //{
                        //    //    var dodeactiveitem = itemMasters.Where(x => x.MinOrderQty > freeItemLimitMaster.ItemlimitQty && x.active == true && x.Deleted == false && x.WarehouseId == freeItemLimitMaster.WarehouseId && x.ItemMultiMRPId == freeItemLimitMaster.ItemMultiMRPId).ToList();
                        //    //    if (dodeactiveitem != null && dodeactiveitem.Any())
                        //    //    {
                        //    //        foreach (var Ditem in dodeactiveitem)
                        //    //        {
                        //    //            Ditem.active = false;
                        //    //            Ditem.UpdatedDate = indianTime;
                        //    //            Ditem.UpdateBy = "Auto Dective";
                        //    //            this.Entry(Ditem).State = EntityState.Modified;
                        //    //        }
                        //    //        freeItemLimitMaster.IsItemLimit = false;
                        //    //    }
                        //    //}

                        //    this.Entry(freeItemLimitMaster).State = EntityState.Modified;
                        //}
                        #endregion
                        #endregion
                        //#region 8dec2021 Freebies Changes deactive Freeitems limit
                        //var Freesitems = itemMastersList.Where(x => x.ItemId == i.FreeItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();
                        //if (Freesitems != null)
                        //{
                        //    ItemLimitMaster ItemLimitMasterfree = ItemLimitMasterDB.Where(x => x.WarehouseId == items.WarehouseId && x.ItemMultiMRPId == Freesitems.ItemMultiMRPId && x.ItemMultiMRPId != items.ItemMultiMRPId).FirstOrDefault();
                        //    if (ItemLimitMasterfree != null && ItemLimitMasterfree.IsItemLimit == true)
                        //    {
                        //        ItemLimitMasterfree.ItemlimitQty = ItemLimitMasterfree.ItemlimitQty - i.FreeItemqty;
                        //        ItemLimitMasterfree.ItemLimitSaleQty = ItemLimitMasterfree.ItemLimitSaleQty + i.FreeItemqty;
                        //        this.Entry(ItemLimitMasterfree).State = EntityState.Modified;
                        //        if (ItemLimitMasterfree.ItemlimitQty <= 0 || Freesitems.MinOrderQty > ItemLimitMasterfree.ItemlimitQty)
                        //        {
                        //            ItemMaster FreeitemsDeactive = itemMasters.Where(x => x.ItemId == Freesitems.ItemId).FirstOrDefault();
                        //            if (FreeitemsDeactive != null)
                        //            {
                        //                FreeitemsDeactive.active = false;
                        //                FreeitemsDeactive.UpdatedDate = indianTime;
                        //                FreeitemsDeactive.UpdateBy = "Auto Dective";
                        //                this.Entry(FreeitemsDeactive).State = EntityState.Modified;
                        //            }
                        //            //Deactivate Offers
                        //            Deactiavteofferids.Add(i.OfferId);
                        //        }
                        //    }
                        //}
                        //#endregion
                    }
                    #region BillDiscount Free Item Update Qty
                    if (BillDiscounts.Any())
                    {
                        if (OfferUpdate == null)
                            OfferUpdate = new List<Offer>();
                        var offerids = BillDiscounts.Select(y => y.OfferId).ToList();
                        billOffers = OfferDb.Where(x => offerids.Contains(x.OfferId) && x.BillDiscountOfferOn == "FreeItem").Include(x => x.BillDiscountFreeItems).ToList();
                        var BillDiscountFreeItemlst = billOffers.SelectMany(x => x.BillDiscountFreeItems).ToList();
                        foreach (var billOffer in billOffers)
                        {
                            var BillDiscountFreeItems = BillDiscountFreeItemlst.Where(x => offerids.Contains(x.offerId)).ToList();
                            bool inactiveoffer = false;
                            int offerqty = 0;
                            foreach (var item in BillDiscountFreeItems.Where(x => x.offerId == billOffer.OfferId).ToList())
                            {
                                var freeQty = item.Qty;
                                if (billOffer.IsBillDiscountFreebiesItem)
                                {
                                    var itemdata = FreeQtyList.FirstOrDefault(x => x.Offerid == billOffer.OfferId);
                                    if (itemdata != null && itemdata.BillDiscountItemQty > 0)
                                    {
                                        freeQty = itemdata.BillDiscountItemQty * item.Qty;
                                    }
                                }
                                else if (billOffer.IsBillDiscountFreebiesValue)
                                {
                                    var itemdata = FreeQtyList.FirstOrDefault(x => x.Offerid == billOffer.OfferId);
                                    if (itemdata != null && itemdata.BillDiscountValueQty > 0)
                                    {
                                        freeQty = itemdata.BillDiscountValueQty * item.Qty;
                                    }
                                }

                                if (freeQty > 0)
                                {
                                    item.RemainingOfferStockQty += freeQty;
                                    this.Entry(item).State = EntityState.Modified;
                                    if (item.RemainingOfferStockQty >= item.OfferStockQty)
                                        inactiveoffer = true;

                                    //if(!billOffer.IsDispatchedFreeStock) 
                                    //Itemid, itemmrpid,qty 

                                    offerqty += freeQty;
                                    OfferItem ff = new OfferItem();
                                    ff.CompanyId = billOffer.CompanyId;
                                    ff.WarehouseId = billOffer.WarehouseId;
                                    ff.itemId = item.ItemId;///we are using free item id 
                                    ff.itemname = item.ItemName;
                                    ff.MinOrderQuantity = item.Qty;
                                    ff.NoOffreeQuantity = freeQty;
                                    ff.FreeItemId = item.ItemId;
                                    ff.FreeItemName = item.ItemName;
                                    ff.FreeItemMRP = item.MRP;
                                    ff.IsDeleted = false;
                                    ff.CreatedDate = indianTime;
                                    ff.UpdateDate = indianTime;
                                    ff.CustomerId = cust.CustomerId;
                                    ff.OfferType = "BillDiscount_FreeItem";
                                    ff.ReferOfferId = billOffer.OfferId;
                                    offerItemsList.Add(ff);
                                }

                            }

                            billOffer.QtyAvaiable = billOffer.QtyAvaiable - offerqty;
                            billOffer.QtyConsumed = billOffer.QtyConsumed + offerqty;


                            if (inactiveoffer)
                            {
                                billOffer.IsActive = false;
                            }
                            OfferUpdate.Add(billOffer);
                        }

                        //List<int> billdiscountofferids = BillDiscounts.Select(x => x.OfferId).ToList();
                        //var LimitOffers = OfferDb.Where(x => billdiscountofferids.Contains(x.OfferId) && x.QtyAvaiable > 0 && (x.OfferOn == "BillDiscount" || x.OfferOn == "ScratchBillDiscount")).ToList();
                        //foreach (var offer in LimitOffers)
                        //{
                        //    offer.QtyAvaiable = offer.QtyAvaiable - 1;
                        //    offer.QtyConsumed = offer.QtyConsumed + 1;
                        //    if (offer.QtyAvaiable <= 0)
                        //    {
                        //        offer.IsActive = false;
                        //    }
                        //    OfferUpdate.Add(offer);
                        //}
                    }
                    #endregion



                }
                else
                {
                    foreach (var i in placeOrderResponse.cart.itemDetails)
                    {
                        var items = itemMastersList.Where(x => x.ItemId == i.ItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();
                        if (i.IsOffer == true && i.FreeItemId > 0 && i.FreeItemqty > 0)
                        {
                            #region Add if validated
                            var offer = OfferDb.Where(x => x.OfferId == items.OfferId).SingleOrDefault();
                            //freesqtylimit not 
                            //if (offer != null && i.FreeItemqty <= offer.FreeItemLimit)
                            //{
                            //    offer.QtyAvaiable = offer.QtyAvaiable - i.FreeItemqty;
                            //    offer.QtyConsumed = offer.QtyConsumed + i.FreeItemqty;
                            //    if (offer.QtyAvaiable <= 0)
                            //    {
                            //        offer.IsActive = false;
                            //    }
                            //    OfferUpdate.Add(offer);
                            //}

                            OfferItem ff = new OfferItem();
                            ff.CompanyId = i.CompanyId;
                            ff.WarehouseId = i.WarehouseId;
                            ff.itemId = items.ItemId;
                            ff.itemname = items.itemname;
                            ff.MinOrderQuantity = offer.MinOrderQuantity;
                            ff.NoOffreeQuantity = i.FreeItemqty;
                            ff.FreeItemId = offer.FreeItemId;
                            ff.FreeItemName = offer.FreeItemName;
                            ff.FreeItemMRP = offer.FreeItemMRP;
                            ff.IsDeleted = false;
                            ff.CreatedDate = indianTime;
                            ff.UpdateDate = indianTime;
                            ff.CustomerId = cust.CustomerId;
                            //ff.OrderId = placeOrderResponse.OrderMaster.OrderId;
                            ff.OfferType = "ItemMaster";
                            ff.ReferOfferId = offer.OfferId;
                            //offerItemId.Add(ff.OfferId);
                            offerItemsList.Add(ff);

                            #endregion
                        }
                    }
                }

                #region Rewards, Offers, FlashDeals, Wallet etc....

                double rewardpoint = (double)objOrderMaster.orderDetails.Sum(x => x.marginPoint);

                objOrderMaster.deliveryCharge = sc.deliveryCharge;

                objOrderMaster.TotalAmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.TotalAmt) + objOrderMaster.deliveryCharge.Value, 2);
                objOrderMaster.TaxAmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.TaxAmmount + x.CessTaxAmount), 2);
                objOrderMaster.SGSTTaxAmmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.SGSTTaxAmmount), 2);
                objOrderMaster.CGSTTaxAmmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.CGSTTaxAmmount), 2);
                objOrderMaster.GrossAmount = System.Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero);
                objOrderMaster.DiscountAmount = 0;//System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.TotalAmountAfterTaxDisc), 2);
                objOrderMaster.OrderType = sc.status == "Replace" ? 3 : (cust.IsFranchise ? 7 : 1);
                //add cluster to ordermaster
                objOrderMaster.ClusterId = cust.ClusterId ?? 0;
                objOrderMaster.ClusterName = cust.ClusterName;
                objOrderMaster.IsPrimeCustomer = cust.IsPrimeCustomer;
                var walletUsedPoint1 = sc.walletPointUsed;
                var walletAmount1 = sc.WalletAmount;
                CashConversion cash = CashConversionDb.FirstOrDefault(x => x.IsConsumer == false);

                double rewPoint = 0;
                double rewAmount = 0;

                var customerSegment = CustomerSegmentDb.OrderByDescending(x => x.CreatedDate).FirstOrDefault(x => x.CustomerId == sc.CustomerId && x.IsActive && x.IsDeleted == false);

                if (customerSegment != null)
                {
                    switch (customerSegment.Segment)
                    {
                        case 1:
                            objOrderMaster.CustomerClass = "Platinum";
                            break;
                        case 2:
                            objOrderMaster.CustomerClass = "Gold";
                            break;
                        case 3:
                            objOrderMaster.CustomerClass = "Silver";
                            break;
                        case 4:
                            objOrderMaster.CustomerClass = "GT";
                            break;
                        case 5:
                            switch (customerSegment.PotentialSegment)
                            {
                                case 1:
                                    objOrderMaster.CustomerClass = "Potential Platinum";
                                    break;
                                case 2:
                                    objOrderMaster.CustomerClass = "Potential Gold";
                                    break;
                                case 3:
                                    objOrderMaster.CustomerClass = "Potential Silver";
                                    break;
                                case 4:
                                    objOrderMaster.CustomerClass = "Potential GT";
                                    break;
                                case 5:
                                    objOrderMaster.CustomerClass = "Digital";
                                    break;
                            }
                            break;
                    }
                }



                // call function

                //removerd by Harry ( on 21)
                //objOrderMaster = RewardAndWalletPointForPlacedOrder(placeOrderResponse.cart, offerWalletPoint, objOrderMaster, rewardpoint, cust, walletUsedPoint1, rewPoint, rewAmount, cash);

                DbOrderMaster.Add(objOrderMaster);
                this.Commit();

                objOrderMaster = RewardAndWalletPointForPlacedOrder(placeOrderResponse.cart, offerWalletPoint, objOrderMaster, rewardpoint, cust, walletUsedPoint1, rewPoint, rewAmount, cash);


                if (OfferUpdate != null && OfferUpdate.Any())
                {
                    foreach (var Offers in OfferUpdate)
                    {
                        this.Entry(Offers).State = EntityState.Modified;
                    }
                }

                if (cust != null)
                {
                    // cust.ShippingAddress = sc.ShippingAddress;
                    cust.ordercount = cust.ordercount + 1;
                    cust.MonthlyTurnOver = cust.MonthlyTurnOver + objOrderMaster.GrossAmount;
                    this.Entry(cust).State = EntityState.Modified;
                }


                //for first order

                #endregion

                if (!string.IsNullOrEmpty(sc.paymentThrough) && (sc.paymentThrough.ToLower().Contains("hdfc") || sc.paymentThrough.ToLower().Contains("truepay") || sc.paymentThrough.ToLower().Contains("epaylater") || sc.paymentThrough.ToLower().Contains("chqbook") || sc.paymentThrough.ToLower().Contains("directudhar") || sc.paymentThrough.ToLower().Contains("scaleup") || sc.paymentThrough.ToLower().Contains("razorpay") || sc.paymentThrough.ToLower().Contains("icici")))//by Ashwin
                {
                    objOrderMaster.Status = "Payment Pending";
                    objOrderMaster.paymentThrough = sc.paymentThrough;
                    objOrderMaster.paymentMode = "Online";
                }
                else if (sc.paymentThrough.ToLower().Contains("gullak") || sc.paymentThrough.ToLower().Contains("paylater"))
                {
                    objOrderMaster.Status = "Pending";
                    objOrderMaster.paymentThrough = sc.paymentThrough;
                    objOrderMaster.paymentMode = "Online";
                }
                else
                {
                    objOrderMaster.paymentMode = "COD";
                    objOrderMaster.paymentThrough = sc.paymentThrough;
                    objOrderMaster.Status = "Pending";
                }

                objOrderMaster.Status = (cust.Active && cluster != null && cluster.Active) ? objOrderMaster.Status : (!cust.Active && IsStopActive) ? objOrderMaster.Status : "Inactive";
                //objOrderMaster.Status = cust.Active && cluster != null && cluster.Active ? objOrderMaster.Status : (IsStopActive ? objOrderMaster.Status : "Inactive");

                #region Bill Discount
                if (!string.IsNullOrEmpty(sc.BillDiscountOfferId))
                {
                    List<int> billdiscountofferids = BillDiscounts.Select(x => x.OfferId).ToList();
                    List<Offer> Offers = OfferDb.Where(x => billdiscountofferids.Contains(x.OfferId)).Include(x => x.BillDiscountFreeItems).ToList();
                    List<BillDiscount> dbBillDiscounts = BillDiscountDb.Where(x => billdiscountofferids.Contains(x.OfferId) && x.CustomerId == cust.CustomerId && x.OrderId == 0 && x.IsActive).ToList();



                    #region BillDiscount Free Item

                    if (Offers != null)
                    {
                        //List<int> offerids = new List<int>();
                        //if (Offers.Any(x => x.BillDiscountOfferOn == "FreeItem"))
                        //{
                        //    foreach (var item in Offers.Where(x => x.BillDiscountOfferOn == "FreeItem").SelectMany(x => x.BillDiscountFreeItems).ToList())
                        //    {
                        //        item.RemainingOfferStockQty += item.Qty;
                        //        this.Entry(item).State = EntityState.Modified;
                        //        if (item.RemainingOfferStockQty >= item.OfferStockQty)
                        //        {
                        //            Deactiavteofferids.Add(item.offerId);
                        //        }
                        //    }
                        //}

                        if (Offers.Any(x => x.FreeItemLimit.HasValue && x.FreeItemLimit.Value > 0 && (x.OfferOn == "ScratchBillDiscount" || x.OfferOn == "BillDiscount")))
                        {
                            var limitofferids = Offers.Where(x => x.FreeItemLimit.HasValue && x.FreeItemLimit.Value > 0 && (x.OfferOn == "ScratchBillDiscount" || x.OfferOn == "BillDiscount")).Select(x => x.OfferId);
                            var offerTakingCount = BillDiscountDb.Where(x => limitofferids.Contains(x.OfferId)).GroupBy(x => x.OfferId).Select(x => new { offerid = x.Key, totalCount = x.Count() }).ToList();
                            if (offerTakingCount != null && offerTakingCount.Any())
                            {
                                foreach (var item in Offers.Where(x => limitofferids.Contains(x.OfferId)))
                                {
                                    var offertaking = offerTakingCount.FirstOrDefault(x => x.offerid == item.OfferId);
                                    if (offertaking != null && item.FreeItemLimit <= offertaking.totalCount + 1)
                                    {
                                        Deactiavteofferids.Add(item.OfferId);
                                    }
                                    else if (item.FreeItemLimit == 1)
                                    {
                                        Deactiavteofferids.Add(item.OfferId);
                                    }
                                }
                            }
                        }

                        //if (Deactiavteofferids.Any())
                        //{
                        //    foreach (var item in Offers.Where(x => Deactiavteofferids.Contains(x.OfferId)))
                        //    {
                        //        item.UpdateDate = indianTime;
                        //        item.IsActive = false;
                        //        this.Entry(item).State = EntityState.Modified;
                        //    }
                        //}
                    }
                    #endregion
                    double? RecalculateBillDiscountAmount = 0;
                    foreach (var offer in BillDiscounts)
                    {
                        var scritchcartoffer = !Offers.Any(x => x.OfferId == offer.OfferId && x.BillDiscountOfferOn == "DynamicAmount") ?
                            dbBillDiscounts.FirstOrDefault(x => x.OfferId == offer.OfferId && x.CustomerId == cust.CustomerId && x.OrderId == 0)
                            : dbBillDiscounts.FirstOrDefault(x => x.OfferId == offer.OfferId && x.CustomerId == cust.CustomerId && x.BillDiscountAmount == offer.BillDiscountAmount && x.OrderId == 0);

                        offer.OrderId = objOrderMaster.OrderId;
                        if (scritchcartoffer == null && Offers != null && Offers.Any(x => x.IsCRMOffer == false && x.OfferId == offer.OfferId))
                        {
                            RecalculateBillDiscountAmount += offer.BillDiscountAmount;
                            BillDiscountDb.Add(offer);
                        }
                        else
                        {
                            if (Offers != null && Offers.Any(x => x.IsCRMOffer && x.OfferId == offer.OfferId))
                            {
                                var scritchcartoffercrm = dbBillDiscounts.FirstOrDefault(x => x.OfferId == offer.OfferId && x.CustomerId == cust.CustomerId && x.OrderId == 0 && x.IsDeleted == false && x.IsActive == true);
                                if (scritchcartoffercrm != null)
                                {
                                    scritchcartoffercrm.BillDiscountTypeValue = offer.BillDiscountTypeValue;
                                    scritchcartoffercrm.IsUsedNextOrder = offer.IsUsedNextOrder;
                                    scritchcartoffercrm.OrderId = objOrderMaster.OrderId;
                                    scritchcartoffercrm.BillDiscountAmount = offer.BillDiscountAmount;
                                    scritchcartoffercrm.ModifiedBy = cust.CustomerId;
                                    scritchcartoffercrm.ModifiedDate = indianTime;
                                    this.Entry(scritchcartoffercrm).State = EntityState.Modified;

                                    RecalculateBillDiscountAmount += offer.BillDiscountAmount;
                                }
                            }
                            else
                            {
                                scritchcartoffer.BillDiscountTypeValue = offer.BillDiscountTypeValue;
                                scritchcartoffer.IsUsedNextOrder = offer.IsUsedNextOrder;
                                scritchcartoffer.OrderId = objOrderMaster.OrderId;
                                scritchcartoffer.BillDiscountAmount = offer.BillDiscountAmount;
                                scritchcartoffer.ModifiedBy = cust.CustomerId;
                                scritchcartoffer.ModifiedDate = indianTime;
                                this.Entry(scritchcartoffer).State = EntityState.Modified;

                                RecalculateBillDiscountAmount += offer.BillDiscountAmount;
                            }
                        }
                    }
                    //sc.BillDiscountAmount = BillDiscounts.Sum(x => x.BillDiscountAmount);
                    sc.BillDiscountAmount = RecalculateBillDiscountAmount;
                }


                // 08Dec2021 Offer bies changes
                if (Deactiavteofferids.Any())
                {
                    foreach (var offerid in Deactiavteofferids)
                    {
                        var item = OfferDb.FirstOrDefault(x => x.OfferId == offerid);
                        if (item != null)
                        {
                            item.UpdateDate = indianTime;
                            item.IsActive = false;
                            this.Entry(item).State = EntityState.Modified;
                        }
                    }
                }


                #endregion

                #region TCS Calculate
                GetCustomersTotalPurchaseInMongo helper = new GetCustomersTotalPurchaseInMongo();

                var tcsConfig = helper.GetCustomersTotalPurchaseForTCS(cust.CustomerId, cust.PanNo, this);

                if (tcsConfig != null && !cust.IsTCSExemption)
                {
                    var percent = !cust.IsPanVerified ? tcsConfig.NotGSTTCSPercent : tcsConfig.GSTTCSPercent;

                    if (tcsConfig.IsAlreadyTcsUsed == true)
                    {
                        objOrderMaster.TCSAmount = (objOrderMaster.TotalAmount - (sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0)) * percent / 100;
                    }
                    else if ((tcsConfig.TotalPurchase + tcsConfig.PendingOrderAmount + objOrderMaster.TotalAmount) > tcsConfig.TCSAmountLimit)
                    {
                        if (tcsConfig.TotalPurchase > tcsConfig.TCSAmountLimit)
                        {
                            objOrderMaster.TCSAmount = (objOrderMaster.TotalAmount - (sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0)) * percent / 100;
                        }
                        else if (tcsConfig.TotalPurchase + tcsConfig.PendingOrderAmount > tcsConfig.TCSAmountLimit)
                        {
                            objOrderMaster.TCSAmount = (objOrderMaster.TotalAmount - (sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0)) * percent / 100;
                        }
                        else
                        {
                            var TCSCalculatedAMT = (tcsConfig.TotalPurchase + tcsConfig.PendingOrderAmount + objOrderMaster.TotalAmount) - tcsConfig.TCSAmountLimit;
                            if (TCSCalculatedAMT > 0)
                            {
                                objOrderMaster.TCSAmount = (objOrderMaster.TotalAmount - (sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0)) * percent / 100;
                            }
                        }
                    }
                }
                #endregion

                objOrderMaster.TotalAmount = objOrderMaster.TotalAmount - (sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0) + objOrderMaster.TCSAmount;
                objOrderMaster.BillDiscountAmount = sc.BillDiscountAmount.HasValue ? sc.BillDiscountAmount.Value : 0;
                objOrderMaster.GrossAmount = System.Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero);

                bool sendNotification = false;
                var GtxnId = "";

                if (objOrderMaster.OrderId != 0)
                {
                    if (customerShoppingCart != null)
                    {
                        customerShoppingCart.GeneratedOrderId = objOrderMaster.OrderId;
                        bool status = mongoDbHelper.Replace(customerShoppingCart.Id, customerShoppingCart, "CustomerShoppingCart");
                    }
                    //Insert in PaymentHDFCPayments if PaymentThrough == "HDFC"

                    #region Offer, FlashDeal

                    if (offerItemsList != null && offerItemsList.Any())
                    {
                        foreach (var data in offerItemsList)
                        {
                            var offerdata = billOffers.FirstOrDefault(y => y.OfferId == data.ReferOfferId);
                            data.OrderId = objOrderMaster.OrderId;
                            int OrderDetailsId = 0;
                            if (data.OfferType != "BillDiscount_FreeItem")
                            {
                                OrderDetailsId = objOrderMaster.orderDetails.Any(x => x.FreeWithParentItemId > 0 && x.FreeWithParentItemId == data.itemId) ?
                                    objOrderMaster.orderDetails.FirstOrDefault(x => x.FreeWithParentItemId > 0 && x.FreeWithParentItemId == data.itemId).OrderDetailsId : 0;
                            }
                            else
                            {
                                if (offerdata != null && (offerdata.IsBillDiscountFreebiesItem || offerdata.IsBillDiscountFreebiesValue))
                                {
                                    OrderDetailsId = objOrderMaster.orderDetails.FirstOrDefault(x => x.ItemId == data.FreeItemId && x.UnitPrice == 0.0001 && x.OfferId.HasValue && x.OfferId.Value == data.ReferOfferId && x.IsFreeItem == true).OrderDetailsId;
                                }
                                else
                                {
                                    OrderDetailsId = objOrderMaster.orderDetails.FirstOrDefault(x => x.ItemId == data.FreeItemId && x.UnitPrice == 0.0001 && (x.OfferId.HasValue && x.OfferId.Value == data.ReferOfferId)).OrderDetailsId;
                                }
                            }

                            data.OrderDetailsId = OrderDetailsId;


                        }

                        OfferItemDb.AddRange(offerItemsList);
                    }



                    //Update OrderId in FlashDealItemConsumedDB
                    if (flashDealItemConsumedList != null && flashDealItemConsumedList.Any())
                    {
                        // FlashDealOrderId = flashDealItemConsumedList.Select(x => x.FlashDealItemConsumedId).ToList();
                        foreach (var FlashDealOrderIdData in flashDealItemConsumedList)
                        {
                            FlashDealOrderIdData.OrderId = objOrderMaster.OrderId;
                        }
                        FlashDealItemConsumedDB.AddRange(flashDealItemConsumedList);
                    }

                    #endregion

                    #region Deal Item Update
                    if (sc.itemDetails.Any(x => x.OfferCategory == 3) && dbdealItems != null && dbdealItems.Any())
                    {
                        var minOrderqtys = itemMastersList.Where(x => dealItemIds.Contains(x.ItemId)).Select(x => x.MinOrderQty).ToList();
                        var dealitemdetails = itemMastersList.Where(x => dealItemIds.Contains(x.ItemId)).Select(x => new { x.MinOrderQty, x.ItemId, x.ItemMultiMRPId }).ToList();
                        var UpdateDealItem = dbdealItems.Where(x => dealItemMultiMRPIds.Contains(x.ItemMultiMRPId) && minOrderqtys.Contains(x.MinOrderQty)).ToList();

                        foreach (var item in UpdateDealItem)
                        {
                            var id = dealitemdetails.FirstOrDefault(x => x.ItemMultiMRPId == item.ItemMultiMRPId && x.MinOrderQty == item.MinOrderQty)?.ItemId;
                            if (id.HasValue)
                            {
                                var dealitem = sc.itemDetails.FirstOrDefault(x => x.OfferCategory == 3 && x.ItemId == id.Value);
                                item.TotalConsume += dealitem.qty;
                                item.ModifiedDate = indianTime;
                                this.Entry(item).State = EntityState.Modified;
                            }

                        }
                    }
                    #endregion

                    if (!string.IsNullOrEmpty(sc.paymentThrough))//  sc.paymentThrough == "HDFC")//by sudhir
                    {
                        var paymentThroughs = sc.paymentThrough.Split(',').ToList();

                        if (paymentThroughs.Count == 1 && paymentThroughs.Any(x => x.ToLower() == "cash" || x.ToLower() == "rtgs/neft"))
                        {
                            string paymode = "RTGS/NEFT";
                            if (paymentThroughs.Any(x => x.ToLower() == "cash"))
                                paymode = "Cash";

                            sendNotification = true;
                            PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
                            {
                                amount = Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero),
                                CreatedDate = indianTime,
                                currencyCode = "INR",
                                OrderId = objOrderMaster.OrderId,
                                PaymentFrom = paymode,
                                status = "Success",
                                statusDesc = "Order Place",
                                UpdatedDate = indianTime,
                                IsRefund = false
                            });
                        }
                        if ((paymentThroughs.Count == 2
                            && paymentThroughs.Any(x => x.ToLower() == "cash")
                            && paymentThroughs.Any(x => x.ToLower() == "paylater"))
                            || (sc.PaylaterAmount > 0 && paymentThroughs.Any(x => x.ToLower() == "paylater")))
                        {

                            paymentThroughs.ForEach(paylimit =>
                            {
                                string payLatertxnId = "";
                                string paymode = "PayLater";
                                payLatertxnId = "P" + DateTime.Now.ToString("ddMMyyyyHHmmss");
                                if ("cash" == paylimit.ToLower())
                                    paymode = "Cash";

                                PaymentResponseRetailerApp paylimitAdd = new PaymentResponseRetailerApp
                                {
                                    amount = Math.Round(paymode == "Cash" ? sc.CODAmount : sc.PaylaterAmount, 0, MidpointRounding.AwayFromZero),
                                    CreatedDate = indianTime,
                                    currencyCode = "INR",
                                    OrderId = objOrderMaster.OrderId,
                                    GatewayTransId = paymode == "PayLater" ? payLatertxnId : "",
                                    PaymentFrom = paymode,
                                    status = "Success",
                                    statusDesc = "Order Place",
                                    UpdatedDate = indianTime,
                                    IsRefund = false,
                                    IsOnline = paymode == "Cash" ? false : true
                                };
                                PaymentResponseRetailerAppDb.Add(paylimitAdd);
                                this.Commit();
                                if (paymode == "PayLater")
                                {
                                    long storeidforpaylater = objOrderMaster.orderDetails.Distinct().FirstOrDefault().StoreId;
                                    int duedays = StoreCreditLimitDb.FirstOrDefault(x => x.CustomerId == sc.CustomerId && x.StoreId == storeidforpaylater).DueDays;
                                    PayLaterCollectionDb.Add(new Model.CashManagement.PayLaterCollection
                                    {
                                        PaymentResponseRetailerAppId = paylimitAdd.id,
                                        IsActive = true,
                                        IsDeleted = false,
                                        Amount = Math.Round(paymode == "Cash" ? sc.CODAmount : sc.PaylaterAmount, 0, MidpointRounding.AwayFromZero),
                                        OrderId = objOrderMaster.OrderId,
                                        CreatedBy = cust.CustomerId,
                                        CreatedDate = indianTime,
                                        Status = Convert.ToInt32(PayCollectionEnum.Pending),
                                        StoreId = objOrderMaster.orderDetails.Distinct().FirstOrDefault().StoreId,
                                        DueDays = duedays
                                    });
                                }
                            });
                        }
                        //if (paymentThroughs.Any(x => x.ToLower() == "cash") && objOrderMaster.Status == "Pending" && cust.IsKPP)
                        //{
                        //    objOrderMaster.Status = "InTransit";
                        //}
                    }

                    if (string.IsNullOrEmpty(sc.paymentThrough))
                    {
                        sendNotification = true;
                        PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
                        {
                            amount = Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero),
                            CreatedDate = indianTime,
                            currencyCode = "INR",
                            OrderId = objOrderMaster.OrderId,
                            PaymentFrom = "Cash",
                            status = "Success",
                            statusDesc = "Order Place",
                            UpdatedDate = indianTime,
                            IsRefund = false
                        });

                        //if (objOrderMaster.Status == "Pending" && cust.IsKPP)
                        //{
                        //    objOrderMaster.Status = "InTransit";
                        //}
                    }

                    if (sc.paymentThrough == "Gullak" && sc.GulkAmount > 0)
                    {
                        GtxnId = "G" + DateTime.Now.ToString("ddMMyyyyHHmmss");
                        sc.GulkAmount = objOrderMaster.GrossAmount;
                        PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
                        {
                            amount = Math.Round(sc.GulkAmount, 0),
                            CreatedDate = indianTime,
                            currencyCode = "INR",
                            OrderId = objOrderMaster.OrderId,
                            PaymentFrom = "Gullak",
                            status = "Success",
                            statusDesc = "Order Place",
                            UpdatedDate = indianTime,
                            IsRefund = false,
                            IsOnline = true,
                            GatewayTransId = GtxnId,
                            GatewayOrderId = customerGullak.Id.ToString()
                        });

                        GullakTransactionDB.Add(new Model.Gullak.GullakTransaction
                        {
                            CreatedDate = indianTime,
                            CreatedBy = customerGullak.CustomerId,
                            Comment = "Order Placed : " + objOrderMaster.OrderId.ToString(),
                            Amount = (-1) * Math.Round(sc.GulkAmount, 0),
                            GullakId = customerGullak.Id,
                            CustomerId = customerGullak.CustomerId,
                            IsActive = true,
                            IsDeleted = false,
                            ObjectId = objOrderMaster.OrderId.ToString(),
                            ObjectType = "Order"
                        });

                        customerGullak = GullakDB.FirstOrDefault(x => x.CustomerId == cust.CustomerId && x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value));

                        customerGullak.TotalAmount -= Math.Round(sc.GulkAmount);
                        customerGullak.ModifiedBy = customerGullak.CustomerId;
                        customerGullak.ModifiedDate = indianTime;

                        this.Entry(customerGullak).State = EntityState.Modified;


                    }

                    //var od = DbOrderMaster.Where(x => x.OrderId == objOrderMaster.OrderId).FirstOrDefault();

                    string Borderid = Convert.ToString(objOrderMaster.OrderId);
                    string BorderCodeId = Borderid.PadLeft(11, '0');
                    temOrderQBcode code = GetBarcode(BorderCodeId);
                    objOrderMaster.InvoiceBarcodeImage = code.BarcodeImage;

                    //if (objOrderMaster.paymentMode == "COD" && objOrderMaster.Status == "Pending" && cust.IsKPP)
                    //{
                    //    objOrderMaster.Status = "InTransit";
                    //}


                    //   objOrderMaster.invoice_no = "Od_" + Convert.ToString(objOrderMaster.OrderId);
                }


                //IsCustFirstOrder
                if (objOrderMaster.Status == "Pending")
                {
                    if (IsCustFirstOrder(objOrderMaster.CustomerId))
                    {
                        objOrderMaster.IsFirstOrder = true;
                    };
                }

                //ETA Date Calculation
                RetailerAppManager retailerApp = new RetailerAppManager();
                var orderid = 0;
                using (var AuthContext = new AuthContext())
                {
                    orderid = AuthContext.DbOrderMaster.Where(x => x.CustomerId == sc.CustomerId).OrderByDescending(x => x.CreatedDate).Select(x => x.OrderId).FirstOrDefault();
                }
                CRMManager mg = new CRMManager();
                objOrderMaster.IsDigitalOrder = (await mg.IsDigitalCustomer(cust.Skcode));


                if (objOrderMaster.IsDigitalOrder.Value)
                {
                    objOrderMaster.Deliverydate = DateTime.Now.AddDays(1);
                    //objOrderMaster.
                }
                else
                {
                    NextETADate = retailerApp.GetNextETADate(objOrderMaster.WarehouseId, orderid);
                    if (NextETADate != null)
                    {
                        objOrderMaster.Deliverydate = NextETADate.Min(x => x.NextDeliveryDate);
                    }
                }


                #region For IsNextDayDelivery 
                if (warehouse.IsNextDayDelivery)
                {
                    if (objOrderMaster.CreatedDate.Hour <= 17)
                    {
                        bool IsNextDayHoliday = false;
                        bool IsDayHoliday = false;
                        bool IsWarehouseHoliday = false;

                        var WareHouseHolidays = WarehouseHolidays.Where(x => x.Warehouseid == objOrderMaster.WarehouseId && x.IsActive == true && x.IsDeleted == false && x.Year == DateTime.Now.Year).ToList();
                        var WareHouse_DayWise_Holidays = WarehouseUpdateCapacities.Where(x => x.Warehouseid == objOrderMaster.WarehouseId && x.UpdateCapacity == 0 && x.Date > objOrderMaster.CreatedDate && x.IsActive == true && x.IsDeleted == false && x.Year == DateTime.Now.Year).ToList();

                        IsNextDayHoliday = WareHouse_DayWise_Holidays.FirstOrDefault(x => x.Date.ToString("dd/MM/yyyy") == objOrderMaster.CreatedDate.AddDays(1).ToString("dd/MM/yyyy")) != null ? true : false;
                        if (WareHouseHolidays == null && IsNextDayHoliday == false)
                        {
                            objOrderMaster.Deliverydate = objOrderMaster.CreatedDate.AddDays(1);
                        }
                        else
                        {
                            int i = 1;
                            while (i > 0)
                            {
                                DateTime date = objOrderMaster.CreatedDate.AddDays(i);
                                if (WareHouseHolidays != null && WareHouseHolidays.Count() > 0)
                                {
                                    IsWarehouseHoliday = WareHouseHolidays.FirstOrDefault(x => date.ToString("dddd").ToLower() == x.Holidays.Trim().ToLower()) != null ? true : false; ;
                                }

                                if (WareHouse_DayWise_Holidays != null && WareHouse_DayWise_Holidays.Count() > 0)
                                {
                                    IsDayHoliday = WareHouse_DayWise_Holidays.FirstOrDefault(x => x.Date.Date == date.Date) != null ? true : false;
                                }
                                if (IsWarehouseHoliday == false && IsDayHoliday == false)
                                {
                                    objOrderMaster.Deliverydate = objOrderMaster.CreatedDate.AddDays(i);
                                    break;
                                }
                                i++;
                            }
                        }
                    }
                    else
                    {
                        //objOrderMaster.Deliverydate = NextETADate.Min(x => x.NextDeliveryDate);
                        NextETADate = retailerApp.GetNextETADate(objOrderMaster.WarehouseId, orderid);
                        if (NextETADate != null)
                        {
                            objOrderMaster.Deliverydate = NextETADate.Min(x => x.NextDeliveryDate);
                        }
                    }
                }
                #endregion


                this.Entry(objOrderMaster).State = EntityState.Modified;


                if (AppConstants.IsUsingLedgerHitOnOnlinePayment && sc.paymentThrough == "Gullak" && sc.GulkAmount > 0 && GtxnId != "")
                {
                    if (OnlinePaymentDtlsForLedgerDB.FirstOrDefault(z => z.OrderId == objOrderMaster.OrderId && z.TransactionId == GtxnId) == null)
                    {
                        OnlinePaymentDtlsForLedger Opdl = new OnlinePaymentDtlsForLedger();
                        Opdl.OrderId = objOrderMaster.OrderId;
                        Opdl.IsPaymentSuccess = true;
                        Opdl.IsLedgerAffected = "Yes";
                        Opdl.PaymentDate = DateTime.Now;
                        Opdl.TransactionId = GtxnId;
                        Opdl.IsActive = true;
                        Opdl.CustomerId = objOrderMaster.CustomerId;
                        OnlinePaymentDtlsForLedgerDB.Add(Opdl);
                    }
                }
                this.Commit();

                //string invoice = objOrderMaster.invoice_no.ToString();


                if (sendNotification)
                {
                    try
                    {
                        #region for first order
                        if (cust.ordercount == 1)//if this is customer first order
                        {
                            FirstCustomerOrder(cust, objOrderMaster);
                        }
                        #endregion

                        if (cust.ordercount > 1)
                        {
                            ForNotification(cust.CustomerId, objOrderMaster.GrossAmount);
                        }

                        //If Order Placed By Sales Man then send notification to customer
                        if (objOrderMaster.OrderTakenSalesPersonId > 1)
                        {
                            ForSalesManOrderPlaced(cust, objOrderMaster);
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                }
            }
            //objOrderMaster = PrepareOrderMasterToInsert(objOrderMaster, warehouse, sc, cust);



            if (placeOrderResponse.IsSuccess && objOrderMaster.OrderId > 0)
            {
                //if (!string.IsNullOrEmpty(LimitCheck_GUID))
                //{
                //    DeleteItemLimit(LimitCheck_GUID);
                //}
                PlacedOrderMasterDTM order = new PlacedOrderMasterDTM();
                order.OrderId = objOrderMaster.OrderId;
                order.CustomerId = objOrderMaster.CustomerId;
                order.Skcode = objOrderMaster.Skcode;
                order.WarehouseId = objOrderMaster.WarehouseId;
                order.TotalAmount = objOrderMaster.TotalAmount;
                var totalamt = objOrderMaster.TotalAmount + objOrderMaster.BillDiscountAmount ?? 0 + objOrderMaster.WalletAmount ?? 0;
                var wheelConfig = CompanyWheelConfiguration.FirstOrDefault(x => x.IsStore == false);
                double wheelAmount = 0;
                int lineItemcount = objOrderMaster.orderDetails.Where(x => !x.IsFreeItem).ToList().Count;
                if ((wheelConfig.IsKPPRequiredWheel && cust.IsKPP) || !cust.IsKPP)
                {
                    if (wheelConfig != null && wheelConfig.OrderAmount > 0 && wheelConfig.LineItemCount > 0)
                    {
                        if (lineItemcount >= wheelConfig.LineItemCount)
                        {
                            wheelAmount = Convert.ToInt32(wheelConfig.OrderAmount);
                            order.WheelCount = Convert.ToInt32(Math.Floor(totalamt / wheelAmount));
                        }
                    }
                    else if (wheelConfig != null && wheelConfig.OrderAmount > 0)
                    {
                        wheelAmount = Convert.ToInt32(wheelConfig.OrderAmount);
                        order.WheelCount = Convert.ToInt32(Math.Floor(totalamt / wheelAmount));
                    }
                    else if (wheelConfig != null && wheelConfig.LineItemCount > 0 && lineItemcount >= wheelConfig.LineItemCount)
                    {
                        wheelAmount = 0;
                        order.WheelCount = Convert.ToInt32(Math.Floor(Convert.ToDecimal(lineItemcount) / wheelConfig.LineItemCount));
                    }
                }
                order.WheelList = new List<int>();
                if (order.WheelCount > 0)
                {
                    var companyWheel = WheelPointWeightPercentConfig.Where(x => x.IsActive && (!x.IsDeleted.HasValue || !x.IsDeleted.Value)).ToList();
                    order.WheelList = NextWheelNumber(companyWheel, order.WheelCount);

                    DialValuePoint DialValue = new DialValuePoint();
                    DialValue.EarnWheelCount = order.WheelCount;
                    DialValue.EarnWheelList = string.Join(",", order.WheelList);
                    DialValue.point = 0;
                    DialValue.OrderId = objOrderMaster.OrderId;
                    DialValue.Skcode = objOrderMaster.Skcode;
                    DialValue.CustomerId = objOrderMaster.CustomerId;
                    DialValue.ShopName = objOrderMaster.ShopName;
                    DialValue.OrderAmount = objOrderMaster.GrossAmount;
                    DialValue.CreatedDate = indianTime;
                    DialValuePointDB.Add(DialValue);
                    this.Commit();

                }
                order.WheelAmountLimit = wheelAmount;
                order.DialEarnigPoint = 0;
                decimal KisanDaanAmount = 0;
                if (objOrderMaster.orderDetails != null && objOrderMaster.orderDetails.Any(x => !string.IsNullOrEmpty(x.SubcategoryName) && x.SubcategoryName.ToLower() == "kisan kirana"))
                {
                    var KKAmount = Convert.ToDecimal(objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && !string.IsNullOrEmpty(x.SubcategoryName) && x.SubcategoryName.ToLower() == "kisan kirana").Sum(x => x.qty * x.UnitPrice));
                    if (KKAmount > 0)
                    {
                        var KisanDaan = kisanDanMaster.FirstOrDefault(x => (x.OrderFromAmount <= KKAmount && x.OrderToAmount >= KKAmount) && x.IsActive);
                        if (KisanDaan != null)
                        {
                            KisanDaanAmount = KKAmount * KisanDaan.KisanDanPrecentage / 100;
                        }
                    }
                }

                try
                {
                    if (!string.IsNullOrEmpty(sc.paymentThrough))//by sudhir
                    {
                        order.RSAKey = rsaKey;
                        order.HDFCOrderId = hdfcOrderId;
                        order.eplOrderId = eplOrderId;
                    }
                }
                catch (Exception ex)
                {
                    logger.Error(ex.ToString());
                }

                order.ExpectedETADate = objOrderMaster.Deliverydate; //ETA Date                
                order.ETADates = new List<ETADatesDc>();
                #region CommodityLimit
                var companydetail = CompanyDetailsDB.Where(x => x.IsActive == true && x.IsDeleted == false).FirstOrDefault();
                var orderItemids = itemMastersList.Where(x => itemIds.Contains(x.ItemId) && x.IsCommodity).Select(x => x.ItemId).ToList();
                var orderCommodityAmount = objOrderMaster.orderDetails.Where(x => orderItemids.Contains(x.ItemId)).Sum(x => x.TotalAmt);
                bool isCommodityLimit = false;
                if (companydetail.CommodityLimit > 0 && companydetail.CommodityLimit < orderCommodityAmount)
                {
                    isCommodityLimit = true;
                }
                #endregion
                if (!isCommodityLimit)
                {
                    if (NextETADate != null)
                    {
                        order.ETADates.AddRange(NextETADate.Where(x => x.NextDeliveryDate != objOrderMaster.Deliverydate).Select(x => new ETADatesDc { ETADate = x.NextDeliveryDate }).ToList());
                        order.IsDefaultDeliveryChange = NextETADate.FirstOrDefault().IsDefaultDeliveryChange;
                    }
                    else
                    {
                        order.ETADates.Add(new ETADatesDc { ETADate = order.ExpectedETADate.AddDays(1) });
                        order.ETADates.Add(new ETADatesDc { ETADate = order.ExpectedETADate.AddDays(2) });
                        order.ETADates.Add(new ETADatesDc { ETADate = order.ExpectedETADate.AddDays(3) });
                    }
                }

                #region For IsNextDayDelivery return
                if (warehouse.IsNextDayDelivery)
                {
                    order.ETADates = new List<ETADatesDc>();
                    order.ExpectedETADate = objOrderMaster.Deliverydate;
                }
                #endregion

                placeOrderResponse.OrderMaster = order;
                placeOrderResponse.EarnWalletPoint = BillDiscounts != null && BillDiscounts.Any(x => x.IsUsedNextOrder) ? Convert.ToInt32(BillDiscounts.Where(x => x.IsUsedNextOrder).Sum(x => x.BillDiscountTypeValue)) : 0;
                placeOrderResponse.KisanDaanAmount = KisanDaanAmount;
                placeOrderResponse.NotServicing = cluster == null || !cluster.Active;
                if (placeOrderResponse.NotServicing)
                    placeOrderResponse.Message = "We are currently not servicing in your area. Our team will contact you soon.";

            }

            //if (!placeOrderResponse.IsSuccess)
            //{
            //    if (!string.IsNullOrEmpty(LimitCheck_GUID))
            //    {
            //        DeleteItemLimit(LimitCheck_GUID);
            //    }
            //}
            return placeOrderResponse;
        }

        private List<int> NextWheelNumber(List<WheelPointWeightPercentConfig> companyWheels, int wheelCount)
        {
            List<int> wheelPoint = new List<int>();
            if (companyWheels != null && companyWheels.Any())
            {
                WeightedRandomBag<int> itemDrops = new WeightedRandomBag<int>();
                foreach (var item in companyWheels)
                {
                    itemDrops.AddEntry(item.WheelPoint, item.WheelWeightPercent);
                }
                for (int i = 0; i < wheelCount; i++)
                {
                    wheelPoint.Add(itemDrops.GetRandom());
                }
            }
            else
                wheelPoint.Add(10);

            return wheelPoint;
        }

        private OrderMaster RewardAndWalletPointForPlacedOrderHDFC(ShoppingCart sc, double offerWalletPoint, OrderMaster objOrderMaster, double rewardpoint, Customer cust, double walletUsedPoint1, double rewPoint, double rewAmount, CashConversion cash)
        {

            #region RewardPoint  calculation 

            if (sc.DialEarnigPoint > 0)
            {
                //rewardpoint = rewardpoint + sc.DialEarnigPoint; user in after add order puch api
                if (offerWalletPoint > 0)
                {
                    objOrderMaster.RewardPoint = rewardpoint + offerWalletPoint;
                }
                else
                {
                    objOrderMaster.RewardPoint = rewardpoint;
                }

            }
            else
            {
                if (offerWalletPoint > 0)
                {
                    objOrderMaster.RewardPoint = rewardpoint + offerWalletPoint;
                }
                else
                {
                    objOrderMaster.RewardPoint = rewardpoint;
                }

            }

            var rpoint = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
            if (rpoint != null)
            {
                if (rewardpoint > 0)
                {

                    rpoint.EarningPoint += rewardpoint;
                    rpoint.UpdatedDate = indianTime;
                    this.Entry(rpoint).State = EntityState.Modified;
                }
            }
            else
            {
                RewardPoint point = new RewardPoint();
                point.CustomerId = cust.CustomerId;
                if (rewardpoint > 0)
                    point.EarningPoint = rewardpoint;
                else
                    point.EarningPoint = 0;
                point.TotalPoint = 0;
                point.UsedPoint = 0;
                point.MilestonePoint = 0;
                point.CreatedDate = indianTime;
                point.UpdatedDate = indianTime;
                point.Deleted = false;
                this.RewardPointDb.Add(point);
            }
            #endregion

            Wallet wallet = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();

            if (objOrderMaster.RewardPoint > 0 || walletUsedPoint1 > 0)
            {
                var rpointWarehouse = WarehousePointDB.Where(c => c.WarehouseId == objOrderMaster.WarehouseId).SingleOrDefault();
                int fnlAmount = Convert.ToInt32((objOrderMaster.GrossAmount / cash.rupee) * cash.point);
                if (rpointWarehouse != null)
                {


                    if (walletUsedPoint1 > 0 && wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {

                        if (fnlAmount > walletUsedPoint1)
                        {
                            rpointWarehouse.availablePoint -= walletUsedPoint1;
                            rpointWarehouse.UsedPoint += walletUsedPoint1;
                            rewPoint = walletUsedPoint1;
                            walletUsedPoint1 = 0;
                        }
                        else
                        {
                            rpointWarehouse.availablePoint -= rewPoint;
                            rpointWarehouse.UsedPoint += rewPoint;
                            walletUsedPoint1 -= fnlAmount;
                            rewPoint = fnlAmount;
                        }

                        objOrderMaster.walletPointUsed = rewPoint;
                        try

                        {
                            rewAmount = ((rewPoint / cash.point) * cash.rupee);
                            objOrderMaster.WalletAmount = rewAmount;
                        }
                        catch (Exception e)
                        {

                            objOrderMaster.WalletAmount = 0;
                        }
                    }
                    else
                    {
                        objOrderMaster.WalletAmount = 0;
                        objOrderMaster.walletPointUsed = 0;
                    }

                    if (objOrderMaster.RewardPoint > 0)
                    {
                        rpointWarehouse.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        rpointWarehouse.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    //WarehousePointDB.Attach(rpointWarehouse);
                    this.Entry(rpointWarehouse).State = EntityState.Modified;
                    //this.SaveChanges();
                }
                else
                {
                    objOrderMaster.WalletAmount = 0;
                    objOrderMaster.walletPointUsed = 0;
                    WarehousePoint wPoint = new WarehousePoint();
                    if (objOrderMaster.RewardPoint > 0)
                    {
                        wPoint.availablePoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                        wPoint.TotalPoint += objOrderMaster.RewardPoint.GetValueOrDefault();
                    }
                    wPoint.WarehouseId = objOrderMaster.WarehouseId;
                    wPoint.CompanyId = objOrderMaster.CompanyId;
                    wPoint.UsedPoint = 0;
                    WarehousePointDB.Add(wPoint);
                    //this.SaveChanges();
                }
            }


            objOrderMaster.GrossAmount = System.Math.Round((objOrderMaster.GrossAmount - rewAmount), 0);
            objOrderMaster.TotalAmount = objOrderMaster.TotalAmount - rewAmount;

            if (sc.walletPointUsed > 0)
            {

                var rpoint1 = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                //var WData = WalletDb.Where(x => x.CustomerId == cust.CustomerId).SingleOrDefault();
                if (rpoint1 != null)
                {
                    if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                    {
                        rpoint1.UsedPoint += sc.walletPointUsed;
                        rpoint1.UpdatedDate = indianTime;
                        this.Entry(rpoint1).State = EntityState.Modified;
                    }
                }

                CustomerWalletHistory CWH = new CustomerWalletHistory();
                if (wallet != null && wallet.TotalAmount > 0 && wallet.TotalAmount >= sc.walletPointUsed)
                {
                    CWH.WarehouseId = cust.Warehouseid ?? 0;
                    CWH.CompanyId = cust.CompanyId ?? 0;
                    CWH.CustomerId = wallet.CustomerId;
                    CWH.Through = "Used On Order";
                    CWH.NewOutWAmount = sc.walletPointUsed;
                    CWH.TotalWalletAmount = wallet.TotalAmount - sc.walletPointUsed;
                    CWH.TotalEarningPoint = rpoint1.EarningPoint;
                    CWH.CreatedDate = indianTime;
                    CWH.UpdatedDate = indianTime;
                    CWH.OrderId = objOrderMaster.OrderId;
                    CustomerWalletHistoryDb.Add(CWH);

                    //update in wallet
                    wallet.TotalAmount -= sc.walletPointUsed;
                    wallet.TransactionDate = indianTime;
                    this.Entry(wallet).State = EntityState.Modified;

                }
            }

            return objOrderMaster;
        }

        private OrderMaster PrepareOrderMasterToInsertHDFC(Warehouse warehouse, ShoppingCart sc, Customer cust)
        {
            OrderMaster objOrderMaster = new OrderMaster();
            objOrderMaster.CompanyId = warehouse.CompanyId;
            objOrderMaster.WarehouseId = warehouse.WarehouseId;
            objOrderMaster.WarehouseName = warehouse.WarehouseName;
            objOrderMaster.CustomerCategoryId = 2;
            objOrderMaster.Status = sc.paymentThrough.Trim().ToLower() == "cash" ? "Pending" : "Payment Pending";

            objOrderMaster.CustomerName = cust.Name;
            objOrderMaster.ShopName = cust.ShopName;
            objOrderMaster.LandMark = cust.LandMark;
            objOrderMaster.Customerphonenum = cust.Mobile;
            objOrderMaster.Lat = sc.Lat;
            objOrderMaster.Lng = sc.Lng;

            if (cust.BillingAddress == null && cust.ShippingAddress != null)
            {
                objOrderMaster.BillingAddress = cust.ShippingAddress;
            }
            else
            {
                objOrderMaster.BillingAddress = cust.BillingAddress;
            }
            if (cust.ShippingAddress == null && cust.BillingAddress != null)
            {
                objOrderMaster.ShippingAddress = cust.BillingAddress;
            }
            else
            {
                objOrderMaster.ShippingAddress = cust.ShippingAddress;
            }

            objOrderMaster.Skcode = cust.Skcode;
            objOrderMaster.Tin_No = cust.RefNo;
            objOrderMaster.CustomerType = cust.CustomerType;
            objOrderMaster.CustomerId = cust.CustomerId;
            objOrderMaster.CityId = warehouse.Cityid;

            // MRP-Actual Price
            objOrderMaster.Savingamount = System.Math.Round(sc.Savingamount, 2);
            objOrderMaster.ClusterId = Convert.ToInt32(cust.ClusterId);
            objOrderMaster.OnlineServiceTax = sc.OnlineServiceTax;
            var clstr = Clusters.Where(x => x.ClusterId == cust.ClusterId).SingleOrDefault();
            if (clstr != null)
            {
                objOrderMaster.ClusterName = clstr.ClusterName;
            }
            People p = new People();
            if (sc.SalesPersonId == 0)
            {
                objOrderMaster.OrderTakenSalesPersonId = 0;
                objOrderMaster.OrderTakenSalesPerson = "Self";
            }
            else
            {
                p = Peoples.Where(x => x.PeopleID == sc.SalesPersonId && x.Deleted == false && x.Active == true).SingleOrDefault();
                if (p != null)
                {
                    objOrderMaster.OrderTakenSalesPersonId = p.PeopleID;
                    objOrderMaster.OrderTakenSalesPerson = p.PeopleFirstName + " " + p.PeopleLastName;
                }

                else
                {
                    objOrderMaster.OrderTakenSalesPersonId = 0;
                    objOrderMaster.OrderTakenSalesPerson = "Self";
                }
            }
            objOrderMaster.active = true;
            objOrderMaster.CreatedDate = indianTime;
            //ETADate 
            objOrderMaster.Deliverydate = indianTime.AddHours(48);
            //Old Removed by Vineet 
            //if (indianTime.Hour > 16)
            //{
            //    objOrderMaster.Deliverydate = indianTime.AddDays(2);
            //}
            //else
            //{
            //    objOrderMaster.Deliverydate = indianTime.AddDays(1);
            //}

            objOrderMaster.UpdatedDate = indianTime;
            objOrderMaster.Deleted = false;
            return objOrderMaster;
        }

        private PlaceOrderResponse ValidateShoppingCartHDFC(ShoppingCart cart, Warehouse warehouse, Customer cust, List<AppHomeItem> appHomeItems, List<int> cartItemIds, List<ItemMaster> itemMastersList, List<ItemMaster> FreeitemsList, List<ItemLimitMaster> itemLimits, List<PrimeItemDetail> PrimeItemDetails, List<DealItem> DealItems, List<ItemScheme> itemPTR, string LimitCheck_GUID, out OrderMaster objOrderMaster, out List<BillDiscount> BillDiscounts, out List<int> ExpireofferId, out bool IsStopActive, out List<BillDiscountFreebiesItemQtyDC> FreeQtyList)
        {
            ExpireofferId = new List<int>();
            string MemberShipName = Common.Constants.AppConstants.MemberShipName;
            int MemberShipHours = Common.Constants.AppConstants.MemberShipHours;
            var placeOrderResponse = new PlaceOrderResponse { IsSuccess = true, Message = string.Empty, cart = cart };
            objOrderMaster = new OrderMaster();
            objOrderMaster = PrepareOrderMasterToInsertHDFC(warehouse, cart, cust);
            objOrderMaster.ExpectedRtdDate = objOrderMaster.Deliverydate.Date.AddDays(-1); // Expected Rtd Date  vaibhav
            objOrderMaster.orderDetails = new List<OrderDetails>();
            BillDiscounts = new List<BillDiscount>();
            FreeQtyList = new List<BillDiscountFreebiesItemQtyDC>();
            double finaltotal = 0;
            double finalTaxAmount = 0;
            double finalSGSTTaxAmount = 0;
            double finalCGSTTaxAmount = 0;
            double finalGrossAmount = 0;
            double finalTotalTaxAmount = 0;
            //cess 
            double finalCessTaxAmount = 0;
            List<FlashDealItemConsumed> FlashDealItemConsumed = null;
            List<int> itemids = itemMastersList.Select(x => x.ItemId).ToList();
            var apphomeitem = appHomeItems.Where(x => itemids.Contains(x.ItemId) && x.IsFlashDeal == true).FirstOrDefault();
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = retailerAppManager.GetStoreWithDetail();
            IsStopActive = false;
            if (!cust.Active)
            {
                var Ordersubcatids = itemMastersList.Select(x => x.SubCategoryId).Distinct().ToList();
                var StoreCategorySubCategoryBrandsAllow = StoreCategorySubCategoryBrands.Where(c => Ordersubcatids.Contains(c.SubCategoryId)).ToList();

                IsStopActive = StoreCategorySubCategoryBrandsAllow.All(x => Ordersubcatids.Contains(x.SubCategoryId) && x.AllowInactiveOrderToPending == true);
            }

            if (apphomeitem != null)
            {
                FlashDealItemConsumed = FlashDealItemConsumedDB.Where(x => itemids.Contains(x.ItemId) && x.FlashDealId == apphomeitem.id && x.CompanyId == cust.CustomerId).ToList();
            }
            var rewardpoint = 0;
            double unitPrice = 0;
            List<int> offerItemId = new List<int>();
            List<int> FlashDealOrderId = new List<int>();

            List<DataContracts.Masters.Store.ClusterStoreExecutiveDc> clusterStoreExecutiveDcs = retailerAppManager.GetStoreClusterExecutiveDetail();
            #region Supplier PO Check item Code
            var OrderItemMultiMRPIds = itemMastersList.Select(x => x.ItemMultiMRPId).Distinct().ToList();
            var itemmultimrp = new DataTable();
            itemmultimrp.Columns.Add("IntValue");
            foreach (var item in OrderItemMultiMRPIds)
            {
                var dr = itemmultimrp.NewRow();
                dr["IntValue"] = item;
                itemmultimrp.Rows.Add(dr);
            }
            var itemmultimrpids = new SqlParameter
            {
                ParameterName = "itemmultiMrpIds",
                SqlDbType = SqlDbType.Structured,
                TypeName = "dbo.IntValues",
                Value = itemmultimrp
            };
            var paramStatus = new SqlParameter()
            {
                ParameterName = "@customerId",
                Value = cust.CustomerId
            };

            var supplierItemlist = Database.SqlQuery<int>("exec GetSupplierItemForRetailer @customerId , @itemmultiMrpIds", paramStatus, itemmultimrpids).ToList();
            #endregion

            //#region MongoitemlimitCheck

            //MongoDbHelper<ItemLimitValidation> mongogullakDbHelper = new MongoDbHelper<ItemLimitValidation>();
            //var ItemLimitPredicate = PredicateBuilder.New<ItemLimitValidation>(x => x.Guid != LimitCheck_GUID);
            //var mongoItemLimitValidationList = mongogullakDbHelper.Select(ItemLimitPredicate).ToList();

            //#endregion

            var CustomerChannels = CustomerChannelMappings.Where(x => x.CustomerId == cust.CustomerId && x.IsActive == true).ToList(); // by kapil
            foreach (var i in placeOrderResponse.cart.itemDetails.Where(x => x.OfferCategory != 2).Select(x => x))
            {
                unitPrice = 0;
                //try
                //{

                i.IsSuccess = true;
                if (i.qty <= 0)
                {

                    i.IsSuccess = false;
                    i.Message = "Quantity is 0.";
                }
                else if (i.qty != 0 && i.qty > 0)
                {

                    var items = itemMastersList.Where(x => x.ItemId == i.ItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();

                    if (items == null)
                    {
                        i.IsSuccess = false;
                        i.Message = "Item is not found.";
                    }
                    else
                    {
                        unitPrice = items.UnitPrice;
                        AuthContext context = new AuthContext();
                        BackendOrderController backendOrderController = new BackendOrderController();

                        double cprice = backendOrderController.GetConsumerPrice(context, items.ItemMultiMRPId, items.price, items.UnitPrice, warehouse.WarehouseId);
                        items.UnitPrice = SkCustomerType.GetPriceFromType(cust.CustomerType, items.UnitPrice
                                                                    , items.WholeSalePrice ?? 0
                                                                    , items.TradePrice ?? 0, cprice);

                        bool isOffer = items.IsOffer;

                        if (FlashDealItemConsumed != null && FlashDealItemConsumed.Any(x => x.ItemId == items.ItemId) && items.IsOffer)
                        {
                            items.IsOffer = false;
                        }

                        if (!items.active || items.Deleted)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item is not Active.";
                        }

                        if (supplierItemlist != null && supplierItemlist.Any(x => x == items.ItemMultiMRPId))
                        {
                            i.IsSuccess = false;
                            i.Message = "Supplier not eligible to purchase this item!!";
                        }

                        var limit = itemLimits.FirstOrDefault(x => x.ItemNumber == items.ItemNumber && x.ItemMultiMRPId == items.ItemMultiMRPId);
                        //if (limit != null && mongoItemLimitValidationList.Any() && mongoItemLimitValidationList != null && (FreeitemsList == null || FreeitemsList.Count() == 0))
                        //{
                        //    int blockLimitQty = mongoItemLimitValidationList.Any(x => x.ItemId == i.ItemId && x.ItemMultiMRPId == items.ItemMultiMRPId && x.WarehouseId == i.WarehouseId) ? mongoItemLimitValidationList.FirstOrDefault(x => x.ItemId == i.ItemId && x.ItemMultiMRPId == items.ItemMultiMRPId && x.WarehouseId == i.WarehouseId).Qty : 0;
                        //    if (blockLimitQty == 0 || (limit.ItemlimitQty - blockLimitQty) < i.qty)
                        //    {
                        //        i.IsSuccess = false;
                        //        i.Message = "Order qty greater than limit qty.";
                        //    }
                        //}
                        if (limit != null && limit.ItemlimitQty < i.qty)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item is not Active.";
                        }
                        var mod = Convert.ToDecimal(i.qty) % items.MinOrderQty;
                        if (mod != 0)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item qty is not multiples of min order qty.";
                        }

                        if (i.IsSuccess && cart.status != "Replace")
                        {
                            var primeitem = PrimeItemDetails != null && PrimeItemDetails.Any(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) ? PrimeItemDetails.FirstOrDefault(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) : null;
                            var dealItem = DealItems != null && i.OfferCategory == 3 && DealItems.Any(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) ? DealItems.FirstOrDefault(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) : null;
                            if (cust.IsPrimeCustomer && primeitem != null)
                            {
                                primeitem.PrimePrice = primeitem.PrimePercent > 0 ? Convert.ToDecimal(items.UnitPrice - (items.UnitPrice * Convert.ToDouble(primeitem.PrimePercent) / 100)) : primeitem.PrimePrice;

                                if (i.UnitPrice != Convert.ToDouble(primeitem.PrimePrice))
                                {
                                    i.IsSuccess = false;
                                    i.Message = "Item " + MemberShipName + " Unit Price has changed.";
                                    i.NewUnitPrice = Convert.ToDouble(primeitem.PrimePrice);
                                }
                            }
                            else if (i.OfferCategory == 3 && dealItem == null)
                            {
                                i.IsSuccess = false;
                                i.Message = "Deal Item has expired.";
                                i.NewUnitPrice = Convert.ToDouble(dealItem.DealPrice);
                            }
                            else if (i.OfferCategory == 3 && dealItem != null)
                            {
                                if (i.UnitPrice != Convert.ToDouble(dealItem.DealPrice))
                                {
                                    i.IsSuccess = false;
                                    i.Message = "Item Deal Price has changed.";
                                    i.NewUnitPrice = Convert.ToDouble(dealItem.DealPrice);
                                }
                            }
                            else if (i.UnitPrice != items.UnitPrice)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item Unit Price has changed.";
                                i.NewUnitPrice = items.UnitPrice;
                            }
                        }

                        if (i.IsSuccess && cart.status != "Replace")
                        {

                            OrderDetails od = new OrderDetails();
                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid))
                            {
                                var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid);
                                od.StoreId = store.StoreId;
                                if (CustomerChannels != null && CustomerChannels.Any(x => x.StoreId == od.StoreId))
                                    od.ChannelMasterId = CustomerChannels.FirstOrDefault(x => x.StoreId == store.StoreId).ChannelMasterId;

                                if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId) && CustomerChannels != null)
                                {
                                    if (CustomerChannels.Any(x => x.StoreId == od.StoreId))
                                    {
                                        var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId && a.ChannelMasterId == od.ChannelMasterId);
                                        if (clusterStoreExecutiveDc != null)
                                        {
                                            od.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                            od.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                        }

                                    }

                                }

                            }
                            else
                            {
                                od.StoreId = 0;
                                od.ExecutiveId = 0;
                                od.ExecutiveName = "";
                            }
                            od.CustomerId = cust.CustomerId;
                            od.CustomerName = cust.Name;
                            od.CityId = cust.Cityid;
                            od.Mobile = cust.Mobile;
                            od.OrderDate = indianTime;
                            od.Status = cust.Active ? "Pending" : "Inactive";
                            od.CompanyId = warehouse.CompanyId;
                            od.WarehouseId = warehouse.WarehouseId;
                            od.WarehouseName = warehouse.WarehouseName;
                            od.NetPurchasePrice = items.NetPurchasePrice + ((items.NetPurchasePrice * items.TotalTaxPercentage) / 100);
                            od.ItemId = items.ItemId;
                            od.ItemMultiMRPId = items.ItemMultiMRPId;
                            od.Itempic = items.LogoUrl;
                            od.itemname = items.itemname;
                            od.SupplierName = items.SupplierName;
                            od.SellingUnitName = items.SellingUnitName;
                            od.CategoryName = items.CategoryName;
                            od.SubsubcategoryName = items.SubsubcategoryName;
                            od.SubcategoryName = items.SubcategoryName;
                            od.SellingSku = items.SellingSku;
                            od.City = items.CityName;
                            od.itemcode = items.itemcode;
                            od.HSNCode = items.HSNCode;
                            od.itemNumber = items.Number;
                            od.Barcode = items.itemcode;
                            var primeitem = PrimeItemDetails != null && PrimeItemDetails.Any(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) ? PrimeItemDetails.FirstOrDefault(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) : null;
                            var dealItem = DealItems != null && i.OfferCategory == 3 && DealItems.Any(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) ? DealItems.FirstOrDefault(x => x.ItemMultiMRPId == items.ItemMultiMRPId && x.MinOrderQty == items.MinOrderQty) : null;
                            if (cust.IsPrimeCustomer && primeitem != null)
                                od.UnitPrice = Convert.ToDouble(primeitem.PrimePercent > 0 ? Convert.ToDecimal(items.UnitPrice - (items.UnitPrice * Convert.ToDouble(primeitem.PrimePercent) / 100)) : primeitem.PrimePrice);
                            else if (i.OfferCategory == 3 && dealItem != null)
                            {
                                od.UnitPrice = Convert.ToDouble(dealItem.DealPrice);
                            }
                            else
                                od.UnitPrice = items.UnitPrice;

                            od.price = items.price;
                            od.ActualUnitPrice = items.UnitPrice;
                            od.MinOrderQty = items.MinOrderQty;
                            od.MinOrderQtyPrice = (od.MinOrderQty * od.UnitPrice);
                            od.qty = Convert.ToInt32(i.qty);
                            od.SizePerUnit = items.SizePerUnit;
                            od.TaxPercentage = items.TotalTaxPercentage;
                            if (od.TaxPercentage >= 0)
                            {
                                od.SGSTTaxPercentage = od.TaxPercentage / 2;
                                od.CGSTTaxPercentage = od.TaxPercentage / 2;
                            }
                            od.Noqty = od.qty; // for total qty (no of items)    
                            od.TotalAmt = System.Math.Round(od.UnitPrice * od.qty, 2);

                            if (items.TotalCessPercentage > 0)
                            {
                                od.TotalCessPercentage = items.TotalCessPercentage;
                                double tempPercentagge = items.TotalCessPercentage + items.TotalTaxPercentage;

                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge / 100)) / 100;


                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.CessTaxAmount = (od.AmtWithoutAfterTaxDisc * od.TotalCessPercentage) / 100;
                            }


                            double tempPercentagge2 = items.TotalCessPercentage + items.TotalTaxPercentage;

                            od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge2 / 100)) / 100;
                            od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                            od.TaxAmmount = (od.AmtWithoutAfterTaxDisc * od.TaxPercentage) / 100;
                            if (od.TaxAmmount >= 0)
                            {
                                od.SGSTTaxAmmount = od.TaxAmmount / 2;
                                od.CGSTTaxAmmount = od.TaxAmmount / 2;
                            }
                            //for cess
                            if (od.CessTaxAmount > 0)
                            {
                                double tempPercentagge3 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                //double temp = od.TaxPercentage + od.TotalCessPercentage;
                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.CessTaxAmount + od.TaxAmmount;
                            }
                            else
                            {
                                od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.TaxAmmount;
                            }
                            od.DiscountPercentage = 0;// items.PramotionalDiscount;
                            od.DiscountAmmount = 0;// (od.NetAmmount * items.PramotionalDiscount) / 100;
                            double DiscountAmmount = od.DiscountAmmount;
                            double NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                            od.NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                            double TaxAmmount = od.TaxAmmount;
                            od.Purchaseprice = items.PurchasePrice;
                            od.CreatedDate = indianTime;
                            od.UpdatedDate = indianTime;
                            od.Deleted = false;
                            var schemeptr = itemPTR.Any(y => y.ItemMultiMRPId == items.ItemMultiMRPId) ? itemPTR.FirstOrDefault(y => y.ItemMultiMRPId == items.ItemMultiMRPId).PTR : 0;
                            if (schemeptr > 0)
                            {
                                od.PTR = Math.Round((schemeptr - 1) * 100, 2); //percent
                            }
                            //////////////////////////////////////////////////////////////////////////////////////////////
                            if (!items.IsOffer)
                            {
                                /// Dream Point Logic && Margin Point relogic from 22April2019
                                int? MP, PP;
                                double xPoint = 0;

                                if (cart.SalesPersonId == 0)
                                {
                                    xPoint = xPointValue * 10; //Customer (0.2 * 10=1)
                                }
                                else
                                {
                                    xPoint = xPointValue * 10; //Salesman (0.2 * 10=1)
                                }

                                if (items.promoPerItems.Equals(null) && items.promoPerItems == null)
                                {
                                    PP = 0;
                                }
                                else
                                {
                                    PP = items.promoPerItems;
                                }
                                if (items.marginPoint.Equals(null) && items.promoPerItems == null)
                                {
                                    MP = 0;
                                }
                                else
                                {
                                    double WithTaxNetPurchasePrice = Math.Round(items.NetPurchasePrice * (1 + (items.TotalTaxPercentage / 100)), 3);//With tax
                                    MP = Convert.ToInt32((items.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                }
                                if (PP > 0 && MP > 0)
                                {
                                    int? PP_MP = PP + MP;
                                    items.dreamPoint = PP_MP;
                                }
                                else if (MP > 0)
                                {
                                    items.dreamPoint = MP;
                                }
                                else if (PP > 0)
                                {
                                    items.dreamPoint = PP;
                                }
                                else
                                {
                                    items.dreamPoint = 0;
                                }
                            }
                            od.marginPoint = items.dreamPoint * od.qty;//dp point multiplyby order qty
                            rewardpoint += od.marginPoint.GetValueOrDefault();


                            List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                            objclassificationDc = GetItemClassifications(items.ItemNumber, warehouse.WarehouseId);
                            od.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";

                            objOrderMaster.orderDetails.Add(od);
                            if (od.CessTaxAmount > 0)
                            {
                                finalCessTaxAmount = finalCessTaxAmount + od.CessTaxAmount;
                                finalTaxAmount = finalTaxAmount + od.TaxAmmount + od.CessTaxAmount;
                            }
                            else
                            {
                                finalTaxAmount = finalTaxAmount + od.TaxAmmount;
                            }
                            finaltotal = finaltotal + od.TotalAmt;
                            finalSGSTTaxAmount = finalSGSTTaxAmount + od.SGSTTaxAmmount;
                            finalCGSTTaxAmount = finalCGSTTaxAmount + od.CGSTTaxAmmount;
                            finalGrossAmount = finalGrossAmount + od.TotalAmountAfterTaxDisc;
                            finalTotalTaxAmount = finalTotalTaxAmount + od.TotalAmountAfterTaxDisc;
                            //If there is any offer then it act as item but all thing will be 0
                            if (i.IsOffer == true && i.FreeItemId > 0 && i.FreeItemqty > 0)
                            {
                                //When there is a free item then we add this item in order detail
                                //Calculate its unit price as 0.
                                ItemMaster Freeitem = FreeitemsList.Where(x => x.ItemId == i.FreeItemId).FirstOrDefault();
                                var freeItemOffer = OfferDb.FirstOrDefault(x => items.OfferId == x.OfferId && x.WarehouseId == cust.Warehouseid);

                                if (freeItemOffer == null || Freeitem == null)
                                {
                                    i.IsSuccess = false;
                                    i.Message = "Item is not found.";
                                }
                                else
                                {
                                    if (Freeitem.Deleted || freeItemOffer.start > indianTime || freeItemOffer.end < indianTime || !freeItemOffer.IsActive)
                                    {
                                        i.IsSuccess = false;
                                        i.Message = "Free Item expired.";
                                    } // Also check stock
                                    else
                                    {
                                        int? FreeOrderqty = i.FreeItemqty;
                                        if (freeItemOffer.QtyAvaiable < FreeOrderqty)
                                        {
                                            i.IsSuccess = false;
                                            i.Message = "Free Item expired.";
                                        }

                                        #region 8dec2021 freebies code
                                        //else if (!freeItemOffer.IsDispatchedFreeStock)
                                        //{
                                        //    //to consume qty of freebiese if stock hit from currentstock in offer

                                        //    var freelimit = itemLimits.FirstOrDefault(x => x.ItemNumber == Freeitem.ItemNumber && x.ItemMultiMRPId == Freeitem.ItemMultiMRPId);

                                        //    if (Freeitem.ItemId == items.ItemId)
                                        //    {
                                        //        if (freelimit != null && (freelimit.ItemlimitQty - i.qty) < FreeOrderqty)
                                        //        {
                                        //            i.IsSuccess = false;
                                        //            i.Message = "Free Item expired";
                                        //            //int maxMainItemqty = freelimit.ItemlimitQty / freeItemOffer.NoOffreeQuantity;
                                        //            //i.IsSuccess = false;
                                        //            //i.Message = "You Can't purchase more than " + maxMainItemqty + " qty for main item.";
                                        //            //if (maxMainItemqty == 1 || maxMainItemqty == 0) { ExpireofferId.Add(i.OfferId); }
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        if (freelimit != null && (freelimit.ItemlimitQty) < FreeOrderqty)
                                        //        {
                                        //            i.IsSuccess = false;
                                        //            i.Message = "Free Item expired";

                                        //            //int maxMainItemqty = freelimit.ItemlimitQty / freeItemOffer.NoOffreeQuantity;
                                        //            //i.IsSuccess = false;
                                        //            //i.Message = "You Can't purchase more than " + maxMainItemqty + " qty for main item.";
                                        //            //if (maxMainItemqty == 1 || maxMainItemqty == 0) { ExpireofferId.Add(i.OfferId); }
                                        //        }
                                        //    }
                                        //}
                                        #endregion
                                        if (i.IsSuccess)
                                        {

                                            OrderDetails od1 = new OrderDetails();
                                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid))
                                            {
                                                var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid);
                                                od1.StoreId = store.StoreId;

                                                if (CustomerChannels != null && CustomerChannels.Any(x => x.StoreId == od1.StoreId))
                                                    od1.ChannelMasterId = CustomerChannels.FirstOrDefault(x => x.StoreId == store.StoreId).ChannelMasterId;

                                                if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId) && CustomerChannels != null)
                                                {
                                                    if (CustomerChannels.Any(x => x.StoreId == od1.StoreId))
                                                    {
                                                        var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId && a.ChannelMasterId == od1.ChannelMasterId);
                                                        if (clusterStoreExecutiveDc != null)
                                                        {
                                                            od1.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                                            od1.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                                        }

                                                    }

                                                }
                                            }
                                            else
                                            {
                                                od1.StoreId = 0;
                                                od1.ExecutiveId = 0;
                                                od1.ExecutiveName = "";
                                            }
                                            od1.CustomerId = cust.CustomerId;
                                            od1.CustomerName = cust.Name;
                                            od1.CityId = cust.Cityid;
                                            od1.Mobile = cust.Mobile;
                                            od1.OrderDate = indianTime;
                                            od1.Status = cust.Active ? "Pending" : "Inactive";
                                            od1.CompanyId = warehouse.CompanyId;
                                            od1.WarehouseId = warehouse.WarehouseId;
                                            od1.WarehouseName = warehouse.WarehouseName;
                                            od1.NetPurchasePrice = Freeitem.NetPurchasePrice + ((Freeitem.NetPurchasePrice * Freeitem.TotalTaxPercentage) / 100);
                                            od1.ItemId = Freeitem.ItemId;
                                            od1.ItemMultiMRPId = Freeitem.ItemMultiMRPId;
                                            od1.Itempic = Freeitem.LogoUrl;
                                            od1.itemname = Freeitem.itemname;
                                            od1.SupplierName = Freeitem.SupplierName;
                                            od1.SellingUnitName = Freeitem.SellingUnitName;
                                            od1.CategoryName = Freeitem.CategoryName;
                                            od1.SubsubcategoryName = Freeitem.SubsubcategoryName;
                                            od1.SubcategoryName = Freeitem.SubcategoryName;
                                            od1.SellingSku = Freeitem.SellingSku;
                                            od1.City = Freeitem.CityName;
                                            od1.itemcode = Freeitem.itemcode;
                                            od1.HSNCode = Freeitem.HSNCode;
                                            od1.itemNumber = Freeitem.Number;
                                            od1.Barcode = Freeitem.itemcode;
                                            od1.MinOrderQty = 1;
                                            od1.UnitPrice = 0.0001;
                                            od1.price = Freeitem.price;
                                            od1.MinOrderQtyPrice = (od1.MinOrderQty * od1.UnitPrice);
                                            od1.qty = Convert.ToInt32(i.FreeItemqty);
                                            od1.Noqty = od1.qty;
                                            od1.SizePerUnit = items.SizePerUnit;
                                            od1.TaxPercentage = Freeitem.TotalTaxPercentage;
                                            od1.IsFreeItem = true;
                                            od1.FreeWithParentItemId = i.ItemId;
                                            od1.IsDispatchedFreeStock = freeItemOffer.IsDispatchedFreeStock;//true mean stock hit from Freestock
                                            od1.CreatedDate = indianTime;
                                            od1.UpdatedDate = indianTime;
                                            od1.Deleted = false;
                                            od1.marginPoint = 0;
                                            od1.ActualUnitPrice = Freeitem.UnitPrice;
                                            var freeschemeptr = itemPTR.Any(y => y.ItemMultiMRPId == Freeitem.ItemMultiMRPId) ? itemPTR.FirstOrDefault(y => y.ItemMultiMRPId == Freeitem.ItemMultiMRPId).PTR : 0;
                                            if (freeschemeptr > 0)
                                            {
                                                od1.PTR = Math.Round((freeschemeptr - 1) * 100, 2); //percent
                                            }
                                            if (od1.TaxPercentage >= 0)
                                            {
                                                od1.SGSTTaxPercentage = od1.TaxPercentage / 2;
                                                od1.CGSTTaxPercentage = od1.TaxPercentage / 2;
                                            }
                                            od1.Noqty = od1.qty; // for total qty (no of items)    
                                            od1.TotalAmt = System.Math.Round(od1.UnitPrice * od1.qty, 2);

                                            if (Freeitem.TotalCessPercentage > 0)
                                            {
                                                od1.TotalCessPercentage = Freeitem.TotalCessPercentage;
                                                double tempPercentagge = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;

                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge / 100)) / 100;


                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                                od1.CessTaxAmount = (od1.AmtWithoutAfterTaxDisc * od1.TotalCessPercentage) / 100;
                                            }


                                            double tempPercentagge2f = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;

                                            od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge2f / 100)) / 100;
                                            od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                            od1.TaxAmmount = (od1.AmtWithoutAfterTaxDisc * od1.TaxPercentage) / 100;
                                            if (od1.TaxAmmount >= 0)
                                            {
                                                od1.SGSTTaxAmmount = od1.TaxAmmount / 2;
                                                od1.CGSTTaxAmmount = od1.TaxAmmount / 2;
                                            }
                                            //for cess
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                double tempPercentagge3 = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;
                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.CessTaxAmount + od1.TaxAmmount;
                                            }
                                            else
                                            {
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.TaxAmmount;
                                            }
                                            od1.DiscountPercentage = 0;// 
                                            od1.DiscountAmmount = 0;// 

                                            od1.NetAmtAfterDis = (od1.NetAmmount - od1.DiscountAmmount);
                                            od1.Purchaseprice = 0;

                                            objclassificationDc = GetItemClassifications(Freeitem.ItemNumber, warehouse.WarehouseId);
                                            od1.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                            objOrderMaster.orderDetails.Add(od1);
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                finalCessTaxAmount = finalCessTaxAmount + od1.CessTaxAmount;
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount + od1.CessTaxAmount;
                                            }
                                            else
                                            {
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount;
                                            }
                                            finaltotal = finaltotal + od1.TotalAmt;
                                            finalSGSTTaxAmount = finalSGSTTaxAmount + od1.SGSTTaxAmmount;
                                            finalCGSTTaxAmount = finalCGSTTaxAmount + od1.CGSTTaxAmmount;
                                            finalGrossAmount = finalGrossAmount + od1.TotalAmountAfterTaxDisc;
                                            finalTotalTaxAmount = finalTotalTaxAmount + od1.TotalAmountAfterTaxDisc;

                                            //od1.CustomerId = cust.CustomerId;
                                            //od1.CustomerName = cust.Name;
                                            //od1.CityId = cust.Cityid;
                                            //od1.Mobile = cust.Mobile;
                                            //od1.OrderDate = indianTime;
                                            //od1.Status = cust.Active ? "Pending" : "Inactive";
                                            //od1.CompanyId = warehouse.CompanyId;
                                            //od1.WarehouseId = warehouse.WarehouseId;
                                            //od1.WarehouseName = warehouse.WarehouseName;
                                            //od1.NetPurchasePrice = Freeitem.NetPurchasePrice + ((Freeitem.NetPurchasePrice * Freeitem.TotalTaxPercentage) / 100);
                                            //od1.ItemId = Freeitem.ItemId;
                                            //od1.ItemMultiMRPId = Freeitem.ItemMultiMRPId;
                                            //od1.Itempic = Freeitem.LogoUrl;
                                            //od1.itemname = Freeitem.itemname;
                                            //od1.SupplierName = Freeitem.SupplierName;
                                            //od1.SellingUnitName = Freeitem.SellingUnitName;
                                            //od1.CategoryName = Freeitem.CategoryName;
                                            //od1.SubsubcategoryName = Freeitem.SubsubcategoryName;
                                            //od1.SubcategoryName = Freeitem.SubcategoryName;
                                            //od1.SellingSku = Freeitem.SellingSku;
                                            //od1.City = Freeitem.CityName;
                                            //od1.itemcode = Freeitem.itemcode;
                                            //od1.HSNCode = Freeitem.HSNCode;
                                            //od1.itemNumber = Freeitem.Number;
                                            //od1.IsFreeItem = true;
                                            //od1.FreeWithParentItemId = i.ItemId;
                                            //od1.IsDispatchedFreeStock = OfferDb.SingleOrDefault(x => x.OfferId == i.OfferId).IsDispatchedFreeStock;//true mean stock hit from Freestock
                                            //od1.UnitPrice = 0.01;
                                            //od1.price = Freeitem.price;
                                            //od1.MinOrderQty = 0;
                                            //od1.MinOrderQtyPrice = 0;
                                            //od1.qty = Convert.ToInt32(i.FreeItemqty);
                                            //od1.SizePerUnit = 0;
                                            //od1.TaxPercentage = 0;
                                            //od1.SGSTTaxPercentage = 0;
                                            //od1.CGSTTaxPercentage = 0;
                                            //od1.Noqty = od1.qty; // for total qty (no of items)    
                                            //od1.TotalAmt = 0;

                                            //od1.TotalCessPercentage = 0;
                                            //od1.AmtWithoutTaxDisc = 0;
                                            //od1.AmtWithoutAfterTaxDisc = 0;
                                            //od1.CessTaxAmount = 0;
                                            //tempPercentagge2 = 0;
                                            //od1.AmtWithoutTaxDisc = 0;
                                            //od1.AmtWithoutAfterTaxDisc = 0;
                                            //od1.TaxAmmount = 0;
                                            //if (od1.TaxAmmount >= 0)
                                            //{
                                            //    od1.SGSTTaxAmmount = 0;
                                            //    od1.CGSTTaxAmmount = 0;
                                            //}
                                            ////for cess
                                            //if (od1.CessTaxAmount > 0)
                                            //{
                                            //    //double temp = od.TaxPercentage + od.TotalCessPercentage;
                                            //    od1.AmtWithoutTaxDisc = 0;
                                            //    od1.AmtWithoutAfterTaxDisc = 0;
                                            //    od1.TotalAmountAfterTaxDisc = 0;
                                            //}
                                            //else
                                            //{
                                            //    od1.TotalAmountAfterTaxDisc = 0;
                                            //}
                                            //od1.DiscountPercentage = 0;
                                            //od1.DiscountAmmount = 0;
                                            //DiscountAmmount = 0;
                                            //NetAmtAfterDis = 0;
                                            //od1.NetAmtAfterDis = 0;
                                            //TaxAmmount = 0;
                                            //od1.Purchaseprice = 0;
                                            //od1.CreatedDate = indianTime;
                                            //od1.UpdatedDate = indianTime;
                                            //od1.Deleted = false;
                                            //od1.marginPoint = 0;
                                            //objOrderMaster.orderDetails.Add(od1);
                                        }

                                    }
                                }
                            }
                        }

                        items.IsOffer = isOffer;
                        items.UnitPrice = unitPrice;
                    }
                }
            }

            foreach (var i in placeOrderResponse.cart.itemDetails.Where(x => x.OfferCategory == 2).Select(x => x))
            {
                unitPrice = 0;
                //try
                //{

                i.IsSuccess = true;
                if (cartItemIds.Contains(i.ItemId))
                {
                    if (i.qty <= 0)
                    {

                        i.IsSuccess = false;
                        i.Message = "Quantity is 0.";
                    }
                    else if (i.qty != 0 && i.qty > 0)
                    {
                        var items = itemMastersList.Where(x => x.ItemId == i.ItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();
                        if (items == null)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item is not found.";
                        }
                        else
                        {
                            unitPrice = items.UnitPrice;
                            bool isOffer = items.IsOffer;
                            AuthContext context = new AuthContext();
                            BackendOrderController backendOrderController = new BackendOrderController();
                            double cprice = backendOrderController.GetConsumerPrice(context, items.ItemMultiMRPId, items.price, items.UnitPrice, warehouse.WarehouseId);
                            items.UnitPrice = SkCustomerType.GetPriceFromType(cust.CustomerType, items.UnitPrice
                                                                        , items.WholeSalePrice ?? 0
                                                                        , items.TradePrice ?? 0, cprice);
                            if (!items.active || items.Deleted)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item is not Active.";
                            }
                            if (supplierItemlist != null && supplierItemlist.Any(x => x == items.ItemMultiMRPId))
                            {
                                i.IsSuccess = false;
                                i.Message = "Supplier not eligible to purchase this item!!";
                            }
                            var limit = itemLimits.FirstOrDefault(x => x.ItemNumber == items.ItemNumber && x.ItemMultiMRPId == items.ItemMultiMRPId);

                            if (limit != null && limit.ItemlimitQty < i.qty)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item is not Active.";
                            }
                            var mod = Convert.ToDecimal(i.qty) % items.MinOrderQty;
                            if (mod != 0)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item qty is not multiples of min order qty.";
                            }
                            if (i.IsSuccess && i.UnitPrice != items.UnitPrice)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item Unit Price has changed.";
                                i.NewUnitPrice = items.UnitPrice;
                            }
                            else
                            {
                                OrderDetails od = new OrderDetails();
                                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid))
                                {
                                    var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid);
                                    od.StoreId = store.StoreId;
                                    if (CustomerChannels != null && CustomerChannels.Any(x => x.StoreId == od.StoreId))
                                        od.ChannelMasterId = CustomerChannels.FirstOrDefault(x => x.StoreId == store.StoreId).ChannelMasterId;
                                    if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId) && CustomerChannels != null)
                                    {
                                        if (CustomerChannels.Any(x => x.StoreId == od.StoreId))
                                        {
                                            var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId && a.ChannelMasterId == od.ChannelMasterId);
                                            if (clusterStoreExecutiveDc != null)
                                            {
                                                od.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                                od.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                            }

                                        }

                                    }
                                }
                                else
                                {
                                    od.StoreId = 0;
                                    od.ExecutiveId = 0;
                                    od.ExecutiveName = "";
                                }
                                od.CustomerId = cust.CustomerId;
                                od.CustomerName = cust.Name;
                                od.CityId = cust.Cityid;
                                od.Mobile = cust.Mobile;
                                od.OrderDate = indianTime;
                                od.Status = cust.Active ? "Pending" : "Inactive";
                                od.CompanyId = warehouse.CompanyId;
                                od.WarehouseId = warehouse.WarehouseId;
                                od.WarehouseName = warehouse.WarehouseName;
                                od.NetPurchasePrice = items.NetPurchasePrice + ((items.NetPurchasePrice * items.TotalTaxPercentage) / 100);
                                od.ItemId = items.ItemId;
                                od.ItemMultiMRPId = items.ItemMultiMRPId;
                                od.Itempic = items.LogoUrl;
                                od.itemname = items.itemname;
                                od.SupplierName = items.SupplierName;
                                od.SellingUnitName = items.SellingUnitName;
                                od.CategoryName = items.CategoryName;
                                od.SubsubcategoryName = items.SubsubcategoryName;
                                od.SubcategoryName = items.SubcategoryName;
                                od.SellingSku = items.SellingSku;
                                od.City = items.CityName;
                                od.itemcode = items.itemcode;
                                od.HSNCode = items.HSNCode;
                                od.itemNumber = items.Number;
                                od.Barcode = items.itemcode;

                                od.UnitPrice = items.FlashDealSpecialPrice ?? items.UnitPrice;
                                od.ActualUnitPrice = items.UnitPrice;
                                var schemeptr = itemPTR.Any(y => y.ItemMultiMRPId == items.ItemMultiMRPId) ? itemPTR.FirstOrDefault(y => y.ItemMultiMRPId == items.ItemMultiMRPId).PTR : 0;
                                if (schemeptr > 0)
                                {
                                    od.PTR = Math.Round((schemeptr - 1) * 100, 2); //percent
                                }
                                //If OfferCategory is 2 then it is a flash deal then We Decrease the Quantity from item master and apphomeitem

                                od.price = items.price;
                                od.MinOrderQty = items.MinOrderQty;
                                od.MinOrderQtyPrice = (od.MinOrderQty * items.UnitPrice);
                                od.qty = Convert.ToInt32(i.qty);
                                od.SizePerUnit = items.SizePerUnit;
                                od.TaxPercentage = items.TotalTaxPercentage;
                                if (od.TaxPercentage >= 0)
                                {
                                    od.SGSTTaxPercentage = od.TaxPercentage / 2;
                                    od.CGSTTaxPercentage = od.TaxPercentage / 2;
                                }
                                od.Noqty = od.qty; // for total qty (no of items)    
                                od.TotalAmt = System.Math.Round(od.UnitPrice * od.qty, 2);

                                if (items.TotalCessPercentage > 0)
                                {
                                    od.TotalCessPercentage = items.TotalCessPercentage;
                                    double tempPercentagge = items.TotalCessPercentage + items.TotalTaxPercentage;

                                    od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge / 100)) / 100;


                                    od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                    od.CessTaxAmount = (od.AmtWithoutAfterTaxDisc * od.TotalCessPercentage) / 100;
                                }


                                double tempPercentagge2 = items.TotalCessPercentage + items.TotalTaxPercentage;

                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge2 / 100)) / 100;
                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.TaxAmmount = (od.AmtWithoutAfterTaxDisc * od.TaxPercentage) / 100;
                                if (od.TaxAmmount >= 0)
                                {
                                    od.SGSTTaxAmmount = od.TaxAmmount / 2;
                                    od.CGSTTaxAmmount = od.TaxAmmount / 2;
                                }
                                //for cess
                                if (od.CessTaxAmount > 0)
                                {
                                    double tempPercentagge3 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                    //double temp = od.TaxPercentage + od.TotalCessPercentage;
                                    od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                    od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                    od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.CessTaxAmount + od.TaxAmmount;
                                }
                                else
                                {
                                    od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.TaxAmmount;
                                }
                                od.DiscountPercentage = 0;// items.PramotionalDiscount;
                                od.DiscountAmmount = 0;// (od.NetAmmount * items.PramotionalDiscount) / 100;
                                double DiscountAmmount = od.DiscountAmmount;
                                double NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                                od.NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                                double TaxAmmount = od.TaxAmmount;
                                od.Purchaseprice = items.PurchasePrice;
                                od.CreatedDate = indianTime;
                                od.UpdatedDate = indianTime;
                                od.Deleted = false;

                                //////////////////////////////////////////////////////////////////////////////////////////////
                                if (!items.IsOffer)
                                {
                                    /// Dream Point Logic && Margin Point relogic from 22April2019
                                    int? MP, PP;
                                    double xPoint = 0;

                                    if (cart.SalesPersonId == 0)
                                    {
                                        xPoint = xPointValue * 10; //Customer (0.2 * 10=1)
                                    }
                                    else
                                    {
                                        xPoint = xPointValue * 10; //Salesman (0.2 * 10=1)
                                    }

                                    if (items.promoPerItems.Equals(null) && items.promoPerItems == null)
                                    {
                                        PP = 0;
                                    }
                                    else
                                    {
                                        PP = items.promoPerItems;
                                    }
                                    if (items.marginPoint.Equals(null) && items.promoPerItems == null)
                                    {
                                        MP = 0;
                                    }
                                    else
                                    {
                                        double WithTaxNetPurchasePrice = Math.Round(items.NetPurchasePrice * (1 + (items.TotalTaxPercentage / 100)), 3);//With tax
                                        MP = Convert.ToInt32((items.UnitPrice - WithTaxNetPurchasePrice) * xPoint); // (UnitPrice-NPP withtax) * By xpoint 
                                    }
                                    if (PP > 0 && MP > 0)
                                    {
                                        int? PP_MP = PP + MP;
                                        items.dreamPoint = PP_MP;
                                    }
                                    else if (MP > 0)
                                    {
                                        items.dreamPoint = MP;
                                    }
                                    else if (PP > 0)
                                    {
                                        items.dreamPoint = PP;
                                    }
                                    else
                                    {
                                        items.dreamPoint = 0;
                                    }
                                }
                                od.marginPoint = items.dreamPoint * od.qty;//dp point multiplyby order qty
                                rewardpoint += od.marginPoint.GetValueOrDefault();
                                List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                                objclassificationDc = GetItemClassifications(items.ItemNumber, warehouse.WarehouseId);
                                od.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                objOrderMaster.orderDetails.Add(od);
                                if (od.CessTaxAmount > 0)
                                {
                                    finalCessTaxAmount = finalCessTaxAmount + od.CessTaxAmount;
                                    finalTaxAmount = finalTaxAmount + od.TaxAmmount + od.CessTaxAmount;
                                }
                                else
                                {
                                    finalTaxAmount = finalTaxAmount + od.TaxAmmount;
                                }
                                finaltotal = finaltotal + od.TotalAmt;
                                finalSGSTTaxAmount = finalSGSTTaxAmount + od.SGSTTaxAmmount;
                                finalCGSTTaxAmount = finalCGSTTaxAmount + od.CGSTTaxAmmount;
                                finalGrossAmount = finalGrossAmount + od.TotalAmountAfterTaxDisc;
                                finalTotalTaxAmount = finalTotalTaxAmount + od.TotalAmountAfterTaxDisc;

                            }

                            items.IsOffer = isOffer;
                            items.UnitPrice = unitPrice;
                        }

                    }
                }
                else
                {
                    i.IsSuccess = false;
                    i.Message = "Flash Deal Expired!";
                }
            }


            if (!string.IsNullOrEmpty(cart.BillDiscountOfferId))
            {
                List<int> billdiscountofferids = cart.BillDiscountOfferId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                List<Offer> Offers = OfferDb.Where(x => billdiscountofferids.Contains(x.OfferId) && x.IsDeleted == false && x.IsActive == true && x.end > indianTime).Include(x => x.OfferItemsBillDiscounts).Include(x => x.BillDiscountOfferSections).Include(x => x.OfferBillDiscountRequiredItems).Include(x => x.OfferLineItemValues).ToList();
                List<BillDiscount> offerbilldiscounts = null;
                if (Offers != null && Offers.Count > 0)
                {
                    if (Offers.Any(x => !billdiscountofferids.Contains(x.OfferId)))
                    {
                        List<int> offerids = billdiscountofferids.Where(y => !Offers.Select(x => x.OfferId).Contains(y)).ToList();
                        List<string> offernames = Offers.Where(x => offerids.Contains(x.OfferId)).Select(x => x.OfferName).ToList();
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "following offer expired :" + string.Join(",", offernames);
                        return placeOrderResponse;
                    }

                    if (Offers.Count > 1 && Offers.Any(x => !x.IsUseOtherOffer))
                    {
                        var offernames = Offers.Where(x => !x.IsUseOtherOffer).Select(x => x.OfferName).ToList();
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "following offer can't use with other offers :" + string.Join(",", offernames);
                        return placeOrderResponse;
                    }


                    if (Offers.Count > 0)
                    {
                        offerbilldiscounts = BillDiscountDb.Where(x => billdiscountofferids.Contains(x.OfferId) && x.CustomerId == cust.CustomerId /*&& x.OrderId > 0 */&& x.IsActive).ToList();
                        foreach (var item in Offers)
                        {
                            if (!item.OfferUseCount.HasValue)
                                item.OfferUseCount = 1000;

                            if (!item.IsMultiTimeUse && offerbilldiscounts.Count > 0 && offerbilldiscounts.All(x => x.OfferId == item.OfferId && x.OrderId > 0))
                            {
                                var offernames = Offers.Where(x => !x.IsUseOtherOffer).Select(x => x.OfferName).ToList();
                                placeOrderResponse.IsSuccess = false;
                                placeOrderResponse.Message = "following offer can't use multiple :" + string.Join(",", offernames);
                                return placeOrderResponse;
                            }
                            if (item.IsMultiTimeUse && !item.IsCRMOffer && offerbilldiscounts.Count > 0 && offerbilldiscounts.Count(x => x.OfferId == item.OfferId) >= item.OfferUseCount.Value)
                            {
                                var offernames = Offers.Where(x => !x.IsUseOtherOffer).Select(x => x.OfferName).ToList();
                                placeOrderResponse.IsSuccess = false;
                                placeOrderResponse.Message = "following offer can't use more then " + item.OfferUseCount.ToString() + " :" + string.Join(",", offernames);
                                return placeOrderResponse;
                            }
                        }
                    }
                }
                else
                {
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = "following offer expired :" + string.Join(",", billdiscountofferids);
                    return placeOrderResponse;
                }

                if (Offers.Any(x => x.OfferOn == "ScratchBillDiscount"))
                {
                    string offeralreadyuse = "";
                    foreach (var item in Offers.Where(x => x.OfferOn == "ScratchBillDiscount"))
                    {
                        if (BillDiscountDb.All(x => x.OfferId == item.OfferId && x.CustomerId == cust.CustomerId && x.OrderId > 0))
                        {
                            if (string.IsNullOrEmpty(offeralreadyuse))
                                offeralreadyuse = item.OfferName;
                            else
                                offeralreadyuse += "," + item.OfferName;
                        }
                    }

                    if (!string.IsNullOrEmpty(offeralreadyuse))
                    {
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "You have already used following scratch card " + offeralreadyuse;
                        return placeOrderResponse;
                    }
                }

                if (placeOrderResponse.cart.itemDetails.All(x => x.IsSuccess) && placeOrderResponse.IsSuccess)
                {
                    //Due to assign cart offer and category on item
                    var PreItem = itemMastersList.Select(x => new { x.ItemId, x.IsOffer, x.OfferCategory }).ToList();
                    foreach (var item in itemMastersList)
                    {
                        var cartitem = placeOrderResponse.cart.itemDetails.FirstOrDefault(p => p.ItemId == item.ItemId);
                        if (cartitem != null)
                        {
                            item.IsOffer = cartitem.IsOffer;
                            item.OfferCategory = cartitem.OfferCategory;
                        }
                    }

                    #region BillDiscount Free Item
                    var freeItemofferId = Offers.Where(x => x.BillDiscountOfferOn == "FreeItem").Select(x => x.OfferId);

                    List<BillDiscountFreeItem> BillDiscountFreeItems = new List<BillDiscountFreeItem>();
                    List<ItemMaster> BillDiscountOfferFreeitems = new List<ItemMaster>();
                    if (freeItemofferId != null && freeItemofferId.Any())
                    {
                        BillDiscountFreeItems = BillDiscountFreeItem.Where(x => freeItemofferId.Contains(x.offerId) && x.RemainingOfferStockQty < x.OfferStockQty).ToList();
                        if (BillDiscountFreeItems != null && BillDiscountFreeItems.Any())
                        {
                            var freeitemids = BillDiscountFreeItems.Select(x => x.ItemId).Distinct().ToList();
                            BillDiscountOfferFreeitems = itemMasters.Where(x => freeitemids.Contains(x.ItemId)).ToList();
                        }
                    }
                    #endregion

                    foreach (var Offer in Offers)
                    {
                        var BillDiscount = new BillDiscount();
                        BillDiscount.CustomerId = cust.CustomerId;
                        BillDiscount.OfferId = Offer.OfferId;
                        BillDiscount.BillDiscountType = Offer.OfferOn;
                        double totalamount = 0;
                        var OrderLineItems = 0;
                        //if (Offer.OfferOn != "ScratchBillDiscount")
                        //{
                        var CItemIds = itemMastersList.Select(x => x.ItemId).ToList();
                        if (!string.IsNullOrEmpty(Offer.IncentiveClassification))
                        {
                            var classifications = Offer.IncentiveClassification.Split(',').ToList();
                            CItemIds = itemMastersList.Where(x => classifications.Contains(x.IncentiveClassification)).Select(x => x.ItemId).ToList();
                        }
                        List<int> Itemids = new List<int>();
                        if (Offer.BillDiscountType == "category" && Offer.BillDiscountOfferSections.Any())
                        {
                            //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                            //var ids = Offer.BillDiscountOfferSections.Select(x => x.ObjId).ToList();


                            var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                            var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();
                            var ids = Offer.BillDiscountOfferSections.Where(x => x.IsInclude).Select(x => x.ObjId).ToList();
                            var notids = Offer.BillDiscountOfferSections.Where(x => !x.IsInclude).Select(x => x.ObjId).ToList();

                            if (cart.APPType == "SalesApp")
                            {
                                Itemids = itemMastersList.Where(x =>
                                (!ids.Any() || ids.Contains(x.Categoryid)) && !notids.Contains(x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                ).Select(x => x.ItemId).ToList();
                            }
                            else
                            {
                                Itemids = itemMastersList.Where(x => (!ids.Any() || ids.Contains(x.Categoryid)) && !notids.Contains(x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                            }
                            if (CItemIds.Any())
                            {
                                Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && Itemids.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                            }
                            totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                            OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                            var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                            if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                            {
                                List<int> lineItemValueItemExists = new List<int>();
                                foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                {
                                    int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                    if (ItemId == 0)
                                    {
                                        totalamount = 0;
                                        break;
                                    }
                                    else
                                        lineItemValueItemExists.Add(ItemId);
                                }
                            }

                        }
                        else if (Offer.BillDiscountType == "subcategory" && Offer.BillDiscountOfferSections.Any())
                        {
                            AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                            List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);

                            //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                            var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                            var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                            if (cart.APPType == "SalesApp")
                            {
                                Itemids = itemMastersList.Where(x =>
                                 (!offerCatSubCats.Where(y => y.IsInclude).Any() || offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid))
                                 && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                ).Select(x => x.ItemId).ToList();
                            }
                            else
                            {
                                Itemids = itemMastersList.Where(x =>
                                (!offerCatSubCats.Where(y => y.IsInclude).Any() || offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid))
                                 && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                            }
                            if (CItemIds.Any())
                            {
                                Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && Itemids.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                            }
                            totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                            OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                            var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                            if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                            {
                                List<int> lineItemValueItemExists = new List<int>();
                                foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                {
                                    int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                    if (ItemId == 0)
                                    {
                                        totalamount = 0;
                                        break;
                                    }
                                    else
                                        lineItemValueItemExists.Add(ItemId);
                                }
                            }
                        }
                        else if (Offer.BillDiscountType == "brand" && Offer.BillDiscountOfferSections.Any())
                        {
                            // var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                            var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                            var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                            AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                            List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);
                            if (cart.APPType == "SalesApp")
                            {
                                Itemids = itemMastersList.Where(x =>
                                (
                                 !offerCatSubCats.Where(y => y.IsInclude).Any() ||
                                offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                )
                                && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                ).Select(x => x.ItemId).ToList();
                            }
                            else
                            {
                                Itemids = itemMastersList.Where(x =>
                                (
                                 !offerCatSubCats.Where(y => y.IsInclude).Any() ||
                                offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                )
                                && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                            }
                            if (CItemIds.Any())
                            {
                                Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && Itemids.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                            }
                            totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                            OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                            var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                            if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                            {
                                List<int> lineItemValueItemExists = new List<int>();
                                foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                {
                                    int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                    if (ItemId == 0)
                                    {
                                        totalamount = 0;
                                        break;
                                    }
                                    else
                                        lineItemValueItemExists.Add(ItemId);
                                }
                            }
                        }
                        else if (Offer.BillDiscountType == "items")
                        {
                            // var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                            var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                            var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                            //if (Offer.OfferItemsBillDiscounts.FirstOrDefault().IsInclude)
                            //{
                            //    Itemids = itemMastersList.Where(x => iteminofferlist.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                            //}

                            Itemids = itemMastersList.Where(x => (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                               && !itemoutofferlist.Contains(x.ItemId)
                               ).Select(x => x.ItemId).ToList();

                            List<int> incluseItemIds = new List<int>();
                            if (cart.APPType == "SalesApp")
                            {
                                incluseItemIds = itemMastersList.Select(x => x.ItemId).ToList();
                            }
                            else
                            {
                                incluseItemIds = itemMastersList.Where(x => !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                            }
                            if (CItemIds.Any())
                            {
                                Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && Itemids.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                            }
                            totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                            OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                            var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).ToList() : null;

                            if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                            {
                                List<int> lineItemValueItemExists = new List<int>();
                                foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                {
                                    int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                    if (ItemId == 0)
                                    {
                                        totalamount = 0;
                                        break;
                                    }
                                    else
                                        lineItemValueItemExists.Add(ItemId);
                                }
                            }
                        }
                        else
                        {
                            var catIdoutofferlist = Offer.BillDiscountOfferSections.Where(x => !x.IsInclude).Select(x => x.ObjId).ToList();
                            var catIdinofferlist = Offer.BillDiscountOfferSections.Where(x => x.IsInclude).Select(x => x.ObjId).ToList();

                            // var ids = Offer.BillDiscountOfferSections.Select(x => x.ObjId).ToList();
                            //  Itemids = itemMastersList.Where(x => ids.Contains(x.Categoryid)).Select(x => x.ItemId).ToList();
                            Itemids = itemMastersList.Where(x => (catIdinofferlist.Any() || catIdinofferlist.Contains(x.Categoryid))
                            && !catIdoutofferlist.Contains(x.Categoryid)
                            ).Select(x => x.ItemId).ToList();

                            List<int> incluseItemIds = new List<int>();
                            if (cart.APPType == "SalesApp")
                            {
                                incluseItemIds = itemMastersList.Select(x => x.ItemId).ToList();
                            }
                            else
                            {
                                incluseItemIds = itemMastersList.Where(x => !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                            }

                            if (catIdoutofferlist.Any())
                                incluseItemIds = itemMastersList.Where(x => !catIdoutofferlist.Contains(x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                            if (CItemIds.Any())
                            {
                                incluseItemIds = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)
                                  ).Select(x => x.ItemId).ToList();
                            }
                            totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : objOrderMaster.orderDetails.Where(x => incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice);
                            OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                            var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).ToList() : objOrderMaster.orderDetails.Where(x => incluseItemIds.Contains(x.ItemId)).ToList();

                            if (cartItems != null && Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                            {
                                List<int> lineItemValueItemExists = new List<int>();
                                foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                {
                                    int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                    if (ItemId == 0)
                                    {
                                        totalamount = 0;
                                        break;
                                    }
                                    else
                                        lineItemValueItemExists.Add(ItemId);
                                }
                            }
                        }


                        if (Offer.OfferBillDiscountRequiredItems != null && Offer.OfferBillDiscountRequiredItems.Any())
                        {
                            List<BillDiscountRequiredItemDc> BillDiscountRequiredItems = AgileObjects.AgileMapper.Mapper.Map(Offer.OfferBillDiscountRequiredItems).ToANew<List<BillDiscountRequiredItemDc>>();
                            if (BillDiscountRequiredItems.Any(x => x.ObjectType == "brand"))
                            {
                                var ids = BillDiscountRequiredItems.Where(x => x.ObjectType == "brand").SelectMany(x => x.ObjectId.Split(',').Select(y => Convert.ToInt32(y))).ToList();
                                AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                List<BrandCategorySubCategory> BrandCategorySubCategorys = manager.GetCatSubCatByMappingId(ids);
                                foreach (var item in BillDiscountRequiredItems.Where(x => x.ObjectType == "brand"))
                                {
                                    var mappingIds = item.ObjectId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                                    if (BrandCategorySubCategorys.Any(x => mappingIds.Contains(x.BrandCategoryMappingId)))
                                    {
                                        item.ObjectId = string.Join(",", BrandCategorySubCategorys.Where(x => mappingIds.Contains(x.BrandCategoryMappingId)).Select(y => y.SubsubCategoryid + " " + y.SubCategoryId + " " + y.Categoryid).ToList());
                                        //item.SubCategoryId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).SubCategoryId;
                                        //item.CategoryId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).Categoryid;
                                        //item.ObjectId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).SubsubCategoryid;

                                    }
                                }
                            }
                            var objectIds = BillDiscountRequiredItems.Where(x => x.ObjectType == "Item").SelectMany(x => x.ObjectId.Split(',').Select(z => Convert.ToInt32(z))).Distinct().ToList();

                            if (BillDiscountRequiredItems.Any(x => x.ObjectType == "brand"))
                            {
                                objectIds.AddRange(itemMastersList.Where(x => BillDiscountRequiredItems.Where(y => y.ObjectType == "brand").SelectMany(y => y.ObjectId.Split(',').Select(z => z)).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemMultiMRPId).ToList());
                            }
                            bool IsRequiredItemExists = true;
                            var cartrequiredItems = objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && objectIds.Contains(x.ItemMultiMRPId) && x.qty > 0);
                            foreach (var reqitem in BillDiscountRequiredItems)
                            {
                                if (reqitem.ObjectType == "Item")
                                {
                                    var mrpIds = reqitem.ObjectId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                                    var cartitem = cartrequiredItems.Where(x => mrpIds.Contains(x.ItemMultiMRPId));
                                    if (cartitem != null && cartitem.Any())
                                    {
                                        if (reqitem.ValueType.ToLower() == "qty" && reqitem.ObjectValue > cartitem.Sum(x => x.qty))
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }
                                        else if (reqitem.ValueType.ToLower() == "value" && reqitem.ObjectValue > cartitem.Sum(x => x.qty * x.UnitPrice))
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        IsRequiredItemExists = false;
                                        break;
                                    }
                                }
                                else if (reqitem.ObjectType == "brand")
                                {
                                    var objIds = reqitem.ObjectId.Split(',').Select(x => x).ToList();
                                    var multiMrpIds = itemMastersList.Where(x => objIds.Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemMultiMRPId).ToList();
                                    var cartitems = cartrequiredItems.Where(x => multiMrpIds.Contains(x.ItemMultiMRPId));
                                    if (cartitems != null && cartitems.Any())
                                    {
                                        if (reqitem.ValueType.ToLower() == "qty" && reqitem.ObjectValue > cartitems.Sum(x => x.qty))
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }
                                        else if (reqitem.ValueType.ToLower() == "value" && reqitem.ObjectValue > cartitems.Sum(x => x.qty * x.UnitPrice))
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        IsRequiredItemExists = false;
                                        break;
                                    }

                                }
                            }
                            if (!IsRequiredItemExists)
                            {
                                totalamount = 0;
                            }
                        }

                        double MaxBillAmount = Offer.MaxBillAmount;
                        double MinBillAmount = Offer.BillAmount;
                        if (Offer.OfferOn == "ScratchBillDiscount" && Offer.BillDiscountOfferOn == "DynamicAmount" && offerbilldiscounts.Any(x => x.OfferId == Offer.OfferId && x.OrderId == 0))
                        {
                            MaxBillAmount = offerbilldiscounts.Where(x => x.OfferId == Offer.OfferId && x.OrderId == 0).OrderBy(x => x.Id).FirstOrDefault().MaxOrderAmount;
                            MinBillAmount = offerbilldiscounts.Where(x => x.OfferId == Offer.OfferId && x.OrderId == 0).OrderBy(x => x.Id).FirstOrDefault().MinOrderAmount;
                        }

                        if (MaxBillAmount > 0 && totalamount > MaxBillAmount)
                        {
                            totalamount = Offer.MaxBillAmount;
                        }
                        else if (MinBillAmount > totalamount)
                        {
                            totalamount = 0;
                        }

                        if (Offer.LineItem > 0 && Offer.LineItem > OrderLineItems)
                        {
                            totalamount = 0;
                        }

                        #region comment
                        //if (Offer.OfferOn == "ScratchBillDiscount")
                        //{
                        //    var billdiscount = BillDiscountDb.FirstOrDefault(x => x.OfferId == Offer.OfferId && x.CustomerId == cust.CustomerId);
                        //    if (billdiscount != null && (Offer.BillDiscountOfferOn == "DynamicWalletPoint" || Offer.BillDiscountOfferOn == "DynamicAmount"))
                        //    {
                        //        Offer.BillDiscountWallet = billdiscount.BillDiscountTypeValue;
                        //    }
                        //}



                        //}
                        //else
                        //{
                        //    List<int> Itemids = new List<int>();
                        //    if (cart.APPType == "SalesApp")
                        //    {
                        //        Itemids = itemMastersList.Select(x => x.ItemId).ToList();
                        //    }
                        //    else
                        //    {
                        //        Itemids = itemMastersList.Where(x => !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                        //    }
                        //    totalamount = objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice);
                        //    var billdiscount = BillDiscountDb.FirstOrDefault(x => x.OfferId == Offer.OfferId && x.CustomerId == cust.CustomerId);

                        //    if (Offer.MaxBillAmount > 0 && totalamount > Offer.MaxBillAmount)
                        //    {
                        //        totalamount = Offer.MaxBillAmount;
                        //    }
                        //    else if (Offer.BillAmount > totalamount)
                        //    {
                        //        totalamount = 0;
                        //    }

                        //    if (billdiscount != null && Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                        //    {
                        //        Offer.BillDiscountWallet = billdiscount.BillDiscountTypeValue;
                        //    }
                        //}
                        #endregion

                        if (Offer.BillDiscountOfferOn == "Percentage")
                        {
                            BillDiscount.BillDiscountTypeValue = Offer.DiscountPercentage;
                            BillDiscount.BillDiscountAmount = totalamount * Offer.DiscountPercentage / 100;
                        }
                        else if (Offer.BillDiscountOfferOn == "FreeItem")
                        {
                            #region BillDiscount Free Item
                            BillDiscount.BillDiscountAmount = 0;
                            int FreeWithParentItemId = 0;
                            if (BillDiscountFreeItems.Any(x => x.offerId == Offer.OfferId))
                            {
                                int multiple = 1;
                                if (Offer.IsBillDiscountFreebiesItem)
                                {
                                    int billDisitemQtys = 0;
                                    string freeMainItemNumber = string.Empty;

                                    freeMainItemNumber = itemMasters.Where(x => x.ItemId == Offer.itemId).Select(x => x.Number).FirstOrDefault();
                                    billDisitemQtys = objOrderMaster.orderDetails.Where(x => x.itemNumber == freeMainItemNumber && (!x.OfferId.HasValue || x.OfferId <= 0)).Sum(x => x.qty);
                                    multiple = Convert.ToInt32(billDisitemQtys / Offer.MinOrderQuantity);
                                    FreeWithParentItemId = objOrderMaster.orderDetails.FirstOrDefault(x => x.itemNumber == freeMainItemNumber).ItemId;
                                    FreeQtyList.Add(new BillDiscountFreebiesItemQtyDC
                                    {
                                        Offerid = Offer.OfferId,
                                        BillDiscountItemQty = multiple,
                                        BillDiscountValueQty = 0
                                    });
                                }
                                else if (Offer.IsBillDiscountFreebiesValue)
                                {
                                    double billDisitemValue = 0;
                                    var offerId = new SqlParameter
                                    {
                                        ParameterName = "offerId",
                                        Value = Offer.OfferId
                                    };
                                    List<int> valueofferitemids = Database.SqlQuery<int>("exec GetOfferforbilldiscount  @offerId", offerId).ToList();
                                    if (valueofferitemids != null && valueofferitemids.Any())
                                    {
                                        billDisitemValue = objOrderMaster.orderDetails.Where(x => valueofferitemids.Contains(x.ItemId) && !x.IsFreeItem).Sum(x => x.qty * x.UnitPrice);
                                        if (billDisitemValue >= Offer.MaxBillAmount && Offer.MaxBillAmount > 0)
                                        {
                                            billDisitemValue = Offer.MaxBillAmount;
                                        }

                                        multiple = Convert.ToInt32(Convert.ToInt32(billDisitemValue) / Convert.ToInt32(Offer.BillAmount));
                                        FreeQtyList.Add(new BillDiscountFreebiesItemQtyDC
                                        {
                                            Offerid = Offer.OfferId,
                                            BillDiscountItemQty = 0,
                                            BillDiscountValueQty = multiple
                                        });

                                    }

                                }

                                var BillDiscountFreeItem = BillDiscountFreeItems.Where(x => x.offerId == Offer.OfferId).ToList();
                                if (BillDiscountFreeItem != null && BillDiscountFreeItem.Any())
                                {
                                    var freeItems = BillDiscountOfferFreeitems.Where(x => BillDiscountFreeItem.Select(y => y.ItemId).Contains(x.ItemId));
                                    if (freeItems != null && freeItems.Any())
                                    {
                                        OrderDetails od1 = null;
                                        foreach (var Freeitem in freeItems)
                                        {
                                            od1 = new OrderDetails();
                                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid))
                                            {
                                                var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid);
                                                od1.StoreId = store.StoreId;
                                                if (CustomerChannels != null && CustomerChannels.Any(x => x.StoreId == od1.StoreId))
                                                    od1.ChannelMasterId = CustomerChannels.FirstOrDefault(x => x.StoreId == store.StoreId).ChannelMasterId;
                                                if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId) && CustomerChannels != null)
                                                {
                                                    if (CustomerChannels.Any(x => x.StoreId == od1.StoreId))
                                                    {
                                                        var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId && a.ChannelMasterId == od1.ChannelMasterId);
                                                        if (clusterStoreExecutiveDc != null)
                                                        {
                                                            od1.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                                            od1.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                                        }

                                                    }

                                                }
                                            }
                                            else
                                            {
                                                od1.StoreId = 0;
                                                od1.ExecutiveId = 0;
                                                od1.ExecutiveName = "";
                                            }
                                            od1.OfferId = Offer.OfferId;
                                            od1.FreeWithParentItemId = FreeWithParentItemId;
                                            od1.CustomerId = cust.CustomerId;
                                            od1.CustomerName = cust.Name;
                                            od1.CityId = cust.Cityid;
                                            od1.Mobile = cust.Mobile;
                                            od1.OrderDate = indianTime;
                                            od1.Status = cust.Active ? "Pending" : "Inactive";
                                            od1.CompanyId = warehouse.CompanyId;
                                            od1.WarehouseId = warehouse.WarehouseId;
                                            od1.WarehouseName = warehouse.WarehouseName;
                                            od1.NetPurchasePrice = Freeitem.NetPurchasePrice + ((Freeitem.NetPurchasePrice * Freeitem.TotalTaxPercentage) / 100);
                                            od1.ItemId = Freeitem.ItemId;
                                            od1.ItemMultiMRPId = Freeitem.ItemMultiMRPId;
                                            od1.Itempic = Freeitem.LogoUrl;
                                            od1.itemname = Freeitem.itemname;
                                            od1.SupplierName = Freeitem.SupplierName;
                                            od1.SellingUnitName = Freeitem.SellingUnitName;
                                            od1.CategoryName = Freeitem.CategoryName;
                                            od1.SubsubcategoryName = Freeitem.SubsubcategoryName;
                                            od1.SubcategoryName = Freeitem.SubcategoryName;
                                            od1.SellingSku = Freeitem.SellingSku;
                                            od1.City = Freeitem.CityName;
                                            od1.itemcode = Freeitem.itemcode;
                                            od1.HSNCode = Freeitem.HSNCode;
                                            od1.itemNumber = Freeitem.Number;
                                            od1.ActualUnitPrice = Freeitem.UnitPrice;
                                            od1.IsFreeItem = true;
                                            od1.IsDispatchedFreeStock = BillDiscountFreeItem.FirstOrDefault(x => x.ItemId == Freeitem.ItemId).StockType == 2;//true mean stock hit from Freestock
                                            od1.UnitPrice = 0.0001;
                                            od1.price = Freeitem.price;
                                            //od1.MinOrderQty = 0;
                                            //od1.MinOrderQtyPrice = 0;
                                            od1.qty = multiple * Convert.ToInt32(BillDiscountFreeItem.FirstOrDefault(x => x.ItemId == Freeitem.ItemId).Qty);
                                            od1.SizePerUnit = 0; //Offer.IsBillDiscountFreebiesItem==true?Offer.OfferId:
                                            od1.TaxPercentage = Freeitem.TotalTaxPercentage;
                                            od1.SGSTTaxPercentage = 0;
                                            od1.CGSTTaxPercentage = 0;
                                            od1.Noqty = od1.qty; // for total qty (no of items)    
                                            od1.TotalAmt = 0;
                                            od1.TotalCessPercentage = 0;
                                            od1.AmtWithoutTaxDisc = 0;
                                            od1.AmtWithoutAfterTaxDisc = 0;
                                            od1.CessTaxAmount = 0;
                                            od1.AmtWithoutTaxDisc = 0;
                                            od1.AmtWithoutAfterTaxDisc = 0;
                                            od1.TaxAmmount = 0;

                                            od1.MinOrderQty = 1;
                                            od1.MinOrderQtyPrice = (od1.MinOrderQty * od1.UnitPrice);

                                            od1.DiscountPercentage = 0;
                                            od1.DiscountAmmount = 0;
                                            od1.NetAmtAfterDis = 0;
                                            od1.Purchaseprice = 0;
                                            od1.CreatedDate = indianTime;
                                            od1.UpdatedDate = indianTime;
                                            od1.Deleted = false;
                                            od1.marginPoint = 0;

                                            od1.TaxPercentage = Freeitem.TotalTaxPercentage;
                                            od1.TotalCessPercentage = Freeitem.TotalCessPercentage;

                                            if (od1.TaxPercentage >= 0)
                                            {
                                                od1.SGSTTaxPercentage = od1.TaxPercentage / 2;
                                                od1.CGSTTaxPercentage = od1.TaxPercentage / 2;
                                            }
                                            od1.Noqty = od1.qty; // for total qty (no of items)    
                                            od1.TotalAmt = System.Math.Round(od1.UnitPrice * od1.qty, 2);

                                            if (Freeitem.TotalCessPercentage > 0)
                                            {
                                                od1.TotalCessPercentage = Freeitem.TotalCessPercentage;
                                                double tempPercentagge = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;
                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge / 100)) / 100;
                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                                od1.CessTaxAmount = (od1.AmtWithoutAfterTaxDisc * od1.TotalCessPercentage) / 100;
                                            }
                                            double tempPercentagge2f = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;

                                            od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge2f / 100)) / 100;
                                            od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                            od1.TaxAmmount = (od1.AmtWithoutAfterTaxDisc * od1.TaxPercentage) / 100;
                                            if (od1.TaxAmmount >= 0)
                                            {
                                                od1.SGSTTaxAmmount = od1.TaxAmmount / 2;
                                                od1.CGSTTaxAmmount = od1.TaxAmmount / 2;
                                            }
                                            //for cess
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                double tempPercentagge3 = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;
                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.CessTaxAmount + od1.TaxAmmount;
                                            }
                                            else
                                            {
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.TaxAmmount;
                                            }
                                            od1.DiscountPercentage = 0;// 
                                            od1.DiscountAmmount = 0;// 

                                            od1.NetAmtAfterDis = (od1.NetAmmount - od1.DiscountAmmount);
                                            od1.Purchaseprice = 0;
                                            List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                                            objclassificationDc = GetItemClassifications(Freeitem.Number, warehouse.WarehouseId);
                                            od1.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                            objOrderMaster.orderDetails.Add(od1);
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                finalCessTaxAmount = finalCessTaxAmount + od1.CessTaxAmount;
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount + od1.CessTaxAmount;
                                            }
                                            else
                                            {
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount;
                                            }
                                            finaltotal = finaltotal + od1.TotalAmt;
                                            finalSGSTTaxAmount = finalSGSTTaxAmount + od1.SGSTTaxAmmount;
                                            finalCGSTTaxAmount = finalCGSTTaxAmount + od1.CGSTTaxAmmount;
                                            finalGrossAmount = finalGrossAmount + od1.TotalAmountAfterTaxDisc;
                                            finalTotalTaxAmount = finalTotalTaxAmount + od1.TotalAmountAfterTaxDisc;
                                            objOrderMaster.orderDetails.Add(od1);
                                        }
                                    }
                                }
                                //}

                            }
                            else
                            {

                                placeOrderResponse.IsSuccess = false;
                                placeOrderResponse.Message = Offer.OfferName + " Offer Expired.";
                                return placeOrderResponse;
                            }
                            #endregion

                        }
                        else if (Offer.BillDiscountOfferOn == "DynamicAmount")
                        {
                            BillDiscount.BillDiscountAmount = offerbilldiscounts.Where(x => x.OfferId == Offer.OfferId && x.OrderId == 0).OrderBy(x => x.Id).FirstOrDefault().BillDiscountAmount;
                            BillDiscount.BillDiscountTypeValue = BillDiscount.BillDiscountAmount;
                        }
                        else if (Offer.BillDiscountOfferOn == "DynamicWalletPoint")
                        {
                            BillDiscount.BillDiscountAmount = totalamount == 0 ? 0 : Convert.ToDouble((offerbilldiscounts.FirstOrDefault(x => x.OfferId == Offer.OfferId && x.OrderId == 0).BillDiscountTypeValue) / 10);
                        }
                        else
                        {
                            int WalletPoint = 0;
                            if (Offer.WalletType == "WalletPercentage")
                            {
                                WalletPoint = Convert.ToInt32(Math.Truncate(totalamount * ((Offer.BillDiscountWallet.HasValue ? Offer.BillDiscountWallet.Value : 0) / 100)));
                                WalletPoint = WalletPoint * 10;
                            }
                            else
                            {
                                WalletPoint = Convert.ToInt32(Offer.BillDiscountWallet.HasValue ? Offer.BillDiscountWallet.Value : 0);
                            }
                            if (Offer.ApplyOn == "PostOffer")
                            {
                                BillDiscount.BillDiscountTypeValue = WalletPoint;
                                BillDiscount.BillDiscountAmount = 0;
                                BillDiscount.IsUsedNextOrder = true;
                            }
                            else
                            {
                                BillDiscount.BillDiscountTypeValue = Offer.BillDiscountWallet;
                                BillDiscount.BillDiscountAmount = totalamount == 0 ? 0 : Convert.ToDouble(WalletPoint / 10);
                                BillDiscount.IsUsedNextOrder = false;
                            }
                        }
                        if (Offer.MaxDiscount > 0)
                        {
                            var walletmultipler = 1;

                            if (!string.IsNullOrEmpty(Offer.BillDiscountOfferOn) && (Offer.BillDiscountOfferOn != "Percentage" && Offer.BillDiscountOfferOn != "DynamicAmount"))
                            {
                                walletmultipler = 10;
                            }
                            if (Offer.BillDiscountOfferOn != "DynamicAmount")
                            {
                                if (Offer.MaxDiscount * walletmultipler < BillDiscount.BillDiscountAmount)
                                {
                                    BillDiscount.BillDiscountAmount = Offer.MaxDiscount * walletmultipler;
                                }
                                if (Offer.MaxDiscount * walletmultipler < BillDiscount.BillDiscountTypeValue)
                                {
                                    BillDiscount.BillDiscountTypeValue = Convert.ToInt32(Offer.MaxDiscount * walletmultipler);
                                }
                            }
                        }


                        //else
                        //{
                        //BillDiscount.BillDiscountTypeValue = Offer.BillDiscountWallet;
                        //    BillDiscount.BillDiscountAmount = totalamount == 0 ? 0 : Offer.BillDiscountWallet / 10;
                        //}
                        //if (Offer.MaxDiscount > 0 && Offer.MaxDiscount < BillDiscount.BillDiscountAmount)
                        //{
                        //    BillDiscount.BillDiscountAmount = Offer.MaxDiscount;
                        //}
                        BillDiscount.IsAddNextOrderWallet = false;
                        BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                        BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                        BillDiscount.CreatedDate = indianTime;
                        BillDiscount.ModifiedDate = indianTime;
                        BillDiscount.IsActive = Offer.IsActive;
                        BillDiscount.IsDeleted = false;
                        BillDiscount.CreatedBy = cust.CustomerId;
                        BillDiscount.ModifiedBy = cust.CustomerId;
                        BillDiscounts.Add(BillDiscount);
                    }

                    //Due to Re assign db offer and category on item                    
                    foreach (var item in itemMastersList)
                    {
                        var cartitem = PreItem.FirstOrDefault(p => p.ItemId == item.ItemId);
                        if (cartitem != null)
                        {
                            item.IsOffer = cartitem.IsOffer;
                            item.OfferCategory = cartitem.OfferCategory;
                        }
                    }
                }

            }
            if (placeOrderResponse.cart.itemDetails.Any(x => !x.IsSuccess))
            {
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = string.Join(", ", placeOrderResponse.cart.itemDetails.Where(x => !x.IsSuccess).Select(x => x.Message).Distinct());
            }
            //if(cart.PaylaterAmount > 0)
            //{
            //    List<int> Storeid = objOrderMaster.orderDetails.Select(x => x.StoreId && x.StoreId >0).ToList();
            //    if(Storeid.Count() == 1 )
            //    {
            //        int Customerid = objOrderMaster.orderDetails.FirstOrDefault().CustomerId;
            //        List<string> itmnumber = objOrderMaster.orderDetails.Select(x => x.itemNumber).ToList();

            //    }
            //}
            //if(Exist)
            //{
            //    placeOrderResponse.Guid = GUID;
            //}
            //else
            //{
            //    placeOrderResponse.Guid = "";
            //}
            return placeOrderResponse;
        }



        public PlaceOrderResponse ValidateDistributorShoppingCart(ShoppingCart cart, Warehouse warehouse, Customer cust, List<AppHomeItem> appHomeItems, List<int> cartItemIds, List<ItemMaster> itemMastersList, List<ItemMaster> FreeitemsList, List<ItemLimitMaster> itemLimits, List<OfferFreeItemDc> freeItemoffers, out OrderMaster objOrderMaster, out List<BillDiscount> BillDiscounts)
        {
            var placeOrderResponse = new PlaceOrderResponse { IsSuccess = true, Message = string.Empty, cart = cart };
            objOrderMaster = new OrderMaster();
            objOrderMaster = PrepareOrderMasterToInsertHDFC(warehouse, cart, cust);
            objOrderMaster.orderDetails = new List<OrderDetails>();
            BillDiscounts = new List<BillDiscount>();
            double finaltotal = 0;
            double finalTaxAmount = 0;
            double finalSGSTTaxAmount = 0;
            double finalCGSTTaxAmount = 0;
            double finalGrossAmount = 0;
            double finalTotalTaxAmount = 0;
            //cess 
            double finalCessTaxAmount = 0;
            List<int> offerItemId = new List<int>();
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = retailerAppManager.GetStoreWithDetail();
            List<DataContracts.Masters.Store.ClusterStoreExecutiveDc> clusterStoreExecutiveDcs = retailerAppManager.GetStoreClusterExecutiveDetail();

            foreach (var i in placeOrderResponse.cart.itemDetails.Select(x => x))
            {

                i.IsSuccess = true;
                if (i.qty <= 0)
                {
                    i.IsSuccess = false;
                    i.Message = "Quantity is 0";
                }
                else if (i.qty != 0 && i.qty > 0)
                {
                    var items = itemMastersList.Where(x => x.ItemId == i.ItemId && x.WarehouseId == i.WarehouseId).FirstOrDefault();
                    if (items == null)
                    {
                        i.IsSuccess = false;
                        i.Message = "Item is not found";
                    }
                    else
                    {
                        if (!items.DistributorShow || !items.active)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item is not Active";
                        }

                        var limit = itemLimits.FirstOrDefault(x => x.ItemNumber == items.ItemNumber && x.ItemMultiMRPId == items.ItemMultiMRPId);

                        if (limit != null && limit.ItemlimitQty < i.qty)
                        {
                            i.IsSuccess = false;
                            i.Message = "Item limit excced";
                        }


                        if (i.IsSuccess && i.UnitPrice != items.DistributionPrice && cart.status != "Replace")
                        {
                            i.IsSuccess = false;
                            i.Message = "Item Unit Price has been changed";
                            i.NewUnitPrice = items.UnitPrice;
                        }
                        else
                        {
                            //bool active = this.DistributorVerificationDB.Where(x => x.CustomerID == cust.CustomerId).Select(x => x.IsVerified).FirstOrDefault();
                            OrderDetails od = new OrderDetails();
                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid))
                            {
                                var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid);
                                od.StoreId = store.StoreId;

                                if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId))
                                {
                                    var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId);
                                    if (clusterStoreExecutiveDc != null)
                                    {
                                        od.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                        od.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                    }

                                }
                            }
                            else
                            {
                                od.StoreId = 0;
                                od.ExecutiveId = 0;
                                od.ExecutiveName = "";
                            }
                            od.CustomerId = cust.CustomerId;
                            od.CustomerName = cust.Name;
                            od.CityId = warehouse.Cityid;
                            od.Mobile = cust.Mobile;
                            od.OrderDate = indianTime;
                            //od.Status = cust.Active ? "Pending" : "Inactive";//
                            //od.Status = active ? "Pending" : "Inactive";//For distributor verified
                            od.CompanyId = warehouse.CompanyId;
                            od.WarehouseId = warehouse.WarehouseId;
                            od.WarehouseName = warehouse.WarehouseName;
                            od.NetPurchasePrice = items.NetPurchasePrice + ((items.NetPurchasePrice * items.TotalTaxPercentage) / 100);
                            od.ItemId = items.ItemId;
                            od.ItemMultiMRPId = items.ItemMultiMRPId;
                            od.Itempic = items.LogoUrl;
                            od.itemname = items.itemname;
                            od.SupplierName = items.SupplierName;
                            od.SellingUnitName = items.SellingUnitName;
                            od.CategoryName = items.CategoryName;
                            od.SubsubcategoryName = items.SubsubcategoryName;
                            od.SubcategoryName = items.SubcategoryName;
                            od.SellingSku = items.SellingSku;
                            od.City = items.CityName;
                            od.itemcode = items.itemcode;
                            od.HSNCode = items.HSNCode;
                            od.itemNumber = items.Number;
                            od.Barcode = items.itemcode;
                            od.UnitPrice = items.DistributionPrice.Value;
                            od.ActualUnitPrice = items.UnitPrice;
                            od.price = items.price;
                            od.MinOrderQty = items.MinOrderQty;
                            od.MinOrderQtyPrice = (od.MinOrderQty * items.DistributionPrice.Value);
                            od.qty = Convert.ToInt32(i.qty);
                            od.SizePerUnit = items.SizePerUnit;
                            od.TaxPercentage = items.TotalTaxPercentage;
                            if (od.TaxPercentage >= 0)
                            {
                                od.SGSTTaxPercentage = od.TaxPercentage / 2;
                                od.CGSTTaxPercentage = od.TaxPercentage / 2;
                            }
                            od.Noqty = od.qty; // for total qty (no of items)    
                            od.TotalAmt = System.Math.Round(od.UnitPrice * od.qty, 2);

                            if (items.TotalCessPercentage > 0)
                            {
                                od.TotalCessPercentage = items.TotalCessPercentage;
                                double tempPercentagge = items.TotalCessPercentage + items.TotalTaxPercentage;

                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge / 100)) / 100;


                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.CessTaxAmount = (od.AmtWithoutAfterTaxDisc * od.TotalCessPercentage) / 100;
                            }


                            double tempPercentagge2 = items.TotalCessPercentage + items.TotalTaxPercentage;

                            od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge2 / 100)) / 100;
                            od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                            od.TaxAmmount = (od.AmtWithoutAfterTaxDisc * od.TaxPercentage) / 100;
                            if (od.TaxAmmount >= 0)
                            {
                                od.SGSTTaxAmmount = od.TaxAmmount / 2;
                                od.CGSTTaxAmmount = od.TaxAmmount / 2;
                            }
                            //for cess
                            if (od.CessTaxAmount > 0)
                            {
                                double tempPercentagge3 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                //double temp = od.TaxPercentage + od.TotalCessPercentage;
                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.CessTaxAmount + od.TaxAmmount;
                            }
                            else
                            {
                                od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.TaxAmmount;
                            }
                            od.DiscountPercentage = 0;// items.PramotionalDiscount;
                            od.DiscountAmmount = 0;// (od.NetAmmount * items.PramotionalDiscount) / 100;
                            double DiscountAmmount = od.DiscountAmmount;
                            double NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                            od.NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                            double TaxAmmount = od.TaxAmmount;
                            od.Purchaseprice = items.PurchasePrice;
                            od.CreatedDate = indianTime;
                            od.UpdatedDate = indianTime;
                            od.Deleted = false;

                            List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                            objclassificationDc = GetItemClassifications(items.ItemNumber, warehouse.WarehouseId);
                            od.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";

                            objOrderMaster.orderDetails.Add(od);
                            if (od.CessTaxAmount > 0)
                            {
                                finalCessTaxAmount = finalCessTaxAmount + od.CessTaxAmount;
                                finalTaxAmount = finalTaxAmount + od.TaxAmmount + od.CessTaxAmount;
                            }
                            else
                            {
                                finalTaxAmount = finalTaxAmount + od.TaxAmmount;
                            }
                            finaltotal = finaltotal + od.TotalAmt;
                            finalSGSTTaxAmount = finalSGSTTaxAmount + od.SGSTTaxAmmount;
                            finalCGSTTaxAmount = finalCGSTTaxAmount + od.CGSTTaxAmmount;
                            finalGrossAmount = finalGrossAmount + od.TotalAmountAfterTaxDisc;
                            finalTotalTaxAmount = finalTotalTaxAmount + od.TotalAmountAfterTaxDisc;

                            //var freeItemOfferData = freeItemoffers.FirstOrDefault(x => x.ItemNumber == items.ItemNumber);
                            ItemMaster Freeitem = FreeitemsList.Where(x => x.ItemId == i.FreeItemId).FirstOrDefault();
                            var freeItemOffer = OfferDb.FirstOrDefault(x => x.OfferId == i.OfferId && x.WarehouseId == cust.Warehouseid);
                            if (freeItemOffer != null && freeItemOffer.QtyAvaiable > 0 && i.IsOffer == true && i.FreeItemId > 0 && i.FreeItemqty > 0)
                            {
                                if (freeItemOffer == null || Freeitem == null)
                                {
                                    i.IsSuccess = false;
                                    i.Message = "Item is not found";
                                }
                                else
                                {
                                    if (Freeitem.Deleted || freeItemOffer.start > indianTime || freeItemOffer.end < indianTime || !freeItemOffer.IsActive)
                                    {
                                        i.IsSuccess = false;
                                        i.Message = "Free Item expired";
                                    } // Also check stock
                                    else
                                    {
                                        int? FreeOrderqty = i.FreeItemqty;
                                        if (freeItemOffer.QtyAvaiable < FreeOrderqty)
                                        {
                                            i.IsSuccess = false;
                                            i.Message = "Free Item expired";
                                        }
                                        else
                                        {
                                            OrderDetails od1 = new OrderDetails();
                                            if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid))
                                            {
                                                var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid);
                                                od1.StoreId = store.StoreId;

                                                if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId))
                                                {
                                                    var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId);
                                                    if (clusterStoreExecutiveDc != null)
                                                    {
                                                        od1.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                                        od1.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                                    }

                                                }
                                            }
                                            else
                                            {
                                                od1.StoreId = 0;
                                                od1.ExecutiveId = 0;
                                                od1.ExecutiveName = "";
                                            }
                                            od1.CustomerId = cust.CustomerId;
                                            od1.CustomerName = cust.Name;
                                            od1.CityId = cust.Cityid;
                                            od1.Mobile = cust.Mobile;
                                            od1.OrderDate = indianTime;
                                            od1.Status = cust.Active ? "Pending" : "Inactive";
                                            od1.CompanyId = warehouse.CompanyId;
                                            od1.WarehouseId = warehouse.WarehouseId;
                                            od1.WarehouseName = warehouse.WarehouseName;
                                            od1.NetPurchasePrice = Freeitem.NetPurchasePrice + ((Freeitem.NetPurchasePrice * Freeitem.TotalTaxPercentage) / 100);
                                            od1.ItemId = Freeitem.ItemId;
                                            od1.ItemMultiMRPId = Freeitem.ItemMultiMRPId;
                                            od1.Itempic = Freeitem.LogoUrl;
                                            od1.itemname = Freeitem.itemname;
                                            od1.SupplierName = Freeitem.SupplierName;
                                            od1.SellingUnitName = Freeitem.SellingUnitName;
                                            od1.CategoryName = Freeitem.CategoryName;
                                            od1.SubsubcategoryName = Freeitem.SubsubcategoryName;
                                            od1.SubcategoryName = Freeitem.SubcategoryName;
                                            od1.SellingSku = Freeitem.SellingSku;
                                            od1.City = Freeitem.CityName;
                                            od1.itemcode = Freeitem.itemcode;
                                            od1.HSNCode = Freeitem.HSNCode;
                                            od1.itemNumber = Freeitem.Number;
                                            od1.Barcode = Freeitem.itemcode;
                                            od1.ActualUnitPrice = Freeitem.UnitPrice;
                                            od1.MinOrderQty = 1;
                                            od1.UnitPrice = 0.0001;
                                            od1.price = Freeitem.price;
                                            od1.MinOrderQtyPrice = (od1.MinOrderQty * od1.UnitPrice);
                                            od1.qty = Convert.ToInt32(i.FreeItemqty);
                                            od1.Noqty = od1.qty;
                                            od1.SizePerUnit = items.SizePerUnit;
                                            od1.TaxPercentage = items.TotalTaxPercentage;
                                            od1.IsFreeItem = true;
                                            od1.FreeWithParentItemId = i.ItemId;
                                            od1.IsDispatchedFreeStock = OfferDb.SingleOrDefault(x => x.OfferId == i.OfferId).IsDispatchedFreeStock;//true mean stock hit from Freestock
                                            od1.CreatedDate = indianTime;
                                            od1.UpdatedDate = indianTime;
                                            od1.Deleted = false;
                                            od1.marginPoint = 0;

                                            if (od1.TaxPercentage >= 0)
                                            {
                                                od1.SGSTTaxPercentage = od1.TaxPercentage / 2;
                                                od1.CGSTTaxPercentage = od1.TaxPercentage / 2;
                                            }
                                            od1.Noqty = od1.qty; // for total qty (no of items)    
                                            od1.TotalAmt = System.Math.Round(od1.UnitPrice * od1.qty, 2);

                                            if (items.TotalCessPercentage > 0)
                                            {
                                                od1.TotalCessPercentage = items.TotalCessPercentage;
                                                double tempPercentagge = items.TotalCessPercentage + items.TotalTaxPercentage;

                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge / 100)) / 100;


                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                                od1.CessTaxAmount = (od1.AmtWithoutAfterTaxDisc * od1.TotalCessPercentage) / 100;
                                            }


                                            double tempPercentagge2f = items.TotalCessPercentage + items.TotalTaxPercentage;

                                            od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge2f / 100)) / 100;
                                            od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                            od1.TaxAmmount = (od1.AmtWithoutAfterTaxDisc * od1.TaxPercentage) / 100;
                                            if (od1.TaxAmmount >= 0)
                                            {
                                                od1.SGSTTaxAmmount = od1.TaxAmmount / 2;
                                                od1.CGSTTaxAmmount = od1.TaxAmmount / 2;
                                            }
                                            //for cess
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                double tempPercentagge3 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.CessTaxAmount + od1.TaxAmmount;
                                            }
                                            else
                                            {
                                                od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.TaxAmmount;
                                            }
                                            od1.DiscountPercentage = 0;// 
                                            od1.DiscountAmmount = 0;// 

                                            od1.NetAmtAfterDis = (od1.NetAmmount - od1.DiscountAmmount);
                                            od1.Purchaseprice = 0;

                                            objclassificationDc = GetItemClassifications(items.ItemNumber, warehouse.WarehouseId);
                                            od1.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                            objOrderMaster.orderDetails.Add(od1);
                                            if (od1.CessTaxAmount > 0)
                                            {
                                                finalCessTaxAmount = finalCessTaxAmount + od1.CessTaxAmount;
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount + od1.CessTaxAmount;
                                            }
                                            else
                                            {
                                                finalTaxAmount = finalTaxAmount + od1.TaxAmmount;
                                            }
                                            finaltotal = finaltotal + od1.TotalAmt;
                                            finalSGSTTaxAmount = finalSGSTTaxAmount + od1.SGSTTaxAmmount;
                                            finalCGSTTaxAmount = finalCGSTTaxAmount + od1.CGSTTaxAmmount;
                                            finalGrossAmount = finalGrossAmount + od1.TotalAmountAfterTaxDisc;
                                            finalTotalTaxAmount = finalTotalTaxAmount + od1.TotalAmountAfterTaxDisc;
                                        }

                                    }
                                }

                            }
                        }

                    }
                }
            }


            if (!string.IsNullOrEmpty(cart.BillDiscountOfferId))
            {
                List<int> billdiscountofferids = cart.BillDiscountOfferId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                List<Offer> Offers = OfferDb.Where(x => billdiscountofferids.Contains(x.OfferId) && x.IsDeleted == false && x.IsActive == true && x.end > indianTime).Include(x => x.OfferItemsBillDiscounts).Include(x => x.BillDiscountOfferSections).Include(x => x.OfferBillDiscountRequiredItems).Include(x => x.OfferLineItemValues).ToList();

                if (Offers != null && Offers.Count > 0)
                {
                    if (Offers.Any(x => !billdiscountofferids.Contains(x.OfferId)))
                    {
                        List<int> offerids = billdiscountofferids.Where(y => !Offers.Select(x => x.OfferId).Contains(y)).ToList();
                        List<string> offernames = Offers.Where(x => offerids.Contains(x.OfferId)).Select(x => x.OfferName).ToList();
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "following offer expired :" + string.Join(",", offernames);
                        return placeOrderResponse;
                    }

                    if (Offers.Count > 1 && Offers.Any(x => !x.IsUseOtherOffer))
                    {
                        var offernames = Offers.Where(x => !x.IsUseOtherOffer).Select(x => x.OfferName).ToList();
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "following offer can't use with other offers :" + string.Join(",", offernames);
                        return placeOrderResponse;
                    }
                }
                else
                {
                    placeOrderResponse.IsSuccess = false;
                    placeOrderResponse.Message = "following offer expired :" + string.Join(",", billdiscountofferids);
                    return placeOrderResponse;
                }

                if (Offers.Any(x => x.OfferOn == "ScratchBillDiscount"))
                {
                    string offeralreadyuse = "";
                    foreach (var item in Offers.Where(x => x.OfferOn == "ScratchBillDiscount"))
                    {
                        if (BillDiscountDb.All(x => x.OfferId == item.OfferId && x.CustomerId == cust.CustomerId && x.OrderId > 0))
                        {
                            if (string.IsNullOrEmpty(offeralreadyuse))
                                offeralreadyuse = item.OfferName;
                            else
                                offeralreadyuse += "," + item.OfferName;
                        }
                    }

                    if (!string.IsNullOrEmpty(offeralreadyuse))
                    {
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "You have already used following scratch card " + offeralreadyuse;
                        return placeOrderResponse;
                    }
                }

                if (placeOrderResponse.cart.itemDetails.All(x => x.IsSuccess) && placeOrderResponse.IsSuccess)
                {

                    #region BillDiscount Free Item
                    var freeItemofferId = Offers.Where(x => x.BillDiscountOfferOn == "FreeItem").Select(x => x.OfferId);

                    List<BillDiscountFreeItem> BillDiscountFreeItems = new List<BillDiscountFreeItem>();
                    List<ItemMaster> BillDiscountOfferFreeitems = new List<ItemMaster>();
                    if (freeItemofferId != null && freeItemofferId.Any())
                    {
                        BillDiscountFreeItems = BillDiscountFreeItem.Where(x => freeItemofferId.Contains(x.offerId) && x.RemainingOfferStockQty < x.OfferStockQty).ToList();
                        if (BillDiscountFreeItems != null && BillDiscountFreeItems.Any())
                        {
                            var freeitemids = BillDiscountFreeItems.Select(x => x.ItemId).ToList();
                            BillDiscountOfferFreeitems = itemMasters.Where(x => freeitemids.Contains(x.ItemId)).ToList();
                        }
                    }
                    #endregion

                    foreach (var Offer in Offers)
                    {
                        var BillDiscount = new BillDiscount();
                        BillDiscount.CustomerId = cust.CustomerId;
                        BillDiscount.OfferId = Offer.OfferId;
                        BillDiscount.BillDiscountType = Offer.OfferOn;
                        double totalamount = 0;
                        var OrderLineItems = 0;
                        double BillDiscountamount = 0;
                        var CItemIds = itemMastersList.Select(x => x.ItemId).ToList();
                        if (!string.IsNullOrEmpty(Offer.IncentiveClassification))
                        {
                            var classifications = Offer.IncentiveClassification.Split(',').ToList();
                            CItemIds = itemMastersList.Where(x => classifications.Contains(x.IncentiveClassification)).Select(x => x.ItemId).ToList();
                        }
                        if ((Offer.OfferOn == "ScratchBillDiscount" || Offer.OfferOn == "BillDiscount") && Offer.OfferOn != "ItemMarkDown")
                        {
                            List<int> Itemids = new List<int>();
                            if (Offer.BillDiscountType == "category" && Offer.BillDiscountOfferSections.Any())
                            {

                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();
                                var ids = Offer.BillDiscountOfferSections.Where(x => x.IsInclude).Select(x => x.ObjId).ToList();
                                var notids = Offer.BillDiscountOfferSections.Where(x => !x.IsInclude).Select(x => x.ObjId).ToList();

                                //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                                //var ids = Offer.BillDiscountOfferSections.Select(x => x.ObjId).ToList();
                                //Itemids = itemMastersList.Where(x => ids.Contains(x.Categoryid) && !iteminofferlist.Contains(x.ItemId) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                                Itemids = itemMastersList.Where(x => (!ids.Any() || ids.Contains(x.Categoryid)) && !notids.Contains(x.Categoryid)
                               && !itemoutofferlist.Contains(x.ItemId)
                               && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                               && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                                if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                                {
                                    List<int> lineItemValueItemExists = new List<int>();
                                    foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                    {
                                        int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                        if (ItemId == 0)
                                        {
                                            totalamount = 0;
                                            break;
                                        }
                                        else
                                            lineItemValueItemExists.Add(ItemId);
                                    }
                                }
                            }
                            else if (Offer.BillDiscountType == "subcategory" && Offer.BillDiscountOfferSections.Any())
                            {
                                AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);


                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                                Itemids = itemMastersList.Where(x =>
                                (!offerCatSubCats.Where(y => y.IsInclude).Any() || offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid))
                                 && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                                //Itemids = itemMastersList.Where(x => offerCatSubCats.Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid) && !iteminofferlist.Contains(x.ItemId) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                                if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                                {
                                    List<int> lineItemValueItemExists = new List<int>();
                                    foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                    {
                                        int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                        if (ItemId == 0)
                                        {
                                            totalamount = 0;
                                            break;
                                        }
                                        else
                                            lineItemValueItemExists.Add(ItemId);
                                    }
                                }
                            }
                            else if (Offer.BillDiscountType == "brand" && Offer.BillDiscountOfferSections.Any())
                            {
                                //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                                AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);

                                //Itemids = itemMastersList.Where(x => offerCatSubCats.Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid) && !iteminofferlist.Contains(x.ItemId) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                                Itemids = itemMastersList.Where(x =>
                                (
                                 !offerCatSubCats.Where(y => y.IsInclude).Any() ||
                                offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                )
                                && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                                && !itemoutofferlist.Contains(x.ItemId)
                                && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).ToList() : null;

                                if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                                {
                                    List<int> lineItemValueItemExists = new List<int>();
                                    foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                    {
                                        int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                        if (ItemId == 0)
                                        {
                                            totalamount = 0;
                                            break;
                                        }
                                        else
                                            lineItemValueItemExists.Add(ItemId);
                                    }
                                }

                            }
                            else if (Offer.BillDiscountType == "items")
                            {
                                //var iteminofferlist = Offer.OfferItemsBillDiscounts.Select(x => x.itemId).ToList();
                                //if (Offer.OfferItemsBillDiscounts.FirstOrDefault().IsInclude)
                                //{
                                //    Itemids = itemMastersList.Where(x => iteminofferlist.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                //}

                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                                Itemids = itemMastersList.Where(x => (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                   && !itemoutofferlist.Contains(x.ItemId)
                                   ).Select(x => x.ItemId).ToList();

                                var incluseItemIds = itemMastersList.Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).ToList() : null;

                                if (Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                                {
                                    List<int> lineItemValueItemExists = new List<int>();
                                    foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                    {
                                        int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                        if (ItemId == 0)
                                        {
                                            totalamount = 0;
                                            break;
                                        }
                                        else
                                            lineItemValueItemExists.Add(ItemId);
                                    }
                                }
                            }
                            else
                            {
                                //var ids = Offer.BillDiscountOfferSections.Select(x => x.ObjId).ToList();
                                //Itemids = itemMastersList.Where(x => ids.Contains(x.Categoryid)).Select(x => x.ItemId).ToList();

                                var catIdoutofferlist = Offer.BillDiscountOfferSections.Where(x => !x.IsInclude).Select(x => x.ObjId).ToList();
                                var catIdinofferlist = Offer.BillDiscountOfferSections.Where(x => x.IsInclude).Select(x => x.ObjId).ToList();

                                Itemids = itemMastersList.Where(x => (catIdinofferlist.Any() || catIdinofferlist.Contains(x.Categoryid))
                                && !catIdoutofferlist.Contains(x.Categoryid)
                                ).Select(x => x.ItemId).ToList();


                                var incluseItemIds = itemMastersList.Where(x => !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();

                                if (catIdoutofferlist.Any())
                                    incluseItemIds = itemMastersList.Where(x => !catIdoutofferlist.Contains(x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    incluseItemIds = itemMastersList.Where(x => CItemIds.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)
                                  ).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : objOrderMaster.orderDetails.Where(x => incluseItemIds.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice);
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                var cartItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !Itemids.Contains(x.ItemId) && incluseItemIds.Contains(x.ItemId)).ToList() : objOrderMaster.orderDetails.Where(x => incluseItemIds.Contains(x.ItemId)).ToList();

                                if (cartItems != null && Offer.OfferLineItemValues != null && Offer.OfferLineItemValues.Any(x => x.itemValue > 0))
                                {
                                    List<int> lineItemValueItemExists = new List<int>();
                                    foreach (var item in Offer.OfferLineItemValues.Where(x => x.itemValue > 0))
                                    {
                                        int ItemId = cartItems.Where(x => !lineItemValueItemExists.Contains(x.ItemId) && (x.qty * x.UnitPrice) > item.itemValue).OrderBy(x => (x.qty * x.UnitPrice)).Select(x => x.ItemId).FirstOrDefault();
                                        if (ItemId == 0)
                                        {
                                            totalamount = 0;
                                            break;
                                        }
                                        else
                                            lineItemValueItemExists.Add(ItemId);
                                    }
                                }

                            }


                            if (Offer.OfferBillDiscountRequiredItems != null && Offer.OfferBillDiscountRequiredItems.Any())
                            {
                                List<BillDiscountRequiredItemDc> BillDiscountRequiredItems = AgileObjects.AgileMapper.Mapper.Map(Offer.OfferBillDiscountRequiredItems).ToANew<List<BillDiscountRequiredItemDc>>();
                                if (BillDiscountRequiredItems.Any(x => x.ObjectType == "brand"))
                                {
                                    var ids = BillDiscountRequiredItems.Where(x => x.ObjectType == "brand").SelectMany(x => x.ObjectId.Split(',').Select(y => Convert.ToInt32(y))).ToList();
                                    AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                    List<BrandCategorySubCategory> BrandCategorySubCategorys = manager.GetCatSubCatByMappingId(ids);
                                    foreach (var item in BillDiscountRequiredItems.Where(x => x.ObjectType == "brand"))
                                    {
                                        var mappingIds = item.ObjectId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                                        if (BrandCategorySubCategorys.Any(x => mappingIds.Contains(x.BrandCategoryMappingId)))
                                        {
                                            item.ObjectId = string.Join(",", BrandCategorySubCategorys.Where(x => mappingIds.Contains(x.BrandCategoryMappingId)).Select(y => y.SubsubCategoryid + " " + y.SubCategoryId + " " + y.Categoryid).ToList());
                                            //item.SubCategoryId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).SubCategoryId;
                                            //item.CategoryId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).Categoryid;
                                            //item.ObjectId = BrandCategorySubCategorys.FirstOrDefault(x => x.BrandCategoryMappingId == item.ObjectId).SubsubCategoryid;

                                        }
                                    }
                                }
                                var objectIds = BillDiscountRequiredItems.Where(x => x.ObjectType == "Item").SelectMany(x => x.ObjectId.Split(',').Select(z => Convert.ToInt32(z))).Distinct().ToList();

                                if (BillDiscountRequiredItems.Any(x => x.ObjectType == "brand"))
                                {
                                    objectIds.AddRange(itemMastersList.Where(x => BillDiscountRequiredItems.Where(y => y.ObjectType == "brand").SelectMany(y => y.ObjectId.Split(',').Select(z => z)).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemMultiMRPId).ToList());
                                }
                                bool IsRequiredItemExists = true;
                                var cartrequiredItems = objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && objectIds.Contains(x.ItemMultiMRPId) && x.qty > 0);
                                foreach (var reqitem in BillDiscountRequiredItems)
                                {
                                    if (reqitem.ObjectType == "Item")
                                    {
                                        var mrpIds = reqitem.ObjectId.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                                        var cartitem = cartrequiredItems.Where(x => mrpIds.Contains(x.ItemMultiMRPId));
                                        if (cartitem != null && cartitem.Any())
                                        {
                                            if (reqitem.ValueType.ToLower() == "qty" && reqitem.ObjectValue > cartitem.Sum(x => x.qty))
                                            {
                                                IsRequiredItemExists = false;
                                                break;
                                            }
                                            else if (reqitem.ValueType.ToLower() == "value" && reqitem.ObjectValue > cartitem.Sum(x => x.qty * x.UnitPrice))
                                            {
                                                IsRequiredItemExists = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }
                                    }
                                    else if (reqitem.ObjectType == "brand")
                                    {
                                        var objIds = reqitem.ObjectId.Split(',').Select(x => x).ToList();
                                        var multiMrpIds = itemMastersList.Where(x => objIds.Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid) && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemMultiMRPId).ToList();
                                        var cartitems = cartrequiredItems.Where(x => multiMrpIds.Contains(x.ItemMultiMRPId));
                                        if (cartitems != null && cartitems.Any())
                                        {
                                            if (reqitem.ValueType.ToLower() == "qty" && reqitem.ObjectValue > cartitems.Sum(x => x.qty))
                                            {
                                                IsRequiredItemExists = false;
                                                break;
                                            }
                                            else if (reqitem.ValueType.ToLower() == "value" && reqitem.ObjectValue > cartitems.Sum(x => x.qty * x.UnitPrice))
                                            {
                                                IsRequiredItemExists = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            IsRequiredItemExists = false;
                                            break;
                                        }

                                    }
                                }
                                if (!IsRequiredItemExists)
                                {
                                    totalamount = 0;
                                }
                            }


                            if (Offer.MaxBillAmount > 0 && totalamount > Offer.MaxBillAmount)
                            {
                                totalamount = Offer.MaxBillAmount;
                            }
                            else if (Offer.BillAmount > totalamount)
                            {
                                totalamount = 0;
                            }

                            if (Offer.LineItem > 0 && Offer.LineItem > OrderLineItems)
                            {
                                totalamount = 0;
                            }
                        }
                        else if (Offer.OfferOn == "ItemMarkDown")
                        {
                            List<int> Itemids = new List<int>();
                            if (Offer.BillDiscountType == "category" && Offer.BillDiscountOfferSections.Any())
                            {

                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();
                                var ids = Offer.BillDiscountOfferSections.Where(x => x.IsInclude).Select(x => x.Id).ToList();
                                var notids = Offer.BillDiscountOfferSections.Where(x => !x.IsInclude).Select(x => x.Id).ToList();

                                Itemids = itemMastersList.Where(x =>
                                (!ids.Any() || ids.Contains(x.Categoryid)) && !notids.Contains(x.Categoryid)
                                     && !itemoutofferlist.Contains(x.ItemId)
                                     && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                BillDiscountamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && Itemids.Contains(x.ItemId)).Sum(x => x.qty * (x.UnitPrice / ((100 + Convert.ToDouble(Offer.DistributorDiscountPercentage)) / 100))) : 0;
                                BillDiscountamount = BillDiscountamount > 0 ? totalamount - BillDiscountamount : 0;
                            }
                            else if (Offer.BillDiscountType == "subcategory" && Offer.BillDiscountOfferSections.Any())
                            {
                                AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);

                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                                Itemids = itemMastersList.Where(x =>
                                 (!offerCatSubCats.Where(y => y.IsInclude).Any() || offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid))
                                 && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.CategoryId).Contains(x.SubCategoryId + " " + x.Categoryid)
                                 && !itemoutofferlist.Contains(x.ItemId)
                                 && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                 && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                BillDiscountamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && Itemids.Contains(x.ItemId)).Sum(x => x.qty * (x.UnitPrice / ((100 + Convert.ToDouble(Offer.DistributorDiscountPercentage)) / 100))) : 0;
                                BillDiscountamount = BillDiscountamount > 0 ? totalamount - BillDiscountamount : 0;
                            }
                            else if (Offer.BillDiscountType == "brand" && Offer.BillDiscountOfferSections.Any())
                            {
                                var itemoutofferlist = Offer.OfferItemsBillDiscounts.Where(x => !x.IsInclude).Select(x => x.itemId).ToList();
                                var iteminofferlist = Offer.OfferItemsBillDiscounts.Where(x => x.IsInclude).Select(x => x.itemId).ToList();

                                AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager manager = new AngularJSAuthentication.BusinessLayer.Managers.Masters.CustomersManager();
                                List<AngularJSAuthentication.DataContracts.Masters.OfferBillDiscountItemDc> offerCatSubCats = manager.GetOfferBillDiscountItemById(Offer.OfferId);


                                Itemids = itemMastersList.Where(x => (
                                !offerCatSubCats.Where(y => y.IsInclude).Any() ||
                               offerCatSubCats.Where(y => y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                               )
                               && !offerCatSubCats.Where(y => !y.IsInclude).Select(y => y.Id + " " + y.SubCategoryId + " " + y.CategoryId).Contains(x.SubsubCategoryid + " " + x.SubCategoryId + " " + x.Categoryid)
                               && !itemoutofferlist.Contains(x.ItemId)
                               && (!iteminofferlist.Any() || iteminofferlist.Contains(x.ItemId))
                                       && !(x.IsOffer && x.OfferType == "FlashDeal")).Select(x => x.ItemId).ToList();
                                if (CItemIds.Any())
                                {
                                    Itemids = itemMastersList.Where(x => CItemIds.Contains(x.ItemId)).Select(x => x.ItemId).ToList();
                                }
                                totalamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Sum(x => x.qty * x.UnitPrice) : 0;
                                OrderLineItems = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => Itemids.Contains(x.ItemId)).Count() : objOrderMaster.orderDetails.Count();
                                BillDiscountamount = Itemids.Any() && CItemIds.Any() ? objOrderMaster.orderDetails.Where(x => !x.IsFreeItem && Itemids.Contains(x.ItemId)).Sum(x => x.qty * (x.UnitPrice / ((100 + Convert.ToDouble(Offer.DistributorDiscountPercentage)) / 100))) : 0;
                                BillDiscountamount = BillDiscountamount > 0 ? totalamount - BillDiscountamount : 0;
                            }
                        }
                        //else
                        //{
                        //    totalamount = objOrderMaster.orderDetails.Sum(x => x.qty * x.UnitPrice);
                        //    if (Offer.MaxBillAmount > 0 && totalamount > Offer.MaxBillAmount)
                        //    {
                        //        totalamount = Offer.MaxBillAmount;
                        //    }
                        //    else if (Offer.BillAmount > totalamount)
                        //    {
                        //        totalamount = 0;
                        //    }
                        //}

                        if (Offer.OfferOn != "ItemMarkDown")
                        {

                            if (Offer.BillDiscountOfferOn == "Percentage")
                            {
                                BillDiscount.BillDiscountTypeValue = Offer.DiscountPercentage;
                                BillDiscount.BillDiscountAmount = totalamount * Offer.DiscountPercentage / 100;
                            }
                            else if (Offer.BillDiscountOfferOn == "DynamicAmount")
                            {
                                BillDiscount.BillDiscountAmount = Offer.BillDiscountWallet.Value;
                            }
                            else if (Offer.BillDiscountOfferOn == "FreeItem")
                            {
                                #region BillDiscount Free Item
                                BillDiscount.BillDiscountAmount = 0;

                                if (BillDiscountFreeItems.Any(x => x.offerId == Offer.OfferId))
                                {
                                    var BillDiscountFreeItem = BillDiscountFreeItems.Where(x => x.offerId == Offer.OfferId).ToList();
                                    if (BillDiscountFreeItem != null && BillDiscountFreeItem.Any())
                                    {
                                        var freeItems = BillDiscountOfferFreeitems.Where(x => BillDiscountFreeItem.Select(y => y.ItemId).Contains(x.ItemId));
                                        if (freeItems != null && freeItems.Any())
                                        {
                                            OrderDetails od1 = null;
                                            foreach (var Freeitem in freeItems)
                                            {
                                                od1 = new OrderDetails();
                                                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid))
                                                {
                                                    var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == Freeitem.Categoryid && x.SubCategoryId == Freeitem.SubCategoryId && x.BrandId == Freeitem.SubsubCategoryid);
                                                    od1.StoreId = store.StoreId;

                                                    if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId))
                                                    {
                                                        var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == cust.ClusterId);
                                                        if (clusterStoreExecutiveDc != null)
                                                        {
                                                            od1.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                                            od1.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                                        }

                                                    }
                                                }
                                                else
                                                {
                                                    od1.StoreId = 0;
                                                    od1.ExecutiveId = 0;
                                                    od1.ExecutiveName = "";
                                                }
                                                od1.CustomerId = cust.CustomerId;
                                                od1.CustomerName = cust.Name;
                                                od1.CityId = cust.Cityid;
                                                od1.Mobile = cust.Mobile;
                                                od1.OrderDate = indianTime;
                                                od1.Status = cust.Active ? "Pending" : "Inactive";
                                                od1.CompanyId = warehouse.CompanyId;
                                                od1.WarehouseId = warehouse.WarehouseId;
                                                od1.WarehouseName = warehouse.WarehouseName;
                                                od1.NetPurchasePrice = Freeitem.NetPurchasePrice + ((Freeitem.NetPurchasePrice * Freeitem.TotalTaxPercentage) / 100);
                                                od1.ItemId = Freeitem.ItemId;
                                                od1.ItemMultiMRPId = Freeitem.ItemMultiMRPId;
                                                od1.Itempic = Freeitem.LogoUrl;
                                                od1.itemname = Freeitem.itemname;
                                                od1.SupplierName = Freeitem.SupplierName;
                                                od1.SellingUnitName = Freeitem.SellingUnitName;
                                                od1.CategoryName = Freeitem.CategoryName;
                                                od1.SubsubcategoryName = Freeitem.SubsubcategoryName;
                                                od1.SubcategoryName = Freeitem.SubcategoryName;
                                                od1.SellingSku = Freeitem.SellingSku;
                                                od1.City = Freeitem.CityName;
                                                od1.itemcode = Freeitem.itemcode;
                                                od1.HSNCode = Freeitem.HSNCode;
                                                od1.itemNumber = Freeitem.Number;
                                                od1.ActualUnitPrice = Freeitem.UnitPrice;
                                                od1.IsFreeItem = true;
                                                od1.IsDispatchedFreeStock = BillDiscountFreeItem.FirstOrDefault(x => x.ItemId == Freeitem.ItemId).StockType == 2;//true mean stock hit from Freestock
                                                od1.UnitPrice = 0.0001;
                                                od1.price = Freeitem.price;
                                                //od1.MinOrderQty = 0;
                                                //od1.MinOrderQtyPrice = 0;
                                                od1.qty = Convert.ToInt32(BillDiscountFreeItem.FirstOrDefault(x => x.ItemId == Freeitem.ItemId).Qty);
                                                od1.SizePerUnit = 0;
                                                od1.TaxPercentage = Freeitem.TotalTaxPercentage;
                                                od1.SGSTTaxPercentage = 0;
                                                od1.CGSTTaxPercentage = 0;
                                                od1.Noqty = od1.qty; // for total qty (no of items)    
                                                od1.TotalAmt = 0;
                                                od1.TotalCessPercentage = 0;
                                                od1.AmtWithoutTaxDisc = 0;
                                                od1.AmtWithoutAfterTaxDisc = 0;
                                                od1.CessTaxAmount = 0;
                                                od1.AmtWithoutTaxDisc = 0;
                                                od1.AmtWithoutAfterTaxDisc = 0;
                                                od1.TaxAmmount = 0;

                                                od1.MinOrderQty = 1;
                                                od1.MinOrderQtyPrice = (od1.MinOrderQty * od1.UnitPrice);

                                                od1.DiscountPercentage = 0;
                                                od1.DiscountAmmount = 0;
                                                od1.NetAmtAfterDis = 0;
                                                od1.Purchaseprice = 0;
                                                od1.CreatedDate = indianTime;
                                                od1.UpdatedDate = indianTime;
                                                od1.Deleted = false;
                                                od1.marginPoint = 0;

                                                od1.TaxPercentage = Freeitem.TotalTaxPercentage;
                                                od1.TotalCessPercentage = Freeitem.TotalCessPercentage;

                                                if (od1.TaxPercentage >= 0)
                                                {
                                                    od1.SGSTTaxPercentage = od1.TaxPercentage / 2;
                                                    od1.CGSTTaxPercentage = od1.TaxPercentage / 2;
                                                }
                                                od1.Noqty = od1.qty; // for total qty (no of items)    
                                                od1.TotalAmt = System.Math.Round(od1.UnitPrice * od1.qty, 2);

                                                if (Freeitem.TotalCessPercentage > 0)
                                                {
                                                    od1.TotalCessPercentage = Freeitem.TotalCessPercentage;
                                                    double tempPercentagge = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;
                                                    od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge / 100)) / 100;
                                                    od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                                    od1.CessTaxAmount = (od1.AmtWithoutAfterTaxDisc * od1.TotalCessPercentage) / 100;
                                                }
                                                double tempPercentagge2f = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;

                                                od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge2f / 100)) / 100;
                                                od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                                od1.TaxAmmount = (od1.AmtWithoutAfterTaxDisc * od1.TaxPercentage) / 100;
                                                if (od1.TaxAmmount >= 0)
                                                {
                                                    od1.SGSTTaxAmmount = od1.TaxAmmount / 2;
                                                    od1.CGSTTaxAmmount = od1.TaxAmmount / 2;
                                                }
                                                //for cess
                                                if (od1.CessTaxAmount > 0)
                                                {
                                                    double tempPercentagge3 = Freeitem.TotalCessPercentage + Freeitem.TotalTaxPercentage;
                                                    od1.AmtWithoutTaxDisc = ((100 * od1.UnitPrice * od1.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                                    od1.AmtWithoutAfterTaxDisc = (100 * od1.AmtWithoutTaxDisc) / (100 + Freeitem.PramotionalDiscount);
                                                    od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.CessTaxAmount + od1.TaxAmmount;
                                                }
                                                else
                                                {
                                                    od1.TotalAmountAfterTaxDisc = od1.AmtWithoutAfterTaxDisc + od1.TaxAmmount;
                                                }
                                                od1.DiscountPercentage = 0;// 
                                                od1.DiscountAmmount = 0;// 

                                                od1.NetAmtAfterDis = (od1.NetAmmount - od1.DiscountAmmount);
                                                od1.Purchaseprice = 0;
                                                List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                                                objclassificationDc = GetItemClassifications(Freeitem.Number, warehouse.WarehouseId);
                                                od1.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                                objOrderMaster.orderDetails.Add(od1);
                                                if (od1.CessTaxAmount > 0)
                                                {
                                                    finalCessTaxAmount = finalCessTaxAmount + od1.CessTaxAmount;
                                                    finalTaxAmount = finalTaxAmount + od1.TaxAmmount + od1.CessTaxAmount;
                                                }
                                                else
                                                {
                                                    finalTaxAmount = finalTaxAmount + od1.TaxAmmount;
                                                }
                                                finaltotal = finaltotal + od1.TotalAmt;
                                                finalSGSTTaxAmount = finalSGSTTaxAmount + od1.SGSTTaxAmmount;
                                                finalCGSTTaxAmount = finalCGSTTaxAmount + od1.CGSTTaxAmmount;
                                                finalGrossAmount = finalGrossAmount + od1.TotalAmountAfterTaxDisc;
                                                finalTotalTaxAmount = finalTotalTaxAmount + od1.TotalAmountAfterTaxDisc;
                                                objOrderMaster.orderDetails.Add(od1);
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                    placeOrderResponse.IsSuccess = false;
                                    placeOrderResponse.Message = Offer.OfferName + " Offer Expired.";
                                    return placeOrderResponse;
                                }
                                #endregion
                            }
                            else
                            {
                                int WalletPoint = 0;
                                if (Offer.WalletType == "WalletPercentage")
                                {
                                    WalletPoint = Convert.ToInt32(Math.Truncate(totalamount * ((Offer.BillDiscountWallet.HasValue ? Offer.BillDiscountWallet.Value : 0) / 100)));
                                    WalletPoint = WalletPoint * 10;
                                }
                                else
                                {
                                    WalletPoint = Convert.ToInt32(Offer.BillDiscountWallet.HasValue ? Offer.BillDiscountWallet.Value : 0);
                                }
                                if (Offer.ApplyOn == "PostOffer")
                                {
                                    BillDiscount.BillDiscountTypeValue = WalletPoint;
                                    BillDiscount.BillDiscountAmount = 0;
                                    BillDiscount.IsUsedNextOrder = true;
                                }
                                else
                                {
                                    BillDiscount.BillDiscountTypeValue = Offer.BillDiscountWallet;
                                    BillDiscount.BillDiscountAmount = totalamount == 0 ? 0 : Convert.ToDouble(WalletPoint / 10);
                                    BillDiscount.IsUsedNextOrder = false;
                                }
                            }
                            if (Offer.MaxDiscount > 0)
                            {
                                var walletmultipler = 1;

                                if (!string.IsNullOrEmpty(Offer.BillDiscountOfferOn) && Offer.BillDiscountOfferOn != "Percentage" && Offer.BillDiscountOfferOn != "DynamicAmount")
                                {
                                    walletmultipler = 10;
                                }
                                if (Offer.BillDiscountOfferOn != "DynamicAmount")
                                {
                                    if (Offer.MaxDiscount * walletmultipler < BillDiscount.BillDiscountAmount)
                                    {
                                        BillDiscount.BillDiscountAmount = Offer.MaxDiscount * walletmultipler;
                                    }
                                    if (Offer.MaxDiscount * walletmultipler < BillDiscount.BillDiscountTypeValue)
                                    {
                                        BillDiscount.BillDiscountTypeValue = Convert.ToInt32(Offer.MaxDiscount * walletmultipler);
                                    }
                                }
                            }


                            BillDiscount.IsAddNextOrderWallet = false;
                            BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                            BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                            BillDiscount.CreatedDate = indianTime;
                            BillDiscount.ModifiedDate = indianTime;
                            BillDiscount.IsActive = Offer.IsActive;
                            BillDiscount.IsDeleted = false;
                            BillDiscount.CreatedBy = cust.CustomerId;
                            BillDiscount.ModifiedBy = cust.CustomerId;
                        }
                        else if (Offer.OfferOn == "ItemMarkDown" && BillDiscountamount > 0)
                        {
                            BillDiscount.BillDiscountTypeValue = Convert.ToDouble(Offer.DistributorDiscountPercentage);
                            BillDiscount.BillDiscountAmount = BillDiscountamount;
                            BillDiscount.IsAddNextOrderWallet = false;
                            BillDiscount.IsMultiTimeUse = Offer.IsMultiTimeUse;
                            BillDiscount.IsUseOtherOffer = Offer.IsUseOtherOffer;
                            BillDiscount.CreatedDate = indianTime;
                            BillDiscount.ModifiedDate = indianTime;
                            BillDiscount.IsActive = Offer.IsActive;
                            BillDiscount.IsDeleted = false;
                            BillDiscount.CreatedBy = cust.CustomerId;
                            BillDiscount.ModifiedBy = cust.CustomerId;
                        }
                        BillDiscounts.Add(BillDiscount);
                    }
                }

            }
            if (placeOrderResponse.cart.itemDetails.Any(x => !x.IsSuccess))
            {
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = string.Join(", ", placeOrderResponse.cart.itemDetails.Where(x => !x.IsSuccess).Select(x => x.Message));
            }
            return placeOrderResponse;
        }

        #endregion

        #region Seller app Order Place Api
        public SellerOrderResponse ValidateSellerCart(SellerShoppingCart sellerShoppingCart, AuthContext context, out OrderMaster objOrderMaster)
        {
            var placeOrderResponse = new SellerOrderResponse { Status = true, Message = string.Empty, SellerShoppingCart = sellerShoppingCart };
            objOrderMaster = new OrderMaster();
            RetailerAppManager retailerAppManager = new RetailerAppManager();
            objOrderMaster.orderDetails = new List<OrderDetails>();
            double finaltotal = 0;
            double finalTaxAmount = 0;
            double finalSGSTTaxAmount = 0;
            double finalCGSTTaxAmount = 0;
            double finalGrossAmount = 0;
            double finalTotalTaxAmount = 0;
            //cess 
            double finalCessTaxAmount = 0;
            var customer = context.Customers.Where(x => x.Skcode == sellerShoppingCart.Skcode && x.Deleted == false).FirstOrDefault();

            if (customer != null && customer.Warehouseid > 0 && sellerShoppingCart != null && sellerShoppingCart.itemDetails != null && sellerShoppingCart.itemDetails.Any())
            {
                var cluster = context.Clusters.Where(x => x.ClusterId == customer.ClusterId).FirstOrDefault();
                var warehouses = context.Warehouses.Where(x => x.WarehouseId == customer.Warehouseid).FirstOrDefault();
                List<double?> SellerPrices = sellerShoppingCart.itemDetails.Select(x => x.SellingPrice).Distinct().ToList();
                List<int> ItemMultiMrpIds = sellerShoppingCart.itemDetails.Select(x => x.ItemMultiMrpId).Distinct().ToList();
                var itemMultiMRPDB = context.ItemMultiMRPDB.Where(x => ItemMultiMrpIds.Contains(x.ItemMultiMRPId) && x.Deleted == false).Distinct().ToList();
                var itemNumber = itemMultiMRPDB.Select(x => x.ItemNumber).Distinct().ToList();
                var itemMaster = context.itemMasters.Where(x => /*x.WarehouseId == customer.Warehouseid &&*/  x.Cityid == customer.Cityid && itemNumber.Contains(x.Number) && SellerPrices.Contains(x.SellerStorePrice)).ToList();
                List<ItemScheme> itemPTR = retailerAppManager.GetItemScheme(ItemMultiMrpIds, customer.Warehouseid ?? 0);
                List<DataContracts.Masters.Store.ClusterStoreExecutiveDc> clusterStoreExecutiveDcs = retailerAppManager.GetStoreClusterExecutiveDetail();
                List<DataContracts.Masters.Store.StoreCategorySubCategoryBrand> StoreCategorySubCategoryBrands = retailerAppManager.GetStoreWithDetail();
                List<long> storeIds = new List<long>();
                string storeName = "";
                foreach (var item in itemMaster)
                {
                    if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == item.Categoryid && x.SubCategoryId == item.SubCategoryId && x.BrandId == item.SubsubCategoryid))
                    {
                        var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == item.Categoryid && x.SubCategoryId == item.SubCategoryId && x.BrandId == item.SubsubCategoryid);
                        storeIds.Add(store.StoreId);
                        storeName = store.StoreName;
                    }
                }

                foreach (var i in placeOrderResponse.SellerShoppingCart.itemDetails.Where(x => x.ItemMultiMrpId > 0 && x.SellingPrice > 0))
                {
                    ItemMaster items = null;
                    var multimrp = itemMultiMRPDB.Where(x => x.ItemMultiMRPId == i.ItemMultiMrpId).FirstOrDefault();

                    items = itemMaster.Where(x => x.Number == multimrp.ItemNumber && x.ItemMultiMRPId == i.ItemMultiMrpId && x.IsSellerStoreItem == true && x.SellerStorePrice == i.SellingPrice).FirstOrDefault();

                    if (items == null)
                    {
                        items = itemMaster.Where(x => x.Number == multimrp.ItemNumber && x.IsSellerStoreItem == true && x.SellerStorePrice == i.SellingPrice).FirstOrDefault();
                    }
                    i.IsSuccess = true;
                    if (items != null)
                    {
                        if (i.qty <= 0)
                        {

                            i.IsSuccess = false;
                            i.Message = "Quantity is 0.";
                        }
                        else if (i.qty != 0 && i.qty > 0)
                        {
                            if (items.Deleted)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item is deleted!!";
                            }

                            //var mod = Convert.ToDecimal(i.qty) % items.MinOrderQty;
                            //if (mod != 0)
                            //{
                            //    i.IsSuccess = false;
                            //    i.Message = "Item qty is not multiples of min order qty.";
                            //}

                            if (i.IsSuccess && i.SellingPrice != items.SellerStorePrice)
                            {
                                i.IsSuccess = false;
                                i.Message = "Item Unit Price has changed.";
                            }
                            else
                            {
                                OrderDetails od = new OrderDetails();
                                if (StoreCategorySubCategoryBrands != null && StoreCategorySubCategoryBrands.Any(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid))
                                {
                                    var store = StoreCategorySubCategoryBrands.First(x => x.Categoryid == items.Categoryid && x.SubCategoryId == items.SubCategoryId && x.BrandId == items.SubsubCategoryid);
                                    od.StoreId = store.StoreId;

                                    if (store.StoreId > 0 && clusterStoreExecutiveDcs != null && clusterStoreExecutiveDcs.Any(a => a.StoreId == store.StoreId && a.ClusterId == customer.ClusterId))
                                    {
                                        var clusterStoreExecutiveDc = clusterStoreExecutiveDcs.FirstOrDefault(a => a.StoreId == store.StoreId && a.ClusterId == customer.ClusterId);
                                        if (clusterStoreExecutiveDc != null)
                                        {
                                            od.ExecutiveId = clusterStoreExecutiveDc.ExecutiveId;
                                            od.ExecutiveName = clusterStoreExecutiveDc.ExecutiveName;
                                        }

                                    }
                                }
                                else
                                {
                                    od.StoreId = 0;
                                    od.ExecutiveId = 0;
                                    od.ExecutiveName = "";
                                }
                                od.UnitPrice = items.SellerStorePrice ?? 0;
                                od.CustomerId = customer.CustomerId;
                                od.CustomerName = customer.Name;
                                od.CityId = customer.Cityid;
                                od.Mobile = customer.Mobile;
                                od.OrderDate = DateTime.Now;
                                od.Status = customer.Active ? "Pending" : "Inactive";
                                od.CompanyId = warehouses.CompanyId;
                                od.WarehouseId = warehouses.WarehouseId;
                                od.WarehouseName = warehouses.WarehouseName;
                                od.NetPurchasePrice = items.NetPurchasePrice + ((items.NetPurchasePrice * items.TotalTaxPercentage) / 100);
                                od.ItemId = context.itemMasters.FirstOrDefault(x => x.WarehouseId == customer.Warehouseid && x.Number == items.Number).ItemId;       //items.ItemId;
                                od.ItemMultiMRPId = items.ItemMultiMRPId;
                                od.Itempic = items.LogoUrl;
                                od.itemname = items.itemname;
                                od.SupplierName = items.SupplierName;
                                od.SellingUnitName = items.SellingUnitName;
                                od.CategoryName = items.CategoryName;
                                od.SubsubcategoryName = items.SubsubcategoryName;
                                od.SubcategoryName = items.SubcategoryName;
                                od.SellingSku = items.SellingSku;
                                od.City = items.CityName;
                                od.itemcode = items.itemcode;
                                od.HSNCode = items.HSNCode;
                                od.itemNumber = items.Number;
                                od.Barcode = items.itemcode;

                                od.ActualUnitPrice = items.UnitPrice;
                                var schemeptr = itemPTR.Any(y => y.ItemMultiMRPId == items.ItemMultiMRPId) ? itemPTR.FirstOrDefault(y => y.ItemMultiMRPId == items.ItemMultiMRPId).PTR : 0;
                                if (schemeptr > 0)
                                {
                                    od.PTR = Math.Round((schemeptr - 1) * 100, 2); //percent
                                }
                                //If OfferCategory is 2 then it is a flash deal then We Decrease the Quantity from item master and apphomeitem

                                od.price = items.price;
                                od.MinOrderQty = items.MinOrderQty;
                                od.MinOrderQtyPrice = (od.MinOrderQty * od.UnitPrice);
                                od.qty = Convert.ToInt32(i.qty);
                                od.SizePerUnit = items.SizePerUnit;
                                od.TaxPercentage = items.TotalTaxPercentage;
                                if (od.TaxPercentage >= 0)
                                {
                                    od.SGSTTaxPercentage = od.TaxPercentage / 2;
                                    od.CGSTTaxPercentage = od.TaxPercentage / 2;
                                }
                                od.Noqty = od.qty; // for total qty (no of items)    
                                od.TotalAmt = System.Math.Round(od.UnitPrice * od.qty, 2);

                                if (items.TotalCessPercentage > 0)
                                {
                                    od.TotalCessPercentage = items.TotalCessPercentage;
                                    double tempPercentagge = items.TotalCessPercentage + items.TotalTaxPercentage;

                                    od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge / 100)) / 100;


                                    od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                    od.CessTaxAmount = (od.AmtWithoutAfterTaxDisc * od.TotalCessPercentage) / 100;
                                }


                                double tempPercentagge2 = items.TotalCessPercentage + items.TotalTaxPercentage;

                                od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge2 / 100)) / 100;
                                od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                od.TaxAmmount = (od.AmtWithoutAfterTaxDisc * od.TaxPercentage) / 100;
                                if (od.TaxAmmount >= 0)
                                {
                                    od.SGSTTaxAmmount = od.TaxAmmount / 2;
                                    od.CGSTTaxAmmount = od.TaxAmmount / 2;
                                }
                                //for cess
                                if (od.CessTaxAmount > 0)
                                {
                                    double tempPercentagge3 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                    od.AmtWithoutTaxDisc = ((100 * od.UnitPrice * od.qty) / (1 + tempPercentagge3 / 100)) / 100;
                                    od.AmtWithoutAfterTaxDisc = (100 * od.AmtWithoutTaxDisc) / (100 + items.PramotionalDiscount);
                                    od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.CessTaxAmount + od.TaxAmmount;
                                }
                                else
                                {
                                    od.TotalAmountAfterTaxDisc = od.AmtWithoutAfterTaxDisc + od.TaxAmmount;
                                }
                                od.DiscountPercentage = 0;// items.PramotionalDiscount;
                                od.DiscountAmmount = 0;// (od.NetAmmount * items.PramotionalDiscount) / 100;
                                double DiscountAmmount = od.DiscountAmmount;
                                double NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                                od.NetAmtAfterDis = (od.NetAmmount - DiscountAmmount);
                                double TaxAmmount = od.TaxAmmount;
                                od.Purchaseprice = items.PurchasePrice;
                                od.CreatedDate = DateTime.Now;
                                od.UpdatedDate = DateTime.Now;
                                od.Deleted = false;
                                od.marginPoint = items.dreamPoint * od.qty;//dp point multiplyby order qty                              
                                List<ItemClassificationDC> objclassificationDc = new List<ItemClassificationDC>();
                                objclassificationDc = GetItemClassifications(items.ItemNumber, customer.Warehouseid ?? 0);
                                od.ABCClassification = objclassificationDc.Any() ? objclassificationDc.Select(x => x.Category).FirstOrDefault() : "D";
                                objOrderMaster.orderDetails.Add(od);
                            }
                        }
                        if (!i.IsSuccess)
                        {
                            placeOrderResponse.IsSuccess = i.IsSuccess;
                            placeOrderResponse.Message = i.Message;
                            placeOrderResponse.SellerShoppingCart = sellerShoppingCart;
                            placeOrderResponse.GeneratedOrderId = 0;
                            return placeOrderResponse;
                        }
                    }
                    else
                    {
                        i.IsSuccess = false;
                        i.Message = "Item not exists";
                        placeOrderResponse.IsSuccess = false;
                        placeOrderResponse.Message = "Item not exists";
                        placeOrderResponse.SellerShoppingCart = sellerShoppingCart;
                        placeOrderResponse.GeneratedOrderId = 0;
                        return placeOrderResponse;
                    }
                }
                objOrderMaster.CompanyId = warehouses.CompanyId;
                objOrderMaster.WarehouseId = warehouses.WarehouseId;
                objOrderMaster.WarehouseName = warehouses.WarehouseName;
                objOrderMaster.CustomerCategoryId = 2;
                objOrderMaster.CustomerName = customer.Name;
                objOrderMaster.ShopName = customer.ShopName;
                objOrderMaster.LandMark = customer.LandMark;
                objOrderMaster.Skcode = customer.Skcode;
                objOrderMaster.Tin_No = customer.RefNo;
                objOrderMaster.CustomerType = "SellerStore";
                objOrderMaster.CustomerId = customer.CustomerId;
                objOrderMaster.CityId = customer.Cityid;
                objOrderMaster.Customerphonenum = (customer.Mobile);
                objOrderMaster.BillingAddress = customer.BillingAddress;
                objOrderMaster.ShippingAddress = customer.ShippingAddress;
                objOrderMaster.active = true;
                objOrderMaster.deliveryCharge = 0;
                objOrderMaster.Status = "Pending";
                objOrderMaster.TotalAmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.TotalAmt) + objOrderMaster.deliveryCharge.Value, 2);
                objOrderMaster.TaxAmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.TaxAmmount + x.CessTaxAmount), 2);
                objOrderMaster.SGSTTaxAmmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.SGSTTaxAmmount), 2);
                objOrderMaster.CGSTTaxAmmount = System.Math.Round(objOrderMaster.orderDetails.Sum(x => x.CGSTTaxAmmount), 2);
                objOrderMaster.GrossAmount = System.Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero);
                objOrderMaster.DiscountAmount = 0;
                objOrderMaster.OrderType = 1;
                objOrderMaster.ClusterId = customer.ClusterId ?? 0;
                objOrderMaster.ClusterName = customer.ClusterName;
                objOrderMaster.IsPrimeCustomer = customer.IsPrimeCustomer;
                objOrderMaster.Lat = sellerShoppingCart.Lat;
                objOrderMaster.Lng = sellerShoppingCart.Lng;
                objOrderMaster.CreatedDate = DateTime.Now;
                objOrderMaster.Deliverydate = indianTime.AddHours(48);
                objOrderMaster.ExpectedRtdDate = objOrderMaster.Deliverydate.Date.AddDays(-1); // Expected Rtd Date 22-04-2024
                objOrderMaster.UpdatedDate = DateTime.Now;
                context.DbOrderMaster.Add(objOrderMaster);
                context.Commit();
                if (customer != null)
                {
                    customer.ordercount = customer.ordercount + 1;
                    customer.MonthlyTurnOver = customer.MonthlyTurnOver + objOrderMaster.GrossAmount;
                    context.Entry(customer).State = EntityState.Modified;
                }
                objOrderMaster.Status = (customer.Active && cluster != null && cluster.Active) ? objOrderMaster.Status : (!customer.Active) ? "Pending" : "Inactive";

                #region TCS Calculate
                string fy = (DateTime.Now.Month >= 4 ? DateTime.Now.Year + 1 : DateTime.Now.Year).ToString();
                MongoDbHelper<TCSConfig> mConfigHelper = new MongoDbHelper<TCSConfig>();
                var tcsConfig = mConfigHelper.Select(x => x.FinancialYear == fy).FirstOrDefault();
                objOrderMaster.TCSAmount = 0;
                if (tcsConfig != null)
                {
                    MongoDbHelper<TCSCustomer> mHelper = new MongoDbHelper<TCSCustomer>();

                    var tcsCustomer = mHelper.Select(x => x.CustomerId == customer.CustomerId && x.FinancialYear == fy).FirstOrDefault();
                    if (tcsCustomer != null && tcsCustomer.TotalPurchase >= tcsConfig.TCSAmountLimit)
                    {
                        var percent = string.IsNullOrEmpty(customer.RefNo) ? tcsConfig.NotGSTTCSPercent : tcsConfig.GSTTCSPercent;
                        objOrderMaster.TCSAmount = (objOrderMaster.TotalAmount) * percent / 100;
                    }
                }
                #endregion

                objOrderMaster.TotalAmount = objOrderMaster.TotalAmount + objOrderMaster.TCSAmount;
                objOrderMaster.BillDiscountAmount = 0;
                objOrderMaster.GrossAmount = System.Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero);

                if (objOrderMaster.OrderId != 0)
                {
                    context.PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
                    {
                        amount = Math.Round(objOrderMaster.TotalAmount, 0, MidpointRounding.AwayFromZero),
                        CreatedDate = DateTime.Now,
                        currencyCode = "INR",
                        OrderId = objOrderMaster.OrderId,
                        PaymentFrom = "Cash",
                        status = "Success",
                        statusDesc = "Order Place",
                        UpdatedDate = DateTime.Now,
                        IsRefund = false
                    });

                    string Borderid = Convert.ToString(objOrderMaster.OrderId);
                    string BorderCodeId = Borderid.PadLeft(11, '0');
                    temOrderQBcode code = GetBarcode(BorderCodeId);
                    objOrderMaster.InvoiceBarcodeImage = code.BarcodeImage;

                }

                context.Entry(objOrderMaster).State = EntityState.Modified;
                context.Commit();
            }
            if (placeOrderResponse.SellerShoppingCart.itemDetails.Any(x => x.IsSuccess) && objOrderMaster.OrderId > 0)
            {
                placeOrderResponse.IsSuccess = true;
                placeOrderResponse.Message = "Order Place Successfully!!";
                placeOrderResponse.SellerShoppingCart = sellerShoppingCart;
                placeOrderResponse.GeneratedOrderId = objOrderMaster.OrderId;
                return placeOrderResponse;
            }

            if (placeOrderResponse.SellerShoppingCart.itemDetails.Any(x => !x.IsSuccess))
            {
                placeOrderResponse.IsSuccess = false;
                placeOrderResponse.Message = string.Join(", ", placeOrderResponse.SellerShoppingCart.itemDetails.Where(x => !x.IsSuccess).Select(x => x.Message));
            }
            return placeOrderResponse;
        }
        #endregion

        //barcode &qrcode generater
        public temOrderQBcode GetBarcode(string OrderId)
        {
            temOrderQBcode obj = new temOrderQBcode();
            try
            {

                string barcode = OrderId;

                //Barcode image into your system
                var barcodeLib = new BarcodeLib.Barcode(barcode);
                barcodeLib.Height = 120;
                barcodeLib.Width = 245;
                barcodeLib.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;//
                barcodeLib.ImageFormat = System.Drawing.Imaging.ImageFormat.Png;//
                System.Drawing.Font font = new System.Drawing.Font("verdana", 12f);//
                barcodeLib.LabelFont = font;
                barcodeLib.IncludeLabel = true;
                barcodeLib.Alignment = BarcodeLib.AlignmentPositions.CENTER;
                barcodeLib.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;//
                Image imeg = barcodeLib.Encode(TYPE.CODE128, barcode);//bytestream
                obj.BarcodeImage = (byte[])(new ImageConverter()).ConvertTo(imeg, typeof(byte[]));

                return obj;
            }

            catch (Exception err)
            {
                return obj;
            }
        }



        //barcode &qrcode AssignmentGenerateBarcode generater iface
        public temOrderQBcode AssignmentGenerateBarcode(string OrderId)
        {
            temOrderQBcode obj = new temOrderQBcode();
            try
            {
                string barcode = "AS" + OrderId;

                //Barcode image into your system
                var barcodeLib = new BarcodeLib.Barcode(barcode);
                //barcodeLib.Height = 120;
                //barcodeLib.Width = 245;
                barcodeLib.Height = 120;
                barcodeLib.Width = 290;
                barcodeLib.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;//
                barcodeLib.ImageFormat = System.Drawing.Imaging.ImageFormat.Png;//
                System.Drawing.Font font = new System.Drawing.Font("verdana", 13f);//
                barcodeLib.LabelFont = font;
                barcodeLib.IncludeLabel = true;
                barcodeLib.Alignment = BarcodeLib.AlignmentPositions.CENTER;
                barcodeLib.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;//
                Image imeg = barcodeLib.Encode(TYPE.CODE128, barcode);//bytestream
                obj.BarcodeImage = (byte[])(new ImageConverter()).ConvertTo(imeg, typeof(byte[]));

                return obj;
            }

            catch (Exception err)
            {
                return obj;
            }
        }



        #region old push orderMasters

        public bool AddOrderMasterForInactive(ShoppingCartForInactiveOrder sc, int oldWarehouseId, InActiveCustomerOrderMaster InData)
        {
            Customer cust = Customers.Where(c => c.Active == true && c.Mobile.Equals(sc.Customerphonenum)).Select(c => c).SingleOrDefault();

            if (cust.CompanyId > 0)
            {
                var warehouse = Warehouses.Where(w => w.WarehouseId == cust.Warehouseid).Select(c => c).SingleOrDefault();
                List<CompanyItemDetail> companyItems = new List<CompanyItemDetail>();
                foreach (var cItems in sc.itemDetails)
                {
                    if (companyItems.Count == 0)
                    {
                        CompanyItemDetail comItems = new CompanyItemDetail();
                        comItems.item_Detail = sc.itemDetails.Where(c => c.CompanyId == cItems.CompanyId).ToList();
                        companyItems.Add(comItems);
                    }
                    else
                    {
                        var add = false;
                        foreach (var cIt in companyItems)
                        {
                            var cpp = cIt.item_Detail.Where(c => c.CompanyId == cItems.CompanyId).FirstOrDefault();
                            if (cpp != null)
                            {
                                add = true;
                                break;
                            }
                        }
                        if (add == false)
                        {
                            CompanyItemDetail comItems = new CompanyItemDetail();
                            comItems.item_Detail = sc.itemDetails.Where(c => c.CompanyId == cItems.CompanyId).ToList();
                            companyItems.Add(comItems);
                        }
                    }
                }
                List<OrderMaster> OrderList = new List<OrderMaster>();
                foreach (var itmList in companyItems)
                {
                    double finaltotal = 0;
                    double finalTaxAmount = 0;
                    double finalSGSTTaxAmount = 0;
                    double finalCGSTTaxAmount = 0;
                    double finalGrossAmount = 0;
                    double finalTotalTaxAmount = 0;

                    //cess 
                    double finalCessTaxAmount = 0;

                    List<IDetail> cart = new List<IDetail>();
                    cart = itmList.item_Detail.Where(a => a.qty > 0).Select(a => a).ToList<IDetail>();
                    Int32 iddd = (Int32)cart[0].WarehouseId;

                    OrderMaster objOrderMaster = new OrderMaster();
                    try
                    {
                        objOrderMaster.CompanyId = warehouse.CompanyId;
                        objOrderMaster.WarehouseId = warehouse.WarehouseId;
                        objOrderMaster.WarehouseName = warehouse.WarehouseName;
                        objOrderMaster.CustomerCategoryId = 2;
                        objOrderMaster.Status = "Pending";
                        objOrderMaster.CustomerName = cust.Name;
                        objOrderMaster.ShopName = cust.ShopName;
                        objOrderMaster.LandMark = cust.LandMark;
                        objOrderMaster.Skcode = cust.Skcode;
                        objOrderMaster.Tin_No = cust.RefNo;
                        objOrderMaster.CustomerType = cust.CustomerType;
                        objOrderMaster.CustomerId = cust.CustomerId;
                        objOrderMaster.CityId = cust.Cityid;
                        objOrderMaster.Customerphonenum = (sc.Customerphonenum);

                        // MRP-Actual Price
                        objOrderMaster.Savingamount = System.Math.Round(sc.Savingamount, 2);
                        objOrderMaster.ClusterId = Convert.ToInt32(cust.ClusterId);
                        objOrderMaster.OnlineServiceTax = sc.OnlineServiceTax;
                        var clstr = Clusters.Where(x => x.ClusterId == cust.ClusterId).SingleOrDefault();
                        if (clstr != null)
                        {
                            objOrderMaster.ClusterName = clstr.ClusterName;
                        }
                        People p = null;//Peoples.Where(x => x.PeopleID == cust.ExecutiveId && x.Deleted == false && x.Active == true).SingleOrDefault();
                        if (p != null && sc.SalesPersonId != null && sc.SalesPersonId != 0)
                        {
                            try
                            {
                                People POrderPunchName = Peoples.Where(x => x.PeopleID == sc.SalesPersonId && x.Deleted == false && x.Active == true).SingleOrDefault(); // Add by Y
                                objOrderMaster.OrderTakenSalesPersonId = POrderPunchName.PeopleID; // change by Y
                                objOrderMaster.OrderTakenSalesPerson = POrderPunchName.PeopleFirstName + " " + POrderPunchName.PeopleLastName; // Change by Y
                                                                                                                                               //objOrderMaster.SalesMobile = p.Mobile;
                                                                                                                                               //objOrderMaster.SalesPersonId = p.PeopleID;
                                                                                                                                               //objOrderMaster.SalesPerson = p.PeopleFirstName + " " + p.PeopleLastName;
                            }
                            catch (Exception ex)
                            {
                                logger.Error(ex.Message + " Sales person id not exist We using 0/Self.");
                            }
                        }
                        else
                        {
                            try
                            {
                                if (p != null)
                                {
                                    //objOrderMaster.SalesMobile = p.Mobile;
                                    //objOrderMaster.SalesPersonId = p.PeopleID;
                                    //objOrderMaster.SalesPerson = p.PeopleFirstName + " " + p.PeopleLastName;
                                    objOrderMaster.OrderTakenSalesPersonId = 0;
                                    objOrderMaster.OrderTakenSalesPerson = "Self";
                                }


                                else
                                {

                                    objOrderMaster.OrderTakenSalesPersonId = 0;
                                    objOrderMaster.OrderTakenSalesPerson = "Self";
                                }
                            }
                            catch (Exception ex)
                            {
                                logger.Error(ex.Message + " Sales person id not exist We using 0/Self.");

                            }
                        }
                        if (sc.SalesPersonId == 0)
                        {
                            objOrderMaster.OrderTakenSalesPersonId = 0;
                            objOrderMaster.OrderTakenSalesPerson = "Self";
                        }
                        objOrderMaster.BillingAddress = sc.ShippingAddress;
                        objOrderMaster.ShippingAddress = sc.ShippingAddress;
                        objOrderMaster.active = true;
                        objOrderMaster.CreatedDate = indianTime;

                        //ETADate 
                        objOrderMaster.Deliverydate = indianTime.AddHours(48);
                        //Old Removed by Vineet 
                        //if (indianTime.Hour > 16)
                        //{
                        //    objOrderMaster.Deliverydate = indianTime.AddDays(2);
                        //}
                        //else
                        //{
                        //    objOrderMaster.Deliverydate = indianTime.AddDays(1);
                        //}
                        objOrderMaster.UpdatedDate = indianTime;
                        objOrderMaster.Deleted = false;
                        List<OrderDetails> collection = new List<OrderDetails>();
                        objOrderMaster.orderDetails = collection;
                        var rewardpoint = 0;
                        foreach (var i in cart.Select(x => x))
                        {
                            try
                            {
                                if (i.qty != 0 && i.qty > 0)
                                {
                                    ItemMaster itemMaster = itemMasters.Where(x => x.ItemId == i.ItemId && x.WarehouseId == oldWarehouseId).Select(x => x).FirstOrDefault();
                                    var items = InData.orderDetails.FirstOrDefault(x => x.ItemId == i.ItemId);
                                    OrderDetails od = new OrderDetails();
                                    od.CustomerId = cust.CustomerId;
                                    od.CustomerName = cust.Name;
                                    od.CityId = cust.Cityid;
                                    od.Mobile = cust.Mobile;
                                    od.OrderDate = indianTime;
                                    od.Status = "Pending";
                                    od.CompanyId = warehouse.CompanyId;

                                    //multimrp
                                    od.ItemMultiMRPId = items.ItemMultiMRPId;

                                    od.WarehouseId = warehouse.WarehouseId;
                                    od.WarehouseName = warehouse.WarehouseName;
                                    od.ItemId = items.ItemId;
                                    od.Itempic = items.Itempic;
                                    od.itemname = items.itemname;
                                    od.SupplierName = items.SupplierName;
                                    od.SellingUnitName = items.SellingUnitName;
                                    od.CategoryName = items.CategoryName;
                                    od.SubsubcategoryName = items.SubsubcategoryName;
                                    od.SubcategoryName = items.SubcategoryName;
                                    od.SellingSku = items.SellingSku;
                                    od.City = items.City;
                                    od.itemcode = items.itemcode;
                                    od.HSNCode = items.HSNCode;
                                    od.itemNumber = items.itemNumber;
                                    od.Barcode = items.itemcode;
                                    od.UnitPrice = items.UnitPrice;
                                    od.price = items.price;
                                    od.MinOrderQty = items.MinOrderQty;
                                    od.MinOrderQtyPrice = (od.MinOrderQty * items.UnitPrice);
                                    od.qty = Convert.ToInt32(i.qty);
                                    od.SizePerUnit = items.SizePerUnit;
                                    //if there is cess for that item
                                    try
                                    {
                                        if (itemMaster != null && itemMaster.TotalCessPercentage > 0)
                                        {
                                            od.TotalCessPercentage = itemMaster.TotalCessPercentage;
                                            double tempPercentagge = itemMaster.TotalCessPercentage + itemMaster.TotalTaxPercentage;

                                            od.AmtWithoutTaxDisc = items.AmtWithoutTaxDisc;
                                            od.AmtWithoutAfterTaxDisc = items.AmtWithoutAfterTaxDisc;
                                            od.CessTaxAmount = (od.AmtWithoutAfterTaxDisc * od.TotalCessPercentage) / 100;
                                        }

                                    }
                                    catch (Exception sd)
                                    {
                                    }
                                    od.Noqty = od.qty; // for total qty (no of items)    
                                    od.TotalAmt = System.Math.Round(od.UnitPrice * od.qty, 2);

                                    // for sgst cgst
                                    od.TaxPercentage = items.TaxPercentage;
                                    if (od.TaxPercentage >= 0)
                                    {
                                        od.SGSTTaxPercentage = od.TaxPercentage / 2;
                                        od.CGSTTaxPercentage = od.TaxPercentage / 2;
                                    }
                                    //double tempPercentagge2 = items.TotalCessPercentage + items.TotalTaxPercentage;
                                    od.AmtWithoutTaxDisc = items.AmtWithoutTaxDisc;
                                    od.AmtWithoutAfterTaxDisc = items.AmtWithoutAfterTaxDisc;
                                    od.TaxAmmount = items.TaxAmmount;
                                    od.SGSTTaxAmmount = items.SGSTTaxAmmount;
                                    od.CGSTTaxAmmount = items.CGSTTaxAmmount;

                                    od.DiscountPercentage = items.DiscountPercentage;
                                    od.DiscountAmmount = items.DiscountAmmount;

                                    od.NetAmtAfterDis = items.NetAmtAfterDis;

                                    od.Purchaseprice = items.NetPurchasePrice;
                                    od.CreatedDate = indianTime;
                                    od.UpdatedDate = indianTime;
                                    od.Deleted = false;

                                    od.marginPoint = items.marginPoint;//dp point multiplyby order qty
                                    rewardpoint += od.marginPoint.GetValueOrDefault();

                                    objOrderMaster.orderDetails.Add(od);
                                }
                            }
                            catch (Exception es)
                            {
                                logger.Error(es.Message + " if Item not activated or not exist ");
                            }
                        }

                        objOrderMaster.RewardPoint = InData.RewardPoint;
                        objOrderMaster.deliveryCharge = sc.deliveryCharge;
                        try
                        {
                            objOrderMaster.TotalAmount = InData.TotalAmount; //System.Math.Round(finaltotal, 2) + sc.deliveryCharge;
                            objOrderMaster.TaxAmount = InData.TaxAmount; //System.Math.Round(finalTaxAmount, 2);
                            objOrderMaster.SGSTTaxAmmount = InData.SGSTTaxAmmount; //System.Math.Round(finalSGSTTaxAmount, 2);
                            objOrderMaster.CGSTTaxAmmount = InData.CGSTTaxAmmount;//System.Math.Round(finalCGSTTaxAmount, 2);
                            objOrderMaster.GrossAmount = InData.GrossAmount; //System.Math.Round((Convert.ToInt32(finalGrossAmount) + sc.deliveryCharge), 0);
                                                                             //finalCessTaxAmount
                            objOrderMaster.DiscountAmount = InData.DiscountAmount;  //System.Math.Round((finalTotalTaxAmount - finaltotal), 0);

                            #region for truy pay online trasanction details
                            try
                            {
                                if (sc.Trupay != null)
                                {
                                    objOrderMaster.Trupay = sc.Trupay;
                                    TrupayTransaction tpt = new TrupayTransaction();
                                    tpt.TrupayTransactionStatus = objOrderMaster.Trupay;
                                    tpt.OrderId = objOrderMaster.OrderId;
                                    tpt.TrupayTransactionId = objOrderMaster.TrupayTransactionId;
                                    tpt.paymentMode = objOrderMaster.paymentMode;
                                    tpt.paymentThrough = objOrderMaster.paymentThrough;
                                    tpt.CustomerName = cust.Name;
                                    tpt.Status = "From Order";
                                    tpt.Skcode = cust.Skcode;
                                    tpt.WarehouseName = warehouse.WarehouseName;
                                    tpt.OnlineAmount = objOrderMaster.TotalAmount;
                                    tpt.OnlineServiceTax = objOrderMaster.OnlineServiceTax;
                                    tpt.CreatedDate = indianTime;
                                    this.TrupayTransactionDB.Add(tpt);
                                    this.Commit();
                                }
                                else
                                {

                                }
                            }
                            catch (Exception ess)
                            {
                                logger.Error(ess.Message + "From Order  ");
                            }
                            #endregion

                            #region RewardPoint  calculation 
                            var rpoint = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                            if (rpoint != null)
                            {
                                if (rewardpoint > 0)
                                {
                                    rpoint.EarningPoint += objOrderMaster.RewardPoint;
                                    rpoint.UpdatedDate = indianTime;
                                    //RewardPointDb.Attach(rpoint);
                                    this.Entry(rpoint).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }
                            else
                            {
                                RewardPoint point = new RewardPoint();
                                point.CustomerId = cust.CustomerId;
                                if (rewardpoint > 0)
                                    point.EarningPoint = objOrderMaster.RewardPoint;
                                else
                                    point.EarningPoint = 0;

                                point.TotalPoint = 0;
                                point.UsedPoint = 0;
                                point.MilestonePoint = 0;
                                point.CreatedDate = indianTime;
                                point.UpdatedDate = indianTime;
                                point.Deleted = false;
                                this.RewardPointDb.Add(point);
                                this.Commit();
                            }
                            #endregion
                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error in Get single GetcusomerWallets " + ex.Message);
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);

                    }
                    OrderList.Add(objOrderMaster);


                }
                var walletUsedPoint1 = sc.walletPointUsed;
                var walletAmount1 = sc.WalletAmount;
                CashConversion cash = CashConversionDb.FirstOrDefault(x => x.IsConsumer == false);
                foreach (var odr in OrderList.OrderByDescending(o => o.GrossAmount))
                {
                    double rewPoint = 0;
                    double rewAmount = 0;
                    if (odr.RewardPoint > 0 || walletUsedPoint1 > 0)
                    {
                        var rpointWarehouse = WarehousePointDB.Where(c => c.WarehouseId == odr.WarehouseId).SingleOrDefault();
                        int fnlAmount = Convert.ToInt32((odr.GrossAmount / cash.rupee) * cash.point);
                        if (rpointWarehouse != null)
                        {
                            Wallet w = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();

                            if (walletUsedPoint1 > 0 && w != null && w.TotalAmount > 0 && w.TotalAmount >= sc.walletPointUsed)
                            {

                                if (fnlAmount > walletUsedPoint1)
                                {
                                    rpointWarehouse.availablePoint -= walletUsedPoint1;
                                    rpointWarehouse.UsedPoint += walletUsedPoint1;
                                    rewPoint = walletUsedPoint1;
                                    walletUsedPoint1 = 0;
                                }
                                else
                                {
                                    rpointWarehouse.availablePoint -= rewPoint;
                                    rpointWarehouse.UsedPoint += rewPoint;
                                    walletUsedPoint1 -= fnlAmount;
                                    rewPoint = fnlAmount;
                                }

                                odr.walletPointUsed = rewPoint;
                                try
                                {
                                    rewAmount = ((rewPoint / cash.point) * cash.rupee);
                                    odr.WalletAmount = rewAmount;
                                }
                                catch
                                {
                                    odr.WalletAmount = 0;
                                }
                            }
                            else
                            {
                                odr.WalletAmount = 0;
                                odr.walletPointUsed = 0;
                            }

                            if (odr.RewardPoint > 0)
                            {
                                rpointWarehouse.availablePoint += odr.RewardPoint.GetValueOrDefault();
                                rpointWarehouse.TotalPoint += odr.RewardPoint.GetValueOrDefault();
                            }
                            //WarehousePointDB.Attach(rpointWarehouse);
                            this.Entry(rpointWarehouse).State = EntityState.Modified;
                            this.Commit();
                        }
                        else
                        {
                            odr.WalletAmount = 0;
                            odr.walletPointUsed = 0;
                            WarehousePoint wPoint = new WarehousePoint();
                            if (odr.RewardPoint > 0)
                            {
                                wPoint.availablePoint += odr.RewardPoint.GetValueOrDefault();
                                wPoint.TotalPoint += odr.RewardPoint.GetValueOrDefault();
                            }
                            wPoint.WarehouseId = odr.WarehouseId;
                            wPoint.CompanyId = odr.CompanyId;
                            wPoint.UsedPoint = 0;
                            WarehousePointDB.Add(wPoint);
                            this.Commit();
                        }
                    }
                    odr.GrossAmount = System.Math.Round((odr.GrossAmount - rewAmount), 0);
                    odr.TotalAmount = odr.TotalAmount - rewAmount;
                    DbOrderMaster.Add(odr);
                    int id = this.Commit();

                    PaymentResponseRetailerAppDb.Add(new PaymentResponseRetailerApp
                    {
                        amount = Math.Round(odr.TotalAmount, 0),
                        CreatedDate = indianTime,
                        currencyCode = "INR",
                        OrderId = odr.OrderId,
                        PaymentFrom = "Cash",
                        status = "Success",
                        statusDesc = "Due to Inactive Order Changed to Pending",
                        UpdatedDate = indianTime,
                        IsRefund = false
                    });


                    if (cust != null)
                    {
                        cust.ShippingAddress = sc.ShippingAddress;
                        cust.ordercount = cust.ordercount + 1;
                        cust.MonthlyTurnOver = cust.MonthlyTurnOver + odr.GrossAmount;
                        //Customers.Attach(cust);
                        this.Entry(cust).State = EntityState.Modified;
                        this.Commit();
                    }

                    //for first order
                    #region for first order
                    if (cust.ordercount == 1)//if this is customer first order
                    {
                        try
                        {
                            var walt = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                            if (walt != null)
                            {
                                try
                                {
                                    CustomerWalletHistory od = new CustomerWalletHistory();
                                    od.CustomerId = walt.CustomerId;
                                    //CustWarehouse custWarehouse = CustWarehouseDB.Where(c => c.CustomerId == walt.CustomerId).SingleOrDefault();
                                    Customer Customer = Customers.Where(c => c.CustomerId == walt.CustomerId).SingleOrDefault();
                                    od.WarehouseId = cust.Warehouseid ?? 0;
                                    od.CompanyId = cust.CompanyId ?? 0;
                                    od.OrderId = odr.OrderId;
                                    od.NewAddedWAmount = 150;
                                    od.TotalWalletAmount = walt.TotalAmount + od.NewAddedWAmount;
                                    od.UpdatedDate = indianTime;
                                    od.Through = "1st Order";
                                    od.TransactionDate = indianTime;
                                    od.CreatedDate = indianTime;
                                    CustomerWalletHistoryDb.Add(od);
                                    this.Commit();
                                }
                                catch (Exception exc)
                                {
                                }
                                walt.CustomerId = walt.CustomerId;
                                if (walt.TotalAmount == 0)
                                {
                                    walt.TotalAmount = 150;
                                }
                                else
                                {
                                    walt.TotalAmount = walt.TotalAmount + 150;
                                }
                                walt.UpdatedDate = indianTime;
                                //WalletDb.Attach(walt);
                                this.Entry(walt).State = EntityState.Modified;
                                this.Commit();

                            }
                            // FirstOrderNotification(cust.CustomerId);
                        }
                        catch
                        {
                        }
                    }

                    #endregion


                    try
                    {
                        #region  for wallet updated
                        if (sc.walletPointUsed > 0)
                        {
                            var rpoint1 = RewardPointDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                            var WData = WalletDb.Where(x => x.CustomerId == cust.CustomerId).SingleOrDefault();
                            if (rpoint1 != null)
                            {
                                if (WData != null && WData.TotalAmount > 0 && WData.TotalAmount >= sc.walletPointUsed)
                                {
                                    rpoint1.UsedPoint += sc.walletPointUsed;
                                    rpoint1.UpdatedDate = indianTime;
                                    //RewardPointDb.Attach(rpoint1);
                                    this.Entry(rpoint1).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }
                            //Wallet w = WalletDb.Where(c => c.CustomerId == cust.CustomerId).SingleOrDefault();
                            //var RPData = RewardPointDb.Where(x => x.CustomerId == cust.CustomerId).SingleOrDefault();

                            CustomerWalletHistory CWH = new CustomerWalletHistory();
                            if (WData != null && WData.TotalAmount > 0 && WData.TotalAmount >= sc.walletPointUsed)
                            {

                                //CustWarehouse custWarehouse = CustWarehouseDB.Where(c => c.CustomerId == WData.CustomerId).SingleOrDefault();
                                Customer Customer = Customers.Where(c => c.CustomerId == WData.CustomerId).SingleOrDefault();
                                CWH.WarehouseId = cust.Warehouseid ?? 0;
                                CWH.CompanyId = cust.CompanyId ?? 0;
                                CWH.CustomerId = WData.CustomerId;
                                CWH.Through = "Used On Order";
                                CWH.NewOutWAmount = sc.walletPointUsed;
                                CWH.TotalWalletAmount = WData.TotalAmount - sc.walletPointUsed;
                                CWH.TotalEarningPoint = rpoint1.EarningPoint;
                                CWH.CreatedDate = indianTime;
                                CWH.UpdatedDate = indianTime;
                                CWH.OrderId = odr.OrderId;
                                CustomerWalletHistoryDb.Add(CWH);
                                int idd = this.Commit();

                                //update in wallet
                                WData.TotalAmount -= sc.walletPointUsed;
                                WData.TransactionDate = indianTime;
                                //WalletDb.Attach(WData);
                                this.Entry(WData).State = EntityState.Modified;
                                this.Commit();

                            }
                        }
                        #endregion
                    }
                    catch (Exception ex) { logger.Error(ex.Message); }


                    if (id != 0)
                    {
                        #region  for Offer data
                        //var offer = OfferDb.Where(x => x.IsDeleted == false && x.FreeOfferType == "ItemMaster" && x.IsActive == true).ToList();
                        //try
                        //{
                        //    if (offer.Count > 0)
                        //    {
                        //        foreach (var data in offer)
                        //        {
                        //            if (data.start <= DateTime.Today && data.end >= DateTime.Today)
                        //            {
                        //                var Oktt = itemMasters.Where(c => c.ItemId == data.itemId && c.IsOffer == true && c.WarehouseId == data.WarehouseId).FirstOrDefault();
                        //                var dtts = itemMasters.Where(cg => cg.Number == Oktt.Number && cg.WarehouseId == Oktt.WarehouseId).ToList();
                        //                for (int i = 0; i < sc.itemDetails.Count; i++)
                        //                {
                        //                    foreach (var asd in dtts)
                        //                    {
                        //                        if (sc.itemDetails[i].ItemId == asd.ItemId && sc.itemDetails[i].qty >= data.MinOrderQuantity)
                        //                        {
                        //                            OfferItem ff = new OfferItem();
                        //                            ff.CompanyId = sc.itemDetails[i].CompanyId;
                        //                            ff.WarehouseId = sc.itemDetails[i].WarehouseId;
                        //                            ff.itemId = asd.ItemId;
                        //                            ff.itemname = asd.itemname;
                        //                            ff.MinOrderQuantity = data.MinOrderQuantity;
                        //                            int Q = (int)Math.Floor(Convert.ToDouble(sc.itemDetails[i].qty / ff.MinOrderQuantity));
                        //                            ff.NoOffreeQuantity = Q * data.NoOffreeQuantity;
                        //                            ff.FreeItemId = data.FreeItemId;
                        //                            ff.FreeItemName = data.FreeItemName;
                        //                            ff.FreeItemMRP = data.FreeItemMRP;
                        //                            ff.IsDeleted = false;
                        //                            ff.CreatedDate = DateTime.Now;
                        //                            ff.UpdateDate = DateTime.Now;
                        //                            ff.CustomerId = cust.CustomerId;
                        //                            ff.OrderId = odr.OrderId;
                        //                            ff.OfferType = "ItemMaster";
                        //                            OfferItemDb.Add(ff);
                        //                            this.SaveChanges();
                        //                        }
                        //                    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        //catch (Exception ex) { logger.Error(ex.Message); }

                        #endregion

                        int orderid = odr.OrderId;
                        var od = DbOrderMaster.Where(x => x.OrderId == orderid).FirstOrDefault();
                        if (od != null)
                        {
                            try
                            {
                                string Borderid = Convert.ToString(orderid);
                                string BorderCodeId = Borderid.PadLeft(11, '0');
                                temOrderQBcode code = GetBarcode(BorderCodeId);
                                od.InvoiceBarcodeImage = code.BarcodeImage;
                            }
                            catch (Exception es)
                            {
                            }

                            //IsCustFirstOrder
                            if (od.Status == "Pending")
                            {
                                if (this.IsCustFirstOrder(od.CustomerId))
                                {
                                    od.IsFirstOrder = true;
                                };
                            }



                            //od.invoice_no = "Od_" + Convert.ToString(orderid);
                            this.Entry(od).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                    #region for dial 
                    try
                    {
                        if (sc.DialEarnigPoint > 0)
                        {

                            DialValuePoint DialValue = new DialValuePoint();
                            DialValue.CustomerId = cust.CustomerId;
                            DialValue.Skcode = cust.Skcode;
                            DialValue.ShopName = cust.ShopName;
                            DialValue.point = sc.DialEarnigPoint;
                            DialValue.OrderId = odr.OrderId;
                            DialValue.OrderAmount = odr.GrossAmount;
                            DialValue.CreatedDate = indianTime;
                            this.DialValuePointDB.Add(DialValue);
                            this.Commit();
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                    #endregion

                    //string invoice = odr.invoice_no.ToString();
                    try
                    {
                        if (cust.ordercount > 1)
                        {
                            ForNotification(cust.CustomerId, odr.GrossAmount);
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                }



                return true;
            }
            else
            {
                logger.Error("Error code 01 ItemDetail should not be empty.");
            }
            return false;
        }


        #endregion

        #region Order Notification
        internal async Task<bool> ForNotification(int CustomerId, double amount)
        {
            bool res = false;
            try
            {
                //Notification notification = new Notification();
                //notification.title = "Order Placed Successfully";
                //notification.Message = "Dear Customer Your Order Placed of Total Amount=Rs." + amount;
                //notification.Pic = "";//"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";

                var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();

                //AddNotification(notification);

                if (customers != null)
                {

                    //string id11 = ConfigurationManager.AppSettings["FcmApiId"];


                    //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                    //tRequest.Method = "post";


                    //var objNotification = new
                    //{
                    //    to = customers.fcmId,
                    //    CustId = customers.CustomerId,
                    //    data = new
                    //    {
                    //        title = notification.title,
                    //        body = notification.Message,
                    //        icon = notification.Pic,
                    //        typeId = customers.CustomerId,
                    //        notificationCategory = "",
                    //        notificationType = "Non-Actionable"
                    //    }
                    //};

                    //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
                    //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                    //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                    //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
                    //tRequest.ContentLength = byteArray.Length;
                    //tRequest.ContentType = "application/json";
                    //using (Stream dataStream = tRequest.GetRequestStream())
                    //{
                    //    dataStream.Write(byteArray, 0, byteArray.Length);
                    //    using (WebResponse tResponse = tRequest.GetResponse())
                    //    {
                    //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                    //        {
                    //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                    //            {
                    //                String responseFromFirebaseServer = tReader.ReadToEnd();
                    //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                    //                if (response.success == 1)
                    //                {
                    //                    Console.Write(response);
                    //                }
                    //                else if (response.failure == 1)
                    //                {
                    //                    Console.Write(response);
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                    var data = new FCMData
                    {
                        title = "Order Placed Successfully",
                        body = "Dear Customer Your Order Placed of Total Amount=Rs." + amount,

                    };
                    var firebaseService = new FirebaseNotificationServiceHelper(Key);
                    var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
                    if (result != null)
                    {
                        res = true;
                    }
                    else
                    {
                        res = false;
                    }
                }
            }
            catch (Exception ds)
            {
                logger.Error("Error during customer order notification: " + ds.ToString());
            }
            return res;
        }
        #endregion
        #region First Order Notification
        private async Task<bool> FirstOrderNotification(int CustomerId, int rewardPoint)
        {
            bool res = false;
            try
            {
                //Notification notification = new Notification();
                //notification.title = "बधाई हो ! ";
                //notification.Message = "शॉपकिराना से जुड़ने के लिए धन्यवाद् ! आपको मिले हैं " + rewardPoint + " ड्रीम पॉइंट्स फ्री ! अब सारे ब्रांड एक जगह और फ्री डिलीवरी 24X7 आपके द्वार ";
                //notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
                //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
                //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                //string id11 = ConfigurationManager.AppSettings["FcmApiId"];
                //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                //tRequest.Method = "post";
                //var objNotification = new
                //{
                //    to = customers.fcmId,
                //    CustId = customers.CustomerId,
                //    data = new
                //    {
                //        title = notification.title,
                //        body = notification.Message,
                //        icon = notification.Pic,
                //        typeId = customers.CustomerId,
                //        notificationCategory = "",
                //        notificationType = "Non-Actionable"
                //    }
                //};
                //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
                //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                //tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
                //tRequest.ContentLength = byteArray.Length;
                //tRequest.ContentType = "application/json";
                //using (Stream dataStream = tRequest.GetRequestStream())
                //{
                //    dataStream.Write(byteArray, 0, byteArray.Length);
                //    using (WebResponse tResponse = tRequest.GetResponse())
                //    {
                //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                //        {
                //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                //            {
                //                String responseFromFirebaseServer = tReader.ReadToEnd();
                //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                //                if (response.success == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //                else if (response.failure == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //            }
                //        }
                //    }
                //}
                var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).SingleOrDefault();
                string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                var data = new FCMData
                {
                    title = "बधाई हो ! ",
                    body = "शॉपकिराना से जुड़ने के लिए धन्यवाद् ! आपको मिले हैं " + rewardPoint + " ड्रीम पॉइंट्स फ्री ! अब सारे ब्रांड एक जगह और फ्री डिलीवरी 24X7 आपके द्वार ",
                    image_url= "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",
                    typeId = customers.CustomerId,
                    notificationCategory = "",
                    notificationType = "Non-Actionable"
                };
                var firebaseService = new FirebaseNotificationServiceHelper(Key);
                var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
                if (result != null)
                {
                    res = true;
                }
                else
                {
                    res = false;
                }
            }
            catch (Exception ex)
            {
                logger.Error("FirstOrderNotification : " + ex.ToString());
            }
            return res;
        }
        #endregion


        #region Order Notification For Sales Man Order Placed
        internal async Task<bool> ForSalesManOrderPlaced(Customer cust, OrderMaster order)
        {
            bool res = false;
            try
            {
                //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                if (cust != null && cust.fcmId != null)
                {
                    //FCMRequest objNotification = new FCMRequest();
                    //objNotification.to = cust.fcmId;
                    //objNotification.CustId = cust.CustomerId;
                    //objNotification.MessageId = "";
                    //objNotification.data = new FCMData
                    //{
                    //    title = "Rate our executive !!",
                    //    body = "Dear Customer please rate our executive. ",
                    //    icon = "",
                    //    typeId = 1,   // typeid 1 salesman rating
                    //    notificationCategory = "Rating",
                    //    notificationType = "",
                    //    notificationId = 0,
                    //    notify_type = "ApphomeBottomCall",
                    //    url = "api/RetailerApp/GetSalesManRatingOrder/" + order.OrderId
                    //};
                    //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
                    //tRequest.Method = "post";
                    //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
                    //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                    //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                    //tRequest.ContentLength = byteArray.Length;
                    //tRequest.ContentType = "application/json";
                    //using (Stream dataStream = tRequest.GetRequestStream())
                    //{
                    //    dataStream.Write(byteArray, 0, byteArray.Length);
                    //    using (WebResponse tResponse = tRequest.GetResponse())
                    //    {
                    //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                    //        {
                    //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                    //            {
                    //                String responseFromFirebaseServer = tReader.ReadToEnd();
                    //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                    //                if (response.success == 1 && response.results != null && response.results.Any() && !string.IsNullOrEmpty(response.results.FirstOrDefault().message_id))
                    //                {
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                    var data = new FCMData
                    {
                        title = "Rate our executive !!",
                        body = "Dear Customer please rate our executive. ",
                        image_url = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png",
                        typeId = 1,   // typeid 1 salesman rating
                        notificationCategory = "Rating",
                        notificationType = "",
                        notificationId = 0,
                        notify_type = "ApphomeBottomCall",
                        url = "api/RetailerApp/GetSalesManRatingOrder/" + order.OrderId
                    };
                    string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                    var firebaseService = new FirebaseNotificationServiceHelper(Key);
                    var result = await firebaseService.SendNotificationForApprovalAsync(cust.fcmId, data);
                    if (result != null)
                    {
                        res = true;
                    }
                    else
                    {
                        res = false;
                    }
                }
            }
            catch (Exception ds)
            {
                logger.Error("Error during ForSalesManOrderPlaced: " + ds.ToString());
            }
            return res;
        }
        #endregion

        #region Supplier app chat notification 
        /// <summary>
        /// tejas if someone sends a chat from backend notification goes to supplier app if FCM ID is stored of supplier in DB
        /// </summary>
        /// <param name="SupplierId"></param>
        /// <param name="fsappchat"></param>
        public void SupplierNotificationChat(int SupplierId, string fsappchat, int? PurchaseId)
        {
            Notification notification = new Notification();
            notification.title = "New Chat for Purchase Order : " + PurchaseId;
            notification.Message = "new chat from ShopKirana : " + fsappchat;
            notification.PurchaseId = PurchaseId;
            var supp = Suppliers.Where(x => x.fcmId != null && x.SupplierId == SupplierId).SingleOrDefault();
            string Key = "AIzaSyB_Eg1t_fX-Z2YuEIxCEsvPLMhecpdRjzQ";//ConfigurationManager.AppSettings["FcmApiKey"];
                                                                   // string id11 = ConfigurationManager.AppSettings["FcmApiId"];
            WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            tRequest.Method = "post";
            var objNotification = new
            {
                to = supp.fcmId,
                data = new
                {
                    title = notification.title,
                    body = notification.Message,
                    icon = notification.Pic,
                    PurchaseId = notification.PurchaseId,
                }
            };
            string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
            Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
            tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
            tRequest.ContentLength = byteArray.Length;
            tRequest.ContentType = "application/json";

            try
            {
                using (Stream dataStream = tRequest.GetRequestStream())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                    using (WebResponse tResponse = tRequest.GetResponse())
                    {
                        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                        {
                            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                            {
                                String responseFromFirebaseServer = tReader.ReadToEnd();
                                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                                if (response.success == 1)
                                {
                                    Console.Write(response);
                                }
                                else if (response.failure == 1)
                                {
                                    Console.Write(response);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception s)
            {

            }
        }
        #endregion
        private string smstemplate(string nm, string invoice, string text)
        {
            string bodytext = text;
            bodytext = bodytext.Replace("%CustomerName%", nm);
            bodytext = bodytext.Replace("%OrderId%", invoice);
            return bodytext;
        }
        public IEnumerable<OrderDetails> Allorddetails(int compid)
        {
            if (DbOrderMaster.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return DbOrderDetails.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<OrderDetails> itemMasters = new List<OrderDetails>();
                return DbOrderDetails.Where(x => x.CompanyId == compid).AsEnumerable();
            }
        }
        public IEnumerable<DamageOrderDetails> AllDorddetails(int compid)
        {
            if (DamageOrderDetailsDB.AsEnumerable().Count() > 0)
            {
                return DamageOrderDetailsDB.AsEnumerable();
            }
            else
            {
                List<DamageOrderDetails> itemMasters = new List<DamageOrderDetails>();
                return DamageOrderDetailsDB.AsEnumerable();
            }
        }
        public DemandMaster Adddemand(DemandMaster dm)
        {
            DemandMaster demand = new DemandMaster();
            demand.CityId = 1;
            //demand.WarehouseId = dm.WarehouseId;
            demand.CreatedDate = indianTime;
            demand.demand = dm.demand;
            dbDemandMasters.Add(demand);
            int id = this.Commit();
            DemandDetails dd = new DemandDetails();
            foreach (var i in demand.demand.Select(x => x))
            {
                ItemMaster items = itemMasters.Where(x => x.itemname.Trim().ToLower() == i.itemname.Trim().ToLower() && x.CompanyId == dm.CompanyId).Select(x => x).FirstOrDefault();
                dd.itemname = i.itemname;
                dd.ItemId = items.ItemId;
                dd.Description = i.Description;
                dd.ItemCode = items.itemcode;
                dd.Quantity = i.Quantity;
                dd.MOQ = items.MinOrderQty;
            }
            return null;
        }
        public IEnumerable<SubsubCategory> sAllCategory(int compid)
        {
            if (SubsubCategorys.AsEnumerable().Count() > 0)
            {
                return SubsubCategorys.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<SubsubCategory> category = new List<SubsubCategory>();
                return category.AsEnumerable();
            }
        }
        public IEnumerable<Category> AllCategory(int compid)
        {
            if (Categorys.AsEnumerable().Count() > 0)
            {
                return Categorys.Where(p => p.Deleted == false && p.IsActive == true).AsEnumerable();
            }
            else
            {
                List<Category> category = new List<Category>();
                return category.AsEnumerable();
            }
        }
        public Category AddCategory(Category category)
        {
            List<Category> cat = Categorys.Where(c => c.Deleted == false && c.CategoryName.Trim().Equals(category.CategoryName.Trim())).ToList();
            Category objcat = new Category();
            if (cat.Count == 0)
            {
                category.CreatedBy = objcat.CreatedBy;
                category.CreatedDate = indianTime;
                category.UpdatedDate = indianTime;
                category.IsActive = true;
                category.itemcount = 1;
                category.Deleted = false;
                category.LogoUrl = category.LogoUrl;
                category.RDSLogoUrl = category.RDSLogoUrl;
                category.CategoryType = category.CategoryType;
                category.SeasonId = category.SeasonId;
                Categorys.Add(category);
                this.Commit(doNotMakerChecker: false);


                // category.LogoUrl = "http://137.59.52.130/../../images/catimages/" + category.BaseCategoryId + ".jpg";
                //Categorys.Attach(category);
                //this.Entry(category).State = EntityState.Modified;
                //int id = this.Commit();
                return category;
            }
            else
            {
                return objcat;
            }
        }
        public int AddCategoryImage(CategoryImage item)
        {
            try
            {
                CategoryImage ci = new CategoryImage();
                ci.CreatedDate = indianTime;
                ci.UpdatedDate = indianTime;
                ci.IsActive = true;
                ci.Deleted = false;
                ci.CategoryImg = item.CategoryImg;
                ci.CategoryId = item.CategoryId;
                ci.AppType = item.AppType;
                CategoryImageDB.Add(ci);
                this.Commit();
                return 1;
            }
            catch (Exception ee)
            {
                return 0;
            }

        }
        public CategoryImage AddCategoryImages(CategoryImage item)
        {
            try
            {
                CategoryImage isCategoryImageExist = CategoryImageDB.Where(x => x.CategoryId == item.CategoryId && x.Deleted == false && x.AppType == item.AppType).FirstOrDefault();
                if (isCategoryImageExist == null)
                {
                    CategoryImage ci = new CategoryImage();
                    ci.CreatedDate = indianTime;
                    ci.UpdatedDate = indianTime;
                    ci.IsActive = true;
                    ci.Deleted = false;
                    ci.CategoryImg = item.CategoryImg;
                    ci.CategoryId = item.CategoryId;
                    ci.AppType = item.AppType;
                    CategoryImageDB.Add(ci);
                    this.Commit();
                    return item;
                }
                else
                {
                    item.Isalreadyadd = item.Isalreadyadd = true;
                    return item;
                }
            }
            catch (Exception ee)
            {
                return null;
            }

        }
        public int PutCategoryImage(CategoryImage item)
        {
            try
            {
                CategoryImage categoryimg = CategoryImageDB.Where(x => x.CategoryImageId == item.CategoryImageId && x.Deleted == false).FirstOrDefault();
                categoryimg.CategoryImageId = item.CategoryImageId;
                categoryimg.CategoryImg = item.CategoryImg;
                categoryimg.CreatedDate = item.CreatedDate;
                categoryimg.UpdatedDate = indianTime;
                categoryimg.Deleted = false;
                categoryimg.IsActive = item.IsActive;
                categoryimg.CategoryId = item.CategoryId;
                categoryimg.AppType = item.AppType;
                //CategoryImageDB.Attach(categoryimg);
                this.Entry(categoryimg).State = EntityState.Modified;
                this.Commit();
                return 1;
            }
            catch (Exception ee)
            {
                return 0;
            }

        }
        public List<CategoryImageData> AllCategoryImages()
        {
            try
            {
                List<CategoryImageData> ci = new List<CategoryImageData>();
                ci = (from cia in CategoryImageDB
                      join c in Categorys on cia.CategoryId equals c.Categoryid
                      where cia.Deleted == false
                      orderby cia.CreatedDate descending
                      select new CategoryImageData
                      {
                          CategoryImageId = cia.CategoryImageId,
                          CategoryName = c.CategoryName,
                          CategoryImg = cia.CategoryImg,
                          IsActive = cia.IsActive,
                          CategoryId = cia.CategoryId,
                          CreatedDate = cia.CreatedDate,
                          AppType = cia.AppType,

                      }).ToList();
                return ci;
            }
            catch (Exception ee)
            {
                return null;
            }

        }
        public Category PutCategory(Category objcat)
        {
            Category category = Categorys.Where(x => x.Categoryid == objcat.Categoryid && x.Deleted == false).FirstOrDefault();
            BaseCategory BC = BaseCategoryDb.Where(x => x.BaseCategoryId == objcat.BaseCategoryId && x.Deleted == false).SingleOrDefault();
            if (category != null)
            {
                try
                {
                    if (BC != null)
                    {
                        category.BaseCategoryId = BC.BaseCategoryId;
                    }
                    else
                    {
                        category.BaseCategoryId = objcat.BaseCategoryId;
                    }
                    category.UpdatedDate = indianTime;
                    category.CategoryName = objcat.CategoryName;
                    category.HindiName = objcat.HindiName;
                    category.Discription = objcat.Discription;
                    string logourl = objcat.LogoUrl.Trim('"');
                    category.LogoUrl = logourl;
                    string RDSlogourl = objcat.RDSLogoUrl.Trim('"');
                    category.RDSLogoUrl = RDSlogourl;
                    category.Code = objcat.Code;
                    category.LogoUrl = objcat.LogoUrl;
                    category.RDSLogoUrl = objcat.RDSLogoUrl;
                    category.IsActive = objcat.IsActive;
                    category.Deleted = objcat.Deleted;
                    category.CategoryType = objcat.CategoryType;
                    category.SeasonId = objcat.SeasonId;
                    //Categorys.Attach(category);
                    this.Entry(category).State = EntityState.Modified;
                    this.Commit();

                    CommonHelper.refreshCategory();
                    return objcat;
                }
                catch (Exception ex)
                {
                    logger.Error("Error in addCategory " + ex.Message);
                    logger.Info("End  addCategory: ");
                    return null;
                }
            }
            else
            {
                return objcat;
            }
        }
        public IEnumerable<SubCategory> AllSubCategory(int compid)
        {
            if (SubCategorys.AsEnumerable().Count() > 0)
            {
                return SubCategorys.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<SubCategory> subcategory = new List<SubCategory>();
                return subcategory.AsEnumerable();
            }
        }
        public IEnumerable<SubCategory> AllSubCategoryy(int subcat, int CompanyId)
        {
            if (SubCategorys.AsEnumerable().Count() > 0)
            {
                return SubCategorys.Where(p => p.Categoryid == subcat && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<SubCategory> subcategory = new List<SubCategory>();
                return subcategory.AsEnumerable();
            }
        }
        public SubCategory AddSubCategory(SubCategory subCategory)
        {

            if (subCategory != null)
            {
                List<int> categoryIds = subCategory.CategoriesId;
                bool isFoodCategorytype = Categorys.Any(x => categoryIds.Contains(x.Categoryid) && x.CategoryType == 1 && x.Deleted == false && x.IsActive == true);

                var categoryNameList = Categorys.Where(x => categoryIds.Contains(x.Categoryid)).ToList();
                var objSubcat = SubCategorys.FirstOrDefault(x => x.SubcategoryName == subCategory.SubcategoryName);
                if (objSubcat == null)
                {
                    subCategory.CreatedBy = subCategory.CreatedBy;
                    subCategory.CreatedDate = indianTime;
                    subCategory.UpdatedDate = indianTime;
                    subCategory.Categoryid = subCategory.CategoriesId[0];
                    subCategory.CategoryName = string.Join(",", categoryNameList.Select(x => x.CategoryName));
                    subCategory.CategoryIds = string.Join(",", subCategory.CategoriesId);
                    //subCategory.CategoryName = string.Join(",", subCategory.CategoriesId);
                    subCategory.IsActive = true;
                    subCategory.itemcount = 1;
                    subCategory.Deleted = false;
                    SubCategorys.Add(subCategory);
                    if (isFoodCategorytype)
                    {
                        subCategory.CategoryType = 1;
                        int id = this.Commit(doNotMakerChecker: false);
                    }
                    else
                    {
                        subCategory.CategoryType = 0;
                        int id = this.Commit(doNotMakerChecker: true); ;
                    }


                    if (subCategory.SubCategoryId > 0)
                    {
                        foreach (var item in subCategory.CategoriesId)
                        {
                            SubcategoryCategoryMapping submapp = new SubcategoryCategoryMapping();
                            submapp.Categoryid = item;
                            submapp.SubCategoryId = subCategory.SubCategoryId;
                            submapp.CreatedDate = indianTime;
                            submapp.UpdatedDate = indianTime;
                            submapp.IsActive = true;
                            SubcategoryCategoryMappingDb.Add(submapp);
                        }
                        if (isFoodCategorytype)
                        {
                            subCategory.CategoryType = 1;
                            int SubCategoryMappingId = this.Commit(doNotMakerChecker: false);
                        }
                        else
                        {
                            subCategory.CategoryType = 0;
                            int SubCategoryMappingId = this.Commit(doNotMakerChecker: true);
                        }
                    }

                }
                else
                {
                    foreach (var item in subCategory.CategoriesId)
                    {
                        var mapping = SubcategoryCategoryMappingDb.Any(x => x.Categoryid == item && x.SubCategoryId == objSubcat.SubCategoryId);

                        if (!mapping)
                        {
                            SubcategoryCategoryMapping submapp = new SubcategoryCategoryMapping();
                            submapp.Categoryid = item;
                            submapp.SubCategoryId = objSubcat.SubCategoryId;
                            submapp.CreatedDate = indianTime;
                            submapp.UpdatedDate = indianTime;
                            submapp.IsActive = true;
                            SubcategoryCategoryMappingDb.Add(submapp);

                        }

                        if (isFoodCategorytype)
                        {
                            subCategory.CategoryType = 1;
                            int SubCategoryMappingId = this.Commit(doNotMakerChecker: false);
                        }
                        else
                        {
                            subCategory.CategoryType = 0;
                            int SubCategoryMappingId = this.Commit(doNotMakerChecker: true);
                        }


                    }
                }
            }
            //CommonHelper.refreshCategory();
            return subCategory;
        }
        public SubCategory PutSubCategory(SubCategory objSubCategory)
        {
            SubCategory subCategory = SubCategorys.Where(x => x.SubCategoryId == objSubCategory.SubCategoryId && x.Deleted == false).FirstOrDefault();
            Category cat = Categorys.Where(x => x.Categoryid == objSubCategory.Categoryid).FirstOrDefault();
            if (subCategory != null)
            {
                subCategory.UpdatedDate = indianTime;
                subCategory.SubCategoryId = objSubCategory.SubCategoryId;
                subCategory.SubcategoryName = objSubCategory.SubcategoryName;
                subCategory.HindiName = objSubCategory.HindiName;
                subCategory.Discription = objSubCategory.Discription;
                string logourl = objSubCategory.LogoUrl.Trim('"');
                subCategory.LogoUrl = logourl;
                subCategory.Code = objSubCategory.Code;
                subCategory.IsActive = objSubCategory.IsActive;
                subCategory.Deleted = objSubCategory.Deleted;
                subCategory.StoreType = objSubCategory.StoreType;
                subCategory.StoreImage = objSubCategory.StoreImage;
                subCategory.Sequence = objSubCategory.Sequence;
                subCategory.StoreBanner = objSubCategory.StoreBanner;
                subCategory.AllowInactiveOrderToPending = objSubCategory.AllowInactiveOrderToPending;
                //SubCategorys.Attach(subCategory);
                this.Entry(subCategory).State = EntityState.Modified;
                this.Commit();


                var submapps = SubcategoryCategoryMappingDb.Where(x => x.SubCategoryId == objSubCategory.SubCategoryId).ToList();
                foreach (var submapp in submapps)
                {
                    if (objSubCategory.CategoriesId.Contains(submapp.Categoryid))
                        submapp.IsActive = true;
                    else
                        submapp.IsActive = false;

                    submapp.UpdatedDate = indianTime;
                    this.Entry(submapp).State = EntityState.Modified;

                }

                foreach (var item in objSubCategory.CategoriesId.Where(x => !submapps.Select(z => z.Categoryid).Contains(x)))
                {
                    SubcategoryCategoryMapping submapp = new SubcategoryCategoryMapping();
                    submapp.Categoryid = item;
                    submapp.SubCategoryId = subCategory.SubCategoryId;
                    submapp.CreatedDate = indianTime;
                    submapp.UpdatedDate = indianTime;
                    submapp.IsActive = true;
                    SubcategoryCategoryMappingDb.Add(submapp);
                }
                this.Commit();

                return objSubCategory;
            }
            else
            {
                return objSubCategory;
            }
        }
        public bool DeleteSubCategory(int id, int CompanyId)
        {
            try
            {
                SubCategory subCategory = SubCategorys.Where(x => x.SubCategoryId == id && x.Deleted == false).FirstOrDefault();
                subCategory.Deleted = true;
                subCategory.IsActive = false;
                //SubCategorys.Attach(subCategory);
                this.Entry(subCategory).State = EntityState.Modified;
                this.Commit();

                CommonHelper.refreshCategory();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<SubsubCategory> AllSubsubCat(int compid)
        {
            if (SubsubCategorys.AsEnumerable().Count() > 0)
            {
                var subsubCat = SubsubCategorys.Where(p => p.Deleted == false).ToList();

                return subsubCat;
            }
            else
            {
                List<SubsubCategory> subsubcat = new List<SubsubCategory>();
                return subsubcat.AsEnumerable();
            }
        }
        public dynamic GenerateSubSubCode(int compid)
        {
            string SubSubCode1 = string.Empty;

            var SubSubCode = 101;
            if (SubSubCode != 0)
            {
                int i = 1;
                bool flag = false;
                while (flag == false)
                {
                    var skint = SubSubCode + i;
                    SubSubCode1 = skint.ToString();
                    List<SubsubCategory> check = SubsubCategorys.Where(s => s.Code.Trim().ToLower() == SubSubCode1.Trim().ToLower()).ToList();
                    if (check.Count == 0)
                    {
                        flag = true;
                        return SubSubCode1.ToString();
                    }
                    else
                    {
                        i = i + 1;
                    }
                }
            }
            return SubSubCode1;
        }
        public SubsubCategory AddSubsubCat(SubsubCategory subsubcat)
        {
            //SubsubCategory Ischecked = SubsubCategorys.Where(c => c.SubsubcategoryName.Contains(subsubcat.SubsubcategoryName) && c.Deleted == false).FirstOrDefault();
            SubsubCategory Ischecked = SubsubCategorys.Where(c => c.SubsubcategoryName.Trim().Equals(subsubcat.SubsubcategoryName.Trim()) && c.Deleted == false).FirstOrDefault();
            if (Ischecked == null)
            {

                List<SubsubCategory> subsubcats = SubsubCategorys.Where(c => c.SubsubCategoryid.Equals(subsubcat.SubsubCategoryid) && c.Deleted == false).ToList();
                //Category cat = Categorys.Where(x => x.Categoryid == subsubcat.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();

                SubcategoryCategoryMapping subcatcat = SubcategoryCategoryMappingDb.Where(x => x.SubCategoryMappingId == subsubcat.SubCategoryMappingId && x.Deleted == false).Select(x => x).FirstOrDefault();
                // SubCategory subcat = SubCategorys.Where(x => x.SubCategoryId == subcatcat.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();

                if (subsubcats.Count == 0)
                {
                    var objsubsubcat = SubsubCategorys.FirstOrDefault(x => x.SubsubcategoryName == subsubcat.SubsubcategoryName && x.Deleted == false);
                    if (objsubsubcat == null)
                    {
                        subsubcat.CreatedBy = subsubcat.CreatedBy;
                        subsubcat.CreatedDate = indianTime;
                        subsubcat.UpdatedDate = indianTime;
                        //  subsubcat.CategoryName = cat.CategoryName;
                        //   subsubcat.SubCategoryId = subcat.SubCategoryId;
                        //  subsubcat.SubcategoryName = subcat.SubcategoryName;
                        //subsubcat.IsActive = true;///
                        subsubcat.itemcount = 1;
                        SubsubCategorys.Add(subsubcat);
                        int id = this.Commit();

                        BrandCategoryMapping brand = new BrandCategoryMapping();
                        brand.SubsubCategoryId = subsubcat.SubsubCategoryid;
                        brand.SubCategoryMappingId = subsubcat.SubCategoryMappingId;
                        brand.CreatedDate = indianTime;
                        brand.UpdatedDate = indianTime;
                        brand.IsActive = true;
                        brand.AgentCommisionPercent = subsubcat.CommisionPercent.HasValue ? subsubcat.CommisionPercent.Value : 0;
                        BrandCategoryMappingDb.Add(brand);
                        int BrandCategoryMappingId = this.Commit();

                    }
                    else
                    {
                        var mapping = BrandCategoryMappingDb.Any(x => x.SubCategoryMappingId == subsubcat.SubCategoryMappingId && x.SubsubCategoryId == subsubcat.SubsubCategoryid);

                        if (!mapping)
                        {
                            BrandCategoryMapping brand = new BrandCategoryMapping();
                            brand.SubsubCategoryId = objsubsubcat.SubsubCategoryid;
                            brand.SubCategoryMappingId = subsubcat.SubCategoryMappingId;
                            brand.UpdatedDate = indianTime;
                            brand.CreatedDate = indianTime;
                            brand.IsActive = true;
                            brand.AgentCommisionPercent = subsubcat.CommisionPercent.HasValue ? subsubcat.CommisionPercent.Value : 0;
                            BrandCategoryMappingDb.Add(brand);
                            int BrandCategoryMappingId = this.Commit();
                        }
                    }
                }

                return subsubcat;
            }
            else
            {

                subsubcat.Isalreadyadd = subsubcat.Isalreadyadd = true;
                return subsubcat;
            }
        }
        public SubsubCategory PutSubsubCat(SubsubCategory objsubsubcat)
        {
            SubsubCategory Ischecked = SubsubCategorys.Where(c => c.SubsubcategoryName == objsubsubcat.SubsubcategoryName && c.SubsubCategoryid != objsubsubcat.SubsubCategoryid && c.Deleted == false).FirstOrDefault();
            if (Ischecked == null)
            {
                SubsubCategory quesanss = SubsubCategorys.Where(x => x.SubsubCategoryid == objsubsubcat.SubsubCategoryid).Where(x => x.Deleted == false).FirstOrDefault();
                // Category cat = Categorys.Where(x => x.Categoryid == objsubsubcat.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
                SubCategory subcat = SubCategorys.Where(x => x.SubCategoryId == objsubsubcat.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
                var BrandCateMapping = BrandCategoryMappingDb.Where(x => x.SubsubCategoryId == objsubsubcat.SubsubCategoryid).FirstOrDefault();
                List<int> categoryids = objsubsubcat.CategoriesId.Select(x => x.Key).ToList();
                if (quesanss != null)
                {
                    quesanss.UpdatedDate = indianTime;
                    // quesanss.Categoryid = objsubsubcat.Categoryid;
                    // quesanss.SubCategoryId = objsubsubcat.SubCategoryId;
                    // quesanss.CategoryName = cat.CategoryName;
                    string logourl = objsubsubcat.LogoUrl.Trim('"');
                    quesanss.LogoUrl = logourl;
                    // quesanss.SubcategoryName = subcat.SubcategoryName;
                    quesanss.SubsubcategoryName = objsubsubcat.SubsubcategoryName;
                    quesanss.Code = objsubsubcat.Code;
                    quesanss.Type = objsubsubcat.Type;
                    quesanss.IsActive = objsubsubcat.IsActive;
                    quesanss.Deleted = objsubsubcat.Deleted;
                    quesanss.CommisionPercent = objsubsubcat.CommisionPercent;
                    quesanss.HindiName = objsubsubcat.HindiName;
                    //SubsubCategorys.Attach(quesanss);
                    this.Entry(quesanss).State = EntityState.Modified;

                    var submapps = SubcategoryCategoryMappingDb.Where(x => x.SubCategoryId == objsubsubcat.SubCategoryId).ToList();
                    var brandMappings = BrandCategoryMappingDb.Where(x => x.SubsubCategoryId == objsubsubcat.SubsubCategoryid).ToList();

                    foreach (var submapp in submapps)
                    {
                        var brandMapping = brandMappings.FirstOrDefault(x => x.SubCategoryMappingId == submapp.SubCategoryMappingId);

                        if (brandMapping != null)
                        {
                            if (categoryids.Contains(submapp.Categoryid))
                            {
                                brandMapping.AgentCommisionPercent = objsubsubcat.CategoriesId.FirstOrDefault(x => x.Key == submapp.Categoryid).Value;
                                brandMapping.IsActive = true;
                            }
                            else
                                brandMapping.IsActive = false;


                            brandMapping.UpdatedDate = indianTime;
                            this.Entry(brandMapping).State = EntityState.Modified;
                        }
                    }


                    foreach (var item in submapps.Where(x => categoryids.Contains(x.Categoryid) && !brandMappings.Select(z => z.SubCategoryMappingId).Contains(x.SubCategoryMappingId)))
                    {
                        BrandCategoryMapping brand = new BrandCategoryMapping();
                        brand.SubsubCategoryId = objsubsubcat.SubsubCategoryid;
                        brand.SubCategoryMappingId = item.SubCategoryMappingId;
                        brand.CreatedDate = indianTime;
                        brand.UpdatedDate = indianTime;
                        brand.IsActive = true;
                        brand.AgentCommisionPercent = objsubsubcat.CategoriesId.FirstOrDefault(x => x.Key == item.Categoryid).Value;
                        BrandCategoryMappingDb.Add(brand);
                    }

                    this.Commit();
                    //CommonHelper.refreshsubsubCategory(cat.Categoryid);
                    return objsubsubcat;
                }
                else
                {
                    return objsubsubcat;
                }
            }
            else
            {

                objsubsubcat.Isalreadyadd = objsubsubcat.Isalreadyadd = true;
                return objsubsubcat;
            }
        }
        public bool DeleteSubsubCat(int id, int CompanyId)
        {
            try
            {
                SubsubCategory quesanss = SubsubCategorys.Where(x => x.SubsubCategoryid == id && x.Deleted == false).FirstOrDefault();
                quesanss.Deleted = true;
                quesanss.IsActive = false;
                //SubsubCategorys.Attach(quesanss);
                this.Entry(quesanss).State = EntityState.Modified;
                this.Commit();

                Category cat = Categorys.Where(x => x.Categoryid == quesanss.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
                CommonHelper.refreshsubsubCategory(cat.Categoryid);
                return true;
            }
            catch
            {
                return false;
            }
        }


        public SubsubCategory AddQuesAnsxl(SubsubCategory quesans)
        {
            List<SubsubCategory> quesanss = SubsubCategorys.Where(c => c.Categoryid.Equals(quesans.Categoryid) && c.Deleted == false).ToList();
            SubsubCategory objQuesAns = new SubsubCategory();
            if (quesanss.Count == 0)
            {
                quesans.CreatedBy = quesans.CreatedBy;
                quesans.CreatedDate = indianTime;
                quesans.UpdatedDate = indianTime;
                SubsubCategorys.Add(quesans);
                int id = this.Commit();
                return quesans;
            }
            else
            {
                return objQuesAns;
            }
        }
        //public List<ItemMaster> AddBulkItemMaster(List<ItemMaster> itemCollection)
        //{
        //    logger.Info("start Item Upload Exel File: ");
        //    List<Warehouse> wh = Warehouses.Where(x => x.Deleted == false).Select(x => x).ToList();
        //    List<string> Ids = new List<string>();

        //    foreach (var itemmaster in itemCollection)
        //    {
        //        try
        //        {
        //            City citym = Cities.Where(X => X.CityName == itemmaster.CityName && X.Deleted == false).Select(x => x).SingleOrDefault();
        //            List<TaxGroupDetails> TaxG = DbTaxGroupDetails.Where(x => x.GruopID == itemmaster.GruopID).Select(x => x).ToList();
        //            List<Warehouse> warehouse = Warehouses.Where(x => x.Cityid == citym.Cityid && x.WarehouseId == itemmaster.WarehouseId && x.Deleted == false).Select(x => x).ToList();

        //            double TotalTax = 0;
        //            if (TaxG.Count != 0)
        //            {
        //                foreach (var i in TaxG)
        //                {
        //                    TotalTax += i.TPercent;
        //                }
        //            }
        //            foreach (var o in warehouse)
        //            {
        //                ItemMaster objitemmaster = new ItemMaster();
        //                ItemMaster check = itemMasters.Where(w => w.WarehouseId == o.WarehouseId && w.SellingSku == itemmaster.SellingSku).SingleOrDefault();
        //                int stock = itemmaster.CurrentStock;
        //                if (check == null)
        //                {
        //                    try
        //                    {
        //                        // WarehouseCategory category = DbWarehouseCategory.Where(X => X.Warehouseid == o.Warehouseid && X.Deleted == false).Where(x => x.CategoryName == itemmaster.CategoryName).Select(x => x).FirstOrDefault();
        //                        WarehouseSubsubCategory scategory = DbWarehousesubsubcats.Where(X => X.CompanyId == o.CompanyId && X.Deleted == false).Where(x => x.SubsubcategoryName == itemmaster.SubsubcategoryName).Select(x => x).FirstOrDefault();
        //                        Category cate = Categorys.Where(x => x.CategoryName == itemmaster.CategoryName && x.Deleted == false).Select(x => x).SingleOrDefault();
        //                        BaseCategory basecat = BaseCategoryDb.Where(x => x.BaseCategoryName == itemmaster.BaseCategoryName && x.Deleted == false).Select(x => x).SingleOrDefault();
        //                        SubCategory subcategory = SubCategorys.Where(x => x.SubcategoryName == itemmaster.SubcategoryName && x.Categoryid == cate.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
        //                        SubsubCategory Subsubcategory = SubsubCategorys.Where(x => x.SubsubcategoryName == itemmaster.SubsubcategoryName && x.SubCategoryId == subcategory.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();

        //                        itemmaster.CategoryName = cate.CategoryName;
        //                        itemmaster.Categoryid = cate.Categoryid;
        //                        // base cat 
        //                        itemmaster.BaseCategoryName = basecat.BaseCategoryName;
        //                        itemmaster.BaseCategoryid = basecat.BaseCategoryId;

        //                        itemmaster.SubcategoryName = subcategory.SubcategoryName;
        //                        itemmaster.SubCategoryId = subcategory.SubCategoryId;
        //                        itemmaster.SubsubcategoryName = Subsubcategory.SubsubcategoryName;
        //                        itemmaster.SubSubCode = Subsubcategory.Code;
        //                        itemmaster.SubsubCategoryid = Subsubcategory.SubsubCategoryid;

        //                        if (cate.LogoUrl != null)
        //                        {
        //                            itemmaster.CatLogoUrl = cate.LogoUrl;
        //                        }
        //                        itemmaster.WarehouseId = o.WarehouseId;
        //                        itemmaster.CompanyId = o.CompanyId;
        //                        itemmaster.WarehouseName = o.WarehouseName;
        //                        itemmaster.Cityid = citym.Cityid;
        //                        itemmaster.CityName = citym.CityName;
        //                        itemmaster.CreatedDate = indianTime;
        //                        itemmaster.UpdatedDate = indianTime;
        //                        itemmaster.PramotionalDiscount = 0;
        //                        itemmaster.LogoUrl = "http://137.59.52.130/../../UploadedLogos/" + itemmaster.SellingSku + ".jpg";
        //                        itemmaster.TotalTaxPercentage = TotalTax;
        //                        logger.Info(" itemmaster excel for each loop before add: " + itemmaster.itemname);

        //                        itemmaster.UnitPrice = itemmaster.PurchasePrice + (itemmaster.PurchasePrice * itemmaster.Margin / 100);
        //                        if (itemmaster.Margin > 0)
        //                        {
        //                            var rs = RetailerShareDb.Where(r => r.cityid == itemmaster.Cityid).FirstOrDefault();
        //                            if (rs != null)
        //                            {
        //                                var cf = RPConversionDb.FirstOrDefault();
        //                                try
        //                                {
        //                                    double mv = (itemmaster.PurchasePrice * (itemmaster.Margin / 100) * (rs.share / 100) * cf.point);
        //                                    var value = Math.Round(mv, MidpointRounding.AwayFromZero);
        //                                    itemmaster.marginPoint = Convert.ToInt32(value);
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    logger.Error(ex.Message);
        //                                }
        //                            }
        //                        }
        //                        itemMasters.Add(itemmaster);
        //                        int Itemid = this.SaveChanges();
        //                        Itemid = itemmaster.ItemId;
        //                        Ids.Add(Itemid.ToString());
        //                        try
        //                        {
        //                            CurrentStock cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == scategory.WarehouseId).SingleOrDefault();
        //                            if (cntstock == null)
        //                            {
        //                                CurrentStock newCstk = new CurrentStock();
        //                                newCstk.ItemId = itemmaster.ItemId;
        //                                newCstk.CompanyId = itemmaster.CompanyId;
        //                                newCstk.itemBaseName = itemmaster.itemBaseName;
        //                                newCstk.itemname = itemmaster.itemname;
        //                                newCstk.ItemNumber = itemmaster.Number;
        //                                newCstk.Barcode = itemmaster.Barcode;
        //                                newCstk.WarehouseId = scategory.WarehouseId;
        //                                newCstk.WarehouseName = scategory.WarehouseName;
        //                                newCstk.CurrentInventory = stock;
        //                                newCstk.CreationDate = DateTime.Now;
        //                                newCstk.UpdatedDate = DateTime.Now;
        //                                DbCurrentStock.Add(newCstk);
        //                                this.SaveChanges();
        //                            }
        //                            else
        //                            {
        //                                cntstock.itemname = itemmaster.itemname;
        //                                cntstock.itemBaseName = itemmaster.itemBaseName;
        //                                cntstock.ItemNumber = itemmaster.Number;
        //                                cntstock.CompanyId = itemmaster.CompanyId;
        //                                cntstock.Barcode = itemmaster.Barcode;
        //                                cntstock.WarehouseId = scategory.WarehouseId;
        //                                cntstock.WarehouseName = scategory.WarehouseName;
        //                                cntstock.UpdatedDate = DateTime.Now;
        //                                cntstock.Deleted = false;
        //                                //DbCurrentStock.Attach(cntstock);
        //                                this.Entry(cntstock).State = EntityState.Modified;
        //                                this.SaveChanges();
        //                            }
        //                        }
        //                        catch (Exception ex)
        //                        {
        //                            logger.Error(ex.Message);
        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Error(ex.Message);
        //                    }
        //                }
        //                else
        //                {
        //                    try
        //                    {
        //                        var itemoldData = itemMasters.Where(x => x.ItemId == check.ItemId).SingleOrDefault();
        //                        ItemMasterHistory Os = new ItemMasterHistory();
        //                        if (itemoldData != null)
        //                        {
        //                            Os.ItemId = itemoldData.ItemId;
        //                            Os.Cityid = itemoldData.Cityid;
        //                            Os.CompanyId = itemoldData.CompanyId;
        //                            Os.CityName = itemoldData.CityName;
        //                            Os.Categoryid = itemoldData.Categoryid;
        //                            Os.SubCategoryId = itemoldData.SubCategoryId;
        //                            Os.SubsubCategoryid = itemoldData.SubsubCategoryid;
        //                            Os.WarehouseId = itemoldData.WarehouseId;
        //                            Os.SupplierId = itemoldData.SupplierId;
        //                            Os.SUPPLIERCODES = itemoldData.SUPPLIERCODES;
        //                            Os.CompanyId = itemoldData.CompanyId;
        //                            Os.CategoryName = itemoldData.CategoryName;
        //                            Os.BaseCategoryid = itemoldData.BaseCategoryid;
        //                            Os.BaseCategoryName = itemoldData.BaseCategoryName;
        //                            Os.SubcategoryName = itemoldData.SubcategoryName;
        //                            Os.SubsubcategoryName = itemoldData.SubsubcategoryName;
        //                            Os.SupplierName = itemoldData.SupplierName;
        //                            Os.itemname = itemoldData.itemname;
        //                            Os.itemcode = itemoldData.itemcode;
        //                            Os.SellingUnitName = itemoldData.SellingUnitName;
        //                            Os.PurchaseUnitName = itemoldData.PurchaseUnitName;
        //                            Os.price = itemoldData.price;
        //                            Os.VATTax = itemoldData.VATTax;
        //                            Os.active = itemoldData.active;
        //                            Os.LogoUrl = itemoldData.LogoUrl;
        //                            Os.CatLogoUrl = itemoldData.CatLogoUrl;
        //                            Os.MinOrderQty = itemoldData.MinOrderQty;
        //                            Os.PurchaseMinOrderQty = itemoldData.PurchaseMinOrderQty;
        //                            Os.GruopID = itemoldData.GruopID;
        //                            Os.TGrpName = itemoldData.TGrpName;
        //                            Os.Discount = itemoldData.Discount;
        //                            Os.UnitPrice = itemoldData.UnitPrice;
        //                            Os.Number = itemoldData.Number;
        //                            Os.PurchaseSku = itemoldData.PurchaseSku;
        //                            Os.SellingSku = itemoldData.SellingSku;
        //                            Os.PurchasePrice = itemoldData.PurchasePrice;
        //                            Os.GeneralPrice = itemoldData.GeneralPrice;
        //                            Os.title = itemoldData.title;
        //                            Os.Description = itemoldData.Description;
        //                            Os.StartDate = itemoldData.StartDate;
        //                            Os.EndDate = itemoldData.EndDate;
        //                            Os.PramotionalDiscount = itemoldData.PramotionalDiscount;
        //                            Os.TotalTaxPercentage = itemoldData.TotalTaxPercentage;
        //                            Os.WarehouseName = itemoldData.WarehouseName;
        //                            // Os.CreatedDate = itemoldData.CreatedDate;
        //                            Os.CreatedDate = DateTime.Now;
        //                            Os.UpdatedDate = itemoldData.UpdatedDate;
        //                            Os.Deleted = itemoldData.Deleted;
        //                            Os.IsDailyEssential = itemoldData.IsDailyEssential;
        //                            Os.DisplaySellingPrice = itemoldData.DisplaySellingPrice;
        //                            Os.StoringItemName = itemoldData.StoringItemName;
        //                            Os.SizePerUnit = itemoldData.SizePerUnit;
        //                            Os.HindiName = itemoldData.HindiName;
        //                            Os.Barcode = itemoldData.Barcode;
        //                            Os.HindiName = itemoldData.HindiName;
        //                            Os.Barcode = itemoldData.Barcode;
        //                            Os.IsSensitive = itemoldData.IsSensitive;
        //                            ItemMasterHistoryDb.Add(Os);
        //                            int id = this.SaveChanges();
        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Error("Error loading  item:- " + itemmaster.itemname + "\n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //                    }

        //                    WarehouseSubsubCategory scategory = DbWarehousesubsubcats.Where(X => X.CompanyId == o.CompanyId && X.Deleted == false).Where(x => x.SubsubcategoryName == itemmaster.SubsubcategoryName).Select(x => x).FirstOrDefault();
        //                    Category cate = Categorys.Where(x => x.CategoryName == itemmaster.CategoryName && x.Deleted == false).Select(x => x).SingleOrDefault();
        //                    BaseCategory basecat = BaseCategoryDb.Where(x => x.BaseCategoryName == itemmaster.BaseCategoryName && x.Deleted == false).Select(x => x).SingleOrDefault();
        //                    SubCategory subcategory = SubCategorys.Where(x => x.SubcategoryName == itemmaster.SubcategoryName && x.Categoryid == cate.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
        //                    SubsubCategory Subsubcategory = SubsubCategorys.Where(x => x.SubsubcategoryName == itemmaster.SubsubcategoryName && x.SubCategoryId == subcategory.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();




        //                    check.BaseCategoryName = basecat.BaseCategoryName;
        //                    check.BaseCategoryid = basecat.BaseCategoryId;
        //                    check.Categoryid = cate.Categoryid;
        //                    check.CategoryName = cate.CategoryName;
        //                    check.SubcategoryName = subcategory.SubcategoryName;
        //                    check.SubCategoryId = subcategory.SubCategoryId;
        //                    check.SubsubCategoryid = Subsubcategory.SubsubCategoryid;
        //                    check.SubsubcategoryName = Subsubcategory.SubsubcategoryName;
        //                    check.SubSubCode = Subsubcategory.Code;

        //                    check.itemname = itemmaster.itemname;
        //                    check.price = itemmaster.price;
        //                    check.GeneralPrice = itemmaster.GeneralPrice;
        //                    check.UnitPrice = itemmaster.UnitPrice;
        //                    check.MinOrderQty = itemmaster.MinOrderQty;
        //                    check.TotalTaxPercentage = TotalTax;

        //                    check.PurchaseUnitName = itemmaster.PurchaseUnitName;
        //                    check.PurchasePrice = itemmaster.PurchasePrice;
        //                    check.PurchaseMinOrderQty = itemmaster.PurchaseMinOrderQty;

        //                    check.SellingUnitName = itemmaster.SellingUnitName;
        //                    check.StoringItemName = itemmaster.StoringItemName;
        //                    check.PurchaseSku = itemmaster.PurchaseSku;
        //                    check.Number = itemmaster.Number;
        //                    check.SizePerUnit = itemmaster.SizePerUnit;
        //                    check.HindiName = itemmaster.HindiName;
        //                    check.SupplierId = itemmaster.SupplierId;
        //                    check.SUPPLIERCODES = itemmaster.SUPPLIERCODES;
        //                    check.SupplierName = itemmaster.SupplierName;
        //                    check.Cityid = itemmaster.Cityid;
        //                    check.Barcode = itemmaster.Barcode;
        //                    check.active = itemmaster.active;
        //                    check.Deleted = itemmaster.Deleted;
        //                    check.CityName = citym.CityName;
        //                    check.WarehouseId = o.WarehouseId;
        //                    check.CompanyId = o.CompanyId;
        //                    check.WarehouseName = o.WarehouseName;
        //                    check.Margin = itemmaster.Margin;
        //                    check.promoPoint = itemmaster.promoPoint;

        //                    itemmaster.LogoUrl = "http://137.59.52.130/../../UploadedLogos/" + itemmaster.SellingSku + ".jpg";
        //                    check.CatLogoUrl = cate.LogoUrl;

        //                    check.CreatedDate = check.CreatedDate;
        //                    check.UpdatedDate = indianTime;
        //                    check.UnitPrice = check.PurchasePrice + (check.PurchasePrice * check.Margin / 100);

        //                    if (check.Margin > 0)
        //                    {
        //                        var rs = RetailerShareDb.Where(r => r.cityid == itemmaster.Cityid).FirstOrDefault();
        //                        if (rs != null)
        //                        {
        //                            var cf = RPConversionDb.FirstOrDefault();
        //                            try
        //                            {
        //                                double mv = (check.PurchasePrice * (check.Margin / 100) * (rs.share / 100) * cf.point);
        //                                var value = Math.Round(mv, MidpointRounding.AwayFromZero);
        //                                itemmaster.marginPoint = Convert.ToInt32(value);
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                logger.Error(ex.Message);
        //                            }
        //                        }
        //                    }
        //                    //itemMasters.Attach(check);
        //                    this.Entry(check).State = EntityState.Modified;
        //                    this.SaveChanges();

        //                    try
        //                    {
        //                        CurrentStock cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == scategory.WarehouseId).SingleOrDefault();
        //                        if (cntstock == null)
        //                        {
        //                            CurrentStock newCstk = new CurrentStock();
        //                            newCstk.ItemId = itemmaster.ItemId;
        //                            newCstk.itemname = itemmaster.itemname;
        //                            newCstk.CompanyId = itemmaster.CompanyId;
        //                            newCstk.ItemNumber = itemmaster.Number;
        //                            newCstk.Barcode = itemmaster.Barcode;
        //                            newCstk.WarehouseId = scategory.WarehouseId;
        //                            newCstk.WarehouseName = scategory.WarehouseName;
        //                            newCstk.CurrentInventory = stock;
        //                            newCstk.CreationDate = DateTime.Now;
        //                            newCstk.UpdatedDate = DateTime.Now;
        //                            DbCurrentStock.Add(newCstk);
        //                            this.SaveChanges();
        //                        }
        //                        else
        //                        {
        //                            cntstock.itemname = itemmaster.itemname;
        //                            cntstock.ItemNumber = itemmaster.Number;
        //                            cntstock.CompanyId = itemmaster.CompanyId;
        //                            cntstock.Barcode = itemmaster.Barcode;
        //                            cntstock.WarehouseId = scategory.WarehouseId;
        //                            cntstock.WarehouseName = scategory.WarehouseName;
        //                            cntstock.UpdatedDate = DateTime.Now;
        //                            cntstock.Deleted = false;
        //                            //DbCurrentStock.Attach(cntstock);
        //                            this.Entry(cntstock).State = EntityState.Modified;
        //                            this.SaveChanges();
        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Error(ex.Message);
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            logger.Error("Error loading  item:- " + itemmaster.itemname + "\n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //        }
        //    }
        //    return null;
        //}
        public IEnumerable<ItemMaster> itembyid(int id, int CompanyId)
        {
            return itemMasters.Where(c => c.ItemId.Equals(id) && c.CompanyId == CompanyId);
        }
        public IEnumerable<ItemMaster> AllItemMasterWid(int CompanyId, int Warehouse_id)
        {
            return null;//itemMasters.Where(x => x.Deleted == false && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).AsEnumerable();
        }
        public IEnumerable<ItemMaster> GetActiveItemForOffer(int CompanyId, int WarehouseId)
        {
            return itemMasters.Where(x => x.Deleted == false && x.CompanyId == CompanyId && x.active == true && x.WarehouseId == WarehouseId).AsEnumerable();
        }
        public IEnumerable<ItemMaster> AllItemMaster(int CompanyId)
        {
            return null;// itemMasters.Where(x => x.Deleted == false && x.CompanyId == CompanyId).AsEnumerable();
        }
        public IEnumerable<ItemMaster> itembystring(string itemnm, int CompanyId)
        {
            var listitems = itemMasters.Where(x => x.itemname.ToLower().Contains(itemnm.Trim().ToLower()) && x.active == true).ToList().Take(10);
            //return listitems.Where(x => x.active == true);
            return listitems;
        }
        #region search item on app function
        public List<ItemMaster> itembystringWid(string itemnm, int CompanyId, int CustomerId)
        {

            List<ItemMaster> itemlst = new List<ItemMaster>();
            var custBrand = Customers.Where(x => x.CustomerId == CustomerId && x.Deleted == false).FirstOrDefault();
            if (custBrand != null)
            {
                var listitems = itemMasters.Where(x => x.itemname.ToLower().Contains(itemnm.Trim().ToLower()) && x.active == true && x.WarehouseId == custBrand.Warehouseid).ToList().Take(10).ToList();
                foreach (var it in listitems)
                {
                    it.itemname = it.SellingUnitName;
                    itemlst.Add(it);
                }
            }
            else
            {
                return itemlst;
            }

            return itemlst;
        }

        public List<ItemMaster> SearchitemSaleman(string itemname, int PeopleID)
        {
            List<ItemMaster> itemlst = new List<ItemMaster>();
            List<string> SkUNumber = new List<string>();
            // var custBrand = CustWarehouseDB.Where(x => x.ExecutiveId == PeopleID).ToList();

            //var custBrand = CustWarehouseDB.Where(x => x.ExecutiveId == PeopleID && x.WarehouseId != null).GroupBy(x => x.WarehouseId).ToList().Select(x => x.FirstOrDefault()).ToList();

            var custBrand = Peoples.Where(x => x.PeopleID == PeopleID && x.WarehouseId != 0 && x.Deleted == false && x.Active == true).ToList();

            if (custBrand.Count > 0)
            {
                foreach (var cw in custBrand)
                {

                    var listitems = itemMasters.Where(x => x.itemname.ToLower().Contains(itemname.Trim().ToLower()) && x.active == true && x.WarehouseId == cw.WarehouseId).ToList().Take(10).ToList();


                    foreach (var it in listitems)
                    {
                        if (it != null && !SkUNumber.Any(x => x == it.SellingSku))
                        {
                            it.itemname = it.SellingUnitName;
                            itemlst.Add(it);
                            SkUNumber.Add(it.SellingSku);

                        }

                    }

                }
            }
            else
            {
                return itemlst;
            }
            return itemlst;
        }

        #endregion
        #region add item in central
        public ItemMasterCentral AddItemMaster(ItemMasterCentral itemmaster)
        {
            People people = Peoples.Where(x => x.PeopleID == itemmaster.userid).SingleOrDefault();
            List<ItemMasterCentral> itemMasterexits = ItemMasterCentralDB.Where(c => c.Number.Trim().Equals(itemmaster.Number.Trim()) && c.CompanyId == itemmaster.CompanyId).ToList();
            ItemMasterCentral Check = ItemMasterCentralDB.Where(c => c.SellingSku.Trim().Equals(itemmaster.SellingSku.Trim()) && c.CompanyId == itemmaster.CompanyId).FirstOrDefault();
            Category category = new Category();
            SubCategory subcategory = new SubCategory();
            SubsubCategory Subsubcategory = new SubsubCategory();
            TaxGroupDetails taxgroup = new TaxGroupDetails();
            TaxGroup Tg = new TaxGroup();
            double TotalTax = 0;
            double TotalCessTax = 0;
            // this tax group
            TaxGroupDetails Cessgroup = new TaxGroupDetails();
            TaxGroup CessTg = new TaxGroup();
            if (itemMasterexits.Count > 0)
            {


                ItemMasterCentral Createditem = itemMasterexits[0];
                TotalTax = Createditem.TotalTaxPercentage;//
                TotalCessTax = Createditem.TotalCessPercentage;//
                taxgroup.GruopID = Createditem.GruopID;//
                Tg.TGrpName = Createditem.TGrpName;
                Cessgroup.GruopID = Createditem.CessGrpID ?? 0;
                CessTg.TGrpName = Createditem.CessGrpName;
                category = Categorys.Where(x => x.Categoryid == Createditem.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
                subcategory = SubCategorys.Where(x => x.SubCategoryId == Createditem.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
                Subsubcategory = SubsubCategorys.Where(x => x.SubsubCategoryid == Createditem.SubsubCategoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
            }
            else
            {
                category = Categorys.Where(x => x.Categoryid == itemmaster.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
                subcategory = SubCategorys.Where(x => x.SubCategoryId == itemmaster.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
                Subsubcategory = SubsubCategorys.Where(x => x.SubsubCategoryid == itemmaster.SubsubCategoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
                try
                {
                    taxgroup = DbTaxGroupDetails.Where(x => x.GruopID == itemmaster.GruopID && x.CompanyId == itemmaster.CompanyId).Select(x => x).FirstOrDefault();
                    if (taxgroup != null)
                    {
                        itemmaster.GruopID = taxgroup.GruopID;
                    }
                    Tg = DbTaxGroup.Where(x => x.GruopID == itemmaster.GruopID && x.Deleted == false && x.CompanyId == itemmaster.CompanyId).Select(x => x).FirstOrDefault();
                    if (Tg != null) { itemmaster.TGrpName = Tg.TGrpName; }
                    List<TaxGroupDetails> TaxG = DbTaxGroupDetails.Where(x => x.GruopID == itemmaster.GruopID && x.CompanyId == itemmaster.CompanyId).Select(x => x).ToList();
                    if (TaxG.Count != 0)
                    {
                        foreach (var i in TaxG)
                        {
                            TotalTax += i.TPercent;
                        }
                    }
                }
                catch (Exception sd) { }
                try
                {
                    if (itemmaster.CessGrpID > 0)
                    {
                        Cessgroup = DbTaxGroupDetails.Where(x => x.GruopID == itemmaster.CessGrpID && x.CompanyId == itemmaster.CompanyId).Select(x => x).FirstOrDefault();
                        CessTg = DbTaxGroup.Where(x => x.GruopID == itemmaster.CessGrpID && x.Deleted == false && x.CompanyId == itemmaster.CompanyId).Select(x => x).FirstOrDefault();
                        List<TaxGroupDetails> CesstaxG = DbTaxGroupDetails.Where(x => x.GruopID == itemmaster.CessGrpID && x.CompanyId == itemmaster.CompanyId).Select(x => x).ToList();
                        if (CesstaxG.Count != 0)
                        {
                            foreach (var i in CesstaxG)
                            {
                                TotalCessTax += i.TPercent;
                            }
                        }
                    }

                }
                catch (Exception swdr)
                { }
            }
            List<Warehouse> warehouses = Warehouses.Where(x => x.Deleted == false && x.CompanyId == itemmaster.CompanyId).ToList();
            if (Check == null)
            {
                ///first record in Central for MRP
                ItemMultiMRP MultiMRPitem = new ItemMultiMRP();
                ItemMultiMRP recordExits = ItemMultiMRPDB.Where(x => x.ItemNumber == itemmaster.Number && x.Deleted == false && x.MRP == itemmaster.price).FirstOrDefault();
                if (recordExits != null)
                {
                    MultiMRPitem = recordExits;
                }
                else
                {
                    MultiMRPitem = ItemMultiMRPDB.Where(x => x.ItemNumber == itemmaster.Number && x.ItemMultiMRPId == itemmaster.ItemMultiMRPId).SingleOrDefault();
                    if (MultiMRPitem == null)
                    {
                        ItemMultiMRP Immrp = new ItemMultiMRP();
                        Immrp.CompanyId = itemmaster.CompanyId;

                        Immrp.ItemNumber = itemmaster.Number;
                        Immrp.MRP = itemmaster.price;

                        Immrp.UnitofQuantity = itemmaster.UnitofQuantity;
                        Immrp.UOM = itemmaster.UOM;
                        Immrp.CreatedDate = indianTime;
                        Immrp.UpdatedDate = indianTime;
                        ItemMultiMRPDB.Add(Immrp);
                        Commit();
                        MultiMRPitem = Immrp;
                    }
                }

                itemmaster.MRP = itemmaster.price;

                itemmaster.TotalTaxPercentage = TotalTax;
                //cesss
                try
                {
                    itemmaster.CessGrpID = Cessgroup.GruopID;
                    itemmaster.CessGrpName = CessTg.TGrpName;
                    itemmaster.TotalCessPercentage = TotalCessTax;
                }
                catch (Exception asdf)
                {
                }
                itemmaster.BaseCategoryid = category.BaseCategoryId;
                itemmaster.LogoUrl = itemmaster.LogoUrl;
                itemmaster.UpdatedDate = indianTime;
                itemmaster.CreatedDate = indianTime;
                itemmaster.CategoryName = category.CategoryName;
                itemmaster.Categoryid = category.Categoryid;
                itemmaster.SubcategoryName = subcategory.SubcategoryName;
                itemmaster.SubCategoryId = subcategory.SubCategoryId;
                itemmaster.SubsubcategoryName = Subsubcategory.SubsubcategoryName;
                itemmaster.SubsubCategoryid = Subsubcategory.SubsubCategoryid;
                itemmaster.SubSubCode = Subsubcategory.Code;

                if (itemmaster.Margin > 0)
                {
                    var rs = RetailerShareDb/*.Where(r => r.cityid == itemmaster.Cityid)*/.FirstOrDefault();
                    if (rs != null)
                    {
                        var cf = RPConversionDb.FirstOrDefault();
                        try
                        {
                            double mv = (itemmaster.PurchasePrice * (itemmaster.Margin / 100) * (rs.share / 100) * cf.point);
                            var value = Math.Round(mv, MidpointRounding.AwayFromZero);
                            itemmaster.marginPoint = Convert.ToInt32(value);
                        }
                        catch (Exception ex)
                        {
                            logger.Error(ex.Message);
                        }
                    }
                }

                //Display Name binding
                itemmaster.itemBaseName = itemmaster.itemBaseName;
                itemmaster.itemname = itemmaster.itemname;
                itemmaster.ItemMultiMRPId = MultiMRPitem.ItemMultiMRPId;
                itemmaster.PTR = itemmaster.PTR;
                itemmaster.BaseScheme = itemmaster.BaseScheme;
                ItemMasterCentralDB.Add(itemmaster);
                this.Commit();
                foreach (var o in warehouses)
                {

                    ItemMaster it = new ItemMaster();
                    if (taxgroup != null) { it.GruopID = taxgroup.GruopID; it.TGrpName = Tg.TGrpName; it.TotalTaxPercentage = TotalTax; }
                    if (Cessgroup != null) { it.CessGrpID = Cessgroup.GruopID; it.CessGrpName = CessTg.TGrpName; it.TotalCessPercentage = TotalCessTax; }
                    it.CatLogoUrl = Subsubcategory.LogoUrl;
                    it.WarehouseId = o.WarehouseId;
                    it.WarehouseName = o.WarehouseName;
                    it.BaseCategoryid = category.BaseCategoryId;
                    it.LogoUrl = itemmaster.LogoUrl;
                    it.UpdatedDate = indianTime;
                    it.CreatedDate = indianTime;
                    it.CategoryName = itemmaster.CategoryName;
                    it.Categoryid = itemmaster.Categoryid;
                    it.SubcategoryName = itemmaster.SubcategoryName;
                    it.SubCategoryId = itemmaster.SubCategoryId;
                    it.SubsubcategoryName = itemmaster.SubsubcategoryName;
                    it.SubsubCategoryid = itemmaster.SubsubCategoryid;
                    it.SubSubCode = Subsubcategory.Code;
                    it.itemcode = itemmaster.itemcode;
                    it.marginPoint = itemmaster.marginPoint;
                    it.Number = itemmaster.Number;
                    it.PramotionalDiscount = itemmaster.PramotionalDiscount;
                    it.MinOrderQty = itemmaster.MinOrderQty;
                    it.NetPurchasePrice = itemmaster.NetPurchasePrice;
                    it.GeneralPrice = itemmaster.GeneralPrice;
                    it.price = itemmaster.price;
                    it.promoPerItems = itemmaster.promoPerItems;
                    it.promoPoint = itemmaster.promoPoint;
                    it.PurchaseMinOrderQty = itemmaster.PurchaseMinOrderQty;
                    it.PurchasePrice = itemmaster.PurchasePrice;
                    it.PurchaseSku = itemmaster.PurchaseSku;
                    it.PurchaseUnitName = itemmaster.PurchaseUnitName;
                    it.SellingSku = itemmaster.SellingSku;
                    it.SellingUnitName = itemmaster.SellingUnitName;
                    it.SizePerUnit = itemmaster.SizePerUnit;
                    it.UnitPrice = itemmaster.UnitPrice;
                    it.VATTax = itemmaster.VATTax;
                    it.HSNCode = itemmaster.HSNCode;
                    it.HindiName = itemmaster.HindiName;
                    it.CompanyId = itemmaster.CompanyId;
                    it.Reason = itemmaster.Reason;
                    it.DefaultBaseMargin = itemmaster.DefaultBaseMargin;
                    it.Deleted = false;
                    it.active = false;
                    it.itemname = itemmaster.itemname;
                    it.itemBaseName = itemmaster.itemBaseName;
                    it.UOM = itemmaster.UOM;
                    it.UnitofQuantity = itemmaster.UnitofQuantity;
                    it.ItemMultiMRPId = MultiMRPitem.ItemMultiMRPId;
                    it.IsSensitive = itemmaster.IsSensitive;
                    it.IsSensitiveMRP = itemmaster.IsSensitiveMRP;
                    it.ShelfLife = itemmaster.ShelfLife;
                    it.IsReplaceable = itemmaster.IsReplaceable;
                    it.BomId = itemmaster.BomId;
                    it.Type = itemmaster.Type;
                    itemMasters.Add(it);
                    this.Commit();
                    CurrentStock cntstock = new CurrentStock();
                    cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == o.WarehouseId && x.CompanyId == itemmaster.CompanyId && x.ItemMultiMRPId == itemmaster.ItemMultiMRPId && x.Deleted == false).SingleOrDefault();
                    //if (itemmaster.IsSensitiveMRP)
                    //{
                    //    cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == o.WarehouseId && x.CompanyId == itemmaster.CompanyId && x.Deleted == false).FirstOrDefault();
                    //}
                    //else
                    //{
                    //    cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == o.WarehouseId && x.CompanyId == itemmaster.CompanyId && x.ItemMultiMRPId == itemmaster.ItemMultiMRPId && x.Deleted == false).SingleOrDefault();
                    //}
                    if (cntstock == null)
                    {
                        CurrentStock newCstk = new CurrentStock();
                        newCstk.ItemNumber = itemmaster.Number;
                        newCstk.WarehouseId = o.WarehouseId;
                        newCstk.WarehouseName = o.WarehouseName;
                        newCstk.CompanyId = itemmaster.CompanyId;
                        newCstk.CurrentInventory = 0;
                        newCstk.CreationDate = indianTime;
                        newCstk.UpdatedDate = indianTime;
                        // Multimrp
                        newCstk.MRP = itemmaster.price;
                        newCstk.UnitofQuantity = itemmaster.UnitofQuantity;
                        newCstk.UOM = itemmaster.UOM;
                        newCstk.ItemMultiMRPId = MultiMRPitem.ItemMultiMRPId;
                        newCstk.itemname = itemmaster.itemname;
                        newCstk.itemBaseName = itemmaster.itemBaseName;
                        DbCurrentStock.Add(newCstk);
                        this.Commit();

                        CurrentStockHistory Oss = new CurrentStockHistory();
                        Oss.StockId = newCstk.StockId;
                        Oss.ItemNumber = newCstk.ItemNumber;

                        Oss.TotalInventory = newCstk.CurrentInventory;
                        Oss.WarehouseName = newCstk.WarehouseName;
                        Oss.Warehouseid = newCstk.WarehouseId;
                        Oss.CompanyId = newCstk.CompanyId;
                        Oss.CreationDate = indianTime;
                        // Multimrp
                        Oss.MRP = newCstk.MRP;

                        Oss.UnitofQuantity = newCstk.UnitofQuantity;
                        Oss.UOM = newCstk.UOM;
                        Oss.ItemMultiMRPId = newCstk.ItemMultiMRPId;
                        Oss.itemname = newCstk.itemname;
                        Oss.itemBaseName = newCstk.itemBaseName;
                        Oss.userid = people.PeopleID;
                        Oss.UserName = people.DisplayName;
                        CurrentStockHistoryDb.Add(Oss);
                        int idd = this.Commit();
                    }
                    else
                    {
                        cntstock.ItemNumber = itemmaster.Number;
                        cntstock.WarehouseId = o.WarehouseId;
                        cntstock.WarehouseName = o.WarehouseName;
                        cntstock.CompanyId = itemmaster.CompanyId;
                        cntstock.Deleted = false;
                        cntstock.UpdatedDate = indianTime;
                        // Multimrp
                        cntstock.MRP = itemmaster.price;
                        cntstock.UnitofQuantity = itemmaster.UnitofQuantity;
                        cntstock.UOM = itemmaster.UOM;
                        cntstock.ItemMultiMRPId = MultiMRPitem.ItemMultiMRPId;
                        cntstock.itemname = itemmaster.itemname;
                        cntstock.itemBaseName = itemmaster.itemBaseName;

                        //DbCurrentStock.Attach(cntstock);
                        this.Entry(cntstock).State = EntityState.Modified;
                        this.Commit();

                        CurrentStockHistory Oss = new CurrentStockHistory();
                        Oss.StockId = cntstock.StockId;
                        Oss.ItemNumber = cntstock.ItemNumber;
                        Oss.TotalInventory = cntstock.CurrentInventory;
                        Oss.WarehouseName = cntstock.WarehouseName;
                        Oss.Warehouseid = cntstock.WarehouseId;
                        Oss.CompanyId = cntstock.CompanyId;
                        Oss.CreationDate = indianTime;
                        Oss.userid = people.PeopleID;
                        Oss.UserName = people.DisplayName;
                        // Multimrp
                        Oss.MRP = cntstock.MRP;
                        Oss.UnitofQuantity = cntstock.UnitofQuantity;
                        Oss.UOM = cntstock.UOM;
                        Oss.ItemMultiMRPId = cntstock.ItemMultiMRPId;
                        Oss.itemname = cntstock.itemname;
                        Oss.itemBaseName = cntstock.itemBaseName;
                        CurrentStockHistoryDb.Add(Oss);
                        int idd = this.Commit();
                    }

                    ///***** set all items current stock behalf of all warehouses *****///
                }
                // CommonHelper.refreshItemMaster(itemMasters.WarehouseId);

                if (itemmaster.IsTradeItem)
                {
                    TradeItemMasterDc tradeItem = new TradeItemMasterDc
                    {
                        BaseCategoryId = itemmaster.BaseCategoryid,
                        CategoryId = itemmaster.Categoryid,
                        SubCategoryId = itemmaster.SubCategoryId,
                        BrandId = itemmaster.SubsubCategoryid,
                        BaseCategoryName = itemmaster.BaseCategoryName,
                        BasePrice = itemmaster.UnitPrice,
                        BrandImagePath = Subsubcategory.LogoUrl,
                        BrandName = itemmaster.SubsubcategoryName,
                        CategoryName = itemmaster.CategoryName,
                        CreatedBy = people.PeopleID,
                        CreatedDate = indianTime,
                        ImagePath = itemmaster.LogoUrl,
                        IsActive = false,
                        IsDelete = false,
                        ItemId = itemmaster.Id,
                        ItemName = itemmaster.itemname,
                        MRP = itemmaster.price,
                        UnitOfMeasurement = itemmaster.UOM,
                        SubCategoryName = itemmaster.SubcategoryName,
                        UnitOfQuantity = itemmaster.UnitofQuantity,
                        HSNCode = itemmaster.HSNCode,
                        TotalTaxPercent = Convert.ToString(itemmaster.TotalTaxPercentage),
                        CGST = Convert.ToString(itemmaster.TotalTaxPercentage / 2),
                        SGST = Convert.ToString(itemmaster.TotalTaxPercentage / 2),
                        CESS = Convert.ToString(itemmaster.TotalCessPercentage)
                    };

                    BackgroundTaskManager.Run(() =>
                    {
                        try
                        {
                            var tradeUrl = ConfigurationManager.AppSettings["TradeURL"] + "/api/TradeItem/Insert";
                            TextFileLogHelper.LogError(tradeUrl, false);
                            using (GenericRestHttpClient<TradeItemMasterDc, string> memberClient = new GenericRestHttpClient<TradeItemMasterDc, string>(tradeUrl, "", null))
                            {
                                tradeItem = AsyncContext.Run(() => memberClient.PostAsync(tradeItem));
                            }
                        }
                        catch (Exception ex)
                        {
                            TextFileLogHelper.LogError("Error while saving item in Trade: " + ex.ToString());
                        }
                    });
                }

            }
            return itemmaster;

        }
        #endregion

        //public ItemMaster Saveediteditem(List<ItemMaster> itemmasterList, int compid)
        //{
        //    ItemMaster objItemMaster = new ItemMaster();
        //    objItemMaster = itemmasterList[0];
        //    List<ItemMaster> item = new List<ItemMaster>();

        //    ItemMaster im = new ItemMaster();
        //    foreach (var itemmaster in itemmasterList)
        //    {
        //        item = null;
        //        item = itemMasters.Where(i => i.WarehouseId == objItemMaster.WarehouseId && i.SellingSku == itemmaster.SellingSku && i.CompanyId == compid).ToList();
        //        foreach (var it in item)
        //        {
        //            im = null;
        //            im = itemMasters.Where(i => i.ItemId == it.ItemId && i.CompanyId == compid).SingleOrDefault();
        //            if (im != null)
        //            {
        //                im.price = itemmaster.price;
        //                im.Margin = itemmaster.Margin;
        //                im.PurchasePrice = itemmaster.PurchasePrice;
        //                im.UnitPrice = itemmaster.PurchasePrice + (itemmaster.PurchasePrice * itemmaster.Margin / 100);
        //                if (im.Margin > 0)
        //                {
        //                    var rs = RetailerShareDb.Where(r => r.cityid == im.Cityid).FirstOrDefault();
        //                    if (rs != null)
        //                    {
        //                        var cf = RPConversionDb.FirstOrDefault();
        //                        try
        //                        {
        //                            double mv = (im.PurchasePrice * (im.Margin / 100) * (rs.share / 100) * cf.point);
        //                            var value1 = Math.Round(mv, MidpointRounding.AwayFromZero);
        //                            im.marginPoint = Convert.ToInt32(value1);
        //                        }
        //                        catch (Exception ex)
        //                        {
        //                            logger.Error(ex.Message);
        //                        }
        //                    }
        //                }
        //                itemMasters.Attach(im);
        //                this.Entry(im).State = EntityState.Modified;
        //                this.SaveChanges();
        //                CommonHelper.refreshItemMaster(im.WarehouseId, im.Categoryid);


        //            }
        //        }
        //        //else
        //        //{
        //        //    return objItemMaster;
        //        //}
        //    }
        //    return im;
        //}
        public void convertitemimage(string url, string sku)
        {
            var webRootPath = HttpContext.Current.Server.MapPath("~/images/itemimages");
            string oldname = webRootPath + "/" + url;
            string newname = webRootPath + "/" + sku + ".jpg";
            System.IO.File.Move(oldname, newname);
        }



        public ItemMasterCentral PutCentralItemMaster(ItemMasterCentral objItemMaster)
        {

            var UserName = Peoples.Where(x => x.PeopleID == objItemMaster.userid).FirstOrDefault();

            List<ItemMasterCentral> itemmasterList = ItemMasterCentralDB.Where(x => x.SellingSku == objItemMaster.SellingSku && x.CompanyId == objItemMaster.CompanyId).ToList();


            // for change In  IsSensitive yes or no then by Anushka
            //update itemmasters & stock history
            try
            {
                // if (itemmasterList[0].IsSensitive != objItemMaster.IsSensitive)
                //{
                //for central item
                try
                {
                    var itemcentral = ItemMasterCentralDB.Where(x => x.Number == objItemMaster.Number && x.Deleted == false).ToList();

                    if (itemcentral.Count > 0)
                    {
                        foreach (var itm in itemcentral)
                        {

                            try
                            {
                                if (objItemMaster.IsSensitive == true)
                                {
                                    if (objItemMaster.IsSensitiveMRP == true)
                                    {
                                        itm.IsSensitive = objItemMaster.IsSensitive;
                                        itm.itemname = objItemMaster.itemBaseName + " " + objItemMaster.UnitofQuantity + " " + objItemMaster.UOM; //item display name                               

                                    }
                                    else
                                    {
                                        itm.IsSensitive = objItemMaster.IsSensitive;
                                        itm.itemname = objItemMaster.itemBaseName + " " + objItemMaster.price + " MRP " + objItemMaster.UnitofQuantity + " " + objItemMaster.UOM; //item display name                               
                                    }
                                }
                                else
                                {
                                    itm.IsSensitive = objItemMaster.IsSensitive;
                                    itm.itemname = objItemMaster.itemBaseName + " " + objItemMaster.price + " MRP "; //item display name                               
                                }

                                // mitem.itemname = itemMultiMRP.itemBaseName + " " + itemMultiMRP.MRP + " MRP " + itemMultiMRP.UnitofQuantity + " " + itemMultiMRP.UOM; //item display name                               
                                itm.SellingUnitName = itm.itemname + " " + itm.MinOrderQty + "Unit";//item selling unit name
                                itm.PurchaseUnitName = itm.itemname + " " + itm.PurchaseMinOrderQty + "Unit";//item PurchaseUnitName name

                                itm.UpdatedDate = indianTime;
                                //this.ItemMasterCentralDB.Attach(itm);
                                this.Entry(itm).State = EntityState.Modified;
                                this.Commit();
                            }
                            catch (Exception dsa) { }
                        }
                    }
                }
                catch (Exception dsaf)
                {
                }

                //for warehouse item
                try
                {
                    var itemIsSensitive = itemMasters.Where(x => x.ItemMultiMRPId == objItemMaster.ItemMultiMRPId && x.Number == objItemMaster.Number && x.Deleted == false).ToList();
                    if (itemIsSensitive != null)
                    {
                        foreach (var it in itemIsSensitive)
                        {
                            try
                            {
                                if (objItemMaster.IsSensitive == true)
                                {
                                    it.IsSensitive = objItemMaster.IsSensitive;
                                    it.itemname = objItemMaster.itemBaseName + " " + objItemMaster.price + " MRP " + objItemMaster.UnitofQuantity + " " + objItemMaster.UOM; //item display name                                                          
                                }
                                else
                                {
                                    it.IsSensitive = objItemMaster.IsSensitive;
                                    it.itemname = objItemMaster.itemBaseName + " " + objItemMaster.price + " MRP "; //item display name                                                             
                                }
                                it.SellingUnitName = it.itemname + " " + it.MinOrderQty + "Unit";//item selling unit name
                                it.PurchaseUnitName = it.itemname + " " + it.PurchaseMinOrderQty + "Unit";//item PurchaseUnitName name
                                it.UpdatedDate = indianTime;
                                //this.itemMasters.Attach(it);
                                this.Entry(it).State = EntityState.Modified;
                                this.Commit();
                            }
                            catch (Exception dsa) { }
                            try
                            {

                                ItemMasterHistory Os = new ItemMasterHistory();
                                if (it != null)
                                {
                                    Os.ItemId = it.ItemId;
                                    Os.Cityid = it.Cityid;
                                    Os.CityName = it.CityName;
                                    Os.Categoryid = it.Categoryid;
                                    Os.SubCategoryId = it.SubCategoryId;
                                    Os.SubsubCategoryid = it.SubsubCategoryid;
                                    Os.WarehouseId = it.WarehouseId;
                                    Os.SupplierId = it.SupplierId;
                                    Os.SUPPLIERCODES = it.SUPPLIERCODES;
                                    Os.CompanyId = it.CompanyId;
                                    Os.CategoryName = it.CategoryName;
                                    Os.BaseCategoryid = it.BaseCategoryid;
                                    Os.BaseCategoryName = it.BaseCategoryName;
                                    Os.SubcategoryName = it.SubcategoryName;
                                    Os.SubsubcategoryName = it.SubsubcategoryName;
                                    Os.SupplierName = it.SupplierName;
                                    Os.itemname = it.itemname;
                                    Os.itemcode = it.itemcode;
                                    Os.SellingUnitName = it.SellingUnitName;
                                    Os.PurchaseUnitName = it.PurchaseUnitName;
                                    Os.price = it.price;
                                    Os.VATTax = it.VATTax;
                                    Os.active = it.active;
                                    Os.LogoUrl = it.LogoUrl;
                                    Os.CatLogoUrl = it.CatLogoUrl;
                                    Os.MinOrderQty = it.MinOrderQty;
                                    Os.PurchaseMinOrderQty = it.PurchaseMinOrderQty;
                                    Os.GruopID = it.GruopID;
                                    Os.TGrpName = it.TGrpName;
                                    Os.CessGrpID = it.GruopID;
                                    Os.CessGrpName = it.TGrpName;
                                    Os.TotalCessPercentage = it.TotalCessPercentage;
                                    Os.Discount = it.Discount;
                                    Os.UnitPrice = it.UnitPrice;
                                    Os.Number = it.Number;
                                    Os.PurchaseSku = it.PurchaseSku;
                                    Os.SellingSku = it.SellingSku;
                                    Os.PurchasePrice = it.PurchasePrice;
                                    Os.GeneralPrice = it.GeneralPrice;
                                    Os.title = it.title;
                                    Os.Description = it.Description;
                                    Os.StartDate = it.StartDate;
                                    Os.EndDate = it.EndDate;
                                    Os.PramotionalDiscount = it.PramotionalDiscount;
                                    Os.TotalTaxPercentage = it.TotalTaxPercentage;
                                    Os.WarehouseName = it.WarehouseName;
                                    Os.CreatedDate = indianTime;
                                    Os.UpdatedDate = it.UpdatedDate;
                                    Os.Deleted = it.Deleted;
                                    Os.IsDailyEssential = it.IsDailyEssential;
                                    Os.SellingPrice = it.UnitPrice;
                                    Os.StoringItemName = it.StoringItemName;
                                    Os.SizePerUnit = it.SizePerUnit;
                                    Os.HindiName = it.HindiName;
                                    //Os.Barcode = it.Barcode;
                                    Os.promoPoint = it.promoPoint;
                                    Os.marginPoint = it.marginPoint;
                                    Os.IsSensitive = it.IsSensitive;
                                    if (UserName.DisplayName != null) { Os.UserName = UserName.DisplayName; } else { Os.UserName = UserName.PeopleFirstName; }


                                    Os.userid = UserName.PeopleID;
                                    //--anu--//
                                    Os.DefaultBaseMargin = it.DefaultBaseMargin;//
                                    Os.ShowMrp = it.ShowMrp;//MRP Price select Checkbox
                                    Os.ShowUnit = it.ShowUnit;//Min order qty select Checkbox
                                    Os.UOM = it.UOM; //Unit of Masurement like GM Kg 
                                    Os.ShowUOM = it.ShowUOM;// Unit Of Masurement select Checkbox
                                    Os.ShowType = it.ShowType;// fast slow non movinng
                                    Os.itemBaseName = it.itemBaseName;
                                    Os.ShowTypes = it.ShowTypes;// fast slow non moving
                                    Os.Reason = it.Reason;// MRP Issue Stock Unavailable  Price Issue Other
                                    this.ItemMasterHistoryDb.Add(Os);
                                    this.Commit();
                                }
                            }
                            catch (Exception ss) { }

                        }
                        //update stock name
                        var stock = DbCurrentStock.Where(x => x.ItemMultiMRPId == objItemMaster.ItemMultiMRPId && x.ItemNumber == objItemMaster.Number).ToList();
                        if (stock != null)
                        {
                            foreach (var cntstock in stock)
                            {

                                cntstock.itemname = objItemMaster.itemname;
                                cntstock.UpdatedDate = indianTime;
                                //this.DbCurrentStock.Attach(cntstock);
                                this.Entry(cntstock).State = EntityState.Modified;
                                this.Commit();

                                //try
                                //{
                                //    CurrentStockHistory Oss = new CurrentStockHistory();
                                //    Oss.ItemId = cntstock.ItemId;
                                //    Oss.StockId = cntstock.StockId;
                                //    Oss.ItemNumber = cntstock.ItemNumber;
                                //    Oss.itemname = objItemMaster.itemname;
                                //    Oss.TotalInventory = cntstock.CurrentInventory;
                                //    Oss.WarehouseName = cntstock.WarehouseName;
                                //    Oss.Warehouseid = cntstock.WarehouseId;
                                //    Oss.CompanyId = cntstock.CompanyId;
                                //    Oss.CreationDate = indianTime;
                                //    Oss.MRP = objItemMaster.MRP;
                                //    Oss.UnitofQuantity = objItemMaster.UnitofQuantity;
                                //    Oss.UOM = objItemMaster.UOM;
                                //    Oss.itemBaseName = objItemMaster.itemBaseName;

                                //    if (UserName.DisplayName != null)
                                //    {
                                //        Oss.UserName = UserName.DisplayName;
                                //        Oss.ManualReason = "Itemname Change :" + UserName.DisplayName + " UserId:" + objItemMaster.userid;

                                //    }
                                //    else
                                //    {
                                //        Oss.UserName = UserName.PeopleFirstName;
                                //        Oss.ManualReason = "Itemname Change:" + UserName.DisplayName + " UserId:" + objItemMaster.userid;

                                //    }
                                //    Oss.userid = objItemMaster.userid;
                                //    CurrentStockHistoryDb.Add(Oss);
                                //    this.SaveChanges();
                                //}
                                //catch (Exception ex)
                                //{
                                //}
                            }
                        }
                    }
                }
                catch (Exception dsaf)
                {
                }


            }


            catch (Exception ss) { }

            //City citym = Cities.Where(X => X.Cityid == objItemMaster.Cityid && X.Deleted == false).Select(x => x).SingleOrDefault();
            Category cit = Categorys.Where(x => x.Categoryid == objItemMaster.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
            SubCategory cita = SubCategorys.Where(x => x.SubCategoryId == objItemMaster.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
            SubsubCategory st = SubsubCategorys.Where(x => x.SubsubCategoryid == objItemMaster.SubsubCategoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
            List<Warehouse> warehouse = Warehouses.Where(x => x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).ToList();
            Supplier SN = Suppliers.Where(x => x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
            TaxGroupDetails taxgroup = new TaxGroupDetails();
            TaxGroup Tg = new TaxGroup();
            double TotalTax = 0;
            try
            {
                taxgroup = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.GruopID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                Tg = DbTaxGroup.Where(x => x.GruopID == objItemMaster.GruopID && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                List<TaxGroupDetails> TaxG = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.GruopID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).ToList();


                if (TaxG.Count != 0)
                {
                    foreach (var i in TaxG)
                    {
                        TotalTax += i.TPercent;
                    }
                }
            }
            catch (Exception sd) { }
            // this tax group
            TaxGroupDetails Cessgroup = new TaxGroupDetails();
            TaxGroup CessTg = new TaxGroup();
            double TotalCessTax = 0;
            try
            {

                Cessgroup = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.CessGrpID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                CessTg = DbTaxGroup.Where(x => x.GruopID == objItemMaster.CessGrpID && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                List<TaxGroupDetails> CesstaxG = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.CessGrpID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).ToList();
                if (CesstaxG.Count != 0)
                {
                    foreach (var i in CesstaxG)
                    {
                        TotalCessTax += i.TPercent;
                    }
                }

            }
            catch (Exception swdr)
            { }
            //end cess


            ItemMasterCentral im = new ItemMasterCentral();
            foreach (var itemmaster in itemmasterList)
            {
                var ids = itemmaster.Categoryid;
                if (itemmaster != null)
                {
                    itemmaster.GeneralPrice = objItemMaster.GeneralPrice;
                    itemmaster.UnitPrice = objItemMaster.UnitPrice;
                    itemmaster.Discount = objItemMaster.Discount;
                    itemmaster.Categoryid = objItemMaster.Categoryid;
                    itemmaster.SubCategoryId = objItemMaster.SubCategoryId;
                    itemmaster.SubsubCategoryid = objItemMaster.SubsubCategoryid;
                    try
                    {
                        itemmaster.PurchaseUnitName = objItemMaster.PurchaseUnitName;
                        itemmaster.SellingUnitName = objItemMaster.SellingUnitName;
                        itemmaster.TGrpName = Tg.TGrpName;
                        itemmaster.GruopID = Tg.GruopID;
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                    itemmaster.CategoryName = cit.CategoryName;
                    itemmaster.MinOrderQty = objItemMaster.MinOrderQty;
                    itemmaster.TotalTaxPercentage = TotalTax;
                    //cess

                    try
                    {
                        itemmaster.CessGrpID = Cessgroup.GruopID;
                        itemmaster.CessGrpName = CessTg.TGrpName;
                        itemmaster.TotalCessPercentage = TotalCessTax;
                    }
                    catch (Exception Ex) { }
                    if (objItemMaster.LogoUrl != null)
                    {
                        itemmaster.LogoUrl = objItemMaster.LogoUrl;

                    }

                    itemmaster.SubcategoryName = cita.SubcategoryName;
                    itemmaster.SubsubcategoryName = st.SubsubcategoryName;
                    itemmaster.SubSubCode = st.Code;
                    itemmaster.itemname = objItemMaster.itemname;
                    itemmaster.price = objItemMaster.price;
                    itemmaster.PurchasePrice = objItemMaster.PurchasePrice;
                    itemmaster.HindiName = objItemMaster.HindiName;
                    itemmaster.PurchaseMinOrderQty = objItemMaster.PurchaseMinOrderQty;
                    itemmaster.IsDailyEssential = objItemMaster.IsDailyEssential;
                    itemmaster.active = objItemMaster.active;
                    itemmaster.Deleted = objItemMaster.Deleted;
                    itemmaster.UpdatedDate = indianTime;
                    //itemmaster.Barcode = objItemMaster.Barcode;
                    itemmaster.Margin = objItemMaster.Margin;
                    itemmaster.promoPerItems = objItemMaster.promoPerItems;
                    itemmaster.free = objItemMaster.free;
                    itemmaster.HSNCode = objItemMaster.HSNCode;

                    itemmaster.ShowMrp = objItemMaster.ShowMrp;//MRP Price select Checkbox
                    itemmaster.ShowUnit = objItemMaster.ShowUnit;//Min order qty select Checkbox
                    itemmaster.UOM = objItemMaster.UOM; //Unit of Masurement like GM Kg 
                    itemmaster.ShowUOM = objItemMaster.ShowUOM;// Unit Of Masurement select Checkbox
                    itemmaster.ShowType = objItemMaster.ShowType;// fast slow non movinng
                    itemmaster.itemBaseName = objItemMaster.itemBaseName;
                    itemmaster.ShowTypes = objItemMaster.ShowTypes;// fast slow non moving
                    itemmaster.Reason = objItemMaster.Reason;// MRP Issue Stock Unavailable  Price Issue Other
                    itemmaster.IsSensitive = objItemMaster.IsSensitive;//filter Issensitive YES/NO

                    objItemMaster.SubsubcategoryName = SubsubCategorys.Where(x => x.SubsubCategoryid == objItemMaster.SubsubCategoryid).Select(x => x.SubsubcategoryName).FirstOrDefault();

                    if (objItemMaster.SubsubcategoryName == "Kisan Kirana")
                    {

                        if (objItemMaster.active == true)
                        {
                            try
                            {
                                //var username = Peoples.Where(x => x.PeopleID == objItemMaster.userid).Select(x => x.DisplayName).FirstOrDefault();
                                //var HubName = itemMasters.Where(x => x.ItemId == objItemMaster.Id).Select(x => x.WarehouseName).SingleOrDefault();

                                //string MobileNumber = "9755555186";
                                //string sRandomOTP = objItemMaster.itemname + " of price " + objItemMaster.price + " is set active by user" + " " + username + " on " + objItemMaster.UpdatedDate + " at " + HubName;
                                //string OtpMessage = " Shopkirana :)";
                                //string CountryCode = "91";
                                //string Sender = "SHOPKR";
                                //string authkey = Startup.smsauthKey;
                                //int route = 4;
                                //string path = "http://bulksms.newrise.in/api/sendhttp.php?authkey=" + authkey + "&mobiles=" + MobileNumber + "&message=" + sRandomOTP + " :" + OtpMessage + " &sender=" + Sender + "&route=" + route + "&country=" + CountryCode;

                                ////string path ="http://bulksms.newrise.in/api/sendhttp.php?authkey=100498AhbWDYbtJT56af33e3&mobiles=9770838685&message= SK OTP is : " + sRandomOTP + " &sender=SHOPKR&route=4&country=91";

                                //var webRequest = (HttpWebRequest)WebRequest.Create(path);
                                //webRequest.Method = "GET";
                                //webRequest.ContentType = "application/json";
                                //webRequest.UserAgent = "Mozilla/5.0 (Windows NT 5.1; rv:28.0) Gecko/20100101 Firefox/28.0";
                                //webRequest.ContentLength = 0; // added per comment 
                                //webRequest.Credentials = CredentialCache.DefaultCredentials;
                                //webRequest.Accept = "*/*";
                                //var webResponse = (HttpWebResponse)webRequest.GetResponse();
                                //if (webResponse.StatusCode != HttpStatusCode.OK) Console.WriteLine("{0}", webResponse.Headers);
                                //Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, (sRandomOTP + " :" + OtpMessage), ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString());

                            }
                            catch (Exception ex)
                            {
                                logger.Error("Error in OTP Genration.");
                                return null;
                            }

                        }
                        if (objItemMaster.active == false)
                        {

                            try
                            {
                                //var username = Peoples.Where(x => x.PeopleID == objItemMaster.userid).Select(x => x.DisplayName).FirstOrDefault();
                                //var HubName = itemMasters.Where(x => x.ItemId == objItemMaster.Id).Select(x => x.WarehouseName).SingleOrDefault();
                                //string MobileNumber = "9755555186";
                                //string sRandomOTP = objItemMaster.itemname + " of price " + objItemMaster.price + " is set Inactive by user" + " " + username + " on " + objItemMaster.UpdatedDate + " at " + HubName;
                                //string OtpMessage = " Shopkirana :)";
                                //string CountryCode = "91";
                                //string Sender = "SHOPKR";
                                //string authkey = Startup.smsauthKey;
                                //int route = 4;
                                //string path = "http://bulksms.newrise.in/api/sendhttp.php?authkey=" + authkey + "&mobiles=" + MobileNumber + "&message=" + sRandomOTP + " :" + OtpMessage + " &sender=" + Sender + "&route=" + route + "&country=" + CountryCode;

                                ////string path ="http://bulksms.newrise.in/api/sendhttp.php?authkey=100498AhbWDYbtJT56af33e3&mobiles=9770838685&message= SK OTP is : " + sRandomOTP + " &sender=SHOPKR&route=4&country=91";

                                //var webRequest = (HttpWebRequest)WebRequest.Create(path);
                                //webRequest.Method = "GET";
                                //webRequest.ContentType = "application/json";
                                //webRequest.UserAgent = "Mozilla/5.0 (Windows NT 5.1; rv:28.0) Gecko/20100101 Firefox/28.0";
                                //webRequest.ContentLength = 0; // added per comment 
                                //webRequest.Credentials = CredentialCache.DefaultCredentials;
                                //webRequest.Accept = "*/*";
                                //var webResponse = (HttpWebResponse)webRequest.GetResponse();
                                //if (webResponse.StatusCode != HttpStatusCode.OK) Console.WriteLine("{0}", webResponse.Headers);
                                //logger.Info("OTP Genrated: " + sRandomOTP);
                                // Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, (sRandomOTP + " :" + OtpMessage), ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString());


                            }
                            catch (Exception ex)
                            {
                                logger.Error("Error in OTP Genration.");
                                return null;
                            }

                        }

                    }
                    if (itemmaster.promoPoint != objItemMaster.promoPoint)
                    {
                        var pp = 0;
                        if (itemmaster.promoPoint > 0)
                            pp = (objItemMaster.promoPoint - itemmaster.promoPoint).GetValueOrDefault();
                        else
                            pp = objItemMaster.promoPoint.GetValueOrDefault();
                        //if (pp != 0)
                        //{
                        //var suppPromo = supplierPointDb.Where(c => c.SupplierCode == itemmaster.SUPPLIERCODES).SingleOrDefault();
                        //if (suppPromo != null)
                        //{
                        //    suppPromo.PromoPoint -= pp;
                        //    supplierPointDb.Attach(suppPromo);
                        //    this.Entry(suppPromo).State = EntityState.Modified;
                        //    this.SaveChanges();
                        //}
                        // }
                        itemmaster.promoPoint = objItemMaster.promoPoint;
                    }
                    if (itemmaster.Margin > 0)
                    {
                        var rs = RetailerShareDb.FirstOrDefault();
                        if (rs != null)
                        {
                            var cf = RPConversionDb.FirstOrDefault();
                            try
                            {
                                double mv = (itemmaster.PurchasePrice * (itemmaster.Margin / 100) * (rs.share / 100) * cf.point);
                                var value = Math.Round(mv, MidpointRounding.AwayFromZero);
                                itemmaster.marginPoint = Convert.ToInt32(value);
                            }
                            catch (Exception ex)
                            {
                                logger.Error(ex.Message);
                            }
                        }
                    }
                    //ItemMasterCentralDB.Attach(itemmaster);
                    this.Entry(itemmaster).State = EntityState.Modified;
                    this.Commit();
                    #region Item Master History


                    var itemoldData = ItemMasterCentralDB.Where(x => x.Id == itemmaster.Id).SingleOrDefault();
                    try
                    {
                        ItemMasterHistory Os = new ItemMasterHistory();
                        if (itemoldData != null)
                        {
                            Os.DefaultBaseMargin = itemoldData.DefaultBaseMargin;//
                            Os.ShowMrp = itemoldData.ShowMrp;
                            Os.ShowUnit = itemoldData.ShowUnit;
                            Os.UOM = itemoldData.UOM;
                            Os.ShowUnit = itemoldData.ShowUnit;
                            Os.ShowType = itemoldData.ShowType;
                            Os.itemname = itemoldData.itemname;
                            Os.ShowTypes = itemoldData.ShowTypes;

                            Os.ItemId = itemoldData.Id;
                            Os.Categoryid = itemoldData.Categoryid;
                            Os.SubCategoryId = itemoldData.SubCategoryId;
                            Os.SubsubCategoryid = itemoldData.SubsubCategoryid;
                            Os.CompanyId = itemoldData.CompanyId;
                            Os.CategoryName = itemoldData.CategoryName;
                            Os.BaseCategoryid = itemoldData.BaseCategoryid;
                            Os.BaseCategoryName = itemoldData.BaseCategoryName;
                            Os.SubcategoryName = itemoldData.SubcategoryName;
                            Os.SubsubcategoryName = itemoldData.SubsubcategoryName;

                            Os.itemcode = itemoldData.itemcode;
                            Os.SellingUnitName = itemoldData.SellingUnitName;
                            Os.PurchaseUnitName = itemoldData.PurchaseUnitName;
                            Os.price = itemoldData.price;
                            Os.VATTax = itemoldData.VATTax;
                            Os.active = itemoldData.active;
                            Os.LogoUrl = itemoldData.LogoUrl;
                            Os.MinOrderQty = itemoldData.MinOrderQty;
                            Os.PurchaseMinOrderQty = itemoldData.PurchaseMinOrderQty;
                            Os.GruopID = itemoldData.GruopID;
                            Os.TGrpName = itemoldData.TGrpName;
                            Os.CessGrpID = itemoldData.GruopID;
                            Os.CessGrpName = itemoldData.TGrpName;
                            Os.TotalCessPercentage = itemoldData.TotalCessPercentage;


                            Os.Discount = itemoldData.Discount;
                            Os.UnitPrice = itemoldData.UnitPrice;
                            Os.Number = itemoldData.Number;
                            Os.PurchaseSku = itemoldData.PurchaseSku;
                            Os.SellingSku = itemoldData.SellingSku;
                            Os.PurchasePrice = itemoldData.PurchasePrice;
                            Os.GeneralPrice = itemoldData.GeneralPrice;
                            Os.Description = itemoldData.Description;
                            Os.PramotionalDiscount = itemoldData.PramotionalDiscount;
                            Os.TotalTaxPercentage = itemoldData.TotalTaxPercentage;
                            Os.CreatedDate = indianTime;
                            Os.UpdatedDate = indianTime;
                            Os.Deleted = itemoldData.Deleted;
                            Os.IsDailyEssential = itemoldData.IsDailyEssential;
                            Os.SellingPrice = itemoldData.UnitPrice;
                            Os.StoringItemName = itemoldData.StoringItemName;
                            Os.SizePerUnit = itemoldData.SizePerUnit;
                            Os.HindiName = itemoldData.HindiName;

                            Os.promoPoint = itemoldData.promoPoint;
                            Os.marginPoint = itemoldData.marginPoint;

                            if (UserName.DisplayName != null) { Os.UserName = UserName.DisplayName; } else { Os.UserName = UserName.PeopleFirstName; }

                            Os.userid = objItemMaster.userid;
                            Os.WarehouseName = warehouse[0].WarehouseName;
                            Os.ShowMrp = objItemMaster.ShowMrp;//MRP Price select Checkbox
                            Os.ShowUnit = objItemMaster.ShowUnit;//Min order qty select Checkbox
                            Os.UOM = objItemMaster.UOM; //Unit of Masurement like GM Kg 
                            Os.ShowUOM = objItemMaster.ShowUOM;// Unit Of Masurement select Checkbox
                            Os.ShowType = objItemMaster.ShowType;// fast slow non movinng
                            Os.itemBaseName = objItemMaster.itemBaseName;
                            Os.ShowTypes = objItemMaster.ShowTypes;// fast slow non moving
                            Os.Reason = objItemMaster.Reason;// MRP Issue Stock Unavailable  Price Issue Other
                            Os.IsSensitive = objItemMaster.IsSensitive;
                            ItemMasterHistoryDb.Add(Os);
                            int id = this.Commit();
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error("Error loading  item:- " + itemmaster.itemname + "\n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                    }
                    #endregion
                    try  // Update data on itemmaster in all warehouses if changes happen in central itemmaster
                    {
                        List<ItemMaster> itw = itemMasters.Where(x => x.SellingSku == itemmaster.SellingSku).ToList();
                        foreach (ItemMaster jk in itw)
                        {
                            jk.VATTax = itemmaster.VATTax;//tax

                            //jk.price = itemmaster.price;//MRP
                            //jk.UnitPrice = itemmaster.UnitPrice;//Selling Price

                            jk.Categoryid = itemmaster.Categoryid;
                            jk.CategoryName = itemmaster.CategoryName;

                            jk.BaseCategoryid = itemmaster.BaseCategoryid;
                            jk.BaseCategoryName = itemmaster.BaseCategoryName;

                            jk.SubCategoryId = itemmaster.SubCategoryId;
                            jk.SubcategoryName = itemmaster.SubcategoryName;

                            jk.SubsubCategoryid = itemmaster.SubsubCategoryid;
                            jk.SubsubcategoryName = itemmaster.SubsubcategoryName;

                            //jk.PurchaseMinOrderQty = itemmaster.PurchaseMinOrderQty;
                            jk.MinOrderQty = itemmaster.MinOrderQty;
                            //jk.itemname = itemmaster.itemname;
                            jk.GruopID = itemmaster.GruopID;
                            jk.TGrpName = itemmaster.TGrpName;
                            jk.TotalTaxPercentage = itemmaster.TotalTaxPercentage;
                            jk.IsSensitive = itemmaster.IsSensitive;
                            //cess
                            try
                            {
                                jk.CessGrpID = itemmaster.CessGrpID;
                                jk.CessGrpName = itemmaster.CessGrpName;
                                jk.TotalCessPercentage = itemmaster.TotalCessPercentage;
                            }
                            catch (Exception asfsa) { }

                            //jk.HindiName = itemmaster.HindiName;
                            jk.HSNCode = itemmaster.HSNCode;
                            //jk.SellingUnitName = itemmaster.SellingUnitName;
                            //jk.PurchaseUnitName = itemmaster.PurchaseUnitName;
                            jk.DefaultBaseMargin = itemmaster.DefaultBaseMargin;
                            //jk.ShowMrp = itemmaster.ShowMrp;
                            //jk.ShowUnit = itemmaster.ShowUnit;
                            //jk.UOM = itemmaster.UOM;
                            //jk.ShowUnit = itemmaster.ShowUnit;
                            //jk.ShowType = itemmaster.ShowType;
                            //jk.itemBaseName = itemmaster.itemBaseName;
                            jk.ShowTypes = itemmaster.ShowTypes;// fast slow non moving
                            /*jk.Reason = itemmaster.Reason;*/// MRP Issue Stock Unavailable  Price Issue Other
                                                              //jk.itemname = itemmaster.itemname;
                                                              //jk.itemname = jk.itemBaseName + " " + jk.MRP + " MRP " + jk.UnitofQuantity + " " + jk.UOM; //item display name                               
                                                              //jk.SellingUnitName = jk.itemname + " " + jk.MinOrderQty + "Unit";//item selling unit name
                                                              //jk.PurchaseUnitName = jk.itemname + " " + jk.PurchaseMinOrderQty + "Unit";//item PurchaseUnitName name
                                                              //jk.SellingUnitName = itemmaster.itemname + " " + jk.MinOrderQty + "Unit";//item selling unit name
                                                              //jk.PurchaseUnitName = itemmaster.itemname + " " + jk.PurchaseMinOrderQty + "Unit";//item PurchaseUnitName name

                            jk.UpdatedDate = indianTime;
                            //itemMasters.Attach(jk);
                            this.Entry(jk).State = EntityState.Modified;
                            this.Commit();
                        }
                        List<CurrentStock> cs = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number).ToList();
                        foreach (CurrentStock c in cs)
                        {

                            //c.itemBaseName = itemmaster.itemBaseName;//itemBaseName;
                            //c.itemname =  c.itemBaseName + " " + c.MRP + " MRP " + c.UnitofQuantity + " " + c.UOM; //item  name  
                            //c.itemname = itemmaster.itemname; //item  name 
                            c.UpdatedDate = indianTime;
                            //DbCurrentStock.Attach(c);
                            this.Entry(c).State = EntityState.Modified;
                            this.Commit();

                            //store Currentstock History
                            //try
                            //{
                            //    CurrentStockHistory Oss = new CurrentStockHistory();
                            //    Oss.ItemId = c.ItemId;
                            //    Oss.StockId = c.StockId;
                            //    Oss.ItemNumber = c.ItemNumber;
                            //    Oss.itemname = c.itemname;
                            //    Oss.TotalInventory = c.CurrentInventory;
                            //    Oss.WarehouseName = c.WarehouseName;
                            //    Oss.Warehouseid = c.WarehouseId;
                            //    Oss.CompanyId = c.CompanyId;
                            //    Oss.CreationDate = indianTime;
                            //    Oss.MRP = c.MRP;
                            //    Oss.UnitofQuantity = c.UnitofQuantity;
                            //    Oss.UOM = c.UOM;
                            //    Oss.itemBaseName = c.itemBaseName;
                            //    Oss.ManualReason = "Edit Basename from Central Master";
                            //    if (UserName.DisplayName != null)
                            //    {
                            //        Oss.UserName = UserName.DisplayName;
                            //        Oss.ManualReason = "Change In MultiMrp :" + UserName.DisplayName + " UserId:" + UserName.PeopleID;

                            //    }
                            //    else
                            //    {
                            //        Oss.UserName = UserName.PeopleFirstName;
                            //        Oss.ManualReason = "Change In MultiMrp :" + UserName.DisplayName + " UserId:" + UserName.PeopleID;

                            //    }
                            //    Oss.userid = UserName.PeopleID;
                            //    this.CurrentStockHistoryDb.Add(Oss);
                            //    this.SaveChanges();

                            //}
                            //catch (Exception ex)
                            //{
                            //}
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error("Error:1009 Not sync Item in Itemmaster when edit in central itemmaster" + ex.Message);
                    }
                }
                else
                {
                    return objItemMaster;
                }
            }
            return objItemMaster;
        }

        // edit warehouse item
        public ItemMaster PutItemMaster(ItemMaster objItemMaster)
        {

            var UserName = Peoples.Where(x => x.PeopleID == objItemMaster.userid).FirstOrDefault();

            List<ItemMaster> itemmasterList = itemMasters.Where(x => x.SellingSku == objItemMaster.SellingSku && x.ItemId == objItemMaster.ItemId && x.WarehouseId == objItemMaster.WarehouseId && x.CompanyId == objItemMaster.CompanyId).ToList();
            City citym = Cities.Where(X => X.Cityid == objItemMaster.Cityid && X.Deleted == false).Select(x => x).SingleOrDefault();
            Category cit = Categorys.Where(x => x.Categoryid == objItemMaster.Categoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
            SubCategory cita = SubCategorys.Where(x => x.SubCategoryId == objItemMaster.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
            SubsubCategory st = SubsubCategorys.Where(x => x.SubsubCategoryid == objItemMaster.SubsubCategoryid && x.Deleted == false).Select(x => x).FirstOrDefault();
            TaxGroupDetails taxgroup = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.GruopID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
            TaxGroup Tg = DbTaxGroup.Where(x => x.GruopID == objItemMaster.GruopID && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
            List<TaxGroupDetails> TaxG = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.GruopID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).ToList();
            Warehouse warehouse = Warehouses.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
            DepoMaster depo = DepoMasters.Where(x => x.DepoId == objItemMaster.DepoId && x.Deleted == false).Select(x => x).FirstOrDefault();
            // this tax group blong cess   
            TaxGroup CessTg = new TaxGroup();
            TaxGroupDetails Cessgroup = new TaxGroupDetails();
            List<TaxGroupDetails> CesstaxG = new List<TaxGroupDetails>();
            try
            {
                Cessgroup = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.CessGrpID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                CessTg = DbTaxGroup.Where(x => x.GruopID == objItemMaster.CessGrpID && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();
                CesstaxG = DbTaxGroupDetails.Where(x => x.GruopID == objItemMaster.CessGrpID && x.CompanyId == objItemMaster.CompanyId).Select(x => x).ToList();
            }
            catch (Exception s) { }
            //end cess

            Supplier SN = Suppliers.Where(x => x.SupplierId == objItemMaster.SupplierId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId).Select(x => x).FirstOrDefault();

            #region Praveen code 
            //WarehouseBaseCategory whbc = WarehouseBaseCategoryDB.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId && x.BaseCategoryId == objItemMaster.BaseCategoryid).FirstOrDefault();
            //WarehouseCategory whc = new WarehouseCategory();
            //WarehouseSubCategory whsc = new WarehouseSubCategory();
            //WarehouseSubsubCategory whssc = new WarehouseSubsubCategory();
            //if (whbc != null)
            //{
            //    whc = DbWarehouseCategory.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId && x.BaseCategoryid == whbc.id && x.Categoryid == objItemMaster.Categoryid).FirstOrDefault();
            //    if (whc!=null)
            //    {
            //        whsc = DbWarehouseSubCategory.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId && x.BaseCategoryid == whbc.id && x.Categoryid == objItemMaster.Categoryid && x.SubCategoryId == objItemMaster.SubCategoryId).FirstOrDefault();
            //        if (whsc != null)
            //        {
            //            whssc = DbWarehousesubsubcats.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.CompanyId == objItemMaster.CompanyId && x.BaseCategoryId == whbc.id && x.Categoryid == objItemMaster.Categoryid && x.SubCategoryId == objItemMaster.SubCategoryId && x.SubsubCategoryid == objItemMaster.SubsubCategoryid).FirstOrDefault();
            //            #region ForItemCountcalculationinWareHouse  code by Preeven 
            //            if (whssc != null)
            //            {
            //                int Itemcalculation = 0;
            //                if (objItemMaster.active == true)
            //                {
            //                    Itemcalculation = 1;

            //                    whssc.itemcount = whssc.itemcount + Itemcalculation;
            //                    if (whssc.itemcount < 1)
            //                    {
            //                        whssc.IsActive = false;
            //                        whssc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whssc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whsc.itemcount = whsc.itemcount + Itemcalculation;
            //                    if (whsc.itemcount < 1)
            //                    {
            //                        whsc.IsActive = false;
            //                        whsc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whsc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whc.itemcount = whc.itemcount + Itemcalculation;
            //                    if (whc.itemcount > 1)
            //                    {
            //                        whc.IsActive = false;
            //                        whc.UpdatedDate = indianTime;

            //                    }
            //                    this.Entry(whc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whbc.itemcount = whbc.itemcount + Itemcalculation;
            //                    if (whbc.itemcount < 1)
            //                    {
            //                        whbc.IsActive = false;
            //                        whbc.UpdatedDate = indianTime;

            //                    }
            //                    this.Entry(whbc).State = EntityState.Modified;
            //                    this.SaveChanges();
            //                }
            //                else
            //                {
            //                    Itemcalculation = -1;

            //                    whssc.itemcount = whssc.itemcount + Itemcalculation;
            //                    if (whssc.itemcount < 1)
            //                    {
            //                        whssc.IsActive = false;
            //                        whssc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whssc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whsc.itemcount = whsc.itemcount + Itemcalculation;
            //                    if (whsc.itemcount < 1)
            //                    {
            //                        whsc.IsActive = false;
            //                        whsc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whsc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whc.itemcount = whc.itemcount + Itemcalculation;
            //                    if (whc.itemcount > 1)
            //                    {
            //                        whc.IsActive = false;
            //                        whc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whc).State = EntityState.Modified;
            //                    this.SaveChanges();

            //                    whbc.itemcount = whbc.itemcount + Itemcalculation;
            //                    if (whbc.itemcount < 1)
            //                    {
            //                        whbc.IsActive = false;
            //                        whbc.UpdatedDate = indianTime;
            //                    }
            //                    this.Entry(whbc).State = EntityState.Modified;
            //                    this.SaveChanges();
            //                }
            //            }
            //            #endregion
            //        }
            //    }
            //}
            #endregion

            double TotalTax = 0;
            if (TaxG.Count != 0)
            {
                foreach (var i in TaxG)
                {
                    TotalTax += i.TPercent;
                }
            }
            double TotalCessTax = 0;
            if (CesstaxG.Count != 0)
            {
                foreach (var i in CesstaxG)
                {
                    TotalCessTax += i.TPercent;
                }
            }
            ItemMaster im = new ItemMaster();
            foreach (var itemmaster in itemmasterList)
            {
                var ids = itemmaster.Categoryid;
                if (itemmaster != null)
                {
                    itemmaster.GeneralPrice = objItemMaster.GeneralPrice;
                    itemmaster.UnitPrice = objItemMaster.UnitPrice;
                    itemmaster.Discount = objItemMaster.Discount;
                    itemmaster.Categoryid = objItemMaster.Categoryid;
                    itemmaster.SubCategoryId = objItemMaster.SubCategoryId;
                    itemmaster.SubsubCategoryid = objItemMaster.SubsubCategoryid;

                    try
                    {
                        itemmaster.PurchaseUnitName = objItemMaster.PurchaseUnitName;
                        itemmaster.SellingUnitName = objItemMaster.SellingUnitName;
                        itemmaster.TGrpName = Tg.TGrpName;
                        itemmaster.GruopID = Tg.GruopID;
                        //cess
                        try
                        {
                            itemmaster.CessGrpID = Cessgroup.GruopID;
                            itemmaster.CessGrpName = CessTg.TGrpName;
                            itemmaster.TotalCessPercentage = TotalCessTax;
                        }
                        catch (Exception sdf) { }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                    itemmaster.CategoryName = cit.CategoryName;
                    itemmaster.MinOrderQty = objItemMaster.MinOrderQty;
                    itemmaster.SupplierId = objItemMaster.SupplierId;
                    try
                    {
                        itemmaster.SupplierName = SN.Name;
                        itemmaster.SUPPLIERCODES = SN.SUPPLIERCODES;
                        itemmaster.SupplierId = SN.SupplierId;

                        if (depo != null)
                        {
                            itemmaster.DepoId = depo.DepoId;
                            itemmaster.DepoName = depo.DepoName;
                        }
                        else
                        {
                            itemmaster.DepoId = 0;
                            itemmaster.DepoName = null;
                        }

                        SupplierWarehouse SupplierWarehouse = SupplierWarehouseDB.Where(x => x.WarehouseId == objItemMaster.WarehouseId && x.Deleted == false && x.SupplierId == itemmaster.SupplierId && x.DepoId == itemmaster.DepoId).Select(x => x).FirstOrDefault();
                        if (SupplierWarehouse == null)
                        {
                            SupplierWarehouse SW = new SupplierWarehouse();
                            SW.WarehouseId = warehouse.WarehouseId;
                            SW.CompanyId = objItemMaster.CompanyId;
                            SW.SupplierId = objItemMaster.SupplierId;
                            SW.DepoId = depo.DepoId;
                            SW.DepoName = depo.DepoName;
                            SW.WarehouseName = warehouse.WarehouseName;
                            SW.CreatedDate = indianTime;
                            SW.UpdatedDate = indianTime;
                            SW.Deleted = false;
                            SupplierWarehouseDB.Add(SW);
                            this.Commit();
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                    try
                    {
                        if (citym != null)
                        {
                            itemmaster.Cityid = citym.Cityid;
                            itemmaster.CityName = citym.CityName;
                        }
                        else
                        {
                            itemmaster.Cityid = warehouse.Cityid;
                            itemmaster.CityName = warehouse.CityName;
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }
                    itemmaster.TotalTaxPercentage = TotalTax;


                    itemmaster.CatLogoUrl = cit.LogoUrl;
                    itemmaster.SubcategoryName = cita.SubcategoryName;
                    itemmaster.SubsubcategoryName = st.SubsubcategoryName;
                    itemmaster.SubSubCode = st.Code;

                    itemmaster.price = objItemMaster.price;
                    itemmaster.PurchasePrice = objItemMaster.PurchasePrice;
                    itemmaster.HindiName = objItemMaster.HindiName;
                    itemmaster.PurchaseMinOrderQty = objItemMaster.PurchaseMinOrderQty;
                    itemmaster.IsDailyEssential = objItemMaster.IsDailyEssential;
                    itemmaster.active = objItemMaster.active;
                    itemmaster.Deleted = objItemMaster.Deleted;
                    itemmaster.UpdatedDate = indianTime;
                    //itemmaster.Barcode = objItemMaster.Barcode;
                    itemmaster.Margin = objItemMaster.Margin;
                    itemmaster.promoPerItems = objItemMaster.promoPerItems;
                    itemmaster.free = objItemMaster.free;
                    itemmaster.ShowType = objItemMaster.ShowType;
                    itemmaster.ShowMrp = objItemMaster.ShowMrp;
                    itemmaster.ShowTypes = objItemMaster.ShowTypes;
                    itemmaster.ShowUnit = objItemMaster.ShowUnit;
                    itemmaster.ShowUOM = objItemMaster.ShowUOM;

                    itemmaster.Reason = objItemMaster.Reason;
                    itemmaster.DefaultBaseMargin = objItemMaster.DefaultBaseMargin;
                    itemmaster.itemname = objItemMaster.itemname;
                    itemmaster.itemBaseName = objItemMaster.itemBaseName;



                    objItemMaster.SubsubcategoryName = SubsubCategorys.Where(x => x.SubsubCategoryid == objItemMaster.SubsubCategoryid).Select(x => x.SubsubcategoryName).FirstOrDefault();

                    if (objItemMaster.SubsubcategoryName == "Kisan Kirana")
                    {
                        try
                        {
                            //var username = UserName.DisplayName;
                            //var hubName = itemmaster.WarehouseName;
                            //string MobileNumber = "9755555186";
                            //string sRandomOTP = objItemMaster.itemname + " of price " + objItemMaster.price + " is set " + (itemmaster.active ? "active" : "in-active") + " by user" + " " + username + " on " + objItemMaster.UpdatedDate + " at " + hubName;
                            //string OtpMessage = " Shopkirana :)";
                            //string CountryCode = "91";
                            //string Sender = "SHOPKR";
                            //string authkey = Startup.smsauthKey;
                            //int route = 4;
                            //string path = "http://bulksms.newrise.in/api/sendhttp.php?authkey=" + authkey + "&mobiles=" + MobileNumber + "&message=" + sRandomOTP + " :" + OtpMessage + " &sender=" + Sender + "&route=" + route + "&country=" + CountryCode;

                            //var webRequest = (HttpWebRequest)WebRequest.Create(path);
                            //webRequest.Method = "GET";
                            //webRequest.ContentType = "application/json";
                            //webRequest.UserAgent = "Mozilla/5.0 (Windows NT 5.1; rv:28.0) Gecko/20100101 Firefox/28.0";
                            //webRequest.ContentLength = 0;
                            //webRequest.Credentials = CredentialCache.DefaultCredentials;
                            //webRequest.Accept = "*/*";
                            //var webResponse = (HttpWebResponse)webRequest.GetResponse();
                            //if (webResponse.StatusCode != HttpStatusCode.OK) Console.WriteLine("{0}", webResponse.Headers);
                            //Common.Helpers.SendSMSHelper.SendSMS(MobileNumber, (sRandomOTP + " :" + OtpMessage), ((Int32)Common.Enums.SMSRouteEnum.Transactional).ToString());
                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error in OTP Genration. " + ex.ToString());
                            return null;
                        }
                    }

                    if (objItemMaster.DepoId != 0)
                    {
                        itemmaster.DepoId = objItemMaster.DepoId;
                        itemmaster.DepoName = depo.DepoName;
                    }
                    else
                    {
                        itemmaster.DepoId = 0;
                        itemmaster.DepoName = null;
                    }
                    itemmaster.IsSensitive = objItemMaster.IsSensitive;
                    //itemmaster.HSNCode = objItemMaster.HSNCode;
                    #region sales person notfication add data 
                    SalespersonNotification spn = new SalespersonNotification();
                    var itemnumber = itemMasters.Where(x => x.ItemId == objItemMaster.ItemId && x.WarehouseId == objItemMaster.WarehouseId).SingleOrDefault();

                    //if (objItemMaster.active != null)
                    //{
                    //    spn.CompanyId = objItemMaster.CompanyId;
                    //    spn.itemName = objItemMaster.itemname;
                    //    spn.ItemId = objItemMaster.ItemId;
                    //    spn.ItemNumber = itemnumber.Number;
                    //    spn.title = "Active/Inactive Item";

                    //    if (objItemMaster.active == true)
                    //    {

                    //        spn.Message = "This Item is Activated";
                    //    }
                    //    else
                    //    {
                    //        spn.Message = "This Item is DeActivated";
                    //    }
                    //    spn.IsActive = objItemMaster.active;
                    //    spn.WarehouseName = warehouse.WarehouseName;
                    //    spn.WarehouseId = objItemMaster.WarehouseId;
                    //    spn.NotificationTime = DateTime.Now;
                    //    spn.Deleted = objItemMaster.Deleted;
                    //    SalespersonNotificationDB.Add(spn);
                    //    this.SaveChanges();

                    //}
                    #endregion

                    if (itemmaster.promoPoint != objItemMaster.promoPoint)
                    {
                        var pp = 0;
                        if (itemmaster.promoPoint > 0)
                            pp = (objItemMaster.promoPoint - itemmaster.promoPoint).GetValueOrDefault();
                        else
                            pp = objItemMaster.promoPoint.GetValueOrDefault();
                        if (pp != 0)
                        {
                            var suppPromo = supplierPointDb.Where(c => c.SupplierCode == itemmaster.SUPPLIERCODES).SingleOrDefault();
                            if (suppPromo != null)
                            {
                                suppPromo.PromoPoint -= pp;
                                //supplierPointDb.Attach(suppPromo);
                                this.Entry(suppPromo).State = EntityState.Modified;
                                this.Commit();
                            }
                        }
                        itemmaster.promoPoint = objItemMaster.promoPoint;
                    }
                    if (itemmaster.Margin > 0)
                    {
                        var rs = RetailerShareDb.Where(r => r.cityid == itemmaster.Cityid).FirstOrDefault();
                        if (rs != null)
                        {
                            var cf = RPConversionDb.FirstOrDefault();
                            try
                            {
                                double mv = (itemmaster.PurchasePrice * (itemmaster.Margin / 100) * (rs.share / 100) * cf.point);
                                var value = Math.Round(mv, MidpointRounding.AwayFromZero);
                                itemmaster.marginPoint = Convert.ToInt32(value);
                            }
                            catch (Exception ex)
                            {
                                logger.Error(ex.Message);
                            }
                        }
                    }


                    try
                    {
                        try
                        {
                            //for NetPurchase Price
                            double withouttaxvalue = (itemmaster.PurchasePrice / ((100 + itemmaster.TotalTaxPercentage) / 100));
                            double withouttax = Math.Round(withouttaxvalue, 3);
                            itemmaster.NetPurchasePrice = Math.Round((withouttax), 3);// without tax
                        }
                        catch (Exception es) { }

                        // mrp
                        var mrpdata = ItemMultiMRPDB.Where(x => x.ItemMultiMRPId == objItemMaster.ItemMultiMRPId).SingleOrDefault();

                        itemmaster.ItemMultiMRPId = objItemMaster.ItemMultiMRPId; //change mrp itemid
                        itemmaster.price = mrpdata.MRP; //Change MRP Price
                        itemmaster.UnitofQuantity = mrpdata.UnitofQuantity;
                        itemmaster.UOM = objItemMaster.UOM;
                        //itemMasters.Attach(itemmaster);
                        this.Entry(itemmaster).State = EntityState.Modified;
                        this.Commit();



                        //get update mrp for all item of same itemnumber and Purchase moq
                        try
                        {
                            var mrp = itemMasters.Where(x => x.Number == itemmaster.Number && x.WarehouseId == itemmaster.WarehouseId).ToList();

                            foreach (var mrpitem in mrp)
                            {

                                ItemMaster Imrp = itemMasters.Where(x => x.SellingSku == mrpitem.SellingSku && x.ItemId == mrpitem.ItemId && x.WarehouseId == mrpitem.WarehouseId).FirstOrDefault();

                                Imrp.ItemMultiMRPId = objItemMaster.ItemMultiMRPId; //change mrp itemid
                                Imrp.price = mrpdata.MRP; //Change MRP Price
                                Imrp.UnitofQuantity = mrpdata.UnitofQuantity;
                                Imrp.UOM = objItemMaster.UOM;
                                Imrp.PurchaseMinOrderQty = itemmaster.PurchaseMinOrderQty;//item PurchaseUnitName name
                                                                                          //Imrp.itemname = objItemMaster.itemBaseName + " " + Imrp.price + " MRP " + Imrp.UnitofQuantity + " " + Imrp.UOM; //item display name   
                                if (objItemMaster.IsSensitive == true)
                                {
                                    Imrp.IsSensitive = objItemMaster.IsSensitive;
                                    Imrp.itemname = objItemMaster.itemBaseName + " " + Imrp.price + " MRP " + Imrp.UnitofQuantity + " " + Imrp.UOM; //item display name                                  
                                }
                                else
                                {
                                    Imrp.IsSensitive = objItemMaster.IsSensitive;
                                    Imrp.itemname = objItemMaster.itemBaseName + " " + objItemMaster.price + " MRP "; //item display name                               
                                }
                                Imrp.SellingUnitName = Imrp.itemname + " " + Imrp.MinOrderQty + "Unit";//item selling unit name
                                Imrp.PurchaseUnitName = Imrp.itemname + " " + itemmaster.PurchaseMinOrderQty + "Unit";//item PurchaseUnitName name
                                Imrp.UpdatedDate = indianTime;
                                //itemMasters.Attach(Imrp);
                                this.Entry(Imrp).State = EntityState.Modified;
                            }


                        }
                        catch (Exception sd)
                        {


                        }

                        #region Item Master History
                        var itemoldData = itemMasters.Where(x => x.ItemId == itemmaster.ItemId).SingleOrDefault();
                        try
                        {


                            ItemMasterHistory Os = new ItemMasterHistory();
                            if (itemoldData != null)
                            {
                                Os.ItemId = itemoldData.ItemId;
                                Os.Cityid = itemoldData.Cityid;
                                Os.CityName = itemoldData.CityName;
                                Os.Categoryid = itemoldData.Categoryid;
                                Os.SubCategoryId = itemoldData.SubCategoryId;
                                Os.SubsubCategoryid = itemoldData.SubsubCategoryid;
                                Os.WarehouseId = itemoldData.WarehouseId;
                                Os.SupplierId = itemoldData.SupplierId;
                                Os.SUPPLIERCODES = itemoldData.SUPPLIERCODES;
                                Os.CompanyId = itemoldData.CompanyId;
                                Os.CategoryName = itemoldData.CategoryName;
                                Os.BaseCategoryid = itemoldData.BaseCategoryid;
                                Os.BaseCategoryName = itemoldData.BaseCategoryName;
                                Os.SubcategoryName = itemoldData.SubcategoryName;
                                Os.SubsubcategoryName = itemoldData.SubsubcategoryName;
                                Os.SupplierName = itemoldData.SupplierName;
                                Os.itemname = itemoldData.itemname;
                                Os.itemcode = itemoldData.itemcode;
                                Os.SellingUnitName = itemoldData.SellingUnitName;
                                Os.PurchaseUnitName = itemoldData.PurchaseUnitName;
                                Os.price = itemoldData.price;
                                Os.VATTax = itemoldData.VATTax;
                                Os.active = itemoldData.active;
                                Os.LogoUrl = itemoldData.LogoUrl;
                                Os.CatLogoUrl = itemoldData.CatLogoUrl;
                                Os.MinOrderQty = itemoldData.MinOrderQty;
                                Os.PurchaseMinOrderQty = itemoldData.PurchaseMinOrderQty;
                                Os.GruopID = itemoldData.GruopID;
                                Os.TGrpName = itemoldData.TGrpName;
                                Os.CessGrpID = itemoldData.GruopID;
                                Os.CessGrpName = itemoldData.TGrpName;
                                Os.TotalCessPercentage = itemoldData.TotalCessPercentage;

                                Os.Discount = itemoldData.Discount;
                                Os.UnitPrice = itemoldData.UnitPrice;
                                Os.Number = itemoldData.Number;
                                Os.PurchaseSku = itemoldData.PurchaseSku;
                                Os.SellingSku = itemoldData.SellingSku;
                                Os.PurchasePrice = itemoldData.PurchasePrice;
                                Os.GeneralPrice = itemoldData.GeneralPrice;
                                Os.title = itemoldData.title;
                                Os.Description = itemoldData.Description;
                                Os.StartDate = itemoldData.StartDate;
                                Os.EndDate = itemoldData.EndDate;
                                Os.PramotionalDiscount = itemoldData.PramotionalDiscount;
                                Os.TotalTaxPercentage = itemoldData.TotalTaxPercentage;
                                Os.WarehouseName = itemoldData.WarehouseName;

                                Os.CreatedDate = indianTime;
                                Os.UpdatedDate = itemoldData.UpdatedDate;
                                Os.Deleted = itemoldData.Deleted;
                                Os.IsDailyEssential = itemoldData.IsDailyEssential;
                                Os.SellingPrice = itemoldData.UnitPrice;
                                Os.StoringItemName = itemoldData.StoringItemName;
                                Os.SizePerUnit = itemoldData.SizePerUnit;
                                Os.HindiName = itemoldData.HindiName;
                                //Os.Barcode = itemoldData.Barcode;
                                Os.promoPoint = itemoldData.promoPoint;
                                Os.marginPoint = itemoldData.marginPoint;
                                if (UserName.DisplayName != null) { Os.UserName = UserName.DisplayName; } else { Os.UserName = UserName.PeopleFirstName; }
                                Os.userid = objItemMaster.userid;
                                //--anu--//
                                Os.DefaultBaseMargin = itemoldData.DefaultBaseMargin;//
                                Os.ShowMrp = itemoldData.ShowMrp;//MRP Price select Checkbox
                                Os.ShowUnit = itemoldData.ShowUnit;//Min order qty select Checkbox
                                Os.UOM = itemoldData.UOM; //Unit of Masurement like GM Kg 
                                Os.ShowUOM = itemoldData.ShowUOM;// Unit Of Masurement select Checkbox
                                Os.ShowType = itemoldData.ShowType;// fast slow non movinng
                                Os.itemBaseName = itemoldData.itemBaseName;
                                Os.ShowTypes = itemoldData.ShowTypes;// fast slow non moving
                                Os.Reason = itemoldData.Reason;// MRP Issue Stock Unavailable  Price Issue Other

                                ItemMasterHistoryDb.Add(Os);
                                int id = this.Commit();
                            }
                        }
                        catch (Exception ex)
                        {
                            logger.Error("Error loading  item:- " + itemmaster.itemname + "\n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
                        }
                    }
                    catch (Exception es)
                    {

                    }

                    try
                    {
                        CurrentStock cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == itemmaster.WarehouseId && x.CompanyId == objItemMaster.CompanyId && x.ItemMultiMRPId == objItemMaster.ItemMultiMRPId).SingleOrDefault();
                        if (cntstock == null)
                        {

                            CurrentStock newCstk = new CurrentStock();
                            //newCstk.ItemId = itemmaster.CentralItemId;
                            newCstk.CompanyId = itemmaster.CompanyId;
                            newCstk.itemBaseName = itemmaster.itemBaseName;
                            newCstk.itemname = itemmaster.itemname;
                            newCstk.ItemNumber = itemmaster.Number;
                            //newCstk.Barcode = itemmaster.Barcode;
                            newCstk.WarehouseId = itemmaster.WarehouseId;
                            newCstk.WarehouseName = itemmaster.WarehouseName;
                            newCstk.CurrentInventory = 0;
                            newCstk.CreationDate = indianTime;
                            newCstk.UpdatedDate = indianTime;
                            newCstk.MRP = itemmaster.price;
                            newCstk.UnitofQuantity = itemmaster.UnitofQuantity;
                            newCstk.UOM = itemmaster.UOM;
                            newCstk.ItemMultiMRPId = objItemMaster.ItemMultiMRPId;
                            DbCurrentStock.Add(newCstk);
                            this.Commit();
                            //try
                            //{
                            //    var itemoldDatas = DbCurrentStock.Where(x => x.ItemNumber == itemmaster.Number && x.WarehouseId == itemmaster.WarehouseId && x.ItemMultiMRPId == itemmaster.ItemMultiMRPId).FirstOrDefault();
                            //    CurrentStockHistory Oss = new CurrentStockHistory();
                            //    Oss.ItemId = itemoldDatas.ItemId;
                            //    Oss.StockId = itemoldDatas.StockId;
                            //    Oss.ItemNumber = itemoldDatas.ItemNumber;
                            //    Oss.itemname = itemoldDatas.itemname;
                            //    Oss.TotalInventory = itemoldDatas.CurrentInventory;
                            //    Oss.WarehouseName = itemoldDatas.WarehouseName;
                            //    Oss.Warehouseid = itemoldDatas.WarehouseId;
                            //    Oss.CompanyId = itemoldDatas.CompanyId;
                            //    Oss.ItemId = itemoldDatas.ItemId;
                            //    Oss.CreationDate = indianTime;
                            //    Oss.MRP = itemmaster.MRP;
                            //    Oss.UnitofQuantity = itemmaster.UnitofQuantity;
                            //    Oss.UOM = itemmaster.UOM;
                            //    Oss.itemBaseName = itemmaster.itemBaseName;
                            //    CurrentStockHistoryDb.Add(Oss);
                            //    int idd = this.SaveChanges();
                            //}
                            //catch (Exception ex)
                            //{

                            //}

                        }
                        else
                        {
                            cntstock.itemname = itemmaster.itemname;
                            cntstock.ItemNumber = itemmaster.Number;
                            //cntstock.Barcode = itemmaster.Barcode;
                            cntstock.WarehouseId = itemmaster.WarehouseId;
                            cntstock.WarehouseName = itemmaster.WarehouseName;
                            cntstock.UpdatedDate = indianTime;
                            cntstock.Deleted = false;
                            cntstock.ItemMultiMRPId = objItemMaster.ItemMultiMRPId;
                            cntstock.itemBaseName = itemmaster.itemBaseName;
                            //DbCurrentStock.Attach(cntstock);
                            this.Entry(cntstock).State = EntityState.Modified;
                            this.Commit();
                            //try
                            //{
                            //    var itemoldDat = DbCurrentStock.Where(x => x.ItemNumber == cntstock.ItemNumber && x.WarehouseId == cntstock.WarehouseId).SingleOrDefault();
                            //    CurrentStockHistory Oss = new CurrentStockHistory();
                            //    Oss.ItemId = itemoldDat.ItemId;
                            //    Oss.StockId = itemoldDat.StockId;
                            //    Oss.ItemNumber = itemoldDat.ItemNumber;
                            //    Oss.itemname = itemoldDat.itemname;
                            //    Oss.TotalInventory = itemoldDat.CurrentInventory;
                            //    Oss.WarehouseName = itemoldDat.WarehouseName;
                            //    Oss.Warehouseid = itemoldDat.WarehouseId;
                            //    Oss.CompanyId = itemoldDat.CompanyId;
                            //    Oss.ItemId = itemoldDat.ItemId;
                            //    Oss.CreationDate = indianTime;
                            //    Oss.MRP = itemmaster.price;
                            //    Oss.UnitofQuantity = itemmaster.UnitofQuantity;
                            //    Oss.UOM = itemmaster.UOM;
                            //    Oss.itemBaseName = itemmaster.itemBaseName;
                            //    CurrentStockHistoryDb.Add(Oss);
                            //    int idd = this.SaveChanges();

                            //}
                            //catch (Exception ex)
                            //{
                            //}
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Error(ex.Message);
                    }

                    CommonHelper.refreshItemMaster(itemmaster.WarehouseId, ids);
                    CommonHelper.refreshItemMaster(itemmaster.WarehouseId);
                }
                else
                {
                    return objItemMaster;
                }

            }
            return objItemMaster;
        }
        #region     
        public IList<ItemMaster> filteredItemMaster(string categoryid, string subcategoryid, string subsubcategoryid, int CompanyId)
        {
            // int CityID = Convert.ToInt32(cityid.Trim());
            int CategoryID = Convert.ToInt32(categoryid.Trim());
            int SubCategoryID = Convert.ToInt32(subcategoryid.Trim());
            int SubSubCategoryID = Convert.ToInt32(subsubcategoryid.Trim());

            //if (cityid == "undefined" || cityid == null || cityid == "0")
            //{
            if (categoryid == "undefined" || categoryid == null || categoryid == "0")
            {
                var filteredlist = (from od in itemMasters where od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
                return filteredlist;
            }
            else
            {
                var filteredlist = (from od in itemMasters where od.Categoryid == CategoryID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
                return filteredlist;
            }
            //}
            //else
            //{
            //    if (categoryid == "undefined" || categoryid == null || categoryid == "0")
            //    {
            //        var filteredlist = (from od in itemMasters where od.Cityid == CityID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
            //        return filteredlist;
            //    }
            //    else
            //    {
            //        var filteredlist = (from od in itemMasters where od.Categoryid == CategoryID && od.Cityid == CityID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
            //        return filteredlist;
            //    }
            //}
        }

        public IList<ItemMaster> filteredItemMasterWid(string categoryid, string subcategoryid, string subsubcategoryid, int CompanyId, int Warehouse_id)
        {
            // int CityID = Convert.ToInt32(cityid.Trim());
            int CategoryID = Convert.ToInt32(categoryid.Trim());
            int SubCategoryID = Convert.ToInt32(subcategoryid.Trim());
            int SubSubCategoryID = Convert.ToInt32(subsubcategoryid.Trim());
            List<ItemMaster> list = new List<ItemMaster>();
            //if (cityid == "undefined" || cityid == null || cityid == "0")
            //{
            if (categoryid == "undefined" || categoryid == null || categoryid == "0")
            {
                var filteredlist = (from od in itemMasters where od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.WarehouseId == Warehouse_id && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
                foreach (var item in filteredlist)
                {
                    item.WithTaxNetPurchasePrice = Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3);//With tax
                }
                return filteredlist;
            }
            else
            {
                var filteredlist = (from od in itemMasters
                                    where od.Categoryid == CategoryID
             && od.WarehouseId == Warehouse_id && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID
             && od.active == true && od.Deleted == false && od.CompanyId == CompanyId
                                    select od
                                    ).ToList();

                foreach (var item in filteredlist)
                {
                    item.WithTaxNetPurchasePrice = Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3);//With tax
                }
                return filteredlist;
            }
            //}
            //else
            //{
            //    if (categoryid == "undefined" || categoryid == null || categoryid == "0")
            //    {
            //        var filteredlist = (from od in itemMasters where od.Cityid == CityID && od.WarehouseId == Warehouse_id && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
            //        return filteredlist;
            //    }
            //    else
            //    {
            //        var filteredlist = (from od in itemMasters where od.Categoryid == CategoryID && od.WarehouseId == Warehouse_id && od.Cityid == CityID && od.SubCategoryId == SubCategoryID && od.SubsubCategoryid == SubSubCategoryID && od.active == true && od.Deleted == false && od.CompanyId == CompanyId select od).ToList();
            //        return filteredlist;
            //    }
            //}
        }

        #endregion

        public List<ItemMaster> AddItemMove(List<MoveWarehouse> item, int warehid)
        {
            List<ItemMaster> ItemList = new List<ItemMaster>();
            foreach (var i in item)
            {
                Warehouse warehouse = Warehouses.Where(x => x.WarehouseId == warehid && x.Deleted == false).Select(x => x).FirstOrDefault();
                int id = i.ItemId;
                ItemMaster im = itemMasters.Where(x => x.ItemId.Equals(id)).Select(x => x).SingleOrDefault();
                if (im != null)
                {
                    ItemMaster objitem = new ItemMaster();
                    im.WarehouseId = warehid;
                    im.WarehouseName = warehouse.WarehouseName;
                    itemMasters.Add(im);
                    int id1 = this.Commit();
                    ItemList.Add(im);
                    CommonHelper.refreshItemMaster(im.WarehouseId, im.Categoryid);
                }
            }
            return ItemList;
        }
        public bool DeleteItemMaster(int id, int CompanyId)
        {
            try
            {
                ItemMasterCentral itemmasr = ItemMasterCentralDB.Where(x => x.Id == id && x.Deleted == false && x.CompanyId == CompanyId).SingleOrDefault();
                if (itemmasr != null)
                {
                    itemmasr.active = false;
                    itemmasr.Deleted = true;
                    //ItemMasterCentralDB.Attach(itemmasr);
                    this.Entry(itemmasr).State = EntityState.Modified;
                    this.Commit();

                    //List<ItemMasterCentral> itemList = ItemMasterCentralDB.Where(x => x.Number == itemmasr.Number && x.Deleted == false && x.CompanyId == CompanyId).ToList();
                    //if (itemList.Count == 0)
                    //{
                    //    CurrentStock cntstock = DbCurrentStock.Where(x => x.ItemNumber == itemmasr.Number && x.WarehouseId == itemmasr.WarehouseId && x.Deleted == false && x.CompanyId == CompanyId).SingleOrDefault();

                    //    if (cntstock != null)
                    //    {
                    //        cntstock.Deleted = true;
                    //        DbCurrentStock.Attach(cntstock);
                    //        this.Entry(cntstock).State = EntityState.Modified;
                    //        this.SaveChanges();
                    //    }
                    //}
                }
                // CommonHelper.refreshItemMaster(itemmasr.WarehouseId, itemmasr.Categoryid);
                return true;
            }
            catch
            {
                return false;
            }
        }


        //Nikhil Masih - 1st API
        public List<DON_PinCodeDc> AllDONPincode(AuthContext context)
        {
            List<DON_PinCodeDc> dONPinCodeDcs = new List<DON_PinCodeDc>();
            var dONPinCodeDB = context.DONPinCodeDB.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();

            var warehoueids = dONPinCodeDB.Select(x => x.MappingWarehouseId).Distinct().ToList();
            var Clusterids = dONPinCodeDB.Select(x => x.DefaultClusterId).Distinct().ToList();

            dONPinCodeDcs = AgileObjects.AgileMapper.Mapper.Map(dONPinCodeDB).ToANew<List<DON_PinCodeDc>>();


            var warehouseList = context.Warehouses.Where(x => warehoueids.Contains(x.WarehouseId)).ToList();
            var ClusterList = context.Clusters.Where(x => Clusterids.Contains(x.ClusterId)).ToList();
            dONPinCodeDcs.ForEach(x =>
            {
                x.WarehoueName = warehouseList.FirstOrDefault(y => y.WarehouseId == x.MappingWarehouseId).WarehouseName;
                x.ClusterName = ClusterList.FirstOrDefault(y => y.ClusterId == x.DefaultClusterId).ClusterName;
            });
            return dONPinCodeDcs;
        }


        public DON_PinCodeDc submitDONPincode(AuthContext context, DON_PinCodeDc data)
        {
            //bool res = true;
            //List<DONPinCodeDc> dONPinCodeDcs = new List<DONPinCodeDc>();
            //context.DONPinCodeDB.Add()
            //Warehouse warehouse = Warehouses.Where(x => x.WarehouseId == id).Where(x => x.Deleted == false && x.CompanyId == CompanyId).FirstOrDefault();

            var CheckPin = context.DONPinCodeDB.Where(x => x.PinCode == data.PinCode && x.IsDeleted == false && x.IsActive == true).ToList();
            DON_PinCodeDc obj2 = new DON_PinCodeDc();
            DONPinCode obj = new DONPinCode();
            if (CheckPin.Count == 0)
            {
                obj.PinCode = data.PinCode;
                obj.MappingWarehouseId = data.MappingWarehouseId;
                obj.DefaultClusterId = data.DefaultClusterId;

                obj.CreatedDate = indianTime;
                obj.ModifiedDate = indianTime;

                obj.ModifiedBy = 1;
                obj.CreatedBy = 1;

                obj.IsActive = true;
                obj.IsDeleted = false;

                context.DONPinCodeDB.Add(obj);
                this.Commit();
                //context.SaveChanges();
                //context.Commit();
                //int id = this.Commit();
                obj2.ErrorMsg = "Submitted Successfully";
                return obj2;
            }
            else
            {
                //DONPinCode obj = new DONPinCode();
                obj2.ErrorMsg = "Already exists";
                return obj2;
            }

        }

        public int deleteDONPincode(int deleteID)
        {
            DONPinCode obj = new DONPinCode();
            var deletedRow = DONPinCodeDB.FirstOrDefault(x => x.Id == deleteID);
            if (deletedRow != null)
            {
                deletedRow.IsActive = false;
                deletedRow.IsDeleted = true;
                this.Entry(deletedRow).State = EntityState.Modified;
                this.Commit();
                return deleteID;
            }
            else
            {
                return 0;
            }
        }

        public List<CustomerRefferalConfigurationDC> GetAllCustReffConfigList(AuthContext context, int ReferralType, int cityID)
        {
            List<CustomerRefferalConfigurationDC> CustRefConfigDcs = new List<CustomerRefferalConfigurationDC>();
            List<CustomerReferralConfiguration> CustReffConfigList = new List<CustomerReferralConfiguration>();
            if (cityID > 0)
            {
                //CustReffConfigList = context.CustomerReferralConfigurationDb.Where(x => x.ReferralType == ReferralType && x.IsActive == true && x.IsDeleted == false && x.CityId == cityID).ToList();
                CustReffConfigList = context.CustomerReferralConfigurationDb.Where(x => x.ReferralType == ReferralType && x.IsDeleted == false && x.CityId == cityID).ToList();
            }
            else
            {
                //CustReffConfigList = context.CustomerReferralConfigurationDb.Where(x => x.ReferralType == ReferralType && x.IsActive == true && x.IsDeleted == false).ToList();
                CustReffConfigList = context.CustomerReferralConfigurationDb.Where(x => x.ReferralType == ReferralType && x.IsDeleted == false).ToList();
            }

            var cityIDs = CustReffConfigList.Select(y => y.CityId).Distinct().ToList();

            CustRefConfigDcs = AgileObjects.AgileMapper.Mapper.Map(CustReffConfigList).ToANew<List<CustomerRefferalConfigurationDC>>();

            var CityNameList = context.Cities.Where(x => cityIDs.Contains(x.Cityid)).ToList();

            CustRefConfigDcs.ForEach(x =>
            {
                x.CityName = CityNameList.FirstOrDefault(y => y.Cityid == x.CityId).CityName;
            });

            return CustRefConfigDcs;
        }

        public int deleteCustRefConfig(int deleteID)
        {
            CustomerReferralConfiguration obj = new CustomerReferralConfiguration();
            var deletedRow = CustomerReferralConfigurationDb.FirstOrDefault(x => x.Id == deleteID);
            if (deletedRow != null)
            {
                deletedRow.IsActive = false;
                deletedRow.IsDeleted = true;
                this.Entry(deletedRow).State = EntityState.Modified;
                this.Commit();
                return deleteID;
            }
            else
            {
                return 0;
            }
        }

        public string SetCustReffConfigActiveStatus(AuthContext context, Boolean IsActive, int id)
        {
            CustomerReferralConfiguration obj = new CustomerReferralConfiguration();
            var deletedRow = CustomerReferralConfigurationDb.FirstOrDefault(x => x.Id == id);
            if (deletedRow != null)
            {
                deletedRow.IsActive = IsActive;
                //deletedRow.IsDeleted = true;
                this.Entry(deletedRow).State = EntityState.Modified;
                this.Commit();
                return "changes saved!";
            }
            else
            {
                return "ERROR - changes not saved";
            }

            //return "response";
        }

        public List<CustomerRefStatusDC> GetCustRefStatus(AuthContext context)
        {
            //List<CustomerRefferalConfigurationDC> CustRefConfigDcs = new List<CustomerRefferalConfigurationDC>();
            List<CustomerRefStatusDC> CustReffStatusListDC = new List<CustomerRefStatusDC>();
            var CustomerRefList = context.CustomerReferralStatusDb.Where(x => x.IsActive == true && x.IsDeleted == false).ToList();
            CustReffStatusListDC = AgileObjects.AgileMapper.Mapper.Map(CustomerReferralStatusDb).ToANew<List<CustomerRefStatusDC>>();
            return CustReffStatusListDC;
        }

        //Nikhil Masih's work to be continued...






        public IEnumerable<Warehouse> AllWarehouse(int compid)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.active == true && (p.IsKPP == false || p.IsKppShowAsWH == true)).OrderBy(p => p.WarehouseName).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehousewithoutTestId(int compid)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.active == true && p.IsKPP == false).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehouseWithKPP(int compid)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.active == true).OrderBy(p => p.WarehouseName).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehouse(int compid, bool IsKPP)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.IsKPP == IsKPP).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }
        public IEnumerable<Warehouse> AllWarehouseWid(int compid, int Warehouse_id)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.WarehouseId == Warehouse_id && (p.IsKPP == false || p.IsKppShowAsWH == true) && p.active == true).OrderBy(p => p.WarehouseName).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehouseWidwithKPP(int compid, int Warehouse_id)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.WarehouseId == Warehouse_id && p.active == true).OrderBy(p => p.WarehouseName).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehouseWidwithKPP(int compid, int Warehouse_id, bool IsKPP)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.WarehouseId == Warehouse_id && p.IsKPP == IsKPP).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }

        public IEnumerable<Warehouse> AllWarehouseWid(int compid, int Warehouse_id, bool IsKPP)
        {
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(p => p.CompanyId == compid && p.Deleted == false && p.WarehouseId == Warehouse_id && p.IsKPP == IsKPP).AsEnumerable();
            }
            else
            {
                List<Warehouse> warehouse = new List<Warehouse>();
                return warehouse.AsEnumerable();
            }
        }
        public Warehouse AddWarehouse(Warehouse warehouse)
        {
            try
            {
                //var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == warehouse.WarehouseManagerId).FirstOrDefault();
                //wrong logic
                List<Warehouse> warehouses = Warehouses.Where(c => c.WarehouseId.Equals(warehouse.WarehouseId) && c.Deleted == false && c.CompanyId == warehouse.CompanyId).ToList();
                City city = Cities.Where(x => x.Cityid == warehouse.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
                State St = States.Where(x => x.Stateid == warehouse.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
                TaxGroup Tg = DbTaxGroup.Where(x => x.GruopID == warehouse.GruopID && x.Deleted == false && x.CompanyId == warehouse.CompanyId).Select(x => x).SingleOrDefault();
                Warehouse objWarehouse = new Warehouse();
                if (warehouses.Count == 0)
                {
                    warehouse.GruopID = warehouse.GruopID;
                    if (Tg != null)
                    {
                        warehouse.TGrpName = Tg.TGrpName;
                    }
                    else
                    {
                        warehouse.TGrpName = "Tax";
                    }

                    var warehouseCount = Warehouses.Where(x => x.Cityid == warehouse.Cityid && x.Stateid == warehouse.Stateid).Count();

                    var wareHouseName = St.AliasName + "-" + city.aliasName + "-" + (warehouseCount + 1);

                    warehouse.WarehouseName = wareHouseName;

                    warehouse.CreatedBy = warehouse.CreatedBy;
                    warehouse.CreatedDate = indianTime;
                    warehouse.UpdatedDate = indianTime;
                    warehouse.CityName = city.CityName;
                    warehouse.StateName = St.StateName;
                    //warehouse.CountryName = cy.CountryName;
                    //warehouse.ZoneName = ze.ZoneName;
                    //warehouse.RegionName = re.RegionName;
                    //warehouse.WarehouseManagerName = data.DisplayName;
                    ////warehouse.WarehouseManagerId = warehouse.WarehouseManagerId;
                    warehouse.Deleted = false;
                    Warehouses.Add(warehouse);
                    int id = this.Commit();
                    if (id != 0)
                    {

                        string sqlquery = "Insert into itemmasters ( itemname ,active,itemBaseName	,itemcode,Barcode,WarehouseId,WarehouseName,BaseCategoryid,BaseCategoryName,Categoryid,CategoryName,CompanyId,"
                                        + " CreatedDate,Deleted ,Description ,Discount,DisplaySellingPrice,free,GeneralPrice,GruopID ,CessGrpID,HindiName,HSNCode,IsBulkItem,IsDailyEssential,"
                                        + " IsHighestDPItem ,IsOffer,IsPramotionalItem,LogoUrl,Margin,marginPoint,MinOrderQty,NetPurchasePrice,Number,PramotionalDiscount ,price ,"
                                        + " ShowTypes, DefaultBaseMargin, promoPerItems,promoPoint ,PurchaseMinOrderQty,PurchasePrice,PurchaseSku,PurchaseUnitName ,SellingSku,SellingUnitName, SizePerUnit, "
                                        + " SubCategoryId ,SubcategoryName,SubsubCategoryid,SubsubcategoryName,SubSubCode,TGrpName,CessGrpName ,UnitPrice,VATTax ,UpdatedDate,ItemMultiMRPId,"
                                        + " MRP,UnitofQuantity,UOM ,ItemMultiMRPId,itemname,itemBaseName)			"
                                        + " select  itemname ,0,itemBaseName	,itemcode,Barcode," + warehouse.WarehouseId + ",'" + warehouse.WarehouseName + "',BaseCategoryid,BaseCategoryName,Categoryid,CategoryName,CompanyId,"
                                        + " getdate(),0 ,Description ,Discount,DisplaySellingPrice,free,GeneralPrice,GruopID ,CessGrpID,HindiName,HSNCode,IsBulkItem,IsDailyEssential,"
                                        + " IsHighestDPItem ,IsOffer,IsPramotionalItem,LogoUrl,Margin,marginPoint,MinOrderQty,NetPurchasePrice,Number,PramotionalDiscount ,price ,"
                                        + " ShowTypes, DefaultBaseMargin, promoPerItems,promoPoint ,PurchaseMinOrderQty,PurchasePrice,PurchaseSku,PurchaseUnitName ,SellingSku,SellingUnitName, SizePerUnit 	"
                                        + " SubCategoryId ,SubcategoryName,SubsubCategoryid,SubsubcategoryName,SubSubCode,TGrpName,CessGrpName ,UnitPrice,VATTax ,UpdatedDate,ItemMultiMRPId, "
                                        + " MRP,UnitofQuantity,UOM ,ItemMultiMRPId,itemname,itemBaseName from ItemMasterCentrals where Deleted=0";
                        int i = this.Database.ExecuteSqlCommand(sqlquery);
                        if (i > 0)
                        {
                            sqlquery = " MERGE CurrentStockS AS TARGET"
                                            + "USING itemmasters AS SOURCE "
                                            + "ON (TARGET.ItemNumber = SOURCE.Number AND TARGET.WarehouseId = " + warehouse.WarehouseId + " AND TARGET.CompanyId = SOURCE.CompanyId AND TARGET.ItemMultiMRPId = SOURCE.ItemMultiMRPId)  "
                                            + "WHEN MATCHED THEN"
                                            + "UPDATE SET TARGET.ItemNumber = SOURCE.Number,"
                                            + "TARGET.Barcode = SOURCE.Barcode,"
                                            + "TARGET.WarehouseId = SOURCE.WarehouseId,"
                                            + "TARGET.WarehouseName = SOURCE.WarehouseName,"
                                            + "TARGET.CompanyId = SOURCE.CompanyId,"
                                            + "TARGET.Deleted = 0,"
                                            + "TARGET.UpdatedDate = GETDATE(), "
                                            + " TARGET.MRP = SOURCE.price,"
                                            + "TARGET.UnitofQuantity = SOURCE.UnitofQuantity,"
                                            + "TARGET.UOM = SOURCE.UOM,"
                                            + "TARGET.ItemMultiMRPId = SOURCE.ItemMultiMRPId,"
                                            + "TARGET.itemname = SOURCE.itemname,"
                                            + "TARGET.itemBaseName = SOURCE.itemBaseName,"
                                            + "TARGET.UpdatedDate = GETDATE() "
                                            + "WHEN NOT MATCHED Then"
                                            + "insert ( ItemId, ItemNumber ,Barcode ,WarehouseId ,WarehouseName,CompanyId ,CurrentInventory,CreationDate,UpdatedDate,MRP ,UnitofQuantity,UOM,ItemMultiMRPId ,itemname,itemBaseName )"
                                            + "values(SOURCE.ItemId,SOURCE.Number,SOURCE.Barcode,SOURCE.WarehouseId,SOURCE.WarehouseName,SOURCE.CompanyId,0,getdate(),getdate(),SOURCE.price,SOURCE.UnitofQuantity,SOURCE.UOM,SOURCE.ItemMultiMRPId,SOURCE.itemname,SOURCE.itemBaseName)";
                            i = this.Database.ExecuteSqlCommand(sqlquery);
                        }
                        //List<ItemMasterCentral> itemMaster = ItemMasterCentralDB.Where(x => x.Deleted == false).ToList();
                        //foreach (ItemMasterCentral it in itemMaster)
                        //{
                        //    try
                        //    {
                        //        ItemMaster i = new ItemMaster();
                        //        i.itemname = it.itemname;
                        //        //i.CentralItemId = it.Id;
                        //        i.active = false;
                        //        i.itemBaseName = it.itemBaseName;
                        //        i.itemcode = it.itemcode;
                        //        i.Barcode = it.Barcode;
                        //        i.WarehouseId = warehouse.WarehouseId;
                        //        i.WarehouseName = warehouse.WarehouseName;
                        //        i.BaseCategoryid = it.BaseCategoryid;
                        //        i.BaseCategoryName = it.BaseCategoryName;
                        //        i.Categoryid = it.Categoryid;
                        //        i.CategoryName = it.CategoryName;
                        //        i.CompanyId = it.CompanyId;
                        //        i.CreatedDate = indianTime;
                        //        i.CurrentStock = 0;
                        //        i.Deleted = false;
                        //        i.Description = it.Description;
                        //        i.Discount = it.Discount;
                        //        i.DisplaySellingPrice = it.DisplaySellingPrice;
                        //        i.free = it.free;
                        //        i.GeneralPrice = it.GeneralPrice;
                        //        i.GruopID = it.GruopID;
                        //        i.CessGrpID = it.CessGrpID;//cess
                        //        i.HindiName = it.HindiName;
                        //        i.HSNCode = it.HSNCode;
                        //        i.IsBulkItem = it.IsBulkItem;
                        //        i.IsDailyEssential = it.IsDailyEssential;
                        //        i.IsHighestDPItem = it.IsHighestDPItem;
                        //        i.IsOffer = it.IsOffer;
                        //        i.IsPramotionalItem = it.IsPramotionalItem;
                        //        i.LogoUrl = it.LogoUrl;
                        //        i.Margin = it.Margin;
                        //        i.marginPoint = it.marginPoint;
                        //        i.MinOrderQty = it.MinOrderQty;
                        //        i.NetPurchasePrice = it.NetPurchasePrice;
                        //        i.Number = it.Number;
                        //        i.PramotionalDiscount = it.PramotionalDiscount;
                        //        i.price = it.price;
                        //        i.ShowTypes = it.ShowTypes;
                        //        i.DefaultBaseMargin = it.DefaultBaseMargin;
                        //        i.promoPerItems = it.promoPerItems;
                        //        i.promoPoint = it.promoPoint;
                        //        i.PurchaseMinOrderQty = it.PurchaseMinOrderQty;
                        //        i.PurchasePrice = it.PurchasePrice;
                        //        i.PurchaseSku = it.PurchaseSku;
                        //        i.PurchaseUnitName = it.PurchaseUnitName;
                        //        i.SellingSku = it.SellingSku;
                        //        i.SellingUnitName = it.SellingUnitName;
                        //        i.SizePerUnit = it.SizePerUnit;
                        //        i.SubCategoryId = it.SubCategoryId;
                        //        i.SubcategoryName = it.SubcategoryName;
                        //        i.SubsubCategoryid = it.SubsubCategoryid;
                        //        i.SubsubcategoryName = it.SubsubcategoryName;
                        //        i.SubSubCode = it.SubSubCode;
                        //        i.TGrpName = it.TGrpName;
                        //        i.CessGrpName = it.CessGrpName;//cess
                        //        i.UnitPrice = it.UnitPrice;
                        //        i.VATTax = it.VATTax;
                        //        i.UpdatedDate = indianTime;
                        //        i.ItemMultiMRPId = it.ItemMultiMRPId;
                        //        // Multimrp
                        //        i.MRP = it.price;
                        //        i.UnitofQuantity = it.UnitofQuantity;
                        //        i.UOM = it.UOM;
                        //        i.ItemMultiMRPId = it.ItemMultiMRPId;
                        //        i.itemname = it.itemname;
                        //        i.active = false;
                        //        i.itemBaseName = it.itemBaseName;
                        //        itemMasters.Add(i);
                        //        this.SaveChanges();
                        //    }
                        //    catch (Exception ex)
                        //    {
                        //        logger.Error(ex.Message);
                        //    }
                        //    CurrentStock cntstock = DbCurrentStock.Where(x => x.ItemNumber == it.Number && x.WarehouseId == warehouse.WarehouseId && x.CompanyId == it.CompanyId && x.ItemMultiMRPId == it.ItemMultiMRPId).SingleOrDefault();
                        //    if (cntstock == null)
                        //    {
                        //        CurrentStock newCstk = new CurrentStock();
                        //        newCstk.ItemId = it.Id;

                        //        newCstk.ItemNumber = it.Number;
                        //        newCstk.Barcode = it.Barcode;
                        //        newCstk.WarehouseId = warehouse.WarehouseId;
                        //        newCstk.WarehouseName = warehouse.WarehouseName;
                        //        newCstk.CompanyId = it.CompanyId;
                        //        newCstk.CurrentInventory = 0;
                        //        newCstk.CreationDate = indianTime;
                        //        newCstk.UpdatedDate = indianTime;


                        //        // Multimrp
                        //        newCstk.MRP = it.price;
                        //        newCstk.UnitofQuantity = it.UnitofQuantity;
                        //        newCstk.UOM = it.UOM;
                        //        newCstk.ItemMultiMRPId = it.ItemMultiMRPId;
                        //        newCstk.itemname = it.itemname;
                        //        newCstk.itemBaseName = it.itemBaseName;

                        //        DbCurrentStock.Add(newCstk);
                        //        this.SaveChanges();
                        //        try
                        //        {
                        //            var itemoldData = DbCurrentStock.Where(x => x.ItemNumber == it.Number & x.WarehouseId == warehouse.WarehouseId && x.ItemMultiMRPId == it.ItemMultiMRPId).SingleOrDefault();
                        //            CurrentStockHistory Oss = new CurrentStockHistory();
                        //            Oss.ItemId = itemoldData.ItemId;
                        //            Oss.StockId = itemoldData.StockId;
                        //            Oss.ItemNumber = itemoldData.ItemNumber;
                        //            Oss.itemname = itemoldData.itemname;
                        //            Oss.TotalInventory = itemoldData.CurrentInventory;
                        //            Oss.WarehouseName = itemoldData.WarehouseName;
                        //            Oss.Warehouseid = itemoldData.WarehouseId;
                        //            Oss.CompanyId = itemoldData.CompanyId;
                        //            Oss.ItemId = itemoldData.ItemId;
                        //            Oss.CreationDate = indianTime;
                        //            // Multimrp
                        //            newCstk.MRP = it.price;
                        //            newCstk.UnitofQuantity = it.UnitofQuantity;
                        //            newCstk.UOM = it.UOM;
                        //            newCstk.ItemMultiMRPId = it.ItemMultiMRPId;
                        //            newCstk.itemname = it.itemname;
                        //            newCstk.itemBaseName = it.itemBaseName;
                        //            CurrentStockHistoryDb.Add(Oss);
                        //            int idd = this.SaveChanges();
                        //        }
                        //        catch (Exception ex)
                        //        {
                        //            logger.Error(ex.Message);
                        //        }
                        //    }
                        //    else
                        //    {

                        //        cntstock.ItemNumber = it.Number;
                        //        cntstock.Barcode = it.Barcode;
                        //        cntstock.WarehouseId = warehouse.WarehouseId;
                        //        cntstock.WarehouseName = warehouse.WarehouseName;
                        //        cntstock.CompanyId = it.CompanyId;
                        //        cntstock.Deleted = false;
                        //        cntstock.UpdatedDate = indianTime;

                        //        // Multimrp
                        //        cntstock.MRP = it.price;
                        //        cntstock.UnitofQuantity = it.UnitofQuantity;
                        //        cntstock.UOM = it.UOM;
                        //        cntstock.ItemMultiMRPId = it.ItemMultiMRPId;
                        //        cntstock.itemname = it.itemname;
                        //        cntstock.itemBaseName = it.itemBaseName;
                        //        cntstock.UpdatedDate = indianTime;
                        //        //DbCurrentStock.Attach(cntstock);
                        //        this.Entry(cntstock).State = EntityState.Modified;
                        //        this.SaveChanges();
                        //        try
                        //        {
                        //            var itemoldData = DbCurrentStock.Where(x => x.ItemNumber == cntstock.ItemNumber && x.WarehouseId == cntstock.WarehouseId && x.ItemMultiMRPId == it.ItemMultiMRPId).SingleOrDefault();
                        //            CurrentStockHistory Oss = new CurrentStockHistory();
                        //            Oss.ItemId = itemoldData.ItemId;
                        //            Oss.StockId = itemoldData.StockId;
                        //            Oss.ItemNumber = itemoldData.ItemNumber;
                        //            Oss.itemname = itemoldData.itemname;
                        //            Oss.TotalInventory = itemoldData.CurrentInventory;
                        //            Oss.WarehouseName = itemoldData.WarehouseName;
                        //            Oss.Warehouseid = itemoldData.WarehouseId;
                        //            Oss.CompanyId = itemoldData.CompanyId;
                        //            Oss.ItemId = itemoldData.ItemId;
                        //            Oss.CreationDate = DateTime.Now;
                        //            CurrentStockHistoryDb.Add(Oss);
                        //            int idd = this.SaveChanges();
                        //        }
                        //        catch (Exception ex)
                        //        {
                        //            logger.Error(ex.Message);
                        //        }
                        //    }
                        //}
                    }
                    return warehouse;
                }
                else
                {
                    return objWarehouse;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public Warehouse getwarehousebyid(int id, int CompanyId)
        {
            return Warehouses.Where(p => p.WarehouseId == id && p.Deleted == false && p.CompanyId == CompanyId).SingleOrDefault();
        }
        public IEnumerable<Warehouse> AllWHouseforapp(int CompanyId)
        {
            //var warehouse = Warehouses.Where(c => c.Mobile == mobile).AsEnumerable();
            if (Warehouses.AsEnumerable().Count() > 0)
            {
                return Warehouses.Where(x => x.Deleted == false && x.CompanyId == CompanyId).AsEnumerable();
            }
            else
            {
                return null;
            }
        }
        public Warehouse PutWarehouse(Warehouse objwarehouse)
        {
            RegionZone reg = Regions.Where(x => x.RegionId == objwarehouse.RegionId && x.Deleted == false).Select(x => x).FirstOrDefault();
            Warehouse warehouse = Warehouses.Where(x => x.WarehouseId == objwarehouse.WarehouseId && x.Deleted == false && x.CompanyId == objwarehouse.CompanyId).FirstOrDefault();
            City cit = Cities.Where(x => x.Cityid == objwarehouse.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            //RegionZone reg = Regions.Where(x => x.RegionId == objwarehouse.RegionId && x.Deleted == false).Select(x => x).FirstOrDefault();
            State st = States.Where(x => x.Stateid == objwarehouse.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            var it = itemMasters.Where(x => x.WarehouseId == objwarehouse.WarehouseId && x.Deleted == false && x.active == false && x.CompanyId == objwarehouse.CompanyId).Count();
            TaxGroup Tg = DbTaxGroup.Where(x => x.GruopID == objwarehouse.GruopID && x.Deleted == false && x.CompanyId == warehouse.CompanyId).Select(x => x).SingleOrDefault();
            if (warehouse != null)
            {
                warehouse.UpdatedDate = indianTime;
                warehouse.Stateid = objwarehouse.Stateid;
                warehouse.Cityid = objwarehouse.Cityid;
                warehouse.CityName = cit.CityName;
                warehouse.WarehouseName = objwarehouse.WarehouseName;
                warehouse.StateName = st.StateName;
                warehouse.CreatedBy = objwarehouse.CreatedBy;
                warehouse.CreatedDate = objwarehouse.CreatedDate;
                warehouse.UpdateBy = objwarehouse.UpdateBy;
                warehouse.Address = objwarehouse.Address;
                warehouse.Email = objwarehouse.Email;
                warehouse.Phone = objwarehouse.Phone;
                warehouse.GSTin = objwarehouse.GSTin;
                warehouse.CompanyId = objwarehouse.CompanyId;
                warehouse.CompanyName = objwarehouse.CompanyName;
                warehouse.active = objwarehouse.active;
                warehouse.GruopID = objwarehouse.GruopID;
                warehouse.Createactive = objwarehouse.Createactive;
                warehouse.RegionId = objwarehouse.RegionId;
                warehouse.IsKPP = objwarehouse.IsKPP;
                warehouse.CapacityinAmount = objwarehouse.CapacityinAmount;
                warehouse.FSSAILicenseNumber = objwarehouse.FSSAILicenseNumber;
                warehouse.FSSAILicenseDate = objwarehouse.FSSAILicenseDate;
                warehouse.FSSAILicenseExpiryDate = objwarehouse.FSSAILicenseExpiryDate;
                warehouse.IsCnF = objwarehouse.IsCnF;
                warehouse.IsStore = objwarehouse.IsStore;
                //warehouse.TGrpName = objwarehouse.TGrpName;       
                if (Tg != null)
                {
                    warehouse.TGrpName = Tg.TGrpName;
                }
                else
                {
                    warehouse.TGrpName = "Tax";
                }
                if (it < 1 && objwarehouse.Createactive == true)
                {
                    string sqlquery = "Insert into itemmasters ( itemname ,active,itemBaseName	,itemcode,WarehouseId,WarehouseName,BaseCategoryid,BaseCategoryName,Categoryid,CategoryName,CompanyId,"
                                                  + " CreatedDate,Deleted ,Description ,Discount,DisplaySellingPrice,free,GeneralPrice,GruopID ,CessGrpID,HindiName,HSNCode,IsBulkItem,IsDailyEssential,"
                                                  + " IsHighestDPItem ,IsOffer,IsPramotionalItem,LogoUrl,Margin,marginPoint,MinOrderQty,NetPurchasePrice,Number,PramotionalDiscount ,price ,"
                                                  + " ShowTypes, DefaultBaseMargin, promoPerItems,promoPoint ,PurchaseMinOrderQty,PurchasePrice,PurchaseSku,PurchaseUnitName ,SellingSku,SellingUnitName, SizePerUnit, "
                                                  + " SubCategoryId ,SubcategoryName,SubsubCategoryid,SubsubcategoryName,SubSubCode,TGrpName,CessGrpName ,UnitPrice,VATTax ,UpdatedDate,"
                                                  + " MRP,UnitofQuantity,UOM ,ItemMultiMRPId,cityid,SupplierId,TotalTaxPercentage,inTally)			"
                                                  + " select  itemname ,0,itemBaseName	,itemcode," + objwarehouse.WarehouseId + ",'" + objwarehouse.WarehouseName + "',BaseCategoryid,BaseCategoryName,Categoryid,CategoryName,CompanyId,"
                                                  + " getdate(),0 ,Description ,Discount,DisplaySellingPrice,free,GeneralPrice,GruopID ,CessGrpID,HindiName,HSNCode,IsBulkItem,IsDailyEssential,"
                                                  + " IsHighestDPItem ,IsOffer,IsPramotionalItem,LogoUrl,Margin,marginPoint,MinOrderQty,NetPurchasePrice,Number,PramotionalDiscount ,price ,"
                                                  + " ShowTypes, DefaultBaseMargin, promoPerItems,promoPoint ,PurchaseMinOrderQty,PurchasePrice,PurchaseSku,PurchaseUnitName ,SellingSku,SellingUnitName, SizePerUnit, 	"
                                                  + " SubCategoryId ,SubcategoryName,SubsubCategoryid,SubsubcategoryName,SubSubCode,TGrpName,CessGrpName ,UnitPrice,VATTax ,UpdatedDate, "
                                                  + " MRP,UnitofQuantity,UOM ,ItemMultiMRPId," + objwarehouse.Cityid + ",0,0,0 from ItemMasterCentrals where Deleted=0";
                    int i = this.Database.ExecuteSqlCommand(sqlquery);
                    if (i > 0)
                    {
                        //sqlquery = " MERGE CurrentStockS AS TARGET"
                        //                + " USING (select * from  itemmasters where warehouseid=" + item.WarehouseId + ") AS SOURCE "
                        //                + " ON (TARGET.ItemNumber = SOURCE.Number AND TARGET.WarehouseId = " + item.WarehouseId + " AND TARGET.CompanyId = SOURCE.CompanyId AND TARGET.ItemMultiMRPId = SOURCE.ItemMultiMRPId)  "
                        //                + " WHEN MATCHED THEN"
                        //                + " UPDATE SET TARGET.ItemNumber = SOURCE.Number,"
                        //                + " TARGET.Barcode = SOURCE.Barcode,"
                        //                + " TARGET.WarehouseId = SOURCE.WarehouseId,"
                        //                + " TARGET.WarehouseName = SOURCE.WarehouseName,"
                        //                + " TARGET.CompanyId = SOURCE.CompanyId,"
                        //                + " TARGET.Deleted = 0,"
                        //                + " TARGET.UpdatedDate = GETDATE(), "
                        //                + " TARGET.MRP = SOURCE.price,"
                        //                + " TARGET.UnitofQuantity = SOURCE.UnitofQuantity,"
                        //                + " TARGET.UOM = SOURCE.UOM,"
                        //                + " TARGET.ItemMultiMRPId = SOURCE.ItemMultiMRPId,"
                        //                + " TARGET.itemname = SOURCE.itemname,"
                        //                + " TARGET.itemBaseName = SOURCE.itemBaseName"                                                        
                        //                + " WHEN NOT MATCHED Then"
                        //                + " insert ( ItemId, ItemNumber ,Barcode ,WarehouseId ,WarehouseName,CompanyId ,CurrentInventory,CreationDate,UpdatedDate,MRP ,UnitofQuantity,UOM,ItemMultiMRPId ,itemname,itemBaseName,Deleted,IsEmptyStock  )"
                        //                + " values(SOURCE.ItemId,SOURCE.Number,SOURCE.Barcode,SOURCE.WarehouseId,SOURCE.WarehouseName,SOURCE.CompanyId,0,getdate(),getdate(),SOURCE.price,SOURCE.UnitofQuantity,SOURCE.UOM,SOURCE.ItemMultiMRPId,SOURCE.itemname,SOURCE.itemBaseName,0,0) ;";
                        sqlquery = "Insert Into CurrentStockS (ItemNumber  ,WarehouseId ,WarehouseName,CompanyId ,CurrentInventory,CreationDate,UpdatedDate,MRP ,UnitofQuantity,UOM,ItemMultiMRPId ,itemname,itemBaseName,Deleted,IsEmptyStock  )"
                                                 + " Select SOURCE.Number,SOURCE.WarehouseId,SOURCE.WarehouseName,SOURCE.CompanyId,0,getdate(),getdate(),SOURCE.price,SOURCE.UnitofQuantity,SOURCE.UOM,SOURCE.ItemMultiMRPId,SOURCE.itemname,SOURCE.itemBaseName,0,0 from  itemmasters SOURCE where warehouseid=" + objwarehouse.WarehouseId + " group by SOURCE.Number,SOURCE.WarehouseId,SOURCE.WarehouseName,SOURCE.CompanyId,SOURCE.price,SOURCE.UnitofQuantity,SOURCE.UOM,SOURCE.ItemMultiMRPId,SOURCE.itemname,SOURCE.itemBaseName";
                        i = this.Database.ExecuteSqlCommand(sqlquery);
                    }
                }
                //Warehouses.Attach(warehouse);
                this.Entry(warehouse).State = EntityState.Modified;
                this.Commit();
                return objwarehouse;
            }
            else
            {
                return objwarehouse;
            }
        }
        public bool DeleteWarehouse(int id, int CompanyId)
        {
            try
            {
                Warehouse warehouse = Warehouses.Where(x => x.WarehouseId == id).Where(x => x.Deleted == false && x.CompanyId == CompanyId).FirstOrDefault();

                warehouse.Deleted = true;
                //Warehouses.Attach(warehouse);
                this.Entry(warehouse).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public WarehouseCategory Addwarehousecatxl(WarehouseCategory warehouseCategory)
        {
            List<WarehouseCategory> whcategory = DbWarehouseCategory.Where(x => x.Deleted == false).Where(c => c.WhCategoryid.Equals(warehouseCategory.WhCategoryid)).ToList();
            WarehouseCategory objWhcategory = new WarehouseCategory();
            if (whcategory.Count == 0)
            {
                warehouseCategory.CreatedBy = warehouseCategory.CreatedBy;
                warehouseCategory.CreatedDate = indianTime;
                warehouseCategory.UpdatedDate = indianTime;
                DbWarehouseCategory.Add(warehouseCategory);
                int id = this.Commit();
                return warehouseCategory;
            }
            else
            {
                return objWhcategory;
            }
        }
        public List<SubsubCategory> Updatebrands(List<SubsubCategory> sub, int compid)
        {
            foreach (var k in sub)
            {
                try
                {
                    SubsubCategory subcat = SubsubCategorys.Where(s => s.Code == k.Code && s.Deleted == false).SingleOrDefault();
                    subcat.IsPramotional = k.IsPramotional;
                    subcat.SortOrder = k.SortOrder;
                    //SubsubCategorys.Attach(subcat);
                    this.Entry(subcat).State = EntityState.Modified;
                    this.Commit();

                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
            }
            return sub;
        }
        public List<SubsubCategory> UpdateExclusivebrands(List<SubsubCategory> sub, int compid)
        {
            foreach (var k in sub)
            {
                try
                {
                    SubsubCategory subcat = SubsubCategorys.Where(s => s.SubsubCategoryid == k.SubsubCategoryid && s.Deleted == false).SingleOrDefault();

                    subcat.IsExclusive = k.IsExclusive;
                    subcat.SortOrder = k.SortOrder;
                    //SubsubCategorys.Attach(subcat);
                    this.Entry(subcat).State = EntityState.Modified;
                    this.Commit();

                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
            }
            return sub;
        }
        public List<SubsubCategory> subcategorybycity(int id, int compid)
        {
            List<SubsubCategory> subcat = new List<SubsubCategory>();
            List<Warehouse> warehouse = Warehouses.Where(w => w.Cityid == id && w.Deleted == false && w.CompanyId == compid).ToList();
            List<WarehouseSubsubCategory> cat = new List<WarehouseSubsubCategory>();
            List<SubsubCategory> temp = new List<SubsubCategory>();
            List<string> code = new List<string>();
            foreach (var c in warehouse)
            {
                cat = null;
                cat = DbWarehousesubsubcats.Where(w => w.WarehouseId == c.WarehouseId && w.Deleted == false && w.CompanyId == compid).ToList();

                foreach (var a in cat)
                {
                    temp = null;
                    temp = SubsubCategorys.Where(s => s.Code == a.SubsubCode && s.Deleted == false).ToList();
                    var data = temp.Where(cs => cs.Code == a.SubsubCode).FirstOrDefault();

                    if (data != null && !code.Any(x => x == a.SubsubCode))
                    {
                        code.Add(data.Code);
                        subcat.Add(data);
                    }


                    //foreach (var b in temp)
                    //{
                    //    subcat.Add(b);

                    //}
                }
            }
            return subcat;
        }
        public List<SubsubCategory> subcategorybyPramotion(int id, int compid)
        {
            List<SubsubCategory> subcat = new List<SubsubCategory>();
            List<WarehouseCategory> cat = DbWarehouseCategory.Where(w => w.WarehouseId == id && w.Deleted == false && w.CompanyId == compid).ToList();
            List<SubsubCategory> temp = new List<SubsubCategory>();
            foreach (var a in cat)
            {
                temp = null;
                temp = SubsubCategorys.Where(s => s.Categoryid == a.Categoryid && s.IsPramotional == true && s.Deleted == false).OrderByDescending(p => p.SortOrder).ToList();

                foreach (var b in temp)
                {
                    subcat.Add(b);
                }
            }
            return subcat;
        }
        public List<SubsubCategory> subcategorybyPramotionExlusive()
        {
            List<SubsubCategory> subcat = new List<SubsubCategory>();
            subcat = SubsubCategorys.Where(w => w.Deleted == false && w.IsExclusive == true).ToList();
            return subcat;
        }
        public List<SubsubCategory> subcategorybyWarehouse(int id, int compid)
        {
            List<SubsubCategory> subcat = new List<SubsubCategory>();
            List<WarehouseSubsubCategory> cat = DbWarehousesubsubcats.Where(w => w.WarehouseId == id && w.Deleted == false && w.CompanyId == compid).ToList();
            List<SubsubCategory> temp = new List<SubsubCategory>();
            foreach (var a in cat)
            {
                temp = null;
                temp = SubsubCategorys.Where(s => s.Code == a.SubsubCode && s.Deleted == false).ToList();
                foreach (var b in temp)
                {
                    subcat.Add(b);
                }
            }
            return subcat;
        }
        public IEnumerable<WarehouseCategory> AllWhCategory()
        {
            var warehouseCategory = from a in DbWarehouseCategory.Where(a => a.Deleted == false).Include("warehouseSubCategory.WarehouseSubsubCategory") select a;
            return warehouseCategory;
        }
        #region for warehousesubsub category


        public IEnumerable<WarehouseSubsubCategory> AllWarehouseCategory(int compid)
        {
            if (DbWarehousesubsubcats.AsEnumerable().Count() > 0)
            {
                return DbWarehousesubsubcats.Where(p => p.CompanyId == compid && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<WarehouseSubsubCategory> WarehouseCategory = new List<WarehouseSubsubCategory>();
                return WarehouseCategory.AsEnumerable();
            }
        }

        public IEnumerable<WarehouseSubsubCategory> AllWarehouseCategoryWid(int compid, int Warehouse_id)
        {
            if (DbWarehousesubsubcats.AsEnumerable().Count() > 0)
            {
                return DbWarehousesubsubcats.Where(p => p.CompanyId == compid && p.Deleted == false && p.WarehouseId == Warehouse_id).AsEnumerable();
            }
            else
            {
                List<WarehouseSubsubCategory> WarehouseCategory = new List<WarehouseSubsubCategory>();
                return WarehouseCategory.AsEnumerable();
            }
        }
        #region warehouse category Add
        public List<WarehouseCategory> AddToWarehousesCategorys(List<WarehouseCategory> WhCategory)
        {
            List<WarehouseCategory> wareHouse = new List<WarehouseCategory>();
            foreach (var i in WhCategory)
            {
                List<Category> cat = Categorys.Where(c => c.CategoryName.Trim().Equals(i.CategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseCategory WCate = DbWarehouseCategory.Where(x => x.Categoryid == i.Categoryid && x.WarehouseId == i.WarehouseId).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();
                List<WarehouseCategory> objcat = new List<WarehouseCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {

                        WarehouseCategory objw = new WarehouseCategory();
                        objw.WarehouseName = objWH.WarehouseName;
                        objw.WarehouseId = i.WarehouseId;
                        objw.Categoryid = i.Categoryid;
                        objw.CategoryName = i.CategoryName;
                        objw.BaseCategoryid = i.BaseCategoryid;
                        objw.Code = i.Code;
                        objw.CompanyId = i.CompanyId;
                        objw.LogoUrl = i.LogoUrl;
                        objw.IsActive = i.IsActive;
                        objw.SortOrder = i.SortOrder;
                        objw.CreatedDate = indianTime;
                        objw.UpdatedDate = indianTime;
                        DbWarehouseCategory.Add(objw);
                        int id = this.Commit();
                        wareHouse.Add(objw);

                    }
                }

            }
            CommonHelper.refreshItemMaster(WhCategory[0].WarehouseId);
            return wareHouse;

        }
        #endregion
        #region warehouse Base category Add
        public List<WarehouseBaseCategory> AddToWarehousesBaseCategorys(List<WarehouseBaseCategory> WhBaseCat)
        {
            List<WarehouseBaseCategory> wareHouse = new List<WarehouseBaseCategory>();
            foreach (var i in WhBaseCat)
            {
                List<BaseCategory> cat = BaseCategoryDb.Where(c => c.BaseCategoryName.Trim().Equals(i.BaseCategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseBaseCategory WCate = WarehouseBaseCategoryDB.Where(x => x.BaseCategoryId == i.BaseCategoryId && x.WarehouseId == i.WarehouseId).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();
                List<WarehouseBaseCategory> objcat = new List<WarehouseBaseCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {

                        WarehouseBaseCategory objw = new WarehouseBaseCategory();
                        objw.WarehouseName = objWH.WarehouseName;
                        objw.WarehouseId = i.WarehouseId;
                        objw.BaseCategoryId = i.BaseCategoryId;
                        objw.BaseCategoryName = i.BaseCategoryName;
                        objw.Code = i.Code;
                        objw.LogoUrl = i.LogoUrl;
                        objw.CompanyId = i.CompanyId;
                        objw.IsActive = i.IsActive;
                        objw.CreatedDate = indianTime;
                        objw.UpdatedDate = indianTime;
                        WarehouseBaseCategoryDB.Add(objw);
                        int id = this.Commit();
                        wareHouse.Add(objw);

                    }
                }

            }
            //CommonHelper.refreshItemMaster(WhBaseCat[0].WarehouseId);
            return wareHouse;

        }
        #endregion
        #region warehouse Sub category Add
        public List<WarehouseSubCategory> AddToWarehousesSubCategorys(List<WarehouseSubCategory> WhSubCat)
        {
            List<WarehouseSubCategory> Subcat = new List<WarehouseSubCategory>();
            foreach (var i in WhSubCat)
            {
                List<SubCategory> cat = SubCategorys.Where(c => c.SubcategoryName.Trim().Equals(i.SubcategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseSubCategory WCate = DbWarehouseSubCategory.Where(x => x.SubCategoryId == i.SubCategoryId && x.WarehouseId == i.WarehouseId).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();
                List<WarehouseSubCategory> objcat = new List<WarehouseSubCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {
                        WarehouseSubCategory objw = new WarehouseSubCategory();
                        objw.WarehouseName = objWH.WarehouseName;
                        objw.WarehouseId = i.WarehouseId;
                        objw.Categoryid = i.Categoryid;
                        objw.CategoryName = i.CategoryName;
                        objw.CompanyId = i.CompanyId;
                        objw.SubCategoryId = i.SubCategoryId;
                        objw.SubcategoryName = i.SubcategoryName;
                        objw.BaseCategoryid = i.BaseCategoryid;
                        objw.Code = i.Code;
                        objw.HindiName = i.HindiName;
                        objw.SortOrder = i.SortOrder;
                        objw.IsPramotional = i.IsPramotional;
                        objw.Deleted = i.Deleted;
                        objw.LogoUrl = i.LogoUrl;
                        objw.IsActive = i.IsActive;
                        objw.CreatedDate = indianTime;
                        objw.UpdatedDate = indianTime;
                        DbWarehouseSubCategory.Add(objw);
                        int id = this.Commit();
                        Subcat.Add(objw);

                    }
                }
            }
            //CommonHelper.refreshItemMaster(WhSubCat[0].WarehouseId);
            return Subcat;

        }
        #endregion

        #region warehouse Sub sub category Add
        public List<WarehouseSubsubCategory> AddToWarehousesSubSubCategorys(List<WarehouseSubsubCategory> WhSubSubCat)
        {
            List<WarehouseSubsubCategory> SubSubcat = new List<WarehouseSubsubCategory>();
            foreach (var i in WhSubSubCat)
            {
                List<SubsubCategory> cat = SubsubCategorys.Where(c => c.SubsubcategoryName.Trim().Equals(i.SubsubcategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseSubsubCategory WCate = DbWarehousesubsubcats.Where(x => x.SubsubCategoryid == i.SubsubCategoryid && x.WarehouseId == i.WarehouseId).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();
                List<WarehouseSubsubCategory> objcat = new List<WarehouseSubsubCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {
                        WarehouseSubsubCategory objw = new WarehouseSubsubCategory();
                        objw.WarehouseName = objWH.WarehouseName;
                        objw.WarehouseId = i.WarehouseId;
                        objw.Categoryid = i.Categoryid;
                        objw.CategoryName = i.CategoryName;
                        objw.CompanyId = i.CompanyId;
                        objw.SubsubCategoryid = i.SubsubCategoryid;
                        objw.SubsubcategoryName = i.SubsubcategoryName;
                        objw.BaseCategoryId = i.BaseCategoryId;
                        objw.SubCategoryId = i.SubCategoryId;
                        objw.SubcategoryName = i.SubcategoryName;
                        objw.SubsubCode = i.SubsubCode;
                        objw.HindiName = i.HindiName;
                        objw.SortOrder = i.SortOrder;
                        objw.IsPramotional = i.IsPramotional;
                        objw.Deleted = i.Deleted;
                        objw.LogoUrl = i.LogoUrl;
                        objw.IsActive = i.IsActive;
                        objw.Deleted = i.Deleted;
                        objw.CreatedDate = indianTime;
                        objw.UpdatedDate = indianTime;
                        objw.Type = i.Type;
                        objw.CommisionPercent = i.CommisionPercent;
                        objw.IsExclusive = i.IsExclusive;
                        DbWarehousesubsubcats.Add(objw);
                        int id = this.Commit();
                        SubSubcat.Add(objw);

                    }
                }
            }
            //CommonHelper.refreshItemMaster(WhSubSubCat[0].WarehouseId);
            return SubSubcat;

        }
        #endregion
        public List<WarehouseSubsubCategory> AddWarehouseCategoryWid(List<WarehouseSubsubCategory> WHCategory, string desc, int compid, int Warehouse_id)
        {
            List<WarehouseSubsubCategory> wareHouse = new List<WarehouseSubsubCategory>();
            foreach (var i in WHCategory)
            {
                List<SubsubCategory> cat = SubsubCategorys.Where(c => c.SubcategoryName.Trim().Equals(i.SubsubcategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseSubsubCategory WCate = DbWarehousesubsubcats.Where(x => x.SubsubCategoryid == i.SubsubCategoryid && x.WarehouseId == Warehouse_id && x.CompanyId == compid).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == compid).Select(x => x).FirstOrDefault();
                List<WarehouseSubsubCategory> objcat = new List<WarehouseSubsubCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {
                        if (i.IsActive)
                        {
                            WarehouseSubsubCategory objw = new WarehouseSubsubCategory();
                            objw.WarehouseName = objWH.WarehouseName;
                            objw.WarehouseId = Warehouse_id;
                            objw.SubsubCategoryid = i.SubsubCategoryid;
                            objw.SubsubcategoryName = i.SubsubcategoryName;
                            objw.SubsubCode = i.SubsubCode;
                            objw.LogoUrl = i.LogoUrl;

                            objw.CompanyId = compid;
                            objw.IsActive = i.IsActive;
                            objw.SortOrder = i.SortOrder;
                            objw.CreatedDate = indianTime;
                            objw.UpdatedDate = indianTime;
                            DbWarehousesubsubcats.Add(objw);
                            int id = this.Commit();
                            wareHouse.Add(objw);
                        }
                    }
                }
                else
                {
                    if (!i.IsActive)
                    {

                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = true;
                        //DbWarehousesubsubcats.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                    else
                    {
                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = false;
                        //DbWarehousesubsubcats.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                }
            }
            //CommonHelper.refreshItemMaster(WHCategory[0].WarehouseId);
            return wareHouse;
        }
        public List<WarehouseCategory> AddWarehouseCategory(List<WarehouseCategory> WHCategory, string desc, int compid)
        {
            List<WarehouseCategory> wareHouse = new List<WarehouseCategory>();
            foreach (var i in WHCategory)
            {
                List<Category> cat = Categorys.Where(c => c.CategoryName.Trim().Equals(i.CategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseCategory WCate = DbWarehouseCategory.Where(x => x.Categoryid == i.Categoryid && x.WarehouseId == i.WarehouseId && x.CompanyId == compid).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false && x.CompanyId == compid).Select(x => x).FirstOrDefault();
                List<WarehouseCategory> objcat = new List<WarehouseCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {
                        if (i.IsActive)
                        {
                            WarehouseCategory objw = new WarehouseCategory();
                            objw.WarehouseName = objWH.WarehouseName;
                            objw.WarehouseId = i.WarehouseId;
                            objw.Categoryid = i.Categoryid;
                            objw.CategoryName = i.CategoryName;
                            //objw.C = i.SubsubCode;
                            //  objw.Lo = i.LogoUrl;
                            //objw.Stateid = i.Stateid;
                            //objw.State = i.State;
                            //objw.Cityid = i.Cityid;
                            //objw.City = i.City;
                            objw.CompanyId = compid;
                            //objw.Discription = desc;

                            objw.IsActive = i.IsActive;
                            objw.SortOrder = i.SortOrder;

                            objw.CreatedDate = indianTime;
                            objw.UpdatedDate = indianTime;
                            DbWarehouseCategory.Add(objw);
                            int id = this.Commit();
                            wareHouse.Add(objw);
                        }
                    }
                }
                else
                {
                    if (!i.IsActive)
                    {
                        //  WCate. = i.LogoUrl;
                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = true;
                        //DbWarehouseCategory.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                    else
                    {
                        // WCate.LogoUrl = i.LogoUrl;
                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = false;
                        //DbWarehouseCategory.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                }
            }
            //CommonHelper.refreshItemMaster(WHCategory[0].WarehouseId);
            return wareHouse;
        }
        public List<WarehouseSubsubCategory> AddWarehouseCategory(List<WarehouseSubsubCategory> WHCategory, string desc, int compid)
        {
            List<WarehouseSubsubCategory> wareHouse = new List<WarehouseSubsubCategory>();
            foreach (var i in WHCategory)
            {
                List<SubsubCategory> cat = SubsubCategorys.Where(c => c.SubcategoryName.Trim().Equals(i.SubsubcategoryName.Trim()) && c.Deleted == false).ToList();
                WarehouseSubsubCategory WCate = DbWarehousesubsubcats.Where(x => x.SubsubCode == i.SubsubCode && x.WarehouseId == i.WarehouseId && x.CompanyId == compid).Select(x => x).SingleOrDefault();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false && x.CompanyId == compid).Select(x => x).FirstOrDefault();
                List<WarehouseSubsubCategory> objcat = new List<WarehouseSubsubCategory>();
                if (WCate == null && objWH != null)
                {
                    if (cat.Count != -1)
                    {
                        if (i.IsActive)
                        {
                            WarehouseSubsubCategory objw = new WarehouseSubsubCategory();
                            objw.WarehouseName = objWH.WarehouseName;
                            objw.WarehouseId = i.WarehouseId;
                            objw.SubsubCategoryid = i.SubsubCategoryid;
                            objw.SubsubcategoryName = i.SubsubcategoryName;
                            objw.SubsubCode = i.SubsubCode;
                            objw.LogoUrl = i.LogoUrl;
                            objw.CompanyId = compid;
                            objw.IsActive = i.IsActive;
                            objw.SortOrder = i.SortOrder;

                            objw.CreatedDate = indianTime;
                            objw.UpdatedDate = indianTime;
                            DbWarehousesubsubcats.Add(objw);
                            int id = this.Commit();
                            wareHouse.Add(objw);
                        }
                    }
                }
                else
                {
                    if (!i.IsActive)
                    {
                        WCate.LogoUrl = i.LogoUrl;
                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = true;
                        //DbWarehousesubsubcats.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                    else
                    {
                        WCate.LogoUrl = i.LogoUrl;
                        WCate.IsActive = i.IsActive;
                        WCate.SortOrder = i.SortOrder;
                        WCate.UpdatedDate = indianTime;
                        WCate.Deleted = false;
                        //DbWarehousesubsubcats.Attach(WCate);
                        this.Entry(WCate).State = EntityState.Modified;
                        this.Commit();
                    }
                }
            }
            //CommonHelper.refreshItemMaster(WHCategory[0].WarehouseId);
            return wareHouse;
        }
        public List<WarehouseSubsubCategory> PutWarehouseCategory(List<WarehouseSubsubCategory> WHCategory, int compid)
        {
            List<WarehouseSubsubCategory> wareHouse = new List<WarehouseSubsubCategory>();
            int id = WHCategory[0].WarehouseId;

            List<WarehouseSubsubCategory> AllWC = DbWarehousesubsubcats.AsNoTracking().Where(x => x.WarehouseId == id && x.Deleted == false && x.CompanyId == compid).Select(x => x).ToList();
            foreach (var k in AllWC)
            {
                try
                {
                    WarehouseSubsubCategory DL = new WarehouseSubsubCategory();
                    DL.WhSubsubCategoryid = k.WhSubsubCategoryid;
                    Entry(DL).State = EntityState.Deleted;

                    Commit();
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
            }
            foreach (var i in WHCategory)
            {
                List<SubsubCategory> cat = SubsubCategorys.Where(c => c.SubsubcategoryName.Trim().Equals(i.SubsubcategoryName.Trim()) && c.Deleted == false).ToList();
                Warehouse objWH = Warehouses.Where(x => x.WarehouseId == i.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();
                List<WarehouseCategory> objcat = new List<WarehouseCategory>();
                if (objWH == null)
                {
                    if (cat.Count != -1)
                    {
                        if (i.IsActive)
                        {
                            WarehouseCategory objw = new WarehouseCategory();
                            objw.WarehouseName = objWH.WarehouseName;
                            objw.WarehouseId = i.WarehouseId;
                            objw.Categoryid = i.SubsubCategoryid;
                            objw.CategoryName = i.SubsubcategoryName;

                            //objw.Stateid = i.Stateid;
                            //objw.State = i.State;
                            //objw.Cityid = i.Cityid;
                            //objw.City = i.City;
                            //objw.Discription = desc;
                            objw.CompanyId = 1;
                            objw.IsActive = i.IsActive;
                            //objw.SortOrder = i.SortOrder;
                            objw.CreatedDate = indianTime;
                            objw.UpdatedDate = indianTime;
                            DbWarehouseCategory.Add(objw);
                            int id2 = this.Commit();
                            // wareHouse.Add(objw);
                        }
                    }
                }
            }
            return wareHouse;
        }
        public bool DeleteWarehouseCategory(int id, int compid)
        {
            try
            {
                WarehouseSubsubCategory objWH = DbWarehousesubsubcats.Where(x => x.WhSubsubCategoryid == id && x.Deleted == false && x.CompanyId == compid).Select(x => x).FirstOrDefault();
                objWH.Deleted = true;
                //DbWarehousesubsubcats.Attach(objWH);
                this.Entry(objWH).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion
        public IEnumerable<WarehouseSubCategory> AllWarehouseSubCategory(int compid)
        {
            if (DbWarehouseSubCategory.AsEnumerable().Count() > 0)
            {
                return DbWarehouseSubCategory.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<WarehouseSubCategory> warehouseSubCategory = new List<WarehouseSubCategory>();
                return warehouseSubCategory.AsEnumerable();
            }
        }
        public WarehouseSubCategory AddWarehouseSubCategory(WarehouseSubCategory ObjWarehouseSubCategory)
        {
            List<SubCategory> subCategory = SubCategorys.Where(c => c.SubcategoryName.Trim().Equals(ObjWarehouseSubCategory.SubcategoryName.Trim()) && c.Deleted == false).ToList();
            SubCategory objSCN = SubCategorys.Where(x => x.SubCategoryId == ObjWarehouseSubCategory.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
            Warehouse objWH = Warehouses.Where(x => x.WarehouseId == ObjWarehouseSubCategory.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();

            WarehouseSubCategory objcat = new WarehouseSubCategory();
            if (subCategory.Count == 0)
            {
                ObjWarehouseSubCategory.WarehouseName = objWH.WarehouseName;
                ObjWarehouseSubCategory.SubcategoryName = objSCN.SubcategoryName;

                ObjWarehouseSubCategory.CreatedBy = objcat.CreatedBy;
                ObjWarehouseSubCategory.CreatedDate = indianTime;
                ObjWarehouseSubCategory.UpdatedDate = indianTime;

                DbWarehouseSubCategory.Add(ObjWarehouseSubCategory);
                int id = this.Commit();
                return ObjWarehouseSubCategory;
            }
            else
            {
                return objcat;
            }
        }
        public WarehouseSubCategory PutWarehouseSubCategory(WarehouseSubCategory ObjWarehouseSubCategory)
        {
            WarehouseSubCategory warehouseSubCategorycategory = DbWarehouseSubCategory.Where(x => x.WhSubCategoryId == ObjWarehouseSubCategory.WhSubCategoryId).FirstOrDefault();
            SubCategory objSCN = SubCategorys.Where(x => x.SubCategoryId == ObjWarehouseSubCategory.SubCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
            Warehouse objWH = Warehouses.Where(x => x.WarehouseId == ObjWarehouseSubCategory.WarehouseId && x.Deleted == false).Select(x => x).FirstOrDefault();

            if (warehouseSubCategorycategory != null)
            {
                warehouseSubCategorycategory.WarehouseName = objWH.WarehouseName;
                warehouseSubCategorycategory.SubcategoryName = objSCN.SubcategoryName;


                warehouseSubCategorycategory.UpdatedDate = indianTime;
                warehouseSubCategorycategory.CreatedBy = ObjWarehouseSubCategory.CreatedBy;
                warehouseSubCategorycategory.CreatedDate = ObjWarehouseSubCategory.CreatedDate;
                warehouseSubCategorycategory.UpdateBy = ObjWarehouseSubCategory.UpdateBy;

                //DbWarehouseSubCategory.Attach(warehouseSubCategorycategory);
                this.Entry(warehouseSubCategorycategory).State = EntityState.Modified;
                this.Commit();
                return ObjWarehouseSubCategory;
            }
            else
            {
                return ObjWarehouseSubCategory;
            }
        }
        public bool DeleteWarehouseSubCategory(int id)
        {
            try
            {
                WarehouseSubCategory DL = new WarehouseSubCategory();
                DL.WhSubCategoryId = id;
                Entry(DL).State = EntityState.Deleted;

                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public WarehouseSubsubCategory AddWhsubsubxl(WarehouseSubsubCategory warehouseSubsubCategory)
        {
            List<WarehouseSubsubCategory> warehouseSubsubCategoryList = DbWarehousesubsubcats.Where(c => c.WhSubsubCategoryid.Equals(warehouseSubsubCategory.WhSubsubCategoryid)).ToList();
            WarehouseSubsubCategory objQuesAns = new WarehouseSubsubCategory();
            if (warehouseSubsubCategoryList.Count == 0)
            {

                warehouseSubsubCategory.CreatedDate = indianTime;
                warehouseSubsubCategory.UpdatedDate = indianTime;
                DbWarehousesubsubcats.Add(warehouseSubsubCategory);
                int id = this.Commit();
                return warehouseSubsubCategory;
            }
            else
            {
                return objQuesAns;
            }
        }
        public IEnumerable<WarehouseSubsubCategory> AllWarehouseSubsubCat(int compid)
        {
            if (DbWarehousesubsubcats.AsEnumerable().Count() > 0)
            {
                return DbWarehousesubsubcats.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<WarehouseSubsubCategory> whsubsubcat = new List<WarehouseSubsubCategory>();
                return whsubsubcat.AsEnumerable();
            }
        }
        public WarehouseSubsubCategory AddWarehouseSubsubCat(WarehouseSubsubCategory whsubsubcat)
        {
            List<WarehouseSubsubCategory> whsubsubcats = DbWarehousesubsubcats.Where(c => c.SubsubcategoryName.Equals(whsubsubcat.SubsubcategoryName)).ToList();
            SubsubCategory objSSCN = SubsubCategorys.Where(x => x.Deleted == false).Where(x => x.SubsubCategoryid == whsubsubcat.SubsubCategoryid).Select(x => x).FirstOrDefault();
            Warehouse objWH = Warehouses.Where(x => x.Deleted == false).Where(x => x.WarehouseId == whsubsubcat.WhSubsubCategoryid).Select(x => x).FirstOrDefault();
            WarehouseSubsubCategory objwhsubsubcat = new WarehouseSubsubCategory();
            if (whsubsubcats.Count == 0)
            {
                whsubsubcat.WarehouseName = objWH.WarehouseName;
                whsubsubcat.SubsubcategoryName = objSSCN.SubsubcategoryName;
                whsubsubcat.CreatedDate = indianTime;
                whsubsubcat.UpdatedDate = indianTime;
                DbWarehousesubsubcats.Add(whsubsubcat);
                int id = this.Commit();
                return whsubsubcat;
            }
            else
            {
                return objwhsubsubcat;
            }
        }
        public WarehouseSubsubCategory PutWarehouseSubsubCat(WarehouseSubsubCategory objwhsubsubcat)
        {
            WarehouseSubsubCategory whsscat = DbWarehousesubsubcats.Where(x => x.WhSubsubCategoryid == objwhsubsubcat.WhSubsubCategoryid).FirstOrDefault();
            // WarehouseCategory whcat = DbWarehouseCategory.Where(x => x.Deleted == false).Where(x => x.WhCategoryid == objwhsubsubcat.WhCategoryid).Select(x => x).FirstOrDefault();
            //WarehouseSubCategory whsubcat = DbWarehouseSubCategory.Where(x => x.WhSubCategoryId == objwhsubsubcat.WhSubCategoryid).Select(x => x).FirstOrDefault();

            if (whsscat != null)
            {
                whsscat.UpdatedDate = indianTime;

                whsscat.CreatedDate = objwhsubsubcat.CreatedDate;


                //DbWarehousesubsubcats.Attach(whsscat);
                this.Entry(whsscat).State = EntityState.Modified;
                this.Commit();
                return objwhsubsubcat;
            }
            else
            {
                return objwhsubsubcat;
            }
        }
        public bool DeletewarehouseSubsubCat(int id)
        {
            try
            {
                WarehouseSubsubCategory DL = new WarehouseSubsubCategory();
                DL.WhSubsubCategoryid = id;
                Entry(DL).State = EntityState.Deleted;

                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<SupplierCategory> AllSupplierCategory(int compid)
        {
            if (SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<SupplierCategory> SupplierCategory = new List<SupplierCategory>();
                return SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable();
            }
        }
        public IEnumerable<SupplierCategory> AllSupplierCategoryWid(int compid, int Warehouse_id)
        {
            if (SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<SupplierCategory> SupplierCategory = new List<SupplierCategory>();
                return SupplierCategory.Where(x => x.CompanyId == compid).AsEnumerable();
            }
        }
        public SupplierCategory AddSupplierCategory(SupplierCategory suppcategory)
        {
            List<SupplierCategory> supplierCategoryList = SupplierCategory.Where(c => c.CategoryName.Trim().Equals(suppcategory.CategoryName.Trim()) && c.CompanyId == suppcategory.CompanyId).ToList();
            SupplierCategory SuppCate = new SupplierCategory();
            if (supplierCategoryList.Count == 0)
            {
                SuppCate.CategoryName = suppcategory.CategoryName;
                SuppCate.CompanyId = suppcategory.CompanyId;

                SupplierCategory.Add(SuppCate);
                int id = this.Commit();
                return suppcategory;
            }
            else
            {
                SuppCate.Exception = "Already";
                return SuppCate;
            }
        }
        public SupplierCategory PutSupplierCategory(SupplierCategory supppCategory)
        {
            SupplierCategory suppCat = SupplierCategory.Where(x => x.SupplierCaegoryId == supppCategory.SupplierCaegoryId && x.CompanyId == supppCategory.CompanyId).FirstOrDefault();
            if (suppCat != null)
            {
                suppCat.CategoryName = supppCategory.CategoryName;
                //SupplierCategory.Attach(suppCat);
                this.Entry(suppCat).State = EntityState.Modified;
                this.Commit();
                return suppCat;
            }
            else
            {
                return null;
            }
        }
        public bool DeleteSupplierCategory(int id, int compid)
        {
            try
            {
                SupplierCategory DL = new SupplierCategory();
                DL.SupplierCaegoryId = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Supplier> AllSupplier(int compid)
        {
            if (Suppliers.AsEnumerable().Count() > 0)
            {
                return Suppliers.Where(x => x.Deleted == false && x.CompanyId == compid).OrderByDescending(s => s.CreatedDate).AsEnumerable();
            }
            else
            {
                List<Supplier> supplier = new List<Supplier>();
                return supplier.AsEnumerable();
            }
        }
        public IEnumerable<Supplier> AllSupplierWid(int compid)
        {
            if (Suppliers.AsEnumerable().Count() > 0)
            {
                return Suppliers.Where(x => x.Deleted == false && x.CompanyId == compid).OrderBy(o => o.Name).OrderByDescending(s => s.CreatedDate).AsEnumerable();
            }
            else
            {
                List<Supplier> supplier = new List<Supplier>();
                return supplier.AsEnumerable();
            }
        }

        public IEnumerable<Supplier> AllSubSupplierforsupplier(int suppcate)
        {
            if (Suppliers.AsEnumerable().Count() > 0)
            {
                return Suppliers.Where(p => p.SupplierCaegoryId == suppcate && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<Supplier> supplier = new List<Supplier>();
                return supplier.AsEnumerable();
            }
        }


        public Supplier AddSupplier(Supplier sup)
        {

            SupplierCategory suppcat = SupplierCategory.Where(c => c.SupplierCaegoryId == sup.SupplierCaegoryId).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == sup.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State state = States.Where(x => x.Stateid == sup.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            if (suppcat == null)
            {
                SupplierCategory sc = new SupplierCategory();

            }
            List<Supplier> supplierList = Suppliers.Where(c => c.SUPPLIERCODES.Trim().Equals(sup.SUPPLIERCODES.Trim()) && c.CompanyId == sup.CompanyId).ToList();


            Supplier supplier = new Supplier();
            if (supplierList.Count == 0)
            {
                sup.Active = true;
                sup.CreatedDate = indianTime;
                sup.StateName = state.StateName;
                sup.CategoryName = suppcat.CategoryName;
                sup.City = city.CityName;
                Suppliers.Add(sup);
                int id = this.Commit(doNotMakerChecker: false);
                return sup;
            }
            else
            {
                var s = supplierList[0];
                s.UpdatedDate = indianTime;
                s.Active = true;
                s.Deleted = false;
                // Suppliers.Attach(s);
                this.Entry(s).State = EntityState.Modified;
                this.Commit(doNotMakerChecker: false);
                supplier.Exception = "Already";
                return supplier;
            }
        }



        //////public Supplier PutSupplier(Supplier supp)
        //////{
        //////    SupplierCategory suppcat = SupplierCategory.Where(c => c.SupplierCaegoryId == supp.SupplierCaegoryId).FirstOrDefault();
        //////    Supplier supplier = Suppliers.Where(x => x.SupplierId == supp.SupplierId).FirstOrDefault();
        //////    if (supplier != null)
        //////    {
        //////        supplier.Name = supp.Name;
        //////        supplier.CategoryName = suppcat.CategoryName;
        //////        supplier.PhoneNumber = supp.PhoneNumber;
        //////        supplier.Avaiabletime = supp.Avaiabletime;
        //////        supplier.rating = supp.rating;
        //////        supplier.BillingAddress = supp.BillingAddress;
        //////        supplier.ShippingAddress = supp.ShippingAddress;
        //////        supplier.Comments = supp.Comments;
        //////        supplier.TINNo = supp.TINNo;
        //////        supplier.OfficePhone = supp.OfficePhone;
        //////        supplier.MobileNo = supp.MobileNo;
        //////        supplier.EmailId = supp.EmailId;
        //////        supplier.WebUrl = supp.WebUrl;
        //////        supplier.SalesManager = supp.SalesManager;
        //////        supplier.ContactPerson = supp.ContactPerson;
        //////        supplier.ContactImage = supp.ContactImage;

        //////        //Suppliers.Attach(supplier);
        //////        this.Entry(supplier).State = EntityState.Modified;
        //////        this.SaveChanges();

        //////        //#region Supplier Master History
        //////        //Supplier data1 = Suppliers.Where(x => x.SupplierId == supp.SupplierId).FirstOrDefault();
        //////        //var UserName = Peoples.Where(x => x.PeopleID == supp.userid).Select(a => a.DisplayName).SingleOrDefault();

        //////        //try
        //////        //{
        //////        //    SupplierHistory h1 = new SupplierHistory();
        //////        //    if (data1 != null)
        //////        //    {
        //////        //        h1.SupplierId = data1.SupplierId;
        //////        //        h1.Name = data1.Name;
        //////        //        h1.CategoryName = data1.CategoryName;
        //////        //        h1.PhoneNumber = data1.PhoneNumber;
        //////        //        h1.Avaiabletime = data1.Avaiabletime;
        //////        //        h1.rating = data1.rating;
        //////        //        h1.BillingAddress = data1.BillingAddress;
        //////        //        h1.ShippingAddress = data1.ShippingAddress;
        //////        //        h1.Comments = data1.Comments;
        //////        //        h1.TINNo = data1.TINNo;
        //////        //        h1.OfficePhone = data1.OfficePhone;
        //////        //        h1.MobileNo = data1.MobileNo;
        //////        //        h1.EmailId = data1.EmailId;
        //////        //        h1.WebUrl = data1.WebUrl;
        //////        //        h1.SalesManager = data1.SalesManager;
        //////        //        h1.ContactPerson = data1.ContactPerson;
        //////        //        h1.ContactImage = data1.ContactImage;
        //////        //        h1.SUPPLIERCODES = data1.SUPPLIERCODES;
        //////        //        h1.WarehouseId = data1.WarehouseId;
        //////        //        h1.username = UserName;
        //////        //        h1.userid = supp.userid;
        //////        //        h1.UpdatedDate = DateTime.Now;
        //////        //        SupplierHistoryDB.Add(h1);
        //////        //        int id = this.SaveChanges();
        //////        //    }
        //////        //}
        //////        //catch (Exception ex)
        //////        //{
        //////        //    logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
        //////        //}
        //////        //#endregion
        //////        return supplier;
        //////    }
        //////    else
        //////    {
        //////        return null;
        //////    }

        //////}
        public Supplier PutSupplier(Supplier supp)
        {
            SupplierCategory suppcat = SupplierCategory.Where(c => c.SupplierCaegoryId == supp.SupplierCaegoryId).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == supp.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State state = States.Where(x => x.Stateid == supp.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            Supplier supplier = Suppliers.Where(x => x.SupplierId == supp.SupplierId).FirstOrDefault();
            if (supplier != null)
            {
                supplier.Name = supp.Name;
                supplier.CategoryName = suppcat.CategoryName;
                supplier.SupplierCaegoryId = suppcat.SupplierCaegoryId;
                supplier.PhoneNumber = supp.PhoneNumber;
                supplier.Avaiabletime = supp.Avaiabletime;
                supplier.Stateid = supp.Stateid;
                supplier.StateName = state.StateName;
                supplier.Cityid = supp.Cityid;
                supplier.City = city.CityName;
                if (supp.CibilScore != null && supp.CibilScore > 0)
                {
                    supplier.CibilScore = supp.CibilScore;
                }
                supplier.IsStopAdvancePr = supp.IsStopAdvancePr;
                supplier.IsIRNInvoiceRequired = supp.IsIRNInvoiceRequired;
                supplier.rating = supp.rating;
                supplier.BillingAddress = supp.BillingAddress;
                supplier.ShippingAddress = supp.ShippingAddress;
                supplier.Comments = supp.Comments;
                supplier.TINNo = supp.TINNo;
                supplier.OfficePhone = supp.OfficePhone;
                supplier.MobileNo = supp.MobileNo;
                supplier.EmailId = supp.EmailId;
                supplier.WebUrl = supp.WebUrl;
                supplier.SalesManager = supp.SalesManager;
                supplier.ContactPerson = supp.ContactPerson;
                supplier.ContactImage = supp.ContactImage;
                supplier.SUPPLIERCODES = supp.SUPPLIERCODES;
                supplier.PaymentTerms = supp.PaymentTerms;
                supplier.PeopleID = supp.PeopleID;
                //----sapp
                supplier.ShopName = supp.ShopName;
                supplier.EstablishmentYear = supp.EstablishmentYear;
                supplier.bussinessType = supp.bussinessType;
                supplier.Description = supp.Description;
                supplier.StartedBusiness = supp.StartedBusiness;
                supplier.FSSAI = supp.FSSAI;
                supplier.ManageAddress = supp.ManageAddress;
                supplier.businessImageUrl = supp.businessImageUrl;
                supplier.ChequeImageUrl = supp.ChequeImageUrl;
                supplier.BankPINno = supp.BankPINno;
                supplier.Bank_Name = supp.Bank_Name;
                supplier.Bank_AC_No = supp.Bank_AC_No;
                supplier.Bank_Ifsc = supp.Bank_Ifsc;
                supplier.Pancard = supp.Pancard;
                supplier.CityPincode = supp.CityPincode; // bug fixed  Issue Id SB1 - I709
                supplier.Password = supp.Password; // bug fixed tejas Issue Id SB1 - I709
                                                   //Suppliers.Attach(supplier);
                                                   //Suppliers.Attach(supplier);
                                                   //this.Entry(supplier).State = EntityState.Modified;
                this.Commit(doNotMakerChecker: false);
                return supp;
            }
            else
            {
                return supp;
            }
        }


        public bool DeleteSupplier(int id, int CompanyId)
        {
            try
            {

                Supplier supplier = Suppliers.Where(x => x.SupplierId == id && x.Deleted == false && x.CompanyId == CompanyId).FirstOrDefault();
                supplier.Deleted = true;
                //Suppliers.Attach(supplier);
                this.Entry(supplier).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }

        }

        //Depo Edit for use this By Anushka
        public DepoMaster PutDepos(DepoMaster EditDepo)
        {
            City city = Cities.Where(x => x.Cityid == EditDepo.Cityid && x.Deleted == false).Select(x => x).FirstOrDefault();
            State state = States.Where(x => x.Stateid == EditDepo.Stateid && x.Deleted == false).Select(x => x).FirstOrDefault();
            DepoMaster Depo = DepoMasters.Where(x => x.DepoId == EditDepo.DepoId).FirstOrDefault();
            if (Depo != null)
            {
                Depo.DepoName = EditDepo.DepoName;
                Depo.GSTin = EditDepo.GSTin;
                Depo.Address = EditDepo.Address;
                Depo.Email = EditDepo.Email;
                Depo.Phone = EditDepo.Phone;
                Depo.ContactPerson = EditDepo.ContactPerson;
                Depo.Cityid = city.Cityid;
                Depo.CityName = city.CityName;
                Depo.Stateid = state.Stateid;
                Depo.StateName = state.StateName;
                //---tejas
                Depo.FSSAI = EditDepo.FSSAI;
                Depo.CityPincode = EditDepo.CityPincode;
                Depo.Bank_Name = EditDepo.Bank_Name;
                Depo.Bank_AC_No = EditDepo.Bank_AC_No;
                Depo.BankAddress = EditDepo.BankAddress;
                Depo.Bank_Ifsc = EditDepo.Bank_Ifsc;
                Depo.BankPinCode = EditDepo.BankPinCode;
                Depo.PANCardNo = EditDepo.PANCardNo;
                Depo.OpeningHours = EditDepo.OpeningHours;
                Depo.PRPOStopAfterValue = EditDepo.PRPOStopAfterValue;
                //--tejas
                Depo.UpdatedDate = DateTime.Now;
                //DepoMasters.Attach(Depo);
                this.Entry(Depo).State = EntityState.Modified;
                this.Commit(doNotMakerChecker: false);
                return Depo;
            }
            else
            {
                return null;
            }
        }

        public IEnumerable<Country> Allcountries()
        {
            if (Countries.AsEnumerable().Count() > 0)
            {
                return Countries.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<Country> country = new List<Country>();
                return country.AsEnumerable();
            }
        }


        public bool IsCountryExists(Country country)
        {
            List<Country> countries = Countries.Where(c => c.CountryName.Trim().Equals(country.CountryName.Trim()) && c.Deleted == false).ToList();
            if (countries.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public Country AddCountry(Country country)
        {

            var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == country.CountryManagerId).FirstOrDefault();
            List<Country> countries = Countries.Where(c => c.CountryName.Trim().Equals(country.CountryName.Trim()) && c.Deleted == false).ToList();
            Country objCountry = new Country();
            if (countries.Count == 0)
            {
                objCountry.CountryName = country.CountryName;
                objCountry.AliasName = country.AliasName;
                objCountry.CountryManagerName = data.DisplayName;
                ////countries.Code = objCountry.Code;
                objCountry.CountryManagerId = country.CountryManagerId;
                objCountry.CreatedBy = country.CreatedBy;
                objCountry.CreatedDate = indianTime;
                objCountry.UpdatedDate = indianTime;
                objCountry.IsActive = true;
                Countries.Add(objCountry);
                int id = this.Commit();
                return country;
            }
            else
            {
                return objCountry;
            }
        }

        public Country PutCountry(Country objCountry)
        {
            //var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == objCountry.CountryManagerId).FirstOrDefault();
            var people = Peoples.Where(x => x.PeopleID == objCountry.CountryManagerId).Select(y => y.DisplayName).FirstOrDefault();
            Country countries = Countries.Where(x => x.CountryId == objCountry.CountryId && x.Deleted == false).FirstOrDefault();
            //var sNameCheck = Countries.Where(x => x.CountryName == objCountry.CountryName && x.Deleted == false).FirstOrDefault();
            if (countries.CountryName.ToString() == objCountry.CountryName.ToString())
            {
                return null;
            }
            if (countries != null)
            {
                countries.UpdatedDate = indianTime;
                countries.CountryName = objCountry.CountryName;
                countries.AliasName = objCountry.AliasName;
                ////countries.CountryManagerName = objCountry.CountryManagerName;
                //countries.CountryManagerName = people;
                countries.CountryManagerName = people;
                //countries.Code = objCountry.Code;
                countries.CountryManagerId = objCountry.CountryManagerId;
                //countries.CreatedBy = objCountry.CreatedBy;
                //countries.CreatedDate = objCountry.CreatedDate;
                countries.UpdateBy = objCountry.UpdateBy;

                //Countries.Attach(countries);
                // this.Entry(countries).Country = EntityCountry.Modified;
                this.Entry(countries).State = EntityState.Modified;
                this.Commit();
                return objCountry;
            }
            else
            {
                return objCountry;
            }
        }

        public bool DeleteCountry(int id)
        {
            try
            {
                Country countries = Countries.Where(x => x.CountryId == id).FirstOrDefault();
                countries.Deleted = true;
                //Countries.Attach(countries);
                this.Entry(countries).State = EntityState.Deleted;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }


        public IEnumerable<RegionZone> Allregion()
        {
            if (Regions.AsEnumerable().Count() > 0)
            {
                return Regions.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<RegionZone> region = new List<RegionZone>();
                return region.AsEnumerable();
            }
        }

        public bool IsRegionExists(RegionZone region)
        {
            List<RegionZone> regions = Regions.Where(c => c.RegionName.Trim().Equals(region.RegionName.Trim()) && c.Deleted == false).ToList();
            if (regions.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        ////public RegionZone AddRegion(RegionZone region)
        ////{
        ////    Zone zones = zone.Where(c => c.ZoneId == region.ZoneId && c.IsDeleted == false).FirstOrDefault();
        ////    var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == region.RegionManagerId).FirstOrDefault();
        ////    List<RegionZone> regions = Regions.Where(c => c.RegionName.Trim().Equals(region.RegionName.Trim()) && c.Deleted == false).ToList();
        ////    RegionZone objRegion = new RegionZone();
        ////    if ( regions.Any())
        ////    {
        ////        objRegion.RegionName = region.RegionName;
        ////        objRegion.RegionManagerId = region.RegionManagerId;
        ////        objRegion.ZoneId = region.ZoneId;
        ////        objRegion.CreatedBy = region.CreatedBy;
        ////        objRegion.CreatedDate = indianTime;
        ////        objRegion.UpdatedDate = indianTime;
        ////        objRegion.IsActive = true;
        ////        Regions.Add(objRegion);
        ////        int id = this.SaveChanges();
        ////        return region;
        ////    }
        ////    else
        ////    {
        ////        return objRegion;
        ////    }
        ////}

        public RegionZone AddRegion(RegionZone region)
        {
            Zone zones = zone.Where(c => c.ZoneId == region.ZoneId && c.IsDeleted == false).FirstOrDefault();
            var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == region.RegionManagerId).FirstOrDefault();
            List<RegionZone> regions = Regions.Where(c => c.RegionName.Trim().Equals(region.RegionName.Trim()) && c.Deleted == false).ToList();
            RegionZone objRegion = new RegionZone();
            if (regions.Count == 0)
            {
                objRegion.RegionName = region.RegionName;
                objRegion.RegionManagerId = region.RegionManagerId;
                objRegion.ZoneId = region.ZoneId;
                objRegion.CreatedBy = region.CreatedBy;
                //objRegion.CreatedDate = indianTime;
                //objRegion.UpdatedDate = indianTime;
                objRegion.CreatedDate = DateTime.Now;
                objRegion.UpdatedDate = DateTime.Now;
                objRegion.IsActive = true;
                Regions.Add(objRegion);
                int id = this.Commit();
                return region;
            }
            else
            {
                return objRegion;
            }
        }



        public RegionZone PutRegion(RegionZone objRegion)
        {

            RegionZone regions = Regions.Where(x => x.RegionId == objRegion.RegionId && x.Deleted == false).FirstOrDefault();
            if (regions != null)
            {
                regions.UpdatedDate = indianTime;
                regions.RegionName = objRegion.RegionName;
                //countries.Code = objCountry.Code;
                regions.RegionManagerId = objRegion.RegionManagerId;
                regions.ZoneId = objRegion.ZoneId;
                regions.UpdateBy = objRegion.UpdateBy;

                //Regions.Attach(regions);
                this.Entry(regions).State = EntityState.Modified;
                this.Commit();
                return objRegion;
            }
            else
            {
                return objRegion;
            }
        }

        public bool DeleteRegion(int id)
        {
            try
            {
                RegionZone regions = Regions.Where(x => x.RegionId == id).FirstOrDefault();
                regions.Deleted = true;
                // Regions.Attach(regions);
                this.Entry(regions).State = EntityState.Deleted;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<State> Allstates()
        {
            if (States.AsEnumerable().Count() > 0)
            {
                return States.Where(p => p.Deleted == false && p.active == true).AsEnumerable();
            }
            else
            {
                List<State> state = new List<State>();
                return state.AsEnumerable();
            }
        }


        public bool IsStateExists(State state)
        {
            List<State> states = States.Where(c => c.StateName.Trim().Equals(state.StateName.Trim()) && c.Deleted == false).ToList();
            if (states.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        public State AddState(State state, int userid)
        {
            //Zone zones = zone.Where(c => c.ZoneId == state.ZoneId && c.IsDeleted == false).FirstOrDefault();
            var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == state.StateManagerId).FirstOrDefault();
            List<State> states = States.Where(c => c.StateName.Trim().Equals(state.StateName.Trim()) && c.Deleted == false).ToList();
            People peopleData = Peoples.Where(x => x.PeopleID == userid && x.Deleted == false).FirstOrDefault();
            State objState = new State();
            if (states.Count == 0)
            {
                state.active = true;
                state.CreatedBy = peopleData.DisplayName;
                state.StateManagerId = state.StateManagerId;
                state.StateManagerName = data.DisplayName;
                state.AliasName = state.AliasName;
                state.StateName = state.StateName;
                state.GSTNo = state.GSTNo;
                // state.ZoneId = state.ZoneId;
                // state.ZoneName = zones.ZoneName;
                state.CreatedDate = indianTime;
                state.UpdatedDate = indianTime;
                state.InterstateAmount = state.InterstateAmount;
                state.IntrastateAmount = state.IntrastateAmount;
                States.Add(state);
                int id = this.Commit();
                return state;
            }
            else
            {
                return objState;
            }
        }
        public State PutState(State objState)
        {
            // Zone zones = zone.Where(c => c.ZoneId == objState.ZoneId && c.IsDeleted == false).FirstOrDefault();

            var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == objState.StateManagerId).FirstOrDefault();

            State states = States.Where(x => x.Stateid == objState.Stateid && x.Deleted == false).FirstOrDefault();
            People peopleData = Peoples.Where(x => x.PeopleID == objState.userid && x.Deleted == false).FirstOrDefault();
            //  People peopleData = Peoples.Where(x => x.PeopleID == userid && x.Deleted == false).FirstOrDefault();
            var sNameCheck = States.Where(x => x.StateName == objState.StateName && x.Deleted == false).FirstOrDefault();
            if (sNameCheck.StateName.ToString() == objState.StateName.ToString())
            {
                return null;
            }

            if (states != null)
            {
                states.UpdatedDate = indianTime;
                //states.StateManagerId = states.StateManagerId;
                //states.StateManagerName = data.DisplayName;
                states.StateManagerId = objState.StateManagerId;
                states.StateManagerName = data.DisplayName;
                //  states.ZoneId = states.ZoneId;
                // states.ZoneName = zones.ZoneName;
                states.UpdateBy = peopleData.DisplayName;
                states.active = objState.active;  //add for retailer  
                states.IsSupplier = objState.IsSupplier; // add for supplier 
                                                         //States.Attach(states);
                this.Entry(states).State = EntityState.Modified;
                this.Commit();
                return objState;
            }
            else
            {
                return objState;
            }
        }
        public State PutStates(State objState, int userid)
        {
            // Zone zones = zone.Where(c => c.ZoneId == objState.ZoneId && c.IsDeleted == false).FirstOrDefault();

            var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == objState.StateManagerId).FirstOrDefault();

            State states = States.Where(x => x.Stateid == objState.Stateid && x.Deleted == false).FirstOrDefault();
            People peopleData = Peoples.Where(x => x.PeopleID == userid && x.Deleted == false).FirstOrDefault();
            //  People peopleData = Peoples.Where(x => x.PeopleID == userid && x.Deleted == false).FirstOrDefault();
            var sNameCheck = States.Where(x => x.StateName == objState.StateName && x.Deleted == false).FirstOrDefault();
            //if (sNameCheck.StateName.ToString() == objState.StateName.ToString())
            //{
            //    return null;
            //}

            if (states != null)
            {
                if (sNameCheck.StateName.ToString() == objState.StateName.ToString())
                {
                    states.UpdatedDate = indianTime;
                    //states.StateManagerId = states.StateManagerId;
                    //states.StateManagerName = data.DisplayName;
                    states.StateManagerId = objState.StateManagerId;
                    states.StateManagerName = data.DisplayName;
                    //  states.ZoneId = states.ZoneId;
                    // states.ZoneName = zones.ZoneName;
                    states.UpdateBy = peopleData.DisplayName;
                    states.active = objState.active;  //add for retailer  
                    states.IsSupplier = objState.IsSupplier; // add for supplier 
                                                             //States.Attach(states);
                    states.InterstateAmount = objState.InterstateAmount;
                    states.IntrastateAmount = objState.IntrastateAmount;
                    this.Entry(states).State = EntityState.Modified;
                    this.Commit();
                    return objState;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return objState;
            }
        }
        public bool DeleteState(int id)
        {
            try
            {
                State states = States.Where(x => x.Stateid == id && x.Deleted == false).FirstOrDefault();
                states.Deleted = true;
                //States.Attach(states);
                this.Entry(states).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<City> AllCitys()
        {
            if (Cities.AsEnumerable().Count() > 0)
            {
                return Cities.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<City> city = new List<City>();
                return city.AsEnumerable();
            }
        }

        public IEnumerable<City> AllCity(int sid)
        {
            if (SubsubCategorys.AsEnumerable().Count() > 0)
            {
                return Cities.Where(p => p.Stateid == sid && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<City> city = new List<City>();
                return city.AsEnumerable();
            }
        }
        #region for CurrentStock

        public CurrentStock AddCurrentStock(CurrentStock CurrentStock)
        {
            CurrentStock ct = DbCurrentStock.Where(c => c.ItemNumber == CurrentStock.ItemNumber && c.Deleted == false && c.CompanyId == CurrentStock.CompanyId).FirstOrDefault();
            if (ct == null)
            {
                CurrentStock.CreationDate = indianTime;
                CurrentStock.UpdatedDate = indianTime;
                DbCurrentStock.Add(CurrentStock);
                int id = this.Commit();
                return CurrentStock;
            }
            else
            {
                return CurrentStock;
            }
        }

        public CurrentStock PutCurrentStock(CurrentStock CurrentStock)
        {

            CurrentStock ct = DbCurrentStock.Where(c => c.ItemNumber == CurrentStock.ItemNumber && c.Deleted == false && c.CompanyId == CurrentStock.CompanyId).FirstOrDefault();
            if (ct != null)
            {
                CurrentStock.UpdatedDate = indianTime;
                CurrentStock.CurrentInventory = CurrentStock.CurrentInventory;
                //DbCurrentStock.Attach(CurrentStock);
                this.Entry(CurrentStock).State = EntityState.Modified;
                this.Commit();
                return CurrentStock;
            }
            else
            {
                return CurrentStock;
            }
        }

        //public OrderDispatchedDetails PutOrderQuantityStock(OrderDispatchedDetails OrderDetail)
        //{
        //    OrderDispatchedDetails ct = OrderDispatchedDetailss.Where(c => c.OrderDetailsId == OrderDetail.OrderDetailsId && c.Deleted == false).FirstOrDefault();
        //    if (ct != null)
        //    {
        //        OrderDetail.qty = OrderDetail.qty;
        //        OrderDetail.Noqty = OrderDetail.Noqty;
        //        OrderDetail.QtyChangeReason = OrderDetail.QtyChangeReason;
        //        OrderDispatchedDetailss.Attach(OrderDetail);
        //        this.Entry(OrderDetail).State = EntityState.Modified;
        //        this.SaveChanges();
        //        return OrderDetail;
        //    }
        //    else
        //    {
        //        return OrderDetail;
        //    }
        //}

        public bool DeleteCurrentStock(int id, int CompanyId)
        {
            try
            {
                CurrentStock cst = DbCurrentStock.Where(x => x.StockId == id && x.CompanyId == CompanyId).FirstOrDefault();

                cst.Deleted = true;
                //DbCurrentStock.Attach(cst);
                this.Entry(cst).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }

        #endregion
        public City AddCity(City city, int userid)
        {
            State states = States.Where(c => c.Stateid == city.Stateid && c.Deleted == false).FirstOrDefault();
            // Country countries = Countries.Where(c => c.CountryId == city.CountryId && c.Deleted == false).FirstOrDefault();
            //  Zone zones = zone.Where(c => c.ZoneId == city.ZoneId && c.IsDeleted == false).FirstOrDefault();
            List<City> citys = Cities.Where(c => c.CityName.Trim().Equals(city.CityName.Trim()) && c.Deleted == false).ToList();
            People peopleData = Peoples.Where(x => x.PeopleID == userid && x.Deleted == false).FirstOrDefault();
            // People ps = Peoples.Where(x => x.PeopleID == city.userid && x.Deleted == false).FirstOrDefault();
            City objCity = new City();
            if (citys.Count == 0)
            {
                city.aliasName = city.aliasName;
                city.active = true;
                city.CreatedBy = peopleData.DisplayName;
                city.CreatedDate = indianTime;
                city.UpdatedDate = indianTime;
                city.StateName = states.StateName;
                Cities.Add(city);
                int id = this.Commit();
                return city;
            }
            else
            {
                city.Msg = "City Already Exist!";
                return city;
            }
        }
        public City PutCity(City objcity)
        {
            //var data = Peoples.Where(x => x.Deleted == false && x.PeopleID == objcity.CityManagerId).FirstOrDefault();
            State states = States.Where(c => c.Stateid == objcity.Stateid && c.Deleted == false).FirstOrDefault();
            //   Country countries = Countries.Where(c => c.CountryId == objcity.CountryId && c.Deleted == false).FirstOrDefault();
            //  Zone zones = zone.Where(c => c.ZoneId == objcity.ZoneId && c.IsDeleted == false).FirstOrDefault();
            City citys = Cities.Where(x => x.Cityid == objcity.Cityid && x.CityName == objcity.CityName && x.Deleted == false).FirstOrDefault();
            People peopleData = Peoples.Where(x => x.PeopleID == objcity.userid && x.Deleted == false).FirstOrDefault();
            if (citys != null)
            {
                citys.UpdatedDate = indianTime;
                citys.CityName = objcity.CityName;
                citys.aliasName = objcity.aliasName;
                citys.Code = objcity.Code;
                citys.StateName = objcity.StateName;
                // citys.CountryId = objcity.CountryId;
                // citys.CityManagerId = objcity.CityManagerId;
                citys.Stateid = objcity.Stateid;
                // citys.ZoneId = objcity.ZoneId;
                //citys.CreatedBy = objcity.CreatedBy;
                //citys.CreatedDate = objcity.CreatedDate;
                citys.UpdateBy = peopleData.DisplayName;
                citys.active = objcity.active;
                citys.IsSupplier = objcity.IsSupplier;
                citys.CityPlaceId = objcity.CityPlaceId;
                citys.CityLatitude = objcity.CityLatitude;
                citys.CityLongitude = objcity.CityLongitude;
                //Cities.Attach(citys);
                this.Entry(citys).State = EntityState.Modified;
                this.Commit();
                return objcity;
            }
            else
            {
                objcity.Msg = "City Already Exist!";
                return objcity;
            }
        }

        public bool DeleteCity(int id)
        {
            try
            {
                City citys = Cities.Where(x => x.Cityid == id).FirstOrDefault();
                citys.Deleted = true;
                //Cities.Attach(citys);
                this.Entry(citys).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<FinancialYear> AllFinancialYear(int compid)
        {

            if (DbItemBrand.AsEnumerable().Count() > 0)
            {
                return DbFinacialYear.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else

            {
                List<FinancialYear> fyear = new List<FinancialYear>();
                return fyear.AsEnumerable();
            }

        }
        public FinancialYear AddFinancialYear(FinancialYear financialYear)
        {
            List<FinancialYear> fyears = DbFinacialYear.Where(c => c.Financialyearid.Equals(financialYear.Financialyearid)).ToList();
            FinancialYear objfyear = new FinancialYear();
            if (fyears.Count == 0)
            {
                financialYear.StartDate = financialYear.StartDate;
                financialYear.EndDate = financialYear.EndDate;
                financialYear.CreatedBy = financialYear.CreatedBy;
                financialYear.CreatedDate = indianTime;
                financialYear.UpdatedDate = indianTime;
                DbFinacialYear.Add(financialYear);
                int id = this.Commit();
                return financialYear;
            }
            else
            {
                return objfyear;
            }
        }
        public FinancialYear PutFinancialYear(FinancialYear objFinancialYear)
        {
            FinancialYear fyears = DbFinacialYear.Where(x => x.Financialyearid == objFinancialYear.Financialyearid).FirstOrDefault();
            if (fyears != null)
            {
                fyears.UpdatedDate = indianTime;
                fyears.StartDate = objFinancialYear.StartDate;
                fyears.EndDate = objFinancialYear.EndDate;

                fyears.CreatedBy = objFinancialYear.CreatedBy;
                fyears.CreatedDate = objFinancialYear.CreatedDate;
                fyears.UpdateBy = objFinancialYear.UpdateBy;

                //DbFinacialYear.Attach(fyears);
                this.Entry(fyears).State = EntityState.Modified;
                this.Commit();
                return objFinancialYear;
            }
            else
            {
                return objFinancialYear;
            }
        }
        public bool DeleteFinancialYear(int id)
        {
            try
            {
                FinancialYear DL = new FinancialYear();
                DL.Financialyearid = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<CustomerRegistration> Allcustomers()
        {
            if (CustomerRegistrations.AsEnumerable().Count() > 0)
            {
                return CustomerRegistrations.AsEnumerable();
            }
            else
            {
                List<Category> category = new List<Category>();
                return CustomerRegistrations.AsEnumerable();
            }
        }
        public Customer getcustomers(string mobile)
        {
            try
            {
                Customer customers = Customers.Where(c => c.Mobile.Trim().Equals(mobile.Trim()) && c.Deleted == false).SingleOrDefault();
                if (customers == null)
                {
                    return null;
                }
                else
                {
                    return customers;
                }
            }
            catch
            {
                return null;
            }
        }
        public Customer getAllcustomers(string Mobile, string Password)
        {
            try
            {
                Customer customers = Customers.Where(c => c.Mobile.Trim().Equals(Mobile.Trim()) && c.Deleted == false).Where(d => d.Password.Trim().Equals(Password.Trim())).SingleOrDefault();
                if (customers == null)
                {
                    return null;
                }
                else
                {
                    return customers;
                }
            }
            catch
            {
                return null;
            }
        }
        public IEnumerable<ItemPramotions> AllItemPramotion(int compid)
        {
            if (itempramotions.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return itempramotions.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                return null;
            }
        }
        public IEnumerable<ItemPramotions> AllItemPramotionWid(int compid, int Warehouse_id)
        {
            if (itempramotions.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                return itempramotions.Where(x => x.CompanyId == compid).AsEnumerable();
            }
            else
            {
                return null;
            }
        }
        public ItemPramotions AddPramotion(ItemMaster item)
        {
            ItemPramotions it = itempramotions.Where(x => x.ItemId == item.ItemId).Select(x => x).SingleOrDefault();

            ItemMaster i = itemMasters.Where(x => x.ItemId.Equals(item.ItemId)).Select(x => x).SingleOrDefault();
            ItemPramotions itemprom = new ItemPramotions();
            if (it == null)
            {

                itemprom.ItemId = item.ItemId;
                itemprom.ItemName = i.itemname;
                itemprom.PramotionalDiscount = item.PramotionalDiscount;
                itemprom.StartDate = Convert.ToDateTime(item.StartDate);
                itemprom.EndDate = Convert.ToDateTime(item.EndDate);
                itemprom.title = item.title;
                itemprom.WarehouseId = item.WarehouseId;
                itemprom.IsActive = true;

                itempramotions.Add(itemprom);
                int id = this.Commit();

                return it;
            }
            else
            {
                return null;
            }
        }
        public ItemMaster AddItemPramotion(ItemMaster item)
        {
            ItemMaster it = itemMasters.Where(i => i.ItemId.Equals(item.ItemId) && i.CompanyId == item.CompanyId).FirstOrDefault();
            if (it != null)
            {
                it.title = item.title;
                it.Description = item.Description;
                it.StartDate = item.StartDate;
                it.EndDate = item.EndDate;
                it.PramotionalDiscount = item.PramotionalDiscount;

                //itemMasters.Attach(it);
                this.Entry(it).State = EntityState.Modified;
                this.Commit();
                return it;
            }
            else
            {
                return null;
            }
        }
        public Customer CustomerRegistration(Customer Cust)
        {

            Customer customer = Customers.Where(c => c.Mobile.Trim().Equals(Cust.Mobile.Trim())).SingleOrDefault();
            // List<Warehouse> citywarehouse = Warehouses.Where(w => w.CityName.Trim().ToLower().Equals(Cust.City.Trim().ToLower()) && w.Deleted == false).ToList();
            if (customer == null)
            {
                if (Cust.BillingAddress == null && Cust.BAGPSCoordinates == null)
                {
                    return Cust;
                }
                else
                {
                    // Cust.Warehouseid = 0;
                    Cust.Skcode = this.skcode();
                    Cust.ClusterId = 1;
                    var clstr = Clusters.Where(x => x.ClusterId == Cust.ClusterId).SingleOrDefault();
                    if (clstr != null)
                    {
                        Cust.ClusterId = clstr.ClusterId;
                        Cust.ClusterName = clstr.ClusterName;
                    }
                    else
                    {
                        Cluster fclstr = Clusters.FirstOrDefault();
                        Cust.ClusterId = fclstr.ClusterId;
                        Cust.ClusterName = fclstr.ClusterName;
                    }
                    //if (Cust.Day == null)
                    //{
                    //    Cust.Day = "";
                    //}
                    Cust.CreatedDate = indianTime;
                    Cust.UpdatedDate = indianTime;
                    Cust.Deleted = false;
                    Customers.Add(Cust);
                    int id = this.Commit();
                    return Cust;
                }
            }
            else
            {
                customer.Emailid = Cust.Emailid;
                customer.Name = Cust.Name;
                customer.Password = Cust.Password;
                customer.ShippingAddress = Cust.ShippingAddress;
                customer.BillingAddress = Cust.BillingAddress;
                if (Cust.City != null)
                {
                    customer.City = Cust.City;
                }
                if (Cust.State != null)
                {
                    customer.State = Cust.State;
                }
                if (Cust.Country != null)
                {
                    customer.Country = Cust.Country;
                }
                if (Cust.BAGPSCoordinates != null)
                {
                    customer.BAGPSCoordinates = Cust.BAGPSCoordinates;
                }

                customer.ZipCode = Cust.ZipCode;
                customer.LandMark = Cust.LandMark;
                customer.Deleted = false;

                //Customers.Attach(customer);
                this.Entry(customer).State = EntityState.Modified;
                this.Commit();
                return customer;
            }
        }
        /// <summary>
        /// Updated by 27/12/2018
        /// </summary>
        /// <param name="Cust"></param>
        /// <returns></returns>
        public Customer CustomerUpdate(Customer Cust)
        {
            Customer customer = Customers.Where(c => c.CustomerId == Cust.CustomerId && c.Mobile.Trim().Equals(Cust.Mobile.Trim()) && c.Deleted == false).SingleOrDefault();
            try
            {
                if (customer != null)
                {
                    customer.Emailid = Cust.Emailid;
                    customer.lat = Cust.lat;
                    customer.lg = Cust.lg;
                    customer.Name = Cust.Name;
                    customer.ShopName = Cust.ShopName;
                    customer.RefNo = Cust.RefNo;
                    customer.DOB = Cust.DOB;
                    customer.AnniversaryDate = Cust.AnniversaryDate;     //tejas 25-05-2019
                    customer.WhatsappNumber = Cust.WhatsappNumber;      //tejas 25-05-2019
                    customer.UploadLicensePicture = Cust.UploadLicensePicture;  //tejas 04-06-2019 
                    customer.UploadGSTPicture = Cust.UploadGSTPicture;  //tejas 04-06-2019  
                    customer.LicenseNumber = Cust.LicenseNumber;      //tejas 04-06-2019  
                    customer.Shopimage = Cust.Shopimage;                //tejas 04-06-2019  
                    customer.AreaName = Cust.AreaName;
                    customer.BillingAddress = Cust.BillingAddress;
                    customer.ShippingAddress = Cust.ShippingAddress;
                    customer.UploadRegistration = Cust.UploadRegistration;
                    customer.UploadProfilePichure = Cust.UploadProfilePichure;
                    customer.ResidenceAddressProof = Cust.ResidenceAddressProof;
                    customer.ShippingAddress1 = Cust.ShippingAddress1;
                    customer.BillingAddress1 = Cust.BillingAddress1;
                    customer.ZipCode = Cust.ZipCode;
                    customer.LandMark = Cust.LandMark;
                    customer.AadharNo = Cust.AadharNo;//sudhir 30-11-2020 
                    customer.PanNo = Cust.PanNo;//sudhir 30-11-2020 
                    customer.NameOnGST = Cust.NameOnGST;
                    //Customers.Attach(customer);


                    #region to assign cluster ID and determine if it is in cluster or not.                   
                    if (customer.lat != 0 && customer.lg != 0)
                    {
                        var query = new StringBuilder("select [dbo].[GetClusterFromLatLng]('").Append(customer.lat).Append("', '").Append(customer.lg).Append("')");
                        var clusterId = Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                        if (!clusterId.HasValue)
                        {
                            customer.InRegion = false;
                            string message = "Thanks for registering with ShopKirana. We will contact you soon";

                            var notificationSent = DeviceNotificationDb.Any(x => x.CustomerId == customer.CustomerId && x.Message == message);

                            if (!notificationSent)
                            {
                                NotificationHelper notHelper = new NotificationHelper();
                                string title = "Congratulations! ";

                                notHelper.SendNotificationtoCustomer(customer, message, message, true, true, title);
                            }
                        }
                        else
                        {
                            customer.ClusterId = clusterId;
                            var dd = Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                            customer.ClusterName = dd.ClusterName;
                            customer.InRegion = true;
                            customer.Warehouseid = dd.WarehouseId;
                            customer.WarehouseName = dd.WarehouseName;
                        }
                    }
                    #endregion


                    this.Entry(customer).State = EntityState.Modified;
                    this.Commit();



                    #region Customer Retailer History on Backend

                    //var UserName = Customers.Where(x => x.CustomerId == customer.CustomerId).Select(a => a.Name).SingleOrDefault();
                    //CustomerHistory RetailHistory = new CustomerHistory();
                    //try
                    //{
                    //    RetailHistory.CustomerId = customer.CustomerId;
                    //    RetailHistory.Skcode = customer.Skcode;
                    //    RetailHistory.Emailid = customer.Emailid;
                    //    RetailHistory.lat = customer.lat;
                    //    RetailHistory.lg = customer.lg;
                    //    RetailHistory.Name = customer.Name;
                    //    RetailHistory.ShopName = customer.ShopName;
                    //    RetailHistory.RefNo = customer.RefNo;
                    //    RetailHistory.BillingAddress = customer.BillingAddress;
                    //    RetailHistory.ShippingAddress = customer.ShippingAddress;
                    //    RetailHistory.WarehouseName = customer.WarehouseName;
                    //    RetailHistory.City = customer.City;
                    //    RetailHistory.Password = customer.Password;
                    //    RetailHistory.username = UserName;
                    //    RetailHistory.userid = customer.CustomerId;
                    //    RetailHistory.Active = customer.Active;
                    //    RetailHistory.UpdatedDate = DateTime.Now;
                    //    CustomerHistoryDB.Add(RetailHistory);
                    //    SaveChanges();
                    //}
                    //catch (Exception ex) { logger.Error("Error in UpdateCustomer CustomerHistory " + ex.Message); }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return customer;
        }

        //mbd group update
        public SalesGroup GroupUpdate(SalesGroup Grp)
        {
            SalesGroup SGrp = SalesGroupDb.Where(c => c.Id == Grp.Id && c.IsDeleted == false).SingleOrDefault();
            try
            {
                if (SGrp != null)
                {
                    SGrp.GroupName = Grp.GroupName;


                    #endregion


                    this.Entry(SGrp).State = EntityState.Modified;
                    this.Commit();



                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return SGrp;
        }


        //end group update

        #region
        /// <summary>
        /// Updated by 08/11/2019 by Anushka
        /// </summary>
        /// <param name="Cust"></param>
        /// <returns></returns>
        public Customer CustomerUpdateV3(CustomerDC Cust)
        {
            int WarehouseId = 0;

            Customer customer = Customers.Where(c => c.CustomerId == Cust.CustomerId && c.Mobile.Trim().Equals(Cust.Mobile.Trim()) && c.Deleted == false).SingleOrDefault();
            if (Cust.Cityid > 0)
            {
                WarehouseId = Warehouses.Where(x => x.Cityid == Cust.Cityid && x.Deleted == false && x.active == true).Select(x => x.WarehouseId).FirstOrDefault();
            }
            else if (Cust.Cityid == 0)
            {
                WarehouseId = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["DefaultWarehouseId"].ToString());
            }
            try
            {
                if (customer != null)
                {
                    customer.IsCityVerified = Cust.Cityid > 0;
                    customer.City = Cust.City;
                    customer.lat = Cust.lat;
                    customer.lg = Cust.lg;
                    customer.CustomerId = Cust.CustomerId;
                    customer.Name = Cust.Name;
                    customer.UploadProfilePichure = Cust.UploadProfilePichure;
                    customer.Mobile = Cust.Mobile;
                    customer.Emailid = Cust.Emailid;
                    customer.ShippingAddress = Cust.ShippingAddress;
                    customer.ZipCode = Cust.ZipCode;
                    customer.Password = Cust.Password;
                    customer.Cityid = Cust.Cityid;                //tejas 04-06-2019  
                    customer.Skcode = Cust.Skcode;
                    customer.RefNo = Cust.RefNo;
                    customer.UploadGSTPicture = Cust.UploadGSTPicture;
                    customer.ShopName = Cust.ShopName;
                    customer.Shopimage = Cust.Shopimage;
                    customer.CurrentAPKversion = Cust.CurrentAPKversion;
                    customer.PhoneOSversion = Cust.PhoneOSversion;
                    customer.UserDeviceName = Cust.UserDeviceName;
                    customer.deviceId = Cust.deviceId;
                    customer.imei = Cust.imei;
                    customer.IsSignup = true;
                    customer.ShippingAddress1 = Cust.ShippingAddress1;
                    customer.BillingAddress1 = Cust.BillingAddress1;
                    customer.LandMark = Cust.LandMark;
                    customer.LicenseNumber = Cust.LicenseNumber;
                    customer.UploadRegistration = Cust.UploadRegistration;

                    // added for trade - tejas - 31-01-2020
                    customer.IfscCode = Cust.IfscCode;
                    customer.AccountNumber = Cust.AccountNumber;
                    customer.BankName = Cust.BankName;
                    customer.ReferralSkCode = Cust.ReferralSkCode;
                    customer.IsReferral = Cust.IsReferral;
                    customer.fcmId = Cust.fcmId;
                    // added for trade - tejas - 31-01-2020
                    if (customer.Warehouseid == null)
                    {
                        customer.Warehouseid = WarehouseId;
                    }
                    //Customers.Attach(customer);


                    #region to assign cluster ID and determine if it is in cluster or not.                   
                    if (customer.lat != 0 && customer.lg != 0 && customer.Cityid > 0)
                    {
                        var query = new StringBuilder("select [dbo].[GetClusterFromLatLngAndCity]('").Append(customer.lat).Append("', '").Append(customer.lg).Append("', ").Append(customer.Cityid).Append(")");
                        var clusterId = Database.SqlQuery<int?>(query.ToString()).FirstOrDefault();
                        if (!clusterId.HasValue)
                        {
                            customer.InRegion = false;
                            string message = "Thanks for registering with ShopKirana. We will contact you soon";

                            var notificationSent = DeviceNotificationDb.Any(x => x.CustomerId == customer.CustomerId && x.Message == message);

                            if (!notificationSent)
                            {
                                NotificationHelper notHelper = new NotificationHelper();
                                string title = "Congratulations! ";

                                notHelper.SendNotificationtoCustomer(customer, message, message, true, true, title);
                            }
                        }
                        else
                        {
                            customer.ClusterId = clusterId;
                            var dd = Clusters.Where(x => x.ClusterId == clusterId).FirstOrDefault();
                            customer.ClusterName = dd.ClusterName;
                            customer.InRegion = true;
                            customer.Warehouseid = dd.WarehouseId;
                            customer.WarehouseName = dd.WarehouseName;
                        }
                    }
                    #endregion


                    this.Entry(customer).State = EntityState.Modified;
                    this.Commit();
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return customer;
        }

        #endregion

        public People CheckPeople(string mob, string password)
        {
            People check = new People();
            //check = Peoples.Where(p => p.Mobile == mob && p.Password == password && p.Deleted == false && p.Active == true && p.tempdel == true).SingleOrDefault();
            check = Peoples.Where(p => p.Mobile == mob && p.Password == password && p.Deleted == false && p.Active == true && p.tempdel == false).SingleOrDefault();
            if (check != null)
            {
                return check;
            }
            else
            {
                return null;
            }
        }
        public People CheckPeopleSalesPersonData(string Mobile)
        {
            People check = new People();
            using (var context = new AuthContext())
            {
                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + Mobile + "' and r.Name='Sales Executive' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                check = context.Database.SqlQuery<People>(query).FirstOrDefault();
                //check = Peoples.Where(p => p.Mobile == Mobile && p.Department == "Sales Executive" && p.Deleted == false && p.Active == true).SingleOrDefault();
                if (check != null)
                {
                    return check;
                }
                else
                {
                    return null;
                }
            }
        }
        public CustomerRegistration PutCustomerRegistration(CustomerRegistration customer)
        {
            CustomerRegistration cust = CustomerRegistrations.Where(x => x.Mobile == customer.Mobile).FirstOrDefault();
            if (cust != null)
            {
                cust.City = customer.City;
                cust.Country = customer.Country;
                cust.State = customer.State;
                cust.GeoLocation = customer.GeoLocation;
                cust.ZipCode = customer.ZipCode;
                cust.Address = customer.Address;
                //cust.Warehouseid = 6;
                //CustomerRegistrations.Attach(cust);
                this.Entry(cust).State = EntityState.Modified;
                this.Commit();
                return cust;
            }
            else
            {
                return null;
            }
        }
        public IEnumerable<ItemBrand> AllItemBrand(int compid)
        {
            if (DbItemBrand.AsEnumerable().Count() > 0)
            {
                return DbItemBrand.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<ItemBrand> itembname = new List<ItemBrand>();
                return itembname.AsEnumerable();
            }
        }
        public ItemBrand AddItemBrand(ItemBrand itembrand)
        {
            List<ItemBrand> itembrands = DbItemBrand.Where(c => c.ItemBrandName.Trim().Equals(itembrand.ItemBrandName.Trim()) && c.CompanyId == itembrand.CompanyId).ToList();
            ItemBrand objItemBrand = new ItemBrand();
            if (itembrands.Count == 0)
            {
                itembrand.CreatedBy = itembrand.CreatedBy;
                itembrand.CreatedDate = indianTime;
                itembrand.UpdatedDate = indianTime;
                DbItemBrand.Add(itembrand);
                int id = this.Commit();
                return itembrand;
            }
            else
            {
                return objItemBrand;
            }
        }
        public ItemBrand PutItemBrand(ItemBrand objitembrand)
        {

            ItemBrand itembrands = DbItemBrand.Where(x => x.ItemBrandid == objitembrand.ItemBrandid && x.CompanyId == objitembrand.CompanyId).FirstOrDefault();
            if (itembrands != null)
            {
                itembrands.UpdatedDate = indianTime;
                itembrands.ItemBrandName = objitembrand.ItemBrandName;

                itembrands.CreatedBy = objitembrand.CreatedBy;
                itembrands.CreatedDate = objitembrand.CreatedDate;
                itembrands.UpdateBy = objitembrand.UpdateBy;

                //DbItemBrand.Attach(itembrands);
                this.Entry(itembrands).State = EntityState.Modified;
                this.Commit();
                return objitembrand;
            }
            else
            {
                return objitembrand;
            }
        }
        public bool DeleteItemBrand(int id, int compid)
        {
            try
            {
                ItemBrand DL = new ItemBrand();
                DL.ItemBrandid = id;
                Entry(DL).State = EntityState.Deleted;

                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Customer> AllCustomerbyCompanyId(int cmpid)
        {
            return Customers.Where(c => c.Deleted == false).AsEnumerable();
        }
        public IEnumerable<Customer> AllCustomers(int compid)
        {
            return Customers.Where(c => c.Deleted == false && c.CompanyId == compid).AsEnumerable();

        }
        public Customer AddCustomer(Customer customer)
        {
            Customer customers = Customers.Where(c => c.Mobile.Trim().Equals(customer.Mobile.Trim())).FirstOrDefault();
            //CustomerCategory cat = CustomerCategorys.Where(x => x.CustomerCategoryId == customer.CustomerCategoryId && x.Deleted == false).Select(x => x).FirstOrDefault();
            Customer objCustomer = new Customer();
            Cluster Clust = Clusters.Where(a => a.ClusterId == customer.ClusterId).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == customer.Cityid && x.Deleted == false && x.active == true).SingleOrDefault();
            Warehouse wh = Warehouses.Where(x => x.WarehouseId == customer.Warehouseid && x.Deleted == false).SingleOrDefault();
            if (customers == null)
            {
                #region for Duplicate PAN no. check
                if (!string.IsNullOrEmpty(customer.PanNo.Trim()))
                {
                    Customer IsExistPAN = Customers.Where(c => c.PanNo.ToLower() == customer.PanNo.ToLower()).FirstOrDefault();
                    if (IsExistPAN != null)
                    {
                        customers.Exception = "PAN Already Exists.";
                        return customers;
                    }
                }
                #endregion

                customer.Skcode = this.skcode();

                bool has = Customers.Any(cus => cus.Skcode == customer.Skcode);
                if (has)
                {
                    customers.Exception = "Already";
                    return customers;
                }
                else
                {
                    customer.City = city.CityName;
                    customer.Cityid = city.Cityid;
                    customer.State = city.StateName;
                    customer.CreatedDate = indianTime;
                    customer.UpdatedDate = indianTime;

                    if (customer.CustomerVerify == "Full Verified")
                    {
                        customer.VerifiedBy = customer.userid;
                        customer.VerifiedDate = DateTime.Now;
                    }
                    else
                    {
                        customer.VerifiedBy = null;
                        customer.VerifiedDate = null;
                    }

                    if (wh == null)
                    {
                        customer.Warehouseid = 0;
                        customer.WarehouseName = "Default";
                    }
                    else
                    {
                        customer.Warehouseid = wh.WarehouseId;
                        customer.WarehouseName = wh.WarehouseName;
                    }

                    try
                    {

                        if (customer.ShippingAddress == null && customer.BillingAddress != null)
                        {

                            customer.ShippingAddress = customer.BillingAddress;
                        }
                        if (customer.BillingAddress == null && customer.ShippingAddress != null)
                        {

                            customer.BillingAddress = customer.ShippingAddress;
                        }

                    }
                    catch (Exception ss)
                    {
                    }



                    //try
                    //{
                    //    if (customer.ExecutiveId == null)
                    //    {
                    //        People ps = Peoples.Where(x => x.PeopleID == customer.userid).FirstOrDefault();
                    //        customer.CreatedBy = ps.DisplayName;
                    //    }
                    //    else
                    //    {
                    //        People ps = Peoples.Where(x => x.PeopleID == customer.ExecutiveId).FirstOrDefault();
                    //        customer.CreatedBy = ps.DisplayName;
                    //        customer.ExecutiveName = ps.DisplayName;
                    //        customer.Active = true;
                    //    }
                    //}
                    //catch (Exception sd)
                    //{
                    //}
                    customer.ClusterName = Clust?.ClusterName;
                    customer.AgentCode = customer.AgentCode;
                    customer.CustomerVerify = customer.CustomerVerify;
                    customer.StatusSubType = customer.StatusSubType;
                    customer.IsCityVerified = true;
                    customer.IsSignup = customer.IsSignup;
                    customer.IsKPP = customer.IsKPP;
                    customer.KPPWarehouseId = customer.KPPWarehouseId;
                    customer.CustomerType = customer.CustomerType;
                    customer.AadharNo = customer.AadharNo;
                    customer.PanNo = customer.PanNo;
                    customer.IsTCSExemption = customer.IsTCSExemption;
                    //customer.Active = false;
                    Customers.Add(customer);
                    int id = this.Commit();

                    #region call to whatsapp Bot 
                    try
                    {
                        CustomerWhatsAppDTO cust = new CustomerWhatsAppDTO();
                        cust.Name = customer.Name;
                        cust.Mobile = customer.Mobile;
                        cust.TemppleteId = 8;//send for template
                        cust.Password = Convert.ToInt32(customer.Password);//send for Order Id
                        Customersms(cust);
                    }
                    catch (Exception ex)
                    {
                    }
                    #endregion
                    //code for wallet create on custmer sign up                   
                    try
                    {
                        var wallet = GetWalletbyCustomerid(customer.CustomerId);
                        var reward = GetRewardbyCustomerid(customer.CustomerId);
                    }
                    catch (Exception ex)
                    {

                    }
                    foreach (var brandid in customer.BrandIds)
                    {
                        CustomerBrandAcess custbrandmapp = new CustomerBrandAcess();
                        custbrandmapp.CustomerId = customer.CustomerId;
                        custbrandmapp.BrandId = brandid;
                        custbrandmapp.CreatedBy = customer.userid;
                        custbrandmapp.ModifiedBy = customer.userid;
                        custbrandmapp.CreatedDate = indianTime;
                        custbrandmapp.ModifiedDate = indianTime;
                        custbrandmapp.IsActive = true;
                        CustomerBrandAcessDB.Add(custbrandmapp);
                    }

                    this.Commit();
                    customers.Exception = "Added";
                    return customer;
                }
            }
            else
            {
                foreach (var item in customer.BrandIds)
                {
                    var custbradmapping = CustomerBrandAcessDB.Any(x => x.BrandId == item && x.CustomerId == customer.CustomerId);

                    if (!custbradmapping)
                    {
                        CustomerBrandAcess Custmapp = new CustomerBrandAcess();
                        Custmapp.CustomerId = customer.CustomerId;
                        Custmapp.BrandId = item;
                        Custmapp.CreatedBy = customer.userid;
                        Custmapp.ModifiedBy = customer.userid;
                        Custmapp.CreatedDate = indianTime;
                        Custmapp.ModifiedDate = indianTime;
                        Custmapp.IsActive = true;
                        CustomerBrandAcessDB.Add(Custmapp);

                    }
                    else
                    {

                    }
                    this.Commit();

                }
                customers.Exception = "Already";
                return customers;
            }
        }
        public Customer PutCustomer(Customer customer)
        {
            Customer cust = Customers.Where(x => x.CustomerId == customer.CustomerId).FirstOrDefault();
            Customer has = Customers.Where(x => x.Mobile == customer.Mobile).FirstOrDefault();
            Cluster Clust = Clusters.Where(a => a.ClusterId == customer.ClusterId).FirstOrDefault();
            City city = Cities.Where(x => x.Cityid == customer.Cityid && x.Deleted == false).SingleOrDefault();
            Warehouse wh = Warehouses.Where(x => x.WarehouseId == customer.Warehouseid && x.Deleted == false).SingleOrDefault();
            People ps = Peoples.Where(x => x.PeopleID == customer.userid).FirstOrDefault();
            //People ppl = Peoples.Where(x => x.PeopleID == customer.ExecutiveId).FirstOrDefault();
            if (has != null)
            {
                if (cust.CustomerId == has.CustomerId)
                {
                    if (cust != null)
                    {
                        cust.UpdatedDate = indianTime;
                        cust.Name = customer.Name;
                        cust.Password = customer.Password;
                        cust.LandMark = customer.LandMark;
                        cust.Areaid = customer.Areaid;
                        cust.AreaName = customer.AreaName;
                        cust.Description = customer.Description;
                        cust.CustomerType = customer.CustomerType;
                        cust.IsKPP = customer.IsKPP;
                        cust.KPPWarehouseId = customer.KPPWarehouseId;
                        cust.ClusterId = customer.ClusterId;
                        cust.IsSignup = customer.IsSignup;
                        cust.ChequeLimit = customer.ChequeLimit;
                        cust.IsChequeAccepted = customer.IsChequeAccepted;
                        if (cust.ClusterId == null || cust.ClusterId == 0)
                        {
                            cust.ClusterName = null;
                        }
                        else
                        {
                            cust.ClusterName = Clust.ClusterName;
                        }
                        try
                        {
                            if (cust.ShippingAddress == null && customer.BillingAddress != null)
                            {
                                cust.ShippingAddress = customer.BillingAddress;
                            }
                            else
                            {
                                cust.ShippingAddress = customer.ShippingAddress;
                            }
                            if (cust.BillingAddress == null && customer.ShippingAddress != null)
                            {
                                cust.BillingAddress = customer.ShippingAddress;
                            }
                            else
                            {
                                cust.BillingAddress = customer.BillingAddress;
                            }
                        }
                        catch (Exception ss) { }



                        if (city != null)
                        {
                            cust.Cityid = city.Cityid;
                            cust.City = city.CityName;
                        }
                        cust.ShopName = customer.ShopName;
                        cust.BAGPSCoordinates = customer.BAGPSCoordinates;
                        cust.SAGPSCoordinates = customer.SAGPSCoordinates;
                        cust.RefNo = customer.RefNo;
                        cust.Mobile = customer.Mobile;
                        cust.Emailid = customer.Emailid;
                        cust.Familymember = customer.Familymember;
                        if (customer.imei != null)
                        {
                            cust.imei = customer.imei;
                        }
                        if (ps.DisplayName != null)
                        {
                            cust.LastModifiedBy = ps.DisplayName;
                        }
                        else
                        {
                            cust.LastModifiedBy = ps.PeopleFirstName;
                        }

                        cust.Active = customer.Active;
                        cust.IsHide = customer.IsHide;
                        //}
                        cust.lat = customer.lat;
                        cust.lg = customer.lg;
                        if (wh != null)
                        {
                            cust.Warehouseid = wh.WarehouseId;
                            cust.WarehouseName = wh.WarehouseName;
                        }
                        //cust.ExecutiveId = customer.ExecutiveId;

                        //if (cust.ExecutiveId == 0 || cust.ExecutiveId == null)
                        //{
                        //    cust.ExecutiveName = null;
                        //}
                        //else
                        //{
                        //    cust.ExecutiveName = ppl.DisplayName;
                        //}
                        cust.DOB = customer.DOB;                                /*tejas 27-05-2019*/
                        cust.AnniversaryDate = customer.AnniversaryDate;
                        cust.WhatsappNumber = customer.WhatsappNumber;
                        cust.LicenseNumber = customer.LicenseNumber;
                        cust.CustomerVerify = customer.CustomerVerify;
                        cust.StatusSubType = customer.StatusSubType;
                        this.Entry(cust).State = EntityState.Modified;
                        this.Commit();


                        try
                        {
                            //People ExName = Peoples.Where(x => x.PeopleID == customer.ExecutiveId).FirstOrDefault();
                            Customer Customer = Customers.Where(x => x.CustomerId == cust.CustomerId).FirstOrDefault();
                            if (Customer == null)
                            {
                                Customer cs = new Customer();
                                //if (customer.ExecutiveId == null)
                                //{
                                //    cs.ExecutiveId = 0;
                                //}
                                //else
                                //{
                                //    cs.ExecutiveId = customer.ExecutiveId;
                                //}

                                cs.AgentCode = customer.AgentCode;
                                cs.CustomerId = cust.CustomerId;
                                cs.Warehouseid = wh.WarehouseId;
                                cs.WarehouseName = wh.WarehouseName;
                                cs.CompanyId = cust.CompanyId;
                                cs.CreatedDate = indianTime;
                                cs.UpdatedDate = indianTime;
                                Customers.Add(cs);
                                int id = this.Commit();
                            }
                            else
                            {
                                Customer c = Customers.Where(x => x.CustomerId == cust.CustomerId).FirstOrDefault();
                                c.Warehouseid = wh.WarehouseId;
                                // c.ExecutiveId = customer.ExecutiveId;
                                c.AgentCode = customer.AgentCode;
                                c.WarehouseName = wh.WarehouseName;
                                c.UpdatedDate = indianTime;
                                this.Entry(c).State = EntityState.Modified;
                                this.Commit();
                            }
                        }
                        catch (Exception) { }
                        return cust;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    customer.Exception = "Already exist number";
                    return customer;
                }
            }
            else
            {
                if (cust != null)
                {
                    cust.UpdatedDate = indianTime;
                    cust.Name = customer.Name;
                    cust.Password = customer.Password;
                    cust.LandMark = customer.LandMark;
                    cust.Description = customer.Description;
                    cust.CustomerType = customer.CustomerType;
                    cust.BillingAddress = customer.BillingAddress;
                    cust.ShippingAddress = customer.ShippingAddress;
                    cust.KPPWarehouseId = customer.KPPWarehouseId;
                    if (city != null)
                    {
                        cust.Cityid = city.Cityid;
                        cust.City = city.CityName;
                    }
                    cust.ShopName = customer.ShopName;
                    cust.BAGPSCoordinates = customer.BAGPSCoordinates;
                    cust.SAGPSCoordinates = customer.SAGPSCoordinates;
                    cust.RefNo = customer.RefNo;
                    cust.Mobile = customer.Mobile;
                    cust.Emailid = customer.Emailid;
                    cust.Familymember = customer.Familymember;
                    if (customer.imei != null)
                    {
                        cust.imei = customer.imei;
                    }
                    cust.LastModifiedBy = customer.LastModifiedBy;
                    cust.Active = customer.Active;
                    cust.IsHide = customer.IsHide;
                    cust.lat = customer.lat;
                    cust.lg = customer.lg;

                    if (wh != null)
                    {
                        cust.Warehouseid = wh.WarehouseId;
                        cust.WarehouseName = wh.WarehouseName;
                    }
                    //cust.ExecutiveId = customer.ExecutiveId;
                    this.Entry(cust).State = EntityState.Modified;
                    this.Commit();


                    try
                    {
                        Customer Customer = Customers.Where(x => x.CustomerId == cust.CustomerId).FirstOrDefault();
                        //People ExName = Peoples.Where(x => x.PeopleID == customer.ExecutiveId).FirstOrDefault();

                        if (Customer == null)
                        {
                            Customer cs = new Customer();
                            //if (customer.ExecutiveId == null)
                            //{
                            //    cs.ExecutiveId = 0;
                            //}
                            //else
                            //{
                            //    cs.ExecutiveId = customer.ExecutiveId;
                            //}

                            cs.CustomerId = cust.CustomerId;

                            cs.Warehouseid = wh.WarehouseId;
                            cs.WarehouseName = wh.WarehouseName;
                            cs.CompanyId = cust.CompanyId;
                            cs.CreatedDate = indianTime;
                            cs.UpdatedDate = indianTime;
                            Customers.Add(cs);
                            int id = this.Commit();
                        }
                        else
                        {
                            Customer c = Customers.Where(x => x.CustomerId == cust.CustomerId).FirstOrDefault();
                            c.Warehouseid = wh.WarehouseId;
                            //c.ExecutiveId = customer.ExecutiveId;
                            c.AgentCode = customer.AgentCode;
                            c.WarehouseName = wh.WarehouseName;
                            c.UpdatedDate = indianTime;
                            this.Entry(c).State = EntityState.Modified;
                            this.Commit();
                        }

                    }
                    catch (Exception) { }
                    return cust;
                }
                else
                {
                    customer.Exception = "Already exist number";
                    return customer;
                }
            }




        }

        public bool DeleteCustomer(int id)
        {
            try
            {
                Customer cust = Customers.Where(x => x.CustomerId == id && x.Deleted == false).FirstOrDefault();
                cust.Deleted = true;
                cust.Active = false;
                //Customers.Attach(cust);
                this.Entry(cust).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool Deleteredeemitem(int id)
        {
            try
            {
                RewardItems rewardItems = RewardItemsDb.Where(x => x.rItemId == id && x.IsDeleted == false).FirstOrDefault();
                rewardItems.IsDeleted = true;
                rewardItems.IsActive = false;
                RewardItemsDb.Attach(rewardItems);
                this.Entry(rewardItems).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Project> AllProjects
        {
            get
            {
                if (Projects.AsEnumerable().Count() > 0)
                {
                    return Projects.AsEnumerable();
                }
                else
                {
                    List<Project> project = new List<Project>();
                    return project.AsEnumerable();
                }
            }
        }
        public IEnumerable<Project> AllProjectsbyCompanyId(int cmpid)
        {
            return Projects.Where(c => c.CompanyId == cmpid).AsEnumerable();
        }
        public Project AddProject(Project project)
        {
            List<Project> projects = Projects.Where(c => c.ProjectName.Trim().Equals(project.ProjectName.Trim())).ToList();
            Project objProject = new Project();
            if (projects.Count == 0)
            {
                project.CreatedBy = project.CreatedBy;
                project.CreatedDate = indianTime;
                project.UpdatedDate = indianTime;
                Projects.Add(project);
                int id = this.Commit();
                return project;
            }
            else
            {
                return objProject;
            }
        }
        public Project PutProject(Project project)
        {
            Project proj = Projects.Where(x => x.ProjectID == project.ProjectID).FirstOrDefault();
            if (proj != null)
            {
                proj.UpdatedDate = indianTime;
                proj.ProjectName = project.ProjectName;
                proj.Discription = project.Discription;
                proj.Budget = project.Budget;
                proj.StartDate = project.StartDate;
                proj.EndDate = project.EndDate;
                proj.ApproverEmail = project.ApproverEmail;
                proj.ConsultantRate = project.ConsultantRate;
                proj.EmpRate = project.EmpRate;
                proj.CustomerId = project.CustomerId;
                proj.ApproverName = project.ApproverName;
                proj.CreatedBy = project.CreatedBy;
                proj.UpdateBy = project.UpdateBy;
                Projects.Attach(proj);
                this.Entry(proj).State = EntityState.Modified;
                this.Commit();
                return proj;
            }
            else
            {
                return null;
            }
        }
        public bool DeleteProject(int id)
        {
            try
            {
                Project DL = new Project();
                DL.ProjectID = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<TaskType> AllTaskTypes(int compid)
        {
            return TaskTypes.Where(e => e.CompanyId == compid).AsEnumerable();
        }
        public IEnumerable<TaskType> AllTaskTypesbyCompanyId(int cmpid)
        {
            return TaskTypes.Where(c => c.CompanyId == cmpid).AsEnumerable();
        }
        public TaskType AddTaskType(TaskType tasktype)
        {
            List<TaskType> tasktypes = TaskTypes.Where(c => c.Name.Trim().Equals(tasktype.Name.Trim()) && c.CompanyId == tasktype.CompanyId).ToList();
            TaskType objTaskType = new TaskType();
            if (tasktypes.Count == 0)
            {
                tasktype.CreateBy = tasktype.CreateBy;
                tasktype.CreatedDate = indianTime;
                tasktype.UpdatedDate = indianTime;
                TaskTypes.Add(tasktype);
                int id = this.Commit();
                return tasktype;
            }
            else
            {
                return null;
            }
        }
        public TaskType PutTaskType(TaskType tasktype)
        {
            TaskType task = TaskTypes.Where(x => x.Id == tasktype.Id).FirstOrDefault();
            if (task != null)
            {
                task.UpdatedDate = indianTime;
                task.Name = tasktype.Name;
                task.Category = tasktype.Category;
                task.Desc = tasktype.Desc;
                task.UpdatedBy = tasktype.UpdatedBy;
                TaskTypes.Attach(task);
                this.Entry(task).State = EntityState.Modified;
                this.Commit();
                return task;
            }
            else
            {
                return null;
            }
        }
        public bool DeleteTaskType(int id)
        {
            try
            {
                TaskType DL = new TaskType();
                DL.Id = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Event> AllEvents(int userid)
        {
            return Events.Where(e => e.PeopleID == userid).AsEnumerable();
        }
        public Event AddEvent(Event e)
        {
            try
            {
                Events.Add(e);
                int id = this.Commit();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return e;
        }
        public Event UpdateEvent(Event e)
        {
            throw new NotImplementedException();
        }
        public bool DeleteEvent(int id)
        {
            Event e = Events.Where(c => c.Id == id).SingleOrDefault();
            if (e != null)
            {
                Entry(e).State = EntityState.Deleted;

                Commit();
                return true;
            }
            else
            {
                return false;
            }
        }
        public IEnumerable<ProjectTask> AllProjectTask
        {
            get
            {
                if (ProjectTasks.AsEnumerable().Count() > 0)
                {
                    return ProjectTasks.AsEnumerable();
                }
                else
                {
                    List<ProjectTask> projecttask = new List<ProjectTask>();
                    return projecttask.AsEnumerable();
                }
            }
        }
        public IEnumerable<ProjectTask> AllProjectTaskbyCompanyId(int cmpid)
        {
            return ProjectTasks.Where(c => c.CompanyId == cmpid).AsEnumerable();
        }
        public ProjectTask AddProjectTask(ProjectTask projecttask)
        {
            List<ProjectTask> projecttasks = ProjectTasks.Where(c => c.TaskId.Equals(projecttask.TaskId)).ToList();
            Project prj = Projects.Where(x => x.ProjectID == projecttask.ProjectID).Select(x => x).FirstOrDefault();
            People ppl = Peoples.Where(x => x.PeopleID == projecttask.PeopleID && x.Deleted == false).Select(x => x).FirstOrDefault();
            Customer cust = Customers.Where(x => x.CustomerId == projecttask.CustomerId && x.Deleted == false).Select(x => x).FirstOrDefault();
            ProjectTask objProjectTask = new ProjectTask();

            if (projecttasks.Count == 0)
            {
                projecttask.CreatedBy = projecttask.CreatedBy;
                projecttask.CreatedDate = indianTime;
                projecttask.UpdatedDate = indianTime;
                projecttask.ProjectName = prj.ProjectName;
                projecttask.CustomerName = cust.Name;
                projecttask.PeopleID = ppl.PeopleID;
                ProjectTasks.Add(projecttask);
                int id = this.Commit();
                return projecttask;
            }
            else
            {
                return objProjectTask;
            }

        }
        public ProjectTask PutProjectTask(ProjectTask objCust)
        {
            ProjectTask proj = ProjectTasks.Where(x => x.TaskId == objCust.TaskId).FirstOrDefault();
            Project prj = Projects.Where(x => x.ProjectID == objCust.ProjectID).Select(x => x).FirstOrDefault();
            Customer cust = Customers.Where(x => x.CustomerId == objCust.CustomerId && x.Deleted == false).Select(x => x).FirstOrDefault();
            if (proj != null)
            {
                proj.UpdatedDate = indianTime;
                proj.TaskTypeId = objCust.TaskTypeId;
                proj.AllocatedHours = objCust.AllocatedHours;
                proj.Priority = objCust.Priority;
                proj.Name = objCust.Name;
                proj.StartDate = objCust.StartDate;
                proj.EndDate = objCust.EndDate;
                proj.CustomerId = objCust.CustomerId;
                proj.ProjectID = objCust.ProjectID;
                proj.Assignee = objCust.Assignee;
                proj.ProjectName = prj.ProjectName;
                proj.CustomerName = cust.Name;
                proj.Discription = objCust.Discription;
                proj.CreatedBy = objCust.CreatedBy;
                proj.UpdatedDate = indianTime;
                proj.UpdateBy = objCust.UpdateBy;
                ProjectTasks.Attach(proj);
                this.Entry(proj).State = EntityState.Modified;
                this.Commit();
                return objCust;
            }
            else
            {
                return null;
            }
        }
        public bool DeleteProjectTask(int id)
        {
            try
            {
                ProjectTask DL = new ProjectTask();
                DL.TaskId = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Role> AllRoles(int compid)
        {
            if (UserRole.AsEnumerable().Count() > 0)
            {
                return UserRole.Where(p => p.CompanyId == compid).AsEnumerable();
            }
            else
            {
                List<Role> role = new List<Role>();
                return role.AsEnumerable();
            }
        }

        public bool IsRoleExists(Role role)
        {


            List<Role> roles = UserRole.Where(c => c.RoleTitle.Trim().Equals(role.RoleTitle.Trim())).ToList();
            if (roles.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public Role AddRole(Role role)
        {
            List<Role> roles = UserRole.Where(c => c.RoleTitle.Trim().Equals(role.RoleTitle.Trim())).ToList();
            Role objrole = new Role();
            if (roles.Count == 0)
            {
                role.RoleTitle = role.RoleTitle;
                role.CreatedBy = role.CreatedBy;
                role.CreatedDate = indianTime;
                role.UpdatedDate = indianTime;
                UserRole.Add(role);
                int id = this.Commit();
                return role;
            }
            else
            {
                return objrole;
            }
        }
        public Role PutRoles(Role objrole)
        {

            Role roles = UserRole.Where(x => x.RoleId == objrole.RoleId).FirstOrDefault();
            if (roles != null)
            {
                roles.UpdatedDate = indianTime;
                roles.RoleTitle = objrole.RoleTitle;
                roles.CreatedBy = objrole.CreatedBy;
                roles.CreatedDate = objrole.CreatedDate;
                roles.UpdateBy = objrole.UpdateBy;

                UserRole.Attach(roles);
                this.Entry(roles).State = EntityState.Modified;
                this.Commit();
                return objrole;
            }
            else
            {
                return objrole;
            }
        }
        public bool DeleteRole(int id)
        {
            try
            {
                Role DL = new Role();
                DL.RoleId = id;
                Entry(DL).State = EntityState.Deleted;

                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<People> AllPeoples(int compid)
        {
            if (Peoples.AsEnumerable().Count() > 0)
            {
                List<People> person = new List<People>();
                person = Peoples.Where(e => e.CompanyId == compid && e.Deleted == false).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<People> people = new List<People>();
                return people.AsEnumerable();
            }
        }
        public IEnumerable<People> AllPeoplesWid(int compid, int Warehouse_id)
        {
            if (Peoples.AsEnumerable().Count() > 0)
            {
                List<People> person = new List<People>();
                person = Peoples.Where(e => e.CompanyId == compid && e.Deleted == false && e.WarehouseId == Warehouse_id).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<People> people = new List<People>();
                return people.AsEnumerable();
            }
        }
        public IEnumerable<People> AllPeoplesWidAgent(int compid, int Warehouse_id)
        {
            if (Peoples.AsEnumerable().Count() > 0)
            {
                List<People> person = new List<People>();
                using (var context = new AuthContext())
                {
                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.WarehouseId='" + Warehouse_id + "' and p.CompanyId=" + compid + " and r.Name='Agent' and p.AgentCode != null and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                    person = context.Database.SqlQuery<People>(query).ToList();
                }
                // person = Peoples.Where(e => e.CompanyId == compid && e.Deleted == false && e.WarehouseId == Warehouse_id && e.AgentCode != null && e.Department == "Agent").ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<People> people = new List<People>();
                return people.AsEnumerable();
            }
        }
        public IEnumerable<People> AllPeoplesAgent(int compid)
        {
            if (Peoples.AsEnumerable().Count() > 0)
            {
                List<People> person = new List<People>();
                person = Peoples.Where(e => e.CompanyId == compid && e.Deleted == false && e.AgentCode != null).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<People> people = new List<People>();
                return people.AsEnumerable();
            }
        }
        #region get active All Agent Warehouse Based
        /// <summary>
        /// Created Date 19/04/2019
        /// Created By Raj
        /// </summary>
        /// <param name="compid"></param>
        /// <param name="Warehouse_id"></param>
        /// <returns></returns>
        public IEnumerable<People> AllPeoplesWidActiveAgent(int compid, int Warehouse_id)
        {
            try
            {

                string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email and p.Deleted=0  inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.CompanyId=" + 1 + " and p.WarehouseId=" + Warehouse_id + " and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                List<int> PeopleId = this.Database.SqlQuery<int>(query).ToList();
                var person = Peoples.Where(p => PeopleId.Contains(p.PeopleID)).ToList().OrderBy(x => x.DisplayName).ToList();
                return person;
                //if (Peoples.AsEnumerable().Count() > 0)
                //{
                //    List<People> person = new List<People>();
                //    person = Peoples.Where(e => e.CompanyId == compid && e.Active == true && e.Deleted == false && e.WarehouseId == Warehouse_id && e.AgentCode != null && e.Department == "Agent").ToList();
                //    return person.AsEnumerable();
                //}
                //else
                //{
                //    List<People> people = new List<People>();
                //    return people.AsEnumerable();
                //}
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region get active All Agent 
        /// <summary>
        /// Created Date 19/04/2019
        /// created By Raj
        /// </summary>
        /// <param name="compid"></param>
        /// <returns></returns>
        public IEnumerable<People> AllPeoplesActiveAgent(int compid)
        {
            try
            {
                string query = "select distinct p.PeopleID from People p inner join AspNetUsers u on p.Email=u.Email and p.Deleted=0 inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.CompanyId=" + compid + "  and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                List<int> PeopleId = this.Database.SqlQuery<int>(query).ToList();
                var person = Peoples.Where(p => PeopleId.Contains(p.PeopleID)).ToList().OrderBy(x => x.DisplayName).ToList();
                return person;
                //if (Peoples.AsEnumerable().Count() > 0)
                //{
                //    List<People> person = new List<People>();
                //    person = Peoples.Where(e => e.CompanyId == compid && e.Active == true && e.Deleted == false && e.AgentCode != null).ToList();
                //    return person.AsEnumerable();
                //}
                //else
                //{
                //    List<People> people = new List<People>();
                //    return people.AsEnumerable();
                //}
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion


        public IEnumerable<People> AllPeoplesDep(string dep, int CompanyId)
        {
            if (Peoples.AsEnumerable().Count() > 0)
            {
                List<People> person = new List<People>();
                using (var context = new AuthContext())
                {
                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.CompanyId=" + CompanyId + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                    person = context.Database.SqlQuery<People>(query).ToList();
                }
                // person = Peoples.Where(e => e.Department.Trim().ToLower() == dep.Trim().ToLower() && e.Deleted == false && e.CompanyId == CompanyId).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<People> people = new List<People>();
                return people.AsEnumerable();
            }
        }
        public People AddPeople(People people)
        {
            var identity = User.Identity as ClaimsIdentity;
            int userid = 0;

            if (identity != null && identity.Claims != null && identity.Claims.Any(x => x.Type == "userid"))
                userid = int.Parse(identity.Claims.FirstOrDefault(x => x.Type == "userid").Value);

            List<People> peoples = Peoples.Where(c => c.Email.Trim().Equals(people.Email.Trim()) && c.Deleted == false && c.CompanyId == people.CompanyId).ToList();

            People objPeople = new People();
            if (peoples.Count == 0)
            {
                people.DisplayName = people.PeopleFirstName + " " + people.PeopleLastName;

                people.CreatedBy = people.CreatedBy;
                people.CreatedDate = indianTime;
                people.UpdatedDate = indianTime;
                Peoples.Add(people);
                int id = this.Commit();
                int peopleId = people.PeopleID;
                // for people provide warehouse permission
                if (people.id.Count > 0)
                {
                    foreach (var wh in people.id)
                    {
                        using (var con = new AuthContext())
                        {
                            var wp = new WarehousePermission();
                            wp.WarehouseId = wh;
                            wp.PeopleID = peopleId;
                            wp.IsActive = true;
                            wp.IsDeleted = false;
                            wp.CreatedDate = DateTime.Now;
                            wp.CreatedBy = userid;
                            con.WarehousePermissionDB.Add(wp);
                            con.Commit();
                        }
                    }
                }
                //add  History by raj
                //AddPeopleHistory(people);
                return people;
            }
            else
            {
                return objPeople;
            }
        }
        public People AddPeoplebyAdmin(People people)
        {
            List<People> peoples = Peoples.Where(c => c.Email.Trim().Equals(people.Email.Trim()) && c.Mobile == people.Mobile && c.Deleted == false && c.CompanyId == people.CompanyId).ToList();
            State state = States.Where(x => x.Stateid == people.Stateid && x.Deleted == false).Select(x => x).SingleOrDefault();
            City city = Cities.Where(x => x.Cityid == people.Cityid && x.Deleted == false).Select(x => x).SingleOrDefault();
            People objPeople = new People();
            if (peoples.Count == 0)
            {
                people.DisplayName = people.PeopleFirstName + " " + people.PeopleLastName;
                people.state = state.StateName;
                people.city = city.CityName;
                people.CreatedBy = "Admin";
                people.CreatedDate = indianTime;
                people.UpdatedDate = indianTime;
                people.Active = true;
                people.tempdel = false;
                Peoples.Add(people);
                int id = this.Commit();
                return people;
            }
            else
            {
                return null;
            }
        }
        public People PutPeople(People objCust)
        {
            People proj = Peoples.Where(x => x.PeopleID == objCust.PeopleID && x.Deleted == false && x.CompanyId == objCust.CompanyId).FirstOrDefault();
            if (proj != null)
            {
                proj.UpdatedDate = indianTime;
                proj.PeopleFirstName = objCust.PeopleFirstName;
                proj.PeopleLastName = objCust.PeopleLastName;
                proj.Email = objCust.Email;
                proj.Mobile = objCust.Mobile;
                proj.Department = objCust.Department;
                proj.BillableRate = objCust.BillableRate;
                proj.CostRate = objCust.CostRate;
                // proj.Permissions = objCust.Permissions;
                proj.ImageUrl = objCust.ImageUrl;
                proj.DisplayName = objCust.PeopleFirstName + " " + objCust.PeopleLastName;
                proj.CreatedBy = objCust.CreatedBy;
                proj.CreatedDate = objCust.CreatedDate;
                proj.UpdateBy = objCust.UpdateBy;
                proj.WarehouseId = objCust.WarehouseId;
                proj.Skcode = objCust.Skcode;
                proj.DepositAmount = objCust.DepositAmount;
                //Peoples.Attach(proj);
                this.Entry(proj).State = EntityState.Modified;
                this.Commit();
                return objCust;
            }
            else
            {
                return objCust;
            }
        }

        /// <summary>
        /// This page section to display the Comments
        /// By Danish ---19/04/2019
        /// </summary>
        /// <param name="PeopleID"></param>
        /// <param name="UserName"></param>
        /// <param name="DeleteComment"></param>
        /// <returns></returns>
        public bool DeletePeople(int PeopleID, string UserName, string DeleteComment)
        {
            try
            {
                People projs = new People();
                try
                {
                    projs = Peoples.Where(x => x.PeopleID == PeopleID && x.Deleted == false).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    return false;
                }

                projs.UpdateBy = UserName;
                projs.Deleted = true;
                projs.Active = false;
                projs.DeleteComment = DeleteComment;
                // Peoples.Attach(projs);
                this.Entry(projs).State = EntityState.Modified;
                this.Commit();
                // add History
                //AddPeopleHistory(projs);
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }



        /// <summary>
        /// This page section to display the Re-active people after Deleting people
        /// By Sudhir ---19/04/2019
        /// </summary>
        /// <param name="peopleid"></param>
        /// <returns></returns>
        public bool ActiveDeletedpeoples(int peopleid)
        {
            try
            {
                People cust = new People();
                try
                {
                    cust = Peoples.Where(x => x.PeopleID == peopleid && x.Deleted == true).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    return false;
                }

                cust.Deleted = false;
                cust.Active = true;
                //Peoples.Attach(cust);
                this.Entry(cust).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }

        public People PutPeoplebyAdmin(People objCust)
        {
            People proj = Peoples.Where(x => x.PeopleID == objCust.PeopleID && x.Deleted == false && x.CompanyId == objCust.CompanyId).FirstOrDefault();
            State state = States.Where(x => x.Stateid == objCust.Stateid && x.Deleted == false).Select(x => x).SingleOrDefault();
            City city = Cities.Where(x => x.Cityid == objCust.Cityid && x.Deleted == false).Select(x => x).SingleOrDefault();
            if (proj != null)
            {
                proj.UpdatedDate = indianTime;
                proj.PeopleFirstName = objCust.PeopleFirstName;
                proj.PeopleLastName = objCust.PeopleLastName;
                proj.Email = objCust.Email;
                proj.Password = objCust.Password;
                try
                {
                    proj.state = state.StateName;
                    proj.city = city.CityName;
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
                proj.Mobile = objCust.Mobile;
                proj.Department = objCust.Department;
                proj.BillableRate = objCust.BillableRate;
                proj.Skcode = objCust.Skcode;
                proj.CostRate = objCust.CostRate;
                //proj.Permissions = objCust.Permissions;
                proj.ImageUrl = objCust.ImageUrl;
                proj.DisplayName = objCust.PeopleFirstName + " " + objCust.PeopleLastName;
                proj.CreatedBy = objCust.CreatedBy;
                proj.CreatedDate = objCust.CreatedDate;
                proj.UpdateBy = objCust.UpdateBy;
                proj.EmailConfirmed = objCust.EmailConfirmed;
                proj.WarehouseId = objCust.WarehouseId;
                proj.AgentCode = objCust.AgentCode;
                proj.Salesexecutivetype = objCust.Salesexecutivetype;
                proj.DepositAmount = objCust.DepositAmount;
                proj.Active = true;
                //Peoples.Attach(proj);
                this.Entry(proj).State = EntityState.Modified;
                this.Commit();
                return objCust;
            }
            else
            {
                return objCust;
            }
        }
        public IEnumerable<Company> AllCompanies
        {
            get { return Companies.AsEnumerable(); }
        }
        public Company GetCompanybyCompanyId(int id)
        {
            Company p = this.Companies.Where(c => c.Id == id).SingleOrDefault();
            if (p != null)
            {
            }
            else
            {
                p = new Company();
            }
            return p;
        }
        public Company AddCompany(Company company)
        {
            List<Company> cmp = Companies.Where(c => c.Name.Trim().Equals(company.Name.Trim())).ToList();
            if (cmp.Count == 0)
            {
                company.CreatedBy = "System";
                company.CreatedDate = indianTime;
                company.UpdatedDate = indianTime;
                Companies.Add(company);
                int id = this.Commit();
                return company;
            }
            else
            {
                return cmp[0];
            }
        }
        public Company PutCompany(Company company)
        {
            Company proj = Companies.Where(x => x.Id == company.Id).FirstOrDefault();
            if (proj != null)
            {
                proj.UpdatedDate = indianTime;
                proj.AlertDay = company.AlertDay;
                proj.AlertTime = company.AlertTime;
                proj.FreezeDay = company.FreezeDay;
                proj.TFSUrl = company.TFSUrl;
                proj.TFSUserId = company.TFSUserId;
                proj.TFSPassword = company.TFSPassword;
                proj.LogoUrl = company.LogoUrl;
                proj.Address = company.Address;
                proj.CompanyName = company.CompanyName;
                proj.contactinfo = company.contactinfo;
                proj.currency = company.currency;
                proj.dateformat = company.dateformat;
                proj.fiscalyear = company.fiscalyear;
                proj.startweek = company.startweek;
                proj.timezone = company.timezone;
                proj.Webaddress = company.Webaddress;
                //Companies.Attach(proj);
                this.Entry(proj).State = EntityState.Modified;
                this.Commit();
                return proj;
            }
            else
            {
                return null;
            }
        }
        public bool DeleteCompany(int id)
        {
            throw new NotImplementedException();
        }
        public bool CompanyExists(string companyName)
        {
            List<Company> cmp = Companies.Where(c => c.Name.Trim().Equals(companyName.Trim())).ToList();
            Company objCompany = new Company();
            if (cmp.Count == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        public IEnumerable<CustomerCategory> AllCustomerCategory(int compid)
        {
            if (CustomerCategorys.AsEnumerable().Count() > 0)
            {
                return CustomerCategorys.Where(p => p.CompanyId == compid && p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<CustomerCategory> customercategory = new List<CustomerCategory>();
                return customercategory.AsEnumerable();
            }
        }
        public CustomerCategory AddCustomerCategory(CustomerCategory Cust)
        {
            List<CustomerCategory> customercategorys = CustomerCategorys.Where(c => c.CustomerCategoryName.Trim().Equals(Cust.CustomerCategoryName.Trim()) && c.Deleted == false).ToList();
            CustomerCategory objCustomerCategory = new CustomerCategory();
            if (customercategorys.Count == 0)
            {
                Cust.CreatedBy = Cust.CreatedBy;
                Cust.CreatedDate = indianTime;
                Cust.UpdatedDate = indianTime;
                CustomerCategorys.Add(Cust);
                int id = this.Commit();
                return Cust;
            }
            else
            {
                return objCustomerCategory;
            }
        }
        public CustomerCategory PutCustomerCategory(CustomerCategory Cust)
        {

            CustomerCategory customercategorys = CustomerCategorys.Where(x => x.CustomerCategoryId == Cust.CustomerCategoryId && x.Deleted == false).FirstOrDefault();
            if (customercategorys != null)
            {
                customercategorys.UpdatedDate = indianTime;
                customercategorys.CustomerCategoryName = Cust.CustomerCategoryName;

                customercategorys.CreatedBy = Cust.CreatedBy;
                customercategorys.CreatedDate = Cust.CreatedDate;
                customercategorys.UpdateBy = Cust.UpdateBy;

                CustomerCategorys.Attach(customercategorys);
                this.Entry(customercategorys).State = EntityState.Modified;
                this.Commit();
                return Cust;
            }
            else
            {
                return Cust;
            }
        }
        public bool DeleteCustomerCategory(int id)
        {
            try
            {
                CustomerCategory customercategorys = CustomerCategorys.Where(x => x.CustomerCategoryId == id && x.Deleted == false).FirstOrDefault();
                customercategorys.Deleted = true;
                CustomerCategorys.Attach(customercategorys);
                this.Entry(customercategorys).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Leave> AllLeaves(int compid)
        {
            return Leaves.Where(e => e.CompanyId == compid).AsEnumerable();
        }
        public Leave AddLeave(Leave leave)
        {
            leave.CreatedBy = leave.CreatedBy;
            leave.CreatedDate = indianTime;
            leave.UpdatedDate = indianTime;
            Leaves.Add(leave);
            int id = this.Commit();
            return leave;
        }
        public Leave PutLeave(Leave objCust)
        {
            Leave lve = Leaves.Where(x => x.LeaveID == objCust.LeaveID).FirstOrDefault();
            if (lve != null)
            {
                lve.UpdatedDate = indianTime;
                lve.EmployeeName = objCust.EmployeeName;
                lve.Department = objCust.Department;
                lve.CellNo = objCust.CellNo;
                lve.Reason = objCust.Reason;
                lve.ReasonForAppDec = objCust.ReasonForAppDec;
                lve.IsApprove = objCust.IsApprove;
                lve.Email = objCust.Email;
                lve.CreatedDate = objCust.CreatedDate;
                lve.UpdateBy = objCust.UpdateBy;
                lve.LeaveType = objCust.LeaveType;
                Leaves.Attach(lve);
                this.Entry(lve).State = EntityState.Modified;
                this.Commit();
                return objCust;
            }
            else
            {
                return objCust;
            }
        }
        public bool DeleteLeave(int id)
        {
            try
            {
                Leave DL = new Leave();
                DL.LeaveID = id;
                Entry(DL).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        public IEnumerable<Event> FilteredEvents(DateTime startDate, DateTime endDate)
        {
            List<Event> events = Events.Where(e => e.EventDate <= endDate && e.EventDate >= startDate).ToList();
            return events.AsEnumerable();
        }
        public IEnumerable<Event> FilteredEvents(DateTime startDate, DateTime endDate, int compid)
        {
            List<Event> events = Events.Where(e => e.EventDate <= endDate && e.EventDate >= startDate && e.CompanyId == compid).ToList();
            return events.AsEnumerable();
        }
        public IEnumerable<Event> FilteredEvents(DateTime startDate, DateTime endDate, int userid, int compid)
        {
            List<Event> events = Events.Where(e => e.EventDate <= endDate && e.EventDate >= startDate && e.PeopleID == userid).ToList();
            return events.AsEnumerable();
        }
        public Event UpdateEventByViewModel(DayEventViewModel model, string d, int userid, int compid)
        {
            Event e = new Event();
            switch (d)
            {
                case "d1":
                    {
                        e = this.Events.Where(c => c.Id == model.d1EventId).SingleOrDefault();
                        e.Hours = model.d1;
                        e.UpdatedDate = indianTime;
                        e.TaskType = model.tasktypeid;
                        e.ProjectId = model.projectid;
                        e.ProjectName = model.projectname;
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
            Events.Attach(e);
            this.Entry(e).State = EntityState.Modified;
            this.Commit();
            return e;
        }
        public People getPersonIdfromEmail(string email)
        {
            People ps = new People();
            ps = Peoples.Where(x => x.Deleted == false).Where(p => p.Email.Trim().Equals(email.Trim())).FirstOrDefault();
            int id = 0;
            if (ps != null)
            {
                id = ps.PeopleID;
            }
            return ps;
        }
        public Customer GetClientforProjectId(int projId)
        {
            Project project = Projects.Where(p => p.ProjectID == projId).SingleOrDefault();
            Customer client = Customers.Where(p => p.CustomerId == project.CustomerId).Where(x => x.Deleted == false).SingleOrDefault(); ;
            return client;
        }
        public TaskType GetTaskTypeById(int id)
        {
            TaskType tt = TaskTypes.Where(p => p.Id == id).SingleOrDefault();
            return tt;
        }
        public List<People> GetPeoplebyCompanyId(int id)
        {
            List<People> p = this.Peoples.Where(x => x.Deleted == false && x.CompanyId == id).ToList();
            if (p != null)
            {
            }
            else
            {
                p = new List<People>();
            }
            return p;
        }
        public People GetPeoplebyId(int compid, string email)
        {
            People p = Peoples.Where(x => x.Deleted == false && x.CompanyId == compid && x.Email == email).FirstOrDefault();
            if (p != null)
            {
                string query = "select STRING_AGG(r.Name, ',') roleNames from AspNetUsers u   inner join AspNetUserRoles ur on u.Id = ur.UserId inner join AspNetRoles r on ur.RoleId = r.Id where u.email = '" + p.Email + "' and ur.isActive = 1";
                p.Permissions = this.Database.SqlQuery<string>(query).FirstOrDefault();
            }
            else
            {
                p = new People();
            }
            return p;
        }
        public People GetPeoplebyIdWid(int compid, int Warehouse_id, string email)
        {
            People p = Peoples.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == Warehouse_id && x.Email == email).FirstOrDefault();
            if (p != null)
            {
                string query = "select STRING_AGG(r.Name,  ',') roleNames from AspNetUsers u   inner join AspNetUserRoles ur on u.Id = ur.UserId inner join AspNetRoles r on ur.RoleId = r.Id where u.email = '" + p.Email + "' and ur.isActive = 1";
                p.Permissions = this.Database.SqlQuery<string>(query).FirstOrDefault();
            }
            else
            {
                p = new People();
            }
            return p;
        }
        public List<ProjectTask> AllProjectTaskByuserId(int userid)
        {
            List<ProjectTask> p = this.ProjectTasks.Where(c => c.PeopleID == userid && c.Completed == false).ToList();
            if (p != null)
            {
            }
            else
            {
                p = new List<ProjectTask>();
            }
            return p;
        }
        public ProjectTask GetProjectTaskById(int id)
        {
            ProjectTask p = this.ProjectTasks.Where(c => c.TaskId == id && c.Completed == false).SingleOrDefault();
            return p;
        }
        public AllInvoice AddInvoice(AllInvoice invoice)
        {
            List<AllInvoice> inv = invoices.Where(c => c.id.Equals(invoice.id) && c.CompanyId == invoice.CompanyId).ToList();
            Customer cust = Customers.Where(x => x.CustomerId == invoice.CustomerId && x.Deleted == false).Select(x => x).FirstOrDefault();
            AllInvoice obj = new AllInvoice();
            if (inv.Count == 0)
            {
                invoice.lastdate = indianTime;
                try
                {
                    invoice.Customer = cust.Name;
                    invoices.Add(invoice);
                    int id = this.Commit();
                    return invoice;
                }
                catch
                {
                }
            }
            else
            {
                return null;
            }

            return obj;
        }
        public InvoiceRow AddInvoiceDetail(InvoiceRow e)
        {
            try
            {
                InvoiceRows.Add(e);
                int id = this.Commit();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }
            return e;
        }
        public IEnumerable<Project> AllActiveProjectsbyCompanyId(int cmpid)
        {
            return Projects.Where(c => c.CompanyId == cmpid && c.Status.ToLower().Trim().Equals("active")).AsEnumerable();
        }
        public List<ClientProject> GetAllClientProject()
        {
            List<ClientProject> ClientProjects = new List<ClientProject>();
            try
            {
                foreach (var a in Projects)
                {
                    ClientProject cli = new ClientProject();
                    cli.Id = a.CustomerId;
                    cli.Name = a.ProjectName;
                    ClientProjects.Add(cli);
                }
                return ClientProjects;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public BaseCategory AddBaseCategory(BaseCategory basecat)
        {
            List<BaseCategory> bcat = BaseCategoryDb.Where(c => c.Deleted == false && c.BaseCategoryName.Trim().Equals(basecat.BaseCategoryName.Trim())).ToList();
            BaseCategory objcat = new BaseCategory();
            if (bcat.Count == 0)
            {
                basecat.CreatedDate = indianTime;
                basecat.UpdatedDate = indianTime;
                basecat.IsActive = true;
                basecat.Deleted = false;
                BaseCategoryDb.Add(basecat);
                this.Commit();
                basecat.LogoUrl = "http://137.59.52.130/../../images/basecatimages/" + basecat.BaseCategoryId + ".jpg";
                //BaseCategoryDb.Attach(basecat);
                Entry(basecat).State = EntityState.Modified;
                int id = this.Commit();
                return basecat;
            }
            else
            {
                return objcat;
            }
        }
        public PurchaseOrderMasterRecived AddPurchaseOrderMasterRecived(PurchaseOrderMasterRecived pom)
        {
            pom.CreationDate = indianTime;
            PurchaseOrderMasterRecivedes.Add(pom);
            int id = this.Commit();
            return pom;
        }
        public OrderDispatchedMaster AddOrderDispatchedMaster(OrderDispatchedMaster dm)
        {
            var OD = OrderDispatchedMasters.Where(x => x.OrderId == dm.OrderId && x.CompanyId == dm.CompanyId).Include("orderDetails").SingleOrDefault();
            var OMT = DbOrderMaster.Where(x => x.OrderId == dm.OrderId && x.CompanyId == dm.CompanyId).Include("orderDetails").SingleOrDefault();
            if (OD == null)
            {
                dm.Status = "Ready to Dispatch";
                dm.CreatedDate = indianTime;
                dm.OrderedDate = OMT.CreatedDate;
                OrderDispatchedMasters.Add(dm);
                int id = this.Commit();

                foreach (var a in OMT.orderDetails)
                {
                    a.Status = "Ready to Dispatch";
                    //DbOrderDetails.Attach(a);
                    this.Entry(a).State = EntityState.Modified;
                    this.Commit();
                }
                return dm;
            }
            else { return null; }
        }
        public OrderDispatchedDetails AddOrderDispatchedDetails(OrderDispatchedDetails dd)
        {
            try
            {
                if (dd.OrderDispatchedDetailsId > 0)
                {
                    dd.CreatedDate = indianTime;
                    //OrderDispatchedDetailss.Attach(dd);
                    this.Entry(dd).State = EntityState.Modified;
                    int id = this.Commit();
                }
                else
                {
                    dd.CreatedDate = indianTime;
                    dd.UpdatedDate = indianTime;
                    OrderDispatchedDetailss.Add(dd);
                    int id = this.Commit();
                }
                return dd;
            }
            catch (Exception ex)
            {
                logger.Error("Error:101" + ex.Message);
                return null;
            }
        }

        public OrderDispatchedDetails AddOrderDispatchedDetailsV1(OrderDispatchedDetails dd)
        {

            if (dd.OrderDispatchedDetailsId > 0)
            {
                dd.CreatedDate = indianTime;
                //OrderDispatchedDetailss.Attach(dd);
                this.Entry(dd).State = EntityState.Modified;
                //int id = this.SaveChanges();
            }
            else
            {
                dd.CreatedDate = indianTime;
                OrderDispatchedDetailss.Add(dd);
                //int id = this.SaveChanges();
            }
            return dd;

        }

        public ReturnOrderDispatchedDetails AddReturnOrderDispatchedDetails(ReturnOrderDispatchedDetails dd)
        {
            dd.CreatedDate = indianTime;
            ReturnOrderDispatchedDetailsDb.Add(dd);
            int id = this.Commit();
            return dd;
        }
        public IEnumerable<OrderDispatchedDetails> AllPOrderDispatchedDetails(int i, int compid)
        {
            return OrderDispatchedDetailss.Where(c => c.OrderId == i && c.CompanyId == compid).AsEnumerable();

        }
        public IEnumerable<FinalOrderDispatchedDetails> AllFOrderDispatchedDetails(int i, int compid)
        {
            return FinalOrderDispatchedDetailsDb.Where(c => c.OrderId == i && c.CompanyId == compid).AsEnumerable();
        }
        public List<OrderDispatchedDetailsFinalController.filtered> AllFOrderDispatchedReportDetails(DateTime datefrom, DateTime dateto, int compid)
        {
            List<FinalOrderDispatchedDetails> filterlist2 = new List<FinalOrderDispatchedDetails>();
            filterlist2 = FinalOrderDispatchedDetailsDb.Where(x => x.OrderDate > datefrom && x.OrderDate < dateto && x.CompanyId == compid).ToList();
            var uniqdatelist = filterlist2.GroupBy(od => od.OrderDate).Select(g => g.First()).ToList();
            List<OrderDispatchedDetailsFinalController.filtered> newlist = new List<OrderDispatchedDetailsFinalController.filtered>();
            foreach (var date in uniqdatelist)
            {
                OrderDispatchedDetailsFinalController.filtered fdata = new OrderDispatchedDetailsFinalController.filtered();
                fdata.OrderDate = date.OrderDate;
                fdata.lst = new List<FinalOrderDispatchedDetails>();
                var sumtotal = 0.0;
                var sumtax = 0.0;
                var sumdisc = 0.0;
                var sumtaxafter = 0.0;
                foreach (var order in filterlist2)
                {
                    if (order.OrderDate.ToString("MM/dd/yyyy") == date.OrderDate.ToString("MM/dd/yyyy"))
                    {
                        sumtotal = sumtotal + order.TotalAmt;
                        sumtax = sumtax + order.TaxAmmount;
                        sumtaxafter = sumtaxafter + order.FinalTaxAmountAfter;
                        sumdisc = sumdisc + order.AmtWithoutTaxDisc;
                        order.FinalTaxAmount = sumtax;
                        order.SumtotalPrice = sumtotal;
                        fdata.lst.Add(order);
                    }
                }
                fdata.priceTotaltotal = sumtotal;
                fdata.TaxAftertotal = sumtaxafter;
                fdata.Taxtotal = sumtax;
                newlist.Add(fdata);
            }
            return newlist;
        }
        public List<OrderDispatchedMaster> AllFOrderDispatchedDeliveryDetails(DateTime datefrom, DateTime dateto, int compid)
        {
            List<OrderDispatchedMaster> filterlist2 = new List<OrderDispatchedMaster>();
            filterlist2 = OrderDispatchedMasters.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto && x.CompanyId == compid).Include("orderDetails").ToList();
            var uniqdatelist = filterlist2.GroupBy(od => od.DboyMobileNo).Select(g => g.First()).ToList();
            return uniqdatelist;
        }
        public List<OrderDispatchedMaster> AllFOrderDispatchedDeliveryBoyDetails(DateTime datefrom, DateTime dateto, string DboyName, int compid)
        {
            List<OrderDispatchedMaster> filterlist2 = new List<OrderDispatchedMaster>();
            filterlist2 = OrderDispatchedMasters.Where(x => x.CreatedDate > datefrom && x.CreatedDate < dateto && x.DboyName == DboyName && x.CompanyId == compid).Include("orderDetails").ToList();
            return filterlist2;
        }

        #region Message

        public IEnumerable<Message> GetAllMessage()
        {
            if (DbMessage.AsEnumerable().Count() > 0)
            {
                List<Message> message = new List<Message>();
                message = DbMessage.ToList();
                return message.AsEnumerable();
            }
            else
            {
                List<Message> message = new List<Message>();
                return message.AsEnumerable();
            }
        }
        public Message GetMessagebyId(int id)
        {
            Message message = this.DbMessage.Where(c => c.MessageId == id).SingleOrDefault();
            if (message != null)
            {
                return null;
            }
            else
            {
                message = new Message();
            }
            return message;
        }
        public Message AddMessage(Message message)
        {
            List<Message> messageList = DbMessage.Where(c => c.MessageId.Equals(message.MessageId)).ToList();
            if (messageList.Count == 0)
            {
                message.CreatedDate = indianTime;
                message.UpdatedDate = indianTime;
                DbMessage.Add(message);
                int id = this.Commit();
                return message;
            }
            else
            {
                Message Messageobj = new Message();
                return Messageobj;
            }
        }
        public Message PutMessage(Message obj)
        {
            logger.Info("put Message: ");
            try
            {
                Message message = DbMessage.Where(x => x.MessageId == obj.MessageId).FirstOrDefault();
                if (message != null)
                {
                    message.MessageType = obj.MessageType;
                    message.MessageTitle = obj.MessageTitle;
                    message.MessageText = obj.MessageText;

                    message.UpdatedDate = indianTime;
                    DbMessage.Attach(message);
                    this.Entry(message).State = EntityState.Modified;
                    this.Commit();
                    return obj;
                }
                else
                {
                    logger.Error("This Message is not Found int put " + obj.MessageTitle);
                    return obj;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put Message " + ex.Message);
            }
            return null;
        }
        public bool DeleteMessage(int id)
        {
            try
            {
                Message message = DbMessage.Where(x => x.MessageId == id).SingleOrDefault();

                DbMessage.Attach(message);
                Entry(message).State = EntityState.Deleted;
                Commit();

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return false;
            }
        }
        #endregion
        public PurchaseOrderMaster addPurchaseOrderMaster(List<TempPO> OBJ)
        {
            if (OBJ != null)
            {
                People buyer = new People();
                Supplier supplier1;
                PurchaseOrderMaster pmm = new PurchaseOrderMaster();
                foreach (var x in OBJ)
                {
                    try
                    {
                        supplier1 = Suppliers.Where(s => s.SupplierId == x.SupplierId).SingleOrDefault();
                        buyer = Peoples.Where(a => a.PeopleID == supplier1.PeopleID).SingleOrDefault();
                    }
                    catch (Exception ex)
                    {

                    }
                    double ETtlamt = 0;

                    #region get Estimate amount
                    /// Get Estimate amount
                    foreach (var data in x.Purchases)
                    {
                        try
                        {
                            //var item1 = itemMasters.Where(z => z.PurchaseSku == z.PurchaseSku).FirstOrDefault();
                            var item1 = DbOrderDetails.Where(z => z.OrderDetailsId == data.OrderDetailsId && z.ItemId == data.ItemId).FirstOrDefault();

                            int qty = Convert.ToInt32(data.finalqty * data.conversionfactor);


                            ETtlamt += Convert.ToDouble(item1.Purchaseprice * qty);


                            //ETtlamt += Convert.ToDouble(item1.PurchasePrice * qty);
                        }
                        catch (Exception ex) { }
                    }
                    #endregion

                    People p = Peoples.Where(q => q.PeopleID == x.userid).SingleOrDefault();
                    var warehouse = Warehouses.Where(a => a.WarehouseId == x.WareHouseId).SingleOrDefault();
                    pmm.SupplierId = x.SupplierId.GetValueOrDefault();
                    pmm.SupplierName = x.SupplierName;
                    pmm.WarehouseId = x.WareHouseId;
                    pmm.WarehouseName = warehouse.WarehouseName;
                    pmm.WarehouseCity = warehouse.CityName;
                    pmm.ETotalAmount = x.EtotalAmt;
                    pmm.CompanyId = x.CompanyId;
                    pmm.PoType = "Automated";
                    pmm.CreationDate = indianTime;
                    pmm.Status = "pending";
                    pmm.DepoId = x.DepoId;
                    pmm.DepoName = x.DepoName;
                    pmm.IsLock = true;
                    try
                    {
                        pmm.BuyerId = buyer.PeopleID;
                        pmm.BuyerName = buyer.DisplayName;
                    }
                    catch (Exception sdf) { }
                    pmm.Acitve = true;
                    pmm.CreatedBy = p.PeopleFirstName + " " + p.PeopleLastName;
                    DPurchaseOrderMaster.Add(pmm);

                    int id = this.Commit();

                    foreach (var a in x.Purchases)
                    {

                        //var item = itemMasters.Where(z => z.PurchaseSku == a.PurchaseSku).FirstOrDefault();
                        var item = itemMasters.Where(z => z.PurchaseSku == a.PurchaseSku && z.WarehouseId == a.WareHouseId && z.ItemId == a.ItemId).FirstOrDefault();

                        PurchaseOrderDetail pd = new PurchaseOrderDetail();
                        pd.PurchaseOrderId = pmm.PurchaseOrderId;
                        pd.ItemId = a.ItemId.GetValueOrDefault();
                        pd.ItemMultiMRPId = a.ItemMultiMRPId;//for multimrp
                        pd.ItemName = a.ItemName;
                        pd.TotalQuantity = int.Parse(a.qty.ToString());
                        pd.CreationDate = indianTime;
                        pd.Status = "ordered";
                        pmm.WarehouseName = a.WareHouseName;
                        pd.MOQ = item.PurchaseMinOrderQty;
                        pd.itemBaseName = item.itemBaseName;
                        pd.ItemNumber = item.Number;
                        //pd.Price = Convert.ToDouble(a.Price);  this is show the purchase price not a mrp that why hide.
                        // pd.Price = Convert.ToDouble(a.NetPurchasePrice); //add new Field Purchase Price by raj

                        if (item.POPurchasePrice == null || item.POPurchasePrice == 0)
                        {
                            pd.Price = Math.Round(item.NetPurchasePrice * (1 + (item.TotalTaxPercentage / 100)), 3); //With tax net purchase price add by raj   
                        }
                        else
                        {
                            pd.Price = item.POPurchasePrice ?? 0;
                        }
                        pd.WarehouseId = a.WareHouseId;
                        pd.CompanyId = a.CompanyId;
                        pd.WarehouseName = a.WareHouseName;
                        pd.SupplierId = a.SupplierId.GetValueOrDefault();
                        pd.SupplierName = a.Supplier;
                        pd.TotalQuantity = Convert.ToInt32(a.qty);
                        pd.PurchaseName = a.name;
                        pd.PurchaseSku = a.PurchaseSku;
                        pd.ConversionFactor = Convert.ToInt32(a.conversionfactor);
                        pd.DepoId = a.DepoId;
                        pd.DepoName = a.DepoName;
                        pd.PurchaseQty = a.finalqty;
                        pd.MRP = a.Price;
                        DPurchaseOrderDeatil.Add(pd);
                        int idd = this.Commit();
                        #region PO History
                        try
                        {
                            POHistory Ph = new POHistory();
                            var UserName = Peoples.Where(y => y.PeopleID == x.userid).Select(b => b.DisplayName).SingleOrDefault();
                            // int poid = DPurchaseOrderDeatil.Where(y => y.ItemId ==pid).Select(b => b.PurchaseOrderId).;
                            var stock = DbCurrentStock.Where(z => z.itemname == a.ItemName && z.WarehouseId == a.WareHouseId && z.ItemMultiMRPId == item.ItemMultiMRPId).SingleOrDefault();


                            Ph.PurchaseOrderId = pd.PurchaseOrderId;

                            //Ph.CurrentStock =a.currentinventory;
                            Ph.Status = "Pending";
                            Ph.WarehouseName = item.WarehouseName;
                            Ph.EditBy = UserName;
                            Ph.UpdatedDate = DateTime.Now;
                            POHistoryDB.Add(Ph);
                            int ph1 = this.Commit();
                            int pp = pd.PurchaseOrderId;

                            PoEditItemHistory PIh = new PoEditItemHistory();
                            PIh.PurchaseOrderId = pp;
                            PIh.ItemName = item.itemname;
                            PIh.SupplierName = item.SupplierName;

                            PIh.status = "Purchase Item";
                            PIh.NOOfPieces = a.finalqty * a.conversionfactor;
                            PIh.CurrentStock = a.currentinventory;
                            PIh.oldprice = Convert.ToDouble(a.Price);
                            PIh.newprice = Convert.ToDouble(a.Price);
                            PIh.ItemNumber = stock.ItemNumber;
                            PoEditItemHistoryDB.Add(PIh);
                            int PIh1 = this.Commit();

                        }
                        catch (Exception ex)
                        {

                        }
                        #endregion PO History
                    }
                    #region level allocation
                    PoApproval get_approvalz = PoApprovalDB.Where(a => a.AmountlmtMin <= ETtlamt && a.AmountlmtMax >= ETtlamt && a.Warehouseid == x.WareHouseId).FirstOrDefault();
                    if (get_approvalz != null)
                    {
                        if (get_approvalz.Level == "Level1")  /// Self Approved
                        {
                            PurchaseOrderMaster pm = DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pmm.PurchaseOrderId).SingleOrDefault();
                            pm.Status = "Self Approved";
                            pm.progress = "50";
                            pm.Level = get_approvalz.Level;
                            pm.Approval1 = 0;
                            pm.Approval2 = 0;
                            pm.Approval3 = 0;
                            pm.Approval4 = 0;
                            pm.Approval5 = 0;
                            pm.ApprovalName1 = pm.CreatedBy;
                            pm.Rewiever1 = 0;
                            pm.Rewiever2 = 0;
                            pm.Rewiever3 = 0;
                            pm.Rewiever4 = 0;
                            pm.Rewiever5 = 0;
                            pm.ApprovedBy = pm.CreatedBy;
                            this.Entry(pm).State = EntityState.Modified;
                            this.Commit();
                        }
                        else /// Send for approval
                        {
                            /// Send Approved 
                            PurchaseOrderMaster pm = DPurchaseOrderMaster.Where(a => a.PurchaseOrderId == pmm.PurchaseOrderId).SingleOrDefault();
                            pm.Status = "Send for Approval";
                            pm.Approval1 = get_approvalz.Approval1;
                            pm.Approval2 = get_approvalz.Approval2;
                            pm.Approval3 = get_approvalz.Approval3;
                            pm.Approval4 = get_approvalz.Approval4;
                            pm.Approval5 = get_approvalz.Approval5;
                            pm.Rewiever1 = get_approvalz.Reviewer1;
                            pm.Rewiever2 = get_approvalz.Reviewer2;
                            pm.Rewiever3 = get_approvalz.Reviewer3;
                            pm.Rewiever4 = get_approvalz.Reviewer4;
                            pm.Rewiever5 = get_approvalz.Reviewer5;
                            pm.ApprovalName1 = get_approvalz.ApprovalName1;
                            pm.ApprovalName2 = get_approvalz.ApprovalName2;
                            pm.ApprovalName3 = get_approvalz.ApprovalName3;
                            pm.ApprovalName4 = get_approvalz.ApprovalName4;
                            pm.ApprovalName5 = get_approvalz.ApprovalName5;
                            pm.RewieverName1 = get_approvalz.ReviewerName1;
                            pm.RewieverName2 = get_approvalz.ReviewerName2;
                            pm.RewieverName3 = get_approvalz.ReviewerName3;
                            pm.RewieverName4 = get_approvalz.ReviewerName4;
                            pm.RewieverName5 = get_approvalz.ReviewerName5;
                            pm.progress = "20";
                            pm.Level = get_approvalz.Level;
                            this.Entry(pm).State = EntityState.Modified;
                            this.Commit();
                            Sms s = new Sms();

                            //ShopKirana PR id: {#var#} are waiting for your approval.
                            // string msg = "ShopKirana PR id: " + pm.PurchaseOrderId + " is waiting for your approval. ShopKirana";
                            string msg = ""; //"ShopKirana PR id: {#var#} is waiting for your approval. ShopKirana";
                            var dltSMS = SMSTemplateHelper.getTemplateText((int)AppEnum.Others, "PR_Waitng_Approval");
                            msg = dltSMS == null ? "" : dltSMS.Template;
                            msg = msg.Replace("{#var#}", pm.PurchaseOrderId.ToString());

                            string Mob = Peoples.Where(q => q.PeopleID == get_approvalz.Approval1).Select(q => q.Mobile).SingleOrDefault();
                            if (dltSMS != null)
                                s.sendOtp(Mob, msg, dltSMS.DLTId);
                        }
                    }
                    #endregion
                }
                return pmm;
            }
            return null;
        }
        public CurrentStock addCurrentStock(CurrentStock stock)
        {
            DbCurrentStock.Add(stock);
            int id = this.Commit();
            return null;
        }
        public CurrentStockHistory PutCurrentStock(CurrentStockHistory CurrentStockHistory)
        {

            var UserName = Peoples.Where(x => x.PeopleID == CurrentStockHistory.userid).Select(a => a.DisplayName).SingleOrDefault();
            CurrentStockHistory csht = CurrentStockHistoryDb.Where(x => x.StockId == CurrentStockHistory.StockId && x.Deleted == false).FirstOrDefault();
            CurrentStock cst = DbCurrentStock.Where(x => x.StockId == CurrentStockHistory.StockId && x.Deleted == false).FirstOrDefault();
            Warehouse whdata = Warehouses.Where(z => z.WarehouseId == cst.WarehouseId).FirstOrDefault();
            if (csht != null)
            {
                csht.updationDate = indianTime;
                csht.CurrentInventory = CurrentStockHistory.CurrentInventory;
                csht.UserName = UserName;
                csht.userid = CurrentStockHistory.userid;
                csht.TotalInventory = CurrentStockHistory.CurrentInventory;

                if (cst.CurrentInventory < csht.CurrentInventory)
                {
                    csht.ManualInventoryIn = csht.CurrentInventory - cst.CurrentInventory;
                }
                else
                {
                    csht.ManualInventoryIn = csht.CurrentInventory - cst.CurrentInventory;
                }
                csht.ManualReason = CurrentStockHistory.ManualReason;

                csht.CreationDate = indianTime;
                CurrentStockHistoryDb.Add(csht);
                int id = this.Commit();
                if (cst != null)
                {
                    int CurrentInventory = cst.CurrentInventory;//current inventory
                    int ManualUpdateInventory = CurrentStockHistory.CurrentInventory - cst.CurrentInventory;// New Added Inventory

                    cst.UpdatedDate = indianTime;
                    cst.CurrentInventory = CurrentStockHistory.CurrentInventory;
                    //DbCurrentStock.Attach(cst);
                    cst.ManualReason = CurrentStockHistory.ManualReason;

                    this.Entry(cst).State = EntityState.Modified;
                    this.Commit();
                    try
                    {
                        cst.CityName = whdata.CityName;
                        cst.CityId = whdata.Cityid;
                        SendMailManualInventory(CurrentInventory, ManualUpdateInventory, UserName, cst);
                    }
                    catch (Exception ss)
                    {
                    }
                }

            }
            else
            {
                CurrentStockHistory csht2 = new CurrentStockHistory();
                csht2.updationDate = indianTime;
                csht2.CurrentInventory = CurrentStockHistory.CurrentInventory;
                csht2.TotalInventory = CurrentStockHistory.CurrentInventory;
                csht2.ManualInventoryIn = csht2.CurrentInventory;
                csht2.ManualReason = CurrentStockHistory.ManualReason;
                csht2.CreationDate = indianTime;
                CurrentStockHistoryDb.Add(csht2);
                int id = this.Commit();

                //CurrentStockHistoryDb.Attach(csht);
                //this.Entry(csht).State = EntityState.Modified;
                //this.SaveChanges();

                // CurrentStock cst = DbCurrentStock.Where(x => x.StockId == CurrentStockHistory.StockId && x.Deleted == false).FirstOrDefault();
                if (cst != null)
                {
                    cst.UpdatedDate = indianTime;
                    cst.CurrentInventory = CurrentStockHistory.CurrentInventory;
                    //DbCurrentStock.Attach(cst);
                    this.Entry(cst).State = EntityState.Modified;
                    this.Commit();
                }
                //  return null;
            }
            return CurrentStockHistory;
        }


        #region Slider
        public List<Slider> GetAllSlider()
        {
            if (SliderDb.AsEnumerable().Count() > 0)
            {
                List<Slider> SliderList = new List<Slider>();
                SliderList = SliderDb.ToList();
                return SliderList;
            }
            else
            {
                List<Slider> SliderList = new List<Slider>();
                return SliderList;
            }
        }
        public Slider GetBySliderId(int id)
        {
            Slider Slider = this.SliderDb.Where(c => c.SliderId == id).SingleOrDefault();
            if (Slider != null)
            {
                return null;
            }
            else
            {
                Slider = new Slider();
            }
            return Slider;
        }
        public Slider AddSlider(Slider slider)
        {
            List<Slider> sliderList = SliderDb.Where(c => c.SliderId.Equals(slider.SliderId)).ToList();
            if (sliderList.Count == 0)
            {
                slider.CreatedDate = indianTime;
                slider.UpdatedDate = indianTime;
                SliderDb.Add(slider);
                int id = this.Commit();
                return slider;
            }
            else
            {
                Slider objslider = new Slider();
                return objslider;
            }
        }
        public Slider PutSlider(Slider obj)
        {
            logger.Info("put Slider: ");
            try
            {
                Slider slider = SliderDb.Where(x => x.SliderId == obj.SliderId).FirstOrDefault();
                if (slider != null)
                {
                    slider.Type = obj.Type;
                    slider.Pic = obj.Pic;
                    slider.UpdatedDate = indianTime;
                    SliderDb.Attach(slider);
                    this.Entry(slider).State = EntityState.Modified;
                    this.Commit();
                    return obj;
                }
                else
                {
                    logger.Error("This Slider is not Found int put " + obj.SliderId);
                    return obj;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put Slider " + ex.Message);
            }
            return null;
        }
        public bool DeleteSlider(int id)
        {
            logger.Info("delete Slider auth");
            try
            {
                Slider Slider = SliderDb.Where(x => x.SliderId == id).SingleOrDefault();
                SliderDb.Attach(Slider);
                Entry(Slider).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch (Exception ex)
            {
                logger.Info("error in deleting slider " + ex);
                return false;
            }
        }
        #endregion
        public IEnumerable<ReturnOrderDispatchedDetails> AllReturnOrderDispatchedDetails(int i, int compid)
        {
            return ReturnOrderDispatchedDetailsDb.Where(c => c.OrderId == i && c.CompanyId == compid).AsEnumerable();
        }
        public OrderDispatchedMaster UpdateOrderDispatchedMaster(OrderDispatchedMaster om)
        {
            logger.Info("put OrderDispatch Master: ");
            try
            {
                if (om != null)
                {
                    int count = 1;
                    om.ReDispatchCount = om.ReDispatchCount + count;
                    om.UpdatedDate = indianTime;
                    //OrderDispatchedMasters.Attach(om);
                    this.Entry(om).State = EntityState.Modified;
                    this.Commit();
                    return om;
                }
                else
                {
                    logger.Error("This Slider is not Found int put " + om.OrderDispatchedMasterId);
                    return om;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put Order Dispatch master " + ex.Message);
            }
            return null;
        }

        public IEnumerable<BillPramotion> AllBillPramtion(int compid)
        {
            return BillPramotions.Where(c => c.Deleted == false && c.CompanyId == compid).AsEnumerable();
        }
        public BillPramotion AddBillPramtion(BillPramotion pramtion)
        {
            List<BillPramotion> bcat = BillPramotions.Where(c => c.Deleted == false && c.title.Trim().Equals(pramtion.title.Trim()) && c.CompanyId == pramtion.CompanyId).ToList();
            BaseCategory objcat = new BaseCategory();
            if (bcat.Count == 0)
            {

                pramtion.CreatedDate = indianTime;
                pramtion.UpdatedDate = indianTime;
                BillPramotions.Add(pramtion);
                int id = this.Commit();
                return pramtion;
            }
            else
            {
                return bcat[0];
            }
        }
        public BillPramotion PutBillPramtion(BillPramotion pramtion)
        {
            BillPramotion bcat = BillPramotions.Where(c => c.PramotionId == pramtion.PramotionId).SingleOrDefault();
            if (bcat != null)
            {
                bcat.title = pramtion.title;
                bcat.Description = pramtion.Description;
                bcat.StartDate = pramtion.StartDate;
                bcat.EndDate = pramtion.EndDate;
                bcat.UpdatedDate = indianTime;
                return bcat;
            }
            else
            {
                BillPramotion pr = new BillPramotion();
                return pr;
            }
        }
        public bool DeleteBillPramtion(int id)
        {
            try
            {
                BillPramotion bcat = BillPramotions.Where(c => c.PramotionId == id).SingleOrDefault();
                if (bcat != null)
                {
                    BillPramotions.Attach(bcat);
                    this.Entry(bcat).State = EntityState.Modified;
                    this.Commit();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public List<SubsubCategory> PramotionalBrand(int warehouseid, int compid)
        {
            List<SubsubCategory> subcat = new List<SubsubCategory>();
            subcat = SubsubCategorys.Where(w => w.Deleted == false && w.IsPramotional == true).ToList();
            return subcat;
        }
        #region GetAllNotificationByCustomerId
        public List<DeviceNotification> GetAllNotificationByCustomerId()
        {
            if (NotificationByDeviceIdDb.AsEnumerable().Count() > 0)
            {
                List<DeviceNotification> td = new List<DeviceNotification>();
                td = DeviceNotificationDb.ToList();
                return td;
            }
            else
            {
                List<DeviceNotification> td = new List<DeviceNotification>();
                return td;
            }
        }
        #endregion
        #region
        //public List<DeviceNotification> GetAllNotification(int compid)
        //{
        //    if (NotificationDb.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
        //    {
        //        List<DeviceNotification> td = new List<DeviceNotification>();
        //        td = DeviceNotificationDb.ToList();
        //        return td;
        //    }
        //    else
        //    {
        //        List<DeviceNotification> td = new List<DeviceNotification>();
        //        return td;
        //    }
        //}
        public PaggingNotiByDevice GetAllNotification(int list, int page)
        {
            List<DeviceNotification> newdata = new List<DeviceNotification>();
            var listOrders = DeviceNotificationDb.Where(x => x.Deleted == false).OrderByDescending(x => x.NotificationTime).Skip((page - 1) * list).Take(list).ToList();
            newdata = listOrders;
            PaggingNotiByDevice obj = new PaggingNotiByDevice();
            obj.total_count = DeviceNotificationDb.Where(x => x.Deleted == false).Count();
            obj.notidevice = newdata;
            return obj;

        }

        public Notification AddNotification(Notification notify)
        {
            var dddd = NotificationDb.Where(c => c.Id.Equals(notify.Id)).ToList();
            List<Notification> notifyList = NotificationDb.Where(c => c.Id.Equals(notify.Id)).ToList();

            if (notifyList.Count == 0)
            {
                // To get distinct list of notification save send-time of notification 
                notify.NotificationTime = indianTime;
                NotificationDb.Add(notify);
                int id = this.Commit();
                return notify;

            }
            else
            {
                Notification objdt = new Notification();
                return objdt;
            }
        }

        #endregion
        #region
        public List<DeviceNotification> GetAllDeviceNotification(int compid)
        {
            if (DeviceNotificationDb.Where(x => x.CompanyId == compid).AsEnumerable().Count() > 0)
            {
                List<DeviceNotification> DeviceNotificationList = new List<DeviceNotification>();
                DeviceNotificationList = DeviceNotificationDb.Where(x => x.CompanyId == compid).ToList();
                return DeviceNotificationList;
            }
            else
            {
                List<DeviceNotification> DeviceNotificationList = new List<DeviceNotification>();
                return DeviceNotificationList;
            }
        }


        public bool GetAllDeviceNotification(string RegId, string imei, int compid)
        {
            DeviceNotification data1 = DeviceNotificationDb.Where(r => r.DeviceId == RegId && r.CompanyId == compid).FirstOrDefault();

            var data = DeviceNotificationDb.Where(r => r.DeviceId == RegId && r.CompanyId == compid).FirstOrDefault();
            if (data == null)
            {
                DeviceNotification devicenotification = new DeviceNotification();
                devicenotification.DeviceId = RegId;

                DeviceNotificationDb.Add(devicenotification);
                int id = this.Commit();

                return true;
            }

            else
            {
                //data.UpdatedDate = indianTime;
                DeviceNotificationDb.Attach(data);
                this.Entry(data).State = EntityState.Modified;
                this.Commit();

                return true;
            }
        }

        public DeviceNotification GetByDeviceNotificationId(int id, int compid)
        {
            DeviceNotification deviceNotifications = this.DeviceNotificationDb.Where(c => c.Id == id && c.CompanyId == compid).SingleOrDefault();
            if (deviceNotifications != null)
            {
                return null;
            }
            else
            {
                deviceNotifications = new DeviceNotification();
            }
            return deviceNotifications;
        }
        public DeviceNotification AddDeviceNotification(DeviceNotification devicenotification)
        {
            List<DeviceNotification> devicenotificationList = DeviceNotificationDb.Where(c => c.Id.Equals(devicenotification.Id) && c.CompanyId == devicenotification.CompanyId).ToList();
            if (devicenotificationList.Count == 0)
            {

                DeviceNotificationDb.Add(devicenotification);
                int id = this.Commit();
                return devicenotification;
            }
            else
            {
                DeviceNotification objDeviceNotification = new DeviceNotification();
                return objDeviceNotification;
            }
        }
        public DeviceNotification PutDeviceNotification(DeviceNotification obj)
        {
            logger.Info("put DeviceNotification: ");
            try
            {
                DeviceNotification deviceNotification = DeviceNotificationDb.Where(x => x.Id == obj.Id).FirstOrDefault();
                if (deviceNotification != null)
                {
                    deviceNotification.DeviceId = obj.DeviceId;
                    //deviceNotification.CreatedDate = indianTime;
                    //deviceNotification.UpdatedDate = indianTime;
                    DeviceNotificationDb.Attach(deviceNotification);
                    this.Entry(deviceNotification).State = EntityState.Modified;
                    this.Commit();
                    return obj;
                }
                else
                {
                    logger.Error("This DeviceId is not Found int put " + obj.DeviceId);
                    return obj;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put DeviceNotification " + ex.Message);
            }
            return null;
        }
        public bool DeleteDeviceNotification(int id, int compid)
        {
            try
            {
                DeviceNotification deviceNotifications = DeviceNotificationDb.Where(x => x.Id == id && x.CompanyId == compid).SingleOrDefault();
                DeviceNotificationDb.Attach(deviceNotifications);
                Entry(deviceNotifications).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion
        #region
        public List<GroupNotification> GetAllGroupNotification()
        {
            if (GroupNotificationDb.AsEnumerable().Count() > 0)
            {
                List<GroupNotification> StoreList = new List<GroupNotification>();
                StoreList = GroupNotificationDb.ToList();
                return StoreList;
            }
            else
            {
                List<GroupNotification> StoreList = new List<GroupNotification>();
                return StoreList;
            }
        }

        public GroupNotification AddGroupNotification(GroupNotification store)
        {
            List<GroupNotification> storeList = GroupNotificationDb.Where(c => c.Id.Equals(store.Id)).ToList();
            if (storeList.Count == 0)
            {
                // store.GroupCreationTime = indianTime;

                GroupNotificationDb.Add(store);
                int id = this.Commit();
                return store;

            }
            else
            {
                GroupNotification objdt = new GroupNotification();
                return objdt;
            }
        }
        //public GroupNotification PutGroupNotification(GroupNotification obj)
        //{
        //    logger.Info("put Store: ");
        //    try
        //    {
        //        GroupNotification store = SourceDb.Where(x => x.SourceId == obj.SourceId).FirstOrDefault();
        //        if (store != null)
        //        {
        //            store.SourceName = obj.SourceName;
        //            store.Address = obj.Address;
        //            store.ContactNumber = obj.ContactNumber;
        //            store.Email = obj.Email;


        //            SourceDb.Attach(store);
        //            this.Entry(store).State = EntityState.Modified;
        //            this.SaveChanges();
        //            return obj;
        //        }
        //        else
        //        {
        //            logger.Error("This Slider is not Found int put " + obj.SourceId);
        //            return obj;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Error("Error in put Slider " + ex.Message);
        //    }
        //    return null;
        //}
        public bool DeleteGroupNotification(int id)
        {
            logger.Info("delete Slider auth");
            try
            {
                GroupNotification store = GroupNotificationDb.Where(x => x.Id == id).SingleOrDefault();
                GroupNotificationDb.Attach(store);
                Entry(store).State = EntityState.Deleted;
                Commit();
                return true;
            }
            catch (Exception ex)
            {
                logger.Info("error in deleting Store " + ex);
                return false;
            }
        }
        #endregion
        #region get order data order settle page
        public PaggingData AllDispatchedOrderMasterPaging(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int? OrderId, int compid)
        {
            List<OrderDispatchedMaster> newdata = new List<OrderDispatchedMaster>();
            if (OrderDispatchedMasters.AsEnumerable().Count() > 0)
            {
                if (DBoyNo == "all" && datefrom == null && OrderId == null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.Status == "Delivered" && x.CompanyId == compid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
                else if (DBoyNo == "all" && datefrom == null && OrderId != null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status == "Delivered" && x.OrderId == OrderId).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
                else if (DBoyNo == "all" && datefrom != null && OrderId != null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && (x.Status == "Delivered" && x.CompanyId == compid && x.OrderId == OrderId) && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
                else if (DBoyNo != "all" && datefrom == null && OrderId == null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (DBoyNo != "all" && datefrom != null && OrderId != null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
                else if (DBoyNo == "all" && datefrom != null && OrderId == null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (DBoyNo == "all" && datefrom != null && dateto != null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && (x.Status == "Delivered") && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (DBoyNo != "all" && datefrom != null && OrderId == null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
                else if (DBoyNo != "all" && datefrom == null && dateto == null)
                {
                    newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
                }
            }
            else
            {
                var orders = OrderDispatchedMasters.OrderByDescending(x => x.OrderId).Include("orderDetails").AsEnumerable();
            }
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Count();
            obj.ordermaster = newdata;
            return obj;
        }

        public PaggingData AllDispatchedOrderMasterPagingWid(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int? OrderId, int compid, int warehouseid)
        {
            List<OrderDispatchedMaster> newdata = new List<OrderDispatchedMaster>();

            //if (OrderDispatchedMasters.AsEnumerable().Count() > 0)
            //{
            if (DBoyNo == "all" && datefrom == null && OrderId == null)
            {
                this.Database.Log = s => System.Diagnostics.Debug.WriteLine(s);
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.Status == "Delivered" && x.CompanyId == compid && x.WarehouseId == warehouseid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo == "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status == "Delivered" && x.OrderId == OrderId && x.WarehouseId == warehouseid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }

            else if (DBoyNo == "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && (x.Status == "Delivered" && x.CompanyId == compid && x.WarehouseId == warehouseid && x.OrderId == OrderId) && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo != "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.WarehouseId == warehouseid && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo != "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo == "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }

            else if (DBoyNo == "all" && datefrom != null && dateto != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == warehouseid && (x.Status == "Delivered") && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo != "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DBoyNo != "all" && datefrom == null && dateto == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            //}
            //else
            //{
            //    var orders = OrderDispatchedMasters.OrderByDescending(x => x.OrderId).Include("orderDetails").AsEnumerable();
            //}
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Count();
            obj.ordermaster = newdata;
            return obj;
        }

        public PaggingData AllDispatchedOrderMasterPagingWid11(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int? OrderId, int? DeliveryIssuanceIdOrderDeliveryMaster, int compid, int warehouseid)
        {
            List<OrderDispatchedMaster> newdata = new List<OrderDispatchedMaster>();

            //if (OrderDispatchedMasters.AsEnumerable().Count() > 0)
            //{
            if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.Status == "Delivered" && x.CompanyId == compid && x.WarehouseId == warehouseid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status == "Delivered" && x.OrderId == OrderId && x.WarehouseId == warehouseid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }

            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && (x.Status == "Delivered" && x.CompanyId == compid && x.WarehouseId == warehouseid && x.OrderId == OrderId) && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.WarehouseId == warehouseid && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.WarehouseId == warehouseid && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.WarehouseId == warehouseid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && dateto != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == warehouseid && (x.Status == "Delivered") && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            //}
            //else
            //{
            //    var orders = OrderDispatchedMasters.OrderByDescending(x => x.OrderId).AsEnumerable();
            //}
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Count();
            obj.ordermaster = newdata;
            return obj;
        }
        public PaggingData AllDispatchedOrderMasterPaging11(int list, int page, string DBoyNo, DateTime? datefrom, DateTime? dateto, int? OrderId, int? DeliveryIssuanceIdOrderDeliveryMaster, int compid)
        {
            List<OrderDispatchedMaster> newdata = new List<OrderDispatchedMaster>();

            //if (OrderDispatchedMasters.AsEnumerable().Count() > 0)
            //{
            if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.Status == "Delivered" && x.CompanyId == compid).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status == "Delivered" && x.OrderId == OrderId).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }

            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && (x.Status == "Delivered" && x.CompanyId == compid && x.OrderId == OrderId) && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Include("orderDetails").Take(list).ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom != null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.DboyMobileNo == DBoyNo && x.CompanyId == compid && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo != "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom == null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.Deleted == false && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster != null && DBoyNo == "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.Deleted == false && x.OrderId == OrderId && x.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceIdOrderDeliveryMaster && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom == null && OrderId != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.OrderId == OrderId && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo != "all" && datefrom != null && OrderId == null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.OrderedDate > datefrom && x.OrderedDate < dateto && x.CompanyId == compid && x.DboyMobileNo == DBoyNo && x.Deleted == false && x.Status == "Delivered").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }

            else if (DeliveryIssuanceIdOrderDeliveryMaster == null && DBoyNo == "all" && datefrom != null && dateto != null)
            {
                newdata = OrderDispatchedMasters.Where(x => x.Deleted == false && x.CompanyId == compid && (x.Status == "Delivered") && (x.OrderedDate > datefrom && x.OrderedDate < dateto)).OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            }
            //}
            //else
            //{
            //    var orders = OrderDispatchedMasters.OrderByDescending(x => x.OrderId).Include("orderDetails").AsEnumerable();
            //}
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Count();
            obj.ordermaster = newdata;
            return obj;
        }
        #endregion
        public PaggingData AllItemMasterForPaging(int list, int page, int CompanyId, string status)
        {
            PaggingData obj = new PaggingData();
            List<string> Numbers = new List<string>();
            List<ItemMasterCentral> ItemMasterCentrals = new List<ItemMasterCentral>();
            if (status == "true")
            {
                obj.total_count = ItemMasterCentralDB.Where(x => x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();
                ItemMasterCentrals = ItemMasterCentralDB.AsEnumerable().Where(x => x.Deleted == false && x.active == true && x.CompanyId == CompanyId).OrderByDescending(s => s.Id).Skip((page - 1) * list).Take(list).ToList();

            }
            else if (status == "false")
            {

                obj.total_count = ItemMasterCentralDB.Where(x => x.Deleted == false && x.active == false && x.CompanyId == CompanyId).Count();
                ItemMasterCentrals = ItemMasterCentralDB.AsEnumerable().Where(x => x.Deleted == false && x.active == false && x.CompanyId == CompanyId).OrderByDescending(s => s.Id).Skip((page - 1) * list).Take(list).ToList();
            }
            else
            {
                obj.total_count = ItemMasterCentralDB.Where(x => x.Deleted == false && x.CompanyId == CompanyId).Count();
                ItemMasterCentrals = ItemMasterCentralDB.AsEnumerable().Where(x => x.Deleted == false && x.CompanyId == CompanyId).OrderByDescending(s => s.Id).Skip((page - 1) * list).Take(list).ToList();

            }
            //if (obj.ordermaster != null)
            //{
            //    TripPlannerHelper tripPlannerHelper = new TripPlannerHelper();
            //    List<ItemWarehouseDc> itemWarehouseDcs = new List<ItemWarehouseDc>();
            //    var itemWarehouse = obj.ordermaster.Select(x => new ItemWarehouseDc { WarehouseId = x.WarehouseId, ItemMultiMRPId = x.ItemMultiMrpId }).ToList();
            //    var listm = tripPlannerHelper.RocTagValueGet(itemWarehouse);
            //    if (listm != null )
            //    {
            //        foreach (var da in obj.ordermaster)
            //        {
            //            da.Tag = listm.Result.Where(x => x.ItemMultiMRPId == da.ItemMultiMrpId && x.WarehouseId == da.WarehouseId).Select(x => x.Tag).FirstOrDefault();
            //        }
            //    }

            //}
            if (ItemMasterCentrals != null && ItemMasterCentrals.Count() > 0)
            {
                Numbers = ItemMasterCentrals.Select(x => x.Number).Distinct().ToList();
                if (Numbers != null && Numbers.Count() > 0)
                {
                    var ShelfLifeData = ClearanceNonsShelfConfigurations.Where(x => Numbers.Contains(x.ItemNumber) && x.IsActive == true && x.IsDeleted == false).ToList();
                    if (ShelfLifeData != null)
                    {
                        foreach (var item in ItemMasterCentrals)
                        {
                            item.ClearanceFrom = ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number) != null ? Convert.ToInt32(ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number).ClearanceShelfLifeFrom) : 0;
                            item.ClearanceTo = ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number) != null ? Convert.ToInt32(ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number).ClearanceShelfLifeTo) : 0;
                            item.NonsellableFrom = ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number) != null ? Convert.ToInt32(ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number).NonSellShelfLifeFrom) : 0;
                            item.NonsellableTo = ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number) != null ? Convert.ToInt32(ShelfLifeData.FirstOrDefault(x => x.ItemNumber == item.Number).NonSellShelfLifeTo) : 0;
                        }
                    }
                    obj.ordermaster = ItemMasterCentrals;
                }
            }
            return obj;
        }

        public PaggingData AllItemMasterForPagingWid(int list, int page, int Warehouse_id, int CompanyId, string status,string type)
        {

            using (var db = new AuthContext())
            {
            PaggingData obj = new PaggingData();
            if (type == "ConsumerType")
            {
                    var companyId = new SqlParameter("@CompanyId", CompanyId);
                    var warehouseId = new SqlParameter("@WarehouseId", Warehouse_id);
                    var Page = new SqlParameter("@page", page);
                    var List = new SqlParameter("@list", list);
                    var keyword = new SqlParameter("@keyword", "");
                    var data  = db.Database.SqlQuery<ItemMasterDTO>("EXEC GetMRPMediaItemMaster @CompanyId,@WarehouseId,@page,@list,@keyword", companyId, warehouseId,Page,List,keyword).ToList();
                    if(data !=null)
                    {
                        obj.ordermaster = data;
                        obj.total_count = data.FirstOrDefault().TotalCount;
                    }
            }
            else
            {
                if (status == "true")
                {
                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();
                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == true)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,   //increases
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                           IsCommodity = a.IsCommodity
                                       }).OrderByDescending(s => s.ItemId).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (status == "false")
                {
                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == false && x.CompanyId == CompanyId).Count();
                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == false)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                       }).OrderByDescending(s => s.ItemId).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (status == "ZeroQty")
                {
                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();
                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == true)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       where (c.WarehouseId == Warehouse_id && c.CurrentInventory == 0 && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                       }).OrderByDescending(s => s.ItemId).Skip((page - 1) * list).Take(list).ToList();

                }
                else if (status == "MaxToLow")
                {
                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();
                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       where (c.WarehouseId == Warehouse_id && c.CurrentInventory > 0 && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                       }).OrderByDescending(s => s.CurrentStock).Skip((page - 1) * list).Take(list).ToList();
                }
                else if (status == "Item Limit")
                {

                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();

                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       join d in ItemLimitMasterDB on a.ItemMultiMRPId equals d.ItemMultiMRPId
                                       where (d.IsItemLimit == true && d.ItemlimitQty > 0 && d.WarehouseId == a.WarehouseId)
                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           ItemlimitQty = d.ItemlimitQty,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                       }).OrderByDescending(s => s.CurrentStock).Skip((page - 1) * list).Take(list).ToList();
                }
                else
                {
                    obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();
                    obj.ordermaster = (from a in itemMasters
                                       where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                       join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                       join c in DbCurrentStock.Where(x => x.WarehouseId == Warehouse_id) on a.Number equals c.ItemNumber
                                       where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)

                                       select new ItemMasterDTO
                                       {
                                           Categoryid = b.Categoryid,
                                           BaseCategoryid = b.BaseCategoryid,
                                           SubCategoryId = b.SubCategoryId,
                                           SubsubCategoryid = b.SubsubCategoryid,
                                           itemname = a.itemname,
                                           itemBaseName = b.itemBaseName,
                                           BaseCategoryName = b.BaseCategoryName,
                                           CategoryName = b.CategoryName,
                                           SubcategoryName = b.SubcategoryName,
                                           SubsubcategoryName = b.SubsubcategoryName,
                                           SubSubCode = b.SubSubCode,
                                           TGrpName = b.TGrpName,
                                           Number = b.Number,
                                           SellingUnitName = a.SellingUnitName,
                                           PurchaseUnitName = a.PurchaseUnitName,
                                           TotalTaxPercentage = b.TotalTaxPercentage,
                                           LogoUrl = b.LogoUrl,
                                           MinOrderQty = b.MinOrderQty,
                                           PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                           PurchaseSku = b.PurchaseSku,
                                           price = a.price,
                                           SellingSku = b.SellingSku,
                                           GruopID = b.GruopID,
                                           CessGrpID = b.CessGrpID,
                                           PurchasePrice = a.PurchasePrice,
                                           NetPurchasePrice = a.NetPurchasePrice,
                                           Cityid = a.Cityid,
                                           CityName = a.CityName,
                                           UnitPrice = a.UnitPrice,
                                           Margin = a.Margin,
                                           marginPoint = a.marginPoint,
                                           SupplierId = a.SupplierId,
                                           SupplierName = a.SupplierName,
                                           SUPPLIERCODES = a.SUPPLIERCODES,
                                           Discount = a.Discount,
                                           WarehouseId = a.WarehouseId,
                                           WarehouseName = a.WarehouseName,
                                           Deleted = a.Deleted,
                                           active = a.active,
                                           CompanyId = a.CompanyId,
                                           ItemId = a.ItemId,
                                           CurrentStock = c.CurrentInventory,
                                           ItemMultiMRPId = a.ItemMultiMRPId,
                                           UnitofQuantity = a.UnitofQuantity,
                                           IsSensitive = b.IsSensitive,
                                           IsSensitiveMRP = b.IsSensitiveMRP,
                                           UOM = a.UOM,
                                           DepoId = a.DepoId,
                                           BuyerId = a.BuyerId,
                                           BuyerName = a.BuyerName,
                                           IsReplaceable = a.IsReplaceable,
                                           DistributionPrice = a.DistributionPrice,
                                           DistributorShow = a.DistributorShow,
                                           ItemAppType = a.ItemAppType,
                                           IsSellerStoreItem = a.IsSellerStoreItem,
                                           SellerStorePrice = a.SellerStorePrice,
                                           TradePrice = a.TradePrice,
                                           WholeSalePrice = a.WholeSalePrice,
                                       }).OrderByDescending(s => s.ItemId).Skip((page - 1) * list).Take(list).ToList();
                }
            }
            var itemList = obj.ordermaster as List<ItemMasterDTO>;
            if (obj.ordermaster != null)
            {
                // itemList = obj.ordermaster as List<ItemMasterDTO>;

                itemList.ForEach(x => x.ItemLimitId = ItemLimitMasterDB.FirstOrDefault(z => z.ItemNumber == x.Number && z.WarehouseId == x.WarehouseId && z.ItemMultiMRPId == x.ItemMultiMRPId)?.Id);

                obj.ordermaster = itemList;
            }

            TripPlannerHelper tripPlannerHelper = new TripPlannerHelper();
            List<ItemWarehouseDc> itemWarehouseDcs = new List<ItemWarehouseDc>();
            var itemWarehouse = itemList.Select(x => new ItemWarehouseDc { WarehouseId = x.WarehouseId, ItemMultiMRPId = x.ItemMultiMRPId }).ToList();
            var listd = tripPlannerHelper.RocTagValueGet(itemWarehouse);
            if (listd != null)
            {
                foreach (var da in obj.ordermaster)
                {
                    da.Tag = listd.Result.Where(x => x.ItemMultiMRPId == da.ItemMultiMRPId && x.WarehouseId == da.WarehouseId).Select(x => x.Tag).FirstOrDefault();
                }
            }
            return obj;
            }

        }

        public PaggingData AllItemMasterWithoutPaging(int Warehouse_id, int CompanyId, string status)
        {
            PaggingData obj = new PaggingData();
            if (status == "true")
            {
                //obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();

                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == true)
                                   //join b in db.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       HSNCode = a.HSNCode,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                   }).OrderByDescending(s => s.Number).ToList();
                obj.total_count = obj.ordermaster.Count;
            }
            else if (status == "false")
            {
                // obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == false && x.CompanyId == CompanyId).Count();
                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == false)
                                   //join b in db.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       HSNCode = a.HSNCode,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                   }).OrderByDescending(s => s.Number).ToList();
                obj.total_count = obj.ordermaster.Count;
            }
            else if (status == "ZeroQty")
            {
                //obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();
                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id && a.active == true)
                                   //join b in db.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.CurrentInventory == 0 && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       HSNCode = a.HSNCode,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                   }).OrderByDescending(s => s.Number).ToList();
                obj.total_count = obj.ordermaster.Count;

            }
            else if (status == "MaxToLow")
            {
                //obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();
                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                   //join b in db.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.CurrentInventory > 0 && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       HSNCode = a.HSNCode,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                   }).OrderByDescending(s => s.CurrentStock).ToList();
                obj.total_count = obj.ordermaster.Count;
            }
            else if (status == "Item Limit")
            {

                // obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();

                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                   //join b in ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.CurrentInventory > 0 && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   let limit = ItemLimitMasterDB.Where(p2 => a.ItemMultiMRPId == p2.ItemMultiMRPId && a.WarehouseId == p2.WarehouseId).FirstOrDefault()
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       ItemlimitQty = limit != null && limit.IsItemLimit ? limit.ItemlimitQty : 0,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                       ItemAppType = a.ItemAppType,
                                   }).OrderByDescending(s => s.Number).ToList();
            }
            else
            {
                //obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.CompanyId == CompanyId).Count();
                obj.ordermaster = (from a in itemMasters
                                   where (a.Deleted == false && a.CompanyId == CompanyId && a.WarehouseId == Warehouse_id)
                                   // join b in db.ItemMasterCentralDB on a.SellingSku equals b.SellingSku
                                   join c in DbCurrentStock on a.Number equals c.ItemNumber
                                   where (c.WarehouseId == Warehouse_id && c.ItemMultiMRPId == a.ItemMultiMRPId)
                                   select new ItemMasterDTO
                                   {
                                       Categoryid = a.Categoryid,
                                       BaseCategoryid = a.BaseCategoryid,
                                       SubCategoryId = a.SubCategoryId,
                                       SubsubCategoryid = a.SubsubCategoryid,
                                       itemname = a.itemname,
                                       itemBaseName = a.itemBaseName,
                                       BaseCategoryName = a.BaseCategoryName,
                                       CategoryName = a.CategoryName,
                                       SubcategoryName = a.SubcategoryName,
                                       SubsubcategoryName = a.SubsubcategoryName,
                                       SubSubCode = a.SubSubCode,
                                       TGrpName = a.TGrpName,
                                       Number = a.Number,
                                       SellingUnitName = a.SellingUnitName,
                                       PurchaseUnitName = a.PurchaseUnitName,
                                       TotalTaxPercentage = a.TotalTaxPercentage,
                                       LogoUrl = a.LogoUrl,
                                       MinOrderQty = a.MinOrderQty,
                                       PurchaseMinOrderQty = a.PurchaseMinOrderQty,
                                       PurchaseSku = a.PurchaseSku,
                                       price = a.price,
                                       SellingSku = a.SellingSku,
                                       GruopID = a.GruopID,
                                       CessGrpID = a.CessGrpID,
                                       PurchasePrice = a.PurchasePrice,
                                       NetPurchasePrice = a.NetPurchasePrice,
                                       Cityid = a.Cityid,
                                       CityName = a.CityName,
                                       UnitPrice = a.UnitPrice,
                                       Margin = a.Margin,
                                       marginPoint = a.marginPoint,
                                       SupplierId = a.SupplierId,
                                       SupplierName = a.SupplierName,
                                       SUPPLIERCODES = a.SUPPLIERCODES,
                                       Discount = a.Discount,
                                       WarehouseId = a.WarehouseId,
                                       WarehouseName = a.WarehouseName,
                                       Deleted = a.Deleted,
                                       active = a.active,
                                       CompanyId = a.CompanyId,
                                       ItemId = a.ItemId,
                                       CurrentStock = c.CurrentInventory,
                                       ItemMultiMRPId = a.ItemMultiMRPId,
                                       UnitofQuantity = a.UnitofQuantity,
                                       IsSensitive = a.IsSensitive,
                                       IsSensitiveMRP = a.IsSensitiveMRP,
                                       UOM = a.UOM,
                                       DepoId = a.DepoId,
                                       HSNCode = a.HSNCode,
                                       BuyerId = a.BuyerId,
                                       BuyerName = a.BuyerName,
                                       IsReplaceable = a.IsReplaceable,
                                       DistributionPrice = a.DistributionPrice,
                                       DistributorShow = a.DistributorShow,
                                   }).OrderByDescending(s => s.Number).ToList();
                obj.total_count = obj.ordermaster.Count;
            }
            return obj;
        }

        public PaggingData AllItemUnMappedSupplierForPagingWid(int list, int page, int Warehouse_id, int CompanyId, string status)
        {
            PaggingData obj = new PaggingData();
            if (status == "true")
            {
                obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.SupplierId == 0 && x.SupplierName == null && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Count();
                obj.ordermaster = itemMasters.AsEnumerable().Where(x => x.WarehouseId == Warehouse_id && x.SupplierId == 0 && x.SupplierName == null && x.Deleted == false && x.active == true && x.CompanyId == CompanyId).Skip((page - 1) * list).Take(list).ToList();

            }
            else if (status == "false")
            {

                obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.SupplierId == 0 && x.SupplierName == null && x.Deleted == false && x.active == false && x.CompanyId == CompanyId).Count();
                obj.ordermaster = itemMasters.AsEnumerable().Where(x => x.WarehouseId == Warehouse_id && x.SupplierId == 0 && x.SupplierName == null && x.Deleted == false && x.active == false && x.CompanyId == CompanyId).Skip((page - 1) * list).Take(list).ToList();
            }
            else
            {
                obj.total_count = itemMasters.Where(x => x.WarehouseId == Warehouse_id && x.Deleted == false && x.SupplierId == 0 && x.SupplierName == null && x.CompanyId == CompanyId).Count();
                obj.ordermaster = itemMasters.AsEnumerable().Where(x => x.WarehouseId == Warehouse_id && x.SupplierId == 0 && x.SupplierName == null && x.Deleted == false && x.CompanyId == CompanyId).Skip((page - 1) * list).Take(list).ToList();
            }
            return obj;
        }
        public DamageOrderMaster GetDOrderMaster(int orderid, int compid)
        {
            var orders = DamageOrderMasterDB.Where(x => x.DamageOrderId == orderid && x.CompanyId == compid).Include("DamageorderDetails").SingleOrDefault();
            foreach (var d in orders.DamageorderDetails)
            {
                var Damageinventory = DamageStockDB.Where(k => k.Deleted != true && k.ItemNumber == d.itemNumber && k.WarehouseId == d.WarehouseId && k.CompanyId == compid).FirstOrDefault();
                ItemMaster master = itemMasters.Where(c => c.ItemId == d.ItemId && c.CompanyId == compid).SingleOrDefault();

                if (Damageinventory != null)
                {
                    if (Damageinventory.ItemNumber == d.itemNumber)
                    {
                        // d.DamageStock = Damageinventory.CurrentInventory;
                    }
                }
                else
                {
                    //  d.CurrentStock = 0;
                }
            }
            return orders;
        }
        public OrderMaster GetOrderMaster(int orderid, int compid)
        {
            var orders = DbOrderMaster.Where(x => x.OrderId == orderid && x.CompanyId == compid).Include("orderDetails").FirstOrDefault();

            if (orders != null)
            {


                #region offerdiscounttype
                if (orders.BillDiscountAmount > 0)
                {
                    var billdiscountOfferId = BillDiscountDb.Where(x => x.OrderId == orderid).Select(z => z.OfferId).ToList();
                    if (billdiscountOfferId.Count > 0)
                    {
                        List<string> offeron = OfferDb.Where(x => billdiscountOfferId.Contains(x.OfferId)).Select(x => new { x.OfferOn, x.OfferCode }).ToList().Select(x => (!string.IsNullOrEmpty(x.OfferCode) ? x.OfferCode : x.OfferOn)).ToList();
                        orders.offertype = string.Join(",", offeron);
                    }
                }
                #endregion

                //for igst case if true then apply condion to hide column of cgst sgst cess
                if (!string.IsNullOrEmpty(orders.Tin_No) && orders.Tin_No.Length >= 11)
                {
                    string CustTin_No = orders.Tin_No.Substring(0, 2);

                    //   if (!CustTin_No.StartsWith("0"))
                    //  {
                    orders.IsIgstInvoice = !Warehouses.Any(x => x.GSTin != null && x.WarehouseId == orders.WarehouseId && x.GSTin.Substring(0, 2) == CustTin_No);
                    //  }
                }
                var CustomerId = orders.CustomerId;
                var warehouseid = orders.WarehouseId;
                var itemdetail = orders.orderDetails.Where(x => !x.IsDispatchedFreeStock).Select(x => new { x.ItemId, x.itemNumber, x.ItemMultiMRPId });
                var itemnumbers = itemdetail.Select(x => x.itemNumber);
                var ItemMultiMRPIds = itemdetail.Select(x => x.ItemMultiMRPId);
                var currentinventorys = DbCurrentStock.Where(k => k.Deleted != true
                && k.WarehouseId == warehouseid
                && ItemMultiMRPIds.Contains(k.ItemMultiMRPId)).ToList(); //multimrp
                                                                         //ItemMaster master = itemMasters.Where(c => c.ItemId == d.ItemId && c.CompanyId == compid).SingleOrDefault();
                List<FreeStock> FreeStockList = new List<FreeStock>();
                //---------S-------------------
                DataTable dt = new DataTable();
                dt.Columns.Add("IntValue");
                var dr = dt.NewRow();
                dr["IntValue"] = CustomerId;
                dt.Rows.Add(dr);
                var param = new SqlParameter("CustomerId", dt);
                param.SqlDbType = SqlDbType.Structured;
                param.TypeName = "dbo.IntValues";
                // var CustomerIds = new SqlParameter("@CustomerId", CustomerId);
                var GetStateCodeList = Database.SqlQuery<GetStateCodeDc>("EXEC GetStateByCustomerId @CustomerId", param).FirstOrDefault();

                if (GetStateCodeList != null)
                {
                    orders.shippingStateName = GetStateCodeList.shippingStateName;
                    orders.shippingStateCode = GetStateCodeList.shippingStateCode;
                    orders.BillingStateName = GetStateCodeList.BillingStateName;
                    orders.BillingStateCode = GetStateCodeList.BillingStateCode;
                }
                else
                {
                    orders.shippingStateName = null;
                    orders.shippingStateCode = null;
                    orders.BillingStateName = null;
                    orders.BillingStateCode = null;
                }
                //---------E-------------------

                if (orders.orderDetails.Any(x => x.IsDispatchedFreeStock))
                {
                    var Freeitemdetail = orders.orderDetails.Where(x => x.IsFreeItem && x.IsDispatchedFreeStock).Select(x => new { x.ItemId, x.itemNumber, x.ItemMultiMRPId });
                    var FreeItemMultiMRPIds = Freeitemdetail.Select(x => x.ItemMultiMRPId);
                    var FreeNumber = Freeitemdetail.Select(x => x.itemNumber);
                    FreeStockList = FreeStockDB.Where(k => k.Deleted != true && FreeNumber.Contains(k.ItemNumber) && k.WarehouseId == warehouseid && FreeItemMultiMRPIds.Contains(k.ItemMultiMRPId)).ToList();
                }

                List<Model.Store.Store> stores = new List<Model.Store.Store>();
                if (orders.orderDetails != null && orders.orderDetails.Any())
                {
                    var storeids = orders.orderDetails.Select(x => x.StoreId).Distinct().ToList();
                    stores = StoreDB.Where(x => storeids.Contains(x.Id)).ToList();
                }

                foreach (var d in orders.orderDetails)
                {
                    if (!d.IsDispatchedFreeStock)
                    {
                        var currentinventory = currentinventorys.FirstOrDefault(x => x.ItemMultiMRPId == d.ItemMultiMRPId);
                        if (currentinventory != null)
                        {
                            d.CurrentStock = currentinventory.CurrentInventory;
                        }
                        else
                        {
                            d.CurrentStock = 0;
                        }
                    }
                    else if (d.IsDispatchedFreeStock)
                    {
                        var currentinventory = FreeStockList.FirstOrDefault(x => x.ItemMultiMRPId == d.ItemMultiMRPId);
                        if (currentinventory != null)
                        {
                            d.CurrentStock = currentinventory.CurrentInventory;
                        }
                        else
                        {
                            d.CurrentStock = 0;
                        }
                    }

                    d.StoreName = stores.Any(x => x.Id == d.StoreId) ? stores.FirstOrDefault(x => x.Id == d.StoreId).Name : "Other";
                }

                var itemOrderItemQty = orders.orderDetails.GroupBy(x => new { x.OrderId, x.ItemMultiMRPId, x.IsDispatchedFreeStock, x.CurrentStock })
                                        .Select(x => new
                                        {
                                            x.Key.OrderId,
                                            x.Key.ItemMultiMRPId,
                                            x.Key.IsDispatchedFreeStock,
                                            x.Key.CurrentStock,
                                            TotalQty = x.Sum(z => z.qty)
                                        }).ToList();

                if (itemOrderItemQty.Any(x => x.TotalQty > x.CurrentStock && !x.IsDispatchedFreeStock))
                {
                    var items = itemOrderItemQty.Where(x => x.TotalQty > x.CurrentStock && !x.IsDispatchedFreeStock);
                    foreach (var d in orders.orderDetails.Where(x => !x.IsFreeItem && items.Select(z => z.ItemMultiMRPId).Contains(x.ItemMultiMRPId)))
                    {
                        d.IsRed = true;
                    }


                }

                orders.SalesPerson = string.Join(",", orders.orderDetails.Where(z => !string.IsNullOrEmpty(z.ExecutiveName)).Select(z => z.ExecutiveName).Distinct());
                if (!string.IsNullOrEmpty(orders.SalesPerson))
                {
                    var SalesPersonName = orders.SalesPerson.Split(',').ToList();
                    var qquery = from c in Peoples
                                 where SalesPersonName.Contains(c.DisplayName)
                                 select c.Mobile;
                    orders.SalesMobile = string.Join(",", qquery);
                }

                //if (string.IsNullOrEmpty(orders.SalesPerson))
                //{
                //    var cust = ClusterAgent.FirstOrDefault(x => x.ClusterId == orders.ClusterId);
                //    if (cust != null)
                //    {
                //        var People = Peoples.FirstOrDefault(x => x.PeopleID == cust.AgentId);
                //        if (People != null)
                //        {
                //            orders.SalesPerson = People.DisplayName;
                //            orders.SalesMobile = People.Mobile;
                //        }
                //    }
                //}
            }
            // orders.BillDiscountAmount= BillDiscountdata.
            return orders;
            //return null;
        }
        public PaggingData_st AllItemHistory(int list, int page, string ItemNumber, int WarehouseId, int StockId)
        {
            List<CurrentStockHistory> newdata = new List<CurrentStockHistory>();
            var listOrders = CurrentStockHistoryDb.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.Warehouseid == WarehouseId && x.StockId == StockId).OrderByDescending(x => x.CreationDate).ThenByDescending(x => x.id).Skip((page - 1) * list).Take(list).ToList();
            newdata = listOrders;
            PaggingData_st obj = new PaggingData_st();
            obj.total_count = CurrentStockHistoryDb.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.Warehouseid == WarehouseId && x.StockId == StockId).Count();
            obj.ordermaster = newdata;
            return obj;
        }


        public FreeStockHistorydata AllfreestockHistory(int list, int page, string ItemNumber, int WarehouseId, int FreeStockId)
        {
            List<FreeStockHistory> newdata = new List<FreeStockHistory>();
            var data = FreeStockHistoryDB.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.WarehouseId == WarehouseId && x.FreeStockId == FreeStockId).ToList();
            var listOrders = FreeStockHistoryDB.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.WarehouseId == WarehouseId && x.FreeStockId == FreeStockId).OrderByDescending(x => x.CreationDate).Skip((page - 1) * list).Take(list).ToList();
            newdata = listOrders;
            FreeStockHistorydata obj = new FreeStockHistorydata();
            obj.total_count = FreeStockHistoryDB.Where(x => x.Deleted == false && x.ItemNumber == ItemNumber && x.WarehouseId == WarehouseId && x.FreeStockId == FreeStockId).Count();
            obj.freestock = newdata;
            return obj;
        }

        public PaggingData AllOrderMaster(int list, int page, int compid)
        {
            List<OrderMaster> newdata = new List<OrderMaster>();
            var listOrders = DbOrderMaster.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status != "Inactive").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            newdata = listOrders;
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Where(x => x.Deleted == false && x.CompanyId == compid && x.Status != "Inactive").Count();
            obj.ordermaster = newdata;
            return obj;
        }
        public PaggingData_Delivery AllDataDeliveryIssurance(int list, int page, int id, DateTime? start, DateTime? end)
        {
            if (start != null && end != null)
            {
                List<DeliveryIssuance> newdata = new List<DeliveryIssuance>();
                var listOrders = DeliveryIssuanceDb.Where(x => x.CreatedDate > start && x.CreatedDate <= end && x.PeopleID == id).OrderByDescending(x => x.CreatedDate).Skip((page - 1) * list).Take(list).Include("details").ToList();
                var Warehousess = listOrders.Distinct().Select(x => x.WarehouseId).ToList();
                var WarehouseList = Warehouses.Where(x => Warehousess.Contains(x.WarehouseId)).ToList();

                newdata = listOrders;
                if (newdata != null)
                {
                    foreach (var Issuance in newdata)
                    {
                        try
                        {
                            Issuance.IsStore = WarehouseList != null ? WarehouseList.Where(x => x.WarehouseId == Issuance.WarehouseId).Select(y => y.IsStore).FirstOrDefault() : false;
                            string Borderid = Convert.ToString(Issuance.DeliveryIssuanceId);
                            string BorderCodeId = Borderid.PadLeft(9, '0');
                            temOrderQBcode code = AssignmentGenerateBarcode(BorderCodeId);
                            Issuance.AssignmentBarcodeImage = code.BarcodeImage;//for assignment barcode

                        }
                        catch (Exception es) { }
                    }
                }
                PaggingData_Delivery obj = new PaggingData_Delivery();
                obj.total_count = DeliveryIssuanceDb.Where(x => x.CreatedDate > start && x.CreatedDate <= end && x.PeopleID == id).Include("details").Count();
                obj.historyamount = newdata;
                return obj;
            }
            else
            {
                List<DeliveryIssuance> newdata = new List<DeliveryIssuance>();
                var listOrders = DeliveryIssuanceDb.Where(x => x.PeopleID == id).OrderByDescending(x => x.CreatedDate).Skip((page - 1) * list).Take(list).Include("details").ToList();
                var Warehousess = listOrders.Distinct().Select(x => x.WarehouseId).ToList();
                var WarehouseList = Warehouses.Where(x => Warehousess.Contains(x.WarehouseId)).ToList();
                newdata = listOrders;
                if (newdata != null)
                {
                    foreach (var Issuance in newdata)
                    {
                        try
                        {
                            Issuance.IsStore = WarehouseList != null ? WarehouseList.Where(x => x.WarehouseId == Issuance.WarehouseId).Select(y => y.IsStore).FirstOrDefault() : false;
                            string Borderid = Convert.ToString(Issuance.DeliveryIssuanceId);
                            string BorderCodeId = Borderid.PadLeft(9, '0');
                            temOrderQBcode code = AssignmentGenerateBarcode(BorderCodeId);
                            Issuance.AssignmentBarcodeImage = code.BarcodeImage;//for assignment barcode

                        }
                        catch (Exception es) { }
                    }
                }
                PaggingData_Delivery obj = new PaggingData_Delivery();
                obj.total_count = DeliveryIssuanceDb.Where(x => x.PeopleID == id).Include("details").Count();
                obj.historyamount = newdata;
                return obj;
            }

        }
        public PaggingData AllOrderMasterWid(int list, int page, int compid, int Warehouse_id)
        {
            List<OrderMaster> newdata = new List<OrderMaster>();

            var listOrders = DbOrderMaster.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == Warehouse_id && x.Status != "Inactive").OrderByDescending(x => x.OrderId).Skip((page - 1) * list).Take(list).Include("orderDetails").ToList();
            newdata = listOrders;
            PaggingData obj = new PaggingData();
            obj.total_count = DbOrderMaster.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == Warehouse_id && x.Status != "Inactive").Count();
            obj.ordermaster = newdata;
            return obj;

        }
        public PaggingData AllDamageOrderMaster(int list, int page, int compid, int WarehouseId)
        {
            List<DamageOrderMaster> newdata = new List<DamageOrderMaster>();

            var listOrders = DamageOrderMasterDB.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == WarehouseId).OrderByDescending(x => x.DamageOrderId).Skip((page - 1) * list).Take(list).Include("DamageorderDetails").ToList();
            newdata = listOrders;
            PaggingData obj = new PaggingData();
            obj.total_count = DamageOrderMasterDB.Where(x => x.Deleted == false && x.CompanyId == compid && x.WarehouseId == WarehouseId).Count();
            obj.ordermaster = newdata;
            return obj;
        }
        public List<OrderMaster> searchorderbycustomerwid(DateTime? start, DateTime? end, int OrderId, string Skcode, string ShopName, string Mobile, string status, int compid, int warehouseid)
        {
            List<OrderMaster> newdata = new List<OrderMaster>();

            // combination by raj
            if ((OrderId != 0) && (Skcode != null) && (ShopName != null) && start != null && (Mobile != null) && (status != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId) && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode) && a.ShopName.Contains(ShopName) && a.Status.Equals(status) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((OrderId != 0) && (Skcode != null) && (ShopName != null) && start != null && (Mobile != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId) && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode) && a.ShopName.Contains(ShopName) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((Skcode != null) && (ShopName != null) && start != null && (Mobile != null) && (status != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode) && a.ShopName.Contains(ShopName) && a.Status.Equals(status) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((ShopName != null) && start != null && (Mobile != null) && (status != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                            && a.ShopName.Contains(ShopName) && a.Status.Equals(status) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((OrderId != 0) && (Skcode != null) && (ShopName != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId) && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode) && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((OrderId != 0) && (Skcode != null) && (ShopName != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId)
                             && a.Skcode.Contains(Skcode) && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if (start != null && (Mobile != null) && (status != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Status.Equals(status) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((OrderId != 0) && (Mobile != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid
                             && a.OrderId.Equals(OrderId) && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((OrderId != 0) && (Skcode != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId)
                             && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((Mobile != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((Skcode != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((ShopName != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((OrderId != 0) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                          && a.OrderId.Equals(OrderId)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status == "Show All") && (Skcode != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status != null) && (Skcode != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Skcode.Contains(Skcode) && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status != null) && (ShopName != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.ShopName.Contains(ShopName) && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status != null) && (Mobile != null))
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Customerphonenum.Contains(Mobile) && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (Mobile != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Customerphonenum.Contains(Mobile)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (Skcode != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (ShopName != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (OrderId != 0)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.OrderId.Equals(OrderId)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (status != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.Status == status).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.WarehouseId == warehouseid && a.CreatedDate >= start && a.CreatedDate <= end).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
        }
        public List<OrderMaster> searchorderbycustomer(DateTime? start, DateTime? end, int OrderId, string Skcode, string ShopName, string Mobile, string status, int compid)
        {
            List<OrderMaster> newdata = new List<OrderMaster>();

            if ((Mobile != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end
                             && (a.Customerphonenum.Contains(Mobile))).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((Skcode != null) && start != null)
            {

                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();
                return listOrders;
            }
            else if ((ShopName != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((OrderId != 0) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end
                          && a.OrderId.Equals(OrderId)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if ((status != null) && start != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end
                             && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (Mobile != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.Customerphonenum.Contains(Mobile)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (Skcode != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.Skcode.Contains(Skcode)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (ShopName != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.ShopName.Contains(ShopName)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (OrderId != 0)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.OrderId.Equals(OrderId)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else if (status != null)
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.Status.Equals(status)).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
            else
            {
                var listOrders = DbOrderMaster.Where(a => a.Deleted == false && a.CompanyId == compid && a.CreatedDate >= start && a.CreatedDate <= end).OrderByDescending(x => x.OrderId).Include("orderDetails").ToList();

                return listOrders;
            }
        }
        public Customer GetCustomerbyId(string Mobile)
        {
            Customer customer = Customers.Where(c => c.Mobile == Mobile).SingleOrDefault();
            if (customer != null)
            {
                return customer;
            }
            else
            {
                customer = new Customer();
            }
            return customer;
        }
        public PurchaseOrderDetailRecived AddPurchaseOrderDetailsRecived(PurchaseOrderDetailRecived pd, int count)
        {
            PurchaseOrderDetailRecived podr = PurchaseOrderRecivedDetails.Where(x => x.PurchaseOrderDetailId == pd.PurchaseOrderDetailId && x.CompanyId == pd.CompanyId).SingleOrDefault();
            if (podr == null)
            {
                ItemMaster itm = itemMasters.Where(y => y.PurchaseSku.Trim() == pd.PurchaseSku.Trim() && y.CompanyId == pd.CompanyId && y.WarehouseId == pd.WarehouseId).FirstOrDefault();
                var item = DbCurrentStock.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                if (item == null)
                {

                    var Mitem = ItemMultiMRPDB.Where(x => x.ItemNumber == itm.Number && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                    if (Mitem != null)
                    {
                        CurrentStock newCstk = new CurrentStock();
                        newCstk.CompanyId = itm.CompanyId;
                        newCstk.itemBaseName = itm.itemBaseName;
                        newCstk.ItemNumber = itm.Number;
                        newCstk.WarehouseId = item.WarehouseId;
                        newCstk.WarehouseName = item.WarehouseName;
                        newCstk.CurrentInventory = 0;
                        newCstk.CreationDate = indianTime;
                        newCstk.UpdatedDate = indianTime;
                        newCstk.MRP = Mitem.MRP;
                        newCstk.UnitofQuantity = Mitem.UnitofQuantity;
                        newCstk.UOM = Mitem.UOM;
                        newCstk.ItemMultiMRPId = Mitem.ItemMultiMRPId;
                        newCstk.itemname = itm.itemBaseName + " " + itm.MRP + " MRP " + itm.UnitofQuantity + " " + itm.UOM;   //itm.itemname;
                        DbCurrentStock.Add(newCstk);
                        this.Commit();
                    }
                    //again call 
                    item = DbCurrentStock.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                }
                else
                {
                    var QtyReciv = pd.QtyRecived1.GetValueOrDefault();
                    if (QtyReciv > 0)
                    {
                        CurrentStockHistory Oss = new CurrentStockHistory();
                        if (item != null)
                        {
                            Oss.StockId = item.StockId;
                            Oss.ItemNumber = item.ItemNumber;
                            Oss.itemname = item.itemname;
                            Oss.OdOrPoId = pd.PurchaseOrderId;
                            Oss.CurrentInventory = item.CurrentInventory;
                            Oss.InventoryIn = Convert.ToInt32(QtyReciv);
                            Oss.TotalInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                            Oss.WarehouseName = item.WarehouseName;
                            Oss.Warehouseid = item.WarehouseId;
                            Oss.CompanyId = item.CompanyId;
                            Oss.CreationDate = indianTime;
                            Oss.ItemMultiMRPId = item.ItemMultiMRPId;
                            Oss.ManualReason = "(+)GRN:1";
                            CurrentStockHistoryDb.Add(Oss);
                            int id = this.Commit();
                        }
                        item.CurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                        this.UpdateCurrentStock(item);
                    }
                    else
                    {
                        pd.Price1 = 0;
                    }
                    pd.CreationDate = indianTime;
                    pd.QtyRecived2 = 0;
                    pd.QtyRecived3 = 0;
                    pd.QtyRecived4 = 0;
                    pd.QtyRecived5 = 0;

                    /////for FirstMRP
                    //pd.MRP = pd.Price;
                    double? amt = 0;
                    if (pd.QtyRecived1 > 0)
                    {
                        amt = pd.QtyRecived1 * pd.Price1;
                    }
                    else
                    {
                        pd.QtyRecived1 = 0;
                        amt = 0;
                    }
                    pd.BatchNo1 = pd.BatchNo1;
                    pd.MFGDate1 = pd.MFGDate1;
                    pd.ItemName1 = pd.ItemName;
                    pd.ItemMultiMRPId1 = pd.ItemMultiMRPId;

                    if (pd.dis1 != 0 && pd.dis1 != null)
                    {
                        pd.PriceRecived = ((amt * 100) / (100 + pd.dis1)).GetValueOrDefault();
                    }
                    else
                    {
                        pd.PriceRecived = amt.GetValueOrDefault();
                    }

                    if (pd.TotalQuantity > (pd.QtyRecived1))
                    {
                        pd.TotalAmountIncTax = amt.GetValueOrDefault();
                        pd.Status = "Partial Received";
                        PurchaseOrderRecivedDetails.Add(pd);
                        int id = this.Commit();
                    }
                    else
                    {
                        if (pd.Status != "Received")
                        {
                            pd.TotalAmountIncTax = amt.GetValueOrDefault();
                            pd.Status = "Received";
                            PurchaseOrderRecivedDetails.Add(pd);
                            int id = this.Commit();
                        }
                    }
                }
            }
            else
            {
                ItemMaster itm = itemMasters.Where(y => y.PurchaseSku.Trim() == pd.PurchaseSku.Trim() && y.CompanyId == pd.CompanyId && y.WarehouseId == pd.WarehouseId).FirstOrDefault();
                var item = DbCurrentStock.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();

                if (item == null)
                {
                    var Mitem = ItemMultiMRPDB.Where(x => x.ItemNumber == itm.Number && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                    if (Mitem != null)
                    {
                        CurrentStock newCstk = new CurrentStock();
                        newCstk.CompanyId = itm.CompanyId;
                        newCstk.itemBaseName = itm.itemBaseName;
                        newCstk.ItemNumber = itm.Number;
                        newCstk.WarehouseId = itm.WarehouseId;
                        newCstk.WarehouseName = itm.WarehouseName;
                        newCstk.CurrentInventory = 0;
                        newCstk.CreationDate = indianTime;
                        newCstk.UpdatedDate = indianTime;
                        newCstk.MRP = Mitem.MRP;
                        newCstk.UnitofQuantity = Mitem.UnitofQuantity;
                        newCstk.UOM = Mitem.UOM;
                        newCstk.ItemMultiMRPId = Mitem.ItemMultiMRPId;
                        newCstk.itemname = itm.itemBaseName + " " + itm.MRP + " MRP " + itm.UnitofQuantity + " " + itm.UOM;   //itm.itemname;                                                                                                      // $scope.itemMasterData.itemname = data.itemBaseName + " " + data.price + " MRP " + data.UnitofQuantity + " " + data.UOM;
                        DbCurrentStock.Add(newCstk);
                        this.Commit();
                        item = DbCurrentStock.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                    }
                    //again call 
                }
                else
                {
                    var QtyReciv = 0;
                    if (count == 2 && podr.QtyRecived2 == 0)
                    {
                        QtyReciv = pd.QtyRecived2.GetValueOrDefault();
                        if (QtyReciv > 0)
                        {
                            podr.BatchNo2 = pd.BatchNo2;
                            podr.MFGDate2 = pd.MFGDate2;
                            podr.ItemName2 = pd.ItemName;
                            podr.ItemMultiMRPId2 = pd.ItemMultiMRPId;
                            podr.GRDate2 = indianTime;
                            var amt = QtyReciv * pd.Price2;
                            if (pd.dis2 != 0 && pd.dis2 != null)
                            {
                                podr.dis2 = pd.dis2;
                                podr.PriceRecived += ((amt * 100) / (100 + pd.dis2)).GetValueOrDefault();
                            }
                            else
                            {
                                podr.PriceRecived += amt.GetValueOrDefault();
                            }
                        }
                        else
                        {
                            QtyReciv = 0;
                            podr.BatchNo2 = pd.BatchNo2;
                            podr.MFGDate2 = pd.MFGDate2;
                            podr.ItemName2 = pd.ItemName;
                            podr.ItemMultiMRPId2 = pd.ItemMultiMRPId;
                            podr.GRDate2 = indianTime;
                            podr.PriceRecived = 0;
                            pd.dis2 = 0;
                        }

                    }
                    else if (count == 3 && podr.QtyRecived3 == 0)
                    {
                        QtyReciv = pd.QtyRecived3.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price3;
                        podr.BatchNo3 = pd.BatchNo3;
                        podr.MFGDate3 = pd.MFGDate3;
                        podr.ItemName3 = pd.ItemName;
                        podr.ItemMultiMRPId3 = pd.ItemMultiMRPId;
                        podr.GRDate3 = indianTime;
                        if (pd.dis3 != 0 && pd.dis3 != null)
                        {
                            podr.dis3 = pd.dis3;
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis3)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 4 && podr.QtyRecived4 == 0)
                    {
                        QtyReciv = pd.QtyRecived4.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price4;
                        podr.BatchNo4 = pd.BatchNo4;
                        podr.MFGDate4 = pd.MFGDate4;
                        podr.ItemName4 = pd.ItemName;
                        podr.ItemMultiMRPId4 = pd.ItemMultiMRPId;
                        podr.GRDate4 = indianTime;
                        if (pd.dis4 != 0 && pd.dis4 != null)
                        {
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis4)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 5 && podr.QtyRecived5 == 0)
                    {
                        QtyReciv = pd.QtyRecived5.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price5;
                        podr.BatchNo5 = pd.BatchNo5;
                        podr.MFGDate5 = pd.MFGDate5;
                        podr.ItemName5 = pd.ItemName;
                        podr.ItemMultiMRPId5 = pd.ItemMultiMRPId;
                        podr.GRDate5 = indianTime;
                        if (pd.dis5 != 0 && pd.dis5 != null)
                        {
                            podr.dis5 = pd.dis5;
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis5)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    //else if (count == 1 && podr.QtyRecived1 == 0)
                    //{
                    //    QtyReciv = pd.QtyRecived1.GetValueOrDefault();
                    //    var amt = QtyReciv * pd.Price1;
                    //    podr.BatchNo1 = pd.BatchNo1;
                    //    podr.MFGDate1 = pd.MFGDate1;
                    //    podr.ItemName1 = pd.ItemName;
                    //    podr.ItemMultiMRPId1 = pd.ItemMultiMRPId;
                    //    podr.GRDate1 = indianTime;
                    //    if (pd.dis1 != 0 && pd.dis1 != null)
                    //    {
                    //        podr.dis1 = pd.dis1;
                    //        podr.PriceRecived = ((amt * 100) / (100 + pd.dis1)).GetValueOrDefault();
                    //    }
                    //    else
                    //    {
                    //        podr.PriceRecived = amt.GetValueOrDefault();
                    //    }
                    //}
                    if (QtyReciv > 0)
                    {
                        CurrentStockHistory Oss = new CurrentStockHistory();
                        if (item != null)
                        {
                            Oss.StockId = item.StockId;
                            Oss.ItemNumber = item.ItemNumber;
                            Oss.itemname = item.itemname;
                            Oss.CurrentInventory = item.CurrentInventory;
                            Oss.OdOrPoId = pd.PurchaseOrderId;
                            Oss.InventoryIn = Convert.ToInt32(QtyReciv);
                            Oss.TotalInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                            Oss.WarehouseName = item.WarehouseName;
                            Oss.Warehouseid = item.WarehouseId;
                            Oss.CompanyId = item.CompanyId;
                            Oss.CreationDate = indianTime;
                            Oss.ItemMultiMRPId = item.ItemMultiMRPId;
                            CurrentStockHistoryDb.Add(Oss);
                            int id = this.Commit();
                        }
                        item.CurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                        this.UpdateCurrentStock(item);

                        //var irconfirm = IR_ConfirmDb.Where(x => x.PurchaseOrderId == podr.PurchaseOrderId && x.ItemId == podr.ItemId && x.CompanyId == podr.CompanyId).SingleOrDefault();
                        //if (irconfirm != null)
                        //{
                        //    irconfirm.QtyRecived += QtyReciv;
                        //    IR_ConfirmDb.Attach(irconfirm);
                        //    this.Entry(irconfirm).State = EntityState.Modified;
                        //    this.SaveChanges();
                        //}
                    }

                    podr.TotalAmountIncTax = pd.TotalAmountIncTax;
                    podr.TaxAmount = pd.TaxAmount;
                    podr.QtyRecived1 = pd.QtyRecived1;
                    podr.QtyRecived2 = pd.QtyRecived2;
                    podr.QtyRecived3 = pd.QtyRecived3;
                    podr.QtyRecived4 = pd.QtyRecived4;
                    podr.QtyRecived5 = pd.QtyRecived5;
                    double? PriceRecived = 0.00;
                    if (count == 1 && pd.Price1 != null)
                    {
                        if (podr.QtyRecived1 > 0)
                            podr.Price1 = pd.Price1;
                        PriceRecived += pd.QtyRecived1 * pd.Price1;
                    }
                    if (count == 2 && pd.Price2 != null)
                    {
                        if (podr.QtyRecived2 > 0)
                            podr.Price2 = pd.Price2;
                        PriceRecived += pd.QtyRecived2 * pd.Price2;
                    }
                    if (count == 3 && pd.Price3 != null)
                    {
                        if (podr.QtyRecived3 > 0)
                            podr.Price3 = pd.Price3;
                        PriceRecived += pd.QtyRecived3 * pd.Price3;
                    }
                    if (count == 4 && pd.Price4 != null)
                    {
                        if (podr.QtyRecived4 > 0)
                            podr.Price4 = pd.Price4;
                        PriceRecived += pd.QtyRecived4 * pd.Price4;
                    }
                    if (count == 5 && pd.Price5 != null)
                    {
                        if (podr.QtyRecived5 > 0)
                            podr.Price5 = pd.Price5;
                        PriceRecived += pd.QtyRecived5 * pd.Price5;
                    }

                    /////for FirstMRP
                    //podr.MRP = podr.Price;

                    if (pd.TotalQuantity > (pd.QtyRecived1 + pd.QtyRecived2 + pd.QtyRecived3 + pd.QtyRecived4 + pd.QtyRecived5))
                    {
                        podr.TotalAmountIncTax += PriceRecived.GetValueOrDefault();
                        podr.Status = "Partial Received";
                        PurchaseOrderRecivedDetails.Add(podr);
                        this.Entry(podr).State = EntityState.Modified;
                        this.Commit();
                    }
                    else
                    {
                        if (pd.Status != "Received")
                        {
                            podr.TotalAmountIncTax += PriceRecived.GetValueOrDefault();
                            podr.Status = "Received";
                            PurchaseOrderRecivedDetails.Add(podr);
                            this.Entry(podr).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                }
            }
            return pd;
        }
        public string skcode()
        {


            var customer = Customers.OrderByDescending(e => e.CreatedDate).FirstOrDefault();
            //    var customer = Customers.OrderByDescending(e => e.Skcode).FirstOrDefault();

            var skcode = "";
            if (customer != null)
            {
                int i = 1;
                bool flag = false;
                while (flag == false)
                {
                    var skList = customer.Skcode.Split('K');
                    var skint = Convert.ToInt32(skList[1]) + i;
                    skcode = (skList[0] + "K" + Convert.ToString(skint)).Trim();
                    List<Customer> check = Customers.Where(s => s.Skcode.Trim().ToLower() == skcode.Trim().ToLower()).ToList();
                    if (check.Count == 0)
                    {
                        flag = true;
                        return skcode;
                    }
                    else
                    {
                        i = i + 1;
                    }
                }
            }

            return skcode;
        }
        public DeliveryCharge AddUpdateDeliveryCharge(DeliveryCharge del)
        {
            DeliveryCharge delivery = new DeliveryCharge();
            delivery = DeliveryChargeDb.Where(x => x.id == del.id).FirstOrDefault();

            Warehouse w = Warehouses.Where(x => x.WarehouseId == del.WarehouseId && x.CompanyId == del.CompanyId).FirstOrDefault();
            Cluster c = Clusters.Where(x => x.ClusterId == del.cluster_Id && x.CompanyId == del.CompanyId).FirstOrDefault();
            if (delivery == null)
            {
                if (w != null)
                {
                    del.WarehouseId = w.WarehouseId;
                    del.warhouse_Name = w.WarehouseName;
                }
                if (c != null)
                {
                    del.cluster_Id = c.ClusterId;
                    del.cluster_Name = c.ClusterName;
                }
                DeliveryChargeDb.Add(del);
                int id = this.Commit();
                return del;
            }
            else
            {
                if (w != null)
                {
                    delivery.WarehouseId = w.WarehouseId;
                    delivery.warhouse_Name = w.WarehouseName;
                }
                if (c != null)
                {
                    delivery.cluster_Id = c.ClusterId;
                    delivery.cluster_Name = c.ClusterName;
                }
                delivery.min_Amount = del.min_Amount;
                delivery.max_Amount = del.max_Amount;
                delivery.del_Charge = del.del_Charge;
                delivery.min_Amount = del.min_Amount;
                delivery.IsActive = del.IsActive;
                delivery.IsDistributor = del.IsDistributor;
                delivery.storeId = del.storeId;
                //DeliveryChargeDb.Attach(delivery);
                this.Entry(delivery).State = EntityState.Modified;
                this.Commit();
                return delivery;
            }
        }
        public List<ReturnOrderDispatchedDetails> add(List<ReturnOrderDispatchedDetails> po)
        {
            throw new NotImplementedException();
        }
        public void AddOrderMaster(OrderMaster item)
        {
            throw new NotImplementedException();
        }
        public object getCustomerbyid(object id)
        {
            throw new NotImplementedException();
        }
        #region For Bulk Order Assign To Deliveruy Boy 
        //public bool AllOrderMasterspriority(List<OrderMaster> assignedorders, int warehouseid, string Mobile)
        //{
        //    try
        //    {
        //        using (var context = new AuthContext())
        //        {
        //            string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.Mobile='" + Mobile + "' and p.WarehouseId=" + warehouseid + " and r.Name='Delivery Boy' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
        //            var delbs = context.Database.SqlQuery<People>(query).SingleOrDefault();

        //            // var delbs = Peoples.Where(c => c.Mobile.Trim().Equals(Mobile.Trim()) && c.WarehouseId == warehouseid && c.Deleted == false && c.Active == true && c.Department == "Delivery Boy").SingleOrDefault();

        //            if (delbs != null)
        //            {
        //                foreach (var a in assignedorders)
        //                {
        //                    try
        //                    {
        //                        var flag = false;
        //                        foreach (var o in a.orderDetails)
        //                        {

        //                            var cs = DbCurrentStock.Where(x => x.ItemNumber == o.itemNumber && x.WarehouseId == o.WarehouseId).SingleOrDefault();

        //                            // var cs = DbCurrentStock.Where(x => x.ItemNumber == o.itemNumber && x.ItemId == o.ItemId && x.WarehouseId == o.WarehouseId).SingleOrDefault();
        //                            if (o.qty > cs.CurrentInventory)
        //                            {
        //                                flag = true;
        //                                break;
        //                            }
        //                        }
        //                        if (flag == false)
        //                        {
        //                            a.Status = "Ready to Dispatch";
        //                            a.ReadytoDispatchedDate = indianTime;
        //                            //DbOrderMaster.Attach(a);
        //                            this.Entry(a).State = EntityState.Modified;
        //                            this.Commit();

        //                            OrderDispatchedMaster odm = new OrderDispatchedMaster();
        //                            odm.OrderId = a.OrderId;
        //                            odm.Status = a.Status;
        //                            odm.CompanyId = a.CompanyId;
        //                            odm.SalesPersonId = a.SalesPersonId;
        //                            odm.SalesPerson = a.SalesPerson;
        //                            odm.SalesMobile = a.SalesMobile;
        //                            odm.CustomerId = a.CustomerId;
        //                            odm.CustomerName = a.CustomerName;
        //                            odm.ShopName = a.ShopName;
        //                            odm.Skcode = a.Skcode;
        //                            odm.invoice_no = a.invoice_no;
        //                            odm.CustomerCategoryId = a.CustomerCategoryId;
        //                            odm.CustomerCategoryName = a.CustomerCategoryName;
        //                            odm.CustomerType = a.CustomerType;
        //                            odm.Customerphonenum = a.Customerphonenum;
        //                            odm.BillingAddress = a.BillingAddress;
        //                            odm.ShippingAddress = a.ShippingAddress;
        //                            odm.comments = a.comments;
        //                            odm.deliveryCharge = a.deliveryCharge.GetValueOrDefault();
        //                            odm.TotalAmount = a.TotalAmount;
        //                            odm.GrossAmount = a.GrossAmount;
        //                            odm.DiscountAmount = a.DiscountAmount;
        //                            odm.TaxAmount = a.TaxAmount;
        //                            odm.SGSTTaxAmmount = a.SGSTTaxAmmount;
        //                            odm.CGSTTaxAmmount = a.CGSTTaxAmmount;
        //                            odm.CityId = a.CityId;
        //                            odm.WarehouseId = a.WarehouseId;
        //                            odm.WarehouseName = a.WarehouseName;
        //                            odm.active = a.active;
        //                            odm.OrderedDate = a.CreatedDate;
        //                            odm.CreatedDate = a.CreatedDate;
        //                            odm.Deliverydate = a.Deliverydate;
        //                            odm.UpdatedDate = indianTime;
        //                            odm.Deleted = false;
        //                            odm.DivisionId = a.DivisionId;
        //                            odm.ClusterId = a.ClusterId;
        //                            odm.ClusterName = a.ClusterName;
        //                            odm.WalletAmount = a.WalletAmount;
        //                            odm.RewardPoint = a.RewardPoint;
        //                            odm.OrderTakenSalesPersonId = a.OrderTakenSalesPersonId;
        //                            odm.OrderTakenSalesPerson = a.OrderTakenSalesPerson;
        //                            odm.Tin_No = a.Tin_No;
        //                            try
        //                            {
        //                                var cust = Customers.Where(c => c.CustomerId == odm.CustomerId).SingleOrDefault();
        //                                if (cust != null)
        //                                {
        //                                    odm.lg = cust.lg;
        //                                    odm.lat = cust.lat;
        //                                }
        //                            }
        //                            catch (Exception ex) { logger.Warn("Error:110" + ex.Message); }

        //                            try
        //                            {
        //                                //var delb = Peoples.Where(c => c.Mobile.Trim().Equals(Mobile.Trim()) && c.WarehouseId == warehouseid && c.Deleted == false && c.Active == true && c.Department == "Delivery Boy").SingleOrDefault();
        //                                if (delbs != null)
        //                                {
        //                                    odm.DboyName = delbs.DisplayName;
        //                                    odm.DboyMobileNo = delbs.Mobile;
        //                                }

        //                            }
        //                            catch (Exception ex) { logger.Warn("Error:111" + ex.Message); }
        //                            OrderDispatchedMasters.Add(odm);
        //                            this.Commit();

        //                            try
        //                            {
        //                                foreach (var o in a.orderDetails)
        //                                {
        //                                    o.Status = "Ready to Dispatch";
        //                                    //DbOrderDetails.Attach(o);
        //                                    this.Entry(o).State = EntityState.Modified;
        //                                    this.Commit();
        //                                    OrderDispatchedDetails odd = new OrderDispatchedDetails();
        //                                    odd.OrderDispatchedMasterId = odm.OrderDispatchedMasterId;
        //                                    odd.OrderDetailsId = o.OrderDetailsId;
        //                                    odd.OrderId = o.OrderId;
        //                                    odd.Status = o.Status;
        //                                    odd.CustomerId = o.CustomerId;
        //                                    odd.CustomerName = o.CustomerName;
        //                                    odd.City = o.City;
        //                                    odd.Mobile = o.Mobile;
        //                                    odd.OrderDate = o.OrderDate;
        //                                    odd.CompanyId = o.CompanyId;
        //                                    odd.CityId = o.CityId;
        //                                    odd.SizePerUnit = o.SizePerUnit;
        //                                    odd.WarehouseId = o.WarehouseId;
        //                                    odd.WarehouseName = o.WarehouseName;
        //                                    odd.CategoryName = o.CategoryName;
        //                                    odd.isDeleted = false;
        //                                    odd.ItemId = o.ItemId;
        //                                    odd.Itempic = o.Itempic;
        //                                    odd.itemname = o.itemname;
        //                                    odd.HSNCode = o.HSNCode;
        //                                    odd.SellingUnitName = o.SellingUnitName;
        //                                    odd.SellingSku = o.SellingSku;
        //                                    odd.SubcategoryName = o.SubcategoryName;
        //                                    odd.SubsubcategoryName = o.SubsubcategoryName;
        //                                    odd.itemcode = o.itemcode;
        //                                    odd.Barcode = o.Barcode;
        //                                    odd.price = o.price;
        //                                    odd.UnitPrice = o.UnitPrice;
        //                                    odd.Purchaseprice = o.Purchaseprice;
        //                                    odd.MinOrderQty = o.MinOrderQty;
        //                                    odd.MinOrderQtyPrice = o.MinOrderQtyPrice;
        //                                    odd.qty = o.qty;
        //                                    odd.Noqty = o.Noqty;
        //                                    odd.AmtWithoutTaxDisc = o.AmtWithoutTaxDisc;
        //                                    odd.AmtWithoutAfterTaxDisc = o.AmtWithoutAfterTaxDisc;
        //                                    odd.TotalAmountAfterTaxDisc = o.TotalAmountAfterTaxDisc;
        //                                    odd.NetAmmount = o.NetAmmount;
        //                                    odd.DiscountPercentage = o.DiscountPercentage;
        //                                    odd.DiscountAmmount = o.DiscountAmmount;
        //                                    odd.NetAmtAfterDis = o.NetAmtAfterDis;
        //                                    odd.TaxPercentage = o.TaxPercentage;
        //                                    odd.TaxAmmount = o.TaxAmmount;
        //                                    odd.SGSTTaxPercentage = o.SGSTTaxPercentage;
        //                                    odd.SGSTTaxAmmount = o.SGSTTaxAmmount;
        //                                    odd.CGSTTaxPercentage = o.CGSTTaxPercentage;
        //                                    odd.CGSTTaxAmmount = o.CGSTTaxAmmount;
        //                                    odd.TotalAmt = o.TotalAmt;
        //                                    odd.itemNumber = o.itemNumber;
        //                                    odd.CreatedDate = o.CreatedDate;
        //                                    odd.UpdatedDate = indianTime;
        //                                    odd.Deleted = false;
        //                                    OrderDispatchedDetailss.Add(odd);
        //                                    this.Commit();

        //                                    try
        //                                    {
        //                                        var csd = DbCurrentStock.Where(x => x.ItemId == odd.ItemId && x.WarehouseId == warehouseid).SingleOrDefault();
        //                                        if (csd != null && csd.CurrentInventory > 0 && odd.qty > 0)
        //                                        {
        //                                            try
        //                                            {
        //                                                CurrentStockHistory Oss = new CurrentStockHistory();
        //                                                if (csd != null)
        //                                                {
        //                                                    Oss.StockId = csd.StockId;
        //                                                    Oss.ItemNumber = csd.ItemNumber;
        //                                                    Oss.itemname = csd.itemname;
        //                                                    Oss.CurrentInventory = csd.CurrentInventory;
        //                                                    Oss.OdOrPoId = odd.OrderId;
        //                                                    Oss.InventoryOut = Convert.ToInt32(odd.qty);
        //                                                    Oss.TotalInventory = Convert.ToInt32(csd.CurrentInventory - odd.qty);
        //                                                    Oss.WarehouseName = csd.WarehouseName;
        //                                                    Oss.Warehouseid = csd.WarehouseId;
        //                                                    Oss.CompanyId = csd.CompanyId;
        //                                                    Oss.CreationDate = DateTime.Now;
        //                                                    Oss.ItemMultiMRPId = csd.ItemMultiMRPId;
        //                                                    CurrentStockHistoryDb.Add(Oss);
        //                                                    int id = this.Commit();
        //                                                }
        //                                                csd.CurrentInventory = Convert.ToInt32(csd.CurrentInventory - odd.qty);
        //                                                UpdateCurrentStock(csd);
        //                                            }
        //                                            catch (Exception ex) { logger.Warn("Error:112" + ex.Message); }
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {
        //                                        logger.Warn("Error:117" + ex.Message);
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { logger.Warn("Error:113" + ex.Message); }

        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        logger.Warn("Error:114" + ex.Message);
        //                    }
        //                }
        //            }
        //            else
        //            {

        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Warn("Error:115" + ex.Message);
        //    }
        //    return true;
        //}
        #endregion
        #region For Pending Order by Date
        public IEnumerable<OrderMaster> PendingOrderByDate(DateTime startdate, DateTime enddate, int warehouseid)
        {

            var result = DbOrderMaster.Where(x => x.CreatedDate >= startdate && x.CreatedDate <= enddate && x.Status == "Pending" && x.WarehouseId == warehouseid).Include("orderDetails").ToList();/*.OrderByDescending(x => x.orderDetails.Count());*/
            return result;
        }
        #endregion
        #region for Unique ItemCode Generate for Product


        public Int64 MaxNo()
        {
            List<ItemCode> listIC = ItemCodeDb.Where(a => a.ItemCodeNo > 0).ToList();
            Int64 Maxnumber = listIC.Max(x => x.ItemCodeNo);
            return Maxnumber;
        }

        public string gtItemCodeByID()
        {
            Int64 itemNumber = 0;
            try
            {
                itemNumber = MaxNo();
                if (itemNumber > 0)
                {
                    itemNumber++;
                    bool done = false;
                    List<ItemMasterCentral> list = ItemMasterCentralDB.ToList();
                    while (!done)
                    {
                        bool exists = list.Exists(element => element.itemcode == itemNumber.ToString());
                        if (exists)
                        {
                            ItemCode ItemCode = new ItemCode();
                            ItemCode.ItemCodeNo = itemNumber;
                            ItemCode.CreatedDate = indianTime;
                            ItemCodeDb.Add(ItemCode);
                            int id1 = this.Commit();
                            itemNumber++;
                        }
                        else
                        {
                            done = true;
                            return itemNumber.ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Warn(ex.Message);
            }
            return itemNumber.ToString();
        }
        #endregion
        #region For Customer Wallet
        public PaggingData_wt AllWalletHistory(int list, int page, int CustomerId, int CompanyId, int Warehouseid)
        {
            List<CustomerWalletHistoryDTOM> newdata = new List<CustomerWalletHistoryDTOM>();


            var listOrders = (from i in CustomerWalletHistoryDb
                              where i.CustomerId == CustomerId && i.WarehouseId == Warehouseid
                              join k in Customers on i.CustomerId equals k.CustomerId
                              select new CustomerWalletHistoryDTOM
                              {
                                  Id = i.Id,
                                  CustomerId = i.CustomerId,
                                  Name = k.Name,
                                  Skcode = k.Skcode,
                                  City = k.City,
                                  ShopName = k.ShopName,
                                  Mobile = k.Mobile,
                                  Emailid = k.Emailid,
                                  BillingAddress = k.BillingAddress,
                                  NewAddedWAmount = i.NewAddedWAmount,
                                  NewOutWAmount = i.NewOutWAmount,
                                  CreatedDate = i.CreatedDate,
                                  UpdatedDate = i.UpdatedDate,
                                  CompanyId = i.CompanyId,
                                  WarehouseId = i.WarehouseId,
                                  TotalWalletAmount = i.TotalWalletAmount,
                                  rewardPoint = i.rewardPoint,
                                  EarningPoint = i.EarningPoint,
                                  UsedPoint = i.UsedPoint,
                                  TotalEarningPoint = i.TotalEarningPoint,
                                  TotalrewardPoint = i.TotalrewardPoint,
                                  TotalUsedPoint = i.TotalUsedPoint,
                                  MilestonePoint = i.MilestonePoint,
                                  TotalMilestonePoint = i.TotalMilestonePoint,
                                  Through = i.Through + " " + i.comment,
                                  PeopleName = i.PeopleName,
                                  OrderId = i.OrderId
                              }).OrderByDescending(x => x.Id).Skip((page - 1) * list).Take(list).ToList();
            var Hcount = CustomerWalletHistoryDb.Where(x => x.CustomerId == CustomerId && x.WarehouseId == Warehouseid).Count();

            newdata = listOrders;
            PaggingData_wt obj = new PaggingData_wt();
            obj.total_count = Hcount;
            obj.ordermaster = newdata;
            return obj;
        }
        public PaggingData_wt AllWalletHistoryComp(int list, int page, int CustomerId, int CompanyId, int Warehouseid)
        {
            List<CustomerWalletHistoryDTOM> newdata = new List<CustomerWalletHistoryDTOM>();


            var listOrders = (from i in CustomerWalletHistoryDb
                              where i.CustomerId == CustomerId
                              join k in Customers on i.CustomerId equals k.CustomerId
                              select new CustomerWalletHistoryDTOM
                              {
                                  Id = i.Id,
                                  CustomerId = i.CustomerId,
                                  Name = k.Name,
                                  Skcode = k.Skcode,
                                  City = k.City,
                                  ShopName = k.ShopName,
                                  Mobile = k.Mobile,
                                  Emailid = k.Emailid,
                                  BillingAddress = k.BillingAddress,
                                  NewAddedWAmount = i.NewAddedWAmount,
                                  NewOutWAmount = i.NewOutWAmount,
                                  CreatedDate = i.CreatedDate,
                                  UpdatedDate = i.UpdatedDate,
                                  CompanyId = i.CompanyId,
                                  WarehouseId = i.WarehouseId,
                                  TotalWalletAmount = i.TotalWalletAmount,
                                  rewardPoint = i.rewardPoint,
                                  EarningPoint = i.EarningPoint,
                                  UsedPoint = i.UsedPoint,
                                  TotalEarningPoint = i.TotalEarningPoint,
                                  TotalrewardPoint = i.TotalrewardPoint,
                                  TotalUsedPoint = i.TotalUsedPoint,
                                  MilestonePoint = i.MilestonePoint,
                                  TotalMilestonePoint = i.TotalMilestonePoint,
                                  Through = i.Through + " " + i.comment,
                                  OrderId = i.OrderId,
                                  PeopleName = i.PeopleName
                              }).OrderByDescending(x => x.Id).Skip((page - 1) * list).Take(list).ToList();
            var Hcount = CustomerWalletHistoryDb.Where(x => x.CustomerId == CustomerId).Count();
            newdata = listOrders;
            PaggingData_wt obj = new PaggingData_wt();
            obj.total_count = Hcount;
            obj.ordermaster = newdata;
            return obj;
        }

        #endregion
        // Code From taslim For Currency
        public List<DBoyCurrency> getdboysCurrency(int PeopleID)
        {
            try
            {
                var list = DBoyCurrencyDB.Where(a => a.PeopleId == PeopleID && a.Status == "Delivered Boy Currency").ToList();

                return list;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }
        public DBoyCurrency DboyCu(DBoyCurrency objlist, int PeopleID)
        {
            try
            {
                var DBoy = Peoples.Where(x => x.PeopleID == PeopleID && x.Deleted == false).FirstOrDefault();
                if (objlist != null)
                {

                    if (DBoy != null)
                    {

                        string s = objlist.checkamount;
                        string[] values = s.Split(',');


                        foreach (var o in values)
                        {

                            objlist.checkTotalAmount = objlist.checkTotalAmount + Convert.ToInt32(o.Trim());
                        }
                        string s1 = objlist.checknumber;
                        string[] valuess = s1.Split(',');

                    }
                    objlist.UpdatedDate = indianTime;
                    objlist.CreatedDate = indianTime;
                    objlist.PeopleId = DBoy.PeopleID;
                    objlist.Peoplename = DBoy.DisplayName;
                    objlist.Status = "Delivered Boy Currency";
                    DBoyCurrencyDB.Add(objlist);
                    int id = this.Commit();
                }


            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
            return objlist;
        }
        public CurrencyBankSettle BankStock(CurrencyBankSettle objlist, int id)
        {
            try
            {
                if (objlist != null)
                {
                    CurrencyHistory db = CurrencyHistoryDB.Where(x => x.CurrencyHistoryid == id && x.Deleted == false).FirstOrDefault();
                    if (db != null)
                    {
                        db.UpdatedDate = indianTime;
                        db.TotalAmount = db.TotalAmount - objlist.Withdrawl;
                        db.onerscount = db.onerscount - objlist.onerscount;
                        db.OneRupee = db.OneRupee - objlist.OneRupee;
                        db.tworscount = db.tworscount - objlist.tworscount;
                        db.TwoRupee = db.TwoRupee - objlist.TwoRupee;
                        db.fiverscount = db.fiverscount - objlist.fiverscount;
                        db.FiveRupee = db.FiveRupee - objlist.FiveRupee;
                        db.FiveNoteCount = db.FiveNoteCount - objlist.FiveNoteCount;
                        db.FiveNote = db.FiveNote - objlist.FiveNote;
                        db.tenrscount = db.tenrscount - objlist.tenrscount;
                        db.TenRupee = db.TenRupee - objlist.TenRupee;
                        db.TenNoteCount = db.TenNoteCount - objlist.TenNoteCount;
                        db.TenNote = db.TenNote - objlist.TenNote;
                        db.Twentyrscount = db.Twentyrscount - objlist.Twentyrscount;
                        db.TwentyRupee = db.TwentyRupee - objlist.TwentyRupee;
                        db.fiftyrscount = db.fiftyrscount - objlist.fiftyrscount;
                        db.fiftyRupee = db.fiftyRupee - objlist.fiftyRupee;
                        db.hunrscount = db.hunrscount - objlist.hunrscount;
                        db.HunRupee = db.HunRupee - objlist.HunRupee;
                        db.twohunrscount = db.twohunrscount - objlist.twohunrscount;
                        db.twoHunRupee = db.twoHunRupee - objlist.twoHunRupee;
                        db.fivehrscount = db.fivehrscount - objlist.fivehrscount;
                        db.fiveHRupee = db.fiveHRupee - objlist.fiveHRupee;
                        db.twoTHrscount = db.twoTHrscount - objlist.twoTHrscount;
                        db.twoTHRupee = db.twoTHRupee - objlist.twoTHRupee;
                        CurrencyHistoryDB.Attach(db);
                        this.Entry(db).State = EntityState.Modified;
                        this.Commit();
                    }
                    objlist.UpdatedDate = indianTime;
                    objlist.CreatedDate = indianTime;
                    objlist.RemainAmountInStock = Convert.ToDouble(db.TotalAmount);
                    objlist.status = "Pending for Bank Slip";
                    CurrencyBankSettleDB.Add(objlist);
                    int id1 = this.Commit();

                    CurrencyData CD = CurrencyDataDB.Where(x => x.CurrencyDataid == id && x.Deleted == false).FirstOrDefault();

                    BankDisposable BD;

                    try
                    {
                        BD = new BankDisposable();
                        BD = BankDisposableDB.Where(x => x.BankDisposableId == id && x.Deleted == false).FirstOrDefault();
                    }
                    catch (Exception ex)
                    {

                        throw ex;
                    }


                    if (BD != null)
                    {
                        if (BD.CreatedDate.Date < objlist.CreatedDate.Date)
                        {
                            BD.UpdatedDate = indianTime;
                            BD.CreatedDate = indianTime;
                            BD.TotalAmount = CD.TotalAmount - objlist.Withdrawl;
                            BD.onerscount = CD.onerscount - objlist.onerscount;
                            BD.OneRupee = CD.OneRupee - objlist.OneRupee;
                            BD.tworscount = CD.tworscount - objlist.tworscount;
                            BD.TwoRupee = CD.TwoRupee - objlist.TwoRupee;
                            BD.FiveNoteCount = CD.FiveNoteCount - objlist.FiveNoteCount;
                            BD.FiveNote = CD.FiveNote - objlist.FiveNote;
                            BD.fiverscount = CD.fiverscount - objlist.fiverscount;
                            BD.FiveRupee = CD.FiveRupee - objlist.FiveRupee;
                            BD.tenrscount = CD.tenrscount - objlist.tenrscount;
                            BD.TenRupee = CD.TenRupee - objlist.TenRupee;
                            BD.TenNoteCount = CD.TenNoteCount - objlist.TenNoteCount;
                            BD.TenNote = CD.TenNote - objlist.TenNote;
                            BD.Twentyrscount = CD.Twentyrscount - objlist.Twentyrscount;
                            BD.TwentyRupee = CD.TwentyRupee - objlist.TwentyRupee;
                            BD.fiftyrscount = CD.fiftyrscount - objlist.fiftyrscount;
                            BD.fiftyRupee = CD.fiftyRupee - objlist.fiftyRupee;
                            BD.hunrscount = CD.hunrscount - objlist.hunrscount;
                            BD.HunRupee = CD.HunRupee - objlist.HunRupee;
                            BD.twohunrscount = CD.twohunrscount - objlist.twohunrscount;
                            BD.twoHunRupee = CD.twoHunRupee - objlist.twoHunRupee;
                            BD.fivehrscount = CD.fivehrscount - objlist.fivehrscount;
                            BD.fiveHRupee = CD.fiveHRupee - objlist.fiveHRupee;
                            BD.twoTHrscount = CD.twoTHrscount - objlist.twoTHrscount;
                            BD.twoTHRupee = CD.twoTHRupee - objlist.twoTHRupee;
                            BankDisposableDB.Attach(BD);
                            this.Entry(BD).State = EntityState.Modified;
                            this.Commit();
                        }
                        else
                        {
                            BD.UpdatedDate = indianTime;
                            BD.CreatedDate = indianTime;
                            BD.TotalAmount = BD.TotalAmount - objlist.Withdrawl;
                            BD.onerscount = BD.onerscount - objlist.onerscount;
                            BD.OneRupee = BD.OneRupee - objlist.OneRupee;
                            BD.tworscount = BD.tworscount - objlist.tworscount;
                            BD.TwoRupee = BD.TwoRupee - objlist.TwoRupee;
                            BD.FiveNoteCount = BD.FiveNoteCount - objlist.FiveNoteCount;
                            BD.FiveNote = BD.FiveNote - objlist.FiveNote;
                            BD.fiverscount = BD.fiverscount - objlist.fiverscount;
                            BD.FiveRupee = BD.FiveRupee - objlist.FiveRupee;
                            BD.tenrscount = BD.tenrscount - objlist.tenrscount;
                            BD.TenRupee = BD.TenRupee - objlist.TenRupee;
                            BD.TenNoteCount = BD.TenNoteCount - objlist.TenNoteCount;
                            BD.TenNote = BD.TenNote - objlist.TenNote;
                            BD.Twentyrscount = BD.Twentyrscount - objlist.Twentyrscount;
                            BD.TwentyRupee = BD.TwentyRupee - objlist.TwentyRupee;
                            BD.fiftyrscount = BD.fiftyrscount - objlist.fiftyrscount;
                            BD.fiftyRupee = BD.fiftyRupee - objlist.fiftyRupee;
                            BD.hunrscount = BD.hunrscount - objlist.hunrscount;
                            BD.HunRupee = BD.HunRupee - objlist.HunRupee;
                            BD.twohunrscount = BD.twohunrscount - objlist.twohunrscount;
                            BD.twoHunRupee = BD.twoHunRupee - objlist.twoHunRupee;
                            BD.fivehrscount = BD.fivehrscount - objlist.fivehrscount;
                            BD.fiveHRupee = BD.fiveHRupee - objlist.fiveHRupee;
                            BD.twoTHrscount = BD.twoTHrscount - objlist.twoTHrscount;
                            BD.twoTHRupee = BD.twoTHRupee - objlist.twoTHRupee;
                            BankDisposableDB.Attach(BD);
                            this.Entry(BD).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                    else
                    {
                        BD = new BankDisposable();
                        BD.UpdatedDate = indianTime;
                        BD.CreatedDate = indianTime;
                        BD.TotalAmount = CD.TotalAmount - objlist.Withdrawl;
                        BD.onerscount = CD.onerscount - objlist.onerscount;
                        BD.OneRupee = CD.OneRupee - objlist.OneRupee;
                        BD.tworscount = CD.tworscount - objlist.tworscount;
                        BD.TwoRupee = CD.TwoRupee - objlist.TwoRupee;
                        BD.FiveNoteCount = CD.FiveNoteCount - objlist.FiveNoteCount;
                        BD.FiveNote = CD.FiveNote - objlist.FiveNote;
                        BD.fiverscount = CD.fiverscount - objlist.fiverscount;
                        BD.FiveRupee = CD.FiveRupee - objlist.FiveRupee;
                        BD.tenrscount = CD.tenrscount - objlist.tenrscount;
                        BD.TenRupee = CD.TenRupee - objlist.TenRupee;
                        BD.TenNoteCount = CD.TenNoteCount - objlist.TenNoteCount;
                        BD.TenNote = CD.TenNote - objlist.TenNote;
                        BD.Twentyrscount = CD.Twentyrscount - objlist.Twentyrscount;
                        BD.TwentyRupee = CD.TwentyRupee - objlist.TwentyRupee;
                        BD.fiftyrscount = CD.fiftyrscount - objlist.fiftyrscount;
                        BD.fiftyRupee = CD.fiftyRupee - objlist.fiftyRupee;
                        BD.hunrscount = CD.hunrscount - objlist.hunrscount;
                        BD.HunRupee = CD.HunRupee - objlist.HunRupee;
                        BD.twohunrscount = CD.twohunrscount - objlist.twohunrscount;
                        BD.twoHunRupee = CD.twoHunRupee - objlist.twoHunRupee;
                        BD.fivehrscount = CD.fivehrscount - objlist.fivehrscount;
                        BD.fiveHRupee = CD.fiveHRupee - objlist.fiveHRupee;
                        BD.twoTHrscount = CD.twoTHrscount - objlist.twoTHrscount;
                        BD.twoTHRupee = CD.twoTHRupee - objlist.twoTHRupee;
                        BankDisposableDB.Add(BD);
                        this.Commit();
                    }

                    //var data = CurrencyStockDB.ToList();
                    //int CurrencyStockid = 0;
                    //for (int i=0;i<data.Count;i++)
                    //{
                    //    if(data[i].OneRupee > 0 && objlist.OneRupee > 0)
                    //    {
                    //        if (objlist.OneRupee > data[i].OneRupee)
                    //        {
                    //            objlist.OneRupee =objlist.OneRupee - data[i].OneRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.OneRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if(objlist.OneRupee == data[i].OneRupee)
                    //        {
                    //            objlist.OneRupee = objlist.OneRupee - data[i].OneRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.OneRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.OneRupee = data[i].OneRupee- objlist.OneRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.OneRupee = objlist.OneRupee;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}
                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].onerscount > 0 && objlist.onerscount > 0)
                    //    {
                    //        if (objlist.onerscount > data[i].onerscount)
                    //        {
                    //            objlist.onerscount = objlist.onerscount - data[i].onerscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.onerscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.onerscount == data[i].onerscount)
                    //        {
                    //            objlist.onerscount = objlist.onerscount - data[i].onerscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.onerscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.onerscount = data[i].onerscount - objlist.onerscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.onerscount = objlist.onerscount;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}
                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].TwoRupee > 0 && objlist.TwoRupee > 0)
                    //    {
                    //        if (objlist.TwoRupee > data[i].TwoRupee)
                    //        {
                    //            objlist.TwoRupee = objlist.TwoRupee - data[i].TwoRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TwoRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.TwoRupee == data[i].TwoRupee)
                    //        {
                    //            objlist.TwoRupee = objlist.TwoRupee - data[i].TwoRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TwoRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.TwoRupee = data[i].TwoRupee - objlist.TwoRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TwoRupee = objlist.TwoRupee;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}
                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].tworscount > 0 && objlist.tworscount > 0)
                    //    {
                    //        if (objlist.tworscount > data[i].tworscount)
                    //        {
                    //            objlist.tworscount = objlist.tworscount - data[i].tworscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.tworscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.tworscount == data[i].tworscount)
                    //        {
                    //            objlist.tworscount = objlist.tworscount - data[i].tworscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.tworscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.tworscount = data[i].tworscount - objlist.tworscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.tworscount = objlist.tworscount;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}

                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].FiveRupee > 0 && objlist.FiveRupee > 0)
                    //    {
                    //        if (objlist.FiveRupee > data[i].FiveRupee)
                    //        {
                    //            objlist.FiveRupee = objlist.FiveRupee - data[i].FiveRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.FiveRupee == data[i].FiveRupee)
                    //        {
                    //            objlist.FiveRupee = objlist.FiveRupee - data[i].FiveRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.FiveRupee = data[i].FiveRupee - objlist.FiveRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveRupee = objlist.FiveRupee;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}

                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].fiverscount > 0 && objlist.fiverscount > 0)
                    //    {
                    //        if (objlist.fiverscount > data[i].fiverscount)
                    //        {
                    //            objlist.fiverscount = objlist.fiverscount - data[i].fiverscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.fiverscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.fiverscount == data[i].fiverscount)
                    //        {
                    //            objlist.fiverscount = objlist.fiverscount - data[i].fiverscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.fiverscount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.fiverscount = data[i].fiverscount - objlist.fiverscount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.fiverscount = objlist.fiverscount;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //    }
                    //}

                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].FiveNote > 0 && objlist.FiveNote > 0)
                    //    {
                    //        if (objlist.FiveNote > data[i].FiveNote)
                    //        {
                    //            objlist.FiveNote = objlist.FiveNote - data[i].FiveNote;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNote = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.FiveNote == data[i].FiveNote)
                    //        {
                    //            objlist.FiveNote = objlist.FiveNote - data[i].FiveNote;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNote = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.FiveNote = data[i].FiveNote - objlist.FiveNote;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNote = objlist.FiveNote;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //    }
                    //}

                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].FiveNoteCount > 0 && objlist.FiveNoteCount > 0)
                    //    {
                    //        if (objlist.FiveNoteCount > data[i].FiveNoteCount)
                    //        {
                    //            objlist.FiveNoteCount = objlist.FiveNoteCount - data[i].FiveNoteCount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNoteCount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.FiveNoteCount == data[i].FiveNoteCount)
                    //        {
                    //            objlist.FiveNoteCount = objlist.FiveNoteCount - data[i].FiveNoteCount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNoteCount = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.FiveNoteCount = data[i].FiveNoteCount - objlist.FiveNoteCount;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.FiveNoteCount = objlist.FiveNoteCount;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}

                    //for (int i = 0; i < data.Count; i++)
                    //{
                    //    if (data[i].TenRupee > 0 && objlist.TenRupee > 0)
                    //    {
                    //        if (objlist.TenRupee > data[i].TenRupee)
                    //        {
                    //            objlist.TenRupee = objlist.TenRupee - data[i].TenRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TenRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //        }
                    //        else if (objlist.TenRupee == data[i].TenRupee)
                    //        {
                    //            objlist.TenRupee = objlist.TenRupee - data[i].TenRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TenRupee = 0;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }
                    //        else
                    //        {
                    //            objlist.TenRupee = data[i].TenRupee - objlist.TenRupee;
                    //            CurrencyStockid = data[i].CurrencyStockid;
                    //            var dataforCurrecny = CurrencyStockDB.Where(x => x.CurrencyStockid == CurrencyStockid).FirstOrDefault();
                    //            dataforCurrecny.TenRupee = objlist.TenRupee;
                    //            CurrencyStockDB.Attach(dataforCurrecny);
                    //            this.Entry(dataforCurrecny).State = EntityState.Modified;
                    //            this.SaveChanges();
                    //            break;
                    //        }

                    //    }
                    //}
                    if (id1 > 0)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
            return objlist;
        }
        public CurrencyBankSettle BankCurrencyPut(CurrencyBankSettle objlist)
        {
            logger.Info("put Complain: ");
            CurrencyBankSettle comp = CurrencyBankSettleDB.Where(x => x.CurrencyBankSettleId == objlist.CurrencyBankSettleId).FirstOrDefault();
            try
            {
                if (comp != null)
                {
                    if (objlist.DepositedBankSlip != null)
                    {
                        comp.UpdatedDate = indianTime;
                        comp.status = "Bank Settled";
                        comp.DepositedBankSlip = objlist.DepositedBankSlip;
                        CurrencyBankSettleDB.Attach(comp);
                        this.Entry(comp).State = EntityState.Modified;
                        this.Commit();
                    }
                }
                else
                {
                    logger.Error("This Complain is not Found int put " + objlist.Name);
                    return objlist;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error in put Complain " + ex.Message);
            }
            return comp;
        }
        public IEnumerable<CurrencyStock> AllStockCurrencys(string Stock_status)
        {
            if (CurrencyHistoryDB.AsEnumerable().Count() > 0)
            {
                DateTime todaydate = DateTime.Now.Date;
                var data = (from t in CurrencyStockDB where t.Deleted == false && t.CreatedDate < todaydate select t).AsEnumerable();
                return data;
            }
            else
            {
                List<CurrencyStock> StockCurrency = new List<CurrencyStock>();
                return StockCurrency.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyHistory> GetAllStockCurrencys()
        {
            var data = CurrencyHistoryDB.ToList();
            return data;
        }
        //public IEnumerable<CurrencyBankSettle> AllStockCurrencysHistory(string Stock_status)
        //{
        //    if (CurrencyBankSettleDB.AsEnumerable().Count() > 0)
        //    {

        //        return CurrencyBankSettleDB.Where(p => p.Deleted == false).AsEnumerable();

        //    }
        //    else
        //    {
        //        List<CurrencyBankSettle> StockCurrency = new List<CurrencyBankSettle>();
        //        return StockCurrency.AsEnumerable();
        //    }
        //}
        //public IEnumerable<CurrencyStock> AllStockCurrencysHistoryin(string Stock_status)
        //{
        //    if (CurrencyStockDB.AsEnumerable().Count() > 0)
        //    {

        //        return CurrencyStockDB.Where(p => p.Deleted == false).AsEnumerable();

        //    }
        //    else
        //    {
        //        List<CurrencyStock> StockCurrency = new List<CurrencyStock>();
        //        return StockCurrency.AsEnumerable();
        //    }
        //}
        #region FOr Currency
        public IEnumerable<CurrencyStock> DelivaryBoyTotalData()
        {
            if (CurrencyHistoryDB.AsEnumerable().Count() > 0)
            {

                //DateTime Today = DateTime.Now;               
                var data = (from t in CurrencyStockDB where t.Deleted == false && t.CreatedDate.Year == DateTime.Now.Year && t.CreatedDate.Month == DateTime.Now.Month && t.CreatedDate.Day == DateTime.Now.Day select t).AsEnumerable();
                return data;
                //return CurrencyHistoryDB.Where(p => p.Deleted == false).AsEnumerable();

            }
            else
            {
                List<CurrencyStock> StockCurrency = new List<CurrencyStock>();
                return StockCurrency.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyStock> GetDboyCurrencyData()
        {
            if (CurrencyHistoryDB.AsEnumerable().Count() > 0)
            {
                //DateTime Today = DateTime.Now;
                //string Today = d1.ToString("yyyy/MM/dd");               
                var data = (from t in CurrencyStockDB where t.Deleted == false && t.CreatedDate.Year == DateTime.Now.Year && t.CreatedDate.Month == DateTime.Now.Month && t.CreatedDate.Day == DateTime.Now.Day select t).AsEnumerable();
                //var data1 = data.ToList();
                //for(int i=0;i<data.Count()-1;i++)
                //{

                //}

                return data;
                //return CurrencyHistoryDB.Where(p => p.Deleted == false).AsEnumerable();

            }
            else
            {
                List<CurrencyStock> StockCurrency = new List<CurrencyStock>();
                return StockCurrency.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyBankSettle> AllBankStockCurrencysByDate()
        {
            if (CurrencyBankSettleDB.AsEnumerable().Count() > 0)
            {
                //DateTime todaydate = DateTime.Now;               
                var data = (from t in CurrencyBankSettleDB where t.Deleted == false && t.CreatedDate.Year == DateTime.Now.Year && t.CreatedDate.Month == DateTime.Now.Month && t.CreatedDate.Day == DateTime.Now.Day select t).AsEnumerable();
                return data;

            }
            else
            {
                List<CurrencyBankSettle> BankStockCurrency = new List<CurrencyBankSettle>();
                return BankStockCurrency.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyBankSettle> AllBankStockCurrencys()
        {
            if (CurrencyBankSettleDB.AsEnumerable().Count() > 0)
            {
                //string todaydate = DateTime.Now.ToString("yyyy/MM/dd");
                //DateTime todaydate = DateTime.Today.Year;             
                var data = (from t in CurrencyBankSettleDB where t.Deleted == false && t.CreatedDate.Year == DateTime.Now.Year && t.CreatedDate.Month == DateTime.Now.Month && t.CreatedDate.Day == DateTime.Now.Day select t).AsEnumerable();
                //return CurrencyBankSettleDB.Where(p => p.Deleted == false).AsEnumerable();
                return data;

            }
            else
            {
                List<CurrencyBankSettle> BankStockCurrency = new List<CurrencyBankSettle>();
                return BankStockCurrency.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyBankSettle> Imagegetview(int id)
        {
            if (CurrencyBankSettleDB.AsEnumerable().Count() > 0)
            {

                return CurrencyBankSettleDB.Where(p => p.CurrencyBankSettleId == id && p.Deleted == false).AsEnumerable();

            }
            else
            {
                List<CurrencyBankSettle> StockCurrencyy1 = new List<CurrencyBankSettle>();
                return StockCurrencyy1.AsEnumerable();
            }
        }
        public IEnumerable<CheckCurrency> AllStockCurrencyscheck(string status)
        {
            if (CheckCurrencyDB.AsEnumerable().Count() > 0)
            {

                return CheckCurrencyDB.Where(p => p.Deleted == false).AsEnumerable();

            }
            else
            {
                List<CheckCurrency> Stockcheck = new List<CheckCurrency>();
                return Stockcheck.AsEnumerable();
            }
        }
        public IEnumerable<CurrencyHistory> TotalStockCurrencys()
        {
            if (CurrencyHistoryDB.AsEnumerable().Count() > 0)
            {
                return CurrencyHistoryDB.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<CurrencyHistory> StockCurrencyy = new List<CurrencyHistory>();
                return StockCurrencyy.AsEnumerable();
            }
        }
        #endregion
        #region For Adding Agent
        public int AddAgent(int compid, int Warehouse_id, People aj)
        {
            People agi = new People();
            var agentdata = Peoples.Where(a => a.AgentCode == aj.AgentCode && a.Deleted == false).FirstOrDefault();
            if (agentdata == null)
            {
                agi.DisplayName = aj.DisplayName;
                agi.CreatedDate = DateTime.Now;
                agi.UpdatedDate = DateTime.Now;
                agi.Deleted = false;
                agi.Active = true;
                agi.CompanyId = compid;
                agi.WarehouseId = Warehouse_id;
                agi.Department = "Agent";
                agi.AgentCode = aj.AgentCode;
                //agi.Permissions = "Agent";
                agi.Type = "Agent";
                Peoples.Add(agi);
                int id1 = this.Commit();
                return id1;
            }
            else
            {
                return 2;
            }

        }
        public int AddAgentAmount(int compid, int Warehouse_id, AgentAmount aj)
        {
            AgentAmount agi = new AgentAmount();
            //var agentdata = AgentAmountDb.Where(a => a.AgentId == aj.AgentId && a.IsDeleted==false).SingleOrDefault();
            var agentdata = (from a in AgentAmountDb where a.AgentId == aj.AgentId orderby a.UpdatedDate descending select a).FirstOrDefault();
            if (agentdata == null)
            {
                People p = Peoples.Where(a => a.PeopleID == aj.AgentId).SingleOrDefault();
                agi.AgentId = aj.AgentId;
                agi.AgentAmounts = aj.AgentAddedAmount;
                agi.AgentAddedAmount = aj.AgentAddedAmount;
                agi.CreatedDate = DateTime.Now;
                agi.UpdatedDate = DateTime.Now;
                agi.IsDeleted = false;
                agi.IsActive = true;
                agi.CompanyId = compid;
                agi.WarehouseId = Warehouse_id;
                agi.AgentCode = p.AgentCode;
                agi.AgentPreAmount = 0;
                AgentAmountDb.Add(agi);
                int id1 = this.Commit();
                return id1;
            }
            else
            {
                People p = Peoples.Where(a => a.PeopleID == aj.AgentId).SingleOrDefault();
                agi.AgentId = aj.AgentId;
                var data1 = (from a in AgentAmountDb where a.AgentCode == p.AgentCode orderby a.UpdatedDate descending select a).FirstOrDefault();
                agi.AgentAmounts = data1.AgentAmounts + aj.AgentAddedAmount;
                agi.AgentAddedAmount = aj.AgentAddedAmount;
                agi.CreatedDate = DateTime.Now;
                agi.UpdatedDate = DateTime.Now;
                agi.IsDeleted = false;
                agi.IsActive = true;
                agi.CompanyId = compid;
                agi.WarehouseId = Warehouse_id;
                agi.AgentCode = p.AgentCode;
                agi.AgentPreAmount = data1.AgentAmounts;
                AgentAmountDb.Add(agi);
                int id1 = this.Commit();
                return id1;
            }

        }
        public int UpdateAgentAmount(int compid, int Warehouse_id, AgentAmount aj)
        {
            AgentAmount agi = new AgentAmount();
            People p = Peoples.Where(a => a.PeopleID == aj.AgentId).SingleOrDefault();
            agi.AgentAmountId = aj.AgentAmountId;
            agi.AgentId = aj.AgentId;
            agi.AgentAmounts = aj.AgentAmounts;
            agi.CreatedDate = DateTime.Now;
            agi.UpdatedDate = DateTime.Now;
            agi.IsDeleted = false;
            agi.IsActive = true;
            agi.CompanyId = compid;
            agi.WarehouseId = Warehouse_id;
            agi.AgentCode = p.AgentCode;
            this.Entry(agi).State = EntityState.Modified;
            this.Commit();
            return 1;
        }
        public PaggingData_AgentAmount GetAgentAllOrder(int Warehouse_id, int compid, string AgentCode, int list, int page)
        {
            List<AgentAmount> newdata = new List<AgentAmount>();
            newdata = AgentAmountDb.Where(x => x.WarehouseId == Warehouse_id && x.CompanyId == compid && x.AgentCode == AgentCode && x.IsDeleted == false).OrderByDescending(x => x.CreatedDate).Skip((page - 1) * list).Take(list).ToList();
            PaggingData_AgentAmount obj = new PaggingData_AgentAmount();
            obj.total_count = AgentAmountDb.Where(x => x.WarehouseId == Warehouse_id && x.CompanyId == compid && x.AgentCode == AgentCode && x.IsDeleted == false).Count();
            obj.agentamount = newdata;
            return obj;
        }
        public bool DeleteAgentAmount(int id, int CompanyId, int Warehouse_id)
        {
            try
            {
                AgentAmount agentamount = AgentAmountDb.Where(x => x.AgentAmountId == id && x.IsDeleted == false && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                if (agentamount != null)
                {
                    agentamount.IsActive = false;
                    agentamount.IsDeleted = true;
                    AgentAmountDb.Attach(agentamount);
                    this.Entry(agentamount).State = EntityState.Modified;
                    this.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        public bool DeleteAgent(int AgentId, int CompanyId, int Warehouse_id)
        {
            try
            {
                People Peopledata = Peoples.Where(x => x.PeopleID == AgentId && x.Deleted == false && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                if (Peopledata != null)
                {
                    Peopledata.Active = false;
                    Peopledata.Deleted = true;
                    //Peoples.Attach(Peopledata);
                    this.Entry(Peopledata).State = EntityState.Modified;
                    this.Commit();
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion
        #region
        public dynamic AddDeliveryBoycurrencystock(List<DBoyCurrency> cstkCollection)
        {
            logger.Info("start addbulk");
            try
            {
                foreach (var o in cstkCollection)
                {
                    try
                    {

                        DBoyCurrencyDB.Add(o);
                        int id = this.Commit();
                    }
                    catch (Exception ex)
                    {
                        logger.Info("error in adding new current stock" + ex);
                    }
                }

            }

            catch (Exception ex)
            {
                logger.Info("error in adding currentstock collection" + ex);
            }
            return null;
        }

        //By Sachin For Insertion in table AgentDatas
        public DeliveryIssuance AddDatainAgentDatas(DeliveryIssuance obj)
        {
            try
            {
                using (var context = new AuthContext())
                {

                    People p = Peoples.Where(a => a.PeopleID == obj.PeopleID).SingleOrDefault();
                    //AgentAmount aa = AgentAmountDb.Where(a => a.AgentCode == p.AgentCode && a.IsDeleted == false).SingleOrDefault();
                    AgentAmount aa = (from a in AgentAmountDb where a.AgentCode == p.AgentCode orderby a.UpdatedDate descending select a).FirstOrDefault();
                    if (aa != null)
                    {

                        AgentData ad = new AgentData();
                        foreach (var o in obj.AssignedOrders)
                        {

                            //var data2 = AgentDataDB.Where(a => a.DebitIssueId == Convert.ToString(o.DeliveryIssuanceId));
                            string dii = Convert.ToString(obj.DeliveryIssuanceId);
                            var data2 = (from a in AgentDataDB where a.DebitIssueId == dii orderby a.UpdatedDate descending select a).FirstOrDefault();
                            if (data2 == null)
                            {
                                var dataAgent = AgentDataDB.ToList();
                                if (dataAgent.Count != 0)
                                {
                                    AgentData aaa = (from a in AgentDataDB where a.AgentCode == aa.AgentCode orderby a.UpdatedDate descending select a).FirstOrDefault();
                                    if (aaa != null)
                                    {
                                        if (aaa.DebitIssuedAmount == Convert.ToDouble(aa.AgentAmounts))
                                        {
                                            ad.AdvanceDepositedAmount = aaa.DebitIssuedAmount;
                                        }
                                        else
                                        {
                                            ad.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                        }
                                        this.Entry(aaa).State = EntityState.Modified;
                                        this.Commit();
                                    }
                                    else
                                    {
                                        ad.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                    }

                                }
                                else
                                {
                                    ad.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                }
                                var data = OrderDispatchedMasters.Where(a => a.OrderId == o.OrderId).Include("orderDetails").SingleOrDefault();

                                ad.CompanyId = Convert.ToInt32(obj.CompanyId);
                                ad.WarehouseId = Convert.ToInt32(obj.WarehouseId);
                                ad.AgentCode = p.AgentCode;

                                //ad.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                //var data1 = AgentDataDB.Where(a => a.AgentCode == aa.AgentCode).OrderBy(a=>a.);
                                //var data1 = (from a in AgentDataDB where a.AgentCode == aa.AgentCode orderby a.UpdatedDate descending select a).FirstOrDefault();
                                //if (data1 == null)
                                //{
                                //    ad.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                //}
                                //else
                                //{
                                //    ad.AdvanceDepositedAmount = Convert.ToDouble(data1.DebitIssuedAmount);
                                //}
                                ad.DebitIssueId = Convert.ToString(obj.DeliveryIssuanceId);
                                ad.CreaditIssuedAmount = data.GrossAmount;
                                ad.DebitIssuedAmount = Convert.ToDouble(ad.AdvanceDepositedAmount) - data.GrossAmount;
                                ad.CreaditIssuedAmountFromCash = data.CashAmount;
                                ad.CreaditIssuedAmountFromChecq = data.CheckAmount;
                                ad.CreaditIssuedAmountFromElectronic = data.ElectronicAmount;
                                ad.Deleted = false;
                                ad.CreatedDate = DateTime.Now;
                                ad.UpdatedDate = DateTime.Now;
                                AgentDataDB.Add(ad);
                                int id = this.Commit();
                                //var data3 = AgentAmountDb.Where(a => a.AgentCode == p.AgentCode).SingleOrDefault();
                                //int did = obj.DeliveryIssuanceId;

                                AgentData adr = AgentDataDB.Where(a => a.Id == ad.Id).SingleOrDefault();
                                var data5 = (from a in AgentAmountDb where a.DebitIssueId == obj.DeliveryIssuanceId orderby a.UpdatedDate descending select a).FirstOrDefault();
                                if (data5 != null && data5.DebitIssueId != 0)
                                {
                                    AgentAmount data3 = (from a in AgentAmountDb where a.DebitIssueId == obj.DeliveryIssuanceId orderby a.UpdatedDate descending select a).FirstOrDefault();
                                    data3.AgentAmounts = data5.DebitIssuedAmount - data.GrossAmount;
                                    data3.DebitIssuedAmount = Convert.ToDouble(data5.DebitIssuedAmount) - data.GrossAmount;
                                    data3.CreaditIssuedAmount = Convert.ToDouble(data2.CreaditIssuedAmount) + data.GrossAmount;
                                    data3.CompanyId = Convert.ToInt32(obj.CompanyId);
                                    data3.WarehouseId = Convert.ToInt32(obj.WarehouseId);
                                    data3.IsDeleted = false;
                                    data3.IsActive = true;
                                    data3.AgentCode = p.AgentCode;


                                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.AgentCode='" + p.AgentCode + "' and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                                    var people = context.Database.SqlQuery<People>(query).FirstOrDefault();

                                    //var people = Peoples.Where(pe => pe.AgentCode == p.AgentCode && pe.Department == "Agent").FirstOrDefault();

                                    data3.AgentId = people.PeopleID;
                                    data3.CreatedDate = DateTime.Now;
                                    data3.UpdatedDate = DateTime.Now;
                                    data3.AgentPreAmount = aa.AgentAmounts;
                                    this.Entry(data3).State = EntityState.Modified;
                                    this.Commit();

                                }
                                else
                                {
                                    AgentAmount data3 = new AgentAmount();
                                    data3.AgentAmounts = ad.AdvanceDepositedAmount - data.GrossAmount;
                                    data3.DebitIssuedAmount = Convert.ToDouble(ad.AdvanceDepositedAmount) - data.GrossAmount;
                                    data3.CreaditIssuedAmount = data.GrossAmount;
                                    data3.CompanyId = Convert.ToInt32(obj.CompanyId);
                                    data3.WarehouseId = Convert.ToInt32(obj.WarehouseId);
                                    data3.IsDeleted = false;
                                    data3.IsActive = true;
                                    data3.AgentCode = p.AgentCode;
                                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.AgentCode='" + p.AgentCode + "' and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                                    var people = context.Database.SqlQuery<People>(query).FirstOrDefault();
                                    //var people = Peoples.Where(pe => pe.AgentCode == p.AgentCode && pe.Department == "Agent").FirstOrDefault();
                                    data3.AgentId = people.PeopleID;
                                    data3.CreatedDate = DateTime.Now;
                                    data3.UpdatedDate = DateTime.Now;
                                    data3.AgentPreAmount = aa.AgentAmounts;
                                    data3.DebitIssueId = obj.DeliveryIssuanceId;
                                    AgentAmountDb.Add(data3);
                                    //this.Ad(data3).State = EntityState.Modified;
                                    this.Commit();
                                }

                            }
                            else
                            {
                                AgentData aaa = (from a in AgentDataDB where a.AgentCode == aa.AgentCode orderby a.UpdatedDate descending select a).FirstOrDefault();
                                if (aaa.DebitIssuedAmount == Convert.ToDouble(aa.AgentAmounts))
                                {
                                    aaa.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                }
                                else
                                {
                                    aaa.AdvanceDepositedAmount = Convert.ToDouble(aa.AgentAmounts);
                                }
                                this.Entry(aaa).State = EntityState.Modified;
                                this.Commit();
                                AgentData adr = AgentDataDB.Where(a => a.Id == ad.Id).SingleOrDefault();
                                var data = OrderDispatchedMasters.Where(a => a.OrderId == o.OrderId).Include("orderDetails").SingleOrDefault();
                                adr.CreaditIssuedAmount = Convert.ToDouble(data2.CreaditIssuedAmount) + data.GrossAmount;
                                adr.DebitIssueId = data2.DebitIssueId;
                                adr.DebitIssuedAmount = Convert.ToDouble(adr.DebitIssuedAmount) - data.GrossAmount;
                                adr.CreatedDate = DateTime.Now;
                                adr.UpdatedDate = DateTime.Now;
                                //adr.AdvanceDepositedAmount= Convert.ToDouble(adr.AdvanceDepositedAmount) - data.GrossAmount;
                                this.Entry(adr).State = EntityState.Modified;
                                this.Commit();
                                //var data3 = AgentAmountDb.Where(a => a.AgentCode == p.AgentCode).SingleOrDefault();
                                var data5 = (from a in AgentAmountDb where a.DebitIssueId == obj.DeliveryIssuanceId orderby a.UpdatedDate descending select a).FirstOrDefault();
                                if (data5 != null && data5.DebitIssueId != 0)
                                {
                                    AgentAmount data3 = (from a in AgentAmountDb where a.DebitIssueId == obj.DeliveryIssuanceId orderby a.UpdatedDate descending select a).FirstOrDefault();
                                    data3.AgentAmounts = data5.DebitIssuedAmount - data.GrossAmount;
                                    data3.DebitIssuedAmount = Convert.ToDouble(data5.DebitIssuedAmount) - data.GrossAmount;
                                    data3.CreaditIssuedAmount = Convert.ToDouble(data2.CreaditIssuedAmount);
                                    data3.CompanyId = Convert.ToInt32(obj.CompanyId);
                                    data3.WarehouseId = Convert.ToInt32(obj.WarehouseId);
                                    data3.IsDeleted = false;
                                    data3.IsActive = true;
                                    data3.AgentCode = p.AgentCode;
                                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.AgentCode='" + p.AgentCode + "' and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                                    var people = context.Database.SqlQuery<People>(query).FirstOrDefault();
                                    // var people = Peoples.Where(pe => pe.AgentCode == p.AgentCode && pe.Department == "Agent").FirstOrDefault();
                                    data3.AgentId = people.PeopleID;
                                    data3.CreatedDate = DateTime.Now;
                                    data3.UpdatedDate = DateTime.Now;
                                    data3.AgentPreAmount = aa.AgentAmounts;
                                    this.Entry(data3).State = EntityState.Modified;
                                    this.Commit();
                                }
                                else
                                {

                                    AgentAmount data3 = new AgentAmount();
                                    data3.AgentAmounts = ad.AdvanceDepositedAmount - data.GrossAmount;
                                    data3.DebitIssuedAmount = Convert.ToDouble(ad.AdvanceDepositedAmount) - data.GrossAmount;
                                    data3.CreaditIssuedAmount = data.GrossAmount;
                                    data3.CompanyId = Convert.ToInt32(obj.CompanyId);
                                    data3.WarehouseId = Convert.ToInt32(obj.WarehouseId);
                                    data3.IsDeleted = false;
                                    data3.IsActive = true;
                                    data3.AgentCode = p.AgentCode;
                                    string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.AgentCode='" + p.AgentCode + "' and r.Name='Agent' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                                    var people = context.Database.SqlQuery<People>(query).FirstOrDefault();
                                    //var people = Peoples.Where(pe => pe.AgentCode == p.AgentCode && pe.Department == "Agent").FirstOrDefault();
                                    data3.AgentId = people.PeopleID;
                                    data3.CreatedDate = DateTime.Now;
                                    data3.UpdatedDate = DateTime.Now;
                                    data3.AgentPreAmount = aa.AgentAmounts;
                                    data3.DebitIssueId = obj.DeliveryIssuanceId;
                                    AgentAmountDb.Add(data3);
                                    //this.Ad(data3).State = EntityState.Modified;
                                    this.Commit();
                                }
                            }

                        }

                    }
                    return obj;
                }
            }


            catch (Exception ex)
            {
                return obj;
            }

        }

        public List<AgentData> GetAgentData(string issurenceid, int compid, int Warehouse_id)
        {
            var data = AgentDataDB.Where(x => x.DebitIssueId == issurenceid && x.CompanyId == compid && x.WarehouseId == Warehouse_id).ToList();

            return data;
        }
        #endregion
        #region For Bulk Mapping for Customer
        public List<CustSupplier> addcustsuppliermappingForAll(List<CustSupplier> obj, int compid, int wid)
        {
            try
            {
                int wids = obj[0].WarehouseId;
                var warehouse = Warehouses.Where(y => y.WarehouseId == wids).FirstOrDefault();

                foreach (var o in obj)
                {
                    //CustWarehouse cust = CustWarehouseDB.Where(x => x.CustomerId == o.CustomerId && x.WarehouseId == wids).FirstOrDefault();
                    Customer cust = Customers.Where(x => x.CustomerId == o.CustomerId && x.Warehouseid == wids).FirstOrDefault();

                    if (cust == null)
                    {
                        //CustWarehouse cs = new CustWarehouse();
                        Customer cs = new Customer();
                        //cs.ExecutiveId = 0;
                        cs.CustomerId = o.CustomerId;
                        //cs.WarehouseId = warehouse.WarehouseId;
                        cs.Warehouseid = warehouse.WarehouseId;
                        cs.WarehouseName = warehouse.WarehouseName;
                        cs.CompanyId = warehouse.CompanyId;
                        cs.CreatedDate = indianTime;
                        cs.UpdatedDate = indianTime;
                        cs.CompanyId = compid;
                        //CustWarehouseDB.Add(cs);
                        Customers.Add(cs);
                        int id = this.Commit();
                        try
                        {
                            Customer c = Customers.Where(x => x.CustomerId == cs.CustomerId).FirstOrDefault();
                            c.Warehouseid = warehouse.WarehouseId;
                            c.WarehouseName = warehouse.WarehouseName;
                            c.CompanyId = warehouse.CompanyId;
                            c.UpdatedDate = indianTime;
                            //Customers.Attach(c);
                            this.Entry(c).State = EntityState.Modified;
                            this.Commit();
                        }
                        catch (Exception ex)
                        {
                            logger.Error(ex.Message);
                        }
                    }
                    else
                    {
                        cust.Deleted = false;
                        cust.UpdatedDate = indianTime;
                        //CustWarehouseDB.Attach(cust);
                        this.Entry(cust).State = EntityState.Modified;
                        this.Commit();
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            return obj;
        }
        #endregion
        #region for BrandItem SK Promotion
        public List<ItemMaster> ItembyBrand(int SubSubCategoryId, int WarehouseId)
        {
            List<ItemMaster> item = itemMasters.Where(w => w.WarehouseId == WarehouseId && w.SubsubCategoryid == SubSubCategoryId && w.Deleted == false && w.active == true).ToList();
            return item;
        }
        public List<SubsubCategory> subsubcategorybyWarehouse(int id, int compid)
        {
            List<SubsubCategory> cat = SubsubCategorys.Where(w => w.Deleted == false && w.IsActive == true).ToList();
            return cat;
        }
        public List<ItemMaster> UpdateItemMaster(List<ItemMaster> itm, int compid)
        {
            foreach (var k in itm)
            {
                try
                {
                    ItemMaster Itmt = itemMasters.Where(s => s.ItemId == k.ItemId && s.Deleted == false).SingleOrDefault();
                    Itmt.IsPramotionalItem = k.IsPramotionalItem;
                    //itemMasters.Attach(Itmt);
                    this.Entry(Itmt).State = EntityState.Modified;
                    this.Commit();

                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
            }
            return itm;
        }
        #endregion
        #region Check dialpoint expired
        // get DialPoint
        public List<DialPoint> GetDialData(int CustomerId)
        {
            try
            {
                var List = DialPointDB.Where(x => x.Deleted == false && x.UsedUnused == false && x.expired == false && x.CustomerId == CustomerId).ToList();

                return List;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        //update DialPoint
        public DialPoint updateDialPoint(int Id)
        {
            var dialData = DialPointDB.Where(x => x.Id == Id).FirstOrDefault();

            if (dialData != null)
            {
                dialData.UsedUnused = true;
                //dialData.expired = true;
                dialData.UpdatedDate = indianTime;
                DialPointDB.Attach(dialData);
                this.Entry(dialData).State = EntityState.Modified;
                this.Commit();
                try
                {
                    Wallet wlt = WalletDb.Where(c => c.CustomerId == dialData.CustomerId).SingleOrDefault();
                    if (wlt != null)
                    {
                        CustomerWalletHistory CWH = new CustomerWalletHistory();
                        CWH.WarehouseId = 1;
                        CWH.CompanyId = 1;
                        CWH.CustomerId = wlt.CustomerId;
                        CWH.Through = "From Dial Point";
                        CWH.NewAddedWAmount = dialData.point;
                        CWH.OrderId = dialData.OrderId;
                        CWH.TotalWalletAmount = wlt.TotalAmount + dialData.point;
                        CWH.CreatedDate = indianTime;
                        CWH.UpdatedDate = indianTime;
                        CustomerWalletHistoryDb.Add(CWH);
                        int idd = this.Commit();


                        wlt.TotalAmount += dialData.point;
                        wlt.TransactionDate = indianTime;
                        WalletDb.Attach(wlt);
                        Entry(wlt).State = EntityState.Modified;
                        Commit();
                    }
                    else
                    {
                    }
                }
                catch (Exception ex)
                {
                }
            }
            return dialData;
        }
        #endregion
        #region For Promotion on app
        public string UpdateBulkCurrentStock(int CompanyId, int Warehouse_id, List<CurrentStock> SelectedItem)
        {
            try
            {

                var currentstock = DbCurrentStock.Where(x => x.CurrentInventory <= 0 && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).ToList();
                foreach (var data1 in currentstock)
                {
                    var kk = DbCurrentStock.Where(x => x.StockId == data1.StockId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsEmptyStock = false;
                    //DbCurrentStock.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                foreach (var data2 in SelectedItem)
                {
                    var kk = DbCurrentStock.Where(x => x.StockId == data2.StockId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsEmptyStock = true;
                    //DbCurrentStock.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                return "success";
            }
            catch (Exception ee)
            {
                return ee.Message;
            }
        }
        public string UpdateBulkItemMaster(int CompanyId, int Warehouse_id, List<ItemMaster> SelectedItem)
        {
            try
            {

                var itemmaster = itemMasters.Where(x => x.Deleted == false && x.active == true && x.MinOrderQty >= 10 && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).ToList();
                foreach (var data1 in itemmaster)
                {
                    var kk = itemMasters.Where(x => x.ItemId == data1.ItemId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsBulkItem = false;
                    //itemMasters.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                foreach (var data2 in SelectedItem)
                {
                    var kk = itemMasters.Where(x => x.ItemId == data2.ItemId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsBulkItem = true;
                    //itemMasters.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                return "success";
            }
            catch (Exception ee)
            {
                return ee.Message;
            }
        }
        public string UpdateHighDP(int CompanyId, int Warehouse_id, List<ItemMaster> SelectedItem)
        {
            try
            {

                var itemmaster = itemMasters.Where(x => x.Deleted == false && x.active == true && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).ToList();
                foreach (var data1 in itemmaster)
                {
                    var kk = itemMasters.Where(x => x.ItemId == data1.ItemId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsHighestDPItem = false;
                    //itemMasters.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                foreach (var data2 in SelectedItem)
                {
                    var kk = itemMasters.Where(x => x.ItemId == data2.ItemId && x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id).SingleOrDefault();
                    kk.IsHighestDPItem = true;
                    //itemMasters.Attach(kk);
                    this.Entry(kk).State = EntityState.Modified;
                    this.Commit();
                }
                return "success";
            }
            catch (Exception ee)
            {
                return ee.Message;
            }
        }
        #endregion
        #region AgentCode auto Generate
        public string gtAgentCodeByID(int warehouseid)
        {
            string AgentCode1 = string.Empty;

            // var Agentcode = 101;
            var Agentcode = (Peoples.Max(x => x.PeopleID) + 1).ToString();
            //if (Agentcode != 0)
            //{
            //    int i = 1;
            //    bool flag = false;
            //    while (flag == false)
            //    {
            //        var skint = Agentcode + i;
            //        AgentCode1 = skint.ToString();
            //        List<People> check = Peoples.Any(s => s.AgentCode == AgentCode1).ToList();
            //        if (check.Count == 0)
            //        {
            //            flag = true;
            //            return AgentCode1.ToString();
            //        }
            //        else
            //        {
            //            i = i + 1;
            //        }
            //    }
            //}
            return Agentcode;
        }
        #endregion
        #region for agent upload 
        //public List<CustWarehouse> AddAgentToCust(List<CustWarehouse> AgentCollection, int Warehouse_id, int compid)
        public List<Customer> AddAgentToCust(List<Customer> AgentCollection, int Warehouse_id, int compid)
        {
            logger.Info("start addbulk");
            try
            {
                foreach (var o in AgentCollection)
                {
                    //var search = CustWarehouseDB.Where(x => x.CustomerId == o.CustomerId && x.WarehouseId == Warehouse_id).FirstOrDefault();
                    var search = Customers.Where(x => x.CustomerId == o.CustomerId && x.Warehouseid == Warehouse_id).FirstOrDefault();

                    if (search != null)
                    {
                        try
                        {

                            //List<People> ext = new List<People>();

                            using (var context = new AuthContext())
                            {
                                string query = "select distinct p.* from People p inner join AspNetUsers u on p.Email=u.Email inner join AspNetUserRoles ur on u.Id=ur.UserId inner join AspNetRoles r on ur.RoleId=r.Id where p.WarehouseId=" + Warehouse_id + " and r.Name='Sales Executive' and ur.isActive=1 and p.Active=1 and p.Deleted=0";
                                var ext = context.Database.SqlQuery<People>(query).FirstOrDefault();
                                //List<People> v = Peoples.Where(x => x.Mobile == obj.Mobile && x.Department == "Delivery Boy" && x.Deleted == false && x.CompanyId == obj.CompanyId).ToList();



                                //var ext = Peoples.Where((x => x.WarehouseId == Warehouse_id && x.Department == "Sales Executive")).FirstOrDefault();
                                if (ext != null)
                                {

                                    // search.ExecutiveName = ext.DisplayName;
                                    //search.ExecutiveId = ext.PeopleID;
                                }
                                else
                                {
                                    // search.ExecutiveName = o.ExecutiveName;
                                }
                            }

                            //search.Day = o.Day;
                            //search.AgentCode = o.AgentCode;
                            //search.BeatNumber = o.BeatNumber;

                            //CustWarehouseDB.Attach(search);
                            this.Entry(search).State = EntityState.Modified;
                            this.Commit();



                        }
                        catch (Exception ex)
                        {
                            logger.Info("error in adding new current stock" + ex);
                        }
                    }
                }

            }

            catch (Exception ex)
            {
                logger.Info("error in adding currentstock collection" + ex);
            }
            return null;
        }
        #endregion
        #region for CIMatrix 
        dynamic ForCustomerList(List<CiMatrixDTOM> CtData)
        {

            return true;
        }
        public List<OrderDetailForCP> getCiMatrix(int? WarehouseId, DateTime? start, DateTime? end)
        {
            try
            {
                var OrderItem = DbOrderDetails.Where(x => x.WarehouseId == WarehouseId && x.OrderDate >= start && x.OrderDate <= end && x.Status == "Delivered").ToList();
                List<OrderDetailForCP> odc = new List<OrderDetailForCP>();
                foreach (var data in OrderItem)
                {
                    OrderDetailForCP rr = new OrderDetailForCP();
                    var kk = Convert.ToDouble(data.UnitPrice * data.qty);
                    rr.Price = kk;
                    rr.CustomerId = data.CustomerId;
                    rr.ItemId = data.ItemId;
                    rr.SellingUnitName = data.SellingUnitName;
                    odc.Add(rr);
                }
                for (int write = 0; write < odc.Count; write++)
                {
                    for (int sort = 0; sort < odc.Count - 1; sort++)
                    {
                        if (odc[sort].ItemId == odc[sort + 1].ItemId)
                        {

                            double newprice = odc[sort].Price + odc[sort + 1].Price;
                            odc[sort + 1].Price = newprice;
                            odc.Remove(odc[sort]);
                        }
                    }
                }
                return odc;
            }
            catch (Exception ex)
            {
                logger.Info("error in adding currentstock collection" + ex);
            }
            return null;
        }
        //public List<CiMatrixDTOM> getCiMatrix(int? WarehouseId, DateTime? start, DateTime? end)
        //{
        //    try
        //    {

        //        var Customer = (from j in CustWarehouseDB
        //                        where j.WarehouseId == WarehouseId
        //                        join i in Customers on j.CustomerId equals i.CustomerId
        //                        select new CustomerDTO
        //                        {
        //                            CustomerId = j.CustomerId,
        //                            WarehouseId = j.WarehouseId,
        //                            WarehouseName = j.WarehouseName,
        //                            ExecutiveName = j.ExecutiveName,
        //                            Skcode = i.Skcode,
        //                            Mobile = i.Mobile,
        //                            ShopName = i.ShopName,
        //                            Name = i.Name,
        //                        }).OrderBy(x => x.CustomerId).ToList();

        //        var Item = itemMasters.Where(x => x.WarehouseId == WarehouseId && x.active == true && x.Deleted == false).ToList();

        //        var OrderItem = DbOrderDetails.Where(x => x.WarehouseId == WarehouseId && x.CreatedDate >= start && x.CreatedDate <= end).ToList();

        //        List<CiMatrixDTOM> CTMFInal = new List<CiMatrixDTOM>();
        //        foreach (var a in Customer)
        //        {
        //            var stada = OrderItem.Where(x => x.CustomerId == a.CustomerId).ToList();
        //            List<int> ItemIds = new List<int>();
        //            List<CiMatrixDTOM> Ct = new List<CiMatrixDTOM>();
        //            foreach (var cc in stada)
        //            {

        //                if (stada != null && ItemIds.Any(x => x == cc.ItemId))
        //                {
        //                    for (int i = 0; i<= Ct.Count; i++) {
        //                        try {
        //                                if(Ct[i].ItemId==cc.ItemId)
        //                            {
        //                                Ct[i].TotalSaleAmount+= cc.TotalAmt;
        //                            }
        //                            else
        //                            {
        //                                break;
        //                            }
        //                        } catch (Exception ex) { }

        //                    }
        //                }
        //                else
        //                {

        //                    CiMatrixDTOM odt = new CiMatrixDTOM();
        //                    odt.ItemId = cc.ItemId;
        //                    odt.ItemName = cc.itemname;
        //                    odt.TotalSaleAmount = cc.TotalAmt;
        //                    odt.ExcecutiveName = a.ExecutiveName;
        //                    odt.ShopName = a.ShopName;
        //                    odt.Skcode = a.Skcode;
        //                    Ct.Add(odt);
        //                    ItemIds.Add(cc.ItemId);
        //                }
        //            }

        //            //try
        //            //{

        //            //    ForCustomerList(List<CiMatrixDTOM> Ct);
        //            //}
        //            //catch (Exception ex) { }
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        logger.Info("error in adding currentstock collection" + ex);
        //    }
        //    return null;
        //}
        #endregion
        #region for Currency Pagination 
        public PaggingData_ctin AllCurrencyHistoryIN(int list, int page, string status)
        {
            List<CurrencyStock> StockCurrency = new List<CurrencyStock>();
            var listOrders = CurrencyStockDB.Where(x => x.Deleted == false).OrderByDescending(x => x.CreatedDate).Skip((page - 1) * list).Take(list).ToList();
            StockCurrency = listOrders;
            PaggingData_ctin obj = new PaggingData_ctin();
            obj.total_count = CurrencyStockDB.Where(x => x.Deleted == false).Count();
            obj.historyamount = StockCurrency;
            return obj;
        }
        ////////////////////Code For History out Pagination taslim
        public PaggingData_ctout AllCurrencyHistoryOut(int list, int page, string status)
        {
            List<CurrencyBankSettle> StockCurrency = new List<CurrencyBankSettle>();
            var listOrders = CurrencyBankSettleDB.Where(x => x.Deleted == false).OrderByDescending(x => x.CreatedDate).Skip((page - 1) * list).Take(list).ToList();
            StockCurrency = listOrders;
            PaggingData_ctout obj = new PaggingData_ctout();
            obj.total_count1 = CurrencyBankSettleDB.Where(x => x.Deleted == false).Count();
            obj.historyamountout = StockCurrency;
            return obj;
        }

        #endregion
        ////////////////Document Addd
        ///

        public bool IsDocExists(DocumentList doc)
        {

            List<DocumentList> docs = DocumentLists.Where(x => x.DocumentName.Trim().Equals(doc.DocumentName.Trim())).ToList();
            if (docs.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public int DocumentAdd(int compid, int Warehouse_id, DocumentList aj)
        {
            DocumentList agi = new DocumentList();

            agi.DocumentName = aj.DocumentName;
            agi.Doc_Point = aj.Doc_Point;
            agi.CreatedDate = DateTime.Now;
            agi.UpdatedDate = DateTime.Now;
            agi.Deleted = false;
            agi.Active = true;
            DocumentLists.Add(agi);
            int id1 = this.Commit();
            return id1;


        }

        public bool DeleteDocument(int id)
        {
            try
            {
                DocumentList docs = DocumentLists.Where(x => x.DocumentId == id).FirstOrDefault();
                docs.Deleted = true;
                DocumentLists.Attach(docs);
                this.Entry(docs).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        ///////////////////Get Document
        public IEnumerable<DocumentList> AllDocument(int compid)
        {
            if (DocumentLists.AsEnumerable().Count() > 0)
            {
                List<DocumentList> person = new List<DocumentList>();
                person = DocumentLists.Where(e => e.Deleted == false).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<DocumentList> people = new List<DocumentList>();
                return people.AsEnumerable();
            }
        }
        public IEnumerable<DocumentList> AllDocumentWid(int compid, int Warehouse_id)
        {
            if (DocumentLists.AsEnumerable().Count() > 0)
            {
                List<DocumentList> person = new List<DocumentList>();
                person = DocumentLists.Where(e => e.Deleted == false).ToList();
                return person.AsEnumerable();
            }
            else
            {
                List<DocumentList> people = new List<DocumentList>();
                return people.AsEnumerable();
            }
        }
        //public CustWarehouse GetCustomerbyAgent(string AgentCode)
        public Customer GetCustomerbyAgent(string AgentCode)
        {
            //CustWarehouse customer = CustWarehouseDB.Where(x => x.AgentCode == AgentCode && x.Deleted == false).SingleOrDefault();
            Customer customer = Customers.Where(x => x.AgentCode == AgentCode && x.Deleted == false).SingleOrDefault();
            if (customer != null)
            {
                return customer;
            }
            else
            {
                customer = new Customer();
            }
            return customer;
        }
        #region Case
        public IEnumerable<CaseModule> AllCase()
        {
            if (Cases.AsEnumerable().Count() > 0)
            {
                return Cases.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<CaseModule> casedata = new List<CaseModule>();
                return casedata.AsEnumerable();
            }
        }

        public IEnumerable<CaseProject> AllProject()
        {
            if (CaseProject.AsEnumerable().Count() > 0)
            {
                return CaseProject.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<CaseProject> projectdata = new List<CaseProject>();
                return CaseProject.AsEnumerable();
            }
        }

        public IEnumerable<CaseComment> AllComments(int CaseId, int UserId)
        {
            if (CaseComment.AsEnumerable().Count() > 0)
            {
                return CaseComment.Where(p => p.Deleted == false && p.CaseId == CaseId && p.UserId == UserId).AsEnumerable();
            }
            else
            {
                List<CaseComment> commentdata = new List<CaseComment>();
                return CaseComment.AsEnumerable();
            }
        }

        public IEnumerable<CaseImage> AllImages()
        {
            if (CaseImage.AsEnumerable().Count() > 0)
            {
                return CaseImage.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<CaseImage> imagedata = new List<CaseImage>();
                return CaseImage.AsEnumerable();
            }
        }

        public IEnumerable<CaseImage> AllImagesByCase(string CaseNumber)
        {
            if (CaseImage.AsEnumerable().Count() > 0)
            {
                return CaseImage.Where(p => p.Deleted == false && p.CaseNumber == CaseNumber).AsEnumerable();
            }
            else
            {
                List<CaseImage> imagedata = new List<CaseImage>();
                return CaseImage.AsEnumerable();
            }
        }

        //function For Adding New Entry For AddCase
        public CaseModule AddCase(CaseModule casemodel)
        {
            Customer customer = Customers.Where(c => c.CustomerId == casemodel.CustomerId && c.Deleted == false).FirstOrDefault();
            //CaseProject projects = CaseProject.Where(c => c.CaseProjectId == casemodel.CaseProjectId && c.Deleted == false).FirstOrDefault();
            People peoples = Peoples.Where(p => p.PeopleID == casemodel.PeopleID && p.Deleted == false).FirstOrDefault();
            List<CaseModule> cases = Cases.Where(c => c.Deleted == false && c.CreatedDate == casemodel.CreatedDate).ToList(); // for where condition (by choice) add in where && c.Summary == casemodel.
            IssueCategory icat = IssueCategoryDB.Where(x => x.IssueCategoryId == casemodel.IssueCategoryId).FirstOrDefault();
            IssueSubCategory isssubcat = IssueSubCategoryDB.Where(x => x.IssueSubCategoryId == casemodel.IssueSubCategoryId).FirstOrDefault();
            CaseModule objCase = new CaseModule();
            if (cases.Count == 0)
            {
                if (peoples == null)
                {
                    casemodel.PeopleID = 0;
                    casemodel.PeopleName = "--Select--";
                }
                else
                {
                    casemodel.PeopleID = peoples.PeopleID;
                    casemodel.PeopleName = peoples.DisplayName;
                }
                // casemodel.LogoUrl = casemodel.LogoUrl;s
                casemodel.Department = casemodel.Department;
                casemodel.CaseNumber = casemodel.CaseNumber;

                casemodel.IssueCategoryId = casemodel.IssueCategoryId;
                casemodel.IssueSubCategoryId = casemodel.IssueSubCategoryId;
                casemodel.SKCode = casemodel.SKCode;
                casemodel.Priority = casemodel.Priority;
                casemodel.Issue = casemodel.Issue;
                casemodel.Summary = casemodel.Summary;
                casemodel.MobileNumber = casemodel.MobileNumber;
                casemodel.Assignto = casemodel.Assignto;
                //casemodel.ProjectName = projects.CaseProjectName;
                //casemodel.CustomerId = customer.CustomerId;
                // casemodel.CustomerName = customer.Name;
                casemodel.Createdby = casemodel.Createdby;
                casemodel.CreatedbyName = casemodel.CreatedbyName;
                casemodel.IssueCategoryName = icat.IssueCategoryName;
                casemodel.IssueSubCategoryName = isssubcat.IssueSubCategoryName;
                casemodel.active = true;
                casemodel.Deleted = false;
                casemodel.CreatedDate = indianTime;
                casemodel.UpdatedDate = indianTime;
                Cases.Add(casemodel);
                //this.SaveChanges();
                int id = this.Commit();

            }
            return casemodel;

        }
        //function For Reassign and Close For Set status 
        public CaseModule SetCase(CaseModule casemodel)
        {

            var data = Cases.Where(x => x.CaseId == casemodel.CaseId).FirstOrDefault();
            data.Assignto = casemodel.Assignto;
            data.Description = casemodel.Description;
            data.Status = casemodel.Status;
            data.UpdatedDate = DateTime.Now;
            Cases.Attach(data);
            this.Entry(data).State = EntityState.Modified;
            this.Commit();


            //Customer customer = Customers.Where(c => c.CustomerId == casemodel.CustomerId && c.Deleted == false).FirstOrDefault();
            ////CaseProject projects = CaseProject.Where(c => c.CaseProjectId == casemodel.CaseProjectId && c.Deleted == false).FirstOrDefault();
            //People peoples = Peoples.Where(p => p.PeopleID == casemodel.PeopleID && p.Deleted == false).FirstOrDefault();
            //List<CaseModule> casesdata = Cases.Where(x => x.SKCode == casemodel.SKCode).ToList(); // for where condition (by choice) add in where && c.Summary == casemodel.
            //CaseModule cases = casesdata.LastOrDefault();
            //IssueCategory icat = IssueCategoryDB.Where(x => x.IssueCategoryId == casemodel.IssueCategoryId).FirstOrDefault();
            //IssueSubCategory isssubcat = IssueSubCategoryDB.Where(x => x.IssueSubCategoryId == casemodel.IssueSubCategoryId).FirstOrDefault();
            //CaseModule objCase = new CaseModule();

            //cases.Description = casemodel.Description;
            //cases.Status = casemodel.Status;
            //cases.Assignto = casemodel.Assignto;
            //Cases.Attach(cases);
            //this.Entry(cases).State = EntityState.Modified;
            //this.SaveChanges();
            //    //this.Entry(cases).State = EntityState.Modified;                                

            var Casehistorys = Cases.Where(x => x.CaseId == casemodel.CaseId).FirstOrDefault();
            var UserName = Peoples.Where(x => x.PeopleID == casemodel.PeopleID).Select(a => a.DisplayName).FirstOrDefault();

            try
            {
                CaseHistory h1 = new CaseHistory();
                if (Casehistorys != null)
                {
                    h1.id = Casehistorys.CaseId;
                    h1.CaseId = Casehistorys.CaseId;
                    h1.Skcode = Casehistorys.SKCode;
                    h1.MobileNumber = Casehistorys.MobileNumber;
                    h1.CategoryName = Casehistorys.IssueCategoryName;
                    h1.SubCategoryName = Casehistorys.IssueSubCategoryName;
                    h1.Priority = Casehistorys.Priority;
                    h1.Status = Casehistorys.Status;
                    h1.CallType = Casehistorys.Statuscall;
                    h1.Assignto = Casehistorys.Assignto;
                    h1.DescriptionReAssign = Casehistorys.Description;
                    h1.Summary = Casehistorys.Summary;
                    h1.CreatedbyName = Casehistorys.CreatedbyName;
                    h1.Createdby = Casehistorys.Createdby;
                    h1.UpdatedDate = DateTime.Now;


                    CaseHistoryDB.Add(h1);
                    int id = this.Commit();
                }
            }
            catch (Exception ex)
            {
                logger.Error("Error loading  \n\n" + ex.Message + "\n\n" + ex.InnerException + "\n\n" + ex.StackTrace);
            }
            #endregion
            return casemodel;

        }
        //end
        //view case status
        public CaseModule Caseviewstatus(CaseModule casemodel)
        {
            Customer customer = Customers.Where(c => c.CustomerId == casemodel.CustomerId && c.Deleted == false).FirstOrDefault();
            //CaseProject projects = CaseProject.Where(c => c.CaseProjectId == casemodel.CaseProjectId && c.Deleted == false).FirstOrDefault();
            People peoples = Peoples.Where(p => p.PeopleID == casemodel.PeopleID && p.Deleted == false).FirstOrDefault();
            List<CaseModule> cases = Cases.Where(c => c.Deleted == false && c.CreatedDate == casemodel.CreatedDate).ToList(); // for where condition (by choice) add in where && c.Summary == casemodel.
            CaseModule objCase = new CaseModule();
            if (peoples == null)
            {
                casemodel.PeopleID = 0;
                casemodel.PeopleName = "--Select--";
            }
            else
            {
                casemodel.PeopleID = peoples.PeopleID;
                casemodel.PeopleName = peoples.DisplayName;
            }
            // casemodel.LogoUrl = casemodel.LogoUrl;s
            casemodel.Department = casemodel.Department;
            casemodel.CaseNumber = casemodel.CaseNumber;

            casemodel.IssueCategoryId = casemodel.IssueCategoryId;
            casemodel.IssueSubCategoryId = casemodel.IssueSubCategoryId;
            casemodel.SKCode = casemodel.SKCode;
            casemodel.Priority = casemodel.Priority;
            casemodel.Issue = casemodel.Issue;
            casemodel.Summary = casemodel.Summary;
            casemodel.Description = casemodel.Description;
            casemodel.MobileNumber = casemodel.MobileNumber;
            casemodel.Assignto = casemodel.Assignto;
            //casemodel.ProjectName = projects.CaseProjectName;
            //casemodel.CustomerId = customer.CustomerId;
            // casemodel.CustomerName = customer.Name;
            casemodel.Createdby = casemodel.Createdby;
            casemodel.CreatedbyName = casemodel.CreatedbyName;
            casemodel.active = true;
            casemodel.Deleted = false;
            casemodel.CreatedDate = indianTime;
            casemodel.UpdatedDate = indianTime;
            Cases.Add(casemodel);
            //this.SaveChanges();
            int id = this.Commit();
            return casemodel;

        }
        //end
        public CaseComment AddCommentCase(CaseComment casemodel)
        {
            List<CaseComment> cases = CaseComment.Where(c => c.Deleted == false && c.Comments == casemodel.Comments).ToList();
            CaseModule casemodule = Cases.Where(x => x.CaseId == casemodel.CaseId && x.Deleted == false).FirstOrDefault();
            CaseComment objCase = new CaseComment();

            if (cases.Count == 0)
            {
                casemodel.CaseId = casemodel.CaseId;
                casemodel.Comments = casemodel.Comments;

                casemodel.active = true;
                casemodel.Deleted = false;
                casemodel.CreatedDate = indianTime;
                casemodel.UpdatedDate = indianTime;
                CaseComment.Add(casemodel);
                // this.SaveChanges();
                int id = this.Commit();
                return casemodel;
            }
            else
            {
                return objCase;
            }
        }

        public CaseModule PutCase(CaseModule objCase)
        {
            CaseProject projects = CaseProject.Where(c => c.CaseProjectId == objCase.CaseProjectId && c.Deleted == false).FirstOrDefault();
            People peoples = Peoples.Where(p => p.PeopleID == objCase.PeopleID && p.Deleted == false).FirstOrDefault();
            CaseModule cases = Cases.Where(x => x.CaseId == objCase.CaseId && x.Deleted == false).FirstOrDefault();
            if (cases != null)
            {
                if (peoples == null)
                {
                    cases.PeopleID = 0;
                    cases.PeopleName = "--Select--";
                }
                else
                {
                    cases.PeopleID = objCase.PeopleID;
                    cases.PeopleName = peoples.DisplayName;
                }
                //cases.LogoUrl = objCase.LogoUrl;
                cases.Department = objCase.Department;
                // cases.IssueType = objCase.IssueType;
                cases.Summary = objCase.Summary;

                cases.CaseProjectId = objCase.CaseProjectId;
                cases.ProjectName = projects.CaseProjectName;
                cases.Issues = objCase.Issues;
                cases.Issue = objCase.Issue;
                cases.Labels = objCase.Labels;
                cases.Priority = objCase.Priority;
                cases.Status = objCase.Status;
                // cases.EpicLink = objCase.EpicLink;
                cases.UpdatedDate = indianTime;
                Cases.Attach(cases);
                this.Entry(cases).State = EntityState.Modified;
                int id = this.Commit();
                return objCase;
            }
            else
            {
                return objCase;
            }
        }

        public bool DeleteCase(int id)
        {
            try
            {
                CaseModule cases = Cases.Where(x => x.CaseId == id && x.Deleted == false).FirstOrDefault();
                cases.Deleted = true;
                Cases.Attach(cases);
                this.Entry(cases).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        //#endregion
        public bool DeleteDepartment(int id)
        {
            try
            {
                Department departmnts = Departments.Where(x => x.DepId == id && x.Deleted == false).FirstOrDefault();
                departmnts.Deleted = true;
                //Departments.Attach(departmnts);
                this.Entry(departmnts).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        //Alldepartment By Hemant 11/12/2018
        public IEnumerable<Department> Alldepartment()
        {
            if (Departments.AsEnumerable().Count() > 0)
            {
                return Departments.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<Department> department = new List<Department>();
                return department.AsEnumerable();
            }
        }
        #region skill
        public IEnumerable<Skill> AllSkill()
        {
            if (Skills.AsEnumerable().Count() > 0)
            {
                return Skills.Where(p => p.Deleted == false).AsEnumerable();
            }
            else
            {
                List<Skill> skill = new List<Skill>();
                return skill.AsEnumerable();
            }
        }

        public bool DeleteSkill(int id)
        {
            try
            {
                Skill skills = Skills.Where(x => x.SkillId == id).FirstOrDefault();
                skills.Deleted = true;
                Skills.Attach(skills);
                this.Entry(skills).State = EntityState.Modified;
                this.Commit();
                return true;
            }
            catch
            {
                return false;
            }
        }
        #endregion


        //#region  People History data
        ///// <summary>
        ///// Created Date 16/03/2019
        ///// </summary>
        ///// <param name="people"></param>
        ///// <returns></returns>
        //public PeopleHistory AddPeopleHistory(People people)
        //{
        //    var city = Cities.Where(x => x.Cityid == people.Cityid).FirstOrDefault();
        //    var person = Peoples.Where(e => e.AgentCode == people.AgentCode && e.Department == "Agent").FirstOrDefault();

        //    var Warehouse = Warehouses.Where(x => x.WarehouseId == people.WarehouseId).FirstOrDefault();
        //    try
        //    {

        //        PeopleHistory HPeople = new PeopleHistory();
        //        HPeople.PeopleID = people.PeopleID;
        //        HPeople.WarehouseId = people.WarehouseId;
        //        HPeople.PeopleFirstName = people.PeopleFirstName;
        //        HPeople.PeopleLastName = people.PeopleLastName;
        //        HPeople.Email = people.Email;
        //        HPeople.DisplayName = people.DisplayName;
        //        HPeople.Stateid = people.Stateid;
        //        HPeople.WarehouseName = Warehouse.WarehouseName;
        //        HPeople.state = city.StateName;
        //        HPeople.Cityid = people.Cityid;
        //        HPeople.city = city.CityName;
        //        HPeople.Mobile = people.Mobile;
        //        HPeople.Department = people.Department;
        //        HPeople.Permissions = people.Permissions;
        //        HPeople.Type = people.Type;
        //        HPeople.Deleted = people.Deleted;
        //        HPeople.Active = people.Active;
        //        HPeople.UpdatedDate = indianTime;
        //        HPeople.CreatedBy = people.CreatedBy;
        //        HPeople.UpdateBy = people.UpdateBy;
        //        HPeople.AgentCode = people.AgentCode;
        //        HPeople.VehicleId = people.VehicleId;
        //        HPeople.VehicleName = people.VehicleName;
        //        HPeople.VehicleNumber = people.VehicleNumber;
        //        HPeople.VehicleCapacity = people.VehicleCapacity;
        //        HPeople.Salesexecutivetype = people.Salesexecutivetype;
        //        HPeople.AgentName = person.DisplayName;
        //        HPeople.Empcode = people.Empcode;
        //        HPeople.Desgination = people.Desgination;
        //        HPeople.Status = people.Status;
        //        HPeople.DOB = people.DOB;
        //        HPeople.DataOfJoin = people.DataOfJoin;
        //        HPeople.DataOfMarriage = people.DataOfMarriage;
        //        HPeople.Unit = people.Unit;
        //        HPeople.EndDate = people.EndDate;
        //        HPeople.DeleteComment = people.DeleteComment; // By Danish --- 18/04/2019
        //        HPeople.DepositAmount = Convert.ToDouble(people.DepositAmount);

        //        PeopleHistoryDB.Add(HPeople);
        //        int id = this.SaveChanges();
        //        return HPeople;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}
        //#endregion
        #region  PoApproval History Function
        /// <summary>
        /// PO Approval History
        /// Created By Ashwin
        /// Created Date 21/05/2019
        /// </summary>
        /// <param name="approval"></param>
        /// <returns></returns>
        public POApprovalHistory AddPOApprovalHistory(PoApproval approval)
        {
            var peopledata = Peoples.Where(x => x.PeopleID == approval.userid).FirstOrDefault();

            try
            {

                POApprovalHistory pOApproval = new POApprovalHistory();
                pOApproval.Poapprovelid = approval.Poapprovelid;
                pOApproval.Level = approval.Level;
                pOApproval.Warehouseid = approval.Warehouseid;
                pOApproval.WarehouseName = approval.WarehouseName;
                pOApproval.Approval1 = approval.Approval1;
                pOApproval.Reviewer1 = approval.Reviewer1;
                pOApproval.Approval2 = approval.Approval2;
                pOApproval.Reviewer2 = approval.Reviewer2;
                pOApproval.Approval3 = approval.Approval3;
                pOApproval.Reviewer3 = approval.Reviewer3;
                pOApproval.Approval4 = approval.Approval4;
                pOApproval.Reviewer4 = approval.Reviewer4;
                pOApproval.Approval5 = approval.Approval5;
                pOApproval.Reviewer5 = approval.Reviewer5;
                pOApproval.ApprovalName1 = approval.ApprovalName1;
                pOApproval.ApprovalName2 = approval.ApprovalName2;
                pOApproval.ApprovalName3 = approval.ApprovalName3;
                pOApproval.ApprovalName4 = approval.ApprovalName4;
                pOApproval.ApprovalName5 = approval.ApprovalName5;
                pOApproval.ReviewerName1 = approval.ReviewerName1;
                pOApproval.ReviewerName2 = approval.ReviewerName2;
                pOApproval.ReviewerName3 = approval.ReviewerName3;
                pOApproval.ReviewerName4 = approval.ReviewerName4;
                pOApproval.ReviewerName5 = approval.ReviewerName5;
                pOApproval.AmountlmtMin = approval.AmountlmtMin;
                pOApproval.AmountlmtMax = approval.AmountlmtMax;
                pOApproval.CreatedDate = approval.CreatedDate;
                pOApproval.UpdatedTime = indianTime;
                pOApproval.IsDeleted = approval.IsDeleted;

                pOApproval.userid = approval.userid;
                if (peopledata.DisplayName == null)
                {
                    pOApproval.UserName = peopledata.PeopleFirstName;

                }
                else
                {
                    pOApproval.UserName = peopledata.DisplayName;
                }
                POApprovalHistoryDB.Add(pOApproval);
                int id = this.Commit();
                return pOApproval;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region  Delivery Assignmnet History Function DeliveryIssuance
        /// <summary>
        /// OrderDelivery History
        /// Created By Ashwin
        /// </summary>
        /// <param name="delivery"></param>
        /// <returns></returns>
        public OrderDeliveryMasterHistories AddOrderDelivery(DeliveryIssuance delivery)
        {
            var peopledata = Peoples.Where(x => x.PeopleID == delivery.userid).FirstOrDefault();
            try
            {
                OrderDeliveryMasterHistories AssginDeli = new OrderDeliveryMasterHistories();
                AssginDeli.DeliveryIssuanceId = delivery.DeliveryIssuanceId;
                //AssginDeli.OrderId = delivery.o
                AssginDeli.Cityid = delivery.Cityid;
                AssginDeli.city = delivery.city;
                AssginDeli.DisplayName = delivery.DisplayName;
                AssginDeli.Status = delivery.Status;
                AssginDeli.WarehouseId = delivery.WarehouseId;
                AssginDeli.PeopleID = delivery.PeopleID;
                AssginDeli.VehicleId = delivery.VehicleId;
                AssginDeli.VehicleNumber = delivery.VehicleNumber;
                AssginDeli.RejectReason = delivery.RejectReason;
                AssginDeli.OrderdispatchIds = delivery.OrderdispatchIds;
                AssginDeli.OrderIds = delivery.OrderIds;
                AssginDeli.Acceptance = delivery.Acceptance;
                AssginDeli.IsActive = delivery.IsActive;
                AssginDeli.IdealTime = delivery.IdealTime;
                AssginDeli.TravelDistance = delivery.TravelDistance;
                AssginDeli.CreatedDate = indianTime;
                AssginDeli.UpdatedDate = indianTime;
                AssginDeli.userid = delivery.userid;
                if (peopledata != null)
                {
                    if (peopledata.DisplayName == null)
                    {
                        AssginDeli.UpdatedBy = peopledata.PeopleFirstName;
                    }
                    else
                    {
                        AssginDeli.UpdatedBy = peopledata.DisplayName;
                    }

                }
                OrderDeliveryMasterHistoriesDB.Add(AssginDeli);
                int id = this.Commit();
                return AssginDeli;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region  Delivery Assignmnet History Function for OrderDeliveryMaster
        /// <summary>
        /// OrderDelivery History
        /// Created By Ashwin
        /// </summary>
        /// <param name="delivery"></param>
        /// <returns></returns>
        public OrderDeliveryMasterHistories AddOrderDeliveryMaster(OrderDeliveryMaster delivery)
        {
            var peopledata = Peoples.Where(x => x.PeopleID == delivery.userid).FirstOrDefault();

            try
            {

                OrderDeliveryMasterHistories AssginDeli = new OrderDeliveryMasterHistories();
                AssginDeli.DeliveryIssuanceId = delivery.DeliveryIssuanceId;
                AssginDeli.OrderId = delivery.OrderId;
                AssginDeli.DisplayName = delivery.DboyName;
                AssginDeli.Status = delivery.Status;
                AssginDeli.WarehouseId = delivery.WarehouseId;
                AssginDeli.CreatedDate = delivery.CreatedDate;
                AssginDeli.UpdatedDate = indianTime;
                AssginDeli.userid = delivery.userid;
                if (peopledata.DisplayName == null)
                {
                    AssginDeli.UpdatedBy = peopledata.PeopleFirstName;
                }
                else
                {
                    AssginDeli.UpdatedBy = peopledata.DisplayName;
                }
                OrderDeliveryMasterHistoriesDB.Add(AssginDeli);
                int id = this.Commit();
                return AssginDeli;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region  Transfer Order History Function
        /// <summary>
        /// Transfer History
        /// Created By Ashwin
        /// Created Date 12/06/2019
        /// </summary>
        /// <param name="transferWH"></param>
        /// <returns></returns>
        public TransferOrderHistory AddTransferHistory(TransferWHOrderMaster transferWH)
        {
            var peopledata = Peoples.Where(x => x.PeopleID == transferWH.userid).FirstOrDefault();

            try
            {

                TransferOrderHistory transferOrder = new TransferOrderHistory();
                transferOrder.TransferOrderId = transferWH.TransferOrderId;
                transferOrder.Status = transferWH.Status;
                transferOrder.userid = transferWH.userid;
                if (peopledata.DisplayName == null)
                {
                    transferOrder.username = peopledata.PeopleFirstName;
                }
                else
                {
                    transferOrder.username = peopledata.DisplayName;
                }
                transferOrder.CreatedDate = indianTime;
                TransferOrderHistoryDB.Add(transferOrder);
                int id = this.Commit();
                return transferOrder;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion
        #region Whatapps Bot 
        /// <summary>
        /// Created date 25/03/2019
        /// 
        /// </summary>
        /// <param name="cust"></param>
        public void Customersms(CustomerWhatsAppDTO cust)
        {


            string authKey = ConfigurationManager.AppSettings["BotKey"];
            var customerName = cust.Name;//customer name
            var phoneNumber = cust.Mobile;//customer Mobile number
            var V1 = cust.OrderedDate.Date;//OrderDate only
            var V2 = cust.OrderId; //orderid
            var V3 = cust.DboyName;// Delivery Boy name
            var V4 = cust.DboyNumber;//Delivery boy number
                                     //var V5 = cust.ShippingAddress;
            var TemplateID = cust.TemppleteId;//templete id
            StringBuilder sbPostData = new StringBuilder();
            //Your message to send, Add URL encoding here.
            //byte[] bytes = System.IO.File.ReadAllBytes("C:\\Users\\User\\Downloads\\Event1.pdf");
            sbPostData.AppendFormat("ClientId={0}", authKey);
            sbPostData.AppendFormat("&CustomerName={0}", customerName);
            sbPostData.AppendFormat("&PhoneNumber={0}", phoneNumber);
            sbPostData.AppendFormat("&TemplateID={0}", TemplateID);
            sbPostData.AppendFormat("&V1={0}", V1);
            sbPostData.AppendFormat("&V2={0}", V2);
            sbPostData.AppendFormat("&V3={0}", V3);
            sbPostData.AppendFormat("&V4={0}", V4);
            //sbPostData.AppendFormat("&V5={0}", V5);
            sbPostData.AppendFormat("&SendNow={0}", "true");
            //sbPostData.AppendFormat("&PDF={0}", b);
            sbPostData.AppendFormat("&Message={0}", "");
            try
            {
                //Call Send SMS API
                string sendSMSUri = "http://jlabee.com/api/CustomerSms/PostTemplate";
                //Create HTTPWebrequest
                HttpWebRequest httpWReq = (HttpWebRequest)WebRequest.Create(sendSMSUri);
                //Prepare and Add URL Encoded data
                UTF8Encoding encoding = new UTF8Encoding();
                byte[] data = encoding.GetBytes(sbPostData.ToString());
                //Specify post method
                httpWReq.Method = "POST";
                httpWReq.ContentType = "application/x-www-form-urlencoded";
                httpWReq.ContentLength = data.Length;
                using (Stream stream = httpWReq.GetRequestStream())
                {
                    stream.Write(data, 0, data.Length);
                }
                //Get the response
                HttpWebResponse response = (HttpWebResponse)httpWReq.GetResponse();
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string responseString = reader.ReadToEnd();
                //Close the response
                reader.Close();
                response.Close();
            }
            catch (SystemException ex)
            {
            }
        }
        #endregion
        public GeoFence AddGeoFence(GeoFence geofence)
        {
            if (geofence.WarehouseId > 0)
            {
                var wh = Warehouses.Where(x => x.WarehouseId == geofence.WarehouseId && x.CompanyId == geofence.CompanyId).SingleOrDefault();
                if (wh != null)
                {
                    geofence.WarehouseName = wh.WarehouseName;
                }
            }
            geofence.CreatedDate = indianTime;
            geofence.UpdatedDate = indianTime;
            GeoFences.Add(geofence);
            int id = this.Commit();
            return geofence;


        }




        // Trigger event when manual inventory update 
        #region SendMailManualInventory
        //SendMailManualInventory
        public static void SendMailManualInventory(int CurrentInventory, int ManualUpdateInventory, string UserName, CurrentStock cst)
        {
            try
            {
                string masteremail = ConfigurationManager.AppSettings["MasterEmail"];
                string masterpassword = ConfigurationManager.AppSettings["MasterPassword"];
                string body = "<div style='background: #FAFAFA; color: #333333; padding-left: 30px;font-family: arial,sans-serif; font-size: 14px;'>";
                //body += "<img style='padding-top: 10px;' src='http://shopkirana.com/wp-content/uploads/2015/07/ShopKirana-Logo11.png'><br/>";
                body += "<h3 style='background-color: rgb(241, 89, 34);'>Alert! " + cst.itemname + " Manual Inventory Updated due to: " + cst.ManualReason + "</h3> ";
                body += "Hello,";
                body += "<p>Reason:" + cst.ManualReason + " </p>";
                body += "<p>Warehouse Name:" + cst.WarehouseName + "(" + cst.WarehouseId + ")</p>";
                body += "<p>City Name:" + cst.CityName + "(" + cst.CityId + ") </p>";
                body += "<p><strong>";
                body += CurrentInventory + "</strong>" + " : Inventory Before Updated  and Now Inventory Updated by this QTY : " + ManualUpdateInventory + "</p> <h1> So Current Inventory Is :" + (CurrentInventory + ManualUpdateInventory) + "</h1>";
                body += "<p>Item Number:" + cst.ItemNumber + " </p>";
                body += "<p>Updated By user Name : <strong>" + UserName + "</strong> Date <strong>" + cst.UpdatedDate + "</strong></p>";
                body += "Thanks,";
                body += "<br />";
                body += "<b>IT Team</b>";
                body += "</div>";
                var Subj = "Alert! " + cst.itemname + "  Manual   Updated due to  " + cst.ManualReason;
                var msg = new MailMessage("donotreply_backend@shopkirana.com", "donotreply_backend@shopkirana.com", Subj, body);
                //msg.To.Add("deepak@shopkirana.com");
                msg.To.Add("bhavik.parikh@shopkirana.com");
                msg.IsBodyHtml = true;
                var smtpClient = new SmtpClient("smtp.gmail.com", 587);
                smtpClient.UseDefaultCredentials = true;
                smtpClient.Credentials = new NetworkCredential(masteremail, masterpassword);
                smtpClient.EnableSsl = true;
                smtpClient.Send(msg);

            }
            catch (Exception ss) { }


        }
        #endregion
        #region Get Blank PO data 

        public PaggingData AllBlankPOWid(int list, int page, int Warehouse_id, int CompanyId)
        {
            PaggingData obj = new PaggingData();

            obj.total_count = DPurchaseOrderMaster.Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id && x.Status == "Blank PO").Count();
            obj.ordermaster = DPurchaseOrderMaster.AsEnumerable().Where(x => x.CompanyId == CompanyId && x.WarehouseId == Warehouse_id && x.Status == "Blank PO").OrderByDescending(x => x.PurchaseOrderId).Skip((page - 1) * list).Take(list).ToList();

            return obj;
        }
        #endregion



        /// <summary>
        /// getAcceptedAssignmentOrder
        /// </summary>
        /// <param name="DeliveryIssuanceId"></param>
        /// <param name="mob"></param>
        /// <returns></returns>
        public List<OrderDispatchedMasterDTOM> getAcceptedAssignmentOrderV1(Int32 DeliveryIssuanceId, string mob)//get orders to deliver
        {
            try
            {
                var list1 = (from a in OrderDispatchedMasters
                             where (a.DboyMobileNo == mob && a.DeliveryIssuanceIdOrderDeliveryMaster == DeliveryIssuanceId)
                             join i in Customers on a.CustomerId equals i.CustomerId
                             select new OrderDispatchedMasterDTOM
                             {
                                 lat = i.lat,
                                 lg = i.lg,
                                 ClusterId = a.ClusterId,
                                 ClusterName = a.ClusterName,
                                 active = a.active,
                                 BillingAddress = a.BillingAddress,
                                 CityId = a.CityId,
                                 comments = a.comments,
                                 CompanyId = a.CompanyId,
                                 CreatedDate = a.CreatedDate,
                                 CustomerId = a.CustomerId,
                                 CustomerName = a.CustomerName,
                                 ShopName = i.ShopName,
                                 Skcode = i.Skcode,
                                 Customerphonenum = a.Customerphonenum,
                                 DboyMobileNo = a.DboyMobileNo,
                                 DboyName = a.DboyName,
                                 Deleted = a.Deleted,
                                 Deliverydate = a.Deliverydate,
                                 DiscountAmount = a.DiscountAmount,
                                 DivisionId = a.DivisionId,
                                 GrossAmount = a.GrossAmount,
                                 invoice_no = a.invoice_no,
                                 OrderDetailsCount = a.orderDetails.Count,
                                 OrderDispatchedMasterId = a.OrderDispatchedMasterId,
                                 OrderId = a.OrderId,
                                 ReDispatchCount = a.ReDispatchCount,
                                 DeliveryIssuanceId = a.DeliveryIssuanceIdOrderDeliveryMaster,
                                 //SalesPerson = a.SalesPerson,
                                 //SalesPersonId = a.SalesPersonId,
                                 ShippingAddress = a.ShippingAddress,
                                 Status = a.Status,
                                 TaxAmount = a.TaxAmount,
                                 TotalAmount = a.TotalAmount,
                                 UpdatedDate = a.UpdatedDate,
                                 WarehouseId = a.WarehouseId,
                                 WarehouseName = a.WarehouseName,
                                 OrderDate = a.OrderedDate
                             }).ToList();

                return list1;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                return null;
            }
        }




        #region Scratched Card Notification  By Harry 28/06/2019
        /// <summary>
        /// 
        /// </summary>
        /// <param name="CustomerId"></param>
        /// <param name="OrderId"></param>
        private async Task<bool> ScratchCardNotification(int CustomerId, Offer Offer)
        {
            bool res = false;
            //Notification notification = new Notification();
            //notification.title = "Congratulations! You have received a Scratch Card";
            ////notification.Message = "बधाई हो ! आर्डर Offer:" + Offer.OfferOn + " डिलीवरी पर आपको डायल मिला है!";
            //notification.NotificationType = Offer.OfferOn;//offer type
            //                                              // notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
            //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).FirstOrDefault();
            //string Key = ConfigurationManager.AppSettings["FcmApiKey"];

            //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            //tRequest.Method = "post";
            //var objNotification = new
            //{
            //    to = customers.fcmId,
            //    data = new
            //    {
            //        title = notification.title,
            //        body = notification.Message,
            //        NotificationType = notification.NotificationType,
            //        //icon = notification.Pic,                
            //    }
            //};

            try
            {
                //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(objNotification);
                //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                ////tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
                //tRequest.ContentLength = byteArray.Length;
                //tRequest.ContentType = "application/json";
                //using (Stream dataStream = tRequest.GetRequestStream())
                //{
                //    dataStream.Write(byteArray, 0, byteArray.Length);
                //    using (WebResponse tResponse = tRequest.GetResponse())
                //    {
                //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                //        {
                //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                //            {
                //                String responseFromFirebaseServer = tReader.ReadToEnd();
                //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                //                if (response.success == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //                else if (response.failure == 1)
                //                {
                //                    Console.Write(response);
                //                }
                //            }
                //        }
                //    }
                //}
                var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).FirstOrDefault();
                var data = new FCMData
                {
                    title = "Congratulations! You have received a Scratch Card",
                    notificationType = Offer.OfferOn

                };
                string Key = ConfigurationManager.AppSettings["FcmApiKey"];
                var firebaseService = new FirebaseNotificationServiceHelper(Key);
                var result = await firebaseService.SendNotificationForApprovalAsync(customers.fcmId, data);
                if (result != null)
                {
                    res = true;
                }
                else
                {
                    res = false;
                }
            }
            catch (Exception asd)
            {
            }
            return res;
        }

        internal async Task<bool> ScratchCardNotificationList(List<string> fcmIdList, string notificationType, string message)
        {
            bool res = false;
            //Notification notification = new Notification();
            //notification.title = "Congratulations! You have received a Scratch Card";
            //notification.Message = "बधाई हो ! आर्डर Offer:" + Offer.OfferOn + " डिलीवरी पर आपको डायल मिला है!";
            // notification.NotificationType = notificationType;//offer type
            // notification.Pic = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png";
            //var customers = Customers.Where(x => x.fcmId != null && x.CustomerId == CustomerId).FirstOrDefault();
            //string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            //WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send") as HttpWebRequest;
            //tRequest.Method = "post";

            //var objNotificationList = fcmIdList.Select(x => new
            //{
            //    to = x,
            //    data = new
            //    {
            //        title = "Congratulations! You have received a Scratch Card",
            //        NotificationType = notificationType,
            //        Message = message
            //    }
            //}).ToList();

            //var objNotification = new
            //{
            //    to = customers.fcmId,
            //    data = new
            //    {
            //        title = notification.title,
            //        body = notification.Message,
            //        NotificationType = notification.NotificationType,
            //        //icon = notification.Pic,                
            //    }
            //};
            string Key = ConfigurationManager.AppSettings["FcmApiKey"];
            var firebaseService = new FirebaseNotificationServiceHelper(Key);
            BackgroundTaskManager.Run(() =>
            {
                fcmIdList.ForEach(x =>
                {
                    try
                    {
                        //string jsonNotificationFormat = Newtonsoft.Json.JsonConvert.SerializeObject(x);
                        //Byte[] byteArray = Encoding.UTF8.GetBytes(jsonNotificationFormat);
                        //tRequest.Headers.Add(string.Format("Authorization: key={0}", Key));
                        ////tRequest.Headers.Add(string.Format("Sender: id={0}", id11));
                        //tRequest.ContentLength = byteArray.Length;
                        //tRequest.ContentType = "application/json";
                        //using (Stream dataStream = tRequest.GetRequestStream())
                        //{
                        //    dataStream.Write(byteArray, 0, byteArray.Length);
                        //    using (WebResponse tResponse = tRequest.GetResponse())
                        //    {
                        //        using (Stream dataStreamResponse = tResponse.GetResponseStream())
                        //        {
                        //            using (StreamReader tReader = new StreamReader(dataStreamResponse))
                        //            {
                        //                String responseFromFirebaseServer = tReader.ReadToEnd();
                        //                FCMResponse response = Newtonsoft.Json.JsonConvert.DeserializeObject<FCMResponse>(responseFromFirebaseServer);
                        //                if (response.success == 1)
                        //                {
                        //                    Console.Write(response);
                        //                }
                        //                else if (response.failure == 1)
                        //                {
                        //                    Console.Write(response);
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        var data = new FCMData
                        {
                            title = "Congratulations! You have received a Scratch Card",
                            notificationType = notificationType,
                            body = message

                        };
                        
                        var result =  firebaseService.SendNotificationForApprovalAsync(x, data);
                        if (result != null)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                    catch (Exception asd)
                    {
                        logger.Error(new StringBuilder("Error while sending FCM for type: ").Append(notificationType).Append(asd.ToString()).ToString());
                    }
                });
            });
            return res;
        }
        #endregion

        #region ASPNetUser

        internal ApkNamePwdResponse GetAPKUserAndPwd(string apkName)
        {
            Caching.ICacheProvider _cacheProvider = new Caching.RedisCacheProvider();
            var result = _cacheProvider.GetOrSet(Caching.CacheKeyHelper.RegisteredApkCacheKey(apkName), () => GetSetApkUserFromCache(apkName));
            return result;
        }


        internal List<MakerCheckerMaster> GetMakerCheckerMasters()
        {
            Caching.ICacheProvider _cacheProvider = new Caching.RedisCacheProvider();
            var result = _cacheProvider.GetOrSet(Caching.CacheKeyHelper.MakerCheckerMasterCacheKey(), () => GetSetMakerCheckerMastersFromCache());
            return result;
            //return GetSetMakerCheckerMastersFromCache();
        }

        private List<MakerCheckerMaster> GetSetMakerCheckerMastersFromCache()
        {
            List<MakerCheckerMaster> result = this.Database.SqlQuery<MakerCheckerMaster>(new StringBuilder("select * from MakerCheckerMasters where IsActive=1").ToString()).ToList();
            return result;
        }

        private ApkNamePwdResponse GetSetApkUserFromCache(string apkName)
        {
            ApkNamePwdResponse result = this.Database.SqlQuery<ApkNamePwdResponse>(new StringBuilder("select UserName, Password from RegisteredApks where ApkName='").Append(apkName).Append("'").ToString()).FirstOrDefault();
            return result;
        }

        public Customer Addassighncustsuppliers(Customer custex)
        {
            throw new NotImplementedException();
        }

        #endregion
        public PurchaseOrderDetailRecived AddPurchaseOrderDetailsRecivedInTempCS(PurchaseOrderDetailRecived pd, int count)
        {
            PurchaseOrderDetailRecived podr = PurchaseOrderRecivedDetails.Where(x => x.PurchaseOrderDetailId == pd.PurchaseOrderDetailId && x.CompanyId == pd.CompanyId).SingleOrDefault();
            ItemMaster itm = itemMasters.Where(y => y.PurchaseSku.Trim() == pd.PurchaseSku.Trim() && y.CompanyId == pd.CompanyId && y.WarehouseId == pd.WarehouseId).FirstOrDefault();
            ItemMasterCentral itmTax = ItemMasterCentralDB.Where(y => y.PurchaseSku.Trim() == pd.PurchaseSku.Trim() && y.CompanyId == pd.CompanyId && y.Deleted == false).FirstOrDefault();
            var item = TemporaryCurrentStockDB.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
            if (podr == null)
            {
                if (item == null)
                {
                    var Mitem = ItemMultiMRPDB.Where(x => x.ItemNumber == itm.Number && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                    if (Mitem != null)
                    {
                        TemporaryCurrentStock newCstk = new TemporaryCurrentStock();
                        newCstk.CompanyId = itm.CompanyId;
                        newCstk.itemBaseName = itm.itemBaseName;
                        newCstk.ItemId = itm.ItemId;
                        newCstk.ItemNumber = itm.Number;
                        newCstk.WarehouseId = itm.WarehouseId;
                        newCstk.WarehouseName = itm.WarehouseName;
                        newCstk.CurrentInventory = 0;
                        newCstk.DamageCurrentInventory = 0;
                        newCstk.ExpCurrentInventory = 0;
                        newCstk.CreationDate = indianTime;
                        newCstk.UpdatedDate = indianTime;
                        newCstk.MRP = Mitem.MRP;
                        newCstk.UnitofQuantity = Mitem.UnitofQuantity;
                        newCstk.UOM = Mitem.UOM;
                        newCstk.ItemMultiMRPId = Mitem.ItemMultiMRPId;
                        newCstk.itemname = newCstk.itemBaseName + " " + newCstk.MRP + " MRP " + newCstk.UnitofQuantity + " " + newCstk.UOM;   //itm.itemname;
                        TemporaryCurrentStockDB.Add(newCstk);
                        this.Commit();
                    }
                    //again call 
                    item = TemporaryCurrentStockDB.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();

                }
                if (item != null)
                {
                    var QtyReciv = pd.QtyRecived1.GetValueOrDefault();
                    var DamQtyReciv = pd.DamagQtyRecived1.GetValueOrDefault();
                    var ExpQtyReciv = pd.ExpQtyRecived1.GetValueOrDefault();

                    if (QtyReciv != 0)
                    {
                        TemporaryCurrentStockHistory Oss = new TemporaryCurrentStockHistory();
                        Oss.StockId = item.Id;
                        Oss.ItemNumber = itm.ItemNumber;
                        Oss.itemname = itm.itemname;
                        Oss.OdOrPoId = pd.PurchaseOrderId;
                        Oss.CurrentInventory = item.CurrentInventory;
                        Oss.CurrentInventoryIn = Convert.ToInt32(QtyReciv);
                        Oss.TotalCurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                        Oss.TotalDamageCurrentInventory = item.DamageCurrentInventory + Convert.ToInt32(DamQtyReciv);
                        Oss.TotalExpCurrentInventory = item.ExpCurrentInventory + Convert.ToInt32(ExpQtyReciv);
                        Oss.WarehouseName = item.WarehouseName;
                        Oss.Warehouseid = item.WarehouseId;
                        Oss.CompanyId = item.CompanyId;

                        Oss.CreationDate = indianTime;
                        Oss.ItemMultiMRPId = itm.ItemMultiMRPId;
                        TemporaryCurrentStockHistoryDB.Add(Oss);

                        item.CurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                        item.DamageCurrentInventory = item.DamageCurrentInventory + Convert.ToInt32(DamQtyReciv);
                        item.ExpCurrentInventory = item.ExpCurrentInventory + Convert.ToInt32(ExpQtyReciv);
                    }
                    else
                    {
                        pd.Price1 = 0;
                    }
                    pd.CreationDate = indianTime;
                    pd.QtyRecived2 = 0;
                    pd.QtyRecived3 = 0;
                    pd.QtyRecived4 = 0;
                    pd.QtyRecived5 = 0;

                    pd.DamagQtyRecived2 = 0;
                    pd.DamagQtyRecived3 = 0;
                    pd.DamagQtyRecived4 = 0;
                    pd.DamagQtyRecived5 = 0;

                    pd.ExpQtyRecived2 = 0;
                    pd.ExpQtyRecived3 = 0;
                    pd.ExpQtyRecived4 = 0;
                    pd.ExpQtyRecived5 = 0;

                    /////for FirstMRP
                    //pd.MRP = pd.Price;
                    var amt = pd.QtyRecived1 * pd.Price1;
                    pd.BatchNo1 = pd.BatchNo1;
                    pd.MFGDate1 = pd.MFGDate1;
                    pd.ItemName1 = pd.ItemName;
                    pd.ItemMultiMRPId1 = pd.ItemMultiMRPId;
                    pd.GRDate1 = indianTime;
                    pd.itemBaseName = itm.itemBaseName;
                    pd.ItemNumber = itm.Number;
                    pd.TotalTaxPercentage = itmTax.TotalTaxPercentage;
                    if (pd.dis1 != 0 && pd.dis1 != null)
                    {
                        pd.PriceRecived = ((amt * 100) / (100 + pd.dis1)).GetValueOrDefault();
                    }
                    else
                    {
                        pd.PriceRecived = amt.GetValueOrDefault();
                    }
                    if (pd.TotalQuantity > (pd.QtyRecived1))
                    {
                        pd.TotalAmountIncTax = amt.GetValueOrDefault();
                        pd.Status = "UN Partial Received";
                        PurchaseOrderRecivedDetails.Add(pd);
                        int id = this.Commit();
                    }
                    else
                    {
                        if (pd.Status != "UN Received")
                        {
                            pd.TotalAmountIncTax = amt.GetValueOrDefault();
                            pd.Status = "UN Received";
                            PurchaseOrderRecivedDetails.Add(pd);
                            int id = this.Commit();
                        }
                    }
                }
            }
            else
            {
                if (item == null)
                {
                    var Mitem = ItemMultiMRPDB.Where(x => x.ItemNumber == itm.Number && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();
                    if (Mitem != null)
                    {
                        TemporaryCurrentStock newCstk = new TemporaryCurrentStock();
                        newCstk.CompanyId = itm.CompanyId;
                        newCstk.itemBaseName = itm.itemBaseName;
                        newCstk.ItemNumber = itm.Number;
                        newCstk.WarehouseId = itm.WarehouseId;
                        newCstk.WarehouseName = itm.WarehouseName;
                        newCstk.CurrentInventory = 0;
                        newCstk.DamageCurrentInventory = 0;
                        newCstk.ExpCurrentInventory = 0;
                        newCstk.CreationDate = indianTime;
                        newCstk.UpdatedDate = indianTime;
                        newCstk.MRP = Mitem.MRP;
                        newCstk.UnitofQuantity = Mitem.UnitofQuantity;
                        newCstk.UOM = Mitem.UOM;
                        newCstk.ItemMultiMRPId = Mitem.ItemMultiMRPId;
                        newCstk.itemname = newCstk.itemBaseName + " " + newCstk.MRP + " MRP " + newCstk.UnitofQuantity + " " + newCstk.UOM;   //itm.itemname;
                        TemporaryCurrentStockDB.Add(newCstk);
                        this.Commit();
                    }
                    //again call 
                    item = TemporaryCurrentStockDB.Where(x => x.ItemNumber == itm.Number && x.WarehouseId == pd.WarehouseId && x.CompanyId == pd.CompanyId && x.ItemMultiMRPId == pd.ItemMultiMRPId).SingleOrDefault();

                }
                if (item != null)
                {
                    var QtyReciv = 0;
                    var DamQtyReciv = 0;
                    var ExpQtyReciv = 0;
                    if (count == 2 && podr.QtyRecived2 == 0)
                    {
                        QtyReciv = pd.QtyRecived2.GetValueOrDefault();
                        DamQtyReciv = pd.DamagQtyRecived2.GetValueOrDefault();
                        ExpQtyReciv = pd.ExpQtyRecived2.GetValueOrDefault();
                        podr.BatchNo2 = pd.BatchNo2;
                        podr.MFGDate2 = pd.MFGDate2;
                        podr.ItemName2 = pd.ItemName;
                        podr.ItemMultiMRPId2 = pd.ItemMultiMRPId;
                        podr.GRDate2 = indianTime;
                        var amt = QtyReciv * pd.Price2;
                        if (pd.dis2 != 0 && pd.dis2 != null)
                        {
                            podr.dis2 = pd.dis2;
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis2)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 3 && podr.QtyRecived3 == 0)
                    {
                        QtyReciv = pd.QtyRecived3.GetValueOrDefault();
                        DamQtyReciv = pd.DamagQtyRecived3.GetValueOrDefault();
                        ExpQtyReciv = pd.ExpQtyRecived3.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price3;
                        podr.BatchNo3 = pd.BatchNo3;
                        podr.MFGDate3 = pd.MFGDate3;
                        podr.ItemName3 = pd.ItemName;
                        podr.ItemMultiMRPId3 = pd.ItemMultiMRPId;
                        podr.GRDate3 = indianTime;
                        if (pd.dis3 != 0 && pd.dis3 != null)
                        {
                            podr.dis3 = pd.dis3;
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis3)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 4 && podr.QtyRecived4 == 0)
                    {
                        QtyReciv = pd.QtyRecived4.GetValueOrDefault();
                        DamQtyReciv = pd.DamagQtyRecived4.GetValueOrDefault();
                        ExpQtyReciv = pd.ExpQtyRecived4.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price4;
                        podr.BatchNo4 = pd.BatchNo4;
                        podr.MFGDate4 = pd.MFGDate4;
                        podr.ItemName4 = pd.ItemName;
                        podr.ItemMultiMRPId4 = pd.ItemMultiMRPId;
                        podr.GRDate4 = indianTime;
                        if (pd.dis4 != 0 && pd.dis4 != null)
                        {
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis4)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 5 && podr.QtyRecived5 == 0)
                    {
                        QtyReciv = pd.QtyRecived5.GetValueOrDefault();
                        DamQtyReciv = pd.DamagQtyRecived5.GetValueOrDefault();
                        ExpQtyReciv = pd.ExpQtyRecived5.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price5;
                        podr.BatchNo5 = pd.BatchNo5;
                        podr.MFGDate5 = pd.MFGDate5;
                        podr.ItemName5 = pd.ItemName;
                        podr.ItemMultiMRPId5 = pd.ItemMultiMRPId;
                        podr.GRDate5 = indianTime;
                        if (pd.dis5 != 0 && pd.dis5 != null)
                        {
                            podr.dis5 = pd.dis5;
                            podr.PriceRecived += ((amt * 100) / (100 + pd.dis5)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived += amt.GetValueOrDefault();
                        }
                    }
                    else if (count == 1 && podr.QtyRecived1 == 0)
                    {
                        QtyReciv = pd.QtyRecived1.GetValueOrDefault();
                        DamQtyReciv = pd.DamagQtyRecived1.GetValueOrDefault();
                        ExpQtyReciv = pd.ExpQtyRecived1.GetValueOrDefault();
                        var amt = QtyReciv * pd.Price1;
                        podr.BatchNo1 = pd.BatchNo1;
                        podr.MFGDate1 = pd.MFGDate1;
                        podr.ItemName1 = pd.ItemName;
                        podr.ItemMultiMRPId1 = pd.ItemMultiMRPId;
                        podr.GRDate1 = indianTime;
                        if (pd.dis1 != 0 && pd.dis1 != null)
                        {
                            podr.dis1 = pd.dis1;
                            podr.PriceRecived = ((amt * 100) / (100 + pd.dis1)).GetValueOrDefault();
                        }
                        else
                        {
                            podr.PriceRecived = amt.GetValueOrDefault();
                        }
                    }
                    if (QtyReciv != 0)
                    {
                        TemporaryCurrentStockHistory Oss = new TemporaryCurrentStockHistory();
                        if (item != null)
                        {
                            Oss.StockId = item.StockId;
                            Oss.ItemNumber = item.ItemNumber;
                            Oss.itemname = item.itemname;
                            Oss.CurrentInventory = item.CurrentInventory;
                            Oss.OdOrPoId = pd.PurchaseOrderId;
                            Oss.CurrentInventoryIn = Convert.ToInt32(QtyReciv);
                            Oss.DamageInventoryIn = Convert.ToInt32(DamQtyReciv);
                            Oss.ExpCurrentInventoryIn = Convert.ToInt32(ExpQtyReciv);
                            Oss.TotalCurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                            Oss.DamageCurrentInventory = item.DamageCurrentInventory + Convert.ToInt32(DamQtyReciv);
                            Oss.ExpCurrentInventory = item.ExpCurrentInventory + Convert.ToInt32(ExpQtyReciv);
                            Oss.WarehouseName = item.WarehouseName;
                            Oss.Warehouseid = item.WarehouseId;
                            Oss.CompanyId = item.CompanyId;

                            Oss.CreationDate = indianTime;
                            Oss.ItemMultiMRPId = item.ItemMultiMRPId;
                            TemporaryCurrentStockHistoryDB.Add(Oss);
                            int id = this.Commit();
                        }
                        item.CurrentInventory = item.CurrentInventory + Convert.ToInt32(QtyReciv);
                        item.DamageCurrentInventory = item.DamageCurrentInventory + Convert.ToInt32(DamQtyReciv);
                        item.ExpCurrentInventory = item.ExpCurrentInventory + Convert.ToInt32(ExpQtyReciv);
                        this.UpdateTempCurrentStock(item);
                        var irconfirm = IR_ConfirmDb.Where(x => x.PurchaseOrderId == podr.PurchaseOrderId && x.ItemId == podr.ItemId && x.CompanyId == podr.CompanyId).SingleOrDefault();
                        if (irconfirm != null)
                        {
                            irconfirm.QtyRecived += QtyReciv;
                            IR_ConfirmDb.Attach(irconfirm);
                            this.Entry(irconfirm).State = EntityState.Modified;
                            this.Commit();
                        }
                    }

                    podr.TotalAmountIncTax = pd.TotalAmountIncTax;
                    podr.TaxAmount = pd.TaxAmount;
                    podr.QtyRecived1 = pd.QtyRecived1;
                    podr.QtyRecived2 = pd.QtyRecived2;
                    podr.QtyRecived3 = pd.QtyRecived3;
                    podr.QtyRecived4 = pd.QtyRecived4;
                    podr.QtyRecived5 = pd.QtyRecived5;
                    podr.DamagQtyRecived1 = pd.DamagQtyRecived1;
                    podr.DamagQtyRecived2 = pd.DamagQtyRecived2;
                    podr.DamagQtyRecived3 = pd.DamagQtyRecived3;
                    podr.DamagQtyRecived4 = pd.DamagQtyRecived4;
                    podr.DamagQtyRecived5 = pd.DamagQtyRecived5;
                    podr.ExpQtyRecived1 = pd.ExpQtyRecived1;
                    podr.ExpQtyRecived2 = pd.ExpQtyRecived2;
                    podr.ExpQtyRecived3 = pd.ExpQtyRecived3;
                    podr.ExpQtyRecived4 = pd.ExpQtyRecived4;
                    podr.ExpQtyRecived5 = pd.ExpQtyRecived5;

                    double? PriceRecived = 0.00;
                    if (count == 1 && pd.Price1 != null)
                    {
                        if (podr.QtyRecived1 > 0)
                            podr.Price1 = pd.Price1;
                        PriceRecived += pd.QtyRecived1 * pd.Price1;
                    }
                    if (count == 2 && pd.Price2 != null)
                    {
                        if (podr.QtyRecived2 > 0)
                            podr.Price2 = pd.Price2;
                        PriceRecived += pd.QtyRecived2 * pd.Price2;
                    }
                    if (count == 3 && pd.Price3 != null)
                    {
                        if (podr.QtyRecived3 > 0)
                            podr.Price3 = pd.Price3;
                        PriceRecived += pd.QtyRecived3 * pd.Price3;
                    }
                    if (count == 4 && pd.Price4 != null)
                    {
                        if (podr.QtyRecived4 > 0)
                            podr.Price4 = pd.Price4;
                        PriceRecived += pd.QtyRecived4 * pd.Price4;
                    }
                    if (count == 5 && pd.Price5 != null)
                    {
                        if (podr.QtyRecived5 > 0)
                            podr.Price5 = pd.Price5;
                        PriceRecived += pd.QtyRecived5 * pd.Price5;
                    }
                    if (pd.TotalQuantity > (pd.QtyRecived1 + pd.QtyRecived2 + pd.QtyRecived3 + pd.QtyRecived4 + pd.QtyRecived5))
                    {
                        podr.TotalAmountIncTax += PriceRecived.GetValueOrDefault();
                        podr.Status = "UN Partial Received";
                        PurchaseOrderRecivedDetails.Add(podr);
                        this.Entry(podr).State = EntityState.Modified;
                        this.Commit();
                    }
                    else
                    {
                        if (pd.Status != "UN Received")
                        {
                            podr.TotalAmountIncTax += PriceRecived.GetValueOrDefault();
                            podr.Status = "UN Received";
                            PurchaseOrderRecivedDetails.Add(podr);
                            this.Entry(podr).State = EntityState.Modified;
                            this.Commit();
                        }
                    }
                }
            }
            return pd;
        }
        public bool addassighncustsuppliers(Customer Customer)
        {


            var res = Customers.Where(x => x.CustomerId == Customer.CustomerId && x.Deleted == false).SingleOrDefault();
            if (res != null)
            {
                res.AgentCode = Customer.AgentCode;
                //res.ExecutiveId = Customer.ExecutiveId;
                //res.Day = Customer.Day;
                //res.BeatNumber = Customer.BeatNumber;
                res.UpdatedDate = indianTime;
                this.Entry(res).State = EntityState.Modified;
                int id = this.Commit();
                return true;
            }
            return false;

        }

        public bool IsCustFirstOrder(int CustomerId)
        {
            bool result = false;
            var Custparam = new SqlParameter("@CustomerId", CustomerId);
            int Count = this.Database.SqlQuery<int>("exec IsCustFirstOrder @CustomerId", Custparam).FirstOrDefault();
            if (Count == 0) { result = true; }
            return result;
        }


        public bool MongoInsertItemLimitcheck(int ItemmultiMRPid, int qty, string Guid, int itemid, int wid)
        {
            bool res = false;
            AngularJSAuthentication.API.Helpers.MongoDbHelper<ItemLimitValidation> mongo = new MongoDbHelper<ItemLimitValidation>();
            ItemLimitValidation obj = new ItemLimitValidation();
            if (ItemmultiMRPid > 0 && qty > 0 && Guid != null)
            {
                obj.ItemId = itemid;
                obj.WarehouseId = wid;
                obj.ItemMultiMRPId = ItemmultiMRPid;
                obj.Qty = qty;
                obj.Guid = Guid;
                obj.CreatedDate = DateTime.Now;
                res = mongo.Insert(obj);
                return res;
            }
            else
            {
                return res;
            }
        }
        public bool DeleteItemLimit(string Guid)
        {
            bool res = false;
            AngularJSAuthentication.API.Helpers.MongoDbHelper<ItemLimitValidation> mongo = new MongoDbHelper<ItemLimitValidation>();
            var Data = mongo.Select(x => x.Guid == Guid).ToList();
            if (Data != null)
            {
                foreach (var item in Data)
                {
                    res = mongo.Delete(item.Id, "ItemLimitValidation");
                }
            }
            else
            {
                return res;
            }
            return res;
        }
    }
}